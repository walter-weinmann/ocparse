%%%-------------------------------------------------------------------
%%% File        : performance_statement_legacy_SUITE.erl
%%% Description : Test Suite for rule: statement.
%%%
%%% Created     : 29.12.2016
%%%-------------------------------------------------------------------
-module(performance_statement_legacy_SUITE).

-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - SUITE
%%--------------------------------------------------------------------

suite() ->
    [
        {timetrap, {minutes, 10}}
    ].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - ALL
%%--------------------------------------------------------------------

all() ->
    [test_statement].

%%--------------------------------------------------------------------
%% TEST CASES
%%--------------------------------------------------------------------

test_statement(_Config) ->
    octest_legacy:ct_string("Load Csv From Shortestpath((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))[[`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`}[@usn5..{@usn6}]|{1000}[..`5esn`][..9e12]]..][{_usn4:`8esn`[.12e12..]}..] As usn1 Fieldterminator \"d_str\" Create Unique #usn8=Shortestpath(((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))),`2esn`=(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1}) Merge Allshortestpaths(({`4esn`:{7}[0x0][1e1]})) On Create Set #usn8 =Null In {7} Union Remove ({`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`5esn`:`7esn`{`3esn`:Count ( * )[_usn4..],`8esn`:false[..usn2][..999]})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}).#usn8,None(_usn3 In `8esn`[_usn4] Where $`4esn`[usn2..]).@usn6?.`1esn` Union All Foreach(@usn6 In {usn2} Contains {0}| Create Unique Shortestpath(((:usn1{#usn8:2.9e1[{`2esn`}]})<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``))),((_usn3 {`3esn`:`3esn` Is Null,`1esn`:$`8esn`[0x0][.9e0]}))) With Distinct *,$`5esn`[{@usn6}..{`7esn`}],.9e-12[.12e12..][0Xa..] As _usn3 Order By {12}[true..][7..] Ascending,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Asc,({#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]})<-[`8esn`*]-(#usn8 )[..Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn`[0X0123456789ABCDEF..][`8esn`..]|$_usn3 =~'s_str' =~12)][..`1esn`(Distinct .9e1[$`1esn`..][$``..])] Ascending Skip {#usn7} Is Not Null Match ``=Shortestpath(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})),#usn7=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 ))) Using Join On usn1,`1esn`,_usn4 Using Join On `5esn`,usn1,`7esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[@usn6:_usn3]->()Assert Exists(None(`7esn` In 0.12 Is Not Null Where $0 Contains $7)._usn3!)"),
    octest_legacy:ct_string("Foreach(`1esn` In [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12][All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where _usn4[{``}..{`6esn`}][$7..$_usn3])..][Case When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else @usn5[9e-1..{`1esn`}] End..]| Remove Single(`6esn` In 010[{`1esn`}..] Where $usn1[9e1][{999}]).usn1!,Single(usn1 In {#usn7} =~.12e12 =~9e0 Where ``[$#usn7]).`2esn`)"),
    octest_legacy:ct_string("Create `5esn`=Shortestpath((({_usn3:.9e12 Contains 0 Contains $0}))),usn2=(`8esn` :@usn6:_usn3)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) With Distinct 0.0[$999][`6esn`] Order By $`2esn`[`8esn`..] Descending,({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}) Contains Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Contains All(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]) Descending Limit $`5esn` =~Count(*) =~1.9e0 With Distinct Count(*)[Null..][01234567..] As `1esn`,{#usn7} Is Not Null As `7esn`,10.12e12[usn2] Union Start ``=Node:`7esn`({#usn7}) Where {`7esn`} =~\"d_str\" =~{``} Create Allshortestpaths((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})),`8esn`=(((`3esn` $0)-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0})<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]-(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})))"),
    octest_legacy:ct_string("Optional Match #usn8=({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)}),`7esn`=(((usn2 :`2esn`:`4esn`{`6esn`:Count(*)[$7]})<-[_usn3:@usn5|:#usn7 *..07]-({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000})<-[?:_usn3{#usn7:3.9e-1[..$1000][..0.12]}]-(_usn3 {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}))) Using Index @usn5:`5esn`(usn2) Union All Unwind {`8esn`} Contains $@usn5 As _usn4"),
    octest_legacy:ct_string("Unwind $`` =~.1e-1 As usn1 Union All Match `6esn`=(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Where 0[..{#usn7}][..$_usn3]"),
    octest_legacy:ct_string("Create Constraint On()<-[`5esn`:#usn8]-()Assert Exists({`6esn`:4.9e12 Is Not Null Is Not Null,_usn4:`4esn`[9e-12..true]}.`2esn`?.`8esn`?.usn1)"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`3esn`)Assert Exists(Reduce(@usn5=$0 Contains $123456789 Contains {`3esn`},usn2 In .12e-12 Ends With `2esn`|010[..9e-1][..0X7])._usn3!)"),
    octest_legacy:ct_string("Merge Allshortestpaths((((`4esn` :``{_usn4:$_usn3[0x0][{0}],@usn6:9e-12 Is Not Null Is Not Null})-[`3esn`:@usn6|:`4esn`]-(`1esn` :usn2{`8esn`:12.0[...0e0]})-[usn2:_usn3 *0xabc..12]->(usn1 :usn1{#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})))) On Match Set Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999}).`5esn`.#usn8!.`3esn`? =$12 In {usn2},`4esn`(Distinct .9e0[07..][4.9e12..]).`4esn`! =Reduce(#usn7=#usn8[\"d_str\"..usn2],#usn7 In .0e-0 In 12|`` Ends With 1.0 Ends With usn1) Ends With [_usn3 In `8esn`[_usn4] Where _usn4[{``}..{`6esn`}][$7..$_usn3]] Ends With Shortestpath((((:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[`2esn`?:`8esn`|:#usn8]->(`` )<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)))),`5esn`+=7 Starts With 9e-12 Load Csv With Headers From $`1esn`[4.9e12..][_usn3..] As `2esn` Fieldterminator 's_str' Foreach(_usn4 In Shortestpath((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5))[Allshortestpaths((#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}))]| Delete 9e12 Is Not Null Is Not Null,.9e1 Is Null Is Null Delete $1000[$`2esn`..])"),
    octest_legacy:ct_string("Create (((@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[`7esn`?:`2esn`|`5esn` *0]->({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000}))),((#usn8 :@usn5)<-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 )<-[?:`1esn`|:`1esn`{`5esn`:9e1[0.0]}]->(`8esn` )) Remove .1e-1._usn3"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`1esn`)Assert Exists(Single(usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]).`8esn`?)"),
    octest_legacy:ct_string("Drop Constraint On()-[#usn7:usn1]->()Assert Exists(Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`4esn`} Ends With Count(*)|{`7esn`} =~\"d_str\" =~{``})._usn4?)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`3esn`)Assert (`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})._usn3!.`4esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On(@usn6:`4esn`)Assert Exists(Reduce(@usn6=true In 0.0,`6esn` In 010[{`1esn`}..]|2.9e1[2.12..1.9e0]).`4esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:_usn3)Assert Extract(usn1 In \"d_str\" Contains {@usn6} Where $`` =~.1e-1).`4esn`.usn1?._usn3? Is Unique"),
    octest_legacy:ct_string("Load Csv With Headers From $`8esn` Starts With {`7esn`} As #usn8 Fieldterminator \"d_str\" Union Merge @usn6=((`1esn` :`8esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})) On Create Set #usn7 =0.0[$`4esn`],count({123456789} Starts With $_usn4 Starts With 0x0).#usn7? =5.9e-12 Contains {12} Contains {#usn8} On Create Set `3esn` =$`1esn`[4.9e12..][_usn3..] Load Csv With Headers From 0Xa In 1.0 In $@usn5 As @usn5 Fieldterminator \"d_str\" Start @usn6=Relationship:usn2({usn2}) ,`7esn`=Node:#usn8(@usn5={@usn6}) Union Delete 1e-1 Contains 0.0,1e-1 Starts With .1e1 Starts With 12.0 With  $@usn5[.9e-1],.1e1 In 12.0 In $``,@usn5[9e-1..{`1esn`}] As `` Order By Filter(usn1 In $@usn6 Is Null Is Null Where {`3esn`}[#usn7]) Is Null Is Null Desc,`4esn`[12.0..][9.1e-1..] Descending,$_usn3 In `2esn` In `3esn` Asc Limit 1.9e0 =~.0e0 =~0X7 Foreach(usn2 In (`6esn` $_usn3)<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 :#usn7:`8esn`)[Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End]| Start _usn4=Relationship( {#usn8}) ,`4esn`=Node:usn2(usn1={_usn3}))"),
    octest_legacy:ct_string("Merge usn2=Shortestpath((`6esn` {`3esn`:Count ( * )[_usn4..]})<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(`5esn` :``{_usn3:$_usn4[..$999],`7esn`:0X0123456789ABCDEF Ends With {1000}})) Merge `7esn`=(({_usn4:1e-1[$`4esn`]})) On Create Set `3esn` =.9e-12[{@usn5}] Union All Unwind Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) As @usn6 Union All Delete 0e-0[..7.0e-0][..{`8esn`}] Remove (`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[{`2esn`:9e1[$``.._usn4][999..`3esn`],usn1:0.0[`7esn`]}]->(#usn8 :`5esn`:`7esn`{usn2})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}).@usn5!,Case When 11.12e-12 Ends With 's_str' Then #usn7 Contains .0e0 Contains $@usn6 When $#usn7 Then `7esn`[1.9e0..5.9e-12][9e0..@usn5] Else 0.12 Is Not Null End.#usn7!"),
    octest_legacy:ct_string("Remove Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]).`1esn`.#usn8!,(`6esn` {`3esn`:Count ( * )[_usn4..]})-[#usn8? *0Xa..12]->(`7esn` {#usn8:2.9e1[{`2esn`}]}).#usn8.`3esn`,{usn2:{usn1} In Count ( * ) In 12e12}.`7esn`?.`3esn`! Detach Delete $`6esn`[..01][..{_usn3}],true Contains 0X7 Contains $#usn8 Union Start `2esn`=Rel:`6esn`(`4esn`=\"d_str\") ,`8esn`=Relationship:`8esn`(#usn7='s_str')Where 0e-0 In 0X0123456789ABCDEF In `3esn` Create _usn4=((:@usn5{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[?:_usn4|:`1esn` *..07{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null})) Match `7esn`=Allshortestpaths((`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})<-[_usn3? *..123456789{`6esn`:.0e-0[..``][..$7],usn2:{usn2} Ends With {@usn6} Ends With 1000}]-(`8esn` :`4esn`:usn2{@usn6:$#usn7 Starts With $123456789})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(#usn8 :_usn4:`2esn`{`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})) Using Index ``:@usn5(usn1) Using Scan `1esn`:_usn3 Union Remove (:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[?:`1esn`|:`1esn` *999..123456789]->(_usn3 {`3esn`:`3esn` Is Null,`1esn`:$`8esn`[0x0][.9e0]})-[`6esn`:``|:`7esn` *0{`4esn`:00 Is Not Null Is Not Null}]->(`2esn` {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}).`4esn` Create Unique ``=Shortestpath(((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})-[? *..123456789{@usn5:{usn2} Ends With {@usn6} Ends With 1000}]->(:`7esn`{`5esn`:{`8esn`} Starts With .9e-1 Starts With 1000})<-[_usn3?:`6esn`{_usn4:07[{@usn5}..],usn2:$`4esn` Is Null Is Null}]->(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))),Allshortestpaths((`6esn` :`5esn`:`7esn`)-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 {`2esn`:5.9e-12[0x0..]}))"),
    octest_legacy:ct_string("Drop Constraint On()-[``:_usn4]-()Assert Exists((usn1 )<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})-[?:`7esn`|usn1 *01234567..{usn1:9e12 Is Null Is Null}]-(`3esn` :`2esn`:`4esn`).`5esn`?.`3esn`!.#usn8)"),
    octest_legacy:ct_string("Match _usn4=(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[:`6esn` *..0x0{``}]-(#usn8 :``{usn2:9e1 =~$`8esn` =~10.12e12}) Using Scan @usn5:`5esn` Where 's_str' =~$usn2 =~{7} Create Unique (`1esn` {usn2:.9e-12[.12e12..][0Xa..]}),Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})))"),
    octest_legacy:ct_string("Match `3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})),usn1=((`` :`7esn`)) Using Index @usn5:_usn4(usn2) Using Join On `1esn`,`3esn`,`5esn` Union Return Distinct *,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) As #usn8,Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``}) In (_usn4 :_usn3)<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-({#usn7:12e12[.9e12..07]}) In @usn5({1000}[0..]) Unwind .1e-1 Is Not Null As `3esn` Union All Detach Delete .1e-1 Contains .12e-12,{`5esn`:$`6esn`[@usn6...9e-12]}[{usn1:$_usn3[0x0][{0}]}..Filter(_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`])][Case When .12e12 Ends With 07 Ends With 3.9e-1 Then 01234567[\"d_str\"..][$`4esn`..] End..Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End],0xabc Is Null Is Null Start _usn4=Node:@usn6(#usn8='s_str') "),
    octest_legacy:ct_string("Load Csv From None(`2esn` In $@usn5 Is Not Null Is Not Null Where usn1 Ends With 11.12e-12 Ends With 5.9e-12) Is Not Null Is Not Null As ``  Create Shortestpath(((`7esn` {@usn5:Count ( * )[_usn4..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))) Union Start @usn5=Rel:#usn7(usn1={`6esn`}) Where #usn7 Contains .0e0 Contains $@usn6 Return Count(*) Starts With {usn2} Starts With `2esn` As `3esn`,0.12 Ends With 7 Ends With 12,`5esn`({`5esn`}[01234567..][5.9e-12..],5.9e-12 Is Null Is Null)[Reduce(#usn7={12} Ends With $`3esn` Ends With 0xabc,usn1 In $@usn6 Is Null Is Null|`1esn`[Null][{@usn6}])..@usn5(`3esn` Contains `2esn` Contains {_usn4},2.9e1 In {``})][Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789}))..Any(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`)] As usn2 Delete $`8esn`[0x0][.9e0],12e12[usn2..$`6esn`]"),
    octest_legacy:ct_string("Optional Match #usn8=Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))),Shortestpath(((@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})-[@usn5:`6esn` *..00]->(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Using Index `3esn`:_usn4(@usn6) Where @usn6[0x0..][$_usn4..] Load Csv From Any(usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-12[010..{#usn7}][{123456789}..7])[[usn1 In $@usn6 Is Null Is Null Where _usn3 =~{7} =~123.654|`1esn` =~{12} =~{999}]][(`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[#usn8?:`8esn`|:#usn8 *999..123456789]->(`3esn` :usn2)<-[{usn2:{1000}[..{usn1}][..1e-1]}]->(`4esn` {`6esn`})] As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null As `2esn` Union All Remove `8esn`(#usn7[$`8esn`][{`3esn`}],`6esn`[$@usn5][01]).usn1.@usn5.`4esn`?,({``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]}).`1esn`?,None(usn1 In \"d_str\" Contains {@usn6} Where false =~{`8esn`} =~00).`5esn`!.#usn8! Create Unique ((`4esn` :#usn7:`8esn`)<-[:`8esn`|:#usn8{_usn4:$#usn7 Ends With {`5esn`} Ends With 01}]-({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[usn1:#usn7|:@usn5 *999..123456789]->(`5esn` :``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})),(`1esn` {@usn6:6.0e0[$#usn7..$1000]})-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}) Foreach(`1esn` In None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..])| Create Unique (((@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})-[#usn8?*..]-(`` {`6esn`:1000[{`1esn`}..][$`3esn`..]})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}))),Allshortestpaths((`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`))) Union Delete @usn6[0x0..][$_usn4..],1e1 =~{@usn5} =~`7esn`,Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]) Is Null"),
    octest_legacy:ct_string("Foreach(`7esn` In $`1esn`[..1000][..\"d_str\"]| Create Unique #usn8=((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) Create usn2=Allshortestpaths(((:`8esn`{@usn6:$`6esn`[$_usn3..{1000}],_usn3:0xabc[..{usn1}][..\"d_str\"]}))),#usn7=Shortestpath(()<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]-({`4esn`:.9e12[6.0e0..][@usn5..],``:1.0 Is Not Null})-[`3esn`? *..07]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]}))) Optional Match ``=(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}) Using Scan `6esn`:#usn8 Using Index @usn5:@usn6(`5esn`) Union With Distinct [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] =~Single(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) =~Case @usn5 In Null When {usn1} Is Not Null Then $`5esn` Is Null When $`8esn`[..5.9e-12][..`8esn`] Then 7.0e-0[$`6esn`..] Else $0 Contains $123456789 Contains {`3esn`} End As `5esn` Order By `1esn` In 6.0e0 In 12 Descending Limit {`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}} Starts With Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With $`7esn` Starts With 999|$`1esn`[..12e-12][...9e12]) Starts With (`4esn` :`8esn`{12})<-[`2esn`?:`4esn`|:`2esn`]-(`4esn` {`8esn`:5.9e-12[0x0..]})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}) Union All With Distinct *,$`5esn`[{@usn6}..{`7esn`}],.9e-12[.12e12..][0Xa..] As _usn3 Order By {12}[true..][7..] Ascending,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Asc,({#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]})<-[`8esn`*]-(#usn8 )[..Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn`[0X0123456789ABCDEF..][`8esn`..]|$_usn3 =~'s_str' =~12)][..`1esn`(Distinct .9e1[$`1esn`..][$``..])] Ascending Skip {#usn7} Is Not Null Start `5esn`=Node:#usn7({usn1}) Where {1000} =~4.9e12 =~9e1 Unwind Case When {usn2} In false Then {`3esn`} Is Not Null Is Not Null When 6.0e0 Is Null Then {`4esn`}[{`3esn`}][$`2esn`] End[exists(Distinct {`3esn`}[#usn7],@usn5 =~$#usn7 =~{usn1})..] As #usn8"),
    octest_legacy:ct_string("Create _usn3=(`3esn` :`2esn`:`4esn`) Start @usn5=Node:#usn7(usn1={`6esn`}) ,`4esn`=Node( {``})Where $123456789 Match usn2=(((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(#usn7 :`8esn`))),#usn7=Shortestpath((`1esn` :usn2{`8esn`:12.0[...0e0]})-[?:`1esn`|:`1esn` *..0x0{@usn6:.0e-0 In 12}]-(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})) Using Scan `8esn`:`4esn` Where $`7esn` In $@usn5 Union All Create Unique `2esn`=((_usn3 :`6esn`{usn2:.9e1 In .1e-1,usn2:1e-1 Contains 0.0})) Union All Remove Case $`8esn`[0x0][.9e0] When 9e1 Starts With $@usn6 Starts With 0e-0 Then {#usn8} Starts With {`2esn`} Else 9e-12[$7..] End.#usn7 Load Csv From $``[Count(*)..{12}] As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv From Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] As `3esn` Fieldterminator \"d_str\" Union All Merge `3esn`=Allshortestpaths(((`4esn` :`8esn`{`4esn`:4.9e12 Starts With {``},`8esn`:$12 Ends With {_usn4} Ends With $`8esn`})-[_usn3:`4esn`|:`2esn` *01234567..]->(`8esn` :`2esn`:`4esn`)<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))) On Match Set `3esn` =0x0 Ends With #usn8 Ends With .9e-1,`7esn`+=`4esn` Ends With 9e12 Ends With {`5esn`} Load Csv From {@usn5:$@usn5 Is Not Null Is Not Null} Contains None(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`3esn`}[..0xabc][..{`6esn`}]) As `6esn`  Return Distinct Case When 9e-12[010..{#usn7}][{123456789}..7] Then $999 =~false =~{`8esn`} When {0}[.0e-0][$`2esn`] Then 12e12 Is Not Null Is Not Null Else false[..usn2][..999] End[Allshortestpaths(((({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(@usn6 :@usn5)-[`2esn`? *7{`5esn`:false[..usn2][..999]}]-(`4esn` :@usn6:_usn3))))..All(usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null)][.9e0..`4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`)] Order By $`5esn` Is Null Desc,8.1e1[..9.1e-1][...9e1] Ascending,[`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..]) Asc Skip @usn5[{`1esn`}..][Count ( * )..] Union Start `5esn`=Node:`1esn`(@usn6={`4esn`}) ,`7esn`=Node:@usn6(`3esn`={``})Where {@usn6} In 9e12"),
    octest_legacy:ct_string("Unwind Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 10.12e12[usn2]|usn1 Ends With 11.12e-12 Ends With 5.9e-12)[Reduce(usn1={usn1} Is Not Null,usn1 In \"d_str\" Contains {@usn6}|{`3esn`} =~$`` =~$`8esn`)..Single(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12)][[usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 00 =~`4esn` =~.9e-12]..Single(@usn6 In 9e12[..usn2][.._usn3] Where 123.654 Ends With {1000} Ends With 9e12)] As @usn5 Return *,$1000[..0e-0][..010] As _usn4,Any(usn1 In $@usn6 Is Null Is Null)[Case {_usn3}[{0}...9e-1][9e-1...0e0] When 010[..9e-1][..0X7] Then $0 Ends With $usn1 Ends With {``} End..Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]})))] As `4esn` Order By 9e-12[0e0..@usn5] Ascending,{``:01234567[10.12e12][0Xa]} Is Null Is Null Descending,{_usn3} In $#usn8 In $12 Asc Skip Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789)[..All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 1e1 =~{@usn5} =~`7esn`)][..Case 07[..$`5esn`] When 00[$_usn4][$`1esn`] Then {#usn7}[.12e-12] Else `5esn` Contains 0 Contains $12 End] Start ``=Node:_usn4({999}) ,``=Node:#usn8(usn2={@usn5}) Union All Foreach(`` In Filter(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Starts With (#usn7 :``)-[`3esn`{`4esn`:12e12[.9e12..07]}]-(`1esn` :``{_usn4:$@usn5 =~{`3esn`}})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}) Starts With Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12)| Create ((:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})),`4esn`=((`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[?$999]-(`8esn` :@usn6:_usn3)<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})) Start usn1=Rel:`8esn`({`3esn`}) ,#usn8=Rel:`1esn`(`4esn`={@usn5}))"),
    octest_legacy:ct_string("Load Csv From {@usn6} Is Null As _usn3  Union All Merge `8esn`=Allshortestpaths(((`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})-[`2esn`?:@usn6|:`4esn` *010..0{`4esn`:Null[$`3esn`..][`1esn`..],_usn3:6.0e0[$#usn7..$1000]}]-(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]})-[`3esn`:#usn8|:``{``:$``[9e0..][5.9e-12..],``:$#usn7 Contains 3.9e-1}]->(:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]}))) On Match Set `` =6.0e0[$12..0.12],#usn7+=7 In 1e1 In {``} On Match Set `` =$usn2 Starts With $999 Starts With .0e0,All(usn1 In \"d_str\" Contains {@usn6} Where $1000 Is Null)._usn3?._usn4!.`7esn`? ={usn1:$usn1[9e1][{999}],#usn8:0e-0[$``..10.12e12]}[Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End] Create `8esn`=Shortestpath(((:usn1{#usn8:2.9e1[{`2esn`}]})<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``))) Unwind {12}[true..][7..] As @usn5"),
    octest_legacy:ct_string("With  $#usn8 Starts With 9.1e-1 Starts With {#usn7} As `8esn`,$`1esn` Contains 1000 Contains $123456789 As _usn3 Order By 00[{1000}] Descending,'s_str'[$_usn3..][9.1e-1..] Desc,$_usn4 =~$#usn8 =~{`4esn`} Desc Skip $@usn6[...9e-1] Limit $#usn7[01..2.12][2.12..3.9e-1] Where {#usn7} Starts With .1e-1 Return Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] As #usn8,[`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..]),{`7esn`} Is Not Null Is Not Null As `1esn` Order By 00[{1000}] Descending,'s_str'[$_usn3..][9.1e-1..] Desc,$_usn4 =~$#usn8 =~{`4esn`} Desc Skip $``[9e12..] Limit Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[`8esn`(0X0123456789ABCDEF Is Not Null Is Not Null,{usn1} Is Not Null Is Not Null)..][{usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}..] Create Unique `7esn`=Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]}))))"),
    octest_legacy:ct_string("Drop Constraint On(``:`8esn`)Assert Exists(Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where 07[{@usn5}..]).`7esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From $@usn5[.9e-1] As `7esn`  Return *,123456789[#usn7..9e-1][10.12e12..{0}] Order By [`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]] Is Not Null Is Not Null Desc,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) Desc Merge usn1=Shortestpath((`1esn` :`7esn`{usn1:3.9e-1 Starts With .9e0 Starts With {#usn7}})<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`6esn` :`4esn`:usn2)-[`1esn`]-(`2esn` :`2esn`:`4esn`{#usn7:0 Starts With `7esn` Starts With 9e0})) On Create Set _usn4+=123456789[_usn4..`1esn`][$`6esn`..{@usn6}],#usn7+=1.9e0[..1.0][..`6esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From $0 Is Null As `7esn` Fieldterminator \"d_str\" Detach Delete $_usn3[0X0123456789ABCDEF..][0x0..],0[10.12e12]"),
    octest_legacy:ct_string("Create Constraint On()<-[`5esn`:`1esn`]-()Assert Exists(Case When `2esn` Starts With 010 Starts With `` Then 00[$``] Else @usn6[0x0..][$_usn4..] End.@usn6)"),
    octest_legacy:ct_string("Unwind $12 =~4.9e12 As `5esn` Merge _usn3=Shortestpath(((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))) On Create Set @usn5 ={``}[$usn2..00][{_usn3}..123.654],_usn4 =Reduce(`3esn`=`7esn`[1.9e0..5.9e-12][9e0..@usn5],`` In `7esn` =~#usn8 =~\"d_str\"|{_usn3}[{0}...9e-1][9e-1...0e0])[Case false Contains {`7esn`} When `3esn` Is Null Then `1esn` Is Not Null Is Not Null Else .9e-1 Is Null Is Null End..][Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999})..],{@usn5:`2esn`}.``! =\"d_str\" Starts With ``"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:usn2)Assert Exists(Case When $`4esn` Ends With {999} Then 6.0e0[$#usn7..$1000] When .12e12 Is Not Null Then {`6esn`} Starts With .12e-12 End.`5esn`!)"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:#usn8]-()Assert Exists(Case When 9e0[{7}...0e-0][Null..@usn5] Then $usn2 In #usn7 In #usn7 When 999 Ends With {#usn8} Then `1esn` =~{12} =~{999} Else {`1esn`} Is Null End.@usn6)"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[`8esn`(0X0123456789ABCDEF Is Not Null Is Not Null,{usn1} Is Not Null Is Not Null)..][{usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}..] As usn2 Fieldterminator \"d_str\" Union All Load Csv From None(`2esn` In $@usn5 Is Not Null Is Not Null Where {7}[$@usn5..123456789][1e1..1.9e0]) Ends With Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End Ends With {_usn3:$1000 Starts With {@usn6} Starts With $@usn5} As `4esn` Fieldterminator \"d_str\" Union All Load Csv With Headers From 2.9e1 =~{123456789} =~01 As _usn3 Fieldterminator \"d_str\" With Distinct Any(`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]) In Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4}) Skip {usn2} Contains {0}"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:_usn4)Assert [`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where .12e-12[9e1]|.9e0[07..][4.9e12..]].usn2 Is Unique"),
    octest_legacy:ct_string("Start #usn7=Rel:@usn6({1000}) ,`5esn`=Node:`1esn`(@usn6={`4esn`})Where Count(*) Starts With 07 Starts With $#usn7 Union Create Unique @usn6=((`1esn` :`8esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))"),
    octest_legacy:ct_string("Create Constraint On()-[`2esn`:`1esn`]-()Assert Exists(Single(#usn7 In .0e-0 In 12 Where {0}[.0e-0][$`2esn`]).`1esn`.@usn6?.@usn6!)"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:#usn7)Assert Exists(Any(`` In `7esn` =~#usn8 =~\"d_str\" Where 12e12 Is Not Null Is Not Null).`5esn`!)"),
    octest_legacy:ct_string("Optional Match `6esn`=(:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[:`2esn`|`5esn`{`8esn`:$`4esn`[$@usn6...12e12]}]-(usn1 {@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]})<-[?:usn1|usn2{#usn8:'s_str'[`2esn`][12.0]}]->(:`1esn`:``),(({`6esn`:3.9e-1[..$1000][..0.12]})-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-(:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})) Using Join On @usn5,_usn4 Using Index `6esn`:`8esn`(`2esn`) Union Match `8esn`=Allshortestpaths(({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})),``=(((#usn7 )-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(`2esn` :@usn5)<-[?:`2esn`|`5esn` *..123456789$1000]-({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}))) Using Scan `8esn`:#usn7 Using Index `3esn`:usn2(`5esn`) Merge Allshortestpaths((`4esn` :@usn6:_usn3)-[?:_usn3{usn2:010[{`1esn`}..],`1esn`:`5esn` Contains 0 Contains $12}]-(@usn5 :`3esn`{`4esn`:12e12[.9e12..07]})<-[ *01234567..{usn1:{12} Contains `8esn` Contains @usn5}]->(`5esn` )) Union All Create Allshortestpaths(((`4esn` :#usn7:`8esn`)<-[:`8esn`|:#usn8{_usn4:$#usn7 Ends With {`5esn`} Ends With 01}]-({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[usn1:#usn7|:@usn5 *999..123456789]->(`5esn` :``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null}))),(`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:`3esn`)Assert {@usn6:12e12[{`4esn`}..`4esn`][999..{@usn6}]}.usn1?.`8esn`? Is Unique"),
    octest_legacy:ct_string("Start `5esn`=Node:_usn4(`3esn`={_usn3})  Match ``=Allshortestpaths(((`8esn` :`8esn`)<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))) Using Scan @usn6:usn1 Using Index @usn5:`3esn`(_usn4) Load Csv From Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]) In (`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) In `4esn`($#usn7[01..2.12][2.12..3.9e-1]) As _usn3 Fieldterminator 's_str' Union All Unwind `3esn`[{`4esn`}] As #usn7 Foreach(`1esn` In 07 Ends With {@usn5:.1e1 Is Null Is Null} Ends With Filter(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 1.9e0[.12e-12][9e-12])| Unwind Extract(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`|.9e-12[.12e12..][0Xa..])[{#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]}..] As `1esn`) With  0xabc[..Count(*)][..$`5esn`],Case {1000}[..`5esn`][..9e12] When $`8esn` Then Null[$`3esn`..][`1esn`..] End =~None(`` In `7esn` =~#usn8 =~\"d_str\" Where 7 In 1e1 In {``}) =~{`6esn`:usn2 Contains `2esn` Contains {1000}} As `3esn` Order By Single(usn1 In $@usn6 Is Null Is Null Where 0X0123456789ABCDEF Ends With {1000}) In (`1esn` :#usn8:@usn6{usn1:#usn8 Is Null Is Null,_usn3:{`4esn`} In 1000 In {@usn5}})-[``:``|:`7esn`*{#usn8:{#usn7}[.12e-12],`3esn`:1.9e0[`6esn`][`7esn`]}]-(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})-[usn1?:`3esn`|`3esn`*..]->(:usn1) In Reduce(_usn3=$`4esn` Is Null Is Null,usn2 In $`5esn`[{`4esn`}][{0}]|9e-1 Contains 3.9e-1) Ascending Skip $_usn3[.0e-0..999] Where 3.9e-1 Ends With {usn1} Ends With {`5esn`}"),
    octest_legacy:ct_string("Create Constraint On(_usn4:#usn7)Assert Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``))).@usn6! Is Unique"),
    octest_legacy:ct_string("Start @usn5=Rel:`8esn`(usn1={#usn7}) ,``=Node:`7esn`({#usn7})Where 00[$``] Optional Match (:usn2)<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)-[_usn3:#usn8|:``{#usn8:{_usn4} In 0X7 In 0e0,`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]-(@usn5 ) Union Delete [`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null] =~`6esn`(Distinct 2.9e1[Count ( * )..]),{`3esn`} Is Not Null Is Not Null Union Merge Allshortestpaths(((`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})<-[usn2? *0xabc..12{`6esn`:`8esn`[_usn4]}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]}))) On Match Set usn1 ={`6esn`} In 11.12e-12 In 2.9e1,#usn8+={@usn5} Contains .1e1 Contains {`5esn`},@usn6+={`3esn`}[#usn7] On Create Set @usn6 =$`5esn` In ``"),
    octest_legacy:ct_string("Drop Index On:`1esn`(`2esn`)"),
    octest_legacy:ct_string("Unwind Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})[Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})<-[`5esn`?:`7esn`|usn1{@usn5:9e0[`3esn`][0]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )))..][Case When $#usn7 Contains 3.9e-1 Then .12e12 Starts With 5.9e-12 Starts With `4esn` When {1000}[`2esn`...0e-0][9e-1..0X7] Then 010[...12e-12] End..] As `3esn` With Distinct .0e0[$usn1][0] As ``,0xabc[0Xa..],9e-12 Ends With 9e1 Ends With 4.9e12 As `5esn` Order By $`` Ends With 1e-1 Ends With $@usn6 Ascending Limit .9e0 Ends With $0"),
    octest_legacy:ct_string("Unwind .9e12 Is Not Null Is Not Null As _usn3 Merge Allshortestpaths(((`4esn` :#usn7:`8esn`)<-[:`8esn`|:#usn8{_usn4:$#usn7 Ends With {`5esn`} Ends With 01}]-({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[usn1:#usn7|:@usn5 *999..123456789]->(`5esn` :``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})))"),
    octest_legacy:ct_string("Foreach(@usn5 In {@usn5} Contains .1e1 Contains {`5esn`}| Return $`7esn` In $`4esn` Order By 0x0 Ends With #usn8 Ends With .9e-1 Descending,$12 Is Not Null Descending,$`` =~$_usn3 Asc Skip {#usn8} Starts With {`2esn`}) Foreach(_usn3 In 01 Is Not Null| Create Unique _usn4=((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})),`4esn`=(({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)) Detach Delete {`1esn`} Contains 1.0 Contains 4.9e12,{999}[..`6esn`],{`3esn`} =~$`` =~$`8esn`) Union Load Csv With Headers From 1000 As @usn6 Fieldterminator \"d_str\" Union All Start usn2=Relationship:@usn6(#usn8='s_str') ,`6esn`=Rel:@usn6(`8esn`='s_str')"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`5esn`)Assert Any(@usn6 In 9e12[..usn2][.._usn3] Where $0 Ends With 9e-12 Ends With $_usn4).@usn6!.usn2? Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From $`1esn`[4.9e12..][_usn3..] As `2esn` Fieldterminator 's_str' Merge @usn5=(_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]}) On Match Set `7esn`+=$_usn3[0x0][{0}],Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}}))._usn3 =9e0[{7}...0e-0][Null..@usn5],usn1+=Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null Match `6esn`=Shortestpath((((:`6esn`{`3esn`:9e12[..usn2][.._usn3]})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})<-[_usn4 *010..0{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}]-(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})))),Allshortestpaths((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})) Using Scan `1esn`:_usn3 Using Index `3esn`:`2esn`(`7esn`)"),
    octest_legacy:ct_string("Create Constraint On(``:#usn8)Assert Exists(Extract(_usn3 In `8esn`[_usn4] Where 12.0[..Count ( * )][..@usn6]|00 Is Not Null Is Not Null).`8esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv From Single(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`)[Case When $999 Is Not Null Then {`3esn`} =~$@usn5 =~`2esn` Else .12e-12 Ends With `2esn` End][[`2esn` In $@usn5 Is Not Null Is Not Null Where $1000[..0e-0][..010]|00[$``]]] As _usn3 Fieldterminator 's_str' Create Unique Allshortestpaths((`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`)) Match ((`8esn` :`2esn`:`4esn`)-[?:#usn7|:@usn5 *12]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1}))"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:@usn5)Assert Exists(Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 3.9e-1 Starts With .9e0 Starts With {#usn7}).``!)"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:@usn5)Assert @usn5(Count ( * ) Starts With 0.12,$123456789).#usn8 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:usn1)Assert Any(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With ``)._usn3 Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`6esn`)Assert Shortestpath(((`8esn` :`8esn`)-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`8esn`*]-(`7esn` :``{usn2:$7}))).`3esn`.`4esn`!.`4esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(_usn3:`2esn`)Assert Reduce(``=$_usn3[0X0123456789ABCDEF..][0x0..],usn2 In $`5esn`[{`4esn`}][{0}]|1.9e0 In $@usn6 In $_usn3).usn1 Is Unique"),
    octest_legacy:ct_string("Delete Count(*) Is Not Null Is Not Null,All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where _usn4[{``}..{`6esn`}][$7..$_usn3]) In Allshortestpaths((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]}))) In (`1esn` :`2esn`:`4esn`)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[#usn8]->(`2esn` :_usn3{`6esn`:_usn4[{``}..{`6esn`}][$7..$_usn3],`6esn`:$`4esn` Ends With {999}})"),
    octest_legacy:ct_string("Unwind $123456789[{usn1}][.12e-12] As `1esn` Load Csv From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As `5esn` Fieldterminator 's_str' Detach Delete 8.1e1[usn2..{1000}][0X7..9e12],$1000[_usn4][{@usn5}]"),
    octest_legacy:ct_string("With  *,\"d_str\" Starts With $`7esn` Starts With 999 As `3esn`,5.9e-12[\"d_str\"..][{`6esn`}..] As #usn7 Skip `2esn`[`7esn`][1000] Limit (@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[`8esn`?:_usn3 *12{usn1:#usn7[.9e0..`3esn`][{`6esn`}..1000],_usn4:$usn2 In #usn7 In #usn7}]-(_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(usn2 :`2esn`:`4esn`)[..Reduce(`2esn`={1000}[..{usn1}][..1e-1],_usn3 In `8esn`[_usn4]|Count(*)[$7])][..{_usn3}] Where .12e-12 Is Null Optional Match Shortestpath(((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})))),_usn3=Allshortestpaths((((`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999})<-[``?:@usn5|:#usn7 *..00{#usn8:$`8esn`[...1e-1]}]->(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]})))) Using Index `3esn`:`8esn`(`5esn`) Where .12e12 Ends With 07 Ends With 3.9e-1 Detach Delete .9e-1 Is Not Null Is Not Null,$_usn3[.0e-0..999],0X0123456789ABCDEF Ends With {1000} Union All Create Unique `4esn`=((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})<-[ *01234567..{usn1:{12} Contains `8esn` Contains @usn5}]->(usn1 :@usn6:_usn3)-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})),(:`3esn`{@usn5:9e12[..usn2][.._usn3]})<-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]->(:`5esn`:`7esn`{`1esn`:{1000}[..`5esn`][..9e12]})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(@usn5 :`3esn`{`8esn`:0x0 Ends With #usn8 Ends With .9e-1})"),
    octest_legacy:ct_string("Create Constraint On(usn2:``)Assert Exists(Any(usn2 In .12e-12 Ends With `2esn` Where `3esn` Contains 01 Contains 01).`5esn`!)"),
    octest_legacy:ct_string("Create Constraint On(#usn7:`6esn`)Assert Exists(usn1(Distinct 0e-0[{12}]).`3esn`?)"),
    octest_legacy:ct_string("Foreach(`` In Case Count(*) =~01234567 =~.1e-1 When {123456789} Starts With $_usn4 Starts With 0x0 Then .9e-12[usn2] When {`8esn`}[@usn5][$`2esn`] Then 00[$``] End[..Filter(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 999[..$@usn5][..``])][..Case When `3esn` =~$#usn7 Then $usn2 In #usn7 In #usn7 When $`5esn`[{`4esn`}][{0}] Then 2.9e1[2.12..1.9e0] Else #usn7 =~$@usn5 =~{7} End]| Remove Reduce(`6esn`=$999 =~0x0,@usn6 In 9e12[..usn2][.._usn3]|.9e1 Is Null Is Null).`2esn`,Reduce(@usn5={`3esn`}[01234567][{#usn7}],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|0e0 =~{12} =~{1000}).#usn7!)"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:`5esn`)Assert ({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[_usn3?:`6esn`{_usn4:07[{@usn5}..],usn2:$`4esn` Is Null Is Null}]->(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`5esn`:`7esn`{`3esn`:Count ( * )[_usn4..],`8esn`:false[..usn2][..999]}).`6esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`3esn`)Assert Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where $`4esn`[12e-12..$`1esn`][$`2esn`...9e12]).@usn6? Is Unique"),
    octest_legacy:ct_string("Create `5esn`=(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})<-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-(@usn5 :@usn6:_usn3{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`2esn` *1000..{`2esn`:{@usn6} In 9e12}]->(:usn1{usn1:true In 0.0,@usn5:{`1esn`} Is Null}),@usn6=(`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[ *0X0123456789ABCDEF]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}) Merge ((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]}))"),
    octest_legacy:ct_string("Delete $_usn3 Is Null,9e1[...9e1][..$`6esn`] Union All Create Unique Shortestpath(((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]}))),`7esn`=((`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})<-[_usn4?:`8esn`|:#usn8 *01234567..]->(`5esn` {``:$_usn3 Starts With 010,`1esn`:$`8esn` =~{`6esn`} =~12})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(usn2 {`7esn`:.9e12 Contains 0 Contains $0})) Delete {7} Is Not Null,.1e1 Is Not Null Is Not Null,`2esn`[`7esn`][1000] Union Foreach(`1esn` In $usn1 =~.0e0 =~{`4esn`}| Load Csv From $`5esn` Is Not Null As `3esn` ) Create Unique usn2=Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))),@usn6=Allshortestpaths(((#usn7 {`2esn`:`8esn`[.12e12..],_usn3:usn1 =~0Xa =~0})))"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:#usn7)Assert `7esn`(11.12e-12 In {usn1}).`5esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On(#usn7:`3esn`)Assert [`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where $`4esn`[usn2..]|$usn2[..$999][..#usn8]].@usn6?.``._usn4! Is Unique"),
    octest_legacy:ct_string("Create Unique `2esn`=(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1}) With  .9e0 Is Not Null,$`7esn` Contains .12e12,false Starts With 0 Starts With 2.9e1 As `4esn` Skip (:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]-(:_usn3{_usn3:010[..9e-1][..0X7]}) Starts With Case When $1000 Starts With {@usn6} Starts With $@usn5 Then `2esn` When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else 12[4.9e12..] End Starts With (_usn4 {`3esn`:.0e-0 In 12})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc}) Create `5esn`=(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]}) Union All Create Allshortestpaths(((`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]})-[`1esn`?]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}))) Unwind Shortestpath((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5))[Allshortestpaths((#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}))] As `1esn` Foreach(usn1 In Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000)| With  *,$999 Ends With `2esn` Ends With 12.0 As #usn8,All(usn1 In $@usn6 Is Null Is Null Where $`1esn`[4.9e12..][_usn3..])[..@usn5(Count(*)[Count ( * )][{0}],`4esn` =~010)] As `3esn` Load Csv From #usn7 Is Null Is Null As `2esn` Fieldterminator 's_str')"),
    octest_legacy:ct_string("Drop Constraint On(``:`3esn`)Assert Exists([`6esn` In 010[{`1esn`}..] Where 9e-12[$7..]].`6esn`?)"),
    octest_legacy:ct_string("Drop Constraint On()<-[``:usn2]-()Assert Exists(Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e0 Ends With $0).`1esn`?)"),
    octest_legacy:ct_string("Remove @usn6(07[{@usn5}..],$999[usn1..0e-0]).`1esn`?._usn4!._usn3?,[`7esn` In 0.12 Is Not Null Where 0X0123456789ABCDEF In false|_usn3 =~{7} =~123.654].`6esn`.@usn6.usn1,#usn8:`4esn`:usn2 Create @usn5=(((`2esn` :_usn3{usn1:5.9e-12 Is Null Is Null})-[`7esn`?:#usn7|:@usn5 *1000..]->(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->({usn1:12[..$`5esn`]}))) Remove {usn2}.`7esn`?,(:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`2esn` *1000..{`2esn`:{@usn6} In 9e12}]->(:usn1{usn1:true In 0.0,@usn5:{`1esn`} Is Null})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]}).#usn8?.`3esn`!.`2esn`!,Case .12e12[..$123456789] When .12e-12[9e1] Then 1e-1[$`4esn`] When $`8esn` Then 999[..$@usn5][..``] Else $#usn8 Is Not Null Is Not Null End.usn2?.`6esn`._usn3? Union Return #usn8[..'s_str'][..'s_str'] As `2esn`,None(@usn6 In 9e12[..usn2][.._usn3] Where $7) Is Not Null Is Not Null Limit `7esn`[1.9e0..5.9e-12][9e0..@usn5] Foreach(`7esn` In {`5esn`}[01234567..][5.9e-12..]| Detach Delete .12e12[01..{1000}][8.1e1..Count ( * )] Return Distinct Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]) In None(`1esn` In $12 In {usn2} Where $12 =~4.9e12) As @usn6,07 Ends With {1000} Ends With 01234567 Order By Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null) In `4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`) Desc Skip true Contains 0X7 Contains $#usn8) Union All Unwind {usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'} Contains Allshortestpaths((`8esn` :`2esn`:`4esn`)-[`2esn`?:``|:`7esn` *1000..]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})) Contains None(`6esn` In 010[{`1esn`}..] Where {``}[$usn2..00][{_usn3}..123.654]) As #usn7 Start `5esn`=Node:_usn4(@usn5={`4esn`})  Remove Case 9e-12 Starts With {1000} When `1esn`[Null][{@usn6}] Then {_usn3} Is Null Is Null When 10.12e12[usn2] Then $12 =~4.9e12 Else .9e12[6.0e0..][@usn5..] End.@usn5!"),
    octest_legacy:ct_string("Create Constraint On(@usn6:`3esn`)Assert Exists(Reduce(usn2={`6esn`}[@usn5..{@usn6}],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|9e0[..{#usn7}][..`4esn`]).#usn8?)"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:`8esn`)Assert Single(`6esn` In 010[{`1esn`}..] Where {`8esn`}[@usn5][$`2esn`]).`4esn`?.usn2!.`4esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On(``:`8esn`)Assert exists(Distinct .0e-0[..``][..$7],$`3esn` =~0x0)._usn3?._usn3? Is Unique"),
    octest_legacy:ct_string("Create #usn7=Shortestpath((((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2)))),(((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))) Remove Extract(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`).`6esn`?._usn4?.#usn8,usn2(0Xa In 1.0 In $@usn5).usn2! Merge `2esn`=((`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[?:`2esn`|`5esn` *..123456789$1000]-({`1esn`:$`8esn` Is Null Is Null,`1esn`:0.12 =~2.9e1 =~9e1})-[usn2:`5esn`]-(:`4esn`:usn2{@usn5:`8esn`[.12e12..],usn1:$#usn8[$0..`3esn`][1e-1..$7]})) Union Return $#usn8 Starts With 9.1e-1 Starts With {#usn7} As `8esn`,$`1esn` Contains 1000 Contains $123456789 As _usn3 Order By 00[{1000}] Descending,'s_str'[$_usn3..][9.1e-1..] Desc,$_usn4 =~$#usn8 =~{`4esn`} Desc Skip $@usn6[...9e-1] Limit $#usn7[01..2.12][2.12..3.9e-1] Remove [usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null].`1esn`! Union All Merge ((`1esn` {@usn6:6.0e0[$#usn7..$1000]})) On Create Set `3esn` =9e0[`7esn`..][#usn8..],Shortestpath(((#usn7 :`1esn`:``)<-[?:`4esn`|:`2esn`]-(_usn3 :`4esn`:usn2)-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]}))).usn1 =$_usn3[.0e-0..999],{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}.`6esn`? =$0[1e1][12e-12] On Match Set Shortestpath(((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(_usn3 :usn1))).usn2 =Count(*) Is Not Null Is Not Null,[`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 10.12e12[usn2]|9e0[`3esn`][0]].`6esn`? =3.9e-1[..$1000][..0.12] Foreach(`8esn` In {1000}[`2esn`...0e-0][9e-1..0X7]| Load Csv From usn2(Distinct $_usn3 =~'s_str' =~12) In (`` :usn1)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}) In Case When {_usn4}[{`6esn`}] Then 12e12 Is Not Null Is Not Null When #usn7 Is Null Is Null Then {`8esn`} Starts With .9e-1 Starts With 1000 End As usn2 ) Remove @usn5:`8esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[`7esn`:_usn4]->()Assert Exists(Shortestpath((`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})<-[:`7esn`|usn1 *7]-(`8esn` :`5esn`:`7esn`{usn1:{``} Contains 0.0 Contains `4esn`})-[? *1000..{`1esn`:{`1esn`} Is Null}]->(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})).`1esn`?)"),
    octest_legacy:ct_string("Drop Constraint On()<-[_usn3:`4esn`]-()Assert Exists(exists(0[$usn1..])._usn4)"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:_usn3)Assert Exists(None(usn2 In $`5esn`[{`4esn`}][{0}] Where 7.0e-0 Is Not Null).@usn5?.usn1?)"),
    octest_legacy:ct_string("Drop Constraint On()-[@usn5:`3esn`]->()Assert Exists(`5esn`(Distinct $`7esn` Ends With 7.0e-0 Ends With $usn2).`4esn`?)"),
    octest_legacy:ct_string("Delete .1e1 In 12.0 In $``,@usn6 Starts With #usn7,Any(@usn6 In 9e12[..usn2][.._usn3] Where 12e12[.9e12..07]) Ends With Shortestpath(((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))) Union Create ((:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})),`4esn`=((`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[?$999]-(`8esn` :@usn6:_usn3)<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})) Union Foreach(@usn6 In 0.12 Ends With 7 Ends With 12| Delete 1.9e0[$`4esn`],07[..$`5esn`] Create Unique `2esn`=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))),((:`4esn`:usn2{#usn7:$12[10.12e12][.1e1],`1esn`:{1000} Starts With {`1esn`}})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(_usn4 :usn2))) Match ``=(((#usn7 )-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(`2esn` :@usn5)<-[?:`2esn`|`5esn` *..123456789$1000]-({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}))) Where `4esn` Contains 0X0123456789ABCDEF Contains $usn2 Create Unique Allshortestpaths((((@usn6 :`5esn`:`7esn`)-[`8esn`{#usn8:.12e12[..7]}]-({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[ *999..123456789{`2esn`:_usn3 =~{7} =~123.654}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))))"),
    octest_legacy:ct_string("With  Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,999 Starts With 7.0e-0 Starts With true As _usn3 Order By 2.12[010..][{999}..] Descending Limit Shortestpath((:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})) Starts With {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF} Starts With Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})) Start `2esn`=Node:`8esn`('s_str') ,`1esn`=Rel:``({`4esn`}) With Distinct *,Any(usn2 In $`5esn`[{`4esn`}][{0}] Where .1e-1[2.9e1..][$`7esn`..]) Contains Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Contains Allshortestpaths((_usn3 :`4esn`:usn2)),9e1[...9e1][..$`6esn`] As `4esn`"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:#usn7)Assert Exists(Reduce(`1esn`=12.0[..Count ( * )][..@usn6],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|5.9e-12 Contains {12} Contains {#usn8}).``!.`2esn`!.#usn7?)"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:#usn8)Assert None(usn1 In $@usn6 Is Null Is Null Where {7} Starts With 0x0 Starts With 9e1).#usn7!.`1esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`4esn`:usn2]-()Assert Exists(All(usn1 In {#usn7} =~.12e12 =~9e0 Where 0xabc[01234567][.12e-12]).@usn5!)"),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv From Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]) In (`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) In `4esn`($#usn7[01..2.12][2.12..3.9e-1]) As _usn3 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge `4esn`=Shortestpath(((`1esn` :`7esn`)<-[usn2:#usn8|:``]->({`6esn`:9e0[`4esn`..$_usn4][9.1e-1..0e0]}))) On Match Set Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where Count ( * ) Starts With 0.12).`7esn`.`2esn`? =12e12[{`4esn`}..`4esn`][999..{@usn6}],Reduce(`8esn`=.9e0 =~#usn7,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|#usn8 Is Null Is Null).#usn7? =00[..@usn6] On Match Set `6esn`(Distinct 1.0 In {usn1}).`5esn`! =.0e-0 Contains $1000,Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0).`1esn`! =`8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End,Reduce(`5esn`={``} Contains 0.0 Contains `4esn`,`2esn` In $@usn5 Is Not Null Is Not Null|0.0[`7esn`]).`2esn`.`8esn`!.`` =1.0 In {usn1} Optional Match ``=(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}) Using Scan `6esn`:#usn8 Using Index @usn5:@usn6(`5esn`) Union All Foreach(`` In `6esn`(00[$``],.1e1 Is Not Null Is Not Null)[`6esn`({usn2}[{999}..][9e12..],`4esn` Ends With 9e12 Ends With {`5esn`})..][exists(Distinct {`3esn`}[#usn7],@usn5 =~$#usn7 =~{usn1})..]| Delete $7 In 1.0 In 01234567 Create (((`1esn` :`3esn`{@usn6:$12 Is Null})<-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(`` {``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),((:`1esn`:``{@usn6:$`7esn` Ends With 7.0e-0 Ends With $usn2}))) Load Csv With Headers From 0X0123456789ABCDEF In .9e-1 In 123456789 As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv From $999[usn1..0e-0] As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create (_usn4 :`6esn`)<-[`2esn` *7]->(`4esn` :@usn5),_usn3=(_usn3 :`1esn`:``{`8esn`:{#usn8} In {12} In .9e12})<-[?:`3esn`|`3esn` *999..123456789{_usn3:$`4esn`[$@usn6...12e12]}]->(usn1 {#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]}) Create Unique `7esn`=Shortestpath((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})-[:#usn7|:@usn5]-(:`1esn`:``{`8esn`:5.9e-12[0x0..]})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)),Allshortestpaths(((`` :`7esn`))) With Distinct Count(*)[Null..][01234567..] As `1esn`,{#usn7} Is Not Null As `7esn`,10.12e12[usn2]"),
    octest_legacy:ct_string("Create Constraint On()-[usn2:`6esn`]-()Assert Exists(Reduce(`1esn`=.9e0[07..][4.9e12..],_usn3 In `8esn`[_usn4]|`3esn` =~$#usn7).`5esn`!)"),
    octest_legacy:ct_string("Delete Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]) Is Null,Reduce(`5esn`=$7 =~01234567 =~12.0,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{`8esn`}[..999][.._usn3])[{``:$``[9e0..][5.9e-12..],``:$#usn7 Contains 3.9e-1}..],Any(usn2 In $`5esn`[{`4esn`}][{0}] Where .1e-1[2.9e1..][$`7esn`..]) Contains Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Contains Allshortestpaths((_usn3 :`4esn`:usn2)) Unwind `8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End As @usn6 Union All Remove [usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`3esn`[0e-0]|'s_str' =~$usn2 =~{7}].@usn5 Foreach(@usn5 In 0.0 In .0e-0| With Distinct *,{usn1} Is Not Null,{`2esn`}[0x0..9e0] As `6esn` Limit Allshortestpaths((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))[usn1..])"),
    octest_legacy:ct_string("Unwind .1e-1 Is Not Null As `3esn` Optional Match Shortestpath(((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]->(`4esn` :`8esn`{12})-[{_usn3:$@usn6 Starts With 0xabc Starts With {`7esn`},`1esn`:_usn4['s_str'][8.1e1]}]->(#usn7 :usn2))) Using Index `3esn`:usn2(`5esn`) Union All Unwind {`7esn`}[0.12] As usn2"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:_usn4)Assert {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}.``? Is Unique"),
    octest_legacy:ct_string("Return Distinct #usn8[..'s_str'][..'s_str'] As `2esn`,None(@usn6 In 9e12[..usn2][.._usn3] Where $7) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(usn1:@usn5)Assert Case When .12e12[$usn1..][{@usn6}..] Then {1000}[..{usn1}][..1e-1] End._usn3! Is Unique"),
    octest_legacy:ct_string("Remove Reduce(`8esn`=1e1[$_usn3],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e-0[..``][..$7]).`6esn`.`8esn`?,[`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1].`2esn`! Unwind {usn2} Ends With {@usn6} Ends With 1000 As `` Union All Detach Delete Case When `4esn` Contains 0X0123456789ABCDEF Contains $usn2 Then {1000} Starts With {`1esn`} End Starts With Case $`8esn`[0x0][.9e0] When `2esn` Starts With 010 Starts With `` Then {`7esn`} Is Not Null Is Not Null Else $usn1 =~.0e0 =~{`4esn`} End Starts With .0e-0,Reduce(`5esn`={`8esn`}[..999][.._usn3],usn2 In $`5esn`[{`4esn`}][{0}]|`` Ends With 1.0 Ends With usn1) =~({@usn6:$@usn6 Is Null Is Null})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5),{`6esn`} Starts With @usn6 Create Unique _usn4=(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[:`6esn` *..0x0{``}]-(#usn8 :``{usn2:9e1 =~$`8esn` =~10.12e12}) Delete {999} =~$`6esn` =~$`6esn` Union All Match ``=(((@usn5 {@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]}))),`2esn`=Allshortestpaths((((#usn8 :`3esn`{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})-[? *0]-(:`3esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`})-[?:``|:`7esn` *12{#usn8:10.12e12 Contains .9e0,usn1:0xabc Contains {12} Contains {`6esn`}}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1})))) Using Scan @usn5:`8esn` Create Unique ((`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})),`8esn`=Shortestpath((_usn3 )-[usn2:_usn3 *0xabc..12]->(:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`))"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv From Extract(`1esn` In $12 In {usn2} Where 2.9e1 =~Count(*) =~{123456789})[{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}..][123.654..] As @usn6 Fieldterminator 's_str' Load Csv From $@usn6 Is Null As `1esn` "),
    octest_legacy:ct_string("Create Constraint On()-[``:_usn4]-()Assert Exists((:usn1{usn1:true In 0.0,@usn5:{`1esn`} Is Null})-[@usn6?:`4esn`|:`2esn`{`2esn`:Count ( * )[9e0..$``]}]-(:usn2{usn1:_usn4 Is Not Null Is Not Null}).usn2?.#usn8!)"),
    octest_legacy:ct_string("Foreach(`` In 10.12e12[.0e0]| Create `7esn`=((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[_usn3?:`7esn`|usn1]-(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[usn2 *7]-(`8esn` :#usn7:`8esn`)) Load Csv From 12[11.12e-12..][`4esn`..] As @usn6 ) Union All Delete .0e0 =~Case $`6esn` Starts With 0.0 When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] End =~All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}]),`8esn`(Distinct 8.1e1 Contains .9e-1 Contains false,usn1 =~false =~{999}) In {12} In (usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12})<-[#usn8:`3esn`|`3esn` *1000..{#usn7}]-(:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})<-[? *..00]->(:usn1{#usn8:2.9e1[{`2esn`}]}),Case .12e-12 Is Null When Count ( * )[_usn4..] Then 7.0e-0 Is Not Null When 2.12[{12}] Then {usn2} Ends With {@usn6} Ends With 1000 End[Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..])][({`3esn`:{`6esn`}[@usn5..{@usn6}],_usn3:@usn6 Starts With #usn7})<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})] Foreach(`8esn` In None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Contains (`8esn` :@usn6:_usn3{_usn4:{#usn7} =~$@usn6 =~$7})<-[`1esn`? *0{usn2:.9e12[6.0e0..][@usn5..]}]->(usn2 :@usn6:_usn3)-[usn1:#usn7|:@usn5 *999..123456789]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})| Unwind $`1esn` =~`8esn` As @usn5)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`4esn`)Assert Exists(Case When 01234567 Ends With .0e0 Ends With 12e12 Then {`4esn`}[{`3esn`}][$`2esn`] When `` Contains {`6esn`} Contains 123456789 Then 2.9e1[2.12..1.9e0] End.usn2)"),
    octest_legacy:ct_string("Unwind {`8esn`}[.0e0..][999..] As `1esn` Union All Foreach(_usn3 In Null| Optional Match ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),_usn3=Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)))) Return *,$12 Is Null As #usn8 Order By ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[_usn3?:@usn5|:#usn7]->(`` :``)-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`}) Starts With Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`) Ascending,{`8esn`} =~$#usn7 =~2.12 Desc,Count(*) Starts With 07 Starts With $#usn7 Desc Skip @usn6[true..] Create ({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12}),#usn8=Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))) Union All Foreach(`7esn` In 9e1[..@usn5][..$`5esn`]| Unwind $`5esn`[{@usn6}..{`7esn`}] As `8esn`) Merge ((({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[_usn3?:@usn5|:#usn7]->(@usn5 {`8esn`:123456789[#usn7..9e-1][10.12e12..{0}],@usn6:1.0 Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(`4esn` {`8esn`:5.9e-12[0x0..]}))) On Match Set [`6esn` In 010[{`1esn`}..] Where {`8esn`}[@usn5][$`2esn`]|$123456789[{usn1}][.12e-12]].@usn5?.`6esn`! =010[.0e-0..\"d_str\"][.9e0..123.654],_usn4 =0xabc[..Count(*)][..$`5esn`] With  *,Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,Case \"d_str\"[0x0..{@usn6}][$@usn5..0] When 0e0 Contains {`2esn`} Then 0X0123456789ABCDEF[1e1..] Else .12e12 Starts With 5.9e-12 Starts With `4esn` End In {usn1:$#usn7[01..2.12][2.12..3.9e-1],`6esn`:.0e-0 Ends With $`2esn` Ends With `5esn`} Order By .9e12 Contains 5.9e-12 Contains 9e-1 Descending Skip $123456789[..$999][..`6esn`]"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:#usn7)Assert Exists(Allshortestpaths((@usn6 {usn1:0Xa In 1.0 In $@usn5})-[`5esn`?:`2esn`|`5esn`]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})).`4esn`!._usn3)"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:`2esn`)Assert Case When {usn2} Is Not Null Is Not Null Then false Contains {`7esn`} When {_usn3} Is Null Is Null Then .12e12 Ends With 07 Ends With 3.9e-1 End.#usn7! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(@usn6:`3esn`)Assert Exists(Reduce(`6esn`=.9e-12[.12e12..][0Xa..],#usn8 In 07[..$`5esn`]|.9e-12[.12e12..][0Xa..]).`5esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv From Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null As #usn8  Create Unique @usn5=Allshortestpaths(((:`6esn`{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}}))),(@usn6 :_usn4:`2esn`)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:@usn5)Assert Exists(Case When {1000}[..`5esn`][..9e12] Then Count(*)[..{#usn7}] End.`3esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:`1esn`)Assert Reduce(`3esn`={usn2} Is Not Null Is Not Null,`7esn` In 0.12 Is Not Null|$@usn5 =~{`3esn`}).`2esn`! Is Unique"),
    octest_legacy:ct_string("Create Unique ((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})-[{``:{`3esn`}[01234567][{#usn7}],_usn4:999 Is Null Is Null}]->(usn2 {``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})),``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))) Match @usn5=Allshortestpaths((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``))),_usn4=(({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[#usn8? *0Xa..12]->(`7esn` {#usn8:2.9e1[{`2esn`}]})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->({usn1:12[..$`5esn`]})) Using Scan @usn5:`5esn` Using Scan `1esn`:`2esn` Where .12e-12[@usn6..'s_str']"),
    octest_legacy:ct_string("Foreach(`4esn` In 9e-12 Starts With {1000}| Unwind $`3esn`[..{`5esn`}] As @usn6 Match Shortestpath(((_usn3 :`7esn`{_usn4:$12[$`6esn`..][01..]})-[`4esn`{_usn3:010[..9e-1][..0X7]}]-(:`7esn`{#usn7:$999 =~false =~{`8esn`}})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3))),Allshortestpaths((:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[`7esn`?:`7esn`|usn1 *1000..{@usn6:#usn7 In 07,#usn8:$999[usn1..0e-0]}]->(#usn8 :`5esn`:`7esn`{usn2})-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})) Using Index #usn8:usn2(@usn5) Where {`6esn`} =~2.12 =~123.654) Match (:`4esn`:usn2{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})-[`3esn`?:`1esn`|:`1esn`]-(`7esn` :usn1)<-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(@usn6 {``:$`6esn` Starts With 0.0}) Load Csv With Headers From `2esn`[`7esn`][1000] As `2esn` Fieldterminator 's_str' Union Load Csv From Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where {7}[$@usn5..123456789][1e1..1.9e0]) Ends With (`3esn` :_usn3{@usn6:0.12 Is Not Null})-[#usn8:`5esn`]-({`6esn`:12[@usn6][{`2esn`}]}) As #usn8  Create Unique #usn7=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 ))) Delete $`4esn`[12e-12..$`1esn`][$`2esn`...9e12]"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:_usn3)Assert Allshortestpaths((`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})<-[:`7esn`|usn1 *7]-(`8esn` :`5esn`:`7esn`{usn1:{``} Contains 0.0 Contains `4esn`})-[? *1000..{`1esn`:{`1esn`} Is Null}]->(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})).`8esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`6esn`)Assert `1esn`(true Is Null,$1000[..0e-0][..010]).#usn8!.usn1?.`3esn` Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`1esn`:usn1]-()Assert Exists((#usn7 {#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})._usn4?)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:`8esn`)Assert Exists(usn1(.9e-12[.12e12..][0Xa..],$`6esn` =~$#usn7 =~$`4esn`).`7esn`?)"),
    octest_legacy:ct_string("Unwind $@usn6 Is Null Is Null As _usn4 Detach Delete 1.9e0 In $@usn6 In $_usn3,$@usn5 =~{`3esn`} Load Csv With Headers From $`5esn` In $12 In `2esn` As usn1  Union Merge Shortestpath(((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))) On Create Set `6esn` =_usn4 On Create Set `4esn` =Single(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Is Not Null Detach Delete Single(_usn3 In `8esn`[_usn4] Where `3esn` Contains `2esn` Contains {_usn4}) In Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`) In {7},$usn2 Ends With 9e12 Ends With Count ( * ),$`5esn` =~Count(*) =~1.9e0 Union All Load Csv From {#usn8}[..@usn5] As `4esn`  Foreach(`6esn` In Any(usn1 In $@usn6 Is Null Is Null Where 9e0[`3esn`][0]) Ends With None(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`3esn`}[01234567][{#usn7}]) Ends With Any(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}])| Load Csv With Headers From 0[..{#usn7}][..$_usn3] As `7esn` Fieldterminator 's_str' Unwind `8esn`[0e-0.._usn3][Null..`6esn`] As `2esn`) Detach Delete 9e0[`1esn`..0e-0][00..`1esn`],.0e-0 Ends With $`2esn` Ends With `5esn`"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`3esn`)Assert Exists(None(#usn7 In .0e-0 In 12 Where $12 In {usn2}).usn1!.#usn8?.`3esn`!)"),
    octest_legacy:ct_string("Unwind #usn7 Is Null Is Null As usn1 Foreach(`4esn` In 11.12e-12 In {usn1}| Match Shortestpath((@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})-[#usn8?:`8esn`|:#usn8 *999..123456789]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})<-[#usn7? *0xabc..12]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})),`3esn`=(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0})-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[usn1?:`3esn`|`3esn`*..]-(`1esn` ) Using Scan ``:#usn8 Remove ``(.9e-1 Is Null Is Null,{`8esn`}[@usn5][$`2esn`]).`1esn`._usn4) Union Create Unique `7esn`=Shortestpath((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})-[:#usn7|:@usn5]-(:`1esn`:``{`8esn`:5.9e-12[0x0..]})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)),Allshortestpaths(((`` :`7esn`)))"),
    octest_legacy:ct_string("Drop Constraint On()<-[usn2:`8esn`]-()Assert Exists(Shortestpath((({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]->(:`6esn`{`8esn`:{123456789} =~.9e1 =~$_usn3,#usn7:Count(*)[Null..][01234567..]}))).`4esn`?)"),
    octest_legacy:ct_string("Create Constraint On(``:`3esn`)Assert Case .9e0 =~#usn7 When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 When 0e0 Contains {`2esn`} Then {1000}[0..] Else 2.9e1 Ends With `5esn` Ends With 1000 End.@usn6 Is Unique"),
    octest_legacy:ct_string("Merge (`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})<-[`6esn`?:@usn6|:`4esn` *12{`6esn`:{12} Starts With $`` Starts With 0X0123456789ABCDEF,@usn6:0 Starts With `7esn` Starts With 9e0}]->({_usn3:.9e12 Contains 0 Contains $0})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]}) On Create Set #usn8:`8esn` With  1.9e0 =~.0e0 =~0X7 As #usn7,0 Ends With .0e-0 Ends With false As _usn4,0X0123456789ABCDEF In .9e-1 In 123456789 Order By Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Desc,[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1][Shortestpath((({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})))..Shortestpath(((:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12})-[``?:#usn7|:@usn5{``:$usn1 Ends With {`2esn`} Ends With $usn1}]->(:`5esn`:`7esn`$usn2)-[{#usn8:\"d_str\" Contains {@usn6}}]->({`8esn`:8.1e1[.1e1..][`4esn`..],`2esn`:{@usn6} In 9e12})))] Descending,$@usn5[.9e-1] Descending Skip Case When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 Else 9e-12 Ends With {1000} End[Shortestpath((:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})<-[`1esn`:`4esn`|:`2esn`{`5esn`:$_usn3[usn2..][usn1..]}]->(:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})-[`1esn`?:`3esn`|`3esn` *..00]-(`5esn` {@usn5:`2esn`}))..] Where 2.9e1[Count ( * )..]"),
    octest_legacy:ct_string("Start `5esn`=Node:`1esn`(`4esn`={@usn5}) ,`2esn`=Rel( {_usn3}) Load Csv From {0}[.1e-1..][_usn4..] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From 7.0e-0 Is Null Is Null As _usn3  Union All Remove {`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true}.#usn7!,@usn6:`1esn`:``"),
    octest_legacy:ct_string("With Distinct 5.9e-12[01][`4esn`],$#usn8 Starts With 9.1e-1 Starts With {#usn7} As `8esn`,`5esn` Ends With 's_str' Ends With @usn5 As `1esn` Order By 's_str'[$_usn3..][9.1e-1..] Desc Where 1.0 Is Null Is Null Match (:#usn8:@usn6{@usn6:$_usn4 Ends With {#usn8},_usn4:0e0[12.0][{#usn7}]})<-[?{@usn5:@usn6[999][1000]}]->(`1esn` )<-[usn2:@usn5|:#usn7 *01{@usn6:.0e-0 In 12}]-(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]}),usn1=Allshortestpaths(((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})))) Load Csv With Headers From 0Xa In 1.0 In $@usn5 As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind Allshortestpaths((`` $999)<-[? *0X0123456789ABCDEF]->(`1esn` :_usn3)<-[#usn8?:#usn7|:@usn5]-(@usn5 :#usn7:`8esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true}))[All(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Is Null Is Null)..][Allshortestpaths((({@usn6:01 Contains 9e-12 Contains $7})))..] As @usn5 Merge Allshortestpaths(((@usn6 :`5esn`:`7esn`)-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)-[`3esn`:`6esn` *..0x0]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}))) On Match Set `2esn`+=9e1[0.0],#usn8+=.12e-12[@usn6..'s_str'],{`6esn`:4.9e12 Is Not Null Is Not Null,_usn4:`4esn`[9e-12..true]}.#usn8._usn3? =Shortestpath((((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))))[None(usn1 In {#usn7} =~.12e12 =~9e0 Where 0.0[`7esn`])..Single(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])][`5esn`(Distinct .9e1[$`1esn`..][$``..])..Case When 12e12 Ends With `5esn` Ends With .0e0 Then .9e0 In 8.1e1 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else .9e1 Ends With 0x0 End] On Create Set @usn6+=00 =~`4esn` =~.9e-12,`3esn` =$123456789,[usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF].`5esn`! =.0e-0 Ends With $`2esn` Ends With `5esn`"),
    octest_legacy:ct_string("Return Distinct _usn4[$_usn4] As _usn4,`3esn` Starts With 9.1e-1 Starts With .9e-1 As `8esn` Order By $`5esn`[{@usn6}..{`7esn`}] Ascending Skip [usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0|4.9e12 Is Not Null Is Not Null] =~Case {_usn3} In $#usn8 In $12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else 0[..{0}][..true] End =~Case Count ( * )[`5esn`..\"d_str\"][01234567..{1000}] When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else $_usn3 Starts With 010 End Create Shortestpath((_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})),Shortestpath(((@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})-[@usn5:`6esn` *..00]->(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Create ``=Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))) Union All Detach Delete {_usn3} Is Null Is Null,Case {#usn7} =~.12e12 =~9e0 When `1esn`[{usn1}..] Then false =~$7 When 7 In 1e1 In {``} Then {0}[.0e-0][$`2esn`] End[`4esn`(Distinct \"d_str\" In usn2 In $`7esn`)],usn2[..$0][..`3esn`] Union All Merge @usn6=(({usn2:01[`4esn`..]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})-[`1esn`?:`3esn`|`3esn` *..00]-(`1esn` :usn2)) On Match Set `6esn`+=01[$`1esn`..$`7esn`][{usn2}..12.0],[usn1 In {#usn7} =~.12e12 =~9e0 Where $`4esn`[12e-12..$`1esn`][$`2esn`...9e12]|$`1esn`[4.9e12..][_usn3..]].#usn7 =9.1e-1[..Null][..#usn8] Return *,{`7esn`} =~\"d_str\" =~{``} Skip $_usn4 Ends With {#usn8} Limit $12 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:#usn7)Assert ({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[usn2:_usn3 *0xabc..12]-(:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null}).`5esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:#usn8)Assert Case When $`5esn` =~Count(*) =~1.9e0 Then .1e-1 Starts With @usn6 Starts With _usn3 When $_usn3[0X0123456789ABCDEF..][0x0..] Then #usn8 =~{@usn5} Else 1e1[$_usn3] End.`7esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(``:usn2)Assert Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where $7[.1e-1..{@usn6}][$7..{`1esn`}]).`7esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:`5esn`)Assert All(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`).usn1 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[``:@usn5]-()Assert Exists(Shortestpath((({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]->(:`6esn`{`8esn`:{123456789} =~.9e1 =~$_usn3,#usn7:Count(*)[Null..][01234567..]}))).`8esn`.`4esn`!)"),
    octest_legacy:ct_string("Create Constraint On(``:`1esn`)Assert Exists(Case {0} In {`1esn`} When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] End.`7esn`._usn3?.@usn5?)"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From 6.0e0 In 9e-1 In 123456789 As `4esn`  Remove `2esn`:`3esn`,(`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->(:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})<-[ *1000..{`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]->(`` ).#usn8!"),
    octest_legacy:ct_string("Return Distinct $`8esn`[..12][..9e12] As @usn5,_usn4[{`3esn`}][00] As usn2 Skip 0X0123456789ABCDEF Is Not Null Is Not Null Remove Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 0[..{#usn7}][..$_usn3]).#usn7?,($12)<-[#usn8?{@usn5:{usn2} Ends With {@usn6} Ends With 1000}]->(:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})-[:@usn6|:`4esn` *010..0{`7esn`:{12} Contains `8esn` Contains @usn5,_usn3:0.0[$`4esn`]}]->(usn1 {@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}).#usn7!.@usn5._usn3? Remove Case #usn7[$`8esn`][{`3esn`}] When Count(*) =~01234567 =~.1e-1 Then 1000[{123456789}][usn1] End.`1esn`!,Reduce(`7esn`=12e12 Contains {0},`1esn` In $12 In {usn2}|{``} Is Null Is Null).@usn5"),
    octest_legacy:ct_string("Return [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,$`7esn` In $`4esn` As `8esn`,Extract(`1esn` In $12 In {usn2} Where 2.9e1 =~Count(*) =~{123456789})[{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}..][123.654..] Order By 0x0[{`6esn`}..] Descending Limit usn1 =~false =~{999} Remove Allshortestpaths((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}})).``!"),
    octest_legacy:ct_string("Create ``=Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))) With Distinct 0.0[$`4esn`] As `4esn` Order By 9e1 Ends With `7esn` Ends With 2.12 Descending,Case When .9e-1 Is Not Null Is Not Null Then $12[$`6esn`..][01..] When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] Else {`8esn`}[9e12..][{_usn4}..] End Is Null Is Null Asc,{0} =~{999} Desc Skip 6.0e0[None(`2esn` In $@usn5 Is Not Null Is Not Null Where $`5esn` =~Count(*) =~1.9e0)..][[_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null|.12e-12[9e1]]..] Limit [usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]] With  *,_usn4['s_str'][8.1e1] Order By 999 Starts With 07 Ascending Where 1.0 Is Not Null Union Optional Match (:usn2)<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)-[_usn3:#usn8|:``{#usn8:{_usn4} In 0X7 In 0e0,`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]-(@usn5 ) Union Return *,Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,Case \"d_str\"[0x0..{@usn6}][$@usn5..0] When 0e0 Contains {`2esn`} Then 0X0123456789ABCDEF[1e1..] Else .12e12 Starts With 5.9e-12 Starts With `4esn` End In {usn1:$#usn7[01..2.12][2.12..3.9e-1],`6esn`:.0e-0 Ends With $`2esn` Ends With `5esn`} Order By .9e12 Contains 5.9e-12 Contains 9e-1 Descending Skip $123456789[..$999][..`6esn`]"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:@usn5)Assert Exists(Allshortestpaths(((_usn4 )-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]}))).`5esn`)"),
    octest_legacy:ct_string("Drop Constraint On()<-[@usn5:`3esn`]-()Assert Exists(_usn3(Distinct 9e1 Starts With $@usn6 Starts With 0e-0,0.12 =~`6esn` =~.9e-1).`8esn`)"),
    octest_legacy:ct_string("With  `4esn` =~_usn4 =~0e-0 As `3esn`,$12[$`6esn`..][01..] Order By [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]][None(#usn7 In .0e-0 In 12 Where $12 In {usn2})..{`1esn`:{0} Is Null Is Null}][Extract(#usn7 In .0e-0 In 12 Where {#usn8} In {12} In .9e12|{`5esn`} Is Not Null Is Not Null)..Reduce(`7esn`=`7esn` Ends With 10.12e12,usn2 In $`5esn`[{`4esn`}][{0}]|@usn5[9e-1..{`1esn`}])] Descending,$usn2 Contains $`3esn` Contains 6.0e0 Asc Optional Match ``=Shortestpath((`1esn` :`2esn`:`4esn`)<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})),@usn5=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))) Where 01234567[10.12e12][0Xa] With  $0 =~{@usn5} =~1e1,.1e-1[$@usn6] As `3esn` Order By {7} Is Not Null Descending Skip [`6esn` In 010[{`1esn`}..] Where {`4esn`}[00..]][Case $123456789[{usn1}][.12e-12] When .12e-12[9e1] Then 2.9e1[2.9e1..][`4esn`..] Else 00 =~`4esn` =~.9e-12 End..[usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF]]"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:`6esn`)Assert Exists(Reduce(`7esn`=$usn2 Starts With $999 Starts With .0e0,@usn6 In 9e12[..usn2][.._usn3]|$@usn6 Is Null Is Null).`8esn`?.usn2!)"),
    octest_legacy:ct_string("Remove {usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}.#usn7?,All(`` In `7esn` =~#usn8 =~\"d_str\" Where {12} Starts With $`` Starts With 0X0123456789ABCDEF)._usn4?.`6esn` Create @usn5=(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]}),((`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})<-[_usn4?:`8esn`|:#usn8 *01234567..]->(`5esn` {``:$_usn3 Starts With 010,`1esn`:$`8esn` =~{`6esn`} =~12})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(usn2 {`7esn`:.9e12 Contains 0 Contains $0})) Union With Distinct 0.0[$999][`6esn`] Order By $`2esn`[`8esn`..] Descending,({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}) Contains Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Contains All(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]) Descending Limit $`5esn` =~Count(*) =~1.9e0 Where $12 =~4.9e12 Start #usn7=Node:``('s_str')  Foreach(`7esn` In {`6esn`} =~2.12 =~123.654| Remove [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where @usn6[true..]|.0e0['s_str'..][0Xa..]].usn2!,(usn2 :@usn5{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})<-[`7esn`{`7esn`:6.0e0 =~12.0 =~9e1}]-({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}).#usn8?.``?,All(usn1 In \"d_str\" Contains {@usn6} Where 0.0[00..][0xabc..]).`3esn`?)"),
    octest_legacy:ct_string("Unwind Allshortestpaths(((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}))) Is Null Is Null As usn2 Merge Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))) On Match Set Case .12e12 Ends With 07 Ends With 3.9e-1 When 0.12 In $`` Then 0e-0 In 0X0123456789ABCDEF In `3esn` When 01 Ends With .0e0 Ends With 7.0e-0 Then $`6esn`[@usn6...9e-12] End.`1esn`.`1esn` =1e-1 Starts With .1e1 Starts With 12.0 Delete false,$`6esn`[@usn6...9e-12],$`4esn` Contains `4esn` Contains .0e-0 Union All With Distinct 0.0[$`4esn`] As `4esn` Order By All(usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]) In Allshortestpaths(((`5esn` :`4esn`:usn2{_usn4:Count ( * ) Is Not Null Is Not Null,#usn8:`1esn`[{usn1}..]}))) In Filter(usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0) Asc,{usn1}[9e-1][{@usn5}] Ascending,(`8esn` :@usn6:_usn3{`2esn`:#usn7 =~$@usn5 =~{7},`2esn`:{`3esn`}[..{`4esn`}][..usn2]})-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})[[`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where Count(*)[$7]|01[`6esn`..][0e0..]]..] Asc Skip 0X0123456789ABCDEF In $`2esn` In .9e-12 Limit $0 Ends With $usn1 Ends With {``} Create Unique Allshortestpaths((:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[`7esn`?:`7esn`|usn1 *1000..{@usn6:#usn7 In 07,#usn8:$999[usn1..0e-0]}]->(#usn8 :`5esn`:`7esn`{usn2})-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})) Optional Match (usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[``:`1esn`|:`1esn`{@usn5:999[..$@usn5][..``],@usn5:0xabc[..Count(*)][..$`5esn`]}]-(`1esn` :``{_usn4:$@usn5 =~{`3esn`}}) Using Scan `8esn`:`4esn` Where .9e12 Contains 0 Contains $0 Union Start usn2=Relationship(999,010,07,123456789) ,`7esn`=Node:`6esn`(@usn6='s_str')Where 123.654 Ends With {1000} Ends With 9e12"),
    octest_legacy:ct_string("Create Allshortestpaths(((:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))),`6esn`=Shortestpath((((:`6esn`{`3esn`:9e12[..usn2][.._usn3]})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})<-[_usn4 *010..0{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}]-(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})))) Start `1esn`=Node( {`5esn`}) ,usn2=Node:_usn3(`7esn`='s_str')Where $12[$`6esn`..][01..]"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:usn2)Assert usn2({`1esn`} Is Null).`8esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(``:#usn7)Assert Exists(Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0e-0[..$usn2]).#usn7?._usn4!)"),
    octest_legacy:ct_string("Foreach(@usn6 In ({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})-[`8esn`?:_usn3]->(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Ends With {_usn3:{123456789} Starts With `6esn`} Ends With {usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}| Unwind $`6esn` =~$#usn7 =~$`4esn` As usn1) Load Csv From Shortestpath((`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)) Is Not Null Is Not Null As `1esn`  Merge `8esn`=((`8esn` :`6esn`)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(@usn5 :@usn6:_usn3)) On Create Set ``+=12e12 Contains {0},`4esn`+=$`2esn` Contains {`4esn`} Union All Delete 9e12 Is Not Null Is Not Null,.9e1 Is Null Is Null Remove {@usn6:6.0e0[$#usn7..$1000]}.`8esn`?,{`3esn`:9e0[`3esn`][0],usn2:$`5esn` Is Not Null}.`8esn` Merge `2esn`=((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0})) On Create Set `2esn`+=9e1[0.0],#usn8+=.12e-12[@usn6..'s_str'],{`6esn`:4.9e12 Is Not Null Is Not Null,_usn4:`4esn`[9e-12..true]}.#usn8._usn3? =Shortestpath((((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))))[None(usn1 In {#usn7} =~.12e12 =~9e0 Where 0.0[`7esn`])..Single(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])][`5esn`(Distinct .9e1[$`1esn`..][$``..])..Case When 12e12 Ends With `5esn` Ends With .0e0 Then .9e0 In 8.1e1 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else .9e1 Ends With 0x0 End] Union Return *,\"d_str\" In usn2 In $`7esn` As `5esn`,12[11.12e-12..][`4esn`..] Order By Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Is Null Ascending,'s_str'[$`8esn`..$999] Descending,$`2esn`[`8esn`..] Descending Remove Case 2.9e1 Ends With `5esn` Ends With 1000 When @usn6[999][1000] Then .0e0 =~0 =~.0e0 When {`4esn`} In 1000 In {@usn5} Then 123456789[_usn4..`1esn`][$`6esn`..{@usn6}] Else .12e12 Is Not Null End.`2esn`? Delete (usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` )<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains ({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[:_usn3]->(`1esn` :`2esn`:`4esn`)-[usn1?:`3esn`|`3esn`{usn2:01[`4esn`..]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Contains ``(Distinct 9e12[..usn2][.._usn3],Count ( * )[_usn4..])"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:`4esn`)Assert Exists([usn1 In $@usn6 Is Null Is Null].@usn6!)"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`6esn`)Assert Exists(Reduce(`7esn`=11.12e-12 Contains usn1,_usn3 In `8esn`[_usn4]|#usn7 =~$@usn5 =~{7}).`6esn`.`1esn`?.`5esn`!)"),
    octest_legacy:ct_string("Return Distinct *"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:`5esn`)Assert Case When usn2[..$0][..`3esn`] Then $0 Contains $7 End.`3esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`4esn`)Assert Exists(Extract(`6esn` In 010[{`1esn`}..] Where {`3esn`}[_usn4][2.9e1]|'s_str' =~$usn2 =~{7}).`3esn`!)"),
    octest_legacy:ct_string("Detach Delete Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null,(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])],.1e1 Is Null Is Null With Distinct 0.0[$`4esn`] As `4esn` Order By All(usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]) In Allshortestpaths(((`5esn` :`4esn`:usn2{_usn4:Count ( * ) Is Not Null Is Not Null,#usn8:`1esn`[{usn1}..]}))) In Filter(usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0) Asc,{usn1}[9e-1][{@usn5}] Ascending,(`8esn` :@usn6:_usn3{`2esn`:#usn7 =~$@usn5 =~{7},`2esn`:{`3esn`}[..{`4esn`}][..usn2]})-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})[[`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where Count(*)[$7]|01[`6esn`..][0e0..]]..] Asc Skip 0X0123456789ABCDEF In $`2esn` In .9e-12 Limit $0 Ends With $usn1 Ends With {``} Merge ``=Shortestpath(((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[ *..123456789{@usn5:1e-1[$`4esn`]}]->(:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0}))) On Match Set `3esn` ={`4esn`:12e12 Is Not Null Is Not Null} Contains Case When {_usn4}[{`6esn`}] Then 12e12 Is Not Null Is Not Null When #usn7 Is Null Is Null Then {`8esn`} Starts With .9e-1 Starts With 1000 End"),
    octest_legacy:ct_string("Drop Constraint On(usn2:@usn6)Assert Extract(usn1 In \"d_str\" Contains {@usn6} Where $`` =~.1e-1|$`3esn` =~0x0).`7esn`.`6esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[#usn7:@usn5]->()Assert Exists(Reduce(_usn3=1.9e0[.12e-12][9e-12],`2esn` In $@usn5 Is Not Null Is Not Null|9e-12 Ends With 9e1 Ends With 4.9e12).``.`1esn`?)"),
    octest_legacy:ct_string("Create Constraint On(@usn6:``)Assert Exists(Any(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}]).`5esn`!.`7esn`!.#usn7)"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:`1esn`)Assert Exists({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12}.`7esn`)"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:usn1)Assert Exists(Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`3esn`[0e-0]).usn2?.`8esn`)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`8esn`)Assert Exists((`6esn` :`4esn`:usn2)<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]-(`7esn` :#usn8:@usn6{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}).`6esn`)"),
    octest_legacy:ct_string("Create Unique _usn4=Allshortestpaths(((`5esn` :_usn3)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1}))),((`8esn` :`2esn`:`4esn`)-[?:#usn7|:@usn5 *12]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})) Load Csv From `4esn`[..7][..$usn2] As _usn4  Unwind Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1) Starts With Case 7.0e-0[$`6esn`..] When \"d_str\"[0x0..{@usn6}][$@usn5..0] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else $`5esn`[{`4esn`}][{0}] End Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`) As @usn6"),
    octest_legacy:ct_string("Drop Constraint On()<-[`5esn`:@usn5]-()Assert Exists({usn1:0Xa In 1.0 In $@usn5}.@usn5.`8esn`)"),
    octest_legacy:ct_string("Remove (@usn5 :@usn6:_usn3{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`3esn`:`6esn` *..0x0]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}).`3esn`,count($`8esn`).@usn6 Create Shortestpath(((usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})-[{#usn7:1e-1[$`4esn`]}]->(_usn4 :`1esn`:``{`3esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}))) Detach Delete Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`) Is Null Is Null,6.0e0[$#usn7..$1000],$12 Is Not Null Is Not Null Union Remove `7esn`:`4esn`:usn2,Filter(usn2 In .12e-12 Ends With `2esn` Where $7).usn1.#usn7!.`5esn` Start `8esn`=Node( {`4esn`}) ,`3esn`=Node( {1000}) Union All Remove Any(`` In `7esn` =~#usn8 =~\"d_str\" Where `6esn` Ends With 1e1 Ends With $#usn7).`8esn`!.`2esn`!.`1esn`!,Case When 0e-0[$``..10.12e12] Then 3.9e-1[{@usn6}..][01234567..] End.@usn5.`4esn`?.`3esn` With  *,$123456789[..$999][..`6esn`] As @usn5,Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 01 =~07)[Case 9e-12 Ends With 9e1 Ends With 4.9e12 When `3esn` =~$#usn7 Then $@usn5 Starts With #usn7 When {`4esn`}[{`3esn`}][$`2esn`] Then #usn7[$`8esn`][{`3esn`}] Else 9e0[`4esn`..$_usn4][9.1e-1..0e0] End][[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]] Skip @usn5[9e-1..{`1esn`}] Limit 11.12e-12 Contains usn1"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath((`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})) On Match Set _usn4+=01234567[10.12e12][0Xa],Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01).#usn7!.`2esn`.@usn6! =4.9e12 Ends With $@usn6,`3esn`+=.1e-1 Is Not Null On Create Set _usn3+=Count ( * ) =~123456789 =~{@usn5} Load Csv From {@usn6:3.9e-1[..$1000][..0.12]}[All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000)] As `3esn`  Union Remove Reduce(`3esn`={0} Is Not Null,`` In `7esn` =~#usn8 =~\"d_str\"|01234567[\"d_str\"..][$`4esn`..])._usn4.@usn6 Delete 2.9e1 Ends With 12e12 Ends With .9e12,{123456789} Contains $0,$12 Is Null Unwind [_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12] As _usn3 Union Unwind Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null As @usn5 Detach Delete Case .12e-12 Is Null When Count ( * )[_usn4..] Then 7.0e-0 Is Not Null When 2.12[{12}] Then {usn2} Ends With {@usn6} Ends With 1000 End[Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..])][({`3esn`:{`6esn`}[@usn5..{@usn6}],_usn3:@usn6 Starts With #usn7})<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})],{`1esn`}[7.0e-0..9e-1][01234567..{`4esn`}],1e-1 Starts With .1e1 Starts With 12.0 Detach Delete 's_str'[`3esn`..0x0],0xabc Contains 12 Contains Null"),
    octest_legacy:ct_string("Drop Constraint On()-[`8esn`:#usn7]->()Assert Exists({#usn8:7[..123456789][..true]}.`2esn`.usn2.`8esn`!)"),
    octest_legacy:ct_string("Unwind {`6esn`} In {_usn4} In $12 As `1esn`"),
    octest_legacy:ct_string("Create Constraint On(@usn6:#usn8)Assert Extract(usn1 In $@usn6 Is Null Is Null Where Count(*)[Count ( * )][{0}]|2.9e1[Count ( * )..]).`8esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`6esn`)Assert usn2($12 =~4.9e12).`4esn`! Is Unique"),
    octest_legacy:ct_string("Create Unique `1esn`=Allshortestpaths(((:usn1{`6esn`:$_usn3[usn2..][usn1..],#usn7:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]->(`` :usn1{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null}))),#usn8=Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789})) Remove Reduce(#usn7={`4esn`} In 1000 In {@usn5},usn2 In .12e-12 Ends With `2esn`|false Starts With 0 Starts With 2.9e1).usn1!,None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 12e12 Ends With `5esn` Ends With .0e0).`5esn`?,All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where $`4esn`[usn2..]).`2esn`! Union Merge ((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[ *..123456789{@usn5:1e-1[$`4esn`]}]->(:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0})) Start @usn5=Rel:`8esn`(usn1={#usn7}) ,``=Relationship:@usn6(#usn8='s_str')Where 12e-12 In .9e0 Union Merge `7esn`=(({_usn4:1e-1[$`4esn`]})) Create Unique (`1esn` {usn2:.9e-12[.12e12..][0Xa..]}),@usn6=Allshortestpaths(((`5esn` :_usn3)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1}))) Match Shortestpath(((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1))),(((usn2 :`4esn`:usn2)<-[`3esn`?:@usn5|:#usn7]->({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})-[usn1?:#usn8|:`` *0xabc..12{usn2:01234567[10.12e12][0Xa]}]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}))) Using Join On @usn5,`1esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[`2esn`:`3esn`]->()Assert Exists(Shortestpath((((#usn8 :`4esn`:usn2{#usn7:{`3esn`}[#usn7],`4esn`:010[..9e-1][..0X7]})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->({usn1:12[..$`5esn`]})-[?:@usn5|:#usn7 *0]->(`7esn` :`8esn`)))).usn1?)"),
    octest_legacy:ct_string("Create Constraint On()<-[`4esn`:`8esn`]-()Assert Exists({@usn6:$@usn5 Starts With #usn7,@usn6:$@usn5[.9e-1]}.@usn5)"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv With Headers From #usn8 Is Null Is Null As _usn4  With  *,$999 Ends With `2esn` Ends With 12.0 As #usn8,All(usn1 In $@usn6 Is Null Is Null Where $`1esn`[4.9e12..][_usn3..])[..@usn5(Count(*)[Count ( * )][{0}],`4esn` =~010)] As `3esn` With  (`2esn` :`4esn`:usn2{`8esn`:.9e-1 Contains .9e0 Contains ``,_usn4:8.1e1 Contains .9e-1 Contains false})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Is Null Is Null As `1esn`,00 Is Not Null Is Not Null As `6esn`,{`5esn`} Ends With $`7esn` Ends With {@usn5} Order By {@usn6} =~Count ( * ) =~1.0 Desc,$`6esn` Contains All(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) Descending,`6esn`[0X0123456789ABCDEF..][`8esn`..] Ascending Limit None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Contains (`8esn` :@usn6:_usn3{_usn4:{#usn7} =~$@usn6 =~$7})<-[`1esn`? *0{usn2:.9e12[6.0e0..][@usn5..]}]->(usn2 :@usn6:_usn3)-[usn1:#usn7|:@usn5 *999..123456789]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})"),
    octest_legacy:ct_string("Match `1esn`=(`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[ *0X0123456789ABCDEF]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}),@usn5=Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]}))) Load Csv From usn2 Starts With $usn1 Starts With 10.12e12 As `3esn` Fieldterminator 's_str' Union Start `7esn`=Node:`5esn`({0}) ,usn2=Relationship:#usn8(usn2={@usn5})Where $`6esn`[0..{@usn6}][@usn5..1000] Foreach(`6esn` In {`5esn`} Is Not Null Is Not Null| Load Csv From {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]} Is Not Null As `6esn` Fieldterminator 's_str') Union All Merge `1esn`=({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})-[`4esn`{_usn3:010[..9e-1][..0X7]}]->(#usn7 :`1esn`:``) Start `2esn`=Rel:usn1('s_str') Where 9e1 Starts With $@usn6 Starts With 0e-0 Create Unique (((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))),`4esn`=(((`5esn` {``:$_usn3 Starts With 010,`1esn`:$`8esn` =~{`6esn`} =~12})-[?:_usn3]->(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})-[:`2esn`|`5esn` *01]-(@usn6 :usn1{`2esn`:$`6esn` Starts With 0.0})))"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:`2esn`)Assert Shortestpath((@usn5 :_usn4:`2esn`{@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})).`4esn`? Is Unique"),
    octest_legacy:ct_string("Return {12}[6.0e0..{usn2}][{_usn3}..{#usn7}] As _usn4,usn1 =~0Xa =~0 As @usn5 Limit $usn2 Ends With 9e12 Ends With Count ( * ) Union All Return $`7esn` Is Null Is Null,$`5esn`[{0}][1.9e0],Reduce(`3esn`=`7esn`[1.9e0..5.9e-12][9e0..@usn5],`` In `7esn` =~#usn8 =~\"d_str\"|{_usn3}[{0}...9e-1][9e-1...0e0]) Ends With None(usn1 In $@usn6 Is Null Is Null Where $999 =~false =~{`8esn`}) Ends With Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})))) As `` Order By 123.654 Ends With {1000} Ends With 9e12 Descending,{`6esn`} Starts With 12e12 Starts With {`2esn`} Descending Limit Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`) Is Null Is Null Union All Return Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End In (:usn1)<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}) In [_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|usn2 Ends With $123456789 Ends With {999}] As _usn4 Skip $_usn3 Contains 1.0 Contains 0.12 Create Unique (`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]}),@usn6=Shortestpath((@usn6 :`5esn`:`7esn`)) Merge Allshortestpaths(((`4esn` :#usn7:`8esn`)<-[:`8esn`|:#usn8{_usn4:$#usn7 Ends With {`5esn`} Ends With 01}]-({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[usn1:#usn7|:@usn5 *999..123456789]->(`5esn` :``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})))"),
    octest_legacy:ct_string("Merge `2esn`=Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}})<-[?{@usn5:@usn6[999][1000]}]-(:usn1{#usn8:2.9e1[{`2esn`}]})) Load Csv From $@usn5 Starts With #usn7 As usn2  Return Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]|@usn5 =~$#usn7 =~{usn1}) In Case 9.1e-1 Contains {`3esn`} Contains $12 When {@usn6} In 9e12 Then 01[$`1esn`..$`7esn`][{usn2}..12.0] When {#usn8} In {12} In .9e12 Then @usn6 Starts With #usn7 End In All(usn1 In $@usn6 Is Null Is Null Where {7} Starts With 0x0 Starts With 9e1) As usn1 Skip Any(#usn8 In 07[..$`5esn`] Where .9e0[07..][4.9e12..]) =~_usn3 =~(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``) Union All Create `4esn`=(({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)) Load Csv From $`8esn` Starts With {`7esn`} As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Drop Constraint On(usn2:_usn3)Assert Exists(0.12.usn1)"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:@usn6)Assert Exists(All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {`3esn`}[999..$`4esn`])._usn4!.@usn5!.#usn7!)"),
    octest_legacy:ct_string("Drop Constraint On()-[usn2:@usn5]->()Assert Exists(Any(#usn7 In .0e-0 In 12 Where {#usn8}[..@usn5]).`8esn`)"),
    octest_legacy:ct_string("Detach Delete (`4esn` :`8esn`{12})<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)-[_usn3:`6esn`]-({`6esn`:1000[{`1esn`}..][$`3esn`..]}) =~[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Is Not Null Is Not Null] =~Reduce(``={`4esn`}[00..],usn1 In {#usn7} =~.12e12 =~9e0|999 Starts With 7.0e-0 Starts With true),$12 Contains false Contains {`1esn`} Union Merge Shortestpath((#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7})<-[_usn3?{`8esn`:{usn2} Is Not Null Is Not Null}]->(`7esn` {@usn5:Count ( * )[_usn4..]})<-[?:`3esn`|`3esn` *0X7..0Xa{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}]->(#usn8 :`8esn`)) On Match Set `6esn`(Distinct 1.0 In {usn1}).`5esn`! =.0e-0 Contains $1000,Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0).`1esn`! =`8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End,Reduce(`5esn`={``} Contains 0.0 Contains `4esn`,`2esn` In $@usn5 Is Not Null Is Not Null|0.0[`7esn`]).`2esn`.`8esn`!.`` =1.0 In {usn1} On Create Set ``+=12e12 Contains {0},`4esn`+=$`2esn` Contains {`4esn`} Union Unwind $`7esn` Ends With 7.0e-0 Ends With $usn2 As `5esn` With Distinct 0.0[$`4esn`] As `4esn` Order By 9e1 Ends With `7esn` Ends With 2.12 Descending,Case When .9e-1 Is Not Null Is Not Null Then $12[$`6esn`..][01..] When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] Else {`8esn`}[9e12..][{_usn4}..] End Is Null Is Null Asc,{0} =~{999} Desc Skip 6.0e0[None(`2esn` In $@usn5 Is Not Null Is Not Null Where $`5esn` =~Count(*) =~1.9e0)..][[_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null|.12e-12[9e1]]..] Limit [usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]]"),
    octest_legacy:ct_string("Create Constraint On()<-[`8esn`:_usn3]-()Assert Exists(Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 9e12 Is Null Is Null).`6esn`)"),
    octest_legacy:ct_string("Create `4esn`=((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})<-[ *01234567..{usn1:{12} Contains `8esn` Contains @usn5}]->(usn1 :@usn6:_usn3)-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})),(:`3esn`{@usn5:9e12[..usn2][.._usn3]})<-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]->(:`5esn`:`7esn`{`1esn`:{1000}[..`5esn`][..9e12]})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(@usn5 :`3esn`{`8esn`:0x0 Ends With #usn8 Ends With .9e-1}) Detach Delete Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,{``:01234567[10.12e12][0Xa]} Is Null Is Null Union Return Distinct _usn3($0 Ends With 9e-12 Ends With $_usn4) Is Null Is Null As `4esn`,1.9e0 In 2.12 As usn2,$#usn7[$``..999][$usn2..$usn2] Order By Any(`1esn` In $12 In {usn2} Where @usn6[true..]) Contains Any(usn2 In .12e-12 Ends With `2esn` Where 9e12 Ends With 9e-1 Ends With 9e1) Contains (`2esn` :usn1)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(_usn4 :_usn3) Desc,`1esn`({12} Starts With $`` Starts With 0X0123456789ABCDEF,3.9e-1 Contains $@usn5)[..Case 01 =~{_usn3} =~01 When .12e12[..7] Then $_usn4[..$999] End] Desc,01234567 Ends With .0e0 Ends With 12e12 Ascending Skip 1e-1 =~$`7esn` =~1e1 Limit $999 =~0x0 Create Allshortestpaths(((:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))),((usn2 :`2esn`:`4esn`)<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]->(_usn4 :`6esn`$_usn3)-[usn2?*]->(@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})) Create Allshortestpaths((:`8esn`$@usn5))"),
    octest_legacy:ct_string("Drop Constraint On()-[`8esn`:@usn5]-()Assert Exists(None(#usn7 In .0e-0 In 12 Where 0xabc[..{usn1}][..\"d_str\"]).usn1)"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:@usn6)Assert Case When 0X0123456789ABCDEF Ends With {1000} Then {0} Is Not Null When .12e12 Is Not Null Then {`6esn`} Starts With .12e-12 Else 7[{`4esn`}..] End.@usn6! Is Unique"),
    octest_legacy:ct_string("Create Unique (_usn4 {#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12})"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:`8esn`)Assert [#usn7 In .0e-0 In 12 Where .0e-0 Ends With $`2esn` Ends With `5esn`|{usn1} Contains `4esn`]._usn4?._usn3!.`7esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`2esn`)Assert `2esn`($12 Is Not Null Is Not Null,12e12[usn2..$`6esn`]).`2esn`? Is Unique"),
    octest_legacy:ct_string("Optional Match @usn5=(((`1esn` :usn2{`8esn`:12.0[...0e0]})-[`5esn`?:@usn5|:#usn7{`4esn`:9e-12[$7..]}]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]}))),Shortestpath((`6esn` :``)<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})) Where $@usn6 Is Null Optional Match (:_usn4:`2esn`{`8esn`:12.0[...0e0]}),(`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Using Join On @usn6,usn1,`5esn` Using Index @usn5:`3esn`(`8esn`) Create Unique ((`3esn` :#usn8:@usn6)) Union All Foreach(_usn3 In Null| Optional Match ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),_usn3=Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)))) Return *,$12 Is Null As #usn8 Order By ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[_usn3?:@usn5|:#usn7]->(`` :``)-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`}) Starts With Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`) Ascending,{`8esn`} =~$#usn7 =~2.12 Desc,Count(*) Starts With 07 Starts With $#usn7 Desc Skip @usn6[true..] Create ({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12}),#usn8=Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))) Union Remove All(#usn7 In .0e-0 In 12 Where 0xabc =~123456789).@usn6.#usn8!.`7esn`,Case {_usn3} In $#usn8 In $12 When `3esn` Starts With 9.1e-1 Starts With .9e-1 Then $1000[_usn4][{@usn5}] Else 12[@usn6][{`2esn`}] End._usn3!.#usn8?.`7esn`?,Case 010[...12e-12] When .9e1[$`1esn`..][$``..] Then Count ( * ) Starts With 0.12 End.`8esn`!.#usn8 Remove Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}).`8esn`!._usn3!._usn3!,Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))).`5esn`?.`8esn`?.@usn5?,[usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-12[010..{#usn7}][{123456789}..7]|Count(*)[..{#usn7}]]._usn4! Load Csv From \"d_str\" Contains {@usn6} As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start `5esn`=Relationship:#usn8(@usn5={@usn6}) Where 0.12 =~`6esn` =~.9e-1 Load Csv From #usn7[.9e0..`3esn`][{`6esn`}..1000] As _usn3  Delete All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e0 Ends With $0)[..(_usn4 {`3esn`:.0e-0 In 12})-[`4esn`{_usn3:010[..9e-1][..0X7]}]-(@usn5 :`8esn`{12})-[_usn3:`6esn`]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})]"),
    octest_legacy:ct_string("Unwind (:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]->(@usn5 )[Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12)..][(#usn8 :`4esn`:usn2)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})..] As `3esn` Return Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With $`7esn` Starts With 999|{`6esn`} Starts With {`5esn`} Starts With 2.9e1) Is Not Null Is Not Null Foreach(`1esn` In {usn1} In Count ( * ) In 12e12| Return Distinct 01 Starts With 12 Starts With $`2esn` As usn1,{`8esn`} In {_usn3} In 6.0e0 Order By {`4esn`} Ends With Count(*) Asc,.0e0[{`5esn`}..3.9e-1] Descending,$999 Ends With `2esn` Ends With 12.0 Ascending) Union All Merge `3esn`=(usn1 :#usn8:@usn6) On Create Set (`3esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[?:`4esn`|:`2esn` *01]-(`` :``).`1esn`.@usn5! =None(`` In `7esn` =~#usn8 =~\"d_str\" Where $`4esn` In {999}) Starts With ({usn1:12[..$`5esn`]})-[:`1esn`|:`1esn` *999..123456789{@usn5:$999 Ends With `2esn` Ends With 12.0}]->(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}) Starts With Case When $#usn8 Is Not Null Is Not Null Then $#usn8[$0..`3esn`][1e-1..$7] When $`` Starts With $`4esn` Starts With `3esn` Then .12e12[$usn1..][{@usn6}..] End,Reduce(`7esn`=123.654[01..][Count(*)..],`6esn` In 010[{`1esn`}..]|0.0[$`4esn`]).`6esn` ={_usn4} Starts With `2esn`(Distinct .1e-1[..$_usn3][..0]) Starts With #usn7(Distinct usn1 =~false =~{999},{`3esn`} =~$@usn5 =~`2esn`) Unwind exists(usn1 Ends With 11.12e-12 Ends With 5.9e-12)[All(`7esn` In 0.12 Is Not Null Where 0X0123456789ABCDEF In false)..] As _usn4 Merge `3esn`=(:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0})<-[?:`5esn`]-($12)<-[?:@usn5|:#usn7 *0]-(`7esn` :`5esn`:`7esn`)"),
    octest_legacy:ct_string("Create Unique (({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})),`2esn`=(((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}))) Remove Extract(#usn8 In 07[..$`5esn`] Where $usn2[..$999][..#usn8])._usn3?,Single(`` In `7esn` =~#usn8 =~\"d_str\" Where 9e1 Ends With 9e12 Ends With 0x0).`5esn`!,usn2({`6esn`} In .0e0 In $0,0X0123456789ABCDEF Is Not Null Is Not Null).``? Union All Remove (`` :`8esn`)-[#usn7? *..00{_usn3:.0e-0[..``][..$7],_usn4:{#usn8} Ends With _usn3 Ends With `2esn`}]->(:`3esn`)-[usn1?:usn1|usn2]->(#usn7 :@usn5).usn1,{12}.`6esn`? Create Unique #usn8=((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) Merge (((`1esn` :#usn8:@usn6{`7esn`:.1e-1 Contains .12e-12,`2esn`:.1e1 Ends With #usn7 Ends With {#usn7}})-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5)-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5))) On Match Set Allshortestpaths((:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})).@usn6! =12 Is Not Null Is Not Null On Create Set Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})).`5esn`!._usn3!._usn3? =$`1esn` Ends With 1000,(`8esn` :usn1)<-[usn2 *7]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})-[ *01{usn1:false[..usn2][..999]}]-(_usn3 ).#usn7!.`` =4.9e12 Ends With $@usn6,usn2 =10.12e12[.0e0] Union All Remove Case #usn8[\"d_str\"..usn2] When $12[$`6esn`..][01..] Then $`4esn`[$@usn6...12e12] End.`7esn`!.``!.`7esn`?,All(`6esn` In 010[{`1esn`}..] Where `3esn` Starts With 9.1e-1 Starts With .9e-1).#usn8.`3esn`! Merge `4esn`=Allshortestpaths((usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) Unwind ``[$7..$_usn4] As ``"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:`6esn`)Assert Exists(Extract(usn2 In .12e-12 Ends With `2esn` Where $999 Ends With `2esn` Ends With 12.0|{_usn3} Is Null Is Null).`3esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:usn2)Assert Single(usn2 In .12e-12 Ends With `2esn` Where $999 Ends With `2esn` Ends With 12.0).`1esn`?.``! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[@usn6:`3esn`]-()Assert Exists({usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`}._usn3!)"),
    octest_legacy:ct_string("Optional Match `4esn`=Shortestpath(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))),((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))"),
    octest_legacy:ct_string("Drop Constraint On()<-[#usn8:`6esn`]-()Assert Exists(Single(usn2 In .12e-12 Ends With `2esn`)._usn3!)"),
    octest_legacy:ct_string("Create `2esn`=(({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})) Detach Delete None(`` In `7esn` =~#usn8 =~\"d_str\" Where $`4esn` In {999}) Starts With ({usn1:12[..$`5esn`]})-[:`1esn`|:`1esn` *999..123456789{@usn5:$999 Ends With `2esn` Ends With 12.0}]->(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}) Starts With Case When $#usn8 Is Not Null Is Not Null Then $#usn8[$0..`3esn`][1e-1..$7] When $`` Starts With $`4esn` Starts With `3esn` Then .12e12[$usn1..][{@usn6}..] End,{123456789} Contains $0,Filter(#usn7 In .0e-0 In 12 Where 00[$``])[[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $`4esn`[usn2..]|3.9e-1 Contains $@usn5]] Union All Unwind Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Is Null As #usn8"),
    octest_legacy:ct_string("Start _usn4=Rel:`4esn`({7})  Foreach(`3esn` In {`8esn`} Ends With true Ends With {`3esn`}| Create (`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}),@usn5=Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]}))))"),
    octest_legacy:ct_string("Create Constraint On(usn2:_usn4)Assert Reduce(_usn4=5.9e-12 Contains {12} Contains {#usn8},`7esn` In 0.12 Is Not Null|{`5esn`}[.1e-1..1e-1][999..{_usn3}]).#usn8.``? Is Unique"),
    octest_legacy:ct_string("Match Shortestpath(((`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999}))),_usn3=(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}) Using Join On `4esn`,`5esn`,@usn6 Where #usn8 =~{@usn5} Unwind {7} Is Not Null As _usn3 Union All Optional Match `5esn`=Shortestpath(((`8esn` :`8esn`)-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`8esn`*]-(`7esn` :``{usn2:$7}))),`3esn`=Allshortestpaths((((`4esn` :`3esn`)<-[@usn5?*..]->(:_usn3{_usn3:010[..9e-1][..0X7]})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)))) Using Index `5esn`:#usn8(_usn3) Return Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] As #usn8,[`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..]),{`7esn`} Is Not Null Is Not Null As `1esn` Order By 00[{1000}] Descending,'s_str'[$_usn3..][9.1e-1..] Desc,$_usn4 =~$#usn8 =~{`4esn`} Desc Skip $``[9e12..] Limit Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[`8esn`(0X0123456789ABCDEF Is Not Null Is Not Null,{usn1} Is Not Null Is Not Null)..][{usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}..] Union All Foreach(`6esn` In $_usn4[..01234567][..$`6esn`]| Match ((`4esn` {@usn5:$999 Ends With `2esn` Ends With 12.0})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})) Using Index `5esn`:`4esn`(_usn3) Using Join On #usn7,`7esn`)"),
    octest_legacy:ct_string("Create Constraint On(usn1:usn2)Assert Exists(Reduce(#usn8=$``[1.0..][_usn3..],`6esn` In 010[{`1esn`}..]|{1000} =~4.9e12 =~9e1).`6esn`.@usn6!)"),
    octest_legacy:ct_string("Return 9e1[12] Order By 0xabc[01234567][.12e-12] Ascending,Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Asc Foreach(`4esn` In 7.0e-0[true]| Unwind None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Starts With {@usn5:999 Ends With {#usn8},_usn4:Null In {7}} As `5esn` Create #usn7=(`8esn` :`7esn`)-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``),((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[usn2 *999..123456789{usn1:12e12 Ends With `5esn` Ends With .0e0}]-(`3esn` :#usn8:@usn6)-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}))) With  $`1esn`[..12e-12][...9e12] As `7esn` Order By .12e12[01..{1000}][8.1e1..Count ( * )] Asc,{12} Starts With $`` Starts With 0X0123456789ABCDEF Asc,$_usn3[0x0][{0}] Descending Skip 9e1[..{usn1}] Union Create `6esn`=((:#usn7:`8esn`{usn2:`1esn` =~{12} =~{999}})),`5esn`=(:usn2{`6esn`:9e12[..usn2][.._usn3],`1esn`:01[`6esn`..][0e0..]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`}) Load Csv From 010[{`1esn`}..] As #usn7 "),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv With Headers From None(`6esn` In 010[{`1esn`}..] Where 0 In 2.9e1 In 7) Ends With [@usn6 In 9e12[..usn2][.._usn3] Where .12e12 Ends With 07 Ends With 3.9e-1|$@usn5 Is Null Is Null] As _usn3  Create (({`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654})-[$#usn8]->({usn2:01[`4esn`..]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1})),@usn6=((:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[?:`5esn`]-(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}))"),
    octest_legacy:ct_string("Create Constraint On()-[_usn4:#usn8]->()Assert Exists(Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`|01 =~07).`2esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:usn2)Assert [`1esn` In $12 In {usn2} Where {usn1} Is Not Null]._usn4!.`8esn`!.`6esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:`6esn`)Assert (:`1esn`:``{`8esn`:0X0123456789ABCDEF Ends With {1000}})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`6esn` :`4esn`:usn2).`5esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[_usn4:`1esn`]-()Assert Exists(Case $@usn5[``..] When `6esn`[0X0123456789ABCDEF..][`8esn`..] Then `2esn`[`7esn`][1000] When {`6esn`} Starts With .12e-12 Then $`8esn` =~{`1esn`} =~$7 End.#usn7?)"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`2esn`)Assert Exists(Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0e-0[..$usn2]).@usn6)"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`5esn`)Assert Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When $1000[_usn4][{@usn5}] Then 4.9e12[{_usn4}..] End.@usn6?.#usn8! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:`1esn`]-()Assert Exists(Single(`` In `7esn` =~#usn8 =~\"d_str\" Where 6.0e0[{`2esn`}..$``]).`1esn`!)"),
    octest_legacy:ct_string("Merge _usn4=((_usn3 :`6esn`)<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})) On Create Set `7esn`+=$``[Count(*)..{12}],@usn5 =All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))]"),
    octest_legacy:ct_string("Create Constraint On(_usn3:usn1)Assert Shortestpath(((`8esn` :`8esn`)<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))).@usn5! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:`8esn`)Assert Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 0xabc[01234567][.12e-12]|{123456789} Starts With $_usn4 Starts With 0x0).``.`` Is Unique"),
    octest_legacy:ct_string("Merge Shortestpath((usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})) On Create Set `7esn` ={`1esn`}[7.0e-0..9e-1][01234567..{`4esn`}],`7esn`+=$`` =~$_usn3,`2esn` =[usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF] Is Null Is Null On Match Set Any(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])._usn4._usn3!.usn1! ={usn1} Is Not Null Optional Match (:`3esn`{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}),(:usn1{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})-[_usn3:`4esn`|:`2esn` *01234567..]->(`8esn` :`2esn`:`4esn`) Using Index `3esn`:`2esn`(`7esn`) Using Index usn2:`1esn`(`3esn`) Merge (({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})<-[usn2:`4esn`|:`2esn` *0X7..0Xa]-(#usn7 :#usn7:`8esn`)) Union All Load Csv With Headers From Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null)[{`1esn`:.9e-12[usn2]}][Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12)] As `7esn`  Start `4esn`=Node(0x0) "),
    octest_legacy:ct_string("Unwind Allshortestpaths(((@usn6 :@usn6:_usn3))) Is Null Is Null As `2esn` Start @usn6=Relationship:#usn8(usn2={12}) ,@usn5=Rel:usn2({`1esn`}) Return Distinct 2.9e1 =~{123456789} =~01 As usn1,.9e12 Is Not Null Is Not Null,12e12[usn2..$`6esn`] As usn1 Order By [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..] Asc,Case When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else {123456789} Starts With `6esn` End =~Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where `4esn` Contains 0X0123456789ABCDEF Contains $usn2) =~Allshortestpaths((`7esn` :``{usn2:$7})) Descending Skip Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End In (:usn1)<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}) In [_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|usn2 Ends With $123456789 Ends With {999}] Limit $`6esn`[$_usn3..{1000}] Union Unwind Single(`6esn` In 010[{`1esn`}..] Where {`4esn`} In 1000 In {@usn5}) Starts With Any(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01234567 Ends With .0e0 Ends With 12e12) As `1esn` Return Distinct 4.9e12[{_usn4}..],{`5esn`} Ends With $`7esn` Ends With {@usn5} Skip 00[{`4esn`}..] Limit false Contains {`7esn`} Merge `6esn`=(((`8esn` :usn2)-[@usn5:`2esn`|`5esn` *7]->(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})-[? *12{@usn6:$`` =~.1e-1}]->(:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}}))) On Match Set {usn1:{123456789} Starts With $_usn4 Starts With 0x0,`3esn`:$`4esn` Is Null Is Null}.`7esn`?.`7esn`?.#usn7 =1.9e0 In 2.12,Filter(usn2 In $`5esn`[{`4esn`}][{0}] Where {0}[.1e-1..][_usn4..]).`6esn`.usn1.`7esn`? =12e-12 Ends With $999 Ends With ``,Extract(#usn8 In 07[..$`5esn`] Where 123.654 Ends With {1000} Ends With 9e12|$usn1[..$999][..0e0])._usn3! ={1000} Starts With {`1esn`}"),
    octest_legacy:ct_string("Create Constraint On(usn1:usn1)Assert None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 1000[{`1esn`}..][$`3esn`..]).#usn8? Is Unique"),
    octest_legacy:ct_string("With  *,Reduce(#usn7=$usn1 Ends With {`2esn`} Ends With $usn1,`6esn` In 010[{`1esn`}..]|.9e-12[.12e12..][0Xa..])[#usn7(8.1e1 Contains $@usn6,$12[$`6esn`..][01..])..Reduce(@usn5=`1esn` In 6.0e0 In 12,`` In `7esn` =~#usn8 =~\"d_str\"|$`6esn` =~$#usn7 =~$`4esn`)] Order By Allshortestpaths(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0}))[Reduce(@usn6=10.12e12 Starts With $`4esn` Starts With 0e0,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$1000 Contains $123456789 Contains #usn8)..Case 7[..123456789][..true] When $1000[..0e-0][..010] Then 999 Starts With 7.0e-0 Starts With true End][[`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]]..Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When 0.12[Count ( * )..Count ( * )][$999..`5esn`] Then $123456789[..$999][..`6esn`] Else 7[{`4esn`}..] End] Asc,{`3esn`} =~$`` =~$`8esn` Ascending Skip Reduce(`1esn`={`5esn`}[01234567..][5.9e-12..],usn1 In {#usn7} =~.12e12 =~9e0|$`6esn`[..01][..{_usn3}]) Ends With (`2esn` :usn1)<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-(_usn3 :`1esn`:``) Ends With {usn1:{12}[6.0e0..{usn2}][{_usn3}..{#usn7}]} Limit {`3esn`}[...1e1][..0] Where $7[.1e-1..{@usn6}][$7..{`1esn`}] Start ``=Node(00) ,`2esn`=Rel(07,0Xa) Union All With  @usn5[{`1esn`}..][Count ( * )..] As `8esn` Limit Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4}) Contains (:`2esn`:`4esn`{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``) Contains {@usn6:10.12e12 Contains .9e0,`3esn`:`6esn` =~999 =~$999} Where {`1esn`}[..$_usn4] Union Delete Filter(@usn6 In 9e12[..usn2][.._usn3] Where 1.9e0[..0][.._usn3]) Ends With {`6esn`:9e12 Ends With \"d_str\" Ends With 0X7,`3esn`:0X0123456789ABCDEF[1e1..]} Ends With Reduce(@usn5=`` Contains {`6esn`} Contains 123456789,`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|00[$``]) Foreach(`5esn` In 0 Contains {`2esn`}| Optional Match Allshortestpaths((:`3esn`)) Using Index `6esn`:usn1(`3esn`) Where {``} Is Null Is Null)"),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:`3esn`]->()Assert Exists(Filter(#usn8 In 07[..$`5esn`] Where 2.9e1 =~Count(*) =~{123456789}).`5esn`._usn4?)"),
    octest_legacy:ct_string("Load Csv From #usn8(Distinct 12e12[{`4esn`}..`4esn`][999..{@usn6}])[Any(`6esn` In 010[{`1esn`}..] Where {`3esn`}[_usn4][2.9e1])..{``:9e1[0.0]}] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:#usn8]->()Assert Exists(None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .9e12 Is Not Null Is Not Null)._usn3!.``.usn1?)"),
    octest_legacy:ct_string("Load Csv With Headers From $999 =~false =~{`8esn`} As @usn6 Fieldterminator 's_str' Merge @usn5=(_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]}) On Match Set `7esn`+=$_usn3[0x0][{0}],Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}}))._usn3 =9e0[{7}...0e-0][Null..@usn5],usn1+=Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null"),
    octest_legacy:ct_string("Optional Match ((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})) Using Index usn1:#usn8(``) Remove Case {0}[.0e-0][$`2esn`] When Count(*)[$7] Then $12 Ends With {_usn4} Ends With $`8esn` End.`6esn`,Shortestpath(((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))).``?,None(`2esn` In $@usn5 Is Not Null Is Not Null Where `6esn`[3.9e-1..`8esn`][12.0..0.0]).`7esn`! Create `6esn`=Shortestpath((@usn5 :_usn4:`2esn`{@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})),`2esn`=Shortestpath(((`1esn` :`7esn`{usn1:3.9e-1 Starts With .9e0 Starts With {#usn7}})<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]}))) Union Create Unique _usn4=((:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)),#usn8=(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]}) Unwind {7} Is Not Null As _usn3 Remove {``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}._usn3?"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`1esn`)Assert Exists(Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End.`1esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(usn1:#usn8)Assert Exists(Extract(@usn6 In 9e12[..usn2][.._usn3]|01234567[1000..][$`8esn`..])._usn4!.usn1!.``!)"),
    octest_legacy:ct_string("Optional Match #usn8=({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)}),((:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]})-[``:usn1|usn2{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]}]-(`7esn` {@usn5:Count ( * )[_usn4..]})-[usn2:_usn3 *0xabc..12]->(:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})) Using Scan ``:#usn8 Using Scan #usn7:`8esn` Match `3esn`=({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}),((:#usn7:`8esn`{@usn6:123456789[_usn4..`1esn`][$`6esn`..{@usn6}]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}})) Using Index `5esn`:`4esn`(_usn3) Union Delete Filter(@usn6 In 9e12[..usn2][.._usn3] Where 1.9e0[..0][.._usn3]) Ends With {`6esn`:9e12 Ends With \"d_str\" Ends With 0X7,`3esn`:0X0123456789ABCDEF[1e1..]} Ends With Reduce(@usn5=`` Contains {`6esn`} Contains 123456789,`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|00[$``]) Foreach(`5esn` In 0 Contains {`2esn`}| Optional Match Allshortestpaths((:`3esn`)) Using Index `6esn`:usn1(`3esn`) Where {``} Is Null Is Null)"),
    octest_legacy:ct_string("Drop Constraint On()-[#usn8:`2esn`]->()Assert Exists(Reduce(#usn8=$``[1.0..][_usn3..],`6esn` In 010[{`1esn`}..]|{1000} =~4.9e12 =~9e1)._usn4)"),
    octest_legacy:ct_string("Create Constraint On()-[#usn7:usn2]->()Assert Exists(Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})).`4esn`?.`2esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:#usn7)Assert Exists(Reduce(`5esn`={@usn6} In 1.0,_usn3 In `8esn`[_usn4]|@usn6 Starts With #usn7).`5esn`?)"),
    octest_legacy:ct_string("Create Constraint On()-[`7esn`:_usn4]-()Assert Exists(#usn8(Distinct `6esn`[3.9e-1..`8esn`][12.0..0.0],@usn5 In Null).`7esn`!)"),
    octest_legacy:ct_string("Create Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))),@usn6=((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})) Foreach(`8esn` In {1000}[`2esn`...0e-0][9e-1..0X7]| Load Csv From usn2(Distinct $_usn3 =~'s_str' =~12) In (`` :usn1)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}) In Case When {_usn4}[{`6esn`}] Then 12e12 Is Not Null Is Not Null When #usn7 Is Null Is Null Then {`8esn`} Starts With .9e-1 Starts With 1000 End As usn2 ) Load Csv With Headers From $0[.9e12..] As `1esn` "),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From $999 =~false =~{`8esn`} As @usn6 Fieldterminator 's_str' Foreach(usn2 In 's_str'[$_usn3..][9.1e-1..]| Start `7esn`=Node( {999}) ,`5esn`=Node:_usn4(@usn5={`4esn`})Where $#usn7)"),
    octest_legacy:ct_string("Drop Constraint On(usn1:`6esn`)Assert Exists(Case $`3esn` =~0x0 When `3esn` Is Null Is Null Then $@usn6 Starts With 0xabc Starts With {`7esn`} Else Count(*)[Null..][01234567..] End._usn4!)"),
    octest_legacy:ct_string("Delete {#usn7} Ends With 999 Ends With 12,\"d_str\"[0x0..{@usn6}][$@usn5..0],{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1] Optional Match `2esn`=Allshortestpaths(((:#usn8:@usn6{`3esn`:$#usn7}))) Using Join On `5esn`,`8esn`,#usn7 Using Join On usn1,`1esn`,_usn4 Where {@usn5}[10.12e12..] Union All Remove (_usn3 :#usn7:`8esn`)<-[? *0X7..0Xa]->(`1esn` ).`6esn`!.@usn5 Remove {`1esn`:$#usn7 Starts With $123456789,`4esn`:{_usn3}[{0}...9e-1][9e-1...0e0]}.`1esn`?.@usn6?.`8esn`!"),
    octest_legacy:ct_string("Return Distinct $usn2[{`1esn`}] As `5esn`,[usn1 In $@usn6 Is Null Is Null Where 9e0[`4esn`..$_usn4][9.1e-1..0e0]][Any(`` In `7esn` =~#usn8 =~\"d_str\" Where 9e-12 Ends With 9e1 Ends With 4.9e12)][(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]})] As _usn3,0e0[2.9e1..][.12e-12..] As `2esn` Order By `6esn`[0X0123456789ABCDEF..][`8esn`..] Ascending,[usn2 In .12e-12 Ends With `2esn` Where @usn5 In Null|false =~{`8esn`} =~00][Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where Count ( * ) =~123456789 =~{@usn5})..Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)] Descending,usn2($usn1 =~.0e0 =~{`4esn`}) Contains Allshortestpaths(((#usn8 :@usn5)<-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 )<-[?:`1esn`|:`1esn`{`5esn`:9e1[0.0]}]->(`8esn` ))) Ascending Limit {`8esn`}[.0e0..][999..] Create Unique `1esn`=((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})),`1esn`=((_usn4 )-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]}))"),
    octest_legacy:ct_string("Match `4esn`=(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0}) Start `5esn`=Node:`8esn`('s_str') "),
    octest_legacy:ct_string("Drop Constraint On(usn1:`4esn`)Assert Reduce(`6esn`={usn1} Contains `4esn`,`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$usn1[9e1][{999}]).`7esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[`4esn`:usn1]->()Assert Exists({_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999}.`7esn`)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:`7esn`)Assert (:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(`2esn` :@usn5)-[`8esn`:_usn4|:`1esn`]->({@usn6:.12e12 Starts With 5.9e-12 Starts With `4esn`}).#usn7 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`3esn`:`2esn`]-()Assert Exists((#usn8 {usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]}).`1esn`!)"),
    octest_legacy:ct_string("Start `2esn`=Relationship(0) Where $12 Ends With 12.0 Ends With $`4esn` Union All With  *,$_usn3[.0e-0..999],0 In 2.9e1 In 7 As usn2 Skip #usn8 Contains 7 Contains {`4esn`} Limit Allshortestpaths((((@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[``? *..00{@usn5:$`8esn` =~{`1esn`} =~$7,#usn7:.12e-12 Starts With .12e-12}]->({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]})-[:`8esn`|:#usn8 *01]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))))[..Case When {#usn7} Ends With 999 Ends With 12 Then {`3esn`}[999..$`4esn`] End] Load Csv With Headers From $`1esn`[4.9e12..][_usn3..] As `2esn` Fieldterminator 's_str' Start `5esn`=Node:`1esn`(`4esn`={@usn5}) Where {`8esn`} In {_usn3} In 6.0e0 Union Unwind 9e0 Is Null As ``"),
    octest_legacy:ct_string("Return Distinct 0.0 Starts With 0X0123456789ABCDEF,{123456789} =~.9e1 =~$_usn3,Case When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 Else $12 Is Not Null Is Not Null End Starts With usn1(Distinct .9e1[$`1esn`..][$``..]) Starts With Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End Order By Null Ends With `4esn` Ends With `3esn` Descending,None(`6esn` In 010[{`1esn`}..] Where 0 In 2.9e1 In 7) Ends With [@usn6 In 9e12[..usn2][.._usn3] Where .12e12 Ends With 07 Ends With 3.9e-1|$@usn5 Is Null Is Null] Ascending,Case When true In 0.0 Then {`4esn`}[{`3esn`}][$`2esn`] Else @usn6 Starts With #usn7 End =~{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}} =~{_usn3:010[..9e-1][..0X7]} Descending Union All Remove `5esn`:`6esn`,[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01|_usn4 Ends With {`8esn`} Ends With usn2].usn1.`7esn`.@usn6 Match (((:`6esn`)-[? *0Xa..12{`4esn`:9e-12[$7..]}]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(usn2 {`7esn`:.9e12 Contains 0 Contains $0}))),@usn6=Shortestpath((:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})) Using Index `6esn`:usn1(#usn8) Using Scan `1esn`:#usn8"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:``)Assert All(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 999 Starts With 7.0e-0 Starts With true).`7esn`!.usn2?.`6esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[usn2:_usn4]-()Assert Exists(Any(usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..]).`4esn`!.@usn5!)"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:`5esn`)Assert Extract(#usn8 In 07[..$`5esn`] Where 07[{@usn5}..]|9e-1 Contains 3.9e-1).`3esn`?.usn1 Is Unique"),
    octest_legacy:ct_string("With Distinct *,0X0123456789ABCDEF In .9e-1 In 123456789 Limit 1.9e0 =~.0e0 =~0X7"),
    octest_legacy:ct_string("Create Shortestpath((`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})),((_usn3 :`7esn`{@usn6:$`4esn` Ends With .12e12 Ends With 123.654})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)<-[#usn7? *0xabc..12]-(:`3esn`)) With  {`2esn`}[0x0..9e0] As `6esn`,{`8esn`} Ends With true Ends With {`3esn`} As `2esn` Skip {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null) Where 2.9e1 Ends With `5esn` Ends With 1000"),
    octest_legacy:ct_string("Drop Constraint On()<-[`3esn`:``]-()Assert Exists(Reduce(`8esn`=Count(*)[$7],`2esn` In $@usn5 Is Not Null Is Not Null|$@usn5 Contains _usn3).`6esn`!)"),
    octest_legacy:ct_string("Match ``=Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))),`7esn`=Shortestpath(((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})))) Where 0X0123456789ABCDEF[1e1..]"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`5esn`)Assert Case When `4esn` =~010 Then {7}[$@usn5..123456789][1e1..1.9e0] Else 1e-1 =~$`7esn` =~1e1 End.usn1? Is Unique"),
    octest_legacy:ct_string("Load Csv From $`6esn`[0..{@usn6}][@usn5..1000] As _usn3 Fieldterminator \"d_str\" Union All Delete `2esn` In .9e0 In ``,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Unwind 9e1[0.0] As @usn5 Remove {``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}._usn3? Union All Load Csv With Headers From Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null As @usn5 Fieldterminator \"d_str\" Foreach(`3esn` In Reduce(`7esn`=#usn7 Contains .0e0 Contains $@usn6,`6esn` In 010[{`1esn`}..]|00 Is Not Null Is Not Null)[$7..]| Load Csv From {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null) As @usn6  Start `5esn`=Node:usn2(_usn4='s_str') ) Return {0}[.1e-1..][_usn4..] As _usn3,9e0[{7}...0e-0][Null..@usn5] As `` Limit $_usn3 Is Null"),
    octest_legacy:ct_string("Create Unique `4esn`=Shortestpath(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))),((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))"),
    octest_legacy:ct_string("Detach Delete $usn1 =~9e1 =~$1000 Union Optional Match `3esn`=({#usn8:_usn4[$_usn4]})-[:@usn6|:`4esn` *010..0{`7esn`:{12} Contains `8esn` Contains @usn5,_usn3:0.0[$`4esn`]}]->(#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7}) Where .12e12[..$123456789] Detach Delete Reduce(`1esn`={`5esn`}[01234567..][5.9e-12..],usn1 In {#usn7} =~.12e12 =~9e0|$`6esn`[..01][..{_usn3}]) Ends With (`2esn` :usn1)<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-(_usn3 :`1esn`:``) Ends With {usn1:{12}[6.0e0..{usn2}][{_usn3}..{#usn7}]},{7}[0x0][1e1],$1000 Is Null"),
    octest_legacy:ct_string("Delete true[..{`2esn`}],Allshortestpaths(({usn1:12[..$`5esn`]})<-[:`4esn`|:`2esn`{`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]}]-(#usn8 :usn2))[..`1esn`][..Case .12e-12 Starts With .12e-12 When 0xabc Starts With {`3esn`} Starts With {``} Then {usn2} Is Not Null Is Not Null Else {`4esn`} Ends With Count(*) End],$`4esn` Contains `4esn` Contains .0e-0 Load Csv From [usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0|4.9e12 Is Not Null Is Not Null] =~Case {_usn3} In $#usn8 In $12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else 0[..{0}][..true] End =~Case Count ( * )[`5esn`..\"d_str\"][01234567..{1000}] When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else $_usn3 Starts With 010 End As #usn7  Load Csv With Headers From 12 Ends With 12e12 As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:usn2)Assert [`` In `7esn` =~#usn8 =~\"d_str\" Where 2.12 =~$999].@usn5? Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[`3esn`:@usn6]-()Assert Exists(Reduce(@usn5=0xabc[..Count(*)][..$`5esn`],usn1 In \"d_str\" Contains {@usn6}|123456789[#usn7..9e-1][10.12e12..{0}]).`2esn`!.`3esn`)"),
    octest_legacy:ct_string("Create ((`5esn` :#usn8:@usn6))"),
    octest_legacy:ct_string("Unwind `6esn`[0X0123456789ABCDEF..][`8esn`..] As `1esn` Foreach(_usn3 In 12e12 Is Not Null Is Not Null| Remove [`3esn` In 8.1e1 Contains .9e-1 Contains false Where 07 Ends With {1000} Ends With 01234567|$`5esn` Ends With 's_str' Ends With $`6esn`].`2esn`,{`2esn`:0xabc[01234567][.12e-12],`1esn`:{`3esn`}[#usn7]}._usn4?,(_usn3 )<-[:`8esn`|:#usn8 *0X7..0Xa]->(`4esn` :`8esn`{12}).`8esn`!._usn3? Return *,@usn5[{`1esn`}..][Count ( * )..] As `8esn` Order By {_usn3:.0e-0[..``][..$7]}[..(`6esn` :`4esn`:usn2)-[$#usn8]->(`3esn` :`5esn`:`7esn`)][..@usn5] Descending Skip $999[9e0] Limit false =~{`8esn`} =~00) Union All Detach Delete {`8esn`}[9e-12..0],`` Ends With 1.0 Ends With usn1 Remove Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With ``).`5esn`,{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6}._usn3.`2esn`!,Reduce(`8esn`=@usn6[999][1000],#usn8 In 07[..$`5esn`]|{`8esn`}[9e12..][{_usn4}..]).`4esn`? Detach Delete {`1esn`} Contains 1.0 Contains 4.9e12,{999}[..`6esn`],{`3esn`} =~$`` =~$`8esn` Union All Foreach(_usn3 In Null| Optional Match ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),_usn3=Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)))) Return *,$12 Is Null As #usn8 Order By ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[_usn3?:@usn5|:#usn7]->(`` :``)-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`}) Starts With Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`) Ascending,{`8esn`} =~$#usn7 =~2.12 Desc,Count(*) Starts With 07 Starts With $#usn7 Desc Skip @usn6[true..] Create ({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12}),#usn8=Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]})))"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:_usn3)Assert Exists([@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 1.9e0 In $@usn6 In $_usn3].`7esn`)"),
    octest_legacy:ct_string("Create Constraint On()-[_usn4:`7esn`]->()Assert Exists(({``:true Is Null,_usn3:$12 Ends With 7.0e-0 Ends With 9e-12})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(:`6esn`{`2esn`:`5esn` Ends With Count(*)}).usn2)"),
    octest_legacy:ct_string("With Distinct All(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`]) Ends With Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e-12[9e1]),9e0[`3esn`][0] As #usn7,`1esn`[..$1000] As _usn3 Load Csv From (usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[_usn3?:@usn5|:#usn7]->(`2esn` :usn1)<-[?:usn1|usn2{#usn8:'s_str'[`2esn`][12.0]}]->(_usn3 :``)[[usn2 In .12e-12 Ends With `2esn` Where .9e0[07..][4.9e12..]|12.0[...0e0]]] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct *,Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1) Is Null Is Null Skip 0xabc Contains 12 Contains Null Limit $123456789 Contains 07 Contains 0.0 Load Csv From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As `5esn` Fieldterminator 's_str' Union All Start `7esn`=Node:usn1(\"d_str\") ,`5esn`=Relationship(999,010,07,123456789) Union All Start #usn7=Node( {``}) Where $`6esn`[..01][..{_usn3}] Optional Match `7esn`=(@usn5 :@usn5{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6})-[usn2?:`1esn`|:`1esn` *..123456789]-(:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[:_usn3]-(`3esn` ),(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 {#usn7:$999 =~false =~{`8esn`}})) Where {#usn7} Starts With .1e-1"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:_usn3)Assert Exists(Allshortestpaths(((_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null})<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))).`3esn`?.usn2?)"),
    octest_legacy:ct_string("Load Csv From Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]) In None(`1esn` In $12 In {usn2} Where $12 =~4.9e12) As #usn8  Optional Match `2esn`=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))) Using Join On _usn3,usn2 Using Index _usn4:`1esn`(@usn5) Where 0e0 Contains {`2esn`} Start @usn6=Relationship:usn2({usn2}) ,usn2=Node:`2esn`(_usn4={#usn7})Where `7esn`[1.9e0..5.9e-12][9e0..@usn5] Union Start _usn3=Rel:usn2(#usn7='s_str') ,_usn3=Node( {usn2}) Union All With  *,$_usn3[.0e-0..999],0 In 2.9e1 In 7 As usn2 Skip #usn8 Contains 7 Contains {`4esn`} Limit Allshortestpaths((((@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[``? *..00{@usn5:$`8esn` =~{`1esn`} =~$7,#usn7:.12e-12 Starts With .12e-12}]->({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]})-[:`8esn`|:#usn8 *01]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))))[..Case When {#usn7} Ends With 999 Ends With 12 Then {`3esn`}[999..$`4esn`] End] Load Csv With Headers From $`1esn`[4.9e12..][_usn3..] As `2esn` Fieldterminator 's_str' Start `5esn`=Node:`1esn`(`4esn`={@usn5}) Where {`8esn`} In {_usn3} In 6.0e0"),
    octest_legacy:ct_string("Return *,$`3esn`[..{`5esn`}],$_usn3 Contains 1.0 Contains 0.12 As `` Skip 5.9e-12[..9e0] Union With Distinct 4.9e12 Starts With {``} Where $0 Ends With 9e-12 Ends With $_usn4"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From {`8esn`:`1esn` In 6.0e0 In 12} =~Case 7 Starts With 9e-12 When .9e12 Is Not Null Is Not Null Then 1000[{`1esn`}..][$`3esn`..] Else {`6esn`}[6.0e0..9e0][.9e1..12e12] End As `5esn`  Merge Allshortestpaths(((_usn4 {_usn3:.0e-0[..``][..$7]}))) On Match Set @usn5+=Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null Return Distinct *,{``}[$usn2..00][{_usn3}..123.654],`5esn` Ends With 's_str' Ends With @usn5 Skip Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn`) Contains (`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2) Contains Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where Null In {7}) Limit (`1esn` :`5esn`:`7esn`)-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})[[#usn8 In 07[..$`5esn`] Where `8esn`[_usn4]]..Reduce(`7esn`=$@usn5 Is Null Is Null,`2esn` In $@usn5 Is Not Null Is Not Null|{`1esn`}[..$_usn4])][Case When `4esn` =~010 Then {7}[$@usn5..123456789][1e1..1.9e0] Else 1e-1 =~$`7esn` =~1e1 End..#usn7(Distinct usn1 =~false =~{999},{`3esn`} =~$@usn5 =~`2esn`)]"),
    octest_legacy:ct_string("Foreach(@usn6 In {`6esn`} Starts With 12e12 Starts With {`2esn`}| Delete {123456789} Contains $#usn7 Contains {#usn8} Load Csv From None(`1esn` In $12 In {usn2})[..Reduce(usn2=.9e0 In 8.1e1,`3esn` In 8.1e1 Contains .9e-1 Contains false|$_usn3 Is Not Null)] As #usn7 Fieldterminator 's_str')"),
    octest_legacy:ct_string("Match Allshortestpaths((`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`)) Using Index usn1:``(@usn5) Union Unwind {`8esn`}[.0e0..][999..] As `1esn` Union All Remove All(`` In `7esn` =~#usn8 =~\"d_str\" Where 9e12 Ends With 9e-1 Ends With 9e1)._usn4?.`2esn`,#usn8({`4esn`} Ends With Count(*),`6esn`[3.9e-1..`8esn`][12.0..0.0]).`3esn`!.`6esn`? Remove Allshortestpaths(((`7esn` {#usn8:2.9e1[{`2esn`}]})-[?:`1esn`|:`1esn` *..0x0{@usn6:.0e-0 In 12}]-(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0})-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]-(`1esn` :_usn4:`2esn`))).`2esn`?.`7esn`.`5esn`,Shortestpath((`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]}))._usn3.`3esn`.`1esn`!,#usn7(Distinct \"d_str\" Is Not Null Is Not Null,$`6esn`[$_usn3..{1000}])._usn3!.#usn7?"),
    octest_legacy:ct_string("Load Csv From $@usn5 =~{`3esn`} As `8esn` Fieldterminator 's_str' Foreach(`` In 07 Ends With {1000} Ends With 01234567| Remove `8esn`:`1esn`:``,[usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000|{#usn8} In {12} In .9e12].`5esn`!.`8esn`._usn4?,{`7esn`:.9e12 Contains 0 Contains $0}.`3esn`!.@usn5?.usn1 Unwind Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null As @usn5) Union Delete @usn5[@usn6],{`5esn`}[{usn2}..$`1esn`] Foreach(#usn8 In usn2 Starts With $usn1 Starts With 10.12e12| With  {1000} Starts With 10.12e12 Starts With .0e-0 As `8esn`,Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) As _usn4 Skip Count ( * ) Starts With 0.12 Limit Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Create ``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))))"),
    octest_legacy:ct_string("Create Unique #usn7=Shortestpath((`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)),#usn7=((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})) Union With  Case false =~{`8esn`} =~00 When usn2 Starts With $usn1 Starts With 10.12e12 Then usn2 Starts With $usn1 Starts With 10.12e12 When {1000} =~4.9e12 =~9e1 Then `3esn` =~$#usn7 End Ends With All(usn2 In $`5esn`[{`4esn`}][{0}] Where 0e0 Contains {`2esn`}) Ends With [#usn7 In .0e-0 In 12 Where Count ( * ) Is Not Null Is Not Null|$`7esn` Starts With 's_str'] As #usn7,{`8esn`:{usn2}[{999}..][9e12..]}[(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[`3esn` *..0x0]-(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})<-[?:_usn4|:`1esn` *01]-(`4esn` {`3esn`:{`7esn`} =~\"d_str\" =~{``},`3esn`:{`1esn`} Contains 1.0 Contains 4.9e12})][Reduce(`7esn`=123.654[01..][Count(*)..],`6esn` In 010[{`1esn`}..]|0.0[$`4esn`])] As `7esn`,`4esn`[12.0..][9.1e-1..] As `4esn` Order By 1.9e0 In 2.12 Asc,usn1 =~false =~{999} Desc Where 0[..12][..{`8esn`}] With Distinct 4.9e12 Is Not Null Is Not Null,$`7esn` In $0 Order By Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where $#usn7[01..2.12][2.12..3.9e-1]) =~_usn3(.0e-0 Ends With $`2esn` Ends With `5esn`,$usn1 =~.9e12 =~`6esn`) =~Reduce(_usn3=5.9e-12 Is Null Is Null,_usn3 In `8esn`[_usn4]|2.9e1[Count ( * )..]) Asc Limit 0[10.12e12] Where .12e12 Starts With 5.9e-12 Starts With `4esn` Delete [usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]][`5esn`(Distinct $@usn5[`8esn`][12e12])..][``(Distinct $1000 Is Null,1e-1[$`4esn`])..],$`4esn` Is Null Is Null Union All Foreach(_usn3 In Case When $12 Ends With 12.0 Ends With $`4esn` Then `8esn`[.12e12..] End[Single(`6esn` In 010[{`1esn`}..] Where _usn4 Ends With {`8esn`} Ends With usn2)][Filter(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 1.9e0[`6esn`][`7esn`])]| Remove #usn7(Distinct \"d_str\" Is Not Null Is Not Null,$`6esn`[$_usn3..{1000}])._usn3!.#usn7?,[usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $12 Is Null Is Null].``.`3esn`?) Create Unique `1esn`=(`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[#usn7? *0xabc..12]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}) Start @usn5=Node:_usn4({_usn3}) ,`3esn`=Node(0xabc,7,0Xa,01234567)Where {123456789} Contains $0"),
    octest_legacy:ct_string("Detach Delete 0.12[Count ( * )..Count ( * )][$999..`5esn`],123.654 Contains true Contains 7.0e-0 Unwind 9e12[..usn2][.._usn3] As @usn5 Union All Match `2esn`=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))),((:`4esn`:usn2{#usn7:$12[10.12e12][.1e1],`1esn`:{1000} Starts With {`1esn`}})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(_usn4 :usn2)) Using Join On `5esn`,`8esn`,#usn7"),
    octest_legacy:ct_string("Remove Shortestpath(({@usn6:`3esn` Contains 01 Contains 01})<-[#usn8?]->(#usn8 {usn2:$0 Ends With 9e-12 Ends With $_usn4,`5esn`:0e-0[{@usn6}]})).`5esn`!.`5esn`?,{`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}.``!.`6esn`?,{`1esn`:{123456789} =~.9e1 =~$_usn3,#usn8:`5esn` Contains 0 Contains $12}.#usn8!.#usn8!.`1esn`? Union All Match `1esn`=((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})),`1esn`=((_usn4 )-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})) Remove Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where Null In {7}).#usn7?,Single(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null).usn1!"),
    octest_legacy:ct_string("Drop Constraint On(``:`5esn`)Assert Exists(Allshortestpaths(((#usn8 :usn2)<-[? *1000..{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]}]->(usn2 :`5esn`:`7esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))).`8esn`)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:usn2)Assert Case Count ( * ) =~123456789 =~{@usn5} When 0e0 Contains {`2esn`} Then $`8esn`[..12][..9e12] When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End.`8esn`! Is Unique"),
    octest_legacy:ct_string("Create Unique `3esn`=(`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999})-[`3esn`?:`1esn`|:`1esn`]-(#usn8 {``:@usn6 Starts With #usn7,@usn6:7[..123456789][..true]})<-[?:`1esn`|:`1esn`]-(`1esn` :#usn8:@usn6{`7esn`:.1e-1 Contains .12e-12,`2esn`:.1e1 Ends With #usn7 Ends With {#usn7}}),`2esn`=((`8esn` :`5esn`:`7esn`)-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})<-[#usn8?:_usn3 *..123456789]->(:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})) Foreach(`7esn` In [`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0|2.12[`4esn`][.9e-1]][Reduce(usn2={_usn4} Ends With {0} Ends With `1esn`,`` In `7esn` =~#usn8 =~\"d_str\"|$123456789 Is Not Null Is Not Null)]| With Distinct {_usn3} Is Null Is Null As #usn8,None(`` In `7esn` =~#usn8 =~\"d_str\" Where 1e-1 =~$`7esn` =~1e1) Is Not Null Is Not Null As @usn5,Null[{999}..$usn2] As `7esn` Order By 7.0e-0 Starts With {123456789} Starts With @usn6 Asc,9.1e-1 In {`1esn`} Asc,Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] Ascending Load Csv With Headers From 0xabc Starts With `2esn` Starts With 10.12e12 As usn2 ) Create Unique (((`8esn` :`8esn`)<-[usn1?{`5esn`:$0 Ends With 9e-12 Ends With $_usn4}]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})-[?:_usn3]->(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]}))),((`` :`7esn`)) Union All Unwind 9e0 In {usn2} In {@usn6} As @usn5 Start `2esn`=Relationship:_usn4(@usn6=\"d_str\")  Union All Load Csv From $12 Contains false Contains {`1esn`} As usn1 Fieldterminator \"d_str\" Remove Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When $1000[_usn4][{@usn5}] Then 4.9e12[{_usn4}..] End.@usn6?.#usn8! Unwind {`8esn`} Contains $@usn5 As _usn4"),
    octest_legacy:ct_string("Start ``=Rel:_usn3({7}) ,`1esn`=Rel:#usn8(`8esn`={123456789}) Merge ((`8esn` :`8esn`)-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`8esn`*]-(`7esn` :``{usn2:$7})) Unwind 0e-0[{12}] As #usn8 Union All Foreach(`7esn` In Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End =~{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}| Remove {`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}.`5esn`!) Unwind 9e12[..usn2][.._usn3] As @usn5 Load Csv From \"d_str\" Contains {@usn6} As `3esn` Fieldterminator 's_str' Union All Optional Match (`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5) Using Index _usn3:usn2(`4esn`) Using Index @usn5:`3esn`(`8esn`) Where $0 Contains $123456789 Contains {`3esn`} Return *,{`4esn`} In 1000 In {@usn5} Order By .0e-0[010..] Asc,6.0e0 In 9e-1 In 123456789 Ascending,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) Desc Limit Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}])"),
    octest_legacy:ct_string("Return {_usn4}[{`6esn`}],true In 0.0 As #usn7 Skip 0.12[{@usn6}..{#usn7}] Limit (`1esn` :`5esn`:`7esn`)-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})[[#usn8 In 07[..$`5esn`] Where `8esn`[_usn4]]..Reduce(`7esn`=$@usn5 Is Null Is Null,`2esn` In $@usn5 Is Not Null Is Not Null|{`1esn`}[..$_usn4])][Case When `4esn` =~010 Then {7}[$@usn5..123456789][1e1..1.9e0] Else 1e-1 =~$`7esn` =~1e1 End..#usn7(Distinct usn1 =~false =~{999},{`3esn`} =~$@usn5 =~`2esn`)]"),
    octest_legacy:ct_string("Load Csv With Headers From 11.12e-12 Starts With 1.0 Starts With 12.0 As `4esn` Fieldterminator \"d_str\" Union Unwind Shortestpath(((`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))[All(_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null)] As #usn8 Create `1esn`=Allshortestpaths((usn2 :@usn5{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})),@usn6=Shortestpath((_usn4 )) Unwind 1000[{12}..][0e0..] As `5esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[usn1:`6esn`]-()Assert Exists(Extract(`6esn` In 010[{`1esn`}..] Where {`4esn`}[00..]|`6esn` =~999 =~$999).`3esn`?)"),
    octest_legacy:ct_string("Load Csv With Headers From 0Xa In 1.0 In $@usn5 As @usn5 Fieldterminator \"d_str\" Union All Unwind {`6esn`} In 11.12e-12 In 2.9e1 As `5esn` Union All Create Unique (:usn1$1000)"),
    octest_legacy:ct_string("Merge `3esn`=Shortestpath(((`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})<-[usn2? *0xabc..12{`6esn`:`8esn`[_usn4]}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]}))) On Create Set Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 0[..{#usn7}][..$_usn3]).#usn7? ={@usn5}[10.12e12..],[`1esn` In $12 In {usn2} Where 9e-1[1.9e0]]._usn4!.`4esn`? ={`8esn`}[@usn5][$`2esn`],`1esn` ={@usn6:$12 Is Null} In (`4esn` {`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}) On Create Set #usn7 =usn1 =~false =~{999},Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}).`2esn`! =9e12 Is Null Is Null,`2esn`+=Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`}) Ends With Shortestpath(((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))) Ends With Reduce(_usn3=$`4esn` Is Null Is Null,usn2 In $`5esn`[{`4esn`}][{0}]|9e-1 Contains 3.9e-1)"),
    octest_legacy:ct_string("Start #usn7=Node:@usn6(#usn8='s_str') ,_usn4=Rel:`5esn`(@usn5=\"d_str\") Merge (@usn5 :`6esn`{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]})-[:usn1|usn2]->(`8esn` :`5esn`:`7esn`)-[:usn1|usn2{#usn7:{`3esn`}[#usn7],`4esn`:010[..9e-1][..0X7]}]-(_usn3 {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}) On Match Set Reduce(usn1={usn1} Contains `4esn`,_usn3 In `8esn`[_usn4]|{`8esn`}[..999][.._usn3]).`2esn` =Case When 9e-12[010..{#usn7}][{123456789}..7] Then $999 =~false =~{`8esn`} When {0}[.0e-0][$`2esn`] Then 12e12 Is Not Null Is Not Null Else false[..usn2][..999] End[Allshortestpaths(((({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(@usn6 :@usn5)-[`2esn`? *7{`5esn`:false[..usn2][..999]}]-(`4esn` :@usn6:_usn3))))..All(usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null)][.9e0..`4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`)],Reduce(_usn4=5.9e-12 Contains {12} Contains {#usn8},`7esn` In 0.12 Is Not Null|{`5esn`}[.1e-1..1e-1][999..{_usn3}]).#usn8.``? =$usn2[{`1esn`}],`5esn` =0[4.9e12] Return Distinct *,$12 Is Null Is Null As #usn8 Skip {@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] Union All With Distinct *,(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[`3esn` *..0x0]-(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})<-[?:_usn4|:`1esn` *01]-(`4esn` {`3esn`:{`7esn`} =~\"d_str\" =~{``},`3esn`:{`1esn`} Contains 1.0 Contains 4.9e12}) =~Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 9e12 Is Null Is Null) =~(:@usn5{#usn7:Null,`5esn`:{@usn5} Ends With 0Xa Ends With .12e-12})-[:`3esn`|`3esn` *1000..]-(@usn6 ),(`2esn` :`4esn`:usn2{`8esn`:.9e-1 Contains .9e0 Contains ``,_usn4:8.1e1 Contains .9e-1 Contains false})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Is Null Is Null As `1esn` Skip _usn4['s_str'][8.1e1] Match `2esn`=(((:`7esn`{`4esn`:@usn5 =~$#usn7 =~{usn1}})<-[?:`1esn`|:`1esn`]-(usn2 :``{#usn7:1e-1 =~$`7esn` =~1e1,`7esn`:{0}[`4esn`..{`8esn`}]})<-[:`6esn` *1000..{#usn7:`2esn`,`7esn`:$@usn5 Is Not Null Is Not Null}]->(@usn5 {`8esn`:123456789[#usn7..9e-1][10.12e12..{0}],@usn6:1.0 Is Not Null}))),#usn7=Shortestpath((`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)) Where 7[..123456789][..true] Start `4esn`=Node( {``}) ,@usn5=Relationship:``(`4esn`='s_str') Union All With  *,$123456789[..$999][..`6esn`] As @usn5,Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 01 =~07)[Case 9e-12 Ends With 9e1 Ends With 4.9e12 When `3esn` =~$#usn7 Then $@usn5 Starts With #usn7 When {`4esn`}[{`3esn`}][$`2esn`] Then #usn7[$`8esn`][{`3esn`}] Else 9e0[`4esn`..$_usn4][9.1e-1..0e0] End][[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]] Skip @usn5[9e-1..{`1esn`}] Limit 11.12e-12 Contains usn1 Delete $999 =~false =~{`8esn`},{0}[`4esn`..{`8esn`}],usn2[..$0][..`3esn`]"),
    octest_legacy:ct_string("Merge #usn7=Allshortestpaths(((_usn4 :`6esn`$_usn3)-[`8esn`? *0X7..0Xa{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}]-(:``{usn2:00 Is Not Null Is Not Null})<-[? *999..123456789]->(usn2 :@usn5{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Union All Foreach(`` In Shortestpath(((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(_usn3 :usn1)))[..{_usn4:.9e-1 Ends With .0e-0 Ends With {_usn3},_usn4:9e1 Ends With 9e12 Ends With 0x0}][..Reduce(#usn8=`8esn`[_usn4],`1esn` In $12 In {usn2}|$`4esn` Is Not Null)]| Start #usn7=Relationship:#usn8(usn2={12}) Where 01234567 Ends With .0e0 Ends With 12e12 Unwind `6esn`[0X0123456789ABCDEF..][`8esn`..] As _usn4) Merge ((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})) On Create Set Case When 01234567 Ends With .0e0 Ends With 12e12 Then 00[$``] End.`1esn` ={1000} Ends With .12e12 Ends With 010 Optional Match `6esn`=((`3esn` :#usn8:@usn6)) Using Join On `6esn`,`1esn`"),
    octest_legacy:ct_string("Detach Delete All(_usn3 In `8esn`[_usn4] Where 5.9e-12[0x0..])[(`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})][Reduce(`8esn`=#usn7 =~$@usn5 =~{7},usn2 In $`5esn`[{`4esn`}][{0}]|{@usn5}[10.12e12..])] Return {#usn7}[.12e-12] As `1esn`,5.9e-12[\"d_str\"..][{`6esn`}..] As #usn7 Limit Case When #usn7 Contains .0e0 Contains $@usn6 Then .12e-12[@usn6..'s_str'] Else {0}[`4esn`..{`8esn`}] End Is Not Null Is Not Null Merge `2esn`=Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) On Create Set Case 0xabc[..Count(*)][..$`5esn`] When `6esn`[0X0123456789ABCDEF..][`8esn`..] Then `2esn`[`7esn`][1000] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} Else 12e12[{`4esn`}..`4esn`][999..{@usn6}] End.``!.#usn8! =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})-[_usn4:_usn3{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]}).#usn7! =8.1e1 Contains .9e-1 Contains false,`5esn` =false Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Constraint On()<-[`8esn`:`8esn`]-()Assert Exists({``:01234567[10.12e12][0Xa]}._usn3)"),
    octest_legacy:ct_string("Merge Shortestpath((`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[:`1esn`|:`1esn` *0{`8esn`:2.12[{12}],`7esn`:$@usn6[``..][3.9e-1..]}]->(:`2esn`:`4esn`{usn2:$@usn6[.1e-1][9e12],`5esn`:12e12 Is Not Null Is Not Null})-[`5esn`?:#usn7|:@usn5{usn2:#usn7[123.654][{12}]}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})) On Create Set _usn3+=Case {`4esn`} Ends With Count(*) When `7esn` =~#usn8 =~\"d_str\" Then 010[..9e-1][..0X7] When $#usn7 Contains 3.9e-1 Then 123.654[10.12e12..$12][6.0e0..{#usn8}] Else $usn1[0e0...9e-12] End[Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))..][Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})..],#usn7+=[`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|01[$`1esn`..$`7esn`][{usn2}..12.0]][(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]-(:_usn3{_usn3:010[..9e-1][..0X7]})..][[`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 0X0123456789ABCDEF Is Not Null Is Not Null]..],Case When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else `6esn`[3.9e-1..`8esn`][12.0..0.0] End.`7esn`?.`5esn`?.#usn8! =7.0e-0 Is Not Null Create `1esn`=Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))),usn2=((:`7esn`{`4esn`:@usn5 =~$#usn7 =~{usn1}})-[`8esn`{#usn8:.12e12[..7]}]-({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`1esn`? *0{@usn6:true Is Null}]-(_usn4 ))"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`8esn`)Assert All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]).#usn7!.`1esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(#usn8:#usn8)Assert Allshortestpaths((`2esn` )-[ *..123456789{@usn5:$`8esn`}]-(:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})).usn1? Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[#usn7:#usn8]->()Assert Exists(Allshortestpaths(((usn2 :``{#usn7:1e-1 =~$`7esn` =~1e1,`7esn`:{0}[`4esn`..{`8esn`}]})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(_usn4 :`1esn`:``{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}})<-[_usn3? *..123456789{`6esn`:.0e-0[..``][..$7],usn2:{usn2} Ends With {@usn6} Ends With 1000}]-(`8esn` :`4esn`:usn2{@usn6:$#usn7 Starts With $123456789})))._usn4!)"),
    octest_legacy:ct_string("Foreach(usn2 In {#usn7}[.12e-12]| With  $`7esn` In $@usn5,{999} =~$`6esn` =~$`6esn` As `1esn`,12[4.9e12..] As #usn8 Skip [@usn6 In 9e12[..usn2][.._usn3] Where 9e-1 Is Not Null] Starts With Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789) Starts With All(`2esn` In $@usn5 Is Not Null Is Not Null Where $`5esn` =~Count(*) =~1.9e0) Where {_usn4} In 0X7 In 0e0 With  $`1esn`[..12e-12][...9e12] As `7esn` Order By .12e12[01..{1000}][8.1e1..Count ( * )] Asc,{12} Starts With $`` Starts With 0X0123456789ABCDEF Asc,$_usn3[0x0][{0}] Descending Skip 9e1[..{usn1}]) Union Merge Shortestpath(((`7esn` {@usn5:Count ( * )[_usn4..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))) On Match Set Case 0xabc[..Count(*)][..$`5esn`] When `6esn`[0X0123456789ABCDEF..][`8esn`..] Then `2esn`[`7esn`][1000] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} Else 12e12[{`4esn`}..`4esn`][999..{@usn6}] End.``!.#usn8! =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})-[_usn4:_usn3{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]}).#usn7! =8.1e1 Contains .9e-1 Contains false,`5esn` =false Is Not Null Is Not Null On Match Set @usn5+=Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Constraint On(@usn5:_usn4)Assert Exists(Any(#usn7 In .0e-0 In 12 Where .0e-0 Ends With $`2esn` Ends With `5esn`).``.@usn6?)"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:`6esn`)Assert `8esn`(Distinct 12e12 Contains {0}).`4esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(@usn5:``)Assert [#usn7 In .0e-0 In 12 Where `8esn`[.12e12..]].usn1._usn3.`8esn` Is Unique"),
    octest_legacy:ct_string("With Distinct *,$usn1[..$999][..0e0] As #usn7,.9e-12[{@usn5}] As `7esn` Limit 999 Ends With {#usn8} Union All Create Allshortestpaths((`1esn` :`5esn`:`7esn`)-[{``:{`3esn`}[01234567][{#usn7}],_usn4:999 Is Null Is Null}]->(usn2 {``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})) Optional Match Shortestpath((@usn6 :@usn5)) Where `3esn` Is Null Is Null"),
    octest_legacy:ct_string("Drop Constraint On()-[@usn5:`4esn`]->()Assert Exists(Reduce(`1esn`=12.0[..Count ( * )][..@usn6],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|5.9e-12 Contains {12} Contains {#usn8}).`8esn`)"),
    octest_legacy:ct_string("Load Csv With Headers From 2.9e1 In {``} As `7esn`  Unwind {`7esn`}[0.12] As usn2"),
    octest_legacy:ct_string("Load Csv From {`5esn`}[.1e-1..1e-1][999..{_usn3}] As _usn3 Fieldterminator 's_str' Match `2esn`=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))),Shortestpath((((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[`8esn`*]-(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)))) Using Scan #usn8:`8esn` Using Scan `4esn`:#usn7 Where 2.9e1 =~Count(*) =~{123456789} Union All Start _usn3=Relationship:`3esn`(#usn7={_usn3}) ,`1esn`=Rel:``({`4esn`})"),
    octest_legacy:ct_string("Create Constraint On()-[_usn3:#usn7]->()Assert Exists(None(usn1 In {#usn7} =~.12e12 =~9e0 Where {1000} Starts With 10.12e12 Starts With .0e-0).`7esn`?.usn2.`8esn`?)"),
    octest_legacy:ct_string("Create Constraint On(usn1:@usn6)Assert {@usn5:999 Ends With {#usn8},_usn4:Null In {7}}.`7esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`4esn`:_usn4)Assert Reduce(`7esn`=#usn7 =~$@usn5 =~{7},usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|3.9e-1[..$1000][..0.12]).`8esn`?.@usn6 Is Unique"),
    octest_legacy:ct_string("Optional Match @usn5=Allshortestpaths(((:usn1{#usn8:2.9e1[{`2esn`}]}))) Using Scan #usn7:`` Using Index #usn8:usn2(@usn5) Where 10.12e12 Contains .9e0"),
    octest_legacy:ct_string("Merge ``=Shortestpath((`1esn` {`6esn`:{`5esn`},usn1:$`4esn` Ends With {999}})) On Match Set Shortestpath((`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})-[`3esn`? *..07]-(#usn7 {_usn4:$12[$`6esn`..][01..]})).@usn6! =Single(usn1 In $@usn6 Is Null Is Null Where 0X0123456789ABCDEF Ends With {1000}) In (`1esn` :#usn8:@usn6{usn1:#usn8 Is Null Is Null,_usn3:{`4esn`} In 1000 In {@usn5}})-[``:``|:`7esn`*{#usn8:{#usn7}[.12e-12],`3esn`:1.9e0[`6esn`][`7esn`]}]-(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})-[usn1?:`3esn`|`3esn`*..]->(:usn1) In Reduce(_usn3=$`4esn` Is Null Is Null,usn2 In $`5esn`[{`4esn`}][{0}]|9e-1 Contains 3.9e-1),Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When $1000[_usn4][{@usn5}] Then 4.9e12[{_usn4}..] End._usn3! =7[..123456789][..true] On Create Set `3esn` =$7[.1e-1..{@usn6}][$7..{`1esn`}],None(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {0}[.1e-1..][_usn4..]).usn2 =$`7esn` In $`4esn`,usn1+=$`4esn` Ends With {999}"),
    octest_legacy:ct_string("With Distinct *,$`5esn` Ends With 's_str' Ends With $`6esn` As usn1 Order By {`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]} In Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}))) In Extract(_usn3 In `8esn`[_usn4] Where 0[..{#usn7}][..$_usn3]|0x0 Ends With #usn8 Ends With .9e-1) Descending,$12 Contains false Contains {`1esn`} Descending,\"d_str\" Starts With .1e-1 Asc Skip $`1esn`[..12e-12][...9e12] Where 0X7[#usn7..][$@usn5..] Load Csv From {usn1:$usn1[9e1][{999}],#usn8:0e-0[$``..10.12e12]}[Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End] As `8esn`  Union Load Csv From $_usn3[usn2..][usn1..] As @usn5 Fieldterminator 's_str' Merge usn1=Allshortestpaths(((:`4esn`:usn2{usn2:$usn2 Ends With 00 Ends With 9e12,_usn4:{`5esn`}})-[?:``|:`7esn` *12{#usn8:10.12e12 Contains .9e0,usn1:0xabc Contains {12} Contains {`6esn`}}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))) On Create Set Single(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`).usn2!.`5esn`.`2esn`! =11.12e-12 Contains usn1,(_usn4 :`1esn`:``{`3esn`})-[:`5esn` *01234567..{`2esn`:{usn1} Contains {`2esn`},#usn7:`4esn`[9e-12..true]}]-(:`5esn`:`7esn`{`1esn`:{1000}[..`5esn`][..9e12]}).`3esn`?.usn2!.`6esn` =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),`5esn`+=[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12][All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where _usn4[{``}..{`6esn`}][$7..$_usn3])..][Case When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else @usn5[9e-1..{`1esn`}] End..] On Match Set {usn2:.9e-12[.12e12..][0Xa..]}.usn2.#usn8.usn2! =.9e1 Ends With 0x0 Load Csv From Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge _usn4=(`8esn` :`4esn`:usn2)-[#usn8?:`8esn`|:#usn8 *999..123456789]->(#usn7 :_usn3{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Match #usn7=((:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}})<-[usn2? *0X0123456789ABCDEF]-($12)) Using Scan `1esn`:#usn8 Delete 1.9e0[$`4esn`],07[..$`5esn`] Union All Load Csv From {@usn6} In 9e12 As usn2  Union Unwind 123.654 =~12 =~{_usn3} As `7esn`"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((((:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})-[`7esn`:`1esn`|:`1esn` *0Xa..12]-(`8esn` :`7esn`)<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})))),#usn7=((`1esn` :usn2{`8esn`:12.0[...0e0]})) Using Scan #usn8:_usn3 Using Index @usn5:@usn5(_usn4) Where {`6esn`}[@usn5..{@usn6}] Return *,_usn4[{``}..{`6esn`}][$7..$_usn3] Order By 9e0 Ends With {7} Desc,`4esn` =~_usn4 =~0e-0 Descending Union All Optional Match `6esn`=((`1esn` :`8esn`)<-[:usn1|usn2]-(`` :`4esn`:usn2)<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``)) Using Index usn1:#usn8(``) Using Join On `4esn`,`2esn`,`` Where 0.0[$`4esn`] Load Csv With Headers From Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}]) As usn2  Union Merge `6esn`=(((`8esn` :usn2)-[@usn5:`2esn`|`5esn` *7]->(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})-[? *12{@usn6:$`` =~.1e-1}]->(:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}}))) On Match Set `7esn`+=$_usn3[0x0][{0}],Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}}))._usn3 =9e0[{7}...0e-0][Null..@usn5],usn1+=Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null On Match Set _usn4+=01234567[10.12e12][0Xa],Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01).#usn7!.`2esn`.@usn6! =4.9e12 Ends With $@usn6,`3esn`+=.1e-1 Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:usn2)Assert Reduce(`3esn`=.9e0[$#usn8][Count ( * )],#usn7 In .0e-0 In 12|Count(*) Starts With 07 Starts With $#usn7).`6esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn4:`5esn`]-()Assert Exists(Case $`3esn`[0e-0] When $12[$@usn5] Then $_usn4 Ends With {#usn8} When {0} In {`1esn`} Then 1.9e0[`6esn`][`7esn`] Else 12e12 Ends With `5esn` Ends With .0e0 End._usn4.`2esn`?.`7esn`)"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:@usn5)Assert Exists(Any(usn1 In \"d_str\" Contains {@usn6} Where $`8esn`)._usn4)"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:#usn8)Assert Exists(@usn5(`4esn` Contains 0X0123456789ABCDEF Contains $usn2,{@usn5}[10.12e12..]).`1esn`!)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`2esn`)Assert Reduce(``=$`3esn` =~#usn8 =~0x0,usn2 In $`5esn`[{`4esn`}][{0}]|_usn3 =~{7} =~123.654).usn1! Is Unique"),
    octest_legacy:ct_string("Optional Match `5esn`=({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}),`6esn`=(((`1esn` {@usn6:6.0e0[$#usn7..$1000]})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})-[usn2 *7]-(`8esn` {_usn3:.0e-0[..``][..$7],_usn4:{#usn8} Ends With _usn3 Ends With `2esn`})))"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`5esn`)Assert Filter(`6esn` In 010[{`1esn`}..] Where `6esn` Ends With 1e1 Ends With $#usn7).@usn5! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[`4esn`:`1esn`]-()Assert Exists(Case `1esn` In 6.0e0 In 12 When 2.9e1[2.12..1.9e0] Then {`1esn`}[{usn2}] Else 12e12 Ends With `5esn` Ends With .0e0 End.`8esn`.usn1)"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:#usn8)Assert Exists(Any(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])._usn4._usn3!.usn1!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:usn2)Assert Filter(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1]).`5esn`!._usn3! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`5esn`:@usn5]-()Assert Exists([#usn7 In .0e-0 In 12 Where `8esn`[.12e12..]].usn1._usn3.`8esn`)"),
    octest_legacy:ct_string("Start ``=Node:`7esn`({#usn7}) Where 01234567[1000..][$`8esn`..] Match Shortestpath(((:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(`2esn` :_usn3)<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(:#usn7:`8esn`))),_usn4=((`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})) Using Scan #usn8:`1esn` Where $`4esn`[$@usn6...12e12] Return Distinct {@usn5} Ends With 0Xa Ends With .12e-12 As @usn6,_usn4['s_str'][8.1e1] Order By 1.9e0[$`4esn`] Descending"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:`3esn`]->()Assert Exists((:`3esn`)-[`1esn`]->(`3esn` :`6esn`{_usn3:.12e-12 Ends With `2esn`,usn1:Null[#usn7..][9.1e-1..]})-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->({#usn8:_usn4[$_usn4]}).`8esn`!)"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:`1esn`]-()Assert Exists(Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where 3.9e-1 Starts With .9e0 Starts With {#usn7}).@usn6!)"),
    octest_legacy:ct_string("With Distinct #usn8[..'s_str'][..'s_str'] As `2esn`,None(@usn6 In 9e12[..usn2][.._usn3] Where $7) Is Not Null Is Not Null Limit `7esn`[1.9e0..5.9e-12][9e0..@usn5] Create Unique (((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})-[`2esn`?:@usn6|:`4esn` *010..0{`4esn`:Null[$`3esn`..][`1esn`..],_usn3:6.0e0[$#usn7..$1000]}]-(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]}))) Merge ((:_usn3{@usn6:$1000 Starts With {@usn6} Starts With $@usn5})<-[{`3esn`:Count ( * )[_usn4..]}]->(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})) On Create Set `4esn` =$@usn6 Is Null Is Null,#usn7 ={`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]} Is Null Is Null"),
    octest_legacy:ct_string("Remove Reduce(usn2=12e12[{`4esn`}..`4esn`][999..{@usn6}],`1esn` In $12 In {usn2}|$`8esn`).`5esn`?,(`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})<-[_usn3?:`5esn`*..]-(:_usn4:`2esn`{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}).@usn5!"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:#usn8)Assert Exists(All(usn2 In $`5esn`[{`4esn`}][{0}] Where Null[$`3esn`..][`1esn`..]).#usn8!.#usn8.`7esn`)"),
    octest_legacy:ct_string("Create ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]}) Foreach(usn2 In $`7esn` Is Null Is Null| Optional Match `4esn`=Allshortestpaths((:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[*{usn1:{`6esn`} In .0e0 In $0,usn1:07[..$`5esn`]}]-(:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:usn2]-(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1})) Using Join On `6esn`,_usn3 Where {`3esn`}[#usn7] Return Distinct Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]|0e-0[{@usn6}])[Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3))][Case When $`6esn`[0..{@usn6}][@usn5..1000] Then .0e-0[..01234567] When {123456789} Starts With $_usn4 Starts With 0x0 Then 9e0[`3esn`][0] End] As `3esn`,Extract(#usn8 In 07[..$`5esn`] Where $usn2[..$999][..#usn8]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )])[Case {#usn7}[.12e-12] When $`4esn`[$@usn6...12e12] Then .12e-12[@usn6..'s_str'] Else .12e-12 Starts With .12e-12 End..(`` :``)-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})][Reduce(`5esn`=Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|{usn2}[9e-1])..All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}])] As @usn5,({`7esn`:{`3esn`}[$#usn8..],`4esn`:{`8esn`}[..999][.._usn3]})-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}) Contains Reduce(``=0xabc Starts With 12 Starts With 0e-0,_usn3 In `8esn`[_usn4]|12.0 Starts With 00) Contains Any(@usn6 In 9e12[..usn2][.._usn3] Where 9e-1 Is Not Null) Order By usn2($usn1 =~.0e0 =~{`4esn`}) Contains Allshortestpaths(((#usn8 :@usn5)<-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 )<-[?:`1esn`|:`1esn`{`5esn`:9e1[0.0]}]->(`8esn` ))) Ascending Skip $_usn4 Ends With {#usn8}) Merge Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))) On Match Set Case .12e12 Ends With 07 Ends With 3.9e-1 When 0.12 In $`` Then 0e-0 In 0X0123456789ABCDEF In `3esn` When 01 Ends With .0e0 Ends With 7.0e-0 Then $`6esn`[@usn6...9e-12] End.`1esn`.`1esn` =1e-1 Starts With .1e1 Starts With 12.0 Union Start usn1=Rel:`7esn`(`8esn`={`3esn`}) ,`5esn`=Node:usn2(_usn4='s_str')Where {@usn5}[10.12e12..]"),
    octest_legacy:ct_string("Unwind Shortestpath(((`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))[All(_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null)] As #usn8 Create `1esn`=Allshortestpaths((usn2 :@usn5{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})),@usn6=Shortestpath((_usn4 )) Unwind 1000[{12}..][0e0..] As `5esn` Union Return Distinct 0.0[$999][`6esn`] Order By $`2esn`[`8esn`..] Descending,({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}) Contains Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Contains All(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]) Descending Limit $`5esn` =~Count(*) =~1.9e0 Start _usn3=Node:`5esn`({`2esn`}) ,usn2=Relationship:`8esn`(#usn8='s_str') Remove Allshortestpaths(((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))).`6esn`.`5esn`?,(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}})<-[:`8esn`|:#usn8{usn2:$0 Ends With 9e-12 Ends With $_usn4}]->(`4esn` {`8esn`:5.9e-12[0x0..]}).`5esn`?,[usn1 In \"d_str\" Contains {@usn6} Where .9e12[6.0e0..][@usn5..]].#usn7"),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv With Headers From {@usn5} As `8esn` "),
    octest_legacy:ct_string("Unwind Single(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1])[Case When 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] Then $#usn8 Is Not Null Is Not Null When \"d_str\" Starts With $`7esn` Starts With 999 Then \"d_str\"[0x0..{@usn6}][$@usn5..0] Else .0e-0[..01234567] End..] As `` Unwind \"d_str\" Is Not Null Is Not Null As `3esn` With  *,Reduce(`4esn`={0} Is Not Null,#usn7 In .0e-0 In 12|12e12[{`4esn`}..`4esn`][999..{@usn6}]) Contains Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 0xabc[..{usn1}][..\"d_str\"]) Contains `3esn` As `5esn`,None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Starts With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) Starts With None(usn1 In \"d_str\" Contains {@usn6} Where `1esn` Is Not Null Is Not Null) As _usn3 Order By {12}[true..][7..] Ascending,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Asc,({#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]})<-[`8esn`*]-(#usn8 )[..Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn`[0X0123456789ABCDEF..][`8esn`..]|$_usn3 =~'s_str' =~12)][..`1esn`(Distinct .9e1[$`1esn`..][$``..])] Ascending Skip 7[..123456789][..true] Where {#usn7}[.12e-12]"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`6esn`)Assert Single(#usn7 In .0e-0 In 12 Where 0.0[00..][0xabc..]).`1esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[``:usn2]->()Assert Exists([@usn6 In 9e12[..usn2][.._usn3] Where $0 Ends With 9e-12 Ends With $_usn4|{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1]].``.`5esn`!)"),
    octest_legacy:ct_string("Unwind `3esn` Ends With $`` Ends With #usn7 As usn1 Remove Reduce(usn1=0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],#usn7 In .0e-0 In 12|{0} Is Not Null Is Not Null)._usn4!,Reduce(usn1=7[..123456789][..true],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|0xabc Starts With 12 Starts With 0e-0).#usn8! Remove [`6esn` In 010[{`1esn`}..] Where `6esn` Ends With 1e1 Ends With $#usn7|2.9e1 =~Count(*) =~{123456789}].`5esn`?.usn2!,Reduce(`4esn`=9e1[0.0],`6esn` In 010[{`1esn`}..]|01[$`1esn`..$`7esn`][{usn2}..12.0])._usn4! Union Optional Match `8esn`=Allshortestpaths(((:`4esn`:usn2{#usn7:$12[10.12e12][.1e1],`1esn`:{1000} Starts With {`1esn`}})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(_usn4 :usn2))) Return Extract(`1esn` In $12 In {usn2} Where 9e-1[1.9e0]) Is Null Is Null As _usn3,1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As usn2,false[9e12] Order By 0xabc[01234567][.12e-12] Ascending,Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`8esn`}[..999][.._usn3]) Starts With Reduce(``=$#usn7 Ends With 999 Ends With {12},`2esn` In $@usn5 Is Not Null Is Not Null|{`6esn`} Starts With .12e-12) Descending Skip 2.12[10.12e12][_usn4] Limit $`5esn` In $12 In `2esn` Optional Match ((:``{usn1:`4esn` Is Not Null})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})) Using Join On usn1,_usn4,`1esn` Where 7.0e-0[$`6esn`..] Union All Match #usn7=(`4esn` {#usn7:$usn1[0e0...9e-12]}) Where $`7esn` In $`4esn`"),
    octest_legacy:ct_string("With  @usn6 Ends With $`2esn` Ends With 1.0,(usn2 )-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(_usn4 :`1esn`:``{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}})-[:`2esn`|`5esn` *999..123456789{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]}]-(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}) =~Case When {`1esn`} Is Null Then .1e1[{@usn6}][true] When \"d_str\" Starts With $`7esn` Starts With 999 Then 07[..$`5esn`] Else 00[Null..usn2] End As usn2 Limit 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] Start `3esn`=Rel:`7esn`(`8esn`={`3esn`}) ,`2esn`=Node( {`6esn`})Where $`6esn` Starts With 0.0 Foreach(_usn4 In \"d_str\" Contains {@usn6}| Remove Shortestpath((:usn1$1000)).@usn5? Create (`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5))"),
    octest_legacy:ct_string("Merge usn1=Allshortestpaths(((:`4esn`:usn2{usn2:$usn2 Ends With 00 Ends With 9e12,_usn4:{`5esn`}})-[?:``|:`7esn` *12{#usn8:10.12e12 Contains .9e0,usn1:0xabc Contains {12} Contains {`6esn`}}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))) On Create Set Single(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`).usn2!.`5esn`.`2esn`! =11.12e-12 Contains usn1,(_usn4 :`1esn`:``{`3esn`})-[:`5esn` *01234567..{`2esn`:{usn1} Contains {`2esn`},#usn7:`4esn`[9e-12..true]}]-(:`5esn`:`7esn`{`1esn`:{1000}[..`5esn`][..9e12]}).`3esn`?.usn2!.`6esn` =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),`5esn`+=[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12][All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where _usn4[{``}..{`6esn`}][$7..$_usn3])..][Case When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else @usn5[9e-1..{`1esn`}] End..] On Match Set {usn2:.9e-12[.12e12..][0Xa..]}.usn2.#usn8.usn2! =.9e1 Ends With 0x0 Union All Start _usn3=Relationship(0x0)  Create Unique @usn6=Allshortestpaths(((#usn8 :usn2)<-[? *1000..{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]}]->(usn2 :`5esn`:`7esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))),usn1=Allshortestpaths((`6esn` :`5esn`:`7esn`)-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 {`2esn`:5.9e-12[0x0..]})) Merge @usn6=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) On Match Set usn2+=Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null),#usn8 =None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..])"),
    octest_legacy:ct_string("With Distinct $`8esn` Is Not Null Is Not Null As _usn3 Order By Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Descending,\"d_str\" In 7.0e-0 Desc Skip Reduce(_usn3=7.0e-0[$`6esn`..],`7esn` In 0.12 Is Not Null|false Starts With 0 Starts With 2.9e1) =~Case $`3esn` =~0x0 When $12[$@usn5] Then 11.12e-12 In {usn1} When 4.9e12[{_usn4}..] Then $@usn5 Contains _usn3 Else .12e-12 Starts With .12e-12 End =~Reduce(_usn4=_usn4 Is Not Null Is Not Null,`2esn` In $@usn5 Is Not Null Is Not Null|7.0e-0 Is Not Null) Limit {_usn3:.0e-0[..``][..$7]}[..(`6esn` :`4esn`:usn2)-[$#usn8]->(`3esn` :`5esn`:`7esn`)][..@usn5]"),
    octest_legacy:ct_string("Create Unique `2esn`=Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}})<-[?{@usn5:@usn6[999][1000]}]-(:usn1{#usn8:2.9e1[{`2esn`}]})),(((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(`2esn` :_usn3)<-[_usn3?{``:{1000} Starts With {`1esn`}}]->(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))) Foreach(`5esn` In {`6esn`} Contains 1e1 Contains ``| Unwind `8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End As @usn6 With Distinct 0.0[$999][`6esn`] Order By $`2esn`[`8esn`..] Descending,({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}) Contains Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Contains All(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]) Descending Limit $`5esn` =~Count(*) =~1.9e0) Union All Delete $1000[$`2esn`..] Detach Delete \"d_str\"[0x0..{@usn6}][$@usn5..0] Create Unique `7esn`=(`3esn` :usn2),#usn8=(({@usn6:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[ *12{#usn8:0e0 =~{12} =~{1000}}]-(:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})) Union Merge Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) On Match Set `6esn` =_usn4 Remove ``({1000}[..`5esn`][..9e12]).`4esn`!,Reduce(usn2=0xabc =~123456789,#usn8 In 07[..$`5esn`]|8.1e1[..9.1e-1][...9e1]).`6esn`.`1esn`?,None(`` In `7esn` =~#usn8 =~\"d_str\" Where {12} Starts With $`` Starts With 0X0123456789ABCDEF).@usn6!.``?"),
    octest_legacy:ct_string("Start ``=Node:_usn3({0}) ,usn2=Rel:``(_usn3='s_str')Where {1000}[`2esn`...0e-0][9e-1..0X7]"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn3:`5esn`]-()Assert Exists(usn1(.9e-12[.12e12..][0Xa..],$`6esn` =~$#usn7 =~$`4esn`).`7esn`?)"),
    octest_legacy:ct_string("Remove Case When $usn2 Ends With 00 Ends With 9e12 Then $#usn7 Ends With 999 Ends With {12} Else 0e0 =~{12} =~{1000} End.@usn6.usn1?,None(@usn6 In 9e12[..usn2][.._usn3] Where {`8esn`}[@usn5][$`2esn`])._usn3!"),
    octest_legacy:ct_string("Start `4esn`=Node:@usn6(\"d_str\") Where $usn2 Is Not Null Is Not Null Optional Match `3esn`=((:`1esn`:``{@usn6:$`7esn` Ends With 7.0e-0 Ends With $usn2})),#usn8=((`` {_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})) Using Join On usn2,`1esn` Where 12.0[...0e0] Remove {`6esn`:.12e-12 Ends With `2esn`}.usn2,(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}})<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})<-[usn1?:`3esn`|`3esn`*..]->(:usn1{#usn8:$`8esn` Is Not Null Is Not Null,`5esn`:3.9e-1 Starts With .9e0 Starts With {#usn7}}).`8esn`!.usn1?,Case .9e-1 Ends With .0e-0 Ends With {_usn3} When $12 Is Not Null Is Not Null Then {``}[$usn2..00][{_usn3}..123.654] When .1e-1 Starts With @usn6 Starts With _usn3 Then 9e0[{7}...0e-0][Null..@usn5] Else $12 =~4.9e12 End._usn4!"),
    octest_legacy:ct_string("Start _usn4=Relationship:@usn6(\"d_str\") Where $`4esn` Is Null Is Null Return Distinct [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,$`7esn` In $`4esn` As `8esn`,Extract(`1esn` In $12 In {usn2} Where 2.9e1 =~Count(*) =~{123456789})[{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}..][123.654..] Order By Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}])[{usn1:\"d_str\"[0x0..{@usn6}][$@usn5..0],`6esn`:.9e-12[usn2]}][Reduce(`2esn`=$1000 Contains $123456789 Contains #usn8,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$1000 Contains {`2esn`} Contains {`8esn`})] Desc,$12 Ends With 7.0e-0 Ends With 9e-12 Descending,$`4esn`[$@usn6...12e12] Descending Limit 9.1e-1 In 9e1 Union All Merge #usn7=(:`5esn`:`7esn`) On Match Set @usn5:@usn5 Load Csv With Headers From Filter(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}]) Starts With Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3)) Starts With {@usn5:$123456789 Is Not Null Is Not Null} As `4esn`  With  .0e0 Starts With 1.0 Starts With $12 As `7esn`,Case When 9e-12[010..{#usn7}][{123456789}..7] Then $999 =~false =~{`8esn`} When {0}[.0e-0][$`2esn`] Then 12e12 Is Not Null Is Not Null Else false[..usn2][..999] End[Allshortestpaths(((({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(@usn6 :@usn5)-[`2esn`? *7{`5esn`:false[..usn2][..999]}]-(`4esn` :@usn6:_usn3))))..All(usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null)][.9e0..`4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`)],@usn5[{`1esn`}..][Count ( * )..] Order By None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Starts With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) Starts With None(usn1 In \"d_str\" Contains {@usn6} Where `1esn` Is Not Null Is Not Null) Asc,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Ascending,8.1e1 Contains .9e-1 Contains false Descending Limit 0x0 Ends With #usn8 Ends With .9e-1 Where {`3esn`}[..{`4esn`}][..usn2]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $@usn6[``..][3.9e-1..] As usn1 "),
    octest_legacy:ct_string("Start `1esn`=Node:_usn4(`5esn`={usn1}) Where $usn2 Contains $`3esn` Contains 6.0e0 Merge `2esn`=(`3esn` :`2esn`:`4esn`) On Match Set `3esn`(Count ( * )[_usn4..],`2esn`).usn1!._usn4 =`1esn` In 010 In 1e-1,Any(#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null).`2esn`! =Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null,usn2+=8.1e1[$``] On Match Set @usn5:`1esn`:`` Union Match `5esn`=((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})) Using Index usn2:``(`3esn`) Where 0e-0[..7.0e-0][..{`8esn`}] Start _usn4=Relationship:`7esn`({123456789}) Where 3.9e-1[..$1000][..0.12] Remove `2esn`:_usn3,Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where $usn1 Contains 4.9e12 Contains $`2esn`).usn2?.`1esn`!,`1esn`:`5esn`:`7esn`"),
    octest_legacy:ct_string("Detach Delete Filter(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}]) Starts With Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3)) Starts With {@usn5:$123456789 Is Not Null Is Not Null},9e1 Starts With $`8esn` Starts With `3esn`,Reduce(_usn3=`4esn`[9e-12..true],`8esn` In {usn1}[7.0e-0..][3.9e-1..]|999 Starts With 7.0e-0 Starts With true) Starts With None(`2esn` In $@usn5 Is Not Null Is Not Null Where {12} Ends With $`3esn` Ends With 0xabc) Starts With Allshortestpaths((usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[`8esn`*]-(`7esn` :``{usn2:$7})) Foreach(@usn6 In 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))]| Remove Single(`2esn` In $@usn5 Is Not Null Is Not Null Where false =~$7).`7esn`!.`5esn`?,Reduce(#usn7={`5esn`},`2esn` In $@usn5 Is Not Null Is Not Null|`1esn` =~{12} =~{999})._usn4! Remove (#usn8 )<-[:_usn4|:`1esn`{@usn5:.0e-0 In 12}]-(:_usn4:`2esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1})-[`3esn`? *..07]-(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}).`7esn`?,Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[..0][.._usn3]).usn1) Union All Unwind $999[usn1..0e-0] As `8esn` Match `5esn`=Shortestpath((`5esn` :``{_usn3:$_usn4[..$999],`7esn`:0X0123456789ABCDEF Ends With {1000}})-[*{@usn5:`6esn` =~999 =~$999}]->(:`5esn`:`7esn`{`3esn`:Count ( * )[_usn4..],`8esn`:false[..usn2][..999]})),`1esn`=Allshortestpaths(((:usn1{`6esn`:$_usn3[usn2..][usn1..],#usn7:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]->(`` :usn1{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null}))) Using Join On `6esn`,``,usn2 Using Join On @usn5,`5esn` Where .12e12[$usn1..][{@usn6}..]"),
    octest_legacy:ct_string("Start `1esn`=Relationship:_usn4(`5esn`={usn1}) ,`7esn`=Relationship:usn2(`8esn`=\"d_str\") Detach Delete 00 =~`4esn` =~.9e-12 Match #usn7=((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})),`5esn`=(`` $999)<-[? *0X0123456789ABCDEF]->(`1esn` :_usn3)<-[#usn8?:#usn7|:@usn5]-(@usn5 :#usn7:`8esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true}) Using Scan `3esn`:`` Using Scan ``:#usn8"),
    octest_legacy:ct_string("Delete 1.0 Is Null Is Null,None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Contains (`8esn` :@usn6:_usn3{_usn4:{#usn7} =~$@usn6 =~$7})<-[`1esn`? *0{usn2:.9e12[6.0e0..][@usn5..]}]->(usn2 :@usn6:_usn3)-[usn1:#usn7|:@usn5 *999..123456789]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7}) Remove @usn6:`3esn` Union All With  Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] As #usn8,[`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..]),{`7esn`} Is Not Null Is Not Null As `1esn` Order By 1000 Ends With 0x0 Asc Union Create Allshortestpaths((`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`)),Allshortestpaths(((`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]})-[_usn4*{`3esn`:{``} Is Null Is Null}]-({`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(`` {``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))) Return *,1.9e0[$`4esn`],Null In {7} As usn2 Order By 0xabc[..{usn1}][..\"d_str\"] Asc Limit $`6esn` Contains All(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) Create Unique usn1=((`` :`7esn`))"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:`7esn`)Assert `2esn`(Distinct 9e-12 Ends With {1000},{`1esn`} Contains 1.0 Contains 4.9e12).``! Is Unique"),
    octest_legacy:ct_string("Return Distinct Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null)[#usn7(`1esn`[..$1000])..][Reduce(`5esn`=$@usn5 =~{`3esn`},`1esn` In $12 In {usn2}|$`5esn` Ends With 's_str' Ends With $`6esn`)..] Skip @usn5[{`1esn`}..][Count ( * )..] Union All Create Unique usn1=((`4esn` :_usn4:`2esn`{#usn8:\"d_str\" Contains {@usn6}})<-[?{@usn5:@usn6[999][1000]}]->(`1esn` )) Union All Delete 9e12 Is Not Null Is Not Null,.9e1 Is Null Is Null Remove {@usn6:6.0e0[$#usn7..$1000]}.`8esn`?,{`3esn`:9e0[`3esn`][0],usn2:$`5esn` Is Not Null}.`8esn` Merge `2esn`=((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0})) On Create Set `2esn`+=9e1[0.0],#usn8+=.12e-12[@usn6..'s_str'],{`6esn`:4.9e12 Is Not Null Is Not Null,_usn4:`4esn`[9e-12..true]}.#usn8._usn3? =Shortestpath((((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))))[None(usn1 In {#usn7} =~.12e12 =~9e0 Where 0.0[`7esn`])..Single(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])][`5esn`(Distinct .9e1[$`1esn`..][$``..])..Case When 12e12 Ends With `5esn` Ends With .0e0 Then .9e0 In 8.1e1 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else .9e1 Ends With 0x0 End]"),
    octest_legacy:ct_string("Create `3esn`=(`4esn` :`3esn`)-[`3esn`?:`1esn`|:`1esn`]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}),@usn6=Allshortestpaths(({_usn3:.9e12 Contains 0 Contains $0})) Union Foreach(`3esn` In {`8esn`} Ends With true Ends With {`3esn`}| Create (`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}),@usn5=Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})))) Unwind 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As `1esn` Union All Return Distinct *,7[..123456789][..true] Limit Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Is Null Remove Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0).`8esn`!,Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e0 Ends With $0).``? Start @usn5=Node:usn1(_usn3={@usn6}) ,@usn5=Rel:#usn7(\"d_str\")Where .1e1 Ends With #usn7 Ends With {#usn7}"),
    octest_legacy:ct_string("Create Constraint On(usn1:usn1)Assert Reduce(_usn4={`8esn`} Is Not Null Is Not Null,usn1 In $@usn6 Is Null Is Null|$`3esn` =~#usn8 =~0x0).#usn8._usn4 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:`8esn`)Assert Exists({#usn8:{``}[usn1..][{`8esn`}..]}.@usn6?)"),
    octest_legacy:ct_string("Remove Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .12e12 Starts With 5.9e-12 Starts With `4esn`).`7esn`? Create (((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(`2esn` :_usn3)<-[_usn3?{``:{1000} Starts With {`1esn`}}]->(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))) Start `7esn`=Rel( {`8esn`}) ,`6esn`=Node:@usn6({999})Where `1esn`[{@usn5}..][{_usn4}..]"),
    octest_legacy:ct_string("Load Csv With Headers From Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null)[#usn7(`1esn`[..$1000])..][Reduce(`5esn`=$@usn5 =~{`3esn`},`1esn` In $12 In {usn2}|$`5esn` Ends With 's_str' Ends With $`6esn`)..] As `7esn`  With  *,_usn4['s_str'][8.1e1] Order By 999 Starts With 07 Ascending Where 1.0 Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:_usn3)Assert _usn3(Distinct 9e1 Starts With $@usn6 Starts With 0e-0,0.12 =~`6esn` =~.9e-1).usn2? Is Unique"),
    octest_legacy:ct_string("With Distinct *,7 Starts With 9e-12 As #usn7,$_usn3 In `2esn` In `3esn` Order By Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null Desc,0X7 Contains $12 Contains 0e0 Descending,{@usn5:5.9e-12 Is Null Is Null} Ends With Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where _usn4['s_str'][8.1e1]|0.12 =~2.9e1 =~9e1) Ends With All(`1esn` In $12 In {usn2} Where `5esn` Contains 0 Contains $12) Descending Where {`1esn`} Contains 1.0 Contains 4.9e12"),
    octest_legacy:ct_string("Create Constraint On()<-[`7esn`:@usn5]-()Assert Exists(({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000})<-[`7esn`{`7esn`:6.0e0 =~12.0 =~9e1}]-({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})-[:`8esn`|:#usn8 *01]-(usn2 :`2esn`:`4esn`).`6esn`!)"),
    octest_legacy:ct_string("Unwind $@usn6[``..][3.9e-1..] As `3esn` Match @usn5=Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))) Using Index _usn3:usn2(`4esn`) Where 0.12[Count ( * )..Count ( * )][$999..`5esn`]"),
    octest_legacy:ct_string("Create @usn5=((#usn7 :`7esn`)-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)})),(((`1esn` :`3esn`{@usn6:$12 Is Null})<-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(`` {``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))) Start ``=Relationship:@usn6(#usn8='s_str') ,_usn3=Node:`8esn`(#usn8='s_str')Where {`3esn`}[..0xabc][..{`6esn`}]"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:``)Assert Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[..{0}][..true]|$`4esn` Is Null Is Null).`3esn`? Is Unique"),
    octest_legacy:ct_string("With Distinct *,#usn8[\"d_str\"..usn2] Order By {`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]} Starts With [`6esn` In 010[{`1esn`}..] Where `3esn` Starts With 9.1e-1 Starts With .9e-1] Starts With Case {`6esn`} In {_usn4} In $12 When {0} Is Not Null Then $12 In {usn2} Else $999 =~false =~{`8esn`} End Descending,Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Asc,{#usn8} Starts With {`2esn`} Ascending Skip Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) Return Distinct false Contains {`7esn`},{0} Is Not Null As `` Order By [usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`|{#usn8}[..@usn5]][Case When .9e1 In {#usn7} In .9e-12 Then #usn7 Is Null Is Null End..] Asc,Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] Asc,(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})-[`3esn`?:`1esn`|:`1esn`]-({_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})[{@usn5:07[..$`5esn`]}..][$#usn8..] Descending Skip $7[.1e-1..{@usn6}][$7..{`1esn`}] Limit {``} Is Null Is Null With Distinct 999 Ends With {#usn8},9e1[..@usn5][..$`5esn`],$@usn6[...9e-1] As `2esn` Limit $123456789 Is Not Null Is Not Null Where $7 Union All Create Unique ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})),``=Shortestpath((((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})-[?:usn2{_usn4:$_usn4[..$999],#usn8:Null[#usn7..][9.1e-1..]}]->(`2esn` {usn1:true In 0.0,@usn5:{`1esn`} Is Null})))) Start @usn5=Rel:`8esn`(usn1={#usn7}) ,``=Node:`7esn`({#usn7})Where 00[$``] Load Csv With Headers From Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null)[{`1esn`:.9e-12[usn2]}][Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12)] As usn1 "),
    octest_legacy:ct_string("Create Constraint On(usn1:`5esn`)Assert (`2esn` :_usn3)-[? *..0x0{usn2:Null[$`3esn`..][`1esn`..],`2esn`:\"d_str\" Contains {@usn6}}]-(`8esn` :usn1)-[`8esn`?:_usn3]->(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}}).`4esn`?.@usn6.`5esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(usn1:`5esn`)Assert Exists({`4esn`:$`1esn`[..1000][..\"d_str\"],#usn7:{`5esn`}[.1e-1..1e-1][999..{_usn3}]}.#usn7)"),
    octest_legacy:ct_string("Create Unique Shortestpath((`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[:`1esn`|:`1esn` *0{`8esn`:2.12[{12}],`7esn`:$@usn6[``..][3.9e-1..]}]->(:`2esn`:`4esn`{usn2:$@usn6[.1e-1][9e12],`5esn`:12e12 Is Not Null Is Not Null})-[`5esn`?:#usn7|:@usn5{usn2:#usn7[123.654][{12}]}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})),((:`7esn`{`4esn`:@usn5 =~$#usn7 =~{usn1}})-[`8esn`{#usn8:.12e12[..7]}]-({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`1esn`? *0{@usn6:true Is Null}]-(_usn4 )) Union All Load Csv With Headers From 9.1e-1 In 9e1 As @usn5 "),
    octest_legacy:ct_string("Create Constraint On(`7esn`:usn1)Assert count(01234567 =~12e12 =~.0e-0,$999 Is Not Null).@usn6?.`1esn`.`8esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:usn2)Assert Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 9e-1 Is Not Null|$123456789 Is Not Null Is Not Null).usn2! Is Unique"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((@usn6 :@usn6:_usn3))),Allshortestpaths(((@usn5 :`3esn`{`8esn`:0x0 Ends With #usn8 Ends With .9e-1}))) Union All Create Allshortestpaths(((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))),`8esn`=Allshortestpaths(((:`4esn`:usn2{#usn7:$12[10.12e12][.1e1],`1esn`:{1000} Starts With {`1esn`}})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(_usn4 :usn2))) Union Unwind $`8esn`[...1e-1] As usn2 Match Shortestpath(((`` :`7esn`))),Allshortestpaths((:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[*{usn1:{`6esn`} In .0e0 In $0,usn1:07[..$`5esn`]}]-(:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:usn2]-(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1})) Using Index @usn5:usn1(`4esn`) Where {0}[.1e-1..][_usn4..] Optional Match `5esn`=Shortestpath((({_usn3:.9e12 Contains 0 Contains $0}))),usn2=(`8esn` :@usn6:_usn3)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Where 010[...12e-12]"),
    octest_legacy:ct_string("Create Unique @usn5=Shortestpath((`7esn` {#usn8:2.9e1[{`2esn`}]})<-[usn2:#usn8|:``]->({`6esn`:9e0[`4esn`..$_usn4][9.1e-1..0e0]})),(usn1 :`3esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 )<-[_usn4{`5esn`:9e0[..{#usn7}][..`4esn`]}]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`}) Remove [#usn7 In .0e-0 In 12 Where $999 Is Not Null].`8esn`.@usn6!.`1esn`,Extract(`6esn` In 010[{`1esn`}..] Where {`3esn`}[_usn4][2.9e1]|0[$usn1..])._usn3!.usn2.`8esn`! Union All With Distinct (`` {`7esn`:`4esn` =~010})<-[:`5esn`{_usn4:0e-0[..$usn2],usn2:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]-(`6esn` :_usn4:`2esn`)-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}) Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` Ends With 10.12e12) As `8esn` Order By 9e-12[010..{#usn7}][{123456789}..7] Desc Limit 7.0e-0 Ends With {123456789} Ends With @usn6"),
    octest_legacy:ct_string("Return Distinct @usn6[Reduce(`5esn`=_usn4['s_str'][8.1e1],_usn3 In `8esn`[_usn4]|$_usn3 =~'s_str' =~12)..][(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[`7esn`?]-(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})..],9e0 In {usn2} In {@usn6} As `8esn` Order By None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) Desc,0e-0[..$usn2] Descending Limit $`5esn` Starts With 4.9e12 Starts With 0e-0 With  {#usn7}[..\"d_str\"][..#usn8] As `3esn`,Any(_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12)[(`5esn` :`8esn`{`1esn`:{`8esn`} Starts With .9e-1 Starts With 1000,@usn5:10.12e12 In Null In .12e12})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(#usn7 :_usn3{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})..] As usn1,$999 Ends With `2esn` Ends With 12.0 As @usn6 Skip $`1esn` Limit {7}[.1e-1] Where `4esn`[9e-12..true] Union Remove `2esn`:`2esn`:`4esn`,Single(usn1 In {#usn7} =~.12e12 =~9e0 Where {1000} Starts With 10.12e12 Starts With .0e-0).usn2 Start `3esn`=Node(0xabc,7,0Xa,01234567) Where $`8esn` Is Not Null Is Not Null Union All Unwind Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] As `1esn` Create Unique Allshortestpaths(({`6esn`:8.1e1 Contains .9e-1 Contains false})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})),@usn6=((`` {_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})) Load Csv With Headers From 2.12[10.12e12][_usn4] As `1esn` "),
    octest_legacy:ct_string("Drop Constraint On()-[_usn3:`5esn`]-()Assert Exists({_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}.`1esn`)"),
    octest_legacy:ct_string("Create Constraint On()<-[@usn5:usn2]-()Assert Exists((`6esn` :usn2{`6esn`:{usn1}[7.0e-0..][3.9e-1..]})<-[#usn7?:_usn3 *999..123456789{@usn5:$12 In {usn2},usn1:5.9e-12 Is Null Is Null}]-(`3esn` :#usn7:`8esn`{`4esn`:$`5esn`[$_usn3][$12],#usn8:`8esn`[.12e12..]}).#usn7!)"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:_usn3)Assert Case 9e0[{7}...0e-0][Null..@usn5] When {`6esn`}[@usn5..{@usn6}] Then 1.9e0 In $@usn6 In $_usn3 Else $`8esn` =~{`6esn`} =~12 End.`5esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(_usn3:#usn7)Assert Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[..{0}][..true]|$`4esn` Is Null Is Null).`3esn`? Is Unique"),
    octest_legacy:ct_string("Remove None(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]).#usn8!.`6esn`.``?,`8esn`({0} In {`1esn`},.9e-1 Ends With .0e-0 Ends With {_usn3}).`6esn`!,None(`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0).`8esn`! Union Load Csv With Headers From Filter(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}]) Starts With Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3)) Starts With {@usn5:$123456789 Is Not Null Is Not Null} As `4esn`  Load Csv From {`1esn`}[{usn2}] As @usn5 Fieldterminator 's_str' Union All Remove Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {#usn8}[..@usn5]|{0}[.0e-0][$`2esn`]).@usn6?.``?,(`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[?:`1esn`|:`1esn`]-(:@usn5{`1esn`:$999 =~0e0 =~0X7})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12}).`7esn`,{_usn4:$7}.@usn5 Return Distinct 0.12[{@usn6}..{#usn7}] Order By Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) Ascending,Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Descending,.9e-1[`1esn`][7] Ascending Limit {`4esn`}[{`3esn`}][$`2esn`]"),
    octest_legacy:ct_string("Create Constraint On(#usn7:_usn4)Assert Case When {`8esn`} Starts With .9e-1 Starts With 1000 Then $`6esn`[$_usn3..{1000}] When 3.9e-1 Starts With .9e0 Starts With {#usn7} Then .0e-0 Ends With $`2esn` Ends With `5esn` Else _usn4[$_usn4] End.usn2! Is Unique"),
    octest_legacy:ct_string("Merge ``=((@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})-[@usn5:`6esn` *..00]->(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) On Create Set @usn5+=Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(usn1 In $usn1 In 4.9e12 In ``| Create Unique ``=(((@usn5 {@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})))) Union Merge Shortestpath(((@usn6 :`2esn`:`4esn`{@usn6:$12[10.12e12][.1e1],`8esn`:@usn5 In Null})<-[`3esn`?:`6esn`{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(@usn5 :usn1{`4esn`:$12 Is Null,`8esn`:\"d_str\" Starts With ``})<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) Return Distinct Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null) In `4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`),9e-1 Contains 3.9e-1 As `7esn`,All(#usn8 In 07[..$`5esn`] Where $@usn6 Starts With 0xabc Starts With {`7esn`}) As `6esn` Limit Any(`7esn` In 0.12 Is Not Null Where $0 Contains $7) Is Not Null Is Not Null Load Csv From Reduce(`6esn`=$`5esn`[$_usn3][$12],`2esn` In $@usn5 Is Not Null Is Not Null|1.9e0 In $@usn6 In $_usn3)[{``:.12e-12 Is Null}..][Case When $1000 Starts With {@usn6} Starts With $@usn5 Then `2esn` When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else 12[4.9e12..] End..] As #usn7 "),
    octest_legacy:ct_string("Remove Shortestpath(((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]}))).`5esn`?._usn3?,$7.@usn6.`1esn` Merge `2esn`=Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) On Create Set Case 0xabc[..Count(*)][..$`5esn`] When `6esn`[0X0123456789ABCDEF..][`8esn`..] Then `2esn`[`7esn`][1000] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} Else 12e12[{`4esn`}..`4esn`][999..{@usn6}] End.``!.#usn8! =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})-[_usn4:_usn3{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]}).#usn7! =8.1e1 Contains .9e-1 Contains false,`5esn` =false Is Not Null Is Not Null With  00[..@usn6] As `6esn`,.0e0[$usn1][0] As ``,$`8esn` Contains {@usn6} Contains `7esn` Order By $1000 Is Null Descending,7.0e-0 Ends With {123456789} Ends With @usn6 Descending Limit 1000[{`1esn`}..][$`3esn`..]"),
    octest_legacy:ct_string("Start `2esn`=Node:``(#usn8=\"d_str\") ,`2esn`=Relationship:``(`1esn`=\"d_str\") With Distinct *,{usn1} Is Not Null,{`2esn`}[0x0..9e0] As `6esn` Limit Allshortestpaths((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))[usn1..] Optional Match #usn8=Allshortestpaths((usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[`3esn`:#usn8|:``{``:$``[9e0..][5.9e-12..],``:$#usn7 Contains 3.9e-1}]->(:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})) Using Join On _usn4,usn2,`` Using Join On `7esn` Where $_usn3 In `2esn` In `3esn` Union Return Distinct Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null],7 Starts With 9e-12 As #usn7 Order By All(`1esn` In $12 In {usn2} Where `5esn` Contains 0 Contains $12)[usn1({#usn7} Ends With 999 Ends With 12)] Descending,$`1esn` In 0Xa Desc,10.12e12[.0e0] Desc Skip Case {1000}[..{usn1}][..1e-1] When {@usn5}[10.12e12..] Then 1.0 Is Null Is Null When {`3esn`} Is Not Null Is Not Null Then .1e1 Contains 1e-1 Contains #usn8 Else $`5esn`[{`4esn`}][{0}] End[..{usn1:1.9e0[..0][.._usn3],`7esn`:1.9e0[.12e-12][9e-12]}][..{`1esn`:{0} Is Null Is Null}]"),
    octest_legacy:ct_string("Create Unique usn1=((@usn6 :`5esn`:`7esn`)-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)-[`3esn`:`6esn` *..0x0]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})),Shortestpath((:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]})<-[:`6esn` *999..123456789]->(:_usn3{@usn5:`2esn`[`7esn`][1000]})) Remove Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 6.0e0 =~12.0 =~9e1|1.9e0[..0][.._usn3]).``,{`6esn`:12e12[usn2..$`6esn`]}.`3esn`?,{#usn7:$12[10.12e12][.1e1],`1esn`:{1000} Starts With {`1esn`}}.`5esn` Delete {``:$`8esn`[..5.9e-12][..`8esn`]}[[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .9e12[6.0e0..][@usn5..]|2.9e1[2.9e1..][`4esn`..]]..][Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End..],010[...12e-12]"),
    octest_legacy:ct_string("Start #usn8=Node(07,0Xa) Where 123456789[_usn4..`1esn`][$`6esn`..{@usn6}] Return 0Xa[999],Shortestpath((`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)) Is Not Null Is Not Null As `8esn` Order By 10.12e12 Contains .9e0 Ascending,0e0[2.9e1..][.12e-12..] Ascending Skip {0} In {`1esn`} Limit `6esn` =~999 =~$999 Union Load Csv From {usn1:$usn1[9e1][{999}],#usn8:0e-0[$``..10.12e12]}[Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End] As `8esn`  Merge `2esn`=Shortestpath(((`4esn` :`3esn`))) Merge Shortestpath(((`5esn` :#usn8:@usn6{``:Count(*) Starts With {usn2} Starts With `2esn`,`1esn`:12e12[{`4esn`}..`4esn`][999..{@usn6}]})<-[?:`2esn`|`5esn` *..123456789$1000]-({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]}))) On Match Set `1esn` ={`2esn`}[0x0..9e0],Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]).`8esn`? ={123456789} Contains $#usn7 Contains {#usn8},`5esn` =Case .9e-1 Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] Else .1e1 Is Not Null Is Not Null End Ends With Reduce(``={`3esn`}[$#usn8..],usn1 In {#usn7} =~.12e12 =~9e0|2.9e1[{`2esn`}]) Ends With [`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}|$`` =~$_usn3] On Match Set `2esn` =7[{`4esn`}..],usn2 =$@usn5 Contains _usn3 Union All Unwind Filter(`2esn` In $@usn5 Is Not Null Is Not Null Where {12} Ends With $`3esn` Ends With 0xabc)[Case When {0} Is Null Is Null Then $``[1.0..][_usn3..] Else 999[..$@usn5][..``] End..] As @usn5 Optional Match ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})),``=Shortestpath((((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})-[?:usn2{_usn4:$_usn4[..$999],#usn8:Null[#usn7..][9.1e-1..]}]->(`2esn` {usn1:true In 0.0,@usn5:{`1esn`} Is Null})))) Where 7[{`4esn`}..] Return *,0xabc Starts With `2esn` Starts With 10.12e12,`1esn` In 010 In 1e-1 As usn2 Skip Case false =~$7 When 999 Ends With {#usn8} Then `1esn` =~{12} =~{999} Else @usn5 In Null End[..Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $#usn8[$0..`3esn`][1e-1..$7])] Limit 12e12 Starts With {``}"),
    octest_legacy:ct_string("Delete {`4esn`} In 1000 In {@usn5} Unwind [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..] As `2esn`"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:`5esn`)Assert Exists((:#usn8:@usn6{`3esn`:$#usn7})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]->(@usn6 :usn1{`2esn`:$`6esn` Starts With 0.0}).``?.#usn8)"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:#usn7)Assert Exists([`2esn` In $@usn5 Is Not Null Is Not Null Where {`3esn`} =~$@usn5 =~`2esn`].`5esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(usn2:#usn8)Assert Exists(`8esn`(Distinct 8.1e1 Contains $@usn6,{0}[`4esn`..{`8esn`}]).usn2!.#usn7!)"),
    octest_legacy:ct_string("Start `3esn`=Rel:`7esn`(`8esn`={`3esn`}) ,`2esn`=Node( {`6esn`})Where $`6esn` Starts With 0.0 Union Return usn2($12 =~4.9e12) Ends With Any(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]) Ends With Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End As `7esn` Skip `5esn` Is Not Null Is Not Null Limit .1e1 Is Null Is Null Merge usn2=(`8esn` :@usn6:_usn3)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) On Match Set usn1 ={`6esn`} In 11.12e-12 In 2.9e1,#usn8+={@usn5} Contains .1e1 Contains {`5esn`},@usn6+={`3esn`}[#usn7] On Match Set Reduce(`1esn`=12.0[..Count ( * )][..@usn6],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|5.9e-12 Contains {12} Contains {#usn8}).usn2? =5.9e-12[..9e0] Create ((#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[@usn6?{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})),`6esn`=Allshortestpaths(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0}))"),
    octest_legacy:ct_string("Create Constraint On()-[`3esn`:`5esn`]-()Assert Exists({_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}.``)"),
    octest_legacy:ct_string("Load Csv From 8.1e1['s_str'..] As #usn7 Fieldterminator 's_str' Remove Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where `6esn` Ends With 1e1 Ends With $#usn7).usn2 Unwind Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null)[#usn7(`1esn`[..$1000])..][Reduce(`5esn`=$@usn5 =~{`3esn`},`1esn` In $12 In {usn2}|$`5esn` Ends With 's_str' Ends With $`6esn`)..] As `4esn` Union Unwind 0.0[$`4esn`] As `8esn`"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From Count(*)[Null..][01234567..] As usn1 Fieldterminator \"d_str\" Create Allshortestpaths((`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`)),Allshortestpaths(((`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]})-[_usn4*{`3esn`:{``} Is Null Is Null}]-({`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(`` {``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})))"),
    octest_legacy:ct_string("Create Constraint On()<-[#usn8:`4esn`]-()Assert Exists(12.@usn5.``!.`8esn`)"),
    octest_legacy:ct_string("Return `7esn` In _usn4 In $`7esn` Skip 's_str'[`3esn`..0x0] Union Detach Delete $7[999..10.12e12][$`1esn`..{usn1}]"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv From {`5esn`} As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On()-[@usn5:usn2]-()Assert Exists({usn1:.9e-1 Is Null Is Null}.usn1.usn2?)"),
    octest_legacy:ct_string("Merge (usn1 :#usn8:@usn6) On Match Set usn1 ={`8esn`}[..`5esn`][..01],usn2+={#usn7} Ends With 999 Ends With 12 On Create Set _usn4+={``} Ends With @usn5 Ends With $_usn3,Reduce(#usn7=9e1[0.0],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|0.0[$`4esn`]).#usn8!.`1esn`!.`1esn`? =$`4esn` Ends With .12e12 Ends With 123.654,`5esn` =$usn2 Starts With $999 Starts With .0e0 Remove Case When {usn2} Is Not Null Is Not Null Then false Contains {`7esn`} When {_usn3} Is Null Is Null Then .12e12 Ends With 07 Ends With 3.9e-1 End.#usn7!,Reduce(#usn8={`6esn`} =~2.12 =~123.654,`` In `7esn` =~#usn8 =~\"d_str\"|usn2 Contains `2esn` Contains {1000}).`5esn`,Reduce(usn2=.9e1[$`1esn`..][$``..],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|`3esn` Contains 01 Contains 01).#usn7! Union Delete Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where usn2[..$0][..`3esn`]|{0}[`4esn`..{`8esn`}])[Reduce(``=Null,`7esn` In 0.12 Is Not Null|{#usn7} Starts With .1e-1)..][Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1)..],{`6esn`} Starts With 12e12 Starts With {`2esn`} Foreach(usn2 In usn2 Contains `2esn` Contains {1000}| Load Csv From 9e-1 Contains .12e-12 Contains $0 As `6esn`  With Distinct 12e12[usn2..$`6esn`] As usn1,0Xa Contains 12e-12,Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null As #usn7 Order By 9e12 Ends With \"d_str\" Ends With 0X7 Desc Skip {12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1] Where $@usn6 Is Null) Optional Match _usn3=(((`4esn` )-[{#usn7:1e-1[$`4esn`]}]->(`1esn` :`2esn`:`4esn`)-[?:#usn8|:``{usn2:{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],usn1:\"d_str\"[0x0..{@usn6}][$@usn5..0]}]-(:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12}))),`1esn`=Allshortestpaths((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[?$999]-(`4esn` {#usn7:$usn1[0e0...9e-12]})-[:`5esn` *01234567..{`2esn`:{usn1} Contains {`2esn`},#usn7:`4esn`[9e-12..true]}]-(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})) Union Return Distinct *,Case Count ( * ) =~123456789 =~{@usn5} When 0[10.12e12] Then 12.0 Starts With 00 Else 2.9e1 In {``} End[..Case $`8esn`[0x0][.9e0] When `2esn` Starts With 010 Starts With `` Then {`7esn`} Is Not Null Is Not Null Else $usn1 =~.0e0 =~{`4esn`} End][..Extract(#usn8 In 07[..$`5esn`] Where 07[{@usn5}..]|9e-1 Contains 3.9e-1)] As `4esn`,(`2esn` :usn1)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(_usn4 :_usn3)[Case When 3.9e-1 Ends With {usn1} Ends With {`5esn`} Then 5.9e-12 Is Null Is Null When 9e1 Ends With 9e12 Ends With 0x0 Then .9e0 =~#usn7 Else 0 Starts With `7esn` Starts With 9e0 End..Filter(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null)] As _usn4 Skip 00[$``]"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:usn2)Assert Exists({_usn4:#usn8 =~{@usn5}}.`6esn`?)"),
    octest_legacy:ct_string("Create Constraint On()-[#usn8:@usn6]->()Assert Exists(Case 12e12 When {#usn7} =~$@usn6 =~$7 Then 6.0e0 =~12.0 =~9e1 When 0.0[00..][0xabc..] Then .9e1[$`1esn`..][$``..] Else `5esn` Is Not Null Is Not Null End.`6esn`?)"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:usn1)Assert [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[01234567][{#usn7}]|$`8esn`[..5.9e-12][..`8esn`]].usn2.`2esn`!._usn3? Is Unique"),
    octest_legacy:ct_string("Delete .9e12 Is Not Null Is Not Null,12.0 In `7esn` Delete .12e-12[{`1esn`}][`1esn`]"),
    octest_legacy:ct_string("Drop Constraint On(``:@usn5)Assert exists(`3esn` Starts With 9.1e-1 Starts With .9e-1,{#usn8} Starts With {`2esn`}).``! Is Unique"),
    octest_legacy:ct_string("Create Unique @usn5=(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})<-[{usn1:$_usn3 Starts With 010}]-(#usn8 :`8esn`) Create @usn5=Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))),usn1=Allshortestpaths(((:`4esn`:usn2{usn2:$usn2 Ends With 00 Ends With 9e12,_usn4:{`5esn`}})-[?:``|:`7esn` *12{#usn8:10.12e12 Contains .9e0,usn1:0xabc Contains {12} Contains {`6esn`}}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))) Union Return Distinct .9e12 Is Not Null Is Not Null,Shortestpath((:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})) Starts With {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF} Starts With Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})),.9e12 Contains 0 Contains $0 As #usn7 Order By .0e-0 Ends With $`2esn` Ends With `5esn` Descending Limit 12e-12 =~$_usn3"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:usn2)Assert Allshortestpaths(({@usn6:12e12[{`4esn`}..`4esn`][999..{@usn6}]})-[#usn8?:_usn3 *..123456789]-({#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]})-[_usn3?:``|:`7esn` *0X0123456789ABCDEF]-(#usn7 {usn2:0X7[#usn7..][$@usn5..]})).usn2 Is Unique"),
    octest_legacy:ct_string("Load Csv With Headers From `4esn` Is Not Null As _usn4 Fieldterminator 's_str' Remove `7esn`:`4esn`:usn2,Filter(usn2 In .12e-12 Ends With `2esn` Where $7).usn1.#usn7!.`5esn` Union All Load Csv With Headers From $`1esn`[9e0..$12] As #usn7 Fieldterminator \"d_str\" Union All Return Distinct *,`1esn`[..$1000] As _usn3 Order By $@usn5 =~{`3esn`} Descending,_usn4['s_str'][8.1e1] Descending Limit $`8esn` Is Null Is Null Match `1esn`=(((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))) Using Join On _usn4,usn1,`` Using Index usn2:``(`3esn`) Where .0e0['s_str'..][0Xa..]"),
    octest_legacy:ct_string("Unwind 1000[{123456789}][usn1] As `7esn` Create Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))),@usn6=((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})) Union All Remove (`` :`8esn`)-[#usn7? *..00{_usn3:.0e-0[..``][..$7],_usn4:{#usn8} Ends With _usn3 Ends With `2esn`}]->(:`3esn`)-[usn1?:usn1|usn2]->(#usn7 :@usn5).usn1,{12}.`6esn`? Create Unique #usn8=((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) Merge (((`1esn` :#usn8:@usn6{`7esn`:.1e-1 Contains .12e-12,`2esn`:.1e1 Ends With #usn7 Ends With {#usn7}})-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5)-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5))) On Match Set Allshortestpaths((:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})).@usn6! =12 Is Not Null Is Not Null On Create Set Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})).`5esn`!._usn3!._usn3? =$`1esn` Ends With 1000,(`8esn` :usn1)<-[usn2 *7]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})-[ *01{usn1:false[..usn2][..999]}]-(_usn3 ).#usn7!.`` =4.9e12 Ends With $@usn6,usn2 =10.12e12[.0e0] Union All Create Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}})) Return (usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[_usn3?:@usn5|:#usn7]->(`2esn` :usn1)<-[?:usn1|usn2{#usn8:'s_str'[`2esn`][12.0]}]->(_usn3 :``)[[usn2 In .12e-12 Ends With `2esn` Where .9e0[07..][4.9e12..]|12.0[...0e0]]] As `1esn`,$_usn4 =~$#usn8 =~{`4esn`} Order By $1000 Is Null Desc,9e-12 Is Not Null Is Not Null Desc,{`1esn`} In 0 Asc Unwind 12e-12 Starts With $`7esn` As usn2"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:``)Assert Any(_usn3 In `8esn`[_usn4] Where $1000[_usn4][{@usn5}]).``?.`1esn`.usn1? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:@usn5)Assert (`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})<-[#usn8?:#usn7|:@usn5]-(`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}).usn1! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(#usn8:usn2)Assert Filter(`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`} In .0e0 In $0).`4esn`.#usn8?.`3esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[_usn3:`4esn`]-()Assert Exists(Shortestpath((:`3esn`{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]})).usn2!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:@usn5)Assert Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))).`6esn`? Is Unique"),
    octest_legacy:ct_string("Create `5esn`=Allshortestpaths((({`6esn`:8.1e1 Contains .9e-1 Contains false}))),(:usn1{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})-[_usn3:`4esn`|:`2esn` *01234567..]->(`8esn` :`2esn`:`4esn`) Delete Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where Null In {7}) Ends With ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[ *12{#usn8:0e0 =~{12} =~{1000}}]->(:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}) Ends With Case When $@usn5[``..] Then `3esn` Is Null When $7[.1e-1..{@usn6}][$7..{`1esn`}] Then 0xabc[0Xa..] Else 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] End,$12[$@usn5],`2esn`[.9e12..] Start `2esn`=Rel( {_usn3}) Where $_usn4 =~$#usn8 =~{`4esn`} Union Delete $`6esn` In 999 In {_usn3},0[.9e-1..0e0][.1e1.._usn4],\"d_str\" Is Not Null Is Not Null Delete {`3esn`}[..{`4esn`}][..usn2],`1esn`({`4esn`} Ends With Count(*),$usn1 Contains 4.9e12 Contains $`2esn`) Is Not Null Is Not Null,Single(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1])[Case When 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] Then $#usn8 Is Not Null Is Not Null When \"d_str\" Starts With $`7esn` Starts With 999 Then \"d_str\"[0x0..{@usn6}][$@usn5..0] Else .0e-0[..01234567] End..] Merge @usn6=((`2esn` :usn1)<-[_usn3:@usn5|:#usn7 *..07]-({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2)) Union Create ((`4esn` :``{_usn4:$_usn3[0x0][{0}],@usn6:9e-12 Is Not Null Is Not Null})<-[usn2:_usn3 *0xabc..12]-(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]})),``=Shortestpath((:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})<-[`3esn` *..0x0]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})-[`6esn`?:@usn5|:#usn7{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`}]-(`4esn` {@usn5:5.9e-12[12e-12][$`8esn`],`5esn`:{123456789} Contains $0}))"),
    octest_legacy:ct_string("Load Csv With Headers From Case When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 Else $12 Is Not Null Is Not Null End Starts With usn1(Distinct .9e1[$`1esn`..][$``..]) Starts With Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End As @usn6  Merge `4esn`=((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})<-[ *01234567..{usn1:{12} Contains `8esn` Contains @usn5}]->(usn1 :@usn6:_usn3)-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) On Create Set {``:`6esn` =~999 =~$999}.`3esn`! =.1e1 In $999 In {#usn8},{`1esn`:$usn2 Is Not Null Is Not Null,`8esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}.#usn8 =7.0e-0 Ends With {123456789} Ends With @usn6,usn1 =$#usn7 Ends With {`5esn`} Ends With 01 On Create Set Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})).`5esn`!._usn3!._usn3? =$`1esn` Ends With 1000,(`8esn` :usn1)<-[usn2 *7]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})-[ *01{usn1:false[..usn2][..999]}]-(_usn3 ).#usn7!.`` =4.9e12 Ends With $@usn6,usn2 =10.12e12[.0e0] Create Unique `5esn`=Shortestpath((({_usn3:.9e12 Contains 0 Contains $0})))"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:``)Assert Exists(None(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 0xabc[..{usn1}][..\"d_str\"]).`1esn`?)"),
    octest_legacy:ct_string("Remove Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])._usn3 Start `1esn`=Node(0x0) ,``=Node( {#usn7})Where 00[Null..usn2]"),
    octest_legacy:ct_string("Drop Constraint On()<-[``:_usn4]-()Assert Exists(Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e-1 Is Null Is Null).#usn8)"),
    octest_legacy:ct_string("Create Constraint On(#usn7:`6esn`)Assert Case When {1000}[..`5esn`][..9e12] Then Count(*)[..{#usn7}] End.`3esn`! Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}).`7esn`!._usn4.usn1,[@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`4esn`} Ends With Count(*)|$0 Ends With $usn1 Ends With {``}].`7esn`?.``!.`3esn`,Reduce(@usn5=0xabc[..Count(*)][..$`5esn`],usn1 In \"d_str\" Contains {@usn6}|123456789[#usn7..9e-1][10.12e12..{0}])._usn4.`7esn`!.`8esn`? Match `2esn`=Allshortestpaths((`6esn` :`6esn`)-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5)-[``:``|:`7esn`*{#usn8:{#usn7}[.12e-12],`3esn`:1.9e0[`6esn`][`7esn`]}]-(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})),(((:`1esn`:``{`8esn`:5.9e-12[0x0..]})<-[`1esn` *010..0]->(@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[{usn2:{1000}[..{usn1}][..1e-1]}]->(`4esn` {`6esn`}))) Using Index #usn7:`2esn`(`8esn`) Foreach(`4esn` In Single(`2esn` In $@usn5 Is Not Null Is Not Null Where {_usn3} Is Null Is Null) =~Reduce(``=Null,`7esn` In 0.12 Is Not Null|{#usn7} Starts With .1e-1)| With Distinct {usn1} Contains {`2esn`},[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]],`6esn`[0X0123456789ABCDEF..][`8esn`..] As #usn8 Limit Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null Where $usn2 Contains $`3esn` Contains 6.0e0)"),
    octest_legacy:ct_string("Create Constraint On()-[`4esn`:@usn5]-()Assert Exists(({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]})<-[usn1?{`5esn`:$0 Ends With 9e-12 Ends With $_usn4}]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})-[?:_usn3]->(_usn3 :`1esn`:``).`1esn`)"),
    octest_legacy:ct_string("Return *,$123456789[..$999][..`6esn`] As @usn5,Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 01 =~07)[Case 9e-12 Ends With 9e1 Ends With 4.9e12 When `3esn` =~$#usn7 Then $@usn5 Starts With #usn7 When {`4esn`}[{`3esn`}][$`2esn`] Then #usn7[$`8esn`][{`3esn`}] Else 9e0[`4esn`..$_usn4][9.1e-1..0e0] End][[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]] Skip @usn5[9e-1..{`1esn`}] Limit 11.12e-12 Contains usn1 Load Csv From false =~{`8esn`} =~00 As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:#usn8)Assert Exists((`8esn` :usn1)<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12}).#usn8!)"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:`6esn`)Assert Exists(Any(`6esn` In 010[{`1esn`}..] Where `6esn` Ends With 1e1 Ends With $#usn7).`5esn`?)"),
    octest_legacy:ct_string("Create Allshortestpaths((`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`)) Create Unique `6esn`=(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})<-[?$999]-(`4esn` {#usn7:$usn1[0e0...9e-12]})-[:`8esn`|:#usn8 *01]-(:#usn7:`8esn`{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}),_usn3=(((`4esn` )-[{#usn7:1e-1[$`4esn`]}]->(`1esn` :`2esn`:`4esn`)-[?:#usn8|:``{usn2:{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],usn1:\"d_str\"[0x0..{@usn6}][$@usn5..0]}]-(:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12}))) Union Detach Delete 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))],{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1] Create Unique _usn4=(#usn8 :`5esn`:`7esn`{usn2}) Delete {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null),0.0[$`4esn`] Union Remove Reduce(`3esn`={123456789} =~.9e1 =~$_usn3,`8esn` In {_usn4} Ends With {0} Ends With `1esn`|{usn1}[`7esn`..Count(*)]).usn2.`6esn`?"),
    octest_legacy:ct_string("Unwind 9e0 In {usn2} In {@usn6} As @usn5 Start `2esn`=Relationship:_usn4(@usn6=\"d_str\")  Union All Start `7esn`=Node:@usn6(`3esn`={``})  Start `3esn`=Node(0xabc,7,0Xa,01234567) Where $`8esn` Is Not Null Is Not Null Union Create Unique `7esn`=Shortestpath(((usn1 :_usn4:`2esn`)<-[`3esn`?:@usn5|:#usn7]->({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[?{#usn7:`2esn`,`7esn`:$@usn5 Is Not Null Is Not Null}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))) Optional Match (({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 {#usn7:$999 =~false =~{`8esn`}})),(((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}))) Using Scan `4esn`:`1esn` Using Index `6esn`:`8esn`(`3esn`) Where $#usn7[01..2.12][2.12..3.9e-1]"),
    octest_legacy:ct_string("Remove Extract(`7esn` In 0.12 Is Not Null Where {`1esn`}[{usn2}]|9e1 Ends With `7esn` Ends With 2.12).`2esn`?.`1esn`.usn2!,Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where {`3esn`} =~$@usn5 =~`2esn`|$1000 Starts With {@usn6} Starts With $@usn5).`3esn`?.`3esn`?.`4esn`? Delete 1e1[$_usn3],9e-1[0],$#usn8 Starts With 9.1e-1 Starts With {#usn7} Detach Delete $@usn6[.1e-1][9e12]"),
    octest_legacy:ct_string("With  $#usn7 Contains 3.9e-1 Order By Count(*)[{12}..{#usn8}] Asc Where 2.12[{12}] Union With Distinct $`8esn` Is Not Null Is Not Null As _usn3 Order By Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Descending,\"d_str\" In 7.0e-0 Desc Skip Reduce(_usn3=7.0e-0[$`6esn`..],`7esn` In 0.12 Is Not Null|false Starts With 0 Starts With 2.9e1) =~Case $`3esn` =~0x0 When $12[$@usn5] Then 11.12e-12 In {usn1} When 4.9e12[{_usn4}..] Then $@usn5 Contains _usn3 Else .12e-12 Starts With .12e-12 End =~Reduce(_usn4=_usn4 Is Not Null Is Not Null,`2esn` In $@usn5 Is Not Null Is Not Null|7.0e-0 Is Not Null) Limit {_usn3:.0e-0[..``][..$7]}[..(`6esn` :`4esn`:usn2)-[$#usn8]->(`3esn` :`5esn`:`7esn`)][..@usn5] Union All Foreach(`` In true[0Xa..]| With  *,0e0[12.0][{#usn7}] As `8esn`,Extract(#usn8 In 07[..$`5esn`] Where $usn2[..$999][..#usn8])[..Extract(`1esn` In $12 In {usn2} Where {123456789} =~.9e1 =~$_usn3|9e1 =~$`8esn` =~10.12e12)][..Reduce(`8esn`=.1e1[{@usn6}][true],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|0X7 Is Not Null Is Not Null)] As `3esn` Order By .0e-0[..01234567] Descending,Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null) Ascending Skip 9e1[...9e1][..$`6esn`] Limit 9e-1[0] Where Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Return *,Reduce(`2esn`=$@usn5[``..],`7esn` In 0.12 Is Not Null|$`4esn` Is Not Null) =~Any(_usn3 In `8esn`[_usn4] Where {`6esn`} In {_usn4} In $12) =~Reduce(`1esn`=false =~{`8esn`} =~00,`2esn` In $@usn5 Is Not Null Is Not Null|`1esn`[{@usn5}..][{_usn4}..]),1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] Skip .12e-12 Starts With .12e-12 Limit (@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(:`6esn`{`2esn`:`5esn` Ends With Count(*)})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12}) In Any(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}) In Single(`7esn` In 0.12 Is Not Null Where $`7esn` Starts With 's_str') Start #usn7=Rel:@usn6({1000}) "),
    octest_legacy:ct_string("Detach Delete 9.1e-1 Starts With .9e0,Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null,Case 9e1 In $1000 When 999 Starts With 7.0e-0 Starts With true Then {usn2}[{999}..][9e12..] End[Case .9e-1 Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] Else .1e1 Is Not Null Is Not Null End..][Any(`1esn` In $12 In {usn2} Where @usn6[true..])..]"),
    octest_legacy:ct_string("Merge Shortestpath(((`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})<-[`3esn`?:usn2]-(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(`1esn` {@usn6:6.0e0[$#usn7..$1000]}))) On Match Set {usn1:1.0 Is Not Null}.usn1? ={123456789} Contains $0,usn1+=01 Is Not Null,usn1 ={999} =~$`6esn` =~$`6esn` With Distinct {usn1} Contains {`2esn`},[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]],`6esn`[0X0123456789ABCDEF..][`8esn`..] As #usn8 Limit Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null Where $usn2 Contains $`3esn` Contains 6.0e0 Unwind $usn1[0e0...9e-12] As usn1 Union Return Distinct {`5esn`} Ends With $`7esn` Ends With {@usn5} As `4esn`,{#usn8} Is Not Null As `6esn`,{`3esn`}[...1e1][..0] Order By usn1 Ends With 11.12e-12 Ends With 5.9e-12 Descending,.1e-1 Is Not Null Ascending,Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}] Descending Skip 9e0[{7}...0e-0][Null..@usn5] Limit $`5esn` =~Count(*) =~1.9e0 Create Unique _usn4=((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})) Merge Allshortestpaths(((`8esn` :`7esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 )))"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:`3esn`)Assert Exists(Reduce(`2esn`={1000}[..{usn1}][..1e-1],_usn3 In `8esn`[_usn4]|Count(*)[$7]).@usn5?)"),
    octest_legacy:ct_string("Merge Allshortestpaths(({`4esn`:{7}[0x0][1e1]})) On Create Set #usn8 =Null In {7} Match (((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))),Shortestpath(((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1))) Using Join On ``,usn1,`2esn` Using Index #usn7:`2esn`(`8esn`) Remove Case When 0.12 Is Not Null Then $`` =~$_usn3 When 00[$_usn4][$`1esn`] Then {#usn7}[.12e-12] End.usn2!.`3esn`! Union All Load Csv From false[9e12] As `2esn`  With  *,Allshortestpaths((_usn4 {`3esn`:.0e-0 In 12})) Is Null Is Null,{@usn6} Is Null As `5esn` Skip Shortestpath((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))[[`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`}[@usn5..{@usn6}]|{1000}[..`5esn`][..9e12]]..][{_usn4:`8esn`[.12e12..]}..] Where {@usn5}[10.12e12..] Optional Match `7esn`=(@usn5 :@usn5{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6})-[usn2?:`1esn`|:`1esn` *..123456789]-(:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[:_usn3]-(`3esn` ),(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 {#usn7:$999 =~false =~{`8esn`}})) Where {#usn7} Starts With .1e-1 Union Create Unique _usn4=(((`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]}))) Unwind Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) As @usn6"),
    octest_legacy:ct_string("Unwind Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4}) Contains (:`2esn`:`4esn`{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``) Contains {@usn6:10.12e12 Contains .9e0,`3esn`:`6esn` =~999 =~$999} As `2esn` Union All Optional Match Shortestpath(((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})))),_usn3=Allshortestpaths((((`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999})<-[``?:@usn5|:#usn7 *..00{#usn8:$`8esn`[...1e-1]}]->(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]})))) Using Index `3esn`:`8esn`(`5esn`) Where .12e12 Ends With 07 Ends With 3.9e-1 Foreach(`8esn` In 2.9e1 In {``}| Create Shortestpath(((`7esn` {@usn5:Count ( * )[_usn4..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))) Unwind Allshortestpaths(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0}))[Reduce(@usn6=10.12e12 Starts With $`4esn` Starts With 0e0,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$1000 Contains $123456789 Contains #usn8)..Case 7[..123456789][..true] When $1000[..0e-0][..010] Then 999 Starts With 7.0e-0 Starts With true End][[`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]]..Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When 0.12[Count ( * )..Count ( * )][$999..`5esn`] Then $123456789[..$999][..`6esn`] Else 7[{`4esn`}..] End] As @usn6)"),
    octest_legacy:ct_string("Foreach(`2esn` In [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01|_usn4 Ends With {`8esn`} Ends With usn2][Any(usn1 In $@usn6 Is Null Is Null Where `3esn` Is Null)..]| Unwind .12e12[01..{1000}][8.1e1..Count ( * )] As `2esn` With  4.9e12[{_usn4}..],{`5esn`} Ends With $`7esn` Ends With {@usn5} Skip {999}[..`6esn`]) Optional Match _usn4=(((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))) Using Scan `3esn`:`` Where $`5esn` =~Count(*) =~1.9e0 Union All Remove #usn7(Distinct \"d_str\" Is Not Null Is Not Null,$`6esn`[$_usn3..{1000}])._usn3!.#usn7?,[usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $12 Is Null Is Null].``.`3esn`? Remove Case #usn8[\"d_str\"..usn2] When $`5esn`[$_usn3][$12] Then 0[$usn1..] End.`6esn`?,Case When `5esn` Contains 0 Contains $12 Then true In 0.0 Else 9e12 Ends With \"d_str\" Ends With 0X7 End._usn4"),
    octest_legacy:ct_string("Create Constraint On(``:`2esn`)Assert Exists({_usn3:12.0[..Count ( * )][..@usn6]}.``!)"),
    octest_legacy:ct_string("Match `3esn`=({`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}),((:#usn7:`8esn`{@usn6:123456789[_usn4..`1esn`][$`6esn`..{@usn6}]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}})) Using Index `5esn`:`4esn`(_usn3) Merge (`1esn` :@usn5{@usn6:$`7esn` Ends With 7.0e-0 Ends With $usn2}) On Create Set `` =$`3esn` =~$123456789 =~`3esn`,Reduce(#usn7=4.9e12 Starts With {``},usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|3.9e-1 Contains $@usn5).`7esn`?.#usn7.`1esn`? =12 Ends With {#usn8} Ends With $_usn4,(_usn3 )<-[:`8esn`|:#usn8 *0X7..0Xa]->(`4esn` :`8esn`{12}).`8esn`!._usn3? =Filter(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Starts With (#usn7 :``)-[`3esn`{`4esn`:12e12[.9e12..07]}]-(`1esn` :``{_usn4:$@usn5 =~{`3esn`}})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]}) Starts With Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12) On Match Set Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999}).`5esn`.#usn8!.`3esn`? =$12 In {usn2},`4esn`(Distinct .9e0[07..][4.9e12..]).`4esn`! =Reduce(#usn7=#usn8[\"d_str\"..usn2],#usn7 In .0e-0 In 12|`` Ends With 1.0 Ends With usn1) Ends With [_usn3 In `8esn`[_usn4] Where _usn4[{``}..{`6esn`}][$7..$_usn3]] Ends With Shortestpath((((:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[`2esn`?:`8esn`|:#usn8]->(`` )<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)))),`5esn`+=7 Starts With 9e-12 Unwind $@usn5 =~{`3esn`} As `5esn` Union All Create Unique (((:`5esn`:`7esn`{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[#usn8:usn2]->({`6esn`:12[@usn6][{`2esn`}]})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(`5esn` {_usn4:0xabc[..Count(*)][..$`5esn`]}))),Shortestpath((_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn2 *7]-(`` )) With Distinct 00[..@usn6] As `6esn`,{`3esn`}[...1e1][..0],Extract(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`|{`2esn`} Contains 0xabc) Is Null Is Null As `2esn` Skip $usn2 Ends With 9e12 Ends With Count ( * ) Limit 0xabc Starts With {`3esn`} Starts With {``} Where 123456789[_usn4..`1esn`][$`6esn`..{@usn6}] Union Return *,None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12)[Case When .12e12 Is Not Null Then {`6esn`} Starts With .12e-12 When .1e-1 Starts With @usn6 Starts With _usn3 Then $`5esn` Ends With 's_str' Ends With $`6esn` End..][Extract(usn1 In $@usn6 Is Null Is Null Where $999 =~false =~{`8esn`}|$@usn6[``..][3.9e-1..])..],@usn6[true..] As _usn4 Order By $`4esn` Ends With .12e12 Ends With 123.654 Desc,Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) =~usn2({`1esn`} Is Null) =~Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 1.9e0 In $@usn6 In $_usn3) Descending Skip $`7esn` Is Null Limit Reduce(`5esn`=$usn1[..$999][..0e0],`2esn` In $@usn5 Is Not Null Is Not Null|``[$#usn7]) Starts With [`6esn` In 010[{`1esn`}..] Where 9e-12[$7..]] Starts With Any(_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12) Optional Match @usn5=(((`1esn` :usn2{`8esn`:12.0[...0e0]})-[`5esn`?:@usn5|:#usn7{`4esn`:9e-12[$7..]}]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]}))),Shortestpath((`6esn` :``)<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})) Where $@usn6 Is Null With Distinct *,Case Count ( * ) =~123456789 =~{@usn5} When 0[10.12e12] Then 12.0 Starts With 00 Else 2.9e1 In {``} End[..Case $`8esn`[0x0][.9e0] When `2esn` Starts With 010 Starts With `` Then {`7esn`} Is Not Null Is Not Null Else $usn1 =~.0e0 =~{`4esn`} End][..Extract(#usn8 In 07[..$`5esn`] Where 07[{@usn5}..]|9e-1 Contains 3.9e-1)] As `4esn`,(`2esn` :usn1)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(_usn4 :_usn3)[Case When 3.9e-1 Ends With {usn1} Ends With {`5esn`} Then 5.9e-12 Is Null Is Null When 9e1 Ends With 9e12 Ends With 0x0 Then .9e0 =~#usn7 Else 0 Starts With `7esn` Starts With 9e0 End..Filter(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null)] As _usn4 Skip 00[$``] Where @usn6 Ends With $`2esn` Ends With 1.0"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:usn1)Assert Exists(Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`6esn`} =~2.12 =~123.654|`6esn` Ends With 1e1 Ends With $#usn7).@usn5!.``!)"),
    octest_legacy:ct_string("Unwind 0.0[..9e1][..2.12] As _usn4 With Distinct Any(`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]) In Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4}) Skip {usn2} Contains {0} Union All With Distinct $_usn3 Contains 1.0 Contains 0.12 As ``,0x0 Ends With #usn8 Ends With .9e-1 As _usn4 Order By All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where _usn4[{``}..{`6esn`}][$7..$_usn3]) In Allshortestpaths((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]}))) In (`1esn` :`2esn`:`4esn`)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[#usn8]->(`2esn` :_usn3{`6esn`:_usn4[{``}..{`6esn`}][$7..$_usn3],`6esn`:$`4esn` Ends With {999}}) Descending Skip Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) Where 9e1 =~$`8esn` =~10.12e12 Remove Filter(`6esn` In 010[{`1esn`}..] Where Count(*) Starts With {usn2} Starts With `2esn`).`4esn`?,Case {`6esn`}[@usn5..{@usn6}] When _usn4 Ends With {`8esn`} Ends With usn2 Then $`8esn` Is Not Null Is Not Null When $999 =~0e0 =~0X7 Then $`7esn` Starts With 's_str' End.@usn5?.`7esn`!"),
    octest_legacy:ct_string("Optional Match (((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(`2esn` :_usn3)<-[_usn3?{``:{1000} Starts With {`1esn`}}]->(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))) Using Scan #usn8:`1esn` Using Scan #usn7:`4esn` Where `4esn` Ends With 9e12 Ends With {`5esn`} Merge `7esn`=Shortestpath(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) Foreach(#usn7 In 0.12[{@usn6}..{#usn7}]| With  *,Case 9e1 In $1000 When 999 Starts With 7.0e-0 Starts With true Then {usn2}[{999}..][9e12..] End[Case .9e-1 Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] Else .1e1 Is Not Null Is Not Null End..][Any(`1esn` In $12 In {usn2} Where @usn6[true..])..] As usn2 Order By {`7esn`} =~\"d_str\" =~{``} Desc,`2esn` In .9e0 In `` Ascending,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) Desc Skip 10.12e12 Contains .9e0 Limit Count(*)[{12}..{#usn8}]) Union Foreach(`8esn` In None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Contains (`8esn` :@usn6:_usn3{_usn4:{#usn7} =~$@usn6 =~$7})<-[`1esn`? *0{usn2:.9e12[6.0e0..][@usn5..]}]->(usn2 :@usn6:_usn3)-[usn1:#usn7|:@usn5 *999..123456789]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})| Unwind $`1esn` =~`8esn` As @usn5) Load Csv With Headers From ({`4esn`:#usn8[\"d_str\"..usn2],`1esn`:12.0[..Count ( * )][..@usn6]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ) =~Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End =~{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} As #usn7  Start `7esn`=Node:#usn7(usn1={`6esn`}) Where false[..usn2][..999] Union All With Distinct [`1esn` In $12 In {usn2} Where 12e-12 Starts With $`7esn`][{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6}..] As `5esn`,{`3esn`}[..{`4esn`}][..usn2] As #usn8 Skip Case When .9e1 In .1e-1 Then $7 =~01234567 =~12.0 When {`8esn`} Is Not Null Is Not Null Then $12 =~4.9e12 Else {#usn7}[.12e-12] End[..Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`}))] Limit #usn7[123.654][{12}] Foreach(usn2 In {usn1:12[..$`5esn`]}[None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..])]| Optional Match Allshortestpaths(((:`6esn`{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}}))),(((usn1 :@usn6:_usn3)<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->(:usn1)<-[:``|:`7esn`{@usn6:{#usn8}[..@usn5],@usn6:$1000 Contains $123456789 Contains #usn8}]->(`1esn` :@usn6:_usn3{#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12}))) Create Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))),@usn6=((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})))"),
    octest_legacy:ct_string("Match @usn6=((({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(@usn6 :@usn5)-[`2esn`? *7{`5esn`:false[..usn2][..999]}]-(`4esn` :@usn6:_usn3))),(#usn7 :`6esn`{usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[`2esn`?:``|:`7esn` *1000..]-(:_usn3{@usn5:`2esn`[`7esn`][1000]}) Using Scan `3esn`:_usn3 Using Index `6esn`:`8esn`(`2esn`) Union Return Distinct .0e0[{#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]}][All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e0 Ends With $0)],$123456789[{usn1}][.12e-12] As `3esn`,Reduce(`2esn`=$@usn5[``..],`7esn` In 0.12 Is Not Null|$`4esn` Is Not Null) =~Any(_usn3 In `8esn`[_usn4] Where {`6esn`} In {_usn4} In $12) =~Reduce(`1esn`=false =~{`8esn`} =~00,`2esn` In $@usn5 Is Not Null Is Not Null|`1esn`[{@usn5}..][{_usn4}..]) As @usn6 Limit {``} Is Null Is Null Remove Extract(usn2 In .12e-12 Ends With `2esn` Where `3esn` Contains 01 Contains 01|.9e0[$#usn8][Count ( * )]).`4esn`,Reduce(#usn8={12} Contains `8esn` Contains @usn5,usn1 In \"d_str\" Contains {@usn6}|$12 =~4.9e12).``?,Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}}))).`2esn`?.`` Detach Delete Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] Union All Start `1esn`=Rel:`5esn`(@usn5=\"d_str\") ,`5esn`=Node:@usn6(#usn8='s_str') With Distinct 00[..@usn6] As `6esn`,.0e0[$usn1][0] As ``,$`8esn` Contains {@usn6} Contains `7esn` Skip {usn1:$1000 Is Null}[Shortestpath((:usn1$1000))..][Reduce(``={`4esn`}[00..],usn1 In {#usn7} =~.12e12 =~9e0|999 Starts With 7.0e-0 Starts With true)..] Where `3esn` Starts With 9.1e-1 Starts With .9e-1 Match ((`4esn` :`6esn`)<-[{``:7.0e-0 Is Not Null}]->(:#usn7:`8esn`{@usn5:{0} In {`1esn`}})-[``?{``:{#usn7} =~$@usn6 =~$7}]-(`3esn` :@usn5)) Using Join On #usn8"),
    octest_legacy:ct_string("Merge `1esn`=(((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))) On Match Set `6esn` =(`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Is Not Null Is Not Null On Match Set `2esn` =7[{`4esn`}..],usn2 =$@usn5 Contains _usn3"),
    octest_legacy:ct_string("Drop Constraint On()-[`4esn`:usn2]-()Assert Exists([_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|{`3esn`}[...1e1][..0]].usn2!._usn3!._usn3!)"),
    octest_legacy:ct_string("Merge `4esn`=((_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[`3esn`?:usn2]-(:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})) On Create Set Case $`8esn` Is Not Null Is Not Null When #usn8[\"d_str\"..usn2] Then .12e-12 Is Null End.`1esn`?.`7esn`?.usn2? =Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End[(`4esn` :#usn7:`8esn`)-[_usn3?:@usn6|:`4esn`{_usn4:$12 Ends With 12.0 Ends With $`4esn`}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[{_usn3:$@usn6 Starts With 0xabc Starts With {`7esn`},`1esn`:_usn4['s_str'][8.1e1]}]->(#usn7 :usn2)..][Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1)..] Remove Case $`8esn` Is Not Null Is Not Null When #usn8[\"d_str\"..usn2] Then .12e-12 Is Null End.@usn6? Union Merge ((:`1esn`:``{`8esn`:5.9e-12[0x0..]})) On Create Set #usn7 =usn1 =~false =~{999},Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}).`2esn`! =9e12 Is Null Is Null,`2esn`+=Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`}) Ends With Shortestpath(((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))) Ends With Reduce(_usn3=$`4esn` Is Null Is Null,usn2 In $`5esn`[{`4esn`}][{0}]|9e-1 Contains 3.9e-1) On Create Set `3esn` =$7[.1e-1..{@usn6}][$7..{`1esn`}],None(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {0}[.1e-1..][_usn4..]).usn2 =$`7esn` In $`4esn`,usn1+=$`4esn` Ends With {999}"),
    octest_legacy:ct_string("Return *,\"d_str\" In usn2 In $`7esn` As `5esn`,12[11.12e-12..][`4esn`..] Order By Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Is Null Ascending,'s_str'[$`8esn`..$999] Descending,$`2esn`[`8esn`..] Descending Remove Case 2.9e1 Ends With `5esn` Ends With 1000 When @usn6[999][1000] Then .0e0 =~0 =~.0e0 When {`4esn`} In 1000 In {@usn5} Then 123456789[_usn4..`1esn`][$`6esn`..{@usn6}] Else .12e12 Is Not Null End.`2esn`? Delete (usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` )<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains ({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[:_usn3]->(`1esn` :`2esn`:`4esn`)-[usn1?:`3esn`|`3esn`{usn2:01[`4esn`..]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Contains ``(Distinct 9e12[..usn2][.._usn3],Count ( * )[_usn4..])"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:`2esn`)Assert All(`7esn` In 0.12 Is Not Null Where 4.9e12 Starts With {``}).`7esn`? Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From 1e-1 =~$`7esn` =~1e1 As @usn5 Fieldterminator 's_str' With  None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0) As usn2 Skip Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])[..(#usn7 {`5esn`:.12e12 Is Not Null,@usn5:.12e12 Is Not Null})-[#usn8:`7esn`|usn1 *0X7..0Xa{usn1:_usn4 Is Not Null Is Not Null}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[ *999..123456789{`2esn`:_usn3 =~{7} =~123.654}]->(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})][..Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`)] Where 0Xa In 1.0 In $@usn5 Match `2esn`=(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1}),``=Shortestpath(((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))) Where 7[{`4esn`}..]"),
    octest_legacy:ct_string("Delete (`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[`3esn` *..0x0]-(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})<-[?:_usn4|:`1esn` *01]-(`4esn` {`3esn`:{`7esn`} =~\"d_str\" =~{``},`3esn`:{`1esn`} Contains 1.0 Contains 4.9e12}) =~Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 9e12 Is Null Is Null) =~(:@usn5{#usn7:Null,`5esn`:{@usn5} Ends With 0Xa Ends With .12e-12})-[:`3esn`|`3esn` *1000..]-(@usn6 )"),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv With Headers From (@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[`8esn`?:_usn3 *12{usn1:#usn7[.9e0..`3esn`][{`6esn`}..1000],_usn4:$usn2 In #usn7 In #usn7}]-(_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(usn2 :`2esn`:`4esn`)[..Reduce(`2esn`={1000}[..{usn1}][..1e-1],_usn3 In `8esn`[_usn4]|Count(*)[$7])][..{_usn3}] As `2esn` "),
    octest_legacy:ct_string("Optional Match ((:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0})<-[*..{`4esn`:{1000} Starts With 10.12e12 Starts With .0e-0,`2esn`:$#usn7 Ends With {`5esn`} Ends With 01}]-({`3esn`:{`6esn`}[@usn5..{@usn6}],_usn3:@usn6 Starts With #usn7})) Create Shortestpath((#usn8 :`5esn`:`7esn`{usn2})),((usn1 :@usn6:_usn3)-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})) Union Detach Delete [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,00[..@usn6] Load Csv With Headers From #usn8[$`2esn`] As `6esn`  With Distinct 999 Ends With {#usn8},9e1[..@usn5][..$`5esn`],$@usn6[...9e-1] As `2esn` Limit $123456789 Is Not Null Is Not Null Where $7 Union Load Csv From `4esn`[..7][..$usn2] As _usn4  Return Distinct Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] As `7esn`,$#usn8[$0..`3esn`][1e-1..$7],_usn3 =~{7} =~123.654 As @usn6 Order By {`8esn`}[.0e0..][999..] Asc,#usn8(Distinct 12e12[{`4esn`}..`4esn`][999..{@usn6}])[Any(`6esn` In 010[{`1esn`}..] Where {`3esn`}[_usn4][2.9e1])..{``:9e1[0.0]}] Descending Skip Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 01 =~07)[Case 9e-12 Ends With 9e1 Ends With 4.9e12 When `3esn` =~$#usn7 Then $@usn5 Starts With #usn7 When {`4esn`}[{`3esn`}][$`2esn`] Then #usn7[$`8esn`][{`3esn`}] Else 9e0[`4esn`..$_usn4][9.1e-1..0e0] End][[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]] Return Distinct None(`1esn` In $12 In {usn2})[..Reduce(usn2=.9e0 In 8.1e1,`3esn` In 8.1e1 Contains .9e-1 Contains false|$_usn3 Is Not Null)] As @usn5 Skip $`3esn` =~$123456789 =~`3esn`"),
    octest_legacy:ct_string("Create ((:`8esn`{`2esn`:0[..{#usn7}][..$_usn3],#usn8:.9e-1 Is Null Is Null})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]-(`7esn` :#usn8:@usn6{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[usn2?:`2esn`|`5esn`{``:{#usn7} =~$@usn6 =~$7}]->(:`1esn`:``{`1esn`:{@usn5}[10.12e12..]})),usn2=Shortestpath((_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn2 *7]-(`` )) Union All Delete {#usn7} Is Not Null Create _usn4=((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})),`4esn`=(({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)) Match usn2=((({`5esn`:`1esn` In 010 In 1e-1})-[_usn3:`6esn`]-(`5esn` :#usn8:@usn6{``:Count(*) Starts With {usn2} Starts With `2esn`,`1esn`:12e12[{`4esn`}..`4esn`][999..{@usn6}]})<-[:``|:`7esn`{@usn6:{#usn8}[..@usn5],@usn6:$1000 Contains $123456789 Contains #usn8}]->(`1esn` :@usn6:_usn3{#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12}))) Where @usn5[{`1esn`}..][Count ( * )..]"),
    octest_legacy:ct_string("With Distinct *,1.9e0[$`4esn`],All(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`]) Ends With Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e-12[9e1]) Merge ((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})) On Create Set (`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[? *..123456789{@usn5:{usn2} Ends With {@usn6} Ends With 1000}]->(:`7esn`{`5esn`:{`8esn`} Starts With .9e-1 Starts With 1000})._usn3._usn3?.`6esn`! =(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[?:`6esn` *0]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}) Is Not Null,#usn8 =0[4.9e12] Optional Match `7esn`=Shortestpath(((usn1 :_usn4:`2esn`)<-[`3esn`?:@usn5|:#usn7]->({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[?{#usn7:`2esn`,`7esn`:$@usn5 Is Not Null Is Not Null}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))),Allshortestpaths((:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[_usn3?:`5esn`*..]-(:_usn4:`2esn`{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]})) Using Join On `5esn`,usn1,`7esn` Using Scan #usn8:`1esn` Where 8.1e1[..9.1e-1][...9e1] Union All Return Distinct false Contains {`7esn`},{0} Is Not Null As `` Order By [usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`|{#usn8}[..@usn5]][Case When .9e1 In {#usn7} In .9e-12 Then #usn7 Is Null Is Null End..] Asc,Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] Asc,(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})-[`3esn`?:`1esn`|:`1esn`]-({_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})[{@usn5:07[..$`5esn`]}..][$#usn8..] Descending Skip $7[.1e-1..{@usn6}][$7..{`1esn`}] Limit {``} Is Null Is Null Merge #usn8=Allshortestpaths((usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) On Match Set {#usn7:.9e1 In .1e-1,_usn4:{12}}.`8esn`!.@usn6!._usn4 =$`5esn` In $12 In `2esn`,`8esn` =Case When $123456789 Is Not Null Is Not Null Then $`5esn` Is Not Null End Ends With {_usn3:$12 Is Not Null Is Not Null} Ends With [`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 6.0e0 =~12.0 =~9e1|@usn6 Ends With $`2esn` Ends With 1.0] Start @usn5=Relationship:_usn3({`7esn`}) Where `5esn` Ends With Count(*)"),
    octest_legacy:ct_string("Start `3esn`=Relationship:usn2({usn2}) ,`1esn`=Rel:`5esn`(@usn5=\"d_str\")Where {`8esn`} Contains $@usn5 Foreach(`8esn` In $`5esn` Starts With 4.9e12 Starts With 0e-0| Create Unique `6esn`=(({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[_usn4? *999..123456789{@usn6:$`4esn` Ends With .12e12 Ends With 123.654}]->(#usn8 {usn2:$0 Ends With 9e-12 Ends With $_usn4,`5esn`:0e-0[{@usn6}]})-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]-(`1esn` :_usn4:`2esn`))) Foreach(#usn8 In 9e12 Is Null| Unwind Allshortestpaths(((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}))) Is Null Is Null As usn2 Remove Filter(@usn6 In 9e12[..usn2][.._usn3] Where 123.654 Ends With {1000} Ends With 9e12).`3esn`?.`7esn`?,Allshortestpaths((((`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})-[`8esn`:`4esn`|:`2esn`]->(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})))).`3esn`) Union All Create @usn5=Shortestpath(((:#usn8:@usn6{@usn6:$_usn4 Ends With {#usn8},_usn4:0e0[12.0][{#usn7}]})-[:#usn8|:``*{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]->(:``{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Start ``=Node:`7esn`({#usn7}) Where 01234567[1000..][$`8esn`..]"),
    octest_legacy:ct_string("With Distinct 9e1 Ends With 9e12 Ends With 0x0 As #usn8,``(Distinct $999[usn1..0e-0]) Ends With {`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]} Ends With {`1esn`:$@usn5 Contains _usn3,usn2:9e12 Ends With \"d_str\" Ends With 0X7} Order By 0e0 Is Null Is Null Asc,usn1 =~false =~{999} Desc Where Count ( * )[9e0..$``] Create Unique Shortestpath((`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})),((_usn3 :`7esn`{@usn6:$`4esn` Ends With .12e12 Ends With 123.654})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)<-[#usn7? *0xabc..12]-(:`3esn`)) Unwind 12e-12 Starts With $`7esn` As usn2"),
    octest_legacy:ct_string("Foreach(`2esn` In .1e-1[..$_usn3][..0]| Remove All(usn1 In $@usn6 Is Null Is Null Where _usn4 Is Not Null Is Not Null).`7esn`!.@usn5?) Union Remove Extract(usn1 In \"d_str\" Contains {@usn6} Where $`` =~.1e-1|$`3esn` =~0x0).@usn6.``!,Case When .9e1 In .1e-1 Then $7 =~01234567 =~12.0 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else $`7esn` In $@usn5 End.#usn8,(`2esn` {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`` $999)-[#usn8?:`8esn`|:#usn8 *999..123456789]->(`3esn` :usn2).#usn8.@usn5? Foreach(`5esn` In Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}]| Load Csv From 7 In 1e1 In {``} As `2esn` Fieldterminator \"d_str\") Load Csv From false[9e12] As `2esn` "),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`2esn` :_usn3{usn1:5.9e-12 Is Null Is Null})<-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]->(:`5esn`:`7esn`{`4esn`:2.9e1[{`2esn`}]})-[ *..123456789{@usn5:$`8esn`}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})),((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})) Create Unique usn1=((`` :`7esn`)) Foreach(@usn5 In Shortestpath(((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1)))[..Any(#usn7 In .0e-0 In 12)]| Load Csv From [usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0|4.9e12 Is Not Null Is Not Null] =~Case {_usn3} In $#usn8 In $12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else 0[..{0}][..true] End =~Case Count ( * )[`5esn`..\"d_str\"][01234567..{1000}] When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else $_usn3 Starts With 010 End As #usn7 ) Union All Merge `5esn`=((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})) On Match Set (:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12}).`3esn`! =0x0[{`6esn`}..],_usn3+=Extract(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`|.9e-12[.12e12..][0Xa..])[{#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]}..],`4esn` ={`8esn`}[.0e0..][999..] Create Unique Shortestpath((@usn6 :@usn5)),@usn6=(({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)) Create (_usn4 :`6esn`)<-[`2esn` *7]->(`4esn` :@usn5),_usn3=(_usn3 :`1esn`:``{`8esn`:{#usn8} In {12} In .9e12})<-[?:`3esn`|`3esn` *999..123456789{_usn3:$`4esn`[$@usn6...12e12]}]->(usn1 {#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]})"),
    octest_legacy:ct_string("Match ``=(#usn7 {#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})<-[@usn5?:#usn7|:@usn5]->(:`8esn`{`2esn`:0[..{#usn7}][..$_usn3],#usn8:.9e-1 Is Null Is Null})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]}) Using Join On `4esn`,`5esn`,@usn6 Using Index usn2:`1esn`(`3esn`) Detach Delete [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,00[..@usn6] Union Load Csv From 12e12[usn2..$`6esn`] As usn2  Foreach(usn2 In (`6esn` $_usn3)<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 :#usn7:`8esn`)[Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End]| Start _usn4=Relationship( {#usn8}) ,`4esn`=Node:usn2(usn1={_usn3}))"),
    octest_legacy:ct_string("Create Unique (((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})-[`2esn`?:@usn6|:`4esn` *010..0{`4esn`:Null[$`3esn`..][`1esn`..],_usn3:6.0e0[$#usn7..$1000]}]-(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]}))) Unwind .9e12 Is Not Null Is Not Null As _usn3 Start usn1=Node:`2esn`({_usn3}) Where {usn1} Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(usn1:`6esn`)Assert Exists(Reduce(`2esn`=$1000 Contains $123456789 Contains #usn8,`` In `7esn` =~#usn8 =~\"d_str\"|_usn4 Is Not Null Is Not Null).`4esn`)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:#usn8)Assert Exists(Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[10.12e12]|$usn2[..$999][..#usn8]).`6esn`!.#usn7!)"),
    octest_legacy:ct_string("Merge (:``)-[`3esn`?:`1esn`|:`1esn`]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12}) On Create Set `8esn` =[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]] On Match Set @usn5:@usn5 Union All Create Unique ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})),``=Shortestpath((((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})-[?:usn2{_usn4:$_usn4[..$999],#usn8:Null[#usn7..][9.1e-1..]}]->(`2esn` {usn1:true In 0.0,@usn5:{`1esn`} Is Null})))) Start @usn5=Rel:`8esn`(usn1={#usn7}) ,``=Node:`7esn`({#usn7})Where 00[$``] Load Csv With Headers From Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null)[{`1esn`:.9e-12[usn2]}][Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12)] As usn1  Union All Create `4esn`=(({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)) Load Csv From $`8esn` Starts With {`7esn`} As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start @usn6=Relationship:`5esn`({0}) "),
    octest_legacy:ct_string("Create Constraint On(`3esn`:`6esn`)Assert _usn3(Distinct .12e12 Is Not Null,.9e0[07..][4.9e12..]).`2esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[`2esn`:`3esn`]->()Assert Exists(Reduce(#usn7=`1esn`[{@usn5}..][{_usn4}..],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|{usn2} Is Not Null Is Not Null).usn1)"),
    octest_legacy:ct_string("Drop Constraint On()<-[#usn7:`6esn`]-()Assert Exists(usn1(Distinct 6.0e0[$#usn7..$1000],_usn4 Is Not Null Is Not Null).``?)"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`1esn`)Assert Single(_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null).`4esn`? Is Unique"),
    octest_legacy:ct_string("Delete 2.9e1 Ends With `5esn` Ends With 1000"),
    octest_legacy:ct_string("Create Constraint On()<-[#usn8:`1esn`]-()Assert Exists({@usn6:$`` =~.1e-1}.usn1?)"),
    octest_legacy:ct_string("Delete .1e-1[2.9e1..][$`7esn`..],$1000[..0e-0][..010] Create (#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null}) Unwind Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn`) Contains (`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2) Contains Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where Null In {7}) As `8esn` Union All Return Distinct usn2[12e-12..{`8esn`}][.12e12..{123456789}] As #usn8,Case When $`6esn`[0..{@usn6}][@usn5..1000] Then .0e-0[..01234567] When {123456789} Starts With $_usn4 Starts With 0x0 Then 9e0[`3esn`][0] End[{`3esn`:false Starts With 0 Starts With 2.9e1,@usn6:9e-12 Ends With {1000}}..{`8esn`:_usn3[{#usn7}]}] As usn1 Skip Allshortestpaths((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))[usn1..] Limit usn2 Ends With $123456789 Ends With {999} Load Csv With Headers From [`6esn` In 010[{`1esn`}..] Where $`4esn` Is Null Is Null][..Case $`8esn`[0x0][.9e0] When `2esn` Starts With 010 Starts With `` Then {`7esn`} Is Not Null Is Not Null Else $usn1 =~.0e0 =~{`4esn`} End][..Case When $`6esn` =~$#usn7 =~$`4esn` Then 2.9e1[2.12..1.9e0] When {`3esn`}[#usn7] Then 2.12[`4esn`][.9e-1] End] As usn2  Merge ({`1esn`:$`8esn` Is Null Is Null,`1esn`:0.12 =~2.9e1 =~9e1}) On Create Set _usn3+=Count ( * ) =~123456789 =~{@usn5} Union All Return Distinct *,{`3esn`}[#usn7] As _usn3 Skip {usn2}[..{@usn6}][..@usn5] Limit All(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]) Delete Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[..None(#usn7 In .0e-0 In 12 Where 0xabc =~123456789)][..11.12e-12],12e12[{`4esn`}..`4esn`][999..{@usn6}] Detach Delete .9e12 Ends With #usn8 Ends With {#usn7},2.9e1[2.12..1.9e0],.0e-0 In 12"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv With Headers From Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000 As ``  Start `5esn`=Node:usn1(\"d_str\") Where $usn2 In #usn7 In #usn7 Remove Case $999 Is Not Null When 0e0 =~{12} =~{1000} Then $#usn8[$0..`3esn`][1e-1..$7] When `3esn` Contains 01 Contains 01 Then 9e-1 Contains 3.9e-1 Else ``[$#usn7] End.`7esn`!,_usn4:@usn5"),
    octest_legacy:ct_string("Merge usn2=(@usn6 {usn1:0Xa In 1.0 In $@usn5})-[#usn8?:`8esn`|:#usn8 *999..123456789]->(`3esn` :usn2) Start ``=Node( {#usn7})  With  1.0 In {usn1} As `5esn` Limit Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12) Is Null"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From Filter(usn1 In $@usn6 Is Null Is Null Where {`3esn`}[#usn7]) Is Null Is Null As _usn4 Fieldterminator 's_str' Delete `4esn` =~usn1 =~Count(*) Optional Match Shortestpath((@usn6 :@usn5)) Where `3esn` Is Null Is Null"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:@usn6)Assert Exists(Any(`1esn` In $12 In {usn2} Where {usn1} Is Not Null).@usn6?.usn2?)"),
    octest_legacy:ct_string("Create Constraint On(`4esn`:`3esn`)Assert Exists(Any(`` In `7esn` =~#usn8 =~\"d_str\" Where `6esn` Ends With 1e1 Ends With $#usn7).`8esn`!.`2esn`!.`1esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:_usn4)Assert (`` :``)-[?:`6esn` *0]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]})<-[`4esn`?]-(:usn1{#usn8:2.9e1[{`2esn`}]}).`3esn`!.@usn6!.@usn6! Is Unique"),
    octest_legacy:ct_string("Unwind @usn5[#usn7..] As usn1 With Distinct 0Xa Starts With 9e0 Starts With Count(*) Skip \"d_str\" Is Not Null Is Not Null Limit {`4esn`}[{`3esn`}][$`2esn`] Where 3.9e-1[{@usn6}..][01234567..] With  $_usn3 Contains 1.0 Contains 0.12 As ``,0x0 Ends With #usn8 Ends With .9e-1 As _usn4 Order By 01234567 Ends With .0e0 Ends With 12e12 Ascending,usn1(Distinct {usn1}[7.0e-0..][3.9e-1..]) Asc,.0e-0[..01234567] Descending Union Optional Match #usn7=Shortestpath(({`5esn`:`1esn` In 010 In 1e-1})<-[?:@usn6|:`4esn`{`2esn`:$12[10.12e12][.1e1],#usn7:9e0[..{#usn7}][..`4esn`]}]-(`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})) Using Scan `6esn`:#usn8 Using Scan #usn7:`8esn` Remove Allshortestpaths((_usn3 {#usn7:$999 =~false =~{`8esn`}})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})).#usn8,Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0).`8esn`! Load Csv With Headers From usn2[12e-12..{`8esn`}][.12e12..{123456789}] As _usn3 Fieldterminator 's_str' Union With  12e-12 Starts With $`7esn` As `5esn`,10.12e12[usn2] As _usn4,$999 Ends With `2esn` Ends With 12.0 As #usn8 Order By #usn8(Distinct 12e12[{`4esn`}..`4esn`][999..{@usn6}])[Any(`6esn` In 010[{`1esn`}..] Where {`3esn`}[_usn4][2.9e1])..{``:9e1[0.0]}] Descending,{`8esn`}[..`5esn`][..01] Asc,9e1 Starts With $`8esn` Starts With `3esn` Ascending Return Distinct *,9e1[12] As usn1 Limit 9.1e-1[..Null][..#usn8]"),
    octest_legacy:ct_string("Create Constraint On()-[`6esn`:``]-()Assert Exists((:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})-[`3esn`? *..07]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]})._usn4?)"),
    octest_legacy:ct_string("Create Constraint On(_usn3:`1esn`)Assert {@usn6:$_usn3 Starts With 010}.`4esn` Is Unique"),
    octest_legacy:ct_string("Start `2esn`=Rel:`6esn`(`4esn`=\"d_str\") ,`8esn`=Relationship:`8esn`(#usn7='s_str')Where 0e-0 In 0X0123456789ABCDEF In `3esn` Create _usn4=((:@usn5{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[?:_usn4|:`1esn` *..07{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null})) Match `7esn`=Allshortestpaths((`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})<-[_usn3? *..123456789{`6esn`:.0e-0[..``][..$7],usn2:{usn2} Ends With {@usn6} Ends With 1000}]-(`8esn` :`4esn`:usn2{@usn6:$#usn7 Starts With $123456789})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(#usn8 :_usn4:`2esn`{`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})) Using Index ``:@usn5(usn1) Using Scan `1esn`:_usn3"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`5esn`)Assert Case #usn7 Is Null Is Null When $`8esn` Is Null Is Null Then _usn4[{``}..{`6esn`}][$7..$_usn3] When {`3esn`}[999..$`4esn`] Then \"d_str\" In usn2 In $`7esn` End.``? Is Unique"),
    octest_legacy:ct_string("Detach Delete {`1esn`} Contains 1.0 Contains 4.9e12,{999}[..`6esn`],{`3esn`} =~$`` =~$`8esn` Union Merge `8esn`=Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})) On Match Set Filter(usn2 In $`5esn`[{`4esn`}][{0}] Where {0}[.1e-1..][_usn4..]).`6esn`.usn1.`7esn`? =0xabc Starts With `2esn` Starts With 10.12e12,`8esn` =[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]] Merge (#usn7 :@usn5)-[:`8esn`|:#usn8 *0X7..0Xa]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(_usn4 :`5esn`:`7esn`{_usn4:$_usn3[.0e-0..999]}) On Create Set usn2+=Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null),#usn8 =None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) Create (#usn7 :`6esn`{usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[`2esn`?:``|:`7esn` *1000..]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})"),
    octest_legacy:ct_string("Merge Allshortestpaths((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})) Merge `7esn`=Shortestpath(((`6esn` :``)<-[`8esn`*]-(#usn8 )-[`3esn`?:`1esn`|:`1esn`]-(@usn6 :`4esn`:usn2))) On Match Set Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where .0e-0[..``][..$7]).``!.`8esn`? ={1000} Starts With {`1esn`},``:`1esn`:``,(#usn7 {usn1:2.12[{12}]})-[:usn1|usn2]->(`8esn` :`5esn`:`7esn`).@usn6! =false =~{`8esn`} =~00 On Match Set `7esn`+=Reduce(_usn3=5.9e-12 Is Null Is Null,_usn3 In `8esn`[_usn4]|2.9e1[Count ( * )..]) Is Null,#usn8 =0e0 Ends With .9e0 Ends With 01234567 Unwind `6esn`[0X0123456789ABCDEF..][`8esn`..] As _usn4"),
    octest_legacy:ct_string("Foreach(`8esn` In $`5esn` Starts With 4.9e12 Starts With 0e-0| Create Unique `6esn`=(({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[_usn4? *999..123456789{@usn6:$`4esn` Ends With .12e12 Ends With 123.654}]->(#usn8 {usn2:$0 Ends With 9e-12 Ends With $_usn4,`5esn`:0e-0[{@usn6}]})-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]-(`1esn` :_usn4:`2esn`))) Remove Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0).`8esn`!,Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where .9e0 Ends With $0).``? Union Create ``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))),``=Allshortestpaths(((@usn6 :@usn5))) Create Unique (((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))),`4esn`=(((`5esn` {``:$_usn3 Starts With 010,`1esn`:$`8esn` =~{`6esn`} =~12})-[?:_usn3]->(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})-[:`2esn`|`5esn` *01]-(@usn6 :usn1{`2esn`:$`6esn` Starts With 0.0})))"),
    octest_legacy:ct_string("Delete $7 In 1.0 In 01234567 Foreach(#usn8 In usn2 Starts With $usn1 Starts With 10.12e12| With  {1000} Starts With 10.12e12 Starts With .0e-0 As `8esn`,Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) As _usn4 Skip Count ( * ) Starts With 0.12 Limit Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Create ``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0})))) Create Unique Shortestpath((:`7esn`{#usn7:$999 =~false =~{`8esn`}})-[:`6esn` *12{#usn7:`3esn` =~$#usn7,`8esn`:0e-0[{@usn6}]}]->(@usn5 :@usn6:_usn3)<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]-(usn2 :`5esn`:`7esn`{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})),`6esn`=((:#usn7:`8esn`{usn2:`1esn` =~{12} =~{999}})) Union With  *,Extract(#usn8 In 07[..$`5esn`] Where $usn2[..$999][..#usn8]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )])[Case {#usn7}[.12e-12] When $`4esn`[$@usn6...12e12] Then .12e-12[@usn6..'s_str'] Else .12e-12 Starts With .12e-12 End..(`` :``)-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})][Reduce(`5esn`=Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|{usn2}[9e-1])..All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}])] As `8esn` Limit $`5esn`[..{0}][..7.0e-0]"),
    octest_legacy:ct_string("Optional Match #usn7=((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})) Using Join On #usn8 Using Join On _usn4"),
    octest_legacy:ct_string("Create Constraint On(_usn4:usn1)Assert Exists(Any(#usn8 In 07[..$`5esn`] Where .9e0[07..][4.9e12..]).`8esn`.`6esn`.`5esn`?)"),
    octest_legacy:ct_string("Return Distinct *,Filter(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn` =~999 =~$999) In All(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]) In Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`) As `1esn` Order By 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] Asc Skip $_usn3 Contains 1.0 Contains 0.12 Union All Foreach(@usn5 In 01 Starts With 12 Starts With $`2esn`| Load Csv With Headers From $`8esn` Starts With {`7esn`} As #usn8 Fieldterminator \"d_str\") Start usn1=Rel:_usn4(@usn5={`4esn`}) ,`1esn`=Rel:`5esn`(@usn5=\"d_str\")Where @usn6[true..]"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:@usn5)Assert Exists([`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $`4esn`[usn2..]].`8esn`._usn4!)"),
    octest_legacy:ct_string("Create Constraint On(usn1:`6esn`)Assert Exists([`` In `7esn` =~#usn8 =~\"d_str\" Where $`4esn` In {999}|{1000} Is Null].usn2!)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:#usn8)Assert Exists([_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null|$7].@usn5!.usn2?)"),
    octest_legacy:ct_string("Unwind {`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]} Contains Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 12e12 Ends With `5esn` Ends With .0e0) As usn1 Union All Merge Shortestpath((@usn5 :_usn4:`2esn`{@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})) Union All Delete `1esn`(Distinct) Contains All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 123.654 Ends With {1000} Ends With 9e12) Contains Case $0 Contains $7 When 9e0[`4esn`..$_usn4][9.1e-1..0e0] Then .1e1 Is Not Null Is Not Null When usn2[12e-12..{`8esn`}][.12e12..{123456789}] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else {usn1} In Count ( * ) In 12e12 End,{12} Ends With $`3esn` Ends With 0xabc,{0}[...9e1] Delete {``:$`8esn`[..5.9e-12][..`8esn`]}[[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .9e12[6.0e0..][@usn5..]|2.9e1[2.9e1..][`4esn`..]]..][Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End..],010[...12e-12] With Distinct Count ( * )[`5esn`..\"d_str\"][01234567..{1000}],$`8esn` Contains {@usn6} Contains `7esn`,5.9e-12[..9e0] As #usn8 Order By $`7esn` Contains .12e12 Ascending,Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where {7}[$@usn5..123456789][1e1..1.9e0]) Ends With (`3esn` :_usn3{@usn6:0.12 Is Not Null})-[#usn8:`5esn`]-({`6esn`:12[@usn6][{`2esn`}]}) Desc,$usn1[..$999][..0e0] Ascending Where $`6esn`[$_usn3..{1000}]"),
    octest_legacy:ct_string("Create (@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})<-[#usn7?:_usn3 *999..123456789{@usn5:$12 In {usn2},usn1:5.9e-12 Is Null Is Null}]->(`` {`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654}) Match `6esn`=(:`3esn`{@usn5:9e12[..usn2][.._usn3]}) Using Scan `5esn`:usn1 Using Join On `5esn`,usn1,`7esn` Where $@usn5 Contains _usn3 Load Csv With Headers From #usn7({12} Starts With $`` Starts With 0X0123456789ABCDEF)[Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where .12e-12[9e1])..] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From 12[11.12e-12..][`4esn`..] As @usn6  Union Remove Reduce(`3esn`={0} Is Not Null,`` In `7esn` =~#usn8 =~\"d_str\"|01234567[\"d_str\"..][$`4esn`..])._usn4.@usn6 Delete 2.9e1 Ends With 12e12 Ends With .9e12,{123456789} Contains $0,$12 Is Null Unwind [_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12] As _usn3 Union All Create `5esn`=((`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})-[ *..123456789{@usn5:1e-1[$`4esn`]}]->(#usn7 {usn1:2.12[{12}]})<-[`3esn`?*{`7esn`:.9e12 Contains 0 Contains $0}]->(:@usn5{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]})),Shortestpath((((`4esn` :`3esn`)<-[@usn5?*..]->(:_usn3{_usn3:010[..9e-1][..0X7]})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)))) Return Distinct $`` Ends With #usn7 Ends With _usn3 As _usn3,{@usn6:2.9e1[{`2esn`}],usn1:01 Contains 9e-12 Contains $7} Is Null Is Null As @usn6 Order By `6esn`[..$0][..{7}] Asc,Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null) In `4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`) Ascending,{123456789} =~@usn5 Asc Limit Single(_usn3 In `8esn`[_usn4] Where `3esn` Contains `2esn` Contains {_usn4}) In Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`) In {7} Create Unique Shortestpath(((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]}))),usn2=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})))"),
    octest_legacy:ct_string("Drop Constraint On()-[`4esn`:#usn8]->()Assert Exists(Case When 's_str'[`2esn`][12.0] Then `8esn`[_usn4] Else .12e12 Starts With 5.9e-12 Starts With `4esn` End.`1esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:``)Assert Exists(@usn5(Count ( * ) Starts With 0.12,$123456789).`6esn`?.`6esn`?)"),
    octest_legacy:ct_string("Return Distinct *,$999 =~0e0 =~0X7 As `1esn` Skip {7} Is Not Null Create `6esn`=Shortestpath((((:`6esn`{`3esn`:9e12[..usn2][.._usn3]})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})<-[_usn4 *010..0{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}]-(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})))),Allshortestpaths((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})) With  $usn1 Ends With {`2esn`} Ends With $usn1 Order By 123.654 Ends With {1000} Ends With 9e12 Descending,{`6esn`} Starts With 12e12 Starts With {`2esn`} Descending Union Start `2esn`=Relationship:_usn4(@usn6=\"d_str\") ,``=Node:``(`1esn`=\"d_str\")Where $`6esn`[..01][..{_usn3}] Remove Case usn1 Ends With 11.12e-12 Ends With 5.9e-12 When 01 Ends With .0e0 Ends With 7.0e-0 Then $`7esn` Starts With 's_str' Else true Is Null End.`5esn`!.`5esn`,Reduce(usn1=`7esn`[1.9e0..5.9e-12][9e0..@usn5],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$`` =~$_usn3).#usn7! Foreach(`7esn` In `1esn`[{usn1}..]| Remove None(#usn7 In .0e-0 In 12 Where `8esn`[.12e12..]).`5esn`!,Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0X0123456789ABCDEF Ends With {1000})._usn4?)"),
    octest_legacy:ct_string("Drop Constraint On()<-[_usn4:@usn5]-()Assert Exists([#usn7 In .0e-0 In 12 Where 0xabc[..{usn1}][..\"d_str\"]|0.12 =~`6esn` =~.9e-1]._usn3?.@usn6!)"),
    octest_legacy:ct_string("Create Constraint On()-[`2esn`:`1esn`]->()Assert Exists(Case When {`3esn`}[01234567][{#usn7}] Then $#usn8[$0..`3esn`][1e-1..$7] When #usn8[$`2esn`] Then 3.9e-1 Starts With .9e0 Starts With {#usn7} End.``)"),
    octest_legacy:ct_string("Match #usn8=Allshortestpaths((usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[`3esn`:#usn8|:``{``:$``[9e0..][5.9e-12..],``:$#usn7 Contains 3.9e-1}]->(:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})) Using Index `7esn`:``(`8esn`) Where {#usn7} =~$@usn6 =~$7 Unwind Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1) Starts With Case 7.0e-0[$`6esn`..] When \"d_str\"[0x0..{@usn6}][$@usn5..0] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else $`5esn`[{`4esn`}][{0}] End Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`) As @usn6 Load Csv From #usn8 =~{@usn5} As #usn8 Fieldterminator 's_str' Union All Load Csv With Headers From Shortestpath(((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(_usn3 :usn1)))[..{_usn4:.9e-1 Ends With .0e-0 Ends With {_usn3},_usn4:9e1 Ends With 9e12 Ends With 0x0}][..Reduce(#usn8=`8esn`[_usn4],`1esn` In $12 In {usn2}|$`4esn` Is Not Null)] As `1esn` Fieldterminator 's_str' Union Merge (((@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[`7esn`?:`2esn`|`5esn` *0]->({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000}))) Start _usn3=Node( {123456789}) Where {`3esn`}[$#usn8..] Delete $7 =~01234567 =~12.0,9e1 Starts With $@usn6 Starts With 0e-0"),
    octest_legacy:ct_string("With  *,$#usn8[$0..`3esn`][1e-1..$7] As `5esn`,(usn1 :usn1{#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[`3esn`?:_usn4|:`1esn`]->(`6esn` :`4esn`:usn2)[Filter(`2esn` In $@usn5 Is Not Null Is Not Null Where {@usn6} In 9e12)][(`` {`7esn`:`4esn` =~010})<-[:`5esn`{_usn4:0e-0[..$usn2],usn2:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]-(`6esn` :_usn4:`2esn`)-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})] As #usn7 Skip $`4esn`[$@usn6...12e12] Limit Reduce(#usn8={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$@usn5 Is Not Null Is Not Null) =~count(Distinct $`8esn` =~{`1esn`} =~$7,@usn6 Starts With #usn7) =~None(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}]) Where 0e-0 In 0X0123456789ABCDEF In `3esn` Create Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}})) Create Unique Allshortestpaths(({`6esn`:8.1e1 Contains .9e-1 Contains false})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})),@usn6=((`` {_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})) Union All Create Unique `6esn`=((`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]})) With  *,usn2($12 =~4.9e12) Ends With Any(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]) Ends With Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End,0Xa Starts With 9e0 Starts With Count(*) As `2esn` Order By 0e-0[..7.0e-0][..{`8esn`}] Ascending,$`` Ends With 1e-1 Ends With $@usn6 Desc Limit {#usn8} Starts With .1e-1 Starts With 9e1 Where 0e-0 In 0X0123456789ABCDEF In `3esn` Foreach(`5esn` In $`5esn` Is Null| Remove Single(`2esn` In $@usn5 Is Not Null Is Not Null Where {`3esn`} =~$@usn5 =~`2esn`).`4esn`! Create usn2=(`8esn` :usn2)-[:`1esn`|:`1esn` *0{`8esn`:2.12[{12}],`7esn`:$@usn6[``..][3.9e-1..]}]->(:`2esn`:`4esn`{usn2:$@usn6[.1e-1][9e12],`5esn`:12e12 Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("Foreach(`4esn` In 123.654 Contains true Contains 7.0e-0| Return `3esn` Starts With 9.1e-1 Starts With .9e-1 As `8esn`,Any(usn1 In $@usn6 Is Null Is Null)[Case {_usn3}[{0}...9e-1][9e-1...0e0] When 010[..9e-1][..0X7] Then $0 Ends With $usn1 Ends With {``} End..Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]})))] Skip 9e0[`1esn`..0e-0][00..`1esn`]) Delete {#usn7} Is Not Null Load Csv With Headers From Case 12.0[...0e0] When {#usn8}[..@usn5] Then `3esn` Is Null End Is Null Is Null As `5esn` Fieldterminator 's_str' Union All Create Allshortestpaths((((:`7esn`{usn2:00 Is Not Null Is Not Null})<-[`8esn`? *..123456789{@usn6:5.9e-12[\"d_str\"..][{`6esn`}..],`7esn`:{@usn5}[10.12e12..]}]->(:`3esn`{usn2:01234567[10.12e12][0Xa]})<-[ *1000..{`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]->(`` )))) Remove {usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}.#usn7?,All(`` In `7esn` =~#usn8 =~\"d_str\" Where {12} Starts With $`` Starts With 0X0123456789ABCDEF)._usn4?.`6esn` Load Csv From 3.9e-1[{@usn6}..][01234567..] As `7esn` "),
    octest_legacy:ct_string("Detach Delete (`2esn` :usn1)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(_usn4 :_usn3)[Case When 3.9e-1 Ends With {usn1} Ends With {`5esn`} Then 5.9e-12 Is Null Is Null When 9e1 Ends With 9e12 Ends With 0x0 Then .9e0 =~#usn7 Else 0 Starts With `7esn` Starts With 9e0 End..Filter(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null)],2.9e1 =~Count(*) =~{123456789},.12e12[..7] Union All Remove [`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn`[0X0123456789ABCDEF..][`8esn`..]].usn1,`8esn`:@usn6:_usn3 Merge @usn6=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) On Match Set usn2+=Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null),#usn8 =None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) With Distinct $`8esn`[{`2esn`}..11.12e-12][{`7esn`}..@usn5],{999} Contains $12 Contains 00 As usn2 Order By {`8esn`}[..`5esn`][..01] Asc,[@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..] Asc Where {#usn7} Is Not Null Union All Foreach(`7esn` In (:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]->(@usn5 )[Extract(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12)..][(#usn8 :`4esn`:usn2)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})..]| Optional Match `5esn`=Shortestpath((({_usn3:.9e12 Contains 0 Contains $0}))),usn2=(`8esn` :@usn6:_usn3)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Where 010[...12e-12] Detach Delete 0X0123456789ABCDEF In .9e-1 In 123456789,`8esn`[0e-0.._usn3][Null..`6esn`]) Load Csv With Headers From 2.9e1[2.12..1.9e0] As `6esn` "),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv With Headers From `2esn` As `4esn` Fieldterminator 's_str' Remove Allshortestpaths((_usn3 {#usn7:$999 =~false =~{`8esn`}})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})).#usn8,Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0).`8esn`!"),
    octest_legacy:ct_string("Unwind $`5esn`[..{0}][..7.0e-0] As `8esn`"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`7esn`)Assert Shortestpath(((:`1esn`:``{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]})-[`1esn`?:`3esn`|`3esn` *..00]-(`5esn` {@usn5:`2esn`}))).`7esn`? Is Unique"),
    octest_legacy:ct_string("With  *,Allshortestpaths((_usn4 {`3esn`:.0e-0 In 12})) Is Null Is Null,{@usn6} Is Null As `5esn` Skip Shortestpath((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))[[`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`}[@usn5..{@usn6}]|{1000}[..`5esn`][..9e12]]..][{_usn4:`8esn`[.12e12..]}..] Where $12 Is Not Null Is Not Null Foreach(@usn5 In {`6esn`} Starts With 12e12 Starts With {`2esn`}| Load Csv With Headers From $`3esn` =~0x0 As usn1  Remove #usn7:`1esn`:``) Foreach(`4esn` In \"d_str\" In 7.0e-0| Delete Null[{999}..$usn2],{123456789}[...9e-1][..1.0]) Union Foreach(`3esn` In {`8esn`} Ends With true Ends With {`3esn`}| Create (`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}),@usn5=Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})))) Unwind 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As `1esn` Union All Unwind (`6esn` $_usn3)<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 :#usn7:`8esn`)[Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End] As `7esn` Start `4esn`=Rel:@usn5(_usn4='s_str') ,`4esn`=Node:@usn6(\"d_str\")"),
    octest_legacy:ct_string("Detach Delete \"d_str\" Starts With .1e-1,Reduce(`2esn`=$@usn5[``..],`7esn` In 0.12 Is Not Null|$`4esn` Is Not Null) =~Any(_usn3 In `8esn`[_usn4] Where {`6esn`} In {_usn4} In $12) =~Reduce(`1esn`=false =~{`8esn`} =~00,`2esn` In $@usn5 Is Not Null Is Not Null|`1esn`[{@usn5}..][{_usn4}..]),{`2esn`:`5esn` Ends With Count(*)}[..`8esn`({#usn7}[.12e-12],$`` =~.1e-1)][..Allshortestpaths(((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})))] Foreach(usn1 In Single(_usn3 In `8esn`[_usn4] Where $_usn3[usn2..][usn1..])[{`6esn`:Count(*) =~01234567 =~.1e-1}..[usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]]]| Create ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),(`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})) Union Optional Match Shortestpath((`4esn` :_usn3)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]})),#usn7=((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})) Using Join On @usn6,usn1,`5esn` Using Join On `2esn`,@usn5 Detach Delete `1esn`[Null][{@usn6}]"),
    octest_legacy:ct_string("Delete 9e0 Is Null,1e-1 Ends With {@usn5} Ends With {usn2} Start `1esn`=Rel:`5esn`(@usn5=\"d_str\") ,usn1=Rel:`7esn`(`8esn`={`3esn`})Where {usn1} In Count ( * ) In 12e12 Start #usn8=Relationship:usn2(usn1={_usn3})  Union Start @usn5=Rel:#usn7(\"d_str\") ,`2esn`=Node(0X7,123456789,123456789,0X7)Where 999 Is Null Is Null Foreach(_usn4 In 1e1 Ends With $_usn3 Ends With .1e1| Detach Delete Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`) Is Null Is Null,6.0e0[$#usn7..$1000],$12 Is Not Null Is Not Null) Unwind `4esn`($@usn5[.9e-1],00[{1000}]) Ends With Reduce(`7esn`=0.0[00..][0xabc..],usn1 In {#usn7} =~.12e12 =~9e0|10.12e12 In Null In .12e12) As @usn6"),
    octest_legacy:ct_string("Create Unique @usn6=(:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5}) Union All Foreach(usn2 In 1e-1[$#usn8]| Create Shortestpath(((usn2 :`4esn`:usn2)-[?:#usn7|:@usn5 *..00]-(:@usn5{`7esn`:01234567[\"d_str\"..][$`4esn`..]})<-[?:_usn4|:`1esn` *..07{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}]-(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))),`2esn`=Shortestpath((@usn6 :@usn5)) Create `2esn`=Allshortestpaths((:`3esn`{@usn5:9e12[..usn2][.._usn3]})),``=Shortestpath((`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[ *0X0123456789ABCDEF]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Optional Match (`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5) Using Index _usn3:usn2(`4esn`) Using Index @usn5:`3esn`(`8esn`) Where $0 Contains $123456789 Contains {`3esn`} Match ((`4esn` :`6esn`)<-[{``:7.0e-0 Is Not Null}]->(:#usn7:`8esn`{@usn5:{0} In {`1esn`}})-[``?{``:{#usn7} =~$@usn6 =~$7}]-(`3esn` :@usn5)) Using Index usn1:#usn8(``) Using Index @usn5:@usn5(_usn4)"),
    octest_legacy:ct_string("Delete false,$`6esn`[@usn6...9e-12],$`4esn` Contains `4esn` Contains .0e-0 Return Distinct `7esn`[1.9e0..5.9e-12][9e0..@usn5] As `5esn`,#usn8(Distinct {#usn7}[.12e-12],Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]),None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0) As usn2 Skip {`1esn`}[7.0e-0..9e-1][01234567..{`4esn`}] Limit Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where .0e-0 In 12|10.12e12 Contains .9e0) Contains (`` {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})-[usn2:#usn8|:``]->(:`3esn`{@usn5:9e12[..usn2][.._usn3]})<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains Any(usn1 In $@usn6 Is Null Is Null) With Distinct (`3esn` :#usn8:@usn6)<-[`8esn`? *..123456789{@usn6:5.9e-12[\"d_str\"..][{`6esn`}..],`7esn`:{@usn5}[10.12e12..]}]->(#usn7 :`7esn`)[None(usn2 In .12e-12 Ends With `2esn` Where `7esn`[1.9e0..5.9e-12][9e0..@usn5])..][usn1(`8esn`[.12e12..],usn2[12e-12..{`8esn`}][.12e12..{123456789}])..] As _usn4 Order By [_usn3 In `8esn`[_usn4] Where {#usn7} Starts With .1e-1|`3esn` Is Null] Contains `5esn`({#usn8} Ends With _usn3 Ends With `2esn`,.9e0 =~#usn7) Asc,{`5esn`}[{usn2}..$`1esn`] Descending Where 999 Is Null Is Null Union All Foreach(`3esn` In _usn3($`5esn`[$_usn3][$12])[None(#usn8 In 07[..$`5esn`])..][All(`` In `7esn` =~#usn8 =~\"d_str\" Where 12e12 Is Not Null Is Not Null)..]| Start usn2=Rel:`4esn`({7}) ) Union Start #usn7=Node:``('s_str') "),
    octest_legacy:ct_string("Merge (#usn7 {#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})<-[@usn5?:#usn7|:@usn5]->(:`8esn`{`2esn`:0[..{#usn7}][..$_usn3],#usn8:.9e-1 Is Null Is Null})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]}) Start `2esn`=Relationship(0) Where $12 Ends With 12.0 Ends With $`4esn` Return .9e0 Ends With $0 As @usn6,$0[1e1][12e-12] As _usn3 Skip .12e12 Is Not Null Limit 0e-0 In 0X0123456789ABCDEF In `3esn`"),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv From Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000 As `4esn` "),
    octest_legacy:ct_string("Unwind $@usn5 =~{`3esn`} As `5esn` Union All Start #usn8=Relationship:``({7})  Union All Create Unique (({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`2esn` *7]->(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})),Allshortestpaths((:#usn7:`8esn`{`3esn`:0.12 In $``})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})<-[:#usn8|:`` *0]->({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})) Foreach(#usn7 In Reduce(#usn8={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$@usn5 Is Not Null Is Not Null) =~count(Distinct $`8esn` =~{`1esn`} =~$7,@usn6 Starts With #usn7) =~None(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}])| Unwind 1e1 =~{@usn5} =~`7esn` As #usn8) Detach Delete 0.12[8.1e1..0Xa][Count ( * )..{_usn3}],7 Starts With `` Starts With usn2"),
    octest_legacy:ct_string("Remove Shortestpath((({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}))).@usn5.`1esn`?,{@usn5:{0} In {`1esn`}}.#usn7?.`4esn`!"),
    octest_legacy:ct_string("Create Constraint On(`4esn`:`2esn`)Assert Exists(Allshortestpaths((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]}))).``!.`5esn`!.#usn8!)"),
    octest_legacy:ct_string("Load Csv From _usn4['s_str'][8.1e1] As ``  Union Optional Match `5esn`=Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))),#usn7=((`1esn` :`5esn`:`7esn`)) Using Index _usn4:`1esn`(@usn5) Where usn2[12e-12..{`8esn`}][.12e12..{123456789}] Union All With Distinct .1e-1[2.9e1..][$`7esn`..] As #usn8,Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Not Null Is Not Null As #usn8,07[9e-1..][1e1..] As `4esn` Skip {`4esn`} Contains 4.9e12 Match `2esn`=(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1}) Using Join On _usn3,usn2 Where Null With  $#usn8[$0..`3esn`][1e-1..$7] As `5esn`,{0} Is Not Null As `` Limit $_usn3 In `2esn` In `3esn` Where _usn3[{#usn7}]"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From {123456789} Starts With `6esn` As @usn6 "),
    octest_legacy:ct_string("Create Constraint On()-[`4esn`:#usn8]-()Assert Exists(`3esn`(Distinct $@usn5 Contains _usn3,{`1esn`} Contains 1.0 Contains 4.9e12).`2esn`!)"),
    octest_legacy:ct_string("Delete 0X0123456789ABCDEF,$usn1 =~9e1 =~$1000,{``} Contains $1000 Remove [`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 01234567[1000..][$`8esn`..]|.9e-1 Is Not Null Is Not Null].@usn5!.``?.usn2!,Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))).`5esn`?.`8esn`?.@usn5?,Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null).@usn6! Detach Delete Reduce(`6esn`=`2esn`[`7esn`][1000],usn2 In .12e-12 Ends With `2esn`|010[..9e-1][..0X7]) Contains `7esn` Contains Case When 9e1 Ends With 9e12 Ends With 0x0 Then {12} Ends With 1e1 Else `4esn` Contains 0X0123456789ABCDEF Contains $usn2 End Union Unwind Extract(`1esn` In $12 In {usn2} Where 12e12[{`4esn`}..`4esn`][999..{@usn6}])[None(#usn8 In 07[..$`5esn`] Where 01234567 Ends With .0e0 Ends With 12e12)..{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}][Reduce(#usn7=12[..$`5esn`],usn1 In $@usn6 Is Null Is Null|12e12 Ends With `5esn` Ends With .0e0)..[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 0.12 Is Not Null]] As `1esn` Foreach(`3esn` In Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Not Null Is Not Null| Unwind {usn1} Contains {`2esn`} As `8esn`) With  *,Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null) As `2esn` Limit `4esn` Is Not Null Where $@usn6 Starts With 0xabc Starts With {`7esn`}"),
    octest_legacy:ct_string("With  *,Single(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1])[Case When 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] Then $#usn8 Is Not Null Is Not Null When \"d_str\" Starts With $`7esn` Starts With 999 Then \"d_str\"[0x0..{@usn6}][$@usn5..0] Else .0e-0[..01234567] End..] Order By {123456789} Starts With $_usn4 Starts With 0x0 Descending,9e-12 Ends With 9e1 Ends With 4.9e12 Ascending,$@usn6[.1e-1][9e12] Asc Load Csv With Headers From $`8esn` Contains _usn4 As #usn8  Union With Distinct 4.9e12 Starts With {``} Where $0 Ends With 9e-12 Ends With $_usn4 Union All Foreach(#usn8 In 9e12 Is Null| Unwind Allshortestpaths(((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}))) Is Null Is Null As usn2 Remove Filter(@usn6 In 9e12[..usn2][.._usn3] Where 123.654 Ends With {1000} Ends With 9e12).`3esn`?.`7esn`?,Allshortestpaths((((`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})-[`8esn`:`4esn`|:`2esn`]->(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})))).`3esn`) Detach Delete [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] =~Single(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) =~Case @usn5 In Null When {usn1} Is Not Null Then $`5esn` Is Null When $`8esn`[..5.9e-12][..`8esn`] Then 7.0e-0[$`6esn`..] Else $0 Contains $123456789 Contains {`3esn`} End,8.1e1[$``] Remove (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)}).`8esn`.`3esn`?,@usn6:usn2"),
    octest_legacy:ct_string("Create Constraint On(@usn5:`7esn`)Assert Exists((`3esn` {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})<-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]->(:`5esn`:`7esn`{`4esn`:2.9e1[{`2esn`}]})._usn3!)"),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:`3esn`]->()Assert Exists(12.@usn5.``!.`8esn`)"),
    octest_legacy:ct_string("Drop Constraint On(usn1:usn2)Assert Exists({``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}.`1esn`!.`6esn`?)"),
    octest_legacy:ct_string("Remove [#usn7 In .0e-0 In 12 Where 0.0[00..][0xabc..]|0xabc[0Xa..]]._usn4.`1esn`!.`7esn`? Create @usn5=(`8esn` :#usn7:`8esn`) Merge @usn6=(({usn2:01[`4esn`..]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})-[`1esn`?:`3esn`|`3esn` *..00]-(`1esn` :usn2)) On Match Set `6esn`+=01[$`1esn`..$`7esn`][{usn2}..12.0],[usn1 In {#usn7} =~.12e12 =~9e0 Where $`4esn`[12e-12..$`1esn`][$`2esn`...9e12]|$`1esn`[4.9e12..][_usn3..]].#usn7 =9.1e-1[..Null][..#usn8] Union All Create (`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[{`3esn`:Count ( * )[_usn4..]}]->(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}),@usn5=Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]}))) Return Distinct *,$12 Is Null Is Null As #usn8 Skip {@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] Merge ``=Allshortestpaths(((`8esn` :@usn6:_usn3)-[#usn8? *0X7..0Xa{`7esn`:{123456789} Contains $0,#usn8:{`3esn`}[$#usn8..]}]-({@usn6:.12e12 Starts With 5.9e-12 Starts With `4esn`}))) On Create Set `` =6.0e0[$12..0.12],#usn7+=7 In 1e1 In {``}"),
    octest_legacy:ct_string("Load Csv With Headers From 0X0123456789ABCDEF In .9e-1 In 123456789 As _usn3  Load Csv With Headers From $`3esn` =~#usn8 =~0x0 As `3esn`  Foreach(`3esn` In `5esn` Contains 0 Contains $12| Load Csv From [usn2 In .12e-12 Ends With `2esn` Where @usn5 In Null|false =~{`8esn`} =~00][Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where Count ( * ) =~123456789 =~{@usn5})..Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)] As @usn6  Remove usn1:@usn6:_usn3,Reduce(usn1=0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],#usn7 In .0e-0 In 12|{0} Is Not Null Is Not Null).`2esn`!.`4esn`!) Union Return Distinct _usn4[$_usn4] As _usn4,`3esn` Starts With 9.1e-1 Starts With .9e-1 As `8esn` Order By $`5esn`[{@usn6}..{`7esn`}] Ascending Skip [usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0|4.9e12 Is Not Null Is Not Null] =~Case {_usn3} In $#usn8 In $12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else 0[..{0}][..true] End =~Case Count ( * )[`5esn`..\"d_str\"][01234567..{1000}] When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else $_usn3 Starts With 010 End Create Shortestpath((_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})),Shortestpath(((@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})-[@usn5:`6esn` *..00]->(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Create ``=Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))) Union Detach Delete $@usn6[.1e-1][9e12] Remove count(Distinct 0e-0[..$usn2],12e12[{`4esn`}..`4esn`][999..{@usn6}]).`3esn`.`6esn`.`1esn`,[@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1|$`5esn` Ends With 's_str' Ends With $`6esn`].usn1?.#usn8?.usn1,{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1}.`3esn`!"),
    octest_legacy:ct_string("Create Constraint On()-[_usn3:`3esn`]->()Assert Exists(Any(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $usn1[..$999][..0e0]).`2esn`!)"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:`8esn`)Assert All(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..]).usn2 Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:usn1)Assert Exists(Shortestpath(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})).#usn7.``)"),
    octest_legacy:ct_string("Drop Constraint On()-[#usn8:usn1]->()Assert Exists(Case #usn8 Is Null Is Null When $1000[..0e-0][..010] Then 010 Starts With 9e12 Starts With 1000 End.`8esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:``)Assert {#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}._usn4! Is Unique"),
    octest_legacy:ct_string("Optional Match #usn8=Allshortestpaths((usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})),Allshortestpaths((:``{usn1:`4esn` Is Not Null})-[ *01{usn1:false[..usn2][..999]}]-(_usn3 )) Using Join On `1esn`,@usn6,usn1 Load Csv With Headers From Reduce(`3esn`=2.12[`4esn`][.9e-1],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{`8esn`} In {_usn3} In 6.0e0)[`3esn`(Distinct)..[`` In `7esn` =~#usn8 =~\"d_str\" Where $`4esn` In {999}|0e-0[$``..10.12e12]]][Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`6esn`} =~2.12 =~123.654|{`8esn`} Contains $@usn5)..`5esn`(Distinct $`7esn` Ends With 7.0e-0 Ends With $usn2)] As #usn8  With  .0e-0 Ends With $`2esn` Ends With `5esn`,Case {`4esn`} Ends With Count(*) When `7esn` =~#usn8 =~\"d_str\" Then 010[..9e-1][..0X7] When $#usn7 Contains 3.9e-1 Then 123.654[10.12e12..$12][6.0e0..{#usn8}] Else $usn1[0e0...9e-12] End[Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))..][Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})..] As `2esn`,true In 0.0 As @usn5 Order By 0 Ends With .0e-0 Ends With false Descending,Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where .9e1[$`1esn`..][$``..]) Ascending,Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] Asc Limit [`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..])"),
    octest_legacy:ct_string("Start `2esn`=Relationship:@usn5({`4esn`}) Where 07 Ends With $_usn3 Ends With $#usn8"),
    octest_legacy:ct_string("Unwind Single(`7esn` In 0.12 Is Not Null Where $`7esn` Starts With 's_str') =~{``:01234567[10.12e12][0Xa]} As @usn6"),
    octest_legacy:ct_string("Create Constraint On(_usn3:`7esn`)Assert Reduce(`6esn`={`8esn`}[..999][.._usn3],`3esn` In 8.1e1 Contains .9e-1 Contains false|{123456789} Ends With 11.12e-12 Ends With 00).`8esn`!.#usn7!.``! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:@usn5)Assert Exists(@usn6(Distinct 0e0 Contains {`2esn`}).`7esn`.`3esn`?._usn4?)"),
    octest_legacy:ct_string("Start @usn5=Node:``(`1esn`=\"d_str\") Where {`2esn`} Contains 0xabc Return Distinct `1esn` In 6.0e0 In 12 Limit {12} Starts With 01 Starts With $1000"),
    octest_legacy:ct_string("Foreach(`6esn` In Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}]| Return Distinct 00[..@usn6] As `6esn`,{`3esn`}[...1e1][..0],Extract(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`|{`2esn`} Contains 0xabc) Is Null Is Null As `2esn` Skip $usn2 Ends With 9e12 Ends With Count ( * ) Limit 0xabc Starts With {`3esn`} Starts With {``}) Start `1esn`=Node( {`8esn`})  Union Merge usn1=({`1esn`:01 =~{_usn3} =~01,`8esn`:{#usn7} Ends With 999 Ends With 12})-[_usn4]-(#usn8 )-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}) Remove Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where .9e0 =~#usn7).`3esn`,`7esn`:`8esn` Remove Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where 2.12[{12}]|$`4esn` Contains `4esn` Contains .0e-0).``,None(usn1 In {#usn7} =~.12e12 =~9e0 Where {`1esn`} Is Null).#usn8!.``?._usn3!,Case 0X0123456789ABCDEF[1e1..] When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] End.@usn6!.`` Union Return {`8esn`}[@usn5][$`2esn`],$`6esn` In 999 In {_usn3},Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] As _usn4 Order By $12 Is Not Null Desc,`7esn`[1.9e0..5.9e-12][9e0..@usn5] Asc Skip $`5esn` Is Not Null Match `7esn`=Allshortestpaths((`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)),`8esn`=Allshortestpaths((((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(#usn7 :`8esn`)))) Start `2esn`=Rel( {_usn3}) ,_usn3=Relationship(0x0)"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:``)Assert Exists(Shortestpath((((:`1esn`:``{`8esn`:5.9e-12[0x0..]})-[?:`1esn`|:`1esn` *999..123456789]-(usn2 :@usn6:_usn3)<-[_usn4:`2esn`|`5esn` *7{`2esn`:999 Ends With {#usn8},#usn8:.12e12 Is Not Null}]-(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})))).`7esn`)"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:`5esn`)Assert Exists(Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 999 Starts With 7.0e-0 Starts With true).@usn5?)"),
    octest_legacy:ct_string("Match ({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`1esn`?:`3esn`|`3esn` *..00]-(`5esn` {@usn5:`2esn`}) Using Scan @usn5:usn1 Using Scan `4esn`:`1esn` Where usn2 Starts With $usn1 Starts With 10.12e12 Optional Match `4esn`=(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0}) Where 2.9e1 Ends With `5esn` Ends With 1000"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:_usn4)Assert None(usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null).#usn8! Is Unique"),
    octest_legacy:ct_string("Return Count(*) Starts With {usn2} Starts With `2esn` As `3esn`,0.12 Ends With 7 Ends With 12,`5esn`({`5esn`}[01234567..][5.9e-12..],5.9e-12 Is Null Is Null)[Reduce(#usn7={12} Ends With $`3esn` Ends With 0xabc,usn1 In $@usn6 Is Null Is Null|`1esn`[Null][{@usn6}])..@usn5(`3esn` Contains `2esn` Contains {_usn4},2.9e1 In {``})][Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789}))..Any(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`)] As usn2 Order By $#usn7[$``..999][$usn2..$usn2] Ascending,{usn1:12[..$`5esn`]}[None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..])] Ascending,0.12 =~2.9e1 =~9e1 Ascending Skip [usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1][Shortestpath((({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})))..Shortestpath(((:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12})-[``?:#usn7|:@usn5{``:$usn1 Ends With {`2esn`} Ends With $usn1}]->(:`5esn`:`7esn`$usn2)-[{#usn8:\"d_str\" Contains {@usn6}}]->({`8esn`:8.1e1[.1e1..][`4esn`..],`2esn`:{@usn6} In 9e12})))] Limit Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where Count ( * ) Starts With 0.12|{`3esn`} =~$`` =~$`8esn`) Ends With Case {`5esn`} Is Not Null Is Not Null When {``} Is Null Is Null Then {usn2} Ends With {@usn6} Ends With 1000 When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Union All With Distinct $`` =~.1e-1,#usn8(Distinct {#usn7}[.12e-12],Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]),$999 Ends With `2esn` Ends With 12.0 As #usn8 Limit \"d_str\" In 7.0e-0 Where {`3esn`}[999..$`4esn`] Create Unique ((`1esn` :`8esn`)<-[:usn1|usn2]-(`` :`4esn`:usn2)<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``)),Allshortestpaths(({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)})) Union Remove (`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[?:@usn5|:#usn7 *0]->(_usn3 {`2esn`:5.9e-12[0x0..]}).usn2?"),
    octest_legacy:ct_string("Unwind Shortestpath((_usn3 :usn2{`2esn`:$@usn5[.9e-1]})<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5))[Allshortestpaths((#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}))] As `1esn` Union All Load Csv With Headers From $`1esn`[9e0..$12] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With  {`2esn`}[0x0..9e0] As `6esn`,{`8esn`} Ends With true Ends With {`3esn`} As `2esn` Skip {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null) Where 2.9e1 Ends With `5esn` Ends With 1000 Create `2esn`=(:@usn6:_usn3),(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})<-[`1esn`:#usn7|:@usn5 *..123456789]-({#usn7:{7}[0x0][1e1]}) Union All Merge usn1=Shortestpath((`1esn` :`7esn`{usn1:3.9e-1 Starts With .9e0 Starts With {#usn7}})<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`6esn` :`4esn`:usn2)-[`1esn`]-(`2esn` :`2esn`:`4esn`{#usn7:0 Starts With `7esn` Starts With 9e0})) On Match Set `1esn`+=[_usn3 In `8esn`[_usn4] Where {#usn7} Starts With .1e-1|`3esn` Is Null] Contains `5esn`({#usn8} Ends With _usn3 Ends With `2esn`,.9e0 =~#usn7),@usn6 =[`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0|{`4esn`} In 1000 In {@usn5}] Is Null,{`1esn`:$999 Is Not Null}.`6esn`? =Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) On Match Set `6esn`+=\"d_str\" Starts With ``,[usn1 In \"d_str\" Contains {@usn6} Where $`8esn`|$usn1 =~.0e0 =~{`4esn`}].`4esn`! =.9e0 Is Not Null,usn2 =Case When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else {123456789} Starts With `6esn` End =~Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where `4esn` Contains 0X0123456789ABCDEF Contains $usn2) =~Allshortestpaths((`7esn` :``{usn2:$7})) Merge Shortestpath(((:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})-[?:`4esn`|:`2esn`{usn1:{123456789} Starts With `6esn`,@usn5:9e1 Ends With 9e12 Ends With 0x0}]-(`2esn` :usn1))) On Create Set `3esn`+=12 Ends With 12e12,usn1+=Case 0e-0[$``..10.12e12] When $usn2 In #usn7 In #usn7 Then \"d_str\" In usn2 In $`7esn` When {`3esn`}[_usn4][2.9e1] Then `6esn` =~999 =~$999 End Ends With None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn5 Starts With #usn7) Ends With [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0X0123456789ABCDEF Ends With {1000}|Count ( * )[_usn4..]],`1esn` =0x0 Contains 7.0e-0 On Match Set `6esn` =(`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(_usn3 In 5.9e-12 =~{12} =~{`2esn`}| Optional Match `4esn`=Allshortestpaths((_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})) Using Join On usn1,usn2 Using Join On usn1) Load Csv From Allshortestpaths((`4esn` :`3esn`)-[`3esn`?:`1esn`|:`1esn`]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})) Is Not Null Is Not Null As `5esn` Fieldterminator \"d_str\" Union Create `5esn`=(:`4esn`:usn2)-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})-[:`1esn`|:`1esn` *0{`8esn`:2.12[{12}],`7esn`:$@usn6[``..][3.9e-1..]}]-(#usn8 :@usn5) Union Remove ({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}).#usn8? Unwind ({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})-[`8esn`?:_usn3]->(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Ends With {_usn3:{123456789} Starts With `6esn`} Ends With {usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]} As _usn4"),
    octest_legacy:ct_string("Drop Constraint On()-[`3esn`:_usn3]-()Assert Exists({`5esn`:$usn1[9e1][{999}]}.#usn7?)"),
    octest_legacy:ct_string("Load Csv With Headers From 2.9e1[2.12..1.9e0] As `6esn`  Unwind {@usn5} As `5esn` Create Unique (({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})),`2esn`=(((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}))) Union Create Unique Allshortestpaths((:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[`7esn`?:`7esn`|usn1 *1000..{@usn6:#usn7 In 07,#usn8:$999[usn1..0e-0]}]->(#usn8 :`5esn`:`7esn`{usn2})-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})) Union Remove {usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}.#usn7!,Any(#usn7 In .0e-0 In 12 Where {`6esn`}[6.0e0..9e0][.9e1..12e12]).`6esn`?.`2esn`? Match (:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[_usn3?:`5esn`*..]-(:_usn4:`2esn`{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}),`1esn`=Shortestpath((:usn2{`6esn`:9e12[..usn2][.._usn3],`1esn`:01[`6esn`..][0e0..]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})) Using Index @usn5:`4esn`(usn1) Where $`` =~$_usn3 Start `4esn`=Rel:usn2(#usn7='s_str') ,`3esn`=Node:`6esn`(#usn7={_usn4})Where 9e12 Ends With \"d_str\" Ends With 0X7"),
    octest_legacy:ct_string("Remove All(usn1 In $@usn6 Is Null Is Null Where _usn4 Is Not Null Is Not Null).`7esn`!.@usn5? Union Load Csv From .0e0 =~Case $`6esn` Starts With 0.0 When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] End =~All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}]) As #usn8  Match ((#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]})<-[`3esn`?:@usn5|:#usn7]->({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})) Using Index usn2:@usn6(@usn6) Create Unique Shortestpath(((@usn5 :`3esn`{`4esn`:12e12[.9e12..07]})<-[? *999..123456789]->(@usn5 :`3esn`{`8esn`:0x0 Ends With #usn8 Ends With .9e-1}))),Allshortestpaths((_usn3 {#usn7:$999 =~false =~{`8esn`}})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})) Union Delete $@usn5 Starts With #usn7,999 Starts With 7.0e-0 Starts With true,{`8esn`}[..999][.._usn3]"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From usn2[..$0][..`3esn`] As ``  Foreach(`7esn` In {123456789} =~.9e1 =~$_usn3| Start @usn6=Node:`2esn`(#usn7={`4esn`})  With  *,Case When .9e-1 Is Not Null Is Not Null Then $12[$`6esn`..][01..] When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] Else {`8esn`}[9e12..][{_usn4}..] End Is Null Is Null,{#usn8} Ends With _usn3 Ends With `2esn` Order By $`6esn`[{`4esn`}..][{#usn8}..] Ascending,$#usn8 Starts With 9.1e-1 Starts With {#usn7} Asc Skip Case When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 Else $12 Is Not Null Is Not Null End Starts With usn1(Distinct .9e1[$`1esn`..][$``..]) Starts With Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End)"),
    octest_legacy:ct_string("Unwind _usn4[{`3esn`}][00] As _usn3 Union Merge ((:`1esn`:``{`8esn`:5.9e-12[0x0..]})) On Create Set #usn7 =usn1 =~false =~{999},Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}).`2esn`! =9e12 Is Null Is Null,`2esn`+=Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`}) Ends With Shortestpath(((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))) Ends With Reduce(_usn3=$`4esn` Is Null Is Null,usn2 In $`5esn`[{`4esn`}][{0}]|9e-1 Contains 3.9e-1) On Create Set `3esn` =$7[.1e-1..{@usn6}][$7..{`1esn`}],None(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {0}[.1e-1..][_usn4..]).usn2 =$`7esn` In $`4esn`,usn1+=$`4esn` Ends With {999} Union All Return *,$123456789[..$999][..`6esn`] As @usn5,Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 01 =~07)[Case 9e-12 Ends With 9e1 Ends With 4.9e12 When `3esn` =~$#usn7 Then $@usn5 Starts With #usn7 When {`4esn`}[{`3esn`}][$`2esn`] Then #usn7[$`8esn`][{`3esn`}] Else 9e0[`4esn`..$_usn4][9.1e-1..0e0] End][[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]] Skip @usn5[9e-1..{`1esn`}] Limit 11.12e-12 Contains usn1 Load Csv From false =~{`8esn`} =~00 As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From #usn7(Distinct $`8esn`[..5.9e-12][..`8esn`],{`3esn`}[01234567][{#usn7}]) =~Case When {`8esn`} Starts With .9e-1 Starts With 1000 Then $`6esn`[$_usn3..{1000}] When 3.9e-1 Starts With .9e0 Starts With {#usn7} Then .0e-0 Ends With $`2esn` Ends With `5esn` Else _usn4[$_usn4] End =~Single(#usn7 In .0e-0 In 12 Where #usn7[123.654][{12}]) As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return 01234567[1000..][$`8esn`..],Count ( * ) Is Not Null Is Not Null As _usn3,3.9e-1[..$1000][..0.12] As `` Limit {999} =~$`6esn` =~$`6esn` Unwind #usn7 In 07 As ``"),
    octest_legacy:ct_string("Create Constraint On(@usn6:`3esn`)Assert [@usn6 In 9e12[..usn2][.._usn3]|$1000[_usn4][{@usn5}]].#usn8 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:`5esn`)Assert Exists(All(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn5 Starts With #usn7)._usn4!)"),
    octest_legacy:ct_string("Merge #usn7=(`8esn` :`7esn`)-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``) On Create Set None(`2esn` In $@usn5 Is Not Null Is Not Null Where {#usn8}[..@usn5]).usn2 =`1esn` In 6.0e0 In 12,`4esn`:_usn4:`2esn` On Create Set Single(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where `4esn` Ends With 9e12 Ends With {`5esn`})._usn3?.@usn6!.#usn8 =0[..12][..{`8esn`}],#usn8 =.1e1 In $999 In {#usn8},_usn3 =[usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]|{12} Contains `8esn` Contains @usn5] Contains Shortestpath(((({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(@usn6 :@usn5)-[`2esn`? *7{`5esn`:false[..usn2][..999]}]-(`4esn` :@usn6:_usn3)))) Contains (:usn1{#usn8:$`8esn` Is Not Null Is Not Null,`5esn`:3.9e-1 Starts With .9e0 Starts With {#usn7}})-[:#usn8|:`` *..07{@usn5:01234567[\"d_str\"..][$`4esn`..],`6esn`:$usn1 Ends With {`2esn`} Ends With $usn1}]-(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[? *0X7..0Xa]->(`1esn` )"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:usn2)Assert {`5esn`:`3esn` Starts With 9.1e-1 Starts With .9e-1}._usn3 Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn4:`5esn`]-()Assert Exists(Extract(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null).@usn5!)"),
    octest_legacy:ct_string("Merge usn1=Allshortestpaths(((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) On Create Set `5esn`+=Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] Detach Delete Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})[Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})<-[`5esn`?:`7esn`|usn1{@usn5:9e0[`3esn`][0]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )))..][Case When $#usn7 Contains 3.9e-1 Then .12e12 Starts With 5.9e-12 Starts With `4esn` When {1000}[`2esn`...0e-0][9e-1..0X7] Then 010[...12e-12] End..]"),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:`5esn`]->()Assert Exists({@usn5:`5esn` Ends With Count(*),usn1:$12[$@usn5]}.usn2!)"),
    octest_legacy:ct_string("Detach Delete $`5esn`[$_usn3][$12],.1e1 Ends With #usn7 Ends With {#usn7} Union All Merge `1esn`=Allshortestpaths(((:usn1{`6esn`:$_usn3[usn2..][usn1..],#usn7:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]->(`` :usn1{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null}))) On Create Set `7esn`+={`3esn`} =~$@usn5 =~`2esn` On Match Set {#usn8:$#usn7[01..2.12][2.12..3.9e-1],``:.9e0[$#usn8][Count ( * )]}.usn2! =Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null Load Csv With Headers From 0e0 Contains {`2esn`} As `2esn` Fieldterminator \"d_str\" Merge `6esn`=(`4esn` :_usn3)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}) On Create Set @usn5 =Count(*)[$7] On Create Set usn1:`6esn`,{`7esn`:{#usn7}[.12e-12]}.@usn6!.#usn7?.`6esn`! ={12} Contains `8esn` Contains @usn5 Union All Merge `6esn`=(({`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654})-[$#usn8]->({usn2:01[`4esn`..]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1})) On Match Set `5esn` =({`4esn`:#usn8[\"d_str\"..usn2],`1esn`:12.0[..Count ( * )][..@usn6]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ) =~Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End =~{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} On Match Set @usn5 =$@usn5[`8esn`][12e12] Foreach(usn2 In Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Null Is Null| With Distinct *,$`1esn`[4.9e12..][_usn3..],Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End =~{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]} Order By Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}]) Descending,5.9e-12[01][`4esn`] Descending,[`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] Descending Skip Count(*) Is Not Null Is Not Null Limit 12e-12 =~$_usn3 Where false Contains {`7esn`} Create @usn6=(#usn7 {usn1:2.12[{12}]}))"),
    octest_legacy:ct_string("Create Constraint On()-[@usn6:`3esn`]-()Assert Exists(Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where 3.9e-1 Starts With .9e0 Starts With {#usn7}).#usn8!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:``)Assert ({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]})-[:`6esn` *12{#usn7:`3esn` =~$#usn7,`8esn`:0e-0[{@usn6}]}]->(usn1 :#usn7:`8esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})-[``? *..00{@usn5:$`8esn` =~{`1esn`} =~$7,#usn7:.12e-12 Starts With .12e-12}]->({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}).usn2! Is Unique"),
    octest_legacy:ct_string("Detach Delete (@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(:`6esn`{`2esn`:`5esn` Ends With Count(*)})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12}) In Any(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}) In Single(`7esn` In 0.12 Is Not Null Where $`7esn` Starts With 's_str') Union All With  $0 In {`5esn`:.9e-1 Contains .9e0 Contains ``} In {`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12} As `7esn`,.9e0 Ends With $0 As @usn6 Limit $`5esn` In $12 In `2esn` Union Create ((:#usn7:`8esn`{@usn5:{0} In {`1esn`}})),((`3esn` :#usn8:@usn6))"),
    octest_legacy:ct_string("Create Constraint On()-[@usn5:`3esn`]->()Assert Exists(All(#usn7 In .0e-0 In 12 Where 123.654 Ends With {1000} Ends With 9e12).`6esn`.`6esn`?)"),
    octest_legacy:ct_string("Create Constraint On()-[`3esn`:_usn4]-()Assert Exists({usn2:\"d_str\" Starts With ``}.`7esn`!)"),
    octest_legacy:ct_string("Start _usn4=Relationship:@usn6(\"d_str\") Where 07[{@usn5}..] Union All Unwind \"d_str\" In usn2 In $`7esn` As @usn6 Remove Filter(@usn6 In 9e12[..usn2][.._usn3] Where 123.654 Ends With {1000} Ends With 9e12).`3esn`?.`7esn`?,Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0xabc[01234567][.12e-12]).`8esn`,Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`]).usn1 Union Load Csv From None(usn1 In \"d_str\" Contains {@usn6} Where $`5esn` =~Count(*) =~1.9e0) In [_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null|.12e-12[9e1]] As @usn5 Fieldterminator \"d_str\" Start `4esn`=Rel:#usn8(usn2='s_str') "),
    octest_legacy:ct_string("Create Constraint On()<-[_usn4:`1esn`]-()Assert Exists((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]})-[_usn4*{`3esn`:{``} Is Null Is Null}]-({`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})<-[#usn7? *0xabc..12]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}).`1esn`)"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`8esn`)Assert Case 01[`6esn`..][0e0..] When {0}[`4esn`..{`8esn`}] Then \"d_str\" In usn2 In $`7esn` When `8esn`[_usn4] Then $`4esn`[usn2..] End.#usn7! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:`4esn`)Assert Allshortestpaths(((`1esn` :#usn8:@usn6{usn1:#usn8 Is Null Is Null,_usn3:{`4esn`} In 1000 In {@usn5}})<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654}))).`3esn`.@usn6? Is Unique"),
    octest_legacy:ct_string("Return usn2[..$0][..`3esn`],{``:01234567[10.12e12][0Xa]} Is Null Is Null As #usn7,false Contains {`7esn`} Skip 0.0[$`4esn`] Limit (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])] Union All Detach Delete .12e12 Ends With 07 Ends With 3.9e-1 Foreach(usn2 In usn2[12e-12..{`8esn`}][.12e12..{123456789}]| Unwind {`7esn`}[0.12] As `6esn` Match `2esn`=Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}}))) Where $123456789[..$999][..`6esn`]) Union Load Csv With Headers From Shortestpath((`6esn` :``)) Contains Case When $@usn6[``..][3.9e-1..] Then 7[..123456789][..true] When `4esn` Contains 0X0123456789ABCDEF Contains $usn2 Then 12e12[{`4esn`}..`4esn`][999..{@usn6}] End As `6esn` Fieldterminator 's_str' Unwind {`8esn`}[9e12..][{_usn4}..] As #usn8"),
    octest_legacy:ct_string("With  @usn6[Reduce(`5esn`=_usn4['s_str'][8.1e1],_usn3 In `8esn`[_usn4]|$_usn3 =~'s_str' =~12)..][(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[`7esn`?]-(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})..],9e0 In {usn2} In {@usn6} As `8esn` Skip {#usn8:$`6esn`[..01][..{_usn3}]} Starts With Shortestpath(((`1esn` :`8esn`)-[`7esn`?:`2esn`|`5esn` *0]->(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0}))) Limit Single(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`)[(#usn7 {`2esn`:`8esn`[.12e12..],_usn3:usn1 =~0Xa =~0})<-[? *1000..]->({usn1:true In 0.0,@usn5:{`1esn`} Is Null})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0})][Reduce(`2esn`=.9e0[07..][4.9e12..],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$``[9e0..][5.9e-12..])] Where {`4esn`} Ends With Count(*) With Distinct (`2esn` :`4esn`:usn2{`8esn`:.9e-1 Contains .9e0 Contains ``,_usn4:8.1e1 Contains .9e-1 Contains false})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}) Is Null Is Null As `1esn`,00 Is Not Null Is Not Null As `6esn`,{`5esn`} Ends With $`7esn` Ends With {@usn5} Order By {@usn6} =~Count ( * ) =~1.0 Desc,$`6esn` Contains All(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) Descending,`6esn`[0X0123456789ABCDEF..][`8esn`..] Ascending Limit None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Contains (`8esn` :@usn6:_usn3{_usn4:{#usn7} =~$@usn6 =~$7})<-[`1esn`? *0{usn2:.9e12[6.0e0..][@usn5..]}]->(usn2 :@usn6:_usn3)-[usn1:#usn7|:@usn5 *999..123456789]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7}) Where 4.9e12[{_usn4}..] Delete `1esn` Ends With 0.0 Ends With {`1esn`},Single(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Is Not Null Union With Distinct $7 In 1.0 In 01234567,.12e12[$`1esn`..0x0] As `4esn` Order By Filter(#usn7 In .0e-0 In 12 Where #usn7[123.654][{12}])[[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]..Reduce(`1esn`=`2esn`,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|.9e0 =~#usn7)] Desc,{0} =~{999} Desc,$999 =~0x0 Desc Skip `1esn`[..$1000] Limit 0e-0[#usn7..999]"),
    octest_legacy:ct_string("Drop Constraint On()<-[`8esn`:`4esn`]-()Assert Exists({`6esn`:12[@usn6][{`2esn`}]}.@usn5!)"),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:``]-()Assert Exists(Single(#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0).usn1)"),
    octest_legacy:ct_string("Foreach(@usn6 In {`1esn`}[{usn2}]| Load Csv From All(usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0) Ends With Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $123456789 Is Not Null Is Not Null|{`8esn`}[@usn5][$`2esn`]) Ends With (#usn8 :`5esn`:`7esn`{usn2})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )-[_usn4? *..0x0{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]->(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null}) As `` Fieldterminator 's_str') Remove _usn4(Distinct).`6esn`?.`4esn`?,Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 999 Starts With 7.0e-0 Starts With true).``? Merge Allshortestpaths(((@usn6 :`5esn`:`7esn`)-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)-[`3esn`:`6esn` *..0x0]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}))) On Match Set `2esn`+=9e1[0.0],#usn8+=.12e-12[@usn6..'s_str'],{`6esn`:4.9e12 Is Not Null Is Not Null,_usn4:`4esn`[9e-12..true]}.#usn8._usn3? =Shortestpath((((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))))[None(usn1 In {#usn7} =~.12e12 =~9e0 Where 0.0[`7esn`])..Single(usn1 In {#usn7} =~.12e12 =~9e0 Where @usn6[true..])][`5esn`(Distinct .9e1[$`1esn`..][$``..])..Case When 12e12 Ends With `5esn` Ends With .0e0 Then .9e0 In 8.1e1 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else .9e1 Ends With 0x0 End] On Create Set @usn6+=00 =~`4esn` =~.9e-12,`3esn` =$123456789,[usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF].`5esn`! =.0e-0 Ends With $`2esn` Ends With `5esn`"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:usn2)Assert Exists(Extract(usn2 In .12e-12 Ends With `2esn` Where $`4esn` Ends With .12e12 Ends With 123.654|0X7 Is Not Null Is Not Null).usn1?)"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From 4.9e12[{_usn4}..] As _usn4 Fieldterminator \"d_str\" Foreach(`8esn` In {1000}[`2esn`...0e-0][9e-1..0X7]| Load Csv From usn2(Distinct $_usn3 =~'s_str' =~12) In (`` :usn1)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}) In Case When {_usn4}[{`6esn`}] Then 12e12 Is Not Null Is Not Null When #usn7 Is Null Is Null Then {`8esn`} Starts With .9e-1 Starts With 1000 End As usn2 ) Unwind 01 =~{_usn3} =~01 As _usn4"),
    octest_legacy:ct_string("Start #usn8=Node(7,0X7,0,01) ,#usn8=Relationship:_usn4(@usn6=\"d_str\") Start `6esn`=Rel(7,0X7,0,01) ,@usn5=Rel:usn1({usn2})Where 11.12e-12 Ends With 's_str' Union Remove usn2(.9e-12[usn2]).``,[@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e0 In 8.1e1|9e-1 Is Not Null].`4esn`? Union With Distinct [`1esn` In $12 In {usn2} Where $`8esn` Is Not Null Is Not Null|8.1e1 Contains $@usn6] In All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..]) In Extract(`7esn` In 0.12 Is Not Null Where .12e-12[@usn6..'s_str']) As @usn6,1.9e0 =~.0e0 =~0X7 As @usn6,{`3esn`}[$#usn8..] Order By $`` =~.1e-1 Asc,9e1[..@usn5][..$`5esn`] Descending,$#usn7 Ends With 999 Ends With {12} Descending Skip 3.9e-1 Contains 2.9e1 Contains `5esn` Where 01 Contains 9e-12 Contains $7 Merge `6esn`=(`4esn` :_usn3)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}) On Create Set @usn5 =Count(*)[$7] On Create Set usn1:`6esn`,{`7esn`:{#usn7}[.12e-12]}.@usn6!.#usn7?.`6esn`! ={12} Contains `8esn` Contains @usn5"),
    octest_legacy:ct_string("Delete @usn5[#usn7..],(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]-(:_usn3{_usn3:010[..9e-1][..0X7]}) Starts With Case When $1000 Starts With {@usn6} Starts With $@usn5 Then `2esn` When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else 12[4.9e12..] End Starts With (_usn4 {`3esn`:.0e-0 In 12})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc}) Union All Foreach(`2esn` In `6esn` =~999 =~$999| Detach Delete Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789)[..All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 1e1 =~{@usn5} =~`7esn`)][..Case 07[..$`5esn`] When 00[$_usn4][$`1esn`] Then {#usn7}[.12e-12] Else `5esn` Contains 0 Contains $12 End] Create Shortestpath(((`4esn` {`6esn`})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})))) Foreach(_usn3 In {usn1:12[..$`5esn`]}[None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..])]| Create Unique #usn8=Allshortestpaths((:usn1{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})-[_usn3:`4esn`|:`2esn` *01234567..]->(`8esn` :`2esn`:`4esn`))) Union All Return {12}[6.0e0..{usn2}][{_usn3}..{#usn7}] As _usn4,usn1 =~0Xa =~0 As @usn5 Limit $usn2 Ends With 9e12 Ends With Count ( * )"),
    octest_legacy:ct_string("Start `2esn`=Rel( {``}) Where .9e1[$`1esn`..][$``..]"),
    octest_legacy:ct_string("With Distinct * Where $123456789[{usn1}][.12e-12]"),
    octest_legacy:ct_string("Match `3esn`=((_usn4 :_usn4:`2esn`{`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})-[_usn4]-(#usn8 )) Using Join On ``,`4esn`,_usn4 Unwind .12e-12[@usn6..'s_str'] As `7esn` Return Distinct 0xabc[..Count(*)][..$`5esn`],{12} Ends With 1e1 As `8esn`,{`4esn`} In 1000 In {@usn5} Order By {7} Ends With 999 Asc,_usn3 =~{`4esn`} Desc Skip [`1esn` In $12 In {usn2} Where 12e-12 Starts With $`7esn`][{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6}..] Union All Load Csv From Reduce(`6esn`=$`5esn`[$_usn3][$12],`2esn` In $@usn5 Is Not Null Is Not Null|1.9e0 In $@usn6 In $_usn3)[{``:.12e-12 Is Null}..][Case When $1000 Starts With {@usn6} Starts With $@usn5 Then `2esn` When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else 12[4.9e12..] End..] As #usn7  Create (((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})))"),
    octest_legacy:ct_string("Load Csv With Headers From [usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0|4.9e12 Is Not Null Is Not Null] =~Case {_usn3} In $#usn8 In $12 When 9e12 Ends With 9e-1 Ends With 9e1 Then {`4esn`}[00..] Else 0[..{0}][..true] End =~Case Count ( * )[`5esn`..\"d_str\"][01234567..{1000}] When $_usn3 =~'s_str' =~12 Then .12e12[..$123456789] Else $_usn3 Starts With 010 End As `3esn`  Match `8esn`=((@usn6 :@usn6:_usn3)),Allshortestpaths((((:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})-[`7esn`:`1esn`|:`1esn` *0Xa..12]-(`8esn` :`7esn`)<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})))) Using Scan #usn7:`3esn` Using Index `6esn`:`3esn`(``)"),
    octest_legacy:ct_string("Create Constraint On(#usn8:`8esn`)Assert Exists(Reduce(`8esn`={0}[`4esn`..{`8esn`}],#usn8 In 07[..$`5esn`]|12e12 Contains {0}).`5esn`!.`6esn`)"),
    octest_legacy:ct_string("Delete `8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End,Any(_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12)[(`5esn` :`8esn`{`1esn`:{`8esn`} Starts With .9e-1 Starts With 1000,@usn5:10.12e12 In Null In .12e12})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(#usn7 :_usn3{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})..],Reduce(#usn7=$usn1 Ends With {`2esn`} Ends With $usn1,`6esn` In 010[{`1esn`}..]|.9e-12[.12e12..][0Xa..])[#usn7(8.1e1 Contains $@usn6,$12[$`6esn`..][01..])..Reduce(@usn5=`1esn` In 6.0e0 In 12,`` In `7esn` =~#usn8 =~\"d_str\"|$`6esn` =~$#usn7 =~$`4esn`)] Merge `1esn`=Shortestpath((({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[`8esn`*]->(#usn7 :#usn7:`8esn`))) On Match Set `3esn`(Count ( * )[_usn4..],`2esn`).usn1!._usn4 =`1esn` In 010 In 1e-1,Any(#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null).`2esn`! =Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))) Is Not Null Is Not Null,usn2+=8.1e1[$``] Union Return usn2[12e-12..{`8esn`}][.12e12..{123456789}] As #usn8,Case When $`6esn`[0..{@usn6}][@usn5..1000] Then .0e-0[..01234567] When {123456789} Starts With $_usn4 Starts With 0x0 Then 9e0[`3esn`][0] End[{`3esn`:false Starts With 0 Starts With 2.9e1,@usn6:9e-12 Ends With {1000}}..{`8esn`:_usn3[{#usn7}]}] As usn1 Skip Allshortestpaths((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))[usn1..] Limit usn2 Ends With $123456789 Ends With {999}"),
    octest_legacy:ct_string("Load Csv From `4esn`($@usn5[.9e-1],00[{1000}]) Ends With Reduce(`7esn`=0.0[00..][0xabc..],usn1 In {#usn7} =~.12e12 =~9e0|10.12e12 In Null In .12e12) As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge @usn5=(usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[?$999]-(`4esn` {#usn7:$usn1[0e0...9e-12]})-[:`5esn` *01234567..{`2esn`:{usn1} Contains {`2esn`},#usn7:`4esn`[9e-12..true]}]-(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null}) On Create Set #usn8:`8esn` On Create Set #usn7+={_usn4} Ends With {0} Ends With `1esn`"),
    octest_legacy:ct_string("With  $123456789[{usn1}][.12e-12] As `3esn`,1.9e0 =~.0e0 =~0X7 As #usn7,9e1 Ends With 9e12 Ends With 0x0 As #usn8 Order By $@usn5 Is Null Is Null Ascending,`1esn` Is Not Null Is Not Null Desc Limit {`8esn`} Ends With true Ends With {`3esn`} Where $usn1[9e1][{999}] Unwind @usn5[#usn7..] As usn1 Create ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})),`6esn`=(usn1 :#usn8:@usn6) Union All Delete [usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]][`5esn`(Distinct $@usn5[`8esn`][12e12])..][``(Distinct $1000 Is Null,1e-1[$`4esn`])..],$`4esn` Is Null Is Null Create Unique ((:@usn5{`1esn`:$999 =~0e0 =~0X7})<-[usn2:_usn3 *0xabc..12]-(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]})<-[{usn1:$_usn3 Starts With 010}]-(_usn3 :usn1)),(usn2 :@usn5{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}) Detach Delete `7esn`[1.9e0..5.9e-12][9e0..@usn5]"),
    octest_legacy:ct_string("Create Constraint On()-[usn1:usn2]-()Assert Exists(Reduce(#usn8=1e1 Ends With $_usn3 Ends With .1e1,`7esn` In 0.12 Is Not Null|true[1.9e0..]).`7esn`)"),
    octest_legacy:ct_string("Return Distinct *,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) As #usn8,Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``}) In (_usn4 :_usn3)<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-({#usn7:12e12[.9e12..07]}) In @usn5({1000}[0..]) Unwind .1e-1 Is Not Null As `3esn`"),
    octest_legacy:ct_string("With Distinct 0e0 Is Null Is Null As `2esn`,{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]} In Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}))) In Extract(_usn3 In `8esn`[_usn4] Where 0[..{#usn7}][..$_usn3]|0x0 Ends With #usn8 Ends With .9e-1) As ``,$`6esn` In 999 In {_usn3} As usn2 Order By 010 =~9.1e-1 =~{`8esn`} Desc Skip false[9e12] Limit 0e-0[..7.0e-0][..{`8esn`}] Union Remove None(@usn6 In 9e12[..usn2][.._usn3] Where 01[`4esn`..]).#usn8?,Case When `5esn` Contains 0 Contains $12 Then true In 0.0 Else 9e12 Ends With \"d_str\" Ends With 0X7 End._usn4,0.0.@usn6!"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`4esn`)Assert Exists(Reduce(_usn3={123456789}[...9e-1][..1.0],@usn6 In 9e12[..usn2][.._usn3]|\"d_str\" Is Not Null Is Not Null).@usn6?)"),
    octest_legacy:ct_string("Return Reduce(#usn7=#usn8[\"d_str\"..usn2],#usn7 In .0e-0 In 12|`` Ends With 1.0 Ends With usn1) Ends With [_usn3 In `8esn`[_usn4] Where _usn4[{``}..{`6esn`}][$7..$_usn3]] Ends With Shortestpath((((:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[`2esn`?:`8esn`|:#usn8]->(`` )<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)))),Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]) In None(`1esn` In $12 In {usn2} Where $12 =~4.9e12) As usn1 Limit Case Null[#usn7..][9.1e-1..] When 12.0[..Count ( * )][..@usn6] Then {0} In {`1esn`} When 4.9e12 Starts With {``} Then $`8esn` Is Null Is Null Else $#usn7 Contains 3.9e-1 End Contains None(#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null) Contains [usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..]] Detach Delete $`5esn`[..{0}][..7.0e-0],`8esn` Contains usn2,usn2[12e-12..{`8esn`}][.12e12..{123456789}] Optional Match `4esn`=(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0}) Where 2.9e1 Ends With `5esn` Ends With 1000 Union Start `3esn`=Node:#usn8(usn2='s_str') Where $`6esn` =~$#usn7 =~$`4esn` Merge #usn7=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 ))) On Create Set #usn8:`8esn` On Match Set `8esn`+=Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null],@usn5+=Reduce(@usn6=0X0123456789ABCDEF Ends With {1000},usn1 In $@usn6 Is Null Is Null|.0e0 =~0 =~.0e0) Starts With None(`6esn` In 010[{`1esn`}..] Where _usn4 Ends With {`8esn`} Ends With usn2) Starts With Case When 01234567 Ends With .0e0 Ends With 12e12 Then @usn6 Starts With #usn7 Else .12e12 Ends With 07 Ends With 3.9e-1 End,#usn7 =$_usn3[0X0123456789ABCDEF..][0x0..] Optional Match #usn8=(`6esn` :`4esn`:usn2),(((:`3esn`)<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))) Using Join On `5esn`,`8esn`,#usn7 Where $12[10.12e12][.1e1] Union All Foreach(`6esn` In 9e-12[{`1esn`}..]| Optional Match Shortestpath(((`7esn` {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF})<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))) Using Join On `2esn`,`6esn` Using Join On `4esn`,`2esn`,`` Where #usn8 Is Null Is Null) Start @usn5=Rel:`8esn`(usn1={#usn7}) ,usn1=Node:usn1(usn2='s_str')Where .12e12[..$123456789] Delete $@usn6 Is Null,{`1esn`} Is Null,{@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null)"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv From {0} Is Null Is Null As `5esn` Fieldterminator 's_str' Unwind _usn4 As _usn3 Detach Delete \"d_str\" Starts With .1e-1,Reduce(`2esn`=$@usn5[``..],`7esn` In 0.12 Is Not Null|$`4esn` Is Not Null) =~Any(_usn3 In `8esn`[_usn4] Where {`6esn`} In {_usn4} In $12) =~Reduce(`1esn`=false =~{`8esn`} =~00,`2esn` In $@usn5 Is Not Null Is Not Null|`1esn`[{@usn5}..][{_usn4}..]),{`2esn`:`5esn` Ends With Count(*)}[..`8esn`({#usn7}[.12e-12],$`` =~.1e-1)][..Allshortestpaths(((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})))]"),
    octest_legacy:ct_string("With  *,Extract(#usn8 In 07[..$`5esn`] Where $usn2[..$999][..#usn8]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )])[Case {#usn7}[.12e-12] When $`4esn`[$@usn6...12e12] Then .12e-12[@usn6..'s_str'] Else .12e-12 Starts With .12e-12 End..(`` :``)-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})][Reduce(`5esn`=Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|{usn2}[9e-1])..All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}])] As `8esn` Limit $`5esn`[..{0}][..7.0e-0]"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:`4esn`)Assert Exists(Case 6.0e0[$#usn7..$1000] When 1e-1 =~$`7esn` =~1e1 Then {`1esn`} Is Null When `7esn` =~#usn8 =~\"d_str\" Then 010[..9e-1][..0X7] Else Null In {7} End.`8esn`)"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`3esn`)Assert Exists(@usn6(Distinct)._usn4?.usn2?)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:usn2)Assert Filter(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..]).@usn5 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:@usn6)Assert Exists(Reduce(``=`2esn`[`7esn`][1000],usn2 In $`5esn`[{`4esn`}][{0}]|{123456789} Ends With 11.12e-12 Ends With 00).@usn5._usn3.@usn5)"),
    octest_legacy:ct_string("Foreach(usn1 In 4.9e12 Is Not Null Is Not Null| Unwind Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[..None(#usn7 In .0e-0 In 12 Where 0xabc =~123456789)][..11.12e-12] As @usn5) Start usn2=Node:`2esn`(_usn4={#usn7}) ,`5esn`=Rel:`6esn`(`4esn`='s_str')Where 12[..$`5esn`] Remove Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`3esn`}[01234567][{#usn7}]|00 =~`4esn` =~.9e-12).`5esn`.`3esn`! Union All Delete $12 Contains 's_str',`4esn` Ends With 9e12 Ends With {`5esn`},$1000[_usn4][{@usn5}] Start @usn5=Relationship:_usn3({`7esn`})  Union Foreach(_usn3 In {usn2} Ends With {@usn6} Ends With 1000| Load Csv With Headers From 123.654[..999] As `8esn` Fieldterminator \"d_str\") Match (`8esn` :@usn6:_usn3)<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})-[`3esn`? *..07]-(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}) Using Index `5esn`:#usn8(_usn3) Where 9e-12 Is Not Null Is Not Null Create ({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})<-[_usn3? *0xabc..12]->(_usn3 {#usn7:$999 =~false =~{`8esn`}})"),
    octest_legacy:ct_string("Create Constraint On()-[_usn4:`7esn`]->()Assert Exists(Single(`6esn` In 010[{`1esn`}..] Where usn2[12e-12..{`8esn`}][.12e12..{123456789}]).#usn8?)"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`7esn`)Assert None(`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`}[@usn5..{@usn6}]).@usn6.usn1? Is Unique"),
    octest_legacy:ct_string("Foreach(`8esn` In `6esn` =~999 =~$999| Match (((`7esn` :usn1)<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})<-[`3esn`?:@usn6|:`4esn`]-(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))),``=((:_usn4:`2esn`{@usn5:1e-1[$`4esn`]})<-[? *0]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})) Using Scan ``:`1esn`) Unwind Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}]) As `4esn` Union All Foreach(`4esn` In .0e-0[..01234567]| Start _usn3=Relationship(0x0) ,``=Relationship( {@usn5})Where 0Xa In 1.0 In $@usn5 With Distinct {`6esn`} Starts With {`5esn`} Starts With 2.9e1 As _usn3,Case #usn8 Is Null Is Null When {`1esn`} Contains 1.0 Contains 4.9e12 Then 7 Is Null Is Null End[..Reduce(usn2=1.0 Is Null Is Null,`3esn` In 8.1e1 Contains .9e-1 Contains false|{`6esn`} =~2.12 =~123.654)][..{`3esn`:Count ( * )[_usn4..]}] As #usn8 Where 9e-1 Contains 3.9e-1)"),
    octest_legacy:ct_string("Drop Constraint On()<-[`2esn`:_usn4]-()Assert Exists(Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0|$#usn7 Starts With $123456789)._usn3!)"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:#usn8)Assert Exists(Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 999 Starts With 7.0e-0 Starts With true).`2esn`)"),
    octest_legacy:ct_string("Load Csv With Headers From (`1esn` {`2esn`})-[@usn6:`3esn`|`3esn` *0X7..0Xa]->(_usn4 :#usn8:@usn6)[Allshortestpaths((`3esn` :`6esn`{_usn3:.12e-12 Ends With `2esn`,usn1:Null[#usn7..][9.1e-1..]})-[_usn3?:@usn5|:#usn7]->(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]}))][Filter(usn2 In .12e-12 Ends With `2esn` Where 0.12 =~2.9e1 =~9e1)] As @usn6 "),
    octest_legacy:ct_string("Create Constraint On(`2esn`:`6esn`)Assert Exists((:#usn7:`8esn`{@usn5:{0} In {`1esn`}})<-[$#usn8]->(:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]})<-[`3esn`?:`6esn`{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(:`1esn`:``{`8esn`:5.9e-12[0x0..]}).``?)"),
    octest_legacy:ct_string("Load Csv With Headers From $`1esn`[4.9e12..][_usn3..] As `2esn` Fieldterminator 's_str' Detach Delete $`8esn` Contains _usn4,[usn1 In \"d_str\" Contains {@usn6} Where 5.9e-12[0x0..]|4.9e12 Ends With $@usn6] =~(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2) =~(`3esn` :#usn8:@usn6)-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[:`2esn`|`5esn` *01]-({@usn6:{_usn4} In 0X7 In 0e0}),``(Distinct $1000 Is Null,1e-1[$`4esn`])[None(_usn3 In `8esn`[_usn4] Where _usn4[{``}..{`6esn`}][$7..$_usn3])][[usn1 In \"d_str\" Contains {@usn6} Where 5.9e-12[0x0..]|4.9e12 Ends With $@usn6]] Match `2esn`=(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1}) Using Join On _usn3,usn2 Where Null"),
    octest_legacy:ct_string("With  $`5esn`[{@usn6}..{`7esn`}] As `2esn`,`8esn`[.12e12..],'s_str'[`3esn`..0x0] As @usn5 Order By Shortestpath(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2)))[[`` In `7esn` =~#usn8 =~\"d_str\"|{@usn6} =~Count ( * ) =~1.0]..Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $``[9e12..])] Asc Skip `3esn` Is Null Union With  $`5esn` =~Count(*) =~1.9e0 As @usn6,.9e12[6.0e0..][@usn5..],07[9e-1..][1e1..] As `4esn` Order By Reduce(`1esn`=#usn7[$`8esn`][{`3esn`}],#usn8 In 07[..$`5esn`]|7[{`4esn`}..]) =~Case 3.9e-1[..$1000][..0.12] When 0.12 Is Not Null Then $`` =~$_usn3 Else 1e-1 =~$`7esn` =~1e1 End Desc,{usn1} Desc Skip ({`4esn`:#usn8[\"d_str\"..usn2],`1esn`:12.0[..Count ( * )][..@usn6]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ) =~Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End =~{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Limit ``(Distinct $1000 Is Null,1e-1[$`4esn`])[..{`8esn`:{`3esn`}[..{`4esn`}][..usn2]}]"),
    octest_legacy:ct_string("Foreach(usn2 In 9e0[..{#usn7}][..`4esn`]| Start _usn4=Relationship:usn2({usn1}) ,_usn4=Relationship:`4esn`(\"d_str\")) Union Create (({usn1:#usn7[.9e0..`3esn`][{`6esn`}..1000],_usn4:$usn2 In #usn7 In #usn7})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[``? *0Xa..12{@usn5:01 Ends With .0e0 Ends With 7.0e-0,_usn3:0.0[00..][0xabc..]}]-(`7esn` :`7esn`)),`4esn`=Allshortestpaths(((:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null}))) Detach Delete $`8esn` =~{`1esn`} =~$7,010[{7}..][{`1esn`}..] Union Load Csv With Headers From $@usn5[.9e-1] As `7esn`  Return Distinct $#usn7 Contains 3.9e-1,{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}} Starts With Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With $`7esn` Starts With 999|$`1esn`[..12e-12][...9e12]) Starts With (`4esn` :`8esn`{12})<-[`2esn`?:`4esn`|:`2esn`]-(`4esn` {`8esn`:5.9e-12[0x0..]})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}) Skip {@usn6:{7} Starts With 0x0 Starts With 9e1}[Reduce(`5esn`=$999 Ends With `2esn` Ends With 12.0,_usn3 In `8esn`[_usn4]|_usn3 =~{7} =~123.654)..None(usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-1[1.9e0])] Limit Allshortestpaths(((#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[@usn6?{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}))) In All(`` In `7esn` =~#usn8 =~\"d_str\" Where {#usn7} =~$@usn6 =~$7) In Case When 999[..$@usn5][..``] Then {#usn8} In {12} In .9e12 When $0 Ends With $usn1 Ends With {``} Then 4.9e12 Ends With $@usn6 Else 0[..{0}][..true] End"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn4:``]-()Assert Exists(Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0).@usn5?)"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:``)Assert Exists(Case When .9e1 In .1e-1 Then $7 =~01234567 =~12.0 When $usn2[..$999][..#usn8] Then #usn7 Contains .0e0 Contains $@usn6 Else $`7esn` In $@usn5 End.#usn8)"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:usn2)Assert Exists({@usn6:{123456789} Starts With `6esn`}.`2esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv From 0x0[{`6esn`}..] As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Unique (((`8esn` :`4esn`:usn2{@usn6:$#usn7 Starts With $123456789})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(`3esn` $0)<-[usn2:#usn8|:``]->(`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0}))) Remove Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]).`6esn`!,Allshortestpaths((:`3esn`{usn2:01234567[10.12e12][0Xa]})).`1esn`? Union All Create Unique _usn4=((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})),`4esn`=(({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)) Detach Delete $usn1[..$999][..0e0],`4esn`[9e-12..true],{@usn5} Contains .1e1 Contains {`5esn`} Union All Load Csv From Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}] As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) As @usn6 Union All Optional Match (({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})) Using Index usn1:#usn7(usn1) Remove Reduce(`3esn`={0} Is Not Null,`` In `7esn` =~#usn8 =~\"d_str\"|01234567[\"d_str\"..][$`4esn`..])._usn4.@usn6"),
    octest_legacy:ct_string("Create Unique `8esn`=(({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})) Return Distinct `4esn`[12.0..][9.1e-1..] As `4esn`,true In 0.0 As `5esn` Order By $7 In 1.0 In 01234567 Ascending,@usn5 =~$#usn7 =~{usn1} Ascending Skip #usn8(Distinct {#usn7}[.12e-12],Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Union Create Shortestpath(((({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(_usn4 :`1esn`:``{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}})-[?:@usn5|:#usn7 *0]->({@usn6:{`5esn`} Is Not Null Is Not Null,`6esn`:`4esn`[9e-12..true]})))) Start _usn4=Relationship( {#usn8}) ,`4esn`=Node:usn2(usn1={_usn3}) Optional Match (((`8esn` :`5esn`:`7esn`{usn1:{``} Contains 0.0 Contains `4esn`})-[`2esn`?:`4esn`|:`2esn`{`2esn`:$12[10.12e12][.1e1],#usn7:9e0[..{#usn7}][..`4esn`]}]->(@usn5 {`8esn`:123456789[#usn7..9e-1][10.12e12..{0}],@usn6:1.0 Is Not Null})-[#usn8?:usn2*..]->(:``{usn2:00 Is Not Null Is Not Null}))) Using Join On #usn8,_usn3,`6esn` Using Join On `1esn`,usn1,`7esn`"),
    octest_legacy:ct_string("Merge ``=((:`7esn`{`1esn`:$`8esn` Is Null Is Null,`1esn`:0.12 =~2.9e1 =~9e1})-[:#usn8|:``*{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]->(:``{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) On Match Set Reduce(`4esn`=.12e12[..$123456789],usn1 In $@usn6 Is Null Is Null|2.9e1 Ends With `5esn` Ends With 1000).#usn7.usn1 =Count(*)[@usn5..],_usn3 =0.12 Ends With 7 Ends With 12 On Create Set (:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}).usn2 =Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] Delete Filter(@usn6 In 9e12[..usn2][.._usn3] Where 1.9e0[..0][.._usn3]) Ends With {`6esn`:9e12 Ends With \"d_str\" Ends With 0X7,`3esn`:0X0123456789ABCDEF[1e1..]} Ends With Reduce(@usn5=`` Contains {`6esn`} Contains 123456789,`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|00[$``]),12.0 Starts With 00,Case #usn8 Is Null Is Null When {`1esn`} Contains 1.0 Contains 4.9e12 Then 7 Is Null Is Null End[..Reduce(usn2=1.0 Is Null Is Null,`3esn` In 8.1e1 Contains .9e-1 Contains false|{`6esn`} =~2.12 =~123.654)][..{`3esn`:Count ( * )[_usn4..]}]"),
    octest_legacy:ct_string("Return *,Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789)[..All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 1e1 =~{@usn5} =~`7esn`)][..Case 07[..$`5esn`] When 00[$_usn4][$`1esn`] Then {#usn7}[.12e-12] Else `5esn` Contains 0 Contains $12 End],1.0 Is Null Is Null Order By [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End Ascending,{`7esn`}[0.12] Descending Skip Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12])[Reduce(@usn5=1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$0 Ends With 9e-12 Ends With $_usn4)..] Detach Delete $#usn7 Contains 3.9e-1 Match ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})),`6esn`=(usn1 :#usn8:@usn6) Union All Match (((`7esn` :usn1)<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})<-[`3esn`?:@usn6|:`4esn`]-(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))),``=((:_usn4:`2esn`{@usn5:1e-1[$`4esn`]})<-[? *0]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})) Using Scan ``:`1esn` Merge Shortestpath(((:_usn3{_usn3:010[..9e-1][..0X7]}))) On Match Set `3esn`+=Case .12e-12 Is Null When Count ( * )[_usn4..] Then 7.0e-0 Is Not Null When 2.12[{12}] Then {usn2} Ends With {@usn6} Ends With 1000 End[Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..])][({`3esn`:{`6esn`}[@usn5..{@usn6}],_usn3:@usn6 Starts With #usn7})<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})],_usn4+=Single(_usn3 In `8esn`[_usn4] Where $_usn3[usn2..][usn1..])[{`6esn`:Count(*) =~01234567 =~.1e-1}..[usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]]],`2esn`+=0X0123456789ABCDEF In false Union All Unwind 's_str'[`2esn`][12.0] As `4esn`"),
    octest_legacy:ct_string("Merge @usn6=((`1esn` :`8esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})) On Create Set {usn1:{123456789} Starts With $_usn4 Starts With 0x0,`3esn`:$`4esn` Is Null Is Null}.`7esn`?.`7esn`?.#usn7 =1.9e0 In 2.12,Filter(usn2 In $`5esn`[{`4esn`}][{0}] Where {0}[.1e-1..][_usn4..]).`6esn`.usn1.`7esn`? =12e-12 Ends With $999 Ends With ``,Extract(#usn8 In 07[..$`5esn`] Where 123.654 Ends With {1000} Ends With 9e12|$usn1[..$999][..0e0])._usn3! ={1000} Starts With {`1esn`} On Match Set `7esn`+=Reduce(_usn3=5.9e-12 Is Null Is Null,_usn3 In `8esn`[_usn4]|2.9e1[Count ( * )..]) Is Null,#usn8 =0e0 Ends With .9e0 Ends With 01234567 Union All Start `8esn`=Relationship:`7esn`({`4esn`}) Where 's_str'[`2esn`][12.0] Load Csv From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As `5esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:``)Assert Single(`6esn` In 010[{`1esn`}..] Where {`3esn`} Is Not Null Is Not Null)._usn4 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`2esn`)Assert Exists(Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $`4esn`[usn2..]|{`6esn`}[6.0e0..9e0][.9e1..12e12]).`2esn`)"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:_usn4)Assert Reduce(`7esn`={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],@usn6 In 9e12[..usn2][.._usn3]|10.12e12[usn2])._usn4! Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]) In None(`1esn` In $12 In {usn2} Where $12 =~4.9e12) As `` Fieldterminator \"d_str\" Load Csv From $`8esn`[..5.9e-12][..`8esn`] As `` Fieldterminator 's_str' Detach Delete [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..],{123456789} Contains $#usn7 Contains {#usn8}"),
    octest_legacy:ct_string("Remove Shortestpath(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})).`7esn`?,All(`1esn` In $12 In {usn2} Where {`3esn`}[..0xabc][..{`6esn`}]).`8esn`? Create Unique Shortestpath((_usn4 :usn2)-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})),Shortestpath(((@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})-[@usn5:`6esn` *..00]->(`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Foreach(@usn6 In {`1esn`}[{usn2}]| Load Csv From All(usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0) Ends With Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $123456789 Is Not Null Is Not Null|{`8esn`}[@usn5][$`2esn`]) Ends With (#usn8 :`5esn`:`7esn`{usn2})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )-[_usn4? *..0x0{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]->(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null}) As `` Fieldterminator 's_str') Union Optional Match `1esn`=((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})),`7esn`=Allshortestpaths(((:`7esn`)<-[#usn7?:_usn3 *999..123456789{@usn5:$12 In {usn2},usn1:5.9e-12 Is Null Is Null}]->(`` {`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:`8esn`{#usn8:2.9e1[2.12..1.9e0],#usn8:@usn6[true..]}))) Using Scan `4esn`:`1esn` Using Join On _usn4,usn1,`` Where 4.9e12 Ends With $@usn6"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:`6esn`{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}}))) On Match Set `6esn` =.1e-1[$@usn6],#usn7 =7.0e-0 Is Not Null On Create Set `1esn`+=[_usn3 In `8esn`[_usn4] Where {#usn7} Starts With .1e-1|`3esn` Is Null] Contains `5esn`({#usn8} Ends With _usn3 Ends With `2esn`,.9e0 =~#usn7),@usn6 =[`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0xabc Starts With 12 Starts With 0e-0|{`4esn`} In 1000 In {@usn5}] Is Null,{`1esn`:$999 Is Not Null}.`6esn`? =Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) Return 0.0[$999][`6esn`] Order By $`2esn`[`8esn`..] Descending,({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})<-[`3esn`? *1000..]-(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null}) Contains Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Contains All(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]) Descending Limit $`5esn` =~Count(*) =~1.9e0 Start `1esn`=Rel:`5esn`(@usn5=\"d_str\") ,`5esn`=Node:@usn6(#usn8='s_str') Union With  {`2esn`}[0x0..9e0] As `6esn`,{`8esn`} Ends With true Ends With {`3esn`} As `2esn` Skip {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null) Where 2.9e1 Ends With `5esn` Ends With 1000 Create `2esn`=(:@usn6:_usn3),(`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})<-[`1esn`:#usn7|:@usn5 *..123456789]-({#usn7:{7}[0x0][1e1]})"),
    octest_legacy:ct_string("Create Allshortestpaths((:`3esn`{usn2:01234567[10.12e12][0Xa]})),Shortestpath((@usn5 :_usn4:`2esn`{@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})) Foreach(`7esn` In 12.0[..Count ( * )][..@usn6]| Remove exists(usn1 =~false =~{999},.12e12[..$123456789]).`7esn`?,[`` In `7esn` =~#usn8 =~\"d_str\" Where @usn6 Starts With #usn7|$12 Is Null].`6esn`?,`4esn`(Distinct {`3esn`}[...1e1][..0]).usn2? Unwind .12e12[01..{1000}][8.1e1..Count ( * )] As `2esn`) Load Csv From $`5esn` Contains .9e12 As _usn4 "),
    octest_legacy:ct_string("Drop Constraint On()-[`3esn`:``]->()Assert Exists([usn1 In $@usn6 Is Null Is Null Where {`3esn`}[#usn7]|#usn7[$`8esn`][{`3esn`}]]._usn4!)"),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:`7esn`]-()Assert Exists(Reduce(`1esn`=.9e1 Ends With 0x0,usn2 In .12e-12 Ends With `2esn`|_usn4 Is Not Null Is Not Null)._usn3!.@usn5!)"),
    octest_legacy:ct_string("Create Unique ((`8esn` :`2esn`:`4esn`)-[?:#usn7|:@usn5 *12]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})) Create Unique usn2=(((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(#usn7 :`8esn`))),#usn7=Shortestpath((`1esn` :usn2{`8esn`:12.0[...0e0]})-[?:`1esn`|:`1esn` *..0x0{@usn6:.0e-0 In 12}]-(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})) Match ((:`1esn`:``{`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})),Allshortestpaths((`4esn` :`3esn`)-[`3esn`?:`1esn`|:`1esn`]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})) Using Index `2esn`:usn1(_usn3) Using Scan #usn8:`8esn` Union Remove `4esn`:#usn8:@usn6 Delete {_usn3} Is Null Is Null,$999 Starts With 0e-0 Starts With .9e12,0.12[{@usn6}..{#usn7}] Load Csv From None(`1esn` In $12 In {usn2})[..Reduce(usn2=.9e0 In 8.1e1,`3esn` In 8.1e1 Contains .9e-1 Contains false|$_usn3 Is Not Null)] As #usn7 Fieldterminator 's_str' Union All Load Csv From 12[11.12e-12..][`4esn`..] As @usn6 "),
    octest_legacy:ct_string("Create Constraint On(#usn8:``)Assert Exists({``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}.#usn8?.@usn6?)"),
    octest_legacy:ct_string("Unwind 00[{1000}] As usn1 Union Create `2esn`=Allshortestpaths((:`3esn`{@usn5:9e12[..usn2][.._usn3]})),``=Shortestpath((`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[ *0X0123456789ABCDEF]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})) Optional Match `7esn`=(((:`3esn`{usn2:01234567[10.12e12][0Xa]})-[_usn3?{`8esn`:{usn2} Is Not Null Is Not Null}]->({`7esn`:.9e12 Is Not Null Is Not Null})-[#usn8?:`4esn`|:`2esn` *7{`6esn`:{0} Ends With 0Xa,usn1:.9e1 Is Null Is Null}]->({`1esn`:01 =~{_usn3} =~01,`8esn`:{#usn7} Ends With 999 Ends With 12}))) Using Scan #usn7:_usn3 Using Index #usn7:`4esn`(@usn5) Union All With Distinct *,$`4esn`[...0e-0] Skip [`6esn` In 010[{`1esn`}..] Where 7 Starts With 9e-12|Null[#usn7..][9.1e-1..]][None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`})..][`1esn`(@usn5[9e-1..{`1esn`}],$`4esn`[$@usn6...12e12])..] Limit 00 In {#usn7} In $usn1 Where $#usn7 Ends With 999 Ends With {12} Merge (:@usn5)"),
    octest_legacy:ct_string("Drop Index On:`6esn`(`1esn`)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:@usn6)Assert Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where $#usn7[01..2.12][2.12..3.9e-1]).`3esn`!.`8esn`? Is Unique"),
    octest_legacy:ct_string("Return Distinct 01 Starts With 12 Starts With $`2esn` As usn1,{`8esn`} In {_usn3} In 6.0e0 Order By {`4esn`} Ends With Count(*) Asc,.0e0[{`5esn`}..3.9e-1] Descending,$999 Ends With `2esn` Ends With 12.0 Ascending Load Csv From {@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] As `5esn`  Match `5esn`=(((`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[?:_usn3]->(`8esn` :usn1)-[?:`1esn`|:`1esn` *999..123456789]-(`8esn` :#usn7:`8esn`))),`5esn`=Shortestpath(((@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0}))) Using Scan `4esn`:#usn7 Using Scan `7esn`:`` Where .12e-12[@usn6..'s_str']"),
    octest_legacy:ct_string("Optional Match @usn5=Allshortestpaths((`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})-[`3esn`? *..07]-(#usn7 {_usn4:$12[$`6esn`..][01..]})),((({`1esn`:10.12e12 In Null In .12e12})<-[?:`1esn`|:`1esn`]-(`1esn` :#usn8:@usn6{`7esn`:.1e-1 Contains .12e-12,`2esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(`7esn` ))) Using Index ``:@usn5(usn1) Using Index usn1:#usn7(usn1) Start _usn4=Node:`4esn`({12})  Union Delete $`1esn` Ends With 1000 Foreach(@usn6 In $`7esn` In $0| With  *,{`1esn`} In 0 As _usn3 Order By @usn5[9e-1..0e0][{_usn3}..$usn1] Descending,2.12[`4esn`][.9e-1] Ascending,$`1esn` In 0Xa Desc Skip {1000}[12] Load Csv From 8.1e1['s_str'..] As #usn7 Fieldterminator 's_str') Create (_usn3 {#usn7:$999 =~false =~{`8esn`}})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0}) Union Merge (#usn8 :@usn5{`8esn`:0x0 Ends With #usn8 Ends With .9e-1}) With Distinct *,_usn4['s_str'][8.1e1] Order By $@usn6[.1e-1][9e12] Asc,Case When $999 =~false =~{`8esn`} Then 999 Is Null Is Null When {``} Contains 0.0 Contains `4esn` Then $999 Is Not Null End Contains Case $usn2 In #usn7 In #usn7 When {12} Ends With $`3esn` Ends With 0xabc Then $@usn5 Contains _usn3 End Contains None(usn1 In {#usn7} =~.12e12 =~9e0 Where 0xabc[01234567][.12e-12]) Asc Skip $`4esn`[{usn1}..] Limit {`6esn`} In .0e0 In $0 Foreach(`1esn` In {`7esn`:{`2esn`} Ends With 9e-1 Ends With .1e-1,`7esn`:{@usn6} In 9e12} =~Reduce(_usn3=$usn1[9e1][{999}],usn1 In \"d_str\" Contains {@usn6}|$@usn5 Contains _usn3)| Match `7esn`=(((#usn8 :``{usn2:9e1 =~$`8esn` =~10.12e12})-[_usn3:`6esn`]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}))) Using Index `3esn`:`8esn`(`5esn`) Using Index `3esn`:`8esn`(`5esn`) Create (`1esn` {@usn6:6.0e0[$#usn7..$1000]})-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))"),
    octest_legacy:ct_string("Foreach(`7esn` In 01 Contains Reduce(usn2=$1000[_usn4][{@usn5}],`8esn` In {usn1}[7.0e-0..][3.9e-1..]|9e-12 Ends With 9e1 Ends With 4.9e12) Contains usn2(Distinct `7esn` In _usn4 In $`7esn`,999 Is Null Is Null)| Start `1esn`=Rel:``(#usn8=\"d_str\") ,#usn8=Rel:#usn8(usn2='s_str')Where $`4esn` Ends With .12e12 Ends With 123.654 Unwind 11.12e-12 =~Count ( * ) As `8esn`) Create (_usn4 {`3esn`:.0e-0 In 12}),Shortestpath((@usn6 :_usn4:`2esn`)) Union Match usn2=((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})),Shortestpath(({`6esn`:3.9e-1[..$1000][..0.12]})<-[:`4esn`|:`2esn`{`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]}]-({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})<-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]-({`5esn`:$`4esn` Ends With .12e12 Ends With 123.654,@usn6:{123456789} Contains $0})) Using Index usn1:#usn7(usn1) Union All Detach Delete 7.0e-0[$`6esn`..],`1esn` =~{12} =~{999},{_usn3} =~$12 =~$7 Load Csv With Headers From {#usn7} Starts With .1e-1 As `3esn` "),
    octest_legacy:ct_string("Create Constraint On(_usn4:#usn7)Assert Exists(Shortestpath(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))).usn2!.``)"),
    octest_legacy:ct_string("Match usn2=Allshortestpaths(((@usn6 :usn1{`2esn`:$`6esn` Starts With 0.0}))) Using Scan `1esn`:`8esn` Where {usn1} Is Not Null Is Not Null Remove Allshortestpaths((((@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})-[:`3esn`|`3esn`]-(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(:`4esn`:usn2)))).`6esn`?"),
    octest_legacy:ct_string("Foreach(`7esn` In $`` =~.1e-1| Unwind $123456789 As #usn7) With Distinct *,0 Contains {`2esn`} Union All With Distinct .12e-12[@usn6..'s_str'],Allshortestpaths((((@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[``? *..00{@usn5:$`8esn` =~{`1esn`} =~$7,#usn7:.12e-12 Starts With .12e-12}]->({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]})-[:`8esn`|:#usn8 *01]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))))[..Case When {#usn7} Ends With 999 Ends With 12 Then {`3esn`}[999..$`4esn`] End],5.9e-12[01][`4esn`] As _usn4 Skip Single(`` In `7esn` =~#usn8 =~\"d_str\")[Reduce(`3esn`=1e1[$_usn3],`2esn` In $@usn5 Is Not Null Is Not Null|8.1e1[..9.1e-1][...9e1])][[#usn7 In .0e-0 In 12 Where \"d_str\"[0x0..{@usn6}][$@usn5..0]|{7}[$@usn5..123456789][1e1..1.9e0]]] Remove Extract(usn1 In \"d_str\" Contains {@usn6} Where $`` =~.1e-1|$`3esn` =~0x0).`7esn`.`6esn`!,Filter(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where $1000[_usn4][{@usn5}]).#usn8!,Reduce(`2esn`=$`4esn`[$@usn6...12e12],`1esn` In $12 In {usn2}|{12} Starts With $`` Starts With 0X0123456789ABCDEF).usn1!._usn3 Merge `4esn`=((:``{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[? *..00$_usn3]-({`5esn`:`1esn` In 010 In 1e-1})) On Match Set #usn7 =All(#usn8 In 07[..$`5esn`] Where $@usn6 Starts With 0xabc Starts With {`7esn`})"),
    octest_legacy:ct_string("Create Constraint On(#usn7:usn1)Assert Exists(None(#usn8 In 07[..$`5esn`] Where .1e1 Ends With #usn7 Ends With {#usn7}).`1esn`)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `4esn`($`6esn`[@usn6...9e-12],{12})[None(@usn6 In 9e12[..usn2][.._usn3] Where $7[999..10.12e12][$`1esn`..{usn1}])..Allshortestpaths((:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})-[`5esn`?:`2esn`|`5esn`]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})<-[? *1000..{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]}]->(usn2 :`5esn`:`7esn`))][usn1..Reduce(@usn5=`1esn` In 6.0e0 In 12,`` In `7esn` =~#usn8 =~\"d_str\"|$`6esn` =~$#usn7 =~$`4esn`)] As ``  Remove `5esn`:usn1,Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 01234567[1000..][$`8esn`..]|07[..$`5esn`]).`6esn`.@usn5.usn1"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv From 0.0[$`4esn`] As `` Fieldterminator 's_str' Unwind 12e-12 Starts With $`7esn` As usn2 Merge Shortestpath((((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *0X0123456789ABCDEF]->(`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})-[`2esn`?:@usn6|:`4esn` *010..0{`4esn`:Null[$`3esn`..][`1esn`..],_usn3:6.0e0[$#usn7..$1000]}]-(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]})))) On Create Set usn2 =0xabc Contains {12} Contains {`6esn`},`` =usn2($usn1 =~.0e0 =~{`4esn`}) Contains Allshortestpaths(((#usn8 :@usn5)<-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 )<-[?:`1esn`|:`1esn`{`5esn`:9e1[0.0]}]->(`8esn` ))),_usn3({1000} Is Null,123456789[#usn7..9e-1][10.12e12..{0}]).usn1.`2esn`._usn4 ={123456789} Is Not Null On Match Set Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}).`8esn`!._usn3!._usn3! =Case .9e-1 Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] Else .1e1 Is Not Null Is Not Null End Is Null Is Null,(`1esn` :`8esn`)<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})-[:#usn7|:@usn5]-(:`1esn`:``{`8esn`:5.9e-12[0x0..]}).`6esn`? =Any(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 0xabc[..{usn1}][..\"d_str\"])[Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 0X0123456789ABCDEF Is Not Null Is Not Null)..None(#usn8 In 07[..$`5esn`] Where 8.1e1 Contains .9e-1 Contains false)][Case {0} Is Not Null Is Not Null When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End..[`` In `7esn` =~#usn8 =~\"d_str\"|$_usn4 Ends With {#usn8}]]"),
    octest_legacy:ct_string("Drop Constraint On(usn2:#usn7)Assert Exists(Extract(usn1 In \"d_str\" Contains {@usn6}).`8esn`?.`1esn`?)"),
    octest_legacy:ct_string("Create #usn7=(`4esn` {@usn5:5.9e-12[12e-12][$`8esn`],`5esn`:{123456789} Contains $0})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`) Union Create ((usn1 :@usn6:_usn3)-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})) Start `5esn`=Relationship:@usn6(#usn8='s_str') Where Count(*) Starts With 07 Starts With $#usn7 Create Allshortestpaths(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) Union Detach Delete 0.12[Count ( * )..Count ( * )][$999..`5esn`],Allshortestpaths(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0}))[Reduce(@usn6=10.12e12 Starts With $`4esn` Starts With 0e0,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$1000 Contains $123456789 Contains #usn8)..Case 7[..123456789][..true] When $1000[..0e-0][..010] Then 999 Starts With 7.0e-0 Starts With true End][[`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]]..Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When 0.12[Count ( * )..Count ( * )][$999..`5esn`] Then $123456789[..$999][..`6esn`] Else 7[{`4esn`}..] End] Create Unique Shortestpath(((:_usn4:`2esn`{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(`3esn` $0)<-[`7esn`:#usn8|:`` *01234567..{`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7}]-(#usn8 :usn2))) Delete @usn5[@usn6],{`5esn`}[{usn2}..$`1esn`]"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:`1esn`)Assert Exists(Reduce(`5esn`=8.1e1 Contains $@usn6,#usn7 In .0e-0 In 12|{1000} Starts With 10.12e12 Starts With .0e-0).usn1!)"),
    octest_legacy:ct_string("Create Constraint On()-[usn1:``]-()Assert Exists({@usn5:4.9e12 Ends With $@usn6,`2esn`:0e-0 In 0X0123456789ABCDEF In `3esn`}.`1esn`)"),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv From 0xabc[01234567][.12e-12] As `2esn` "),
    octest_legacy:ct_string("Return Extract(`1esn` In $12 In {usn2} Where 9e-1[1.9e0]) Is Null Is Null As _usn3,1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As usn2,false[9e12] Order By 0xabc[01234567][.12e-12] Ascending,Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`8esn`}[..999][.._usn3]) Starts With Reduce(``=$#usn7 Ends With 999 Ends With {12},`2esn` In $@usn5 Is Not Null Is Not Null|{`6esn`} Starts With .12e-12) Descending Skip 2.12[10.12e12][_usn4] Limit $`5esn` In $12 In `2esn`"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:``)Assert Single(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 00 =~`4esn` =~.9e-12).@usn6!.`4esn`? Is Unique"),
    octest_legacy:ct_string("Match @usn6=((({@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})<-[:@usn5|:#usn7 *0X0123456789ABCDEF{`5esn`:9e-1 Contains 3.9e-1}]->(`6esn` $_usn3)<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),(((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`}))) Using Join On usn1,`1esn`,_usn4 Using Scan `8esn`:`2esn` Foreach(`3esn` In $7| With Distinct $`8esn` Is Not Null Is Not Null As _usn3 Order By Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Descending,\"d_str\" In 7.0e-0 Desc Skip Reduce(_usn3=7.0e-0[$`6esn`..],`7esn` In 0.12 Is Not Null|false Starts With 0 Starts With 2.9e1) =~Case $`3esn` =~0x0 When $12[$@usn5] Then 11.12e-12 In {usn1} When 4.9e12[{_usn4}..] Then $@usn5 Contains _usn3 Else .12e-12 Starts With .12e-12 End =~Reduce(_usn4=_usn4 Is Not Null Is Not Null,`2esn` In $@usn5 Is Not Null Is Not Null|7.0e-0 Is Not Null) Limit {_usn3:.0e-0[..``][..$7]}[..(`6esn` :`4esn`:usn2)-[$#usn8]->(`3esn` :`5esn`:`7esn`)][..@usn5] Load Csv With Headers From {`1esn`} Is Null As @usn6 Fieldterminator \"d_str\") Create (((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))),(usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[``:`1esn`|:`1esn`{@usn5:999[..$@usn5][..``],@usn5:0xabc[..Count(*)][..$`5esn`]}]-(`1esn` :``{_usn4:$@usn5 =~{`3esn`}}) Union All Remove Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {#usn8}[..@usn5]|{0}[.0e-0][$`2esn`]).@usn6?.``?,(`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[?:`1esn`|:`1esn`]-(:@usn5{`1esn`:$999 =~0e0 =~0X7})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12}).`7esn`,{_usn4:$7}.@usn5 Return Distinct 0.12[{@usn6}..{#usn7}] Order By Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) Ascending,Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Descending,.9e-1[`1esn`][7] Ascending Limit {`4esn`}[{`3esn`}][$`2esn`] Union With Distinct *,$`4esn`[#usn7][8.1e1] As `2esn` Skip .1e1 Contains 1e-1 Contains #usn8 Limit 9e1 Ends With `7esn` Ends With 2.12 Where .1e1 Is Not Null Is Not Null Detach Delete Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000),{`4esn`}[..{`2esn`}] Create Allshortestpaths(({`6esn`:8.1e1 Contains .9e-1 Contains false})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})),@usn6=Allshortestpaths(({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})<-[usn2:usn1|usn2]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`6esn`)Assert All(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 1.9e0[.12e-12][9e-12])._usn3!.`4esn`?.#usn7! Is Unique"),
    octest_legacy:ct_string("Create `5esn`=Shortestpath((((#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})))) Foreach(`2esn` In $#usn7 Ends With 999 Ends With {12}| Start `8esn`=Node( {`4esn`}) ,`7esn`=Rel:``('s_str')) Union Merge `4esn`=((`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[?$999]-(`8esn` :@usn6:_usn3)<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})) Start _usn3=Relationship:usn2(`8esn`=\"d_str\") Where $1000[..0e-0][..010] Create Unique (`1esn` {usn2:.9e-12[.12e12..][0Xa..]}),@usn6=Allshortestpaths(((`5esn` :_usn3)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1}))) Union Delete {usn2}[9e-1],{`6esn`}[@usn5..{@usn6}] Merge Allshortestpaths(((`4esn` :@usn5)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[:`3esn`|`3esn` *1000..]->(`1esn` :`7esn`))) On Match Set usn2+=[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]][None(#usn7 In .0e-0 In 12 Where $12 In {usn2})..{`1esn`:{0} Is Null Is Null}][Extract(#usn7 In .0e-0 In 12 Where {#usn8} In {12} In .9e12|{`5esn`} Is Not Null Is Not Null)..Reduce(`7esn`=`7esn` Ends With 10.12e12,usn2 In $`5esn`[{`4esn`}][{0}]|@usn5[9e-1..{`1esn`}])] With  (usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` )<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains ({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[:_usn3]->(`1esn` :`2esn`:`4esn`)-[usn1?:`3esn`|`3esn`{usn2:01[`4esn`..]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Contains ``(Distinct 9e12[..usn2][.._usn3],Count ( * )[_usn4..]) As `2esn`,0.0[..9e1][..2.12] As `` Order By 01234567 Ends With .0e0 Ends With 12e12 Asc,{@usn6:{7} Starts With 0x0 Starts With 9e1}[Reduce(`5esn`=$999 Ends With `2esn` Ends With 12.0,_usn3 In `8esn`[_usn4]|_usn3 =~{7} =~123.654)..None(usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-1[1.9e0])] Ascending,$`6esn` Starts With 0.0 Desc Skip $12[{_usn3}..] Limit 9e0[{7}...0e-0][Null..@usn5] Where 12e12 Contains {0}"),
    octest_legacy:ct_string("Foreach(`5esn` In {@usn5:$@usn5 Is Not Null Is Not Null} Contains None(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`3esn`}[..0xabc][..{`6esn`}])| Delete 9e-1[0.0..],7.0e-0 Ends With {123456789} Ends With @usn6,{`3esn`} Is Not Null Is Not Null Return Distinct 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )],0 In 2.9e1 In 7 As usn2 Limit Any(usn1 In $@usn6 Is Null Is Null)[Case {_usn3}[{0}...9e-1][9e-1...0e0] When 010[..9e-1][..0X7] Then $0 Ends With $usn1 Ends With {``} End..Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]})))]) Union Remove (`3esn` )<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(`7esn` )<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}).#usn8,#usn7(07[{@usn5}..],{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1])._usn3.`4esn`? Union Remove All(#usn7 In .0e-0 In 12 Where 0xabc =~123456789).@usn6.#usn8!.`7esn`,Case {_usn3} In $#usn8 In $12 When `3esn` Starts With 9.1e-1 Starts With .9e-1 Then $1000[_usn4][{@usn5}] Else 12[@usn6][{`2esn`}] End._usn3!.#usn8?.`7esn`?,Case 010[...12e-12] When .9e1[$`1esn`..][$``..] Then Count ( * ) Starts With 0.12 End.`8esn`!.#usn8 Remove Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}).`8esn`!._usn3!._usn3!,Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))).`5esn`?.`8esn`?.@usn5?,[usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-12[010..{#usn7}][{123456789}..7]|Count(*)[..{#usn7}]]._usn4! Load Csv From \"d_str\" Contains {@usn6} As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Case When {1000}[..`5esn`][..9e12] Then Count(*)[..{#usn7}] End.`3esn`? Match `1esn`=((`4esn` :`8esn`{12})) Using Join On `4esn`,`5esn`,@usn6 Using Join On @usn5,_usn4 Where #usn7 =~$@usn5 =~{7} Union All Foreach(`4esn` In [usn2 In $`5esn`[{`4esn`}][{0}] Where $usn2[..$999][..#usn8]][2.9e1..][None(usn2 In .12e-12 Ends With `2esn` Where `7esn`[1.9e0..5.9e-12][9e0..@usn5])..]| Load Csv From {usn2} In false As `6esn` ) Match Shortestpath((:`2esn`:`4esn`{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({#usn7:12e12[.9e12..07]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->()),(`4esn` :`8esn`{12})-[_usn3:`6esn`]-(`3esn` :#usn8:@usn6)-[`1esn`]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]}) Using Index `7esn`:``(`8esn`) Where $usn2 Starts With $999 Starts With .0e0 Foreach(`7esn` In `1esn`[{usn1}..]| Remove None(#usn7 In .0e-0 In 12 Where `8esn`[.12e12..]).`5esn`!,Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0X0123456789ABCDEF Ends With {1000})._usn4?) Union Foreach(`8esn` In 2.12 Is Not Null Is Not Null| Create Unique usn2=Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Optional Match ((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})) Using Index #usn7:`4esn`(@usn5) Using Join On `4esn`,`2esn`,`` Where {123456789} Starts With $_usn4 Starts With 0x0) Create `3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})),(:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[`7esn`?:`7esn`|usn1 *1000..{@usn6:#usn7 In 07,#usn8:$999[usn1..0e-0]}]->(#usn8 :`5esn`:`7esn`{usn2})-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})"),
    octest_legacy:ct_string("Remove _usn3(Distinct 9e1 Starts With $@usn6 Starts With 0e-0,0.12 =~`6esn` =~.9e-1).usn2? Foreach(`4esn` In {0}[..`3esn`][..8.1e1]| Optional Match `7esn`=(@usn5 :@usn5{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6})-[usn2?:`1esn`|:`1esn` *..123456789]-(:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[:_usn3]-(`3esn` ),(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 {#usn7:$999 =~false =~{`8esn`}})) Where {#usn7} Starts With .1e-1) Merge Allshortestpaths(((`8esn` :`7esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 ))) Union Create Unique (:`3esn`{@usn5:9e12[..usn2][.._usn3]}) Union All Delete {`5esn`}[01234567..][5.9e-12..]"),
    octest_legacy:ct_string("Return Distinct @usn5[9e-1..{`1esn`}] As ``,`1esn` Is Not Null As `6esn`,Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) Ends With `2esn` As @usn5 Order By {@usn5}[10.12e12..] Asc,{@usn5}[10.12e12..] Asc Limit Reduce(``=$`3esn` =~#usn8 =~0x0,usn2 In $`5esn`[{`4esn`}][{0}]|_usn3 =~{7} =~123.654) Contains [usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF] Contains Allshortestpaths(((`8esn` :`7esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 )))"),
    octest_legacy:ct_string("Unwind .9e12 Contains 5.9e-12 Contains 9e-1 As `7esn`"),
    octest_legacy:ct_string("Drop Constraint On(usn1:_usn3)Assert Exists(All(`7esn` In 0.12 Is Not Null Where .12e-12[@usn6..'s_str']).`5esn`?.``!)"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:`3esn`)Assert Reduce(@usn6=7.0e-0[$`6esn`..],`6esn` In 010[{`1esn`}..]|$``[9e12..])._usn4 Is Unique"),
    octest_legacy:ct_string("Foreach(`` In Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null)| Start `7esn`=Rel:``('s_str') Where Null[$`3esn`..][`1esn`..]) With  00[..@usn6] As `6esn`,.0e0[$usn1][0] As ``,$`8esn` Contains {@usn6} Contains `7esn` Order By $1000 Is Null Descending,7.0e-0 Ends With {123456789} Ends With @usn6 Descending Limit 1000[{`1esn`}..][$`3esn`..] Load Csv From 1.0 Is Not Null As usn2  Union Unwind $12[$`6esn`..][01..] As @usn6 Union Return *,9e1[12] As usn1,Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``})[`3esn`(Distinct 0 Starts With `7esn` Starts With 9e0,$`4esn` Is Null Is Null)][`7esn`(Distinct $`4esn` Ends With .12e12 Ends With 123.654)] Order By Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1) Starts With Case 7.0e-0[$`6esn`..] When \"d_str\"[0x0..{@usn6}][$@usn5..0] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else $`5esn`[{`4esn`}][{0}] End Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`) Asc,Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``})[`3esn`(Distinct 0 Starts With `7esn` Starts With 9e0,$`4esn` Is Null Is Null)][`7esn`(Distinct $`4esn` Ends With .12e12 Ends With 123.654)] Desc,{`5esn`} Asc Foreach(_usn4 In {`5esn`:$`6esn`[@usn6...9e-12]}[{usn1:$_usn3[0x0][{0}]}..Filter(_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`])][Case When .12e12 Ends With 07 Ends With 3.9e-1 Then 01234567[\"d_str\"..][$`4esn`..] End..Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End]| Start @usn6=Node:usn1({usn2}) ,`7esn`=Node:`5esn`({0})Where #usn7[123.654][{12}]) Create ``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))),``=Allshortestpaths(((@usn6 :@usn5)))"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:@usn6)Assert Exists(None(#usn7 In .0e-0 In 12 Where $123456789).#usn8?)"),
    octest_legacy:ct_string("Create Constraint On()<-[#usn7:`4esn`]-()Assert Exists(All(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[10.12e12]).usn1!)"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`5esn`)Assert Exists(Extract(_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]|{``}[usn1..][{`8esn`}..]).`3esn`?)"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`8esn`)Assert Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where 9e1 Ends With 9e12 Ends With 0x0|`1esn` In 6.0e0 In 12).usn2! Is Unique"),
    octest_legacy:ct_string("Remove Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]).`1esn`.#usn8!,Allshortestpaths(((`4esn` :`8esn`{12})))._usn3! Load Csv With Headers From usn1 =~false =~{999} As @usn6  Union All Delete $12[10.12e12][.1e1],{#usn7}[.9e-12][4.9e12] Start `4esn`=Node:@usn6(\"d_str\") Where $usn2 Is Not Null Is Not Null Remove Case When `2esn` Starts With 010 Starts With `` Then 00[$``] Else @usn6[0x0..][$_usn4..] End.`6esn`,All(usn2 In $`5esn`[{`4esn`}][{0}] Where $`8esn` Is Not Null Is Not Null)._usn4!._usn3?,Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})).`8esn`!"),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:``)Assert Exists(Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..])._usn4!)"),
    octest_legacy:ct_string("With  {usn2} In false As `1esn`,\"d_str\"[0x0..{@usn6}][$@usn5..0] Limit (:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})-[_usn4:_usn3{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]}) Ends With (`5esn` {`2esn`:00[Null..usn2],`2esn`:3.9e-1[..$1000][..0.12]})<-[#usn8]->(`2esn` :_usn3{`6esn`:_usn4[{``}..{`6esn`}][$7..$_usn3],`6esn`:$`4esn` Ends With {999}})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12}) Ends With Allshortestpaths((((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})-[?:usn2{_usn4:$_usn4[..$999],#usn8:Null[#usn7..][9.1e-1..]}]->(`2esn` {usn1:true In 0.0,@usn5:{`1esn`} Is Null})))) Return Distinct [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] =~Single(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) =~Case @usn5 In Null When {usn1} Is Not Null Then $`5esn` Is Null When $`8esn`[..5.9e-12][..`8esn`] Then 7.0e-0[$`6esn`..] Else $0 Contains $123456789 Contains {`3esn`} End As `5esn`,0[..12][..{`8esn`}] As usn1,{usn1} Is Not Null As `` Order By 0.0[00..][0xabc..] Ascending,.9e-12[.12e12..][0Xa..] Desc,Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) Asc Limit 123456789[_usn4..`1esn`][$`6esn`..{@usn6}]"),
    octest_legacy:ct_string("Create Constraint On()-[``:`4esn`]-()Assert Exists((`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(`1esn` :#usn7:`8esn`).@usn6!)"),
    octest_legacy:ct_string("Create Constraint On()<-[`1esn`:@usn5]-()Assert Exists([_usn3 In `8esn`[_usn4] Where 0[..{#usn7}][..$_usn3]|usn2 Contains `2esn` Contains {1000}].`3esn`!)"),
    octest_legacy:ct_string("With  $#usn8[$0..`3esn`][1e-1..$7] As `5esn`,{0} Is Not Null As `` Limit $_usn3 In `2esn` In `3esn` Where _usn3[{#usn7}] Start _usn4=Relationship:@usn6(\"d_str\") ,`8esn`=Rel:`1esn`(`1esn`={usn1}) Union All Load Csv With Headers From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As usn2  Create _usn3=Shortestpath((`2esn` :`1esn`:``{usn2:{0}[.0e-0][$`2esn`],_usn4:@usn6 Ends With $`2esn` Ends With 1.0})-[`7esn`?:@usn5|:#usn7]->(`7esn` :@usn5)),Allshortestpaths((`6esn` :`4esn`:usn2)-[? *0Xa..12{`4esn`:9e-12[$7..]}]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:_usn4)Assert Exists(Reduce(_usn4=1e-1 =~$`7esn` =~1e1,usn2 In .12e-12 Ends With `2esn`|0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}]).usn2!)"),
    octest_legacy:ct_string("Create Constraint On(_usn4:`5esn`)Assert None(`7esn` In 0.12 Is Not Null Where $`7esn` Starts With 's_str').@usn5?.#usn7? Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv With Headers From $#usn7[01..2.12][2.12..3.9e-1] As usn2 Fieldterminator 's_str' Foreach(`` In [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01|_usn4 Ends With {`8esn`} Ends With usn2][Any(usn1 In $@usn6 Is Null Is Null Where `3esn` Is Null)..]| Return Distinct Count(*)[{12}..{#usn8}] As @usn6,$123456789 =~1e-1,`5esn`({`5esn`}[01234567..][5.9e-12..],5.9e-12 Is Null Is Null)[Reduce(#usn7={12} Ends With $`3esn` Ends With 0xabc,usn1 In $@usn6 Is Null Is Null|`1esn`[Null][{@usn6}])..@usn5(`3esn` Contains `2esn` Contains {_usn4},2.9e1 In {``})][Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789}))..Any(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`)] As _usn4 Order By ({`5esn`:$`4esn` Ends With .12e12 Ends With 123.654,@usn6:{123456789} Contains $0})-[`6esn`?:#usn7|:@usn5 *01234567..{`4esn`:`` Ends With 1.0 Ends With usn1,`7esn`:999[..$@usn5][..``]}]-(_usn3 {`2esn`:5.9e-12[0x0..]})-[`5esn`?:@usn5|:#usn7{`4esn`:9e-12[$7..]}]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})[[`6esn` In 010[{`1esn`}..] Where $12 Ends With 7.0e-0 Ends With 9e-12]..Reduce(`6esn`=$@usn5[``..],usn1 In {#usn7} =~.12e12 =~9e0|0xabc[..Count(*)][..$`5esn`])][Case When .1e1 Is Not Null Is Not Null Then @usn6 Starts With #usn7 When {1000}[`2esn`...0e-0][9e-1..0X7] Then $`8esn`[..12][..9e12] End..{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}] Desc Limit 12[11.12e-12..][`4esn`..]) Start `6esn`=Rel(7,0X7,0,01) "),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv From `8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End As ``  Delete {`6esn`} =~2.12 =~123.654,$`5esn` In $12 In `2esn` Return Distinct *,Any(`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]) In Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4})"),
    octest_legacy:ct_string("Load Csv From $`5esn` Contains .9e12 As _usn4 "),
    octest_legacy:ct_string("Detach Delete Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] Match #usn7=Shortestpath((((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2)))) Using Join On ``,usn1,`2esn` Where $@usn6[``..][3.9e-1..] Union Remove (`` {usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]})<-[?:`3esn`|`3esn` *999..123456789{_usn3:$`4esn`[$@usn6...12e12]}]->(`` :usn1{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null}).#usn8._usn3.@usn6? Union Load Csv From {`7esn`}[$12..123456789] As _usn4 Fieldterminator \"d_str\" Start `4esn`=Node:@usn6(\"d_str\")  With  {@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] As ``,2.12[010..][{999}..] Limit {0}[..`3esn`][..8.1e1]"),
    octest_legacy:ct_string("Load Csv From .9e0 Is Null As `3esn`  Start _usn4=Node:`1esn`(`4esn`={@usn5}) ,`2esn`=Rel:`6esn`(`4esn`=\"d_str\")Where $`1esn`[..12e-12][...9e12] Union Return Distinct $`` Ends With #usn7 Ends With _usn3 As _usn3,{@usn6:2.9e1[{`2esn`}],usn1:01 Contains 9e-12 Contains $7} Is Null Is Null As @usn6 Skip {`8esn`}[.0e0..][999..] Union Create Unique @usn6=((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))"),
    octest_legacy:ct_string("Create Constraint On(@usn6:_usn4)Assert Case 0e-0[..7.0e-0][..{`8esn`}] When $`8esn`[0x0][.9e0] Then #usn8 =~{@usn5} End._usn3.`8esn`.#usn8! Is Unique"),
    octest_legacy:ct_string("Create Index On:_usn3(`7esn`)"),
    octest_legacy:ct_string("Create Shortestpath(((#usn7 :`1esn`:``)<-[?:`4esn`|:`2esn`]-(_usn3 :`4esn`:usn2)-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]}))),usn2=((`4esn` :`8esn`{12})) Union Create Unique (`8esn` :`6esn`),`8esn`=(({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]})-[`2esn`?:@usn6|:`4esn` *010..0{`4esn`:Null[$`3esn`..][`1esn`..],_usn3:6.0e0[$#usn7..$1000]}]-(#usn7 :usn2{@usn6:12e-12 In .9e0,@usn6:0Xa[999]})-[`3esn`{`4esn`:12e12[.9e12..07]}]-(:`4esn`:usn2{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})) Return *,`4esn`[..7][..$usn2] As #usn8,Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where $#usn7[01..2.12][2.12..3.9e-1]) =~_usn3(.0e-0 Ends With $`2esn` Ends With `5esn`,$usn1 =~.9e12 =~`6esn`) =~Reduce(_usn3=5.9e-12 Is Null Is Null,_usn3 In `8esn`[_usn4]|2.9e1[Count ( * )..]) As `8esn` Order By 0.0[$999][`6esn`] Asc Limit 10.12e12 Contains .9e0 Union All Foreach(usn2 In $usn1 Ends With {`2esn`} Ends With $usn1| Match `5esn`=(((`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[?:_usn3]->(`8esn` :usn1)-[?:`1esn`|:`1esn` *999..123456789]-(`8esn` :#usn7:`8esn`))),`5esn`=Shortestpath(((@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0}))) Using Scan `4esn`:#usn7 Using Scan `7esn`:`` Where .12e-12[@usn6..'s_str'] Start #usn7=Relationship:#usn8(usn2={12}) Where 01234567 Ends With .0e0 Ends With 12e12)"),
    octest_legacy:ct_string("Create Constraint On(#usn8:`5esn`)Assert All(usn2 In $`5esn`[{`4esn`}][{0}] Where 7.0e-0 Is Not Null).`2esn` Is Unique"),
    octest_legacy:ct_string("Match ``=((:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})-[?:`4esn`|:`2esn`{usn1:{123456789} Starts With `6esn`,@usn5:9e1 Ends With 9e12 Ends With 0x0}]-(`2esn` :usn1)) Using Index `6esn`:`6esn`(`7esn`) Foreach(#usn7 In 0e0 =~{12} =~{1000}| With Distinct *,$`5esn` Is Null As `1esn`,.0e-0[..01234567] Order By 0[10.12e12] Descending,`1esn`({`4esn`} Ends With Count(*),$usn1 Contains 4.9e12 Contains $`2esn`) Is Not Null Is Not Null Asc,{`1esn`} Contains 1.0 Contains 4.9e12 Desc Where $0 Ends With $usn1 Ends With {``}) Optional Match `5esn`=((`3esn` :`1esn`:``{usn1:$usn1[9e1][{999}],#usn8:0e-0[$``..10.12e12]})<-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]->({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(`4esn` :@usn5)) Union Unwind [_usn3 In `8esn`[_usn4] Where `7esn` Ends With 10.12e12] As _usn3 Create Unique `7esn`=Allshortestpaths((`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})<-[_usn3? *..123456789{`6esn`:.0e-0[..``][..$7],usn2:{usn2} Ends With {@usn6} Ends With 1000}]-(`8esn` :`4esn`:usn2{@usn6:$#usn7 Starts With $123456789})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(#usn8 :_usn4:`2esn`{`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})),((:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(`2esn` :_usn3)<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(:#usn7:`8esn`))"),
    octest_legacy:ct_string("Merge @usn5=Allshortestpaths(((`8esn` :`8esn`)<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))) On Create Set {@usn5:$@usn5 Is Not Null Is Not Null}._usn3.`7esn` =(:`1esn`:``{`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]})-[:`1esn`|:`1esn` *999..123456789{@usn5:$999 Ends With `2esn` Ends With 12.0}]->(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}) Contains Case {`8esn`} In {_usn3} In 6.0e0 When 9e0[..{#usn7}][..`4esn`] Then .12e12 Is Not Null When #usn8[$`2esn`] Then 3.9e-1 Starts With .9e0 Starts With {#usn7} Else 8.1e1 Contains .9e-1 Contains false End Contains Extract(#usn7 In .0e-0 In 12 Where {0}[.0e-0][$`2esn`]) On Create Set usn2+=[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]][None(#usn7 In .0e-0 In 12 Where $12 In {usn2})..{`1esn`:{0} Is Null Is Null}][Extract(#usn7 In .0e-0 In 12 Where {#usn8} In {12} In .9e12|{`5esn`} Is Not Null Is Not Null)..Reduce(`7esn`=`7esn` Ends With 10.12e12,usn2 In $`5esn`[{`4esn`}][{0}]|@usn5[9e-1..{`1esn`}])] Start `2esn`=Rel( {``}) Where .9e1[$`1esn`..][$``..] Remove count(Distinct $1000 Starts With {@usn6} Starts With $@usn5)._usn3.usn1?,@usn5(Distinct $7[999..10.12e12][$`1esn`..{usn1}],$`5esn` Is Null).usn1.``?.#usn8 Union With  {0} Is Not Null As ``,00 Is Not Null Is Not Null Limit Allshortestpaths((((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})-[?:usn2{_usn4:$_usn4[..$999],#usn8:Null[#usn7..][9.1e-1..]}]->(`2esn` {usn1:true In 0.0,@usn5:{`1esn`} Is Null})))) In Extract(#usn7 In .0e-0 In 12 Where {#usn8}[..@usn5]) In [`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 10.12e12[usn2]|{1000} Starts With 10.12e12 Starts With .0e-0] Create Unique ``=Shortestpath((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})),`2esn`=Shortestpath((`1esn` {@usn5:$12 Is Null,@usn6:.1e1 Ends With #usn7 Ends With {#usn7}})<-[?{@usn5:@usn6[999][1000]}]-(:usn1{#usn8:2.9e1[{`2esn`}]})) Foreach(`2esn` In 010[.0e-0..\"d_str\"][.9e0..123.654]| Create Unique `6esn`=(@usn6 :`5esn`:`7esn`) Remove (:`1esn`:``{`8esn`:0X0123456789ABCDEF Ends With {1000}})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`6esn` :`4esn`:usn2).`2esn`!._usn4?.`4esn`!,Case `1esn` =~{12} =~{999} When .9e1[$`1esn`..][$``..] Then $12 Is Null Is Null When $#usn7[01..2.12][2.12..3.9e-1] Then $999 Ends With `2esn` Ends With 12.0 End.usn1!.`6esn`!.#usn7!) Union All Remove Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .12e12 Starts With 5.9e-12 Starts With `4esn`).`3esn`? Delete {`6esn`}[@usn5..{@usn6}],00[$_usn4][$`1esn`] Create @usn5=Allshortestpaths(({@usn6:{`5esn`} Is Not Null Is Not Null,`6esn`:`4esn`[9e-12..true]})<-[#usn7?]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})),#usn7=Shortestpath((((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))))"),
    octest_legacy:ct_string("Unwind [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..] As `2esn` Union All Merge Shortestpath((#usn8 {usn2:$0 Ends With 9e-12 Ends With $_usn4,`5esn`:0e-0[{@usn6}]})-[`8esn`?:_usn3]->(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})) On Create Set count(01234567 =~12e12 =~.0e-0,$999 Is Not Null).@usn6?.`1esn`.`8esn`? =All(usn1 In \"d_str\" Contains {@usn6} Where 10.12e12 Contains .9e0) Ends With Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $123456789 Is Not Null Is Not Null|{`8esn`}[@usn5][$`2esn`]) Ends With (#usn8 :`5esn`:`7esn`{usn2})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )-[_usn4? *..0x0{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]->(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null}),.12e12._usn3? =01[`4esn`..] Merge `4esn`=(`7esn` :``{usn2:$7})-[:#usn8|:`` *..07{@usn5:01234567[\"d_str\"..][$`4esn`..],`6esn`:$usn1 Ends With {`2esn`} Ends With $usn1}]->(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1}) On Create Set (`3esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[?:`4esn`|:`2esn` *01]-(`` :``).`1esn`.@usn5! =None(`` In `7esn` =~#usn8 =~\"d_str\" Where $`4esn` In {999}) Starts With ({usn1:12[..$`5esn`]})-[:`1esn`|:`1esn` *999..123456789{@usn5:$999 Ends With `2esn` Ends With 12.0}]->(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}) Starts With Case When $#usn8 Is Not Null Is Not Null Then $#usn8[$0..`3esn`][1e-1..$7] When $`` Starts With $`4esn` Starts With `3esn` Then .12e12[$usn1..][{@usn6}..] End,#usn7+=.9e-1 Is Null Is Null Unwind `1esn` In 010 In 1e-1 As `8esn` Union All Load Csv From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As `5esn` Fieldterminator 's_str' Return Distinct *,$`8esn` Contains _usn4 As `8esn`,Count(*)[@usn5..] As #usn8 Limit 2.12[`4esn`][.9e-1]"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:_usn3)Assert Exists({}._usn3!.usn2)"),
    octest_legacy:ct_string("Create Constraint On()-[`6esn`:@usn6]-()Assert Exists(Filter(#usn7 In .0e-0 In 12 Where 123.654 Ends With {1000} Ends With 9e12).#usn8!.`6esn`)"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From `1esn`[{@usn5}..][{_usn4}..] As `6esn` "),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:`2esn`]->()Assert Exists(Filter(usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF).`7esn`)"),
    octest_legacy:ct_string("Drop Constraint On()-[@usn5:`8esn`]->()Assert Exists({`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}.`5esn`)"),
    octest_legacy:ct_string("Merge (#usn8 :`8esn`{usn1:{1000} Starts With 10.12e12 Starts With .0e-0,`7esn`:11.12e-12 Ends With 's_str'})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]}) On Create Set {_usn3:$999 Is Not Null}.@usn6! =_usn4 On Create Set @usn5 ={``}[$usn2..00][{_usn3}..123.654],_usn4 =Reduce(`3esn`=`7esn`[1.9e0..5.9e-12][9e0..@usn5],`` In `7esn` =~#usn8 =~\"d_str\"|{_usn3}[{0}...9e-1][9e-1...0e0])[Case false Contains {`7esn`} When `3esn` Is Null Then `1esn` Is Not Null Is Not Null Else .9e-1 Is Null Is Null End..][Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999})..],{@usn5:`2esn`}.``! =\"d_str\" Starts With `` Foreach(usn2 In {123456789} In \"d_str\"| Unwind \"d_str\" In usn2 In $`7esn` As @usn6 Optional Match @usn5=Shortestpath((`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})<-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-(@usn5 :@usn6:_usn3{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`2esn` *1000..{`2esn`:{@usn6} In 9e12}]->(:usn1{usn1:true In 0.0,@usn5:{`1esn`} Is Null})) Where `6esn`[$@usn5][01]) Union All With  $12 Ends With 7.0e-0 Ends With 9e-12 As usn1,{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] As ``,9e-1 Contains .12e-12 Contains $0 Order By `6esn`[$@usn5][01] Descending,{`5esn`} Desc Skip 123.654 Is Not Null Is Not Null Limit Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null"),
    octest_legacy:ct_string("Detach Delete All(#usn8 In 07[..$`5esn`] Where $@usn6 Starts With 0xabc Starts With {`7esn`})[Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null|.0e0[usn1..7.0e-0][$`5esn`...9e-12])..],$`3esn` =~#usn8 =~0x0 Start usn2=Relationship:#usn8(usn2={@usn5}) Where `2esn`[`7esn`][1000] Match #usn8=Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789})),`4esn`=Allshortestpaths(((:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null}))) Where .9e12 Contains 0 Contains $0"),
    octest_legacy:ct_string("Foreach(usn2 In 0.12 Ends With 7 Ends With 12| Load Csv From $`8esn`[..5.9e-12][..`8esn`] As `` Fieldterminator 's_str') Remove Extract(usn1 In $@usn6 Is Null Is Null|010[...12e-12]).``.usn2?.usn1?,@usn5(`3esn` Contains `2esn` Contains {_usn4},2.9e1 In {``}).#usn8,Shortestpath((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})).`8esn`? Remove [usn1 In $@usn6 Is Null Is Null Where $`1esn`[4.9e12..][_usn3..]|$1000 Is Null].`8esn`?,Reduce(`3esn`=.1e1[{@usn6}][true],_usn3 In `8esn`[_usn4]|.9e-1 Contains .9e0 Contains ``).`5esn`.usn2?.`7esn` Union All Unwind Allshortestpaths((_usn4 {`3esn`:.0e-0 In 12})) Is Null Is Null As `4esn` Remove {#usn7:1e-1[$`4esn`]}.`1esn`!.usn1?.`4esn`!,[`6esn` In 010[{`1esn`}..] Where $usn1[..$999][..0e0]|true[1.9e0..]].@usn6! With Distinct * Where $123456789[{usn1}][.12e-12]"),
    octest_legacy:ct_string("With  9e1 =~$`8esn` =~10.12e12 Limit 5.9e-12[\"d_str\"..][{`6esn`}..] Where {`8esn`}[..999][.._usn3] Unwind Filter(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[$usn1..])[..Shortestpath((((`1esn` {@usn6:6.0e0[$#usn7..$1000]})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})-[usn2 *7]-(`8esn` {_usn3:.0e-0[..``][..$7],_usn4:{#usn8} Ends With _usn3 Ends With `2esn`}))))][..{`3esn`:$`6esn` Starts With 0.0,#usn8:$usn1 =~.0e0 =~{`4esn`}}] As @usn6 Create Unique #usn7=Allshortestpaths(((:``{usn1:`4esn` Is Not Null})<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 ))) Union All With Distinct {@usn5} As usn1 Skip Shortestpath(((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(_usn3 :usn1)))[..{_usn4:.9e-1 Ends With .0e-0 Ends With {_usn3},_usn4:9e1 Ends With 9e12 Ends With 0x0}][..Reduce(#usn8=`8esn`[_usn4],`1esn` In $12 In {usn2}|$`4esn` Is Not Null)] Optional Match Shortestpath(((`7esn` {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF})<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))) Using Join On `2esn`,`6esn` Using Join On `4esn`,`2esn`,`` Where #usn8 Is Null Is Null Detach Delete {999} =~$`6esn` =~$`6esn`,9e0[`7esn`..][#usn8..],$`4esn` Contains `4esn` Contains .0e-0 Union All Optional Match Allshortestpaths(((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),_usn3=(#usn7 :@usn6:_usn3)-[`6esn`?:@usn5|:#usn7{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}) Foreach(#usn7 In .0e0 Starts With $usn1 Starts With {`6esn`}| Load Csv From $1000[$`2esn`..] As `1esn`  Create (:@usn5),_usn3=((`1esn` :`8esn`)<-[:usn1|usn2]-(`` :`4esn`:usn2)<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``)))"),
    octest_legacy:ct_string("Create Constraint On(usn2:`6esn`)Assert (@usn6 {usn1:0Xa In 1.0 In $@usn5})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]}).#usn7.`8esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:#usn8)Assert Exists(None(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 0xabc[..{usn1}][..\"d_str\"]).``?.`2esn`!.`1esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`2esn`)Assert Exists(Case When $`6esn`[..01][..{_usn3}] Then .9e-1 Ends With .0e-0 Ends With {_usn3} When usn2 Contains `2esn` Contains {1000} Then $`4esn`[$@usn6...12e12] End.`7esn`?)"),
    octest_legacy:ct_string("Unwind $`6esn`[..01][..{_usn3}] As #usn7 Optional Match Shortestpath(((`` :`7esn`))),Allshortestpaths((:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[*{usn1:{`6esn`} In .0e0 In $0,usn1:07[..$`5esn`]}]-(:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:usn2]-(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1})) Using Index @usn5:`5esn`(usn2) Using Index @usn5:usn1(`4esn`) Create Unique ((#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[@usn6?{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}))"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:usn2)Assert Case When {usn2} Is Not Null Is Not Null Then false Contains {`7esn`} When $12[$`6esn`..][01..] Then .0e-0[..``][..$7] End.#usn8.@usn6? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`7esn`)Assert `3esn`({`3esn`}[...1e1][..0]).`7esn`?.usn1! Is Unique"),
    octest_legacy:ct_string("Delete {12} Ends With 1e1,(`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Is Not Null Is Not Null,[`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where .0e-0[..``][..$7]|0[..12][..{`8esn`}]] Ends With Single(`2esn` In $@usn5 Is Not Null Is Not Null Where .9e1[$`1esn`..][$``..]) Ends With All(@usn6 In 9e12[..usn2][.._usn3] Where `8esn`[_usn4]) Remove Reduce(usn1=Null In {7},`3esn` In 8.1e1 Contains .9e-1 Contains false|00[$_usn4][$`1esn`]).usn1?,Reduce(@usn6=$`8esn` =~{`6esn`} =~12,#usn7 In .0e-0 In 12|123456789[_usn4..`1esn`][$`6esn`..{@usn6}]).`3esn`!,Case 7 Starts With 9e-12 When .9e12 Is Not Null Is Not Null Then 1000[{`1esn`}..][$`3esn`..] Else {`6esn`}[6.0e0..9e0][.9e1..12e12] End.`1esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:#usn7]->()Assert Exists([`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$usn2 Starts With $999 Starts With .0e0].usn1)"),
    octest_legacy:ct_string("Create Shortestpath(((`7esn` {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF})<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))),`5esn`=Shortestpath((((#usn8 :`8esn`{usn1:{1000} Starts With 10.12e12 Starts With .0e-0,`7esn`:11.12e-12 Ends With 's_str'})<-[? *1000..]->({usn1:true In 0.0,@usn5:{`1esn`} Is Null})<-[`4esn`?:`4esn`|:`2esn`]->(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})))) Create Unique `4esn`=((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})<-[ *01234567..{usn1:{12} Contains `8esn` Contains @usn5}]->(usn1 :@usn6:_usn3)-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})),(:`3esn`{@usn5:9e12[..usn2][.._usn3]})<-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]->(:`5esn`:`7esn`{`1esn`:{1000}[..`5esn`][..9e12]})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(@usn5 :`3esn`{`8esn`:0x0 Ends With #usn8 Ends With .9e-1}) Union Create (#usn8 :_usn4:`2esn`) Delete Filter(`2esn` In $@usn5 Is Not Null Is Not Null Where {12} Ends With $`3esn` Ends With 0xabc)[Case When {0} Is Null Is Null Then $``[1.0..][_usn3..] Else 999[..$@usn5][..``] End..],Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null,$0 =~{@usn5} =~1e1 Start _usn4=Node:@usn6(#usn8='s_str')  Union Start `4esn`=Node:usn2(usn1={_usn3}) ,`4esn`=Node:@usn6(\"d_str\")"),
    octest_legacy:ct_string("Drop Constraint On()-[`5esn`:#usn7]->()Assert Exists((:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]})<-[#usn8?:_usn3 *..123456789]->(usn1 :_usn4:`2esn`).`2esn`.``)"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:`7esn`)Assert Exists(@usn5(Count(*)[Count ( * )][{0}],`4esn` =~010).`7esn`._usn4?.@usn5?)"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:#usn8)Assert Exists(Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where 0[10.12e12]|$usn2[..$999][..#usn8]).`6esn`!.#usn7!)"),
    octest_legacy:ct_string("Create Unique `5esn`=Allshortestpaths((({`6esn`:8.1e1 Contains .9e-1 Contains false}))) Return {1000} Is Null As `2esn`,(`` {`7esn`:`4esn` =~010})<-[:`5esn`{_usn4:0e-0[..$usn2],usn2:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]-(`6esn` :_usn4:`2esn`)-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}) Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` Ends With 10.12e12) As `8esn`,$`` =~$_usn3 Order By {`5esn`} Desc,@usn5 =~$#usn7 =~{usn1} Ascending Skip .12e-12[9e1] Limit (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])] Match _usn4=Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]}))),`3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})) Using Join On `6esn`,_usn3 Using Index @usn5:@usn6(`5esn`) Union All Optional Match `4esn`=(#usn7 :@usn5)-[:`8esn`|:#usn8 *0X7..0Xa]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(_usn4 :`5esn`:`7esn`{_usn4:$_usn3[.0e-0..999]}),({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`1esn`?:`3esn`|`3esn` *..00]-(`5esn` {@usn5:`2esn`}) With  @usn5[9e-1..{`1esn`}] As ``,`1esn` Is Not Null As `6esn`,Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) Ends With `2esn` As @usn5 Limit [`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]][None(#usn7 In .0e-0 In 12 Where $12 In {usn2})..{`1esn`:{0} Is Null Is Null}][Extract(#usn7 In .0e-0 In 12 Where {#usn8} In {12} In .9e12|{`5esn`} Is Not Null Is Not Null)..Reduce(`7esn`=`7esn` Ends With 10.12e12,usn2 In $`5esn`[{`4esn`}][{0}]|@usn5[9e-1..{`1esn`}])] Where {`1esn`} Contains 1.0 Contains 4.9e12 Union All Foreach(@usn6 In $0 Ends With $usn1 Ends With {``}| Remove Shortestpath((({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}))).@usn5.`1esn`?,{@usn5:{0} In {`1esn`}}.#usn7?.`4esn`! Load Csv From 0.12 In $`` As usn2 )"),
    octest_legacy:ct_string("Match _usn4=((_usn3 :`6esn`)<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})),Allshortestpaths(((`1esn` :usn2{`8esn`:12.0[...0e0]}))) Where $`5esn`[$_usn3][$12] Return Distinct {@usn6:$12 Is Null} In (`4esn` {`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}) As usn2,Case When .9e-1 Is Not Null Is Not Null Then $12[$`6esn`..][01..] When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] Else {`8esn`}[9e12..][{_usn4}..] End Is Null Is Null Limit 01 =~07 Remove {`7esn`:`3esn` Starts With 9.1e-1 Starts With .9e-1}.@usn6?,All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 0 In 2.9e1 In 7).#usn7!,#usn8(Distinct _usn4 Ends With {`8esn`} Ends With usn2).`6esn`?"),
    octest_legacy:ct_string("With Distinct *,None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0) Optional Match (:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})<-[usn2?:`2esn`|`5esn`{``:{#usn7} =~$@usn6 =~$7}]->(usn2 :`2esn`:`4esn`{`6esn`:Count(*)[$7]}),Shortestpath((#usn8 :`5esn`:`7esn`{usn2})) Unwind `4esn` =~_usn4 =~0e-0 As `7esn` Union All Unwind $usn1[0e0...9e-12] As usn1 Match (`6esn` :_usn4:`2esn`) Using Index _usn3:usn2(`4esn`) Using Scan #usn8:`1esn` Where $`5esn` =~Count(*) =~1.9e0 Load Csv With Headers From 9e-1[{7}..1e-1][0.12..{12}] As @usn6  Union All Return *,0.12 In $`4esn` In $`3esn` As usn1 Skip #usn8(Distinct {#usn7}[.12e-12],Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) Limit Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] With Distinct *,0.12 In $`4esn` In $`3esn`,{`8esn`} In {_usn3} In 6.0e0 As `5esn` Order By {`3esn`} Is Not Null Is Not Null Ascending,01234567 Ends With .0e0 Ends With 12e12 Descending,Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})) Asc Skip .9e1 In {#usn7} In .9e-12"),
    octest_legacy:ct_string("Unwind {@usn6} In 9e12 As usn2 Unwind Case 9e-12[$7..] When {``} Is Null Is Null Then .9e12 Contains 0 Contains $0 When Null Then $@usn6[.1e-1][9e12] End[..Extract(usn1 In $@usn6 Is Null Is Null Where 0Xa In 1.0 In $@usn5|Null[#usn7..][9.1e-1..])][..(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`3esn`?:`1esn`|:`1esn`]-(#usn8 {``:@usn6 Starts With #usn7,@usn6:7[..123456789][..true]})] As `2esn` Remove Any(#usn7 In .0e-0 In 12 Where 123.654 Ends With {1000} Ends With 9e12).usn2.`6esn`.#usn7?,_usn3({`5esn`} Is Not Null Is Not Null,$usn1 Contains 4.9e12 Contains $`2esn`).usn2?,Any(`7esn` In 0.12 Is Not Null Where 01234567[1000..][$`8esn`..]).`1esn`.usn2?.usn1!"),
    octest_legacy:ct_string("Drop Constraint On()<-[``:`7esn`]-()Assert Exists(Extract(usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|{`3esn`}[..0xabc][..{`6esn`}]).`8esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv From #usn7 Is Null Is Null As `2esn` Fieldterminator 's_str' Merge Shortestpath((((:`3esn`{usn2:01234567[10.12e12][0Xa]})-[_usn3?{`8esn`:{usn2} Is Not Null Is Not Null}]->({`7esn`:.9e12 Is Not Null Is Not Null})-[#usn8?:`4esn`|:`2esn` *7{`6esn`:{0} Ends With 0Xa,usn1:.9e1 Is Null Is Null}]->({`1esn`:01 =~{_usn3} =~01,`8esn`:{#usn7} Ends With 999 Ends With 12})))) On Create Set `4esn` =Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null,{``:`6esn` =~999 =~$999}.`3esn`! =.1e1 In $999 In {#usn8},@usn5 =9e1 In $1000"),
    octest_legacy:ct_string("Merge (:`4esn`:usn2{usn2:0.0[00..][0xabc..],usn2:$`7esn` Starts With 's_str'})-[`3esn`?:`1esn`|:`1esn`]-(`7esn` :usn1)<-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(@usn6 {``:$`6esn` Starts With 0.0}) On Match Set @usn6+=00 =~`4esn` =~.9e-12,`3esn` =$123456789,[usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF].`5esn`! =.0e-0 Ends With $`2esn` Ends With `5esn` With Distinct $`8esn`[{`2esn`}..11.12e-12][{`7esn`}..@usn5],{999} Contains $12 Contains 00 As usn2 Order By {`8esn`}[..`5esn`][..01] Asc,[@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1][(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)..] Asc Where {#usn7} Is Not Null Unwind 00[{1000}] As usn1 Union All Unwind 0.0[$`4esn`] As `2esn` Create Allshortestpaths(((:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))),((usn2 :`2esn`:`4esn`)<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]->(_usn4 :`6esn`$_usn3)-[usn2?*]->(@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})) Remove (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)}).``"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From [@usn6 In 9e12[..usn2][.._usn3] Where 9e-1 Is Not Null] Starts With Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789) Starts With All(`2esn` In $@usn5 Is Not Null Is Not Null Where $`5esn` =~Count(*) =~1.9e0) As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct Allshortestpaths((({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)))[Extract(`1esn` In $12 In {usn2} Where 9e-1[1.9e0])..][Case When `3esn` =~$#usn7 Then $usn2 In #usn7 In #usn7 When $`5esn`[{`4esn`}][{0}] Then 2.9e1[2.12..1.9e0] Else #usn7 =~$@usn5 =~{7} End..] As #usn8,{12} Ends With 1e1 As `8esn` Skip {@usn6:$12 Is Null} In (`4esn` {`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}) Where @usn6 Ends With $`2esn` Ends With 1.0 With  {usn2} In false,{_usn4} In 0X7 In 0e0 As `2esn` Order By {#usn8} In {12} In .9e12 Asc,9e0[`1esn`..0e-0][00..`1esn`] Ascending With  $12 As _usn4 Order By 123.654 Is Not Null Is Not Null Descending,(`6esn` $_usn3)<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})-[?{#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}]->(_usn3 :#usn7:`8esn`)[Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End] Asc,Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1) Starts With Case 7.0e-0[$`6esn`..] When \"d_str\"[0x0..{@usn6}][$@usn5..0] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else $`5esn`[{`4esn`}][{0}] End Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`) Asc Skip true In 0.0 Where `3esn` =~$#usn7 Union All Remove Reduce(`3esn`={usn2} Is Not Null Is Not Null,`7esn` In 0.12 Is Not Null|$@usn5 =~{`3esn`})._usn4! Union Merge Shortestpath((`4esn` :`8esn`{`6esn`:9e-1[0.0..],`8esn`:0X0123456789ABCDEF In false})-[:`1esn`|:`1esn` *0{`8esn`:2.12[{12}],`7esn`:$@usn6[``..][3.9e-1..]}]->(:`2esn`:`4esn`{usn2:$@usn6[.1e-1][9e12],`5esn`:12e12 Is Not Null Is Not Null})-[`5esn`?:#usn7|:@usn5{usn2:#usn7[123.654][{12}]}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})) On Create Set _usn3+=Case {`4esn`} Ends With Count(*) When `7esn` =~#usn8 =~\"d_str\" Then 010[..9e-1][..0X7] When $#usn7 Contains 3.9e-1 Then 123.654[10.12e12..$12][6.0e0..{#usn8}] Else $usn1[0e0...9e-12] End[Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))..][Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})..],#usn7+=[`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|01[$`1esn`..$`7esn`][{usn2}..12.0]][(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[`3esn`?:@usn5|:#usn7*{`3esn`:12.0[..Count ( * )][..@usn6],`2esn`:8.1e1 Contains $@usn6}]-(#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]-(:_usn3{_usn3:010[..9e-1][..0X7]})..][[`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 0X0123456789ABCDEF Is Not Null Is Not Null]..],Case When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else `6esn`[3.9e-1..`8esn`][12.0..0.0] End.`7esn`?.`5esn`?.#usn8! =7.0e-0 Is Not Null Create `1esn`=Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]}))),usn2=((:`7esn`{`4esn`:@usn5 =~$#usn7 =~{usn1}})-[`8esn`{#usn8:.12e12[..7]}]-({`6esn`:1000[{`1esn`}..][$`3esn`..]})<-[`1esn`? *0{@usn6:true Is Null}]-(_usn4 ))"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:`8esn`)Assert Exists([@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`]].`2esn`)"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn3:`3esn`]-()Assert Exists(All(`2esn` In $@usn5 Is Not Null Is Not Null Where `6esn`[3.9e-1..`8esn`][12.0..0.0]).`5esn`)"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`2esn`)Assert count(Distinct $`8esn` =~{`6esn`} =~12,0[..{#usn7}][..$_usn3]).#usn8 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[``:@usn5]->()Assert Exists(Filter(`7esn` In 0.12 Is Not Null Where .1e-1 Contains .12e-12)._usn3.`5esn`!)"),
    octest_legacy:ct_string("Load Csv With Headers From Filter(#usn7 In .0e-0 In 12 Where 00[$``])[[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $`4esn`[usn2..]|3.9e-1 Contains $@usn5]] As usn1 Fieldterminator \"d_str\" Merge (({`3esn`:`5esn` Ends With Count(*)})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2)-[?:@usn5|:#usn7 *0]->({@usn6:{`5esn`} Is Not Null Is Not Null,`6esn`:`4esn`[9e-12..true]})) On Create Set usn2+=Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null),#usn8 =None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) Merge `1esn`=Allshortestpaths((_usn3 {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})) On Match Set @usn6 =$@usn6[.1e-1][9e12] Union Delete $`1esn`[$`3esn`..`8esn`],Reduce(`6esn`=`2esn`[`7esn`][1000],usn2 In .12e-12 Ends With `2esn`|010[..9e-1][..0X7]) Contains `7esn` Contains Case When 9e1 Ends With 9e12 Ends With 0x0 Then {12} Ends With 1e1 Else `4esn` Contains 0X0123456789ABCDEF Contains $usn2 End Optional Match #usn7=Shortestpath((((`5esn` :_usn3)<-[?:`2esn`|`5esn`]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2)))),(((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))) Using Scan `1esn`:`` Using Index _usn3:`3esn`(`4esn`) Return Distinct *,3.9e-1[{@usn6}..][01234567..] Skip 9e0[{7}...0e-0][Null..@usn5] Limit 0X0123456789ABCDEF[1e1..] Union All Match #usn8=Shortestpath(((#usn8 {@usn5:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})<-[`7esn`:`4esn`|:`2esn`*{``:true Is Null,_usn3:$12 Ends With 7.0e-0 Ends With 9e-12}]->({`6esn`:3.9e-1[..$1000][..0.12]}))) Using Join On `4esn`,`2esn`,`` Remove {`8esn`:false Starts With 0 Starts With 2.9e1,@usn6:010 Starts With 9e12 Starts With 1000}.`3esn` Load Csv From (`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Is Not Null Is Not Null As `1esn` "),
    octest_legacy:ct_string("Return Distinct {@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Contains Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..]|$12 In {usn2}) Contains [@usn6 In 9e12[..usn2][.._usn3] Where $`3esn` =~#usn8 =~0x0] As `` Order By $`1esn`[..12e-12][...9e12] Asc,`4esn` =~_usn4 =~0e-0 Descending,{12} Is Null Is Null Descending Skip Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null Limit {7}[#usn7..0xabc] Create Unique `6esn`=((:#usn7:`8esn`{usn2:`1esn` =~{12} =~{999}})),(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})<-[_usn4 *010..0{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]}]-($123456789))"),
    octest_legacy:ct_string("Merge @usn6=Allshortestpaths((((@usn6 :`5esn`:`7esn`)-[`8esn`{#usn8:.12e12[..7]}]-({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[ *999..123456789{`2esn`:_usn3 =~{7} =~123.654}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})))) On Create Set {#usn7:12e12,`7esn`:$#usn8[$0..`3esn`][1e-1..$7]}._usn3!.`6esn`!.`5esn` =`3esn`[{`4esn`}] On Create Set (@usn6 :@usn5)-[`3esn`? *..07]-(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]}).usn1!.`3esn`.`2esn`! ={`4esn`}[..{`2esn`}],@usn6 =$usn1[..$999][..0e0] Return .1e-1 Starts With @usn6 Starts With _usn3,Shortestpath((:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})) Starts With {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF} Starts With Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})),(usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` )<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains ({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[:_usn3]->(`1esn` :`2esn`:`4esn`)-[usn1?:`3esn`|`3esn`{usn2:01[`4esn`..]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Contains ``(Distinct 9e12[..usn2][.._usn3],Count ( * )[_usn4..])"),
    octest_legacy:ct_string("Return Distinct {0}[.1e-1..][_usn4..],`3esn` Contains 1000 Contains 7.0e-0 Order By $@usn6[...9e-1] Descending,$#usn7 Starts With $123456789 Descending,Case {1000}[..{usn1}][..1e-1] When {@usn5}[10.12e12..] Then 1.0 Is Null Is Null When {`3esn`} Is Not Null Is Not Null Then .1e1 Contains 1e-1 Contains #usn8 Else $`5esn`[{`4esn`}][{0}] End[..{usn1:1.9e0[..0][.._usn3],`7esn`:1.9e0[.12e-12][9e-12]}][..{`1esn`:{0} Is Null Is Null}] Asc Union All Create Allshortestpaths((((:`7esn`{usn2:00 Is Not Null Is Not Null})<-[`8esn`? *..123456789{@usn6:5.9e-12[\"d_str\"..][{`6esn`}..],`7esn`:{@usn5}[10.12e12..]}]->(:`3esn`{usn2:01234567[10.12e12][0Xa]})<-[ *1000..{`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]->(`` )))),usn1=((`4esn` :_usn4:`2esn`{#usn8:\"d_str\" Contains {@usn6}})<-[?{@usn5:@usn6[999][1000]}]->(`1esn` ))"),
    octest_legacy:ct_string("With Distinct *,$`4esn`[#usn7][8.1e1] As `2esn` Skip .1e1 Contains 1e-1 Contains #usn8 Limit 9e1 Ends With `7esn` Ends With 2.12 Where .1e1 Is Not Null Is Not Null Detach Delete Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000),{`4esn`}[..{`2esn`}] Create Allshortestpaths(({`6esn`:8.1e1 Contains .9e-1 Contains false})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})),@usn6=Allshortestpaths(({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})<-[usn2:usn1|usn2]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null})) Union Start `6esn`=Rel:@usn6(`8esn`='s_str')  Load Csv With Headers From {123456789} =~@usn5 As _usn4  Union All Unwind 4.9e12 In 9e12 In .9e-12 As `8esn` Optional Match usn1=((`4esn` :_usn4:`2esn`{#usn8:\"d_str\" Contains {@usn6}})<-[?{@usn5:@usn6[999][1000]}]->(`1esn` )) Detach Delete {`6esn`} In {_usn4} In $12,{``} Contains 0.0 Contains `4esn`,[`` In `7esn` =~#usn8 =~\"d_str\" Where $`6esn` Starts With 0.0|$usn1[9e1][{999}]] In @usn5() In Case When $#usn7 Contains 3.9e-1 Then .12e12 Starts With 5.9e-12 Starts With `4esn` When {1000}[`2esn`...0e-0][9e-1..0X7] Then 010[...12e-12] End"),
    octest_legacy:ct_string("Create _usn4=({`5esn`:`1esn` In 010 In 1e-1})<-[?:@usn6|:`4esn`{`2esn`:$12[10.12e12][.1e1],#usn7:9e0[..{#usn7}][..`4esn`]}]-(`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]})"),
    octest_legacy:ct_string("Create Constraint On(``:`6esn`)Assert Exists(Shortestpath((`4esn` :_usn3)<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]})).``!)"),
    octest_legacy:ct_string("Delete $@usn5 Starts With #usn7,999 Starts With 7.0e-0 Starts With true,{`8esn`}[..999][.._usn3] Union All Detach Delete `7esn`[1.9e0..5.9e-12][9e0..@usn5],[usn2 In $`5esn`[{`4esn`}][{0}] Where $usn2[..$999][..#usn8]][2.9e1..][None(usn2 In .12e-12 Ends With `2esn` Where `7esn`[1.9e0..5.9e-12][9e0..@usn5])..],8.1e1 Contains $@usn6 Create Unique Shortestpath((:`3esn`)),`3esn`=(usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`8esn`)Assert (`4esn` :@usn5)-[usn1?:`3esn`|`3esn`*..]-(`1esn` ).#usn8?._usn4.`7esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[`6esn`:@usn5]->()Assert Exists([`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {`7esn`} Is Not Null Is Not Null].`8esn`)"),
    octest_legacy:ct_string("Create Constraint On()<-[`7esn`:#usn8]-()Assert Exists(Any(usn1 In $@usn6 Is Null Is Null Where `3esn` Is Null).`6esn`?)"),
    octest_legacy:ct_string("Remove All(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where {1000}[0..]).usn2,Extract(#usn7 In .0e-0 In 12 Where {0}[.0e-0][$`2esn`]).`8esn`!"),
    octest_legacy:ct_string("Unwind exists(`7esn` In _usn4 In $`7esn`,9e1 Ends With `7esn` Ends With 2.12)[..Reduce(#usn8=5.9e-12 Contains {12} Contains {#usn8},usn1 In \"d_str\" Contains {@usn6}|{`6esn`}[@usn5..{@usn6}])][..Extract(usn1 In \"d_str\" Contains {@usn6} Where {`1esn`} Is Null|`` Contains {`6esn`} Contains 123456789)] As _usn4"),
    octest_legacy:ct_string("Delete $`8esn` Contains _usn4,{usn2} Contains {0} Unwind {@usn6} =~Count ( * ) =~1.0 As `4esn` Create Allshortestpaths((_usn3 {#usn7:$999 =~false =~{`8esn`}})<-[usn2?:`2esn`|`5esn`{_usn4:{`5esn`}[.1e-1..1e-1][999..{_usn3}],`2esn`:{`1esn`}[..$_usn4]}]-(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})),Shortestpath(((`1esn` :`5esn`:`7esn`))) Union With Distinct 0[..12][..{`8esn`}] As _usn3,{`2esn`} Contains 0xabc Order By ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[_usn3?:@usn5|:#usn7]->(`` :``)-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`}) Starts With Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`) Ascending,`3esn` =~$#usn7 Desc Limit Filter(usn2 In $`5esn`[{`4esn`}][{0}] Where $usn2[..$999][..#usn8])[Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`)..] Union With  {`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]} In Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}))) In Extract(_usn3 In `8esn`[_usn4] Where 0[..{#usn7}][..$_usn3]|0x0 Ends With #usn8 Ends With .9e-1) As `` Order By `4esn` =~_usn4 =~0e-0 Ascending Limit None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\") Starts With {@usn5:999 Ends With {#usn8},_usn4:Null In {7}} Where 0e0 =~{12} =~{1000} Remove None(#usn8 In 07[..$`5esn`] Where 0.0[$`4esn`])._usn3?.``._usn3! Remove {usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]}.#usn7?,All(`` In `7esn` =~#usn8 =~\"d_str\" Where {12} Starts With $`` Starts With 0X0123456789ABCDEF)._usn4?.`6esn`"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From `2esn`[`7esn`][1000] As `2esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:@usn5]->()Assert Exists(Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where 9e-1 Is Not Null).`3esn`?)"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From _usn4[{`3esn`}][00] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return Distinct (:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]->(@usn5 ) Ends With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) As `4esn`,#usn7 Contains .0e0 Contains $@usn6 As @usn6,999 Ends With {#usn8} As `7esn` Order By .9e12 Is Not Null Is Not Null Descending Skip .9e-1 Contains {#usn7} Limit `7esn` Ends With $123456789 Ends With 1e-1 With Distinct 0xabc[9.1e-1..] As usn2 Order By 0xabc Starts With 12 Starts With 0e-0 Descending,{`7esn`}[0.12] Ascending"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:`7esn`)Assert Exists(Reduce(#usn7=9e1[0.0],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|0.0[$`4esn`]).#usn8!.`1esn`!.`1esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:usn2)Assert {`3esn`:`5esn` Ends With Count(*)}.@usn6! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:_usn4)Assert Any(`2esn` In $@usn5 Is Not Null Is Not Null Where `1esn` Is Not Null Is Not Null).@usn5!._usn4.@usn5! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`8esn`)Assert Exists(`8esn`(Distinct 8.1e1 Contains $@usn6,999 Contains {999} Contains 12).usn2?)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`1esn`)Assert Allshortestpaths(((`2esn` :`2esn`:`4esn`{#usn7:0 Starts With `7esn` Starts With 9e0})-[?:`4esn`|:`2esn` *01]->(`2esn` :_usn3{`6esn`:_usn4[{``}..{`6esn`}][$7..$_usn3],`6esn`:$`4esn` Ends With {999}})))._usn4? Is Unique"),
    octest_legacy:ct_string("Unwind ``[$#usn7] As `3esn` Detach Delete 010[.0e-0..\"d_str\"][.9e0..123.654],1.9e0 In $@usn6 In $_usn3,Reduce(@usn6=0X0123456789ABCDEF Ends With {1000},usn1 In $@usn6 Is Null Is Null|.0e0 =~0 =~.0e0) Starts With None(`6esn` In 010[{`1esn`}..] Where _usn4 Ends With {`8esn`} Ends With usn2) Starts With Case When 01234567 Ends With .0e0 Ends With 12e12 Then @usn6 Starts With #usn7 Else .12e12 Ends With 07 Ends With 3.9e-1 End Union All Load Csv With Headers From {`8esn`}[9e-12..0] As ``  With Distinct *,Any(usn2 In $`5esn`[{`4esn`}][{0}] Where .1e-1[2.9e1..][$`7esn`..]) Contains Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Contains Allshortestpaths((_usn3 :`4esn`:usn2)),9e1[...9e1][..$`6esn`] As `4esn` Create Unique `1esn`=((`4esn` :`8esn`{12}))"),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:``]-()Assert Exists(Case When 0e-0[$``..10.12e12] Then 3.9e-1[{@usn6}..][01234567..] End.`4esn`!)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:_usn4)Assert Exists((@usn6 )-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[`3esn`?:usn2]-(`8esn` {`6esn`:12[@usn6][{`2esn`}]}).usn2.`7esn`.#usn7)"),
    octest_legacy:ct_string("Drop Constraint On()-[`8esn`:`3esn`]-()Assert Exists([`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]|7 Starts With 9e-12].usn2?.`6esn`)"),
    octest_legacy:ct_string("Match `2esn`=Allshortestpaths(((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]}))),#usn8=((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})-[?:#usn7|:@usn5 *..00]-(:@usn5{`7esn`:01234567[\"d_str\"..][$`4esn`..]}))"),
    octest_legacy:ct_string("Create Constraint On(#usn8:usn2)Assert Reduce(usn2={1000}[`2esn`...0e-0][9e-1..0X7],#usn8 In 07[..$`5esn`]|{`3esn`}[..{`4esn`}][..usn2]).`4esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On(#usn8:`4esn`)Assert Reduce(#usn7=$`8esn`[..5.9e-12][..`8esn`],#usn8 In 07[..$`5esn`]|$@usn5[``..]).`2esn`.usn2?.usn2! Is Unique"),
    octest_legacy:ct_string("Drop Index On:#usn8(`6esn`)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:`5esn`)Assert None(usn1 In $@usn6 Is Null Is Null Where {12} Starts With $`` Starts With 0X0123456789ABCDEF)._usn3! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[_usn3:`2esn`]-()Assert Exists(Any(`7esn` In 0.12 Is Not Null Where 0.0[00..][0xabc..]).`5esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`7esn`)Assert (`8esn` :@usn6:_usn3)<-[$#usn8]->(:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]}).usn2._usn4? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(usn1:@usn6)Assert (usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(`7esn` {@usn5:Count ( * )[_usn4..]}).`8esn`.``!.usn1? Is Unique"),
    octest_legacy:ct_string("Unwind 0X0123456789ABCDEF[1e1..] As @usn5 Merge `2esn`=Shortestpath(((`4esn` :`3esn`))) Union Match _usn4=Shortestpath((_usn4 {`3esn`:.0e-0 In 12})),((`` :`4esn`:usn2)<-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]-(#usn7 {usn1:2.12[{12}]})) Start usn2=Node:_usn3(`7esn`='s_str') ,`8esn`=Rel:#usn7(\"d_str\")Where {`6esn`} Starts With @usn6"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:_usn3)Assert Exists([#usn7 In .0e-0 In 12 Where Count ( * ) Is Not Null Is Not Null|5.9e-12[\"d_str\"..][{`6esn`}..]].usn2)"),
    octest_legacy:ct_string("With Distinct Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End In (:usn1)<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}) In [_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|usn2 Ends With $123456789 Ends With {999}] As _usn4 Skip $_usn3 Contains 1.0 Contains 0.12 Remove (_usn3 :`1esn`:``{`8esn`:{#usn8} In {12} In .9e12})<-[ *1000..{`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]->(`` ).#usn8?"),
    octest_legacy:ct_string("Foreach(#usn8 In 9e12 Is Null| Unwind Allshortestpaths(((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}))) Is Null Is Null As usn2 Remove Filter(@usn6 In 9e12[..usn2][.._usn3] Where 123.654 Ends With {1000} Ends With 9e12).`3esn`?.`7esn`?,Allshortestpaths((((`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})-[`8esn`:`4esn`|:`2esn`]->(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1})))).`3esn`) Detach Delete [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] =~Single(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) =~Case @usn5 In Null When {usn1} Is Not Null Then $`5esn` Is Null When $`8esn`[..5.9e-12][..`8esn`] Then 7.0e-0[$`6esn`..] Else $0 Contains $123456789 Contains {`3esn`} End,8.1e1[$``] Remove (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)}).`8esn`.`3esn`?,@usn6:usn2"),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv With Headers From $`1esn`[9e0..$12] As _usn3  Unwind .12e12[..7] As #usn8 Delete 1e1 Ends With 12 Ends With 999"),
    octest_legacy:ct_string("Unwind [`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] As `8esn` Merge `8esn`=(@usn6 :`5esn`:`7esn`) On Match Set (`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[? *..123456789{@usn5:{usn2} Ends With {@usn6} Ends With 1000}]->(:`7esn`{`5esn`:{`8esn`} Starts With .9e-1 Starts With 1000})._usn3._usn3?.`6esn`! =(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[?:`6esn` *0]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}) Is Not Null,#usn8 =0[4.9e12] Remove Extract(`7esn` In 0.12 Is Not Null Where {`1esn`}[{usn2}]|9e1 Ends With `7esn` Ends With 2.12).`2esn`?.`1esn`.usn2!,Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where {`3esn`} =~$@usn5 =~`2esn`|$1000 Starts With {@usn6} Starts With $@usn5).`3esn`?.`3esn`?.`4esn`? Union All Foreach(@usn5 In $`` Ends With 1e-1 Ends With $@usn6| Return *,_usn4[{``}..{`6esn`}][$7..$_usn3] Order By 9e0 Ends With {7} Desc,`4esn` =~_usn4 =~0e-0 Descending) Union All Return Distinct $`` Ends With #usn7 Ends With _usn3 As _usn3,{@usn6:2.9e1[{`2esn`}],usn1:01 Contains 9e-12 Contains $7} Is Null Is Null As @usn6 Order By `6esn`[..$0][..{7}] Asc,Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null) In `4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`) Ascending,{123456789} =~@usn5 Asc Limit Single(_usn3 In `8esn`[_usn4] Where `3esn` Contains `2esn` Contains {_usn4}) In Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`) In {7} With  *,$999 Ends With `2esn` Ends With 12.0 As #usn8,All(usn1 In $@usn6 Is Null Is Null Where $`1esn`[4.9e12..][_usn3..])[..@usn5(Count(*)[Count ( * )][{0}],`4esn` =~010)] As `3esn`"),
    octest_legacy:ct_string("Create Constraint On()-[usn1:`3esn`]->()Assert Exists(Single(usn1 In \"d_str\" Contains {@usn6} Where false Contains {`7esn`}).`6esn`)"),
    octest_legacy:ct_string("Drop Constraint On(`2esn`:usn2)Assert Case 9e-12[$7..] When .1e-1 Contains .12e-12 Then true Is Null Else 0[..{#usn7}][..$_usn3] End.`` Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[@usn6:_usn3]-()Assert Exists(exists(_usn3 =~{7} =~123.654,12e12 Contains {0}).`6esn`?)"),
    octest_legacy:ct_string("Load Csv With Headers From 0e0 Contains {`2esn`} As `2esn` Fieldterminator \"d_str\" Create ((`1esn` :`7esn`{usn1:3.9e-1 Starts With .9e0 Starts With {#usn7}})-[usn2? *01234567..]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})) Unwind None(#usn8 In 07[..$`5esn`]) Starts With (:#usn7:`8esn`{`5esn`:false[..usn2][..999]})<-[`7esn`:`4esn`|:`2esn`*{``:true Is Null,_usn3:$12 Ends With 7.0e-0 Ends With 9e-12}]->(`` :`7esn`) Starts With All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 123.654 Ends With {1000} Ends With 9e12) As `3esn`"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From $12 Contains false Contains {`1esn`} As usn1 Fieldterminator \"d_str\" Delete None(@usn6 In 9e12[..usn2][.._usn3] Where Count ( * )[_usn4..]) Is Null Is Null,{`5esn`}[.1e-1..1e-1][999..{_usn3}],$_usn3 Is Null Start `7esn`=Node:``(_usn3='s_str') Where 3.9e-1 Ends With {usn1} Ends With {`5esn`}"),
    octest_legacy:ct_string("Create #usn7=(((:`3esn`)<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1})))"),
    octest_legacy:ct_string("Create Constraint On(usn1:`6esn`)Assert Case #usn8 Is Null Is Null When $1000[..0e-0][..010] Then 010 Starts With 9e12 Starts With 1000 End.`8esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(usn1:``)Assert None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $123456789)._usn4!.@usn6 Is Unique"),
    octest_legacy:ct_string("Return Distinct Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1) Is Null Is Null As #usn8,.9e1 Is Null Is Null As #usn8,00[..@usn6] Order By 12 Ends With 12e12 Asc,.9e12 Starts With 0X7 Starts With .9e-1 Asc Skip 00[Null..usn2] Limit 01[{usn2}..][1.9e0..] Return Distinct None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0) As usn2 Skip $#usn7[01..2.12][2.12..3.9e-1] Limit `5esn` Ends With Count(*) Union All With Distinct *,1.9e0[$`4esn`],All(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`]) Ends With Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e-12[9e1]) Merge ((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})<-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(`4esn` {`6esn`:Count ( * ) Contains 9.1e-1 Contains {`2esn`},`6esn`:$#usn8 Is Not Null Is Not Null})) On Create Set (`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[? *..123456789{@usn5:{usn2} Ends With {@usn6} Ends With 1000}]->(:`7esn`{`5esn`:{`8esn`} Starts With .9e-1 Starts With 1000})._usn3._usn3?.`6esn`! =(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[?:`6esn` *0]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}) Is Not Null,#usn8 =0[4.9e12] Optional Match `7esn`=Shortestpath(((usn1 :_usn4:`2esn`)<-[`3esn`?:@usn5|:#usn7]->({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[?{#usn7:`2esn`,`7esn`:$@usn5 Is Not Null Is Not Null}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))),Allshortestpaths((:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})<-[_usn3?:`5esn`*..]-(:_usn4:`2esn`{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]})) Using Join On `5esn`,usn1,`7esn` Using Scan #usn8:`1esn` Where 8.1e1[..9.1e-1][...9e1] Union All Remove Reduce(`6esn`=.9e-12[.12e12..][0Xa..],#usn8 In 07[..$`5esn`]|.9e-12[.12e12..][0Xa..]).`5esn`?,Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 7 In 1e1 In {``}).`6esn`,All(usn2 In $`5esn`[{`4esn`}][{0}] Where Null[$`3esn`..][`1esn`..]).#usn8!.#usn8.`7esn` Optional Match ((usn1 :@usn6:_usn3)-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1})) Where $usn2 In #usn7 In #usn7 Load Csv With Headers From 11.12e-12 Starts With 1.0 Starts With 12.0 As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On()-[_usn4:`3esn`]->()Assert Exists(Single(usn1 In $@usn6 Is Null Is Null Where .9e1[$`1esn`..][$``..]).`8esn`?)"),
    octest_legacy:ct_string("Create Constraint On()<-[@usn6:`5esn`]-()Assert Exists(Single(usn1 In \"d_str\" Contains {@usn6} Where {`1esn`} Is Null).`2esn`)"),
    octest_legacy:ct_string("Drop Constraint On(usn2:usn1)Assert Single(usn2 In $`5esn`[{`4esn`}][{0}] Where $`4esn` In {999}).#usn8? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[@usn6:`3esn`]-()Assert Exists(Reduce(#usn7=0Xa[999],usn1 In {#usn7} =~.12e12 =~9e0|$@usn5[.9e-1]).#usn7)"),
    octest_legacy:ct_string("Unwind 1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As `1esn` Return Distinct {@usn6:$12 Is Null} In (`4esn` {`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}) As usn2,Case When .9e-1 Is Not Null Is Not Null Then $12[$`6esn`..][01..] When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] Else {`8esn`}[9e12..][{_usn4}..] End Is Null Is Null Limit 01 =~07 Remove Single(#usn8 In 07[..$`5esn`] Where 123.654 Ends With {1000} Ends With 9e12).``!"),
    octest_legacy:ct_string("With Distinct usn2[12e-12..{`8esn`}][.12e12..{123456789}] As #usn8,$`1esn`[9e0..3.9e-1][`7esn`..`6esn`] As @usn6,Case 12.0[...0e0] When {#usn8}[..@usn5] Then `3esn` Is Null End Is Null Is Null Order By $`5esn` Is Not Null Is Not Null Ascending,Count ( * ) Contains 9.1e-1 Contains {`2esn`} Descending Skip $@usn5 Contains _usn3 Limit Extract(#usn8 In 07[..$`5esn`] Where .1e1 Ends With #usn7 Ends With {#usn7}|Null) Contains Allshortestpaths((`3esn` :`6esn`{_usn3:.12e-12 Ends With `2esn`,usn1:Null[#usn7..][9.1e-1..]})-[_usn3?:@usn5|:#usn7]->(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})) Where 12.0[...0e0] Create `2esn`=Shortestpath(((`7esn` {#usn8:2.9e1[{`2esn`}]})-[?:`1esn`|:`1esn` *..0x0{@usn6:.0e-0 In 12}]-(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0})-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]-(`1esn` :_usn4:`2esn`))),``=Shortestpath(({@usn5:$_usn4[..$999],#usn8:$`4esn` Ends With .12e12 Ends With 123.654})) Union All Foreach(`` In Shortestpath(((`2esn` :@usn5{_usn3:0[..12][..{`8esn`}]})<-[`2esn`? *7{`5esn`:false[..usn2][..999]}]->(_usn3 :usn1)))[..{_usn4:.9e-1 Ends With .0e-0 Ends With {_usn3},_usn4:9e1 Ends With 9e12 Ends With 0x0}][..Reduce(#usn8=`8esn`[_usn4],`1esn` In $12 In {usn2}|$`4esn` Is Not Null)]| Start #usn7=Relationship:#usn8(usn2={12}) Where 01234567 Ends With .0e0 Ends With 12e12 Unwind `6esn`[0X0123456789ABCDEF..][`8esn`..] As _usn4) Merge ((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})) On Create Set Case When 01234567 Ends With .0e0 Ends With 12e12 Then 00[$``] End.`1esn` ={1000} Ends With .12e12 Ends With 010 Optional Match `6esn`=((`3esn` :#usn8:@usn6)) Using Join On `6esn`,`1esn` Union Remove `2esn`(Distinct \"d_str\" Starts With $`7esn` Starts With 999).#usn8.`5esn`?.`4esn`?,(:usn1{`6esn`:$_usn3[usn2..][usn1..],#usn7:$_usn4 =~$#usn8 =~{`4esn`}})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})-[:@usn6|:`4esn` *010..0{`7esn`:{12} Contains `8esn` Contains @usn5,_usn3:0.0[$`4esn`]}]->(#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7}).`5esn`,Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..]|{_usn3} In $#usn8 In $12)._usn3!.#usn8?.`5esn`! Unwind 11.12e-12 Starts With 1.0 Starts With 12.0 As @usn6 Merge _usn4=((usn1 {@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]})-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})<-[_usn3?:`5esn`*..]-({`1esn`:01 =~{_usn3} =~01,`8esn`:{#usn7} Ends With 999 Ends With 12}))"),
    octest_legacy:ct_string("Merge usn2=Shortestpath((((`3esn` $0)-[`4esn`? *01{#usn8:12.0[..Count ( * )][..@usn6]}]-(usn1 :#usn8:@usn6)-[{_usn3:$@usn6 Starts With 0xabc Starts With {`7esn`},`1esn`:_usn4['s_str'][8.1e1]}]->(#usn7 :usn2)))) Union All Load Csv With Headers From {@usn6} =~Count ( * ) =~1.0 As `6esn`  Union Create Unique _usn4=((_usn3 :`6esn`)<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})) Return [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] =~Single(usn1 In $@usn6 Is Null Is Null Where $7[.1e-1..{@usn6}][$7..{`1esn`}]) =~Case @usn5 In Null When {usn1} Is Not Null Then $`5esn` Is Null When $`8esn`[..5.9e-12][..`8esn`] Then 7.0e-0[$`6esn`..] Else $0 Contains $123456789 Contains {`3esn`} End,_usn3 =~{`4esn`},{usn1} Contains `4esn` As `6esn` Order By 12[@usn6][{`2esn`}] Ascending,Single(`` In `7esn` =~#usn8 =~\"d_str\")[Reduce(`3esn`=1e1[$_usn3],`2esn` In $@usn5 Is Not Null Is Not Null|8.1e1[..9.1e-1][...9e1])][[#usn7 In .0e-0 In 12 Where \"d_str\"[0x0..{@usn6}][$@usn5..0]|{7}[$@usn5..123456789][1e1..1.9e0]]] Ascending,None(`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]) Starts With Reduce(`3esn`=.1e1 Ends With #usn7 Ends With {#usn7},usn2 In $`5esn`[{`4esn`}][{0}]|\"d_str\" In usn2 In $`7esn`) Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`1esn`}[{usn2}]) Asc Remove Allshortestpaths((((@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})-[:`3esn`|`3esn`]-(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(:`4esn`:usn2)))).`6esn`?"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`7esn`)Assert Extract(`6esn` In 010[{`1esn`}..] Where {`4esn`}[00..]|`6esn` =~999 =~$999).`1esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`4esn`:``)Assert None(`3esn` In 8.1e1 Contains .9e-1 Contains false).``.`7esn` Is Unique"),
    octest_legacy:ct_string("Create Unique #usn8=({`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}) With  *,$999 =~0e0 =~0X7 As `1esn` Skip {7} Is Not Null Optional Match (usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[``:`1esn`|:`1esn`{@usn5:999[..$@usn5][..``],@usn5:0xabc[..Count(*)][..$`5esn`]}]-(`1esn` :``{_usn4:$@usn5 =~{`3esn`}}) Using Index #usn7:`4esn`(@usn5) Where {`6esn`} =~2.12 =~123.654"),
    octest_legacy:ct_string("Detach Delete $usn1 Contains 4.9e12 Contains $`2esn`,Filter(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}]) Starts With Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3)) Starts With {@usn5:$123456789 Is Not Null Is Not Null},{#usn7} Is Not Null"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:_usn3)Assert [`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` =~#usn8 =~\"d_str\"].#usn7! Is Unique"),
    octest_legacy:ct_string("Remove (`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[usn1?:`3esn`|`3esn`*..]->(:usn1{#usn8:$`8esn` Is Not Null Is Not Null,`5esn`:3.9e-1 Starts With .9e0 Starts With {#usn7}})-[:usn1|usn2 *7{`8esn`:{usn2}[{999}..][9e12..]}]->(`` {`7esn`:`4esn` =~010}).usn2!,Case When `2esn` Starts With 010 Starts With `` Then {`7esn`} Is Not Null Is Not Null When $@usn6 Is Null Then {usn2} Is Not Null Is Not Null End.`8esn`.`3esn`?.usn2 With Distinct 1e-1[$`4esn`] Order By Count(*)[Null..][01234567..] Ascending,Count ( * ) =~.9e1 =~$#usn8 Ascending Skip Count ( * ) Contains 9.1e-1 Contains {`2esn`} Where .9e1 Is Null Is Null Optional Match `1esn`=((usn2 :`2esn`:`4esn`{`7esn`:@usn5 =~$#usn7 =~{usn1}})<-[`1esn`:`4esn`|:`2esn`{`5esn`:$_usn3[usn2..][usn1..]}]->(:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})) Where 3.9e-1[{@usn6}..][01234567..] Union Optional Match @usn6=Allshortestpaths(((#usn7 {`2esn`:`8esn`[.12e12..],_usn3:usn1 =~0Xa =~0}))),_usn4=((#usn7 :@usn6:_usn3{``:9e1[0.0]}))"),
    octest_legacy:ct_string("Unwind Any(`7esn` In 0.12 Is Not Null Where $0 Contains $7) Is Not Null Is Not Null As `2esn` Start `3esn`=Node:`6esn`(#usn7={_usn4})  Match (({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})<-[usn2:`4esn`|:`2esn` *0X7..0Xa]-(#usn7 :#usn7:`8esn`)) Union All Unwind .0e-0 Contains $1000 As `` Start @usn5=Rel:`8esn`(usn1=\"d_str\") ,_usn3=Relationship(0x0)Where $@usn5 Is Null Is Null Union All Remove Filter(_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null).`6esn`,count(Distinct).`4esn`?.`2esn`,(@usn6 {usn1:0Xa In 1.0 In $@usn5})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]}).`8esn`! Return usn2[12e-12..{`8esn`}][.12e12..{123456789}] As #usn8,Case When $`6esn`[0..{@usn6}][@usn5..1000] Then .0e-0[..01234567] When {123456789} Starts With $_usn4 Starts With 0x0 Then 9e0[`3esn`][0] End[{`3esn`:false Starts With 0 Starts With 2.9e1,@usn6:9e-12 Ends With {1000}}..{`8esn`:_usn3[{#usn7}]}] As usn1 Skip Allshortestpaths((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))[usn1..] Limit usn2 Ends With $123456789 Ends With {999} Create Shortestpath(((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})))"),
    octest_legacy:ct_string("Start #usn7=Rel:@usn5('s_str') Where false Contains {`7esn`} Union Delete Reduce(`1esn`={`5esn`}[01234567..][5.9e-12..],usn1 In {#usn7} =~.12e12 =~9e0|$`6esn`[..01][..{_usn3}]) Ends With (`2esn` :usn1)<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-(_usn3 :`1esn`:``) Ends With {usn1:{12}[6.0e0..{usn2}][{_usn3}..{#usn7}]},6.0e0[$12..0.12],$`3esn` In 01 In Count ( * ) Merge Shortestpath(((:@usn5{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[?:_usn4|:`1esn` *..07{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null})))"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`5esn`)Assert Exists({#usn8:$`8esn` =~{`6esn`} =~12,_usn3:11.12e-12 Contains usn1}.#usn8?)"),
    octest_legacy:ct_string("Load Csv From `1esn`[..$1000] As #usn8  Foreach(@usn6 In 9e1 =~$`8esn` =~10.12e12| Load Csv From Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null As #usn8 ) Remove `5esn`:`6esn`,[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01|_usn4 Ends With {`8esn`} Ends With usn2].usn1.`7esn`.@usn6 Union All With  Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,999 Starts With 7.0e-0 Starts With true As _usn3 Order By 2.12[010..][{999}..] Descending Limit Shortestpath((:#usn8:@usn6{`2esn`:07 Ends With $_usn3 Ends With $#usn8})-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})) Starts With {``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF} Starts With Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})) Start `2esn`=Node:`8esn`('s_str') ,`1esn`=Rel:``({`4esn`}) With Distinct *,Any(usn2 In $`5esn`[{`4esn`}][{0}] Where .1e-1[2.9e1..][$`7esn`..]) Contains Allshortestpaths(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) Contains Allshortestpaths((_usn3 :`4esn`:usn2)),9e1[...9e1][..$`6esn`] As `4esn`"),
    octest_legacy:ct_string("Create Constraint On()-[`6esn`:`7esn`]->()Assert Exists(0Xa.@usn6._usn4!)"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:@usn5)Assert ({`1esn`:10.12e12 In Null In .12e12})<-[`6esn`?:@usn6|:`4esn` *12{`6esn`:{12} Starts With $`` Starts With 0X0123456789ABCDEF,@usn6:0 Starts With `7esn` Starts With 9e0}]->(`2esn` :`4esn`:usn2{`8esn`:.9e-1 Contains .9e0 Contains ``,_usn4:8.1e1 Contains .9e-1 Contains false}).``! Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv With Headers From {@usn5} Ends With 0Xa Ends With .12e-12 As `5esn` Fieldterminator 's_str' Load Csv With Headers From 0Xa Contains 12e-12 As #usn7 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:_usn4)Assert Allshortestpaths(((usn1 :@usn6:_usn3)-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1}))).`1esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`8esn`:`7esn`]-()Assert Exists(Extract(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12|01[`4esn`..]).`7esn`._usn3?.``)"),
    octest_legacy:ct_string("Create Constraint On()-[usn1:`5esn`]-()Assert Exists(Single(#usn7 In .0e-0 In 12 Where 9e1[$``.._usn4][999..`3esn`]).@usn6?)"),
    octest_legacy:ct_string("Remove 0e0.`4esn`!,usn1(Distinct #usn7 Contains .0e0 Contains $@usn6,.9e0 =~#usn7).`5esn`?,Single(usn2 In .12e-12 Ends With `2esn` Where $999 Ends With `2esn` Ends With 12.0).`8esn` Create ((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})),`1esn`=Allshortestpaths(((#usn8 {@usn5:{7}[$@usn5..123456789][1e1..1.9e0],@usn6:usn2 Starts With $usn1 Starts With 10.12e12})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc}))) Load Csv With Headers From Extract(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null)[{`1esn`:.9e-12[usn2]}][Filter(`7esn` In 0.12 Is Not Null Where 9e1 Ends With `7esn` Ends With 2.12)] As `7esn` "),
    octest_legacy:ct_string("Create Constraint On(usn2:#usn8)Assert {_usn4:3.9e-1[{@usn6}..][01234567..],`2esn`:.12e-12[9e1]}.usn2! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`3esn`)Assert Exists(Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where 1e-1 =~$`7esn` =~1e1|{`6esn`}[@usn5..{@usn6}]).usn1!)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:@usn6)Assert Exists(Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {123456789}[...9e-1][..1.0]|010[{`1esn`}..]).`8esn`)"),
    octest_legacy:ct_string("Drop Constraint On()-[``:@usn6]->()Assert Exists(Extract(usn2 In .12e-12 Ends With `2esn` Where 1e-1 Contains 0.0).@usn6.`2esn`?)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`5esn`)Assert Allshortestpaths((:usn1$1000)).`8esn`! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(#usn8:#usn8)Assert Exists(Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {0}[.1e-1..][_usn4..]|0e-0[..$usn2])._usn4!)"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:_usn3)Assert {@usn6:12e12[{`4esn`}..`4esn`][999..{@usn6}]}.usn1?.`8esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:#usn8)Assert Case When `1esn`[{@usn5}..][{_usn4}..] Then {`3esn`}[..{`4esn`}][..usn2] Else `4esn` Contains 0X0123456789ABCDEF Contains $usn2 End.`8esn`.`4esn`?.@usn5? Is Unique"),
    octest_legacy:ct_string("Start usn1=Relationship:@usn6({999}) "),
    octest_legacy:ct_string("Create Constraint On()<-[`6esn`:``]-()Assert Exists(Reduce(`3esn`=.0e0 =~0 =~.0e0,usn1 In \"d_str\" Contains {@usn6}|01234567[\"d_str\"..][$`4esn`..]).@usn5?)"),
    octest_legacy:ct_string("Detach Delete $usn2 In #usn7 In #usn7 Union All Create Unique `2esn`=Allshortestpaths(((:#usn7:`8esn`{`8esn`:_usn4['s_str'][8.1e1]}))),#usn8=((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})-[?:#usn7|:@usn5 *..00]-(:@usn5{`7esn`:01234567[\"d_str\"..][$`4esn`..]})) Return Distinct 9e-1 Is Not Null,{`6esn`} In 11.12e-12 In 2.9e1 Order By `3esn` Is Null Is Null Asc,8.1e1[.1e1..][`4esn`..] Asc Skip @usn5[@usn6] Union All With Distinct *,$usn1[..$999][..0e0] As #usn7,.9e-12[{@usn5}] As `7esn` Order By 01 Ends With .0e0 Ends With 7.0e-0 Asc,Reduce(#usn8={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$@usn5 Is Not Null Is Not Null) =~count(Distinct $`8esn` =~{`1esn`} =~$7,@usn6 Starts With #usn7) =~None(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}]) Desc,.0e0[$usn1][0] Desc Skip 12e12[.9e12..07] Limit {`2esn`} Contains 0xabc Where 0X7[#usn7..][$@usn5..]"),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv From .1e1 Ends With #usn7 Ends With {#usn7} As `4esn` "),
    octest_legacy:ct_string("Create Unique `7esn`=Shortestpath((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})-[:#usn7|:@usn5]-(:`1esn`:``{`8esn`:5.9e-12[0x0..]})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)),Allshortestpaths(((`` :`7esn`))) Union All Foreach(_usn4 In {12} Ends With $`3esn` Ends With 0xabc| Optional Match #usn7=(((:`3esn`)<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))),`7esn`=Allshortestpaths(((:`7esn`)<-[#usn7?:_usn3 *999..123456789{@usn5:$12 In {usn2},usn1:5.9e-12 Is Null Is Null}]->(`` {`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:`8esn`{#usn8:2.9e1[2.12..1.9e0],#usn8:@usn6[true..]}))) Using Index `6esn`:usn1(`3esn`) Using Index usn2:``(`3esn`) Remove All(usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-1[1.9e0]).usn1) Create Unique (`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]}),#usn7=Allshortestpaths(((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))) Create Unique `7esn`=(:`8esn`$@usn5),`7esn`=Shortestpath(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) Union All Create Unique ((`5esn` {``:$_usn3 Starts With 010,`1esn`:$`8esn` =~{`6esn`} =~12})-[`3esn`?:`1esn`|:`1esn`]-({_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]})) Detach Delete 9e12 Is Null,12 Ends With {#usn8} Ends With $_usn4,#usn7 =~$@usn5 =~{7} Load Csv With Headers From {0}[`4esn`..{`8esn`}] As `5esn` "),
    octest_legacy:ct_string("Create Unique ``=Allshortestpaths(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))) Detach Delete 2.12[010..][{999}..],Reduce(usn2=`4esn` Ends With 9e12 Ends With {`5esn`},`6esn` In 010[{`1esn`}..]|$@usn5[.9e-1]) Starts With Reduce(`4esn`=.0e-0 In 12,`7esn` In 0.12 Is Not Null|1.0 Is Null Is Null),Filter(#usn7 In .0e-0 In 12 Where #usn7[123.654][{12}])[[`` In `7esn` =~#usn8 =~\"d_str\" Where 1.9e0[.12e-12][9e-12]|1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )]]..Reduce(`1esn`=`2esn`,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|.9e0 =~#usn7)] Union Foreach(#usn8 In Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000)| Match Shortestpath(((usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})-[{#usn7:1e-1[$`4esn`]}]->(_usn4 :`1esn`:``{`3esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}))),(:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})<-[`5esn`:@usn6|:`4esn` *010..0{`8esn`:0xabc Starts With 12 Starts With 0e-0}]-(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})<-[?:@usn6|:`4esn`{`2esn`:$12[10.12e12][.1e1],#usn7:9e0[..{#usn7}][..`4esn`]}]-(`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]}) Using Index `1esn`:`1esn`(`4esn`) Using Join On _usn4,usn2,``) Optional Match `1esn`=((usn2 :`2esn`:`4esn`{`7esn`:@usn5 =~$#usn7 =~{usn1}})<-[`1esn`:`4esn`|:`2esn`{`5esn`:$_usn3[usn2..][usn1..]}]->(:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})) Where 3.9e-1[{@usn6}..][01234567..] Start `7esn`=Node( {999}) Where #usn7[$`8esn`][{`3esn`}] Union All Optional Match usn1=Allshortestpaths(({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})<-[usn2:usn1|usn2]-(`6esn` {_usn4:`1esn` Is Not Null Is Not Null})) Using Index @usn5:usn1(`4esn`) Return *,07[9e-1..][1e1..] As @usn5 Order By 6.0e0 Is Null Desc,Any(`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]) In Reduce(usn1=0e-0[$``..10.12e12],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|`3esn` Contains `2esn` Contains {_usn4}) Asc,$12 Ends With 12.0 Ends With $`4esn` Asc Foreach(_usn4 In {#usn7}[..\"d_str\"][..#usn8]| Unwind .12e12[$usn1..][{@usn6}..] As `6esn` Remove Reduce(usn2=12.0[..Count ( * )][..@usn6],#usn8 In 07[..$`5esn`]|#usn8[\"d_str\"..usn2])._usn4?._usn4)"),
    octest_legacy:ct_string("Create ((`5esn` :_usn3)),Shortestpath(((:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})-[?:`4esn`|:`2esn`{usn1:{123456789} Starts With `6esn`,@usn5:9e1 Ends With 9e12 Ends With 0x0}]-(`2esn` :usn1))) Remove `3esn`:usn2,(:#usn7:`8esn`{`5esn`:false[..usn2][..999]})<-[`7esn`:`4esn`|:`2esn`*{``:true Is Null,_usn3:$12 Ends With 7.0e-0 Ends With 9e-12}]->(`` :`7esn`).`1esn` Remove Allshortestpaths(((:_usn3{`1esn`:$`4esn` Ends With .12e12 Ends With 123.654,#usn7:9e1 =~$`8esn` =~10.12e12})-[_usn3:#usn8|:``{#usn8:{_usn4} In 0X7 In 0e0,`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]-(@usn5 )<-[?:#usn7|:@usn5 *12]-(_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null}))).``?.usn1.@usn6?,{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:{12}}.#usn7.``!,Case When $usn1 Contains 4.9e12 Contains $`2esn` Then {usn1} Contains `4esn` Else {0} Ends With 0Xa End.@usn5"),
    octest_legacy:ct_string("Create Constraint On()-[``:usn1]->()Assert Exists({`5esn`:{`4esn`}[00..]}.#usn8)"),
    octest_legacy:ct_string("Detach Delete [_usn3 In `8esn`[_usn4] Where {#usn7} Starts With .1e-1|`3esn` Is Null] Contains `5esn`({#usn8} Ends With _usn3 Ends With `2esn`,.9e0 =~#usn7),01234567 Ends With .0e0 Ends With 12e12,0.12[8.1e1..0Xa][Count ( * )..{_usn3}] Remove {`5esn`:$`4esn` Ends With .12e12 Ends With 123.654,@usn6:{123456789} Contains $0}.`8esn`,({#usn7:12e12[.9e12..07]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})-[@usn5:`2esn`|`5esn` *7]->(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}).#usn8!,(`3esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[?:`4esn`|:`2esn` *01]-(`` :``).`4esn`.#usn7 Union With Distinct *,Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1) Is Null Is Null Skip 0xabc Contains 12 Contains Null Limit $123456789 Contains 07 Contains 0.0 Load Csv From {_usn3:$`6esn`[0..{@usn6}][@usn5..1000]}[Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)][[usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1]] As `5esn` Fieldterminator 's_str' Union All Foreach(usn1 In 4.9e12 Is Not Null Is Not Null| Unwind Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[..None(#usn7 In .0e-0 In 12 Where 0xabc =~123456789)][..11.12e-12] As @usn5) Start usn2=Node:`2esn`(_usn4={#usn7}) ,`5esn`=Rel:`6esn`(`4esn`='s_str')Where 12[..$`5esn`] Remove Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`3esn`}[01234567][{#usn7}]|00 =~`4esn` =~.9e-12).`5esn`.`3esn`!"),
    octest_legacy:ct_string("Drop Constraint On()-[@usn5:usn2]-()Assert Exists({_usn4:{7} Starts With 0x0 Starts With 9e1,#usn8:{@usn6} In 9e12}.`1esn`!)"),
    octest_legacy:ct_string("Create Constraint On(_usn3:#usn7)Assert (`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(`1esn` :#usn7:`8esn`).@usn5.`5esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[usn2:@usn6]-()Assert Exists({`1esn`:$999 Is Not Null}.`6esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(`5esn`:@usn6)Assert Exists(Case {`7esn`} Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] End.usn1.usn2!)"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:@usn5)Assert Reduce(usn1=$123456789 Is Not Null Is Not Null,`7esn` In 0.12 Is Not Null|.12e12 Ends With 07 Ends With 3.9e-1).`1esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:`2esn`)Assert Exists(usn1(Distinct 1.9e0[..0][.._usn3],$@usn5 Is Null Is Null).``)"),
    octest_legacy:ct_string("Foreach(#usn8 In .12e12 Is Not Null| Remove Reduce(`8esn`=1e1[$_usn3],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e-0[..``][..$7]).`6esn`.`8esn`?,[`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1].`2esn`! Return {#usn7}[.12e-12] As `1esn`,5.9e-12[\"d_str\"..][{`6esn`}..] As #usn7 Limit Case When #usn7 Contains .0e0 Contains $@usn6 Then .12e-12[@usn6..'s_str'] Else {0}[`4esn`..{`8esn`}] End Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Remove Any(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]).`4esn`,Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 9e12 Is Null Is Null).`3esn`,(@usn5 :`3esn`{`4esn`:12e12[.9e12..07]})<-[`6esn`?{`5esn`:.9e-1 Contains .9e0 Contains ``}]->(`7esn` :`7esn`).#usn7.`8esn` Create Unique _usn4=((_usn3 :`6esn`)<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})),usn2=(`2esn` {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(#usn8 {``:9e1[0.0]})-[:#usn8|:`` *..07{@usn5:01234567[\"d_str\"..][$`4esn`..],`6esn`:$usn1 Ends With {`2esn`} Ends With $usn1}]->(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1}) Union All Start usn2=Relationship:#usn8(usn2={@usn5}) ,`2esn`=Relationship:``(`1esn`=\"d_str\") Return *,3.9e-1 Ends With {usn1} Ends With {`5esn`} As `3esn`,Reduce(@usn5=`1esn` In 010 In 1e-1,`2esn` In $@usn5 Is Not Null Is Not Null|8.1e1 Contains $@usn6)[All(usn1 In {#usn7} =~.12e12 =~9e0 Where $7)][`8esn`(.1e-1[2.9e1..][$`7esn`..])] Skip Shortestpath((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}))[[`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`}[@usn5..{@usn6}]|{1000}[..`5esn`][..9e12]]..][{_usn4:`8esn`[.12e12..]}..] Limit Count ( * ) Contains 9.1e-1 Contains {`2esn`} Return Distinct *,$_usn4[..01234567][..$`6esn`],{`1esn`} Is Null Order By None(`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]) Starts With Reduce(`3esn`=.1e1 Ends With #usn7 Ends With {#usn7},usn2 In $`5esn`[{`4esn`}][{0}]|\"d_str\" In usn2 In $`7esn`) Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`1esn`}[{usn2}]) Asc,Extract(usn2 In .12e-12 Ends With `2esn` Where `3esn` Contains 01 Contains 01) Is Not Null Descending,$`` =~$_usn3 Descending Limit {`4esn`}[00..] Union Foreach(_usn3 In 9e1[$``.._usn4][999..`3esn`]| Unwind {`8esn`}[.0e0..][999..] As `` Unwind .9e-1[`1esn`][7] As usn2)"),
    octest_legacy:ct_string("Foreach(_usn4 In $_usn3 Contains 1.0 Contains 0.12| Create Unique #usn7=((:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}})<-[usn2? *0X0123456789ABCDEF]-($12)) Create Unique `7esn`=Shortestpath(((_usn3 {#usn7:$999 =~false =~{`8esn`}}))),#usn8=((#usn8 :@usn5)-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Foreach(#usn7 In $999[9e0]| Start #usn8=Node:_usn4({_usn3}) ,`1esn`=Rel:@usn6(`2esn`='s_str')Where 0[..{0}][..true] Load Csv From Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where .9e1[$`1esn`..][$``..]) As `4esn` ) Create ((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})),((`5esn` :_usn3)) Union All Merge usn1=({#usn8:_usn4[$_usn4]})-[:@usn6|:`4esn` *010..0{`7esn`:{12} Contains `8esn` Contains @usn5,_usn3:0.0[$`4esn`]}]->(#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7}) Optional Match (({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`2esn` *7]->(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})),Allshortestpaths((:#usn7:`8esn`{`3esn`:0.12 In $``})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}})<-[:#usn8|:`` *0]->({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})) With Distinct 0xabc[..Count(*)][..$`5esn`],{12} Ends With 1e1 As `8esn`,{`4esn`} In 1000 In {@usn5} Order By {7} Ends With 999 Asc,_usn3 =~{`4esn`} Desc Skip [`1esn` In $12 In {usn2} Where 12e-12 Starts With $`7esn`][{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6}..] Where Null In {7}"),
    octest_legacy:ct_string("Load Csv With Headers From 7 Starts With 9e-12 As @usn6 Fieldterminator 's_str' Union All Remove Allshortestpaths((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}})).``! Union Remove All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where {`8esn`} Starts With .9e-1 Starts With 1000).usn2?,Extract(#usn8 In 07[..$`5esn`] Where 0 In 2.9e1 In 7).`5esn`!.`3esn`,Case {`5esn`}[.1e-1..1e-1][999..{_usn3}] When 7.0e-0 Is Not Null Then {`8esn`}[@usn5][$`2esn`] End.usn1 Create Unique Allshortestpaths(((#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7})<-[`6esn`?:@usn5|:#usn7{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)}))),@usn6=((:`4esn`:usn2{usn2:$usn2 Ends With 00 Ends With 9e12,_usn4:{`5esn`}})-[?:``|:`7esn` *12{#usn8:10.12e12 Contains .9e0,usn1:0xabc Contains {12} Contains {`6esn`}}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))"),
    octest_legacy:ct_string("Foreach(_usn4 In {12} Ends With $`3esn` Ends With 0xabc| Optional Match #usn7=(((:`3esn`)<-[`7esn`?]-(:_usn3{@usn5:`2esn`[`7esn`][1000]})<-[_usn4 *..0x0{usn2:{_usn3} In $#usn8 In $12}]->(:_usn4:`2esn`{`5esn`:`1esn` In 010 In 1e-1}))),`7esn`=Allshortestpaths(((:`7esn`)<-[#usn7?:_usn3 *999..123456789{@usn5:$12 In {usn2},usn1:5.9e-12 Is Null Is Null}]->(`` {`1esn`:$`5esn` Is Null,_usn4:_usn3 =~{7} =~123.654})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:`8esn`{#usn8:2.9e1[2.12..1.9e0],#usn8:@usn6[true..]}))) Using Index `6esn`:usn1(`3esn`) Using Index usn2:``(`3esn`) Remove All(usn2 In $`5esn`[{`4esn`}][{0}] Where 9e-1[1.9e0]).usn1) Create Unique (`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]}),#usn7=Allshortestpaths(((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))) Create Unique `7esn`=(:`8esn`$@usn5),`7esn`=Shortestpath(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) Union Remove Reduce(`6esn`=5.9e-12 Contains {12} Contains {#usn8},usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{123456789} Ends With 11.12e-12 Ends With 00).`2esn` Load Csv With Headers From 9.1e-1 Contains {`3esn`} Contains $12 As @usn6 Fieldterminator 's_str' Union All Start `2esn`=Rel:`6esn`(`4esn`=\"d_str\")  Load Csv With Headers From $12 Is Null As `3esn`  Optional Match `6esn`=(:`1esn`:``{`1esn`:$`` Starts With $`4esn` Starts With `3esn`,`6esn`:usn1 =~false =~{999}})<-[:`2esn`|`5esn`{`8esn`:$`4esn`[$@usn6...12e12]}]-(usn1 {@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]})<-[?:usn1|usn2{#usn8:'s_str'[`2esn`][12.0]}]->(:`1esn`:``),(({`6esn`:3.9e-1[..$1000][..0.12]})-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-(:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00})) Using Join On @usn5,_usn4 Using Index `6esn`:`8esn`(`2esn`)"),
    octest_legacy:ct_string("Foreach(_usn3 In Null| Optional Match ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),_usn3=Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``)))) Return *,$12 Is Null As #usn8 Order By ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[_usn3?:@usn5|:#usn7]->(`` :``)-[`2esn`? *0X0123456789ABCDEF{usn1:{123456789} =~.9e1 =~$_usn3,`7esn`:$`1esn`[9e0..$12]}]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`}) Starts With Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn`) Ascending,{`8esn`} =~$#usn7 =~2.12 Desc,Count(*) Starts With 07 Starts With $#usn7 Desc Skip @usn6[true..] Create ({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12}),#usn8=Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]})))"),
    octest_legacy:ct_string("Remove `8esn`(#usn7[$`8esn`][{`3esn`}],`6esn`[$@usn5][01]).usn1.@usn5.`4esn`?,({``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]}).`1esn`?,None(usn1 In \"d_str\" Contains {@usn6} Where false =~{`8esn`} =~00).`5esn`!.#usn8! Create Unique ((`4esn` :#usn7:`8esn`)<-[:`8esn`|:#usn8{_usn4:$#usn7 Ends With {`5esn`} Ends With 01}]-({usn1:1000[{`1esn`}..][$`3esn`..],`3esn`:.1e1 Is Not Null Is Not Null})<-[usn1:#usn7|:@usn5 *999..123456789]->(`5esn` :``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})),(`1esn` {@usn6:6.0e0[$#usn7..$1000]})-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})<-[:`7esn`|usn1 *..0x0{`1esn`:Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}) Foreach(`1esn` In None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..])| Create Unique (((@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})-[#usn8?*..]-(`` {`6esn`:1000[{`1esn`}..][$`3esn`..]})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}))),Allshortestpaths((`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)))"),
    octest_legacy:ct_string("Optional Match #usn7=Shortestpath((`5esn` :``{_usn3:$_usn4[..$999],`7esn`:0X0123456789ABCDEF Ends With {1000}})-[*{@usn5:`6esn` =~999 =~$999}]->(:`5esn`:`7esn`{`3esn`:Count ( * )[_usn4..],`8esn`:false[..usn2][..999]})),#usn8=(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})<-[`1esn`:`4esn`|:`2esn`{`5esn`:$_usn3[usn2..][usn1..]}]->(:`6esn`{#usn8:$usn1 Contains 4.9e12 Contains $`2esn`,`7esn`:0[10.12e12]})-[`1esn`?:`3esn`|`3esn` *..00]-(`5esn` {@usn5:`2esn`}) Using Join On `1esn`,@usn6,usn1 Where 9e-12 Is Not Null Is Not Null Start _usn4=Node:@usn6(#usn8='s_str') ,`7esn`=Relationship:usn2(`8esn`=\"d_str\")Where 8.1e1[.1e1..][`4esn`..] Merge Allshortestpaths((:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0})-[?:@usn5|:#usn7 *0]->(`4esn` :`8esn`{`4esn`:4.9e12 Starts With {``},`8esn`:$12 Ends With {_usn4} Ends With $`8esn`})-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({`8esn`:8.1e1[.1e1..][`4esn`..],`2esn`:{@usn6} In 9e12})) On Match Set `1esn` ={`2esn`}[0x0..9e0],Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null|Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]).`8esn`? ={123456789} Contains $#usn7 Contains {#usn8},`5esn` =Case .9e-1 Is Not Null Is Not Null When {@usn6} In 9e12 Then {7}[0x0][1e1] Else .1e1 Is Not Null Is Not Null End Ends With Reduce(``={`3esn`}[$#usn8..],usn1 In {#usn7} =~.12e12 =~9e0|2.9e1[{`2esn`}]) Ends With [`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}|$`` =~$_usn3] Union All Merge Allshortestpaths((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})) Merge `7esn`=Shortestpath(((`6esn` :``)<-[`8esn`*]-(#usn8 )-[`3esn`?:`1esn`|:`1esn`]-(@usn6 :`4esn`:usn2))) On Match Set Single(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where .0e-0[..``][..$7]).``!.`8esn`? ={1000} Starts With {`1esn`},``:`1esn`:``,(#usn7 {usn1:2.12[{12}]})-[:usn1|usn2]->(`8esn` :`5esn`:`7esn`).@usn6! =false =~{`8esn`} =~00 On Match Set `7esn`+=Reduce(_usn3=5.9e-12 Is Null Is Null,_usn3 In `8esn`[_usn4]|2.9e1[Count ( * )..]) Is Null,#usn8 =0e0 Ends With .9e0 Ends With 01234567 Unwind `6esn`[0X0123456789ABCDEF..][`8esn`..] As _usn4"),
    octest_legacy:ct_string("Optional Match (`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}}) Using Scan ``:#usn8 Using Join On usn1,usn2 Match `5esn`=((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})) Using Index usn2:``(`3esn`) Where 0e-0[..7.0e-0][..{`8esn`}] Foreach(usn2 In 1e-1[$#usn8]| Create Shortestpath(((usn2 :`4esn`:usn2)-[?:#usn7|:@usn5 *..00]-(:@usn5{`7esn`:01234567[\"d_str\"..][$`4esn`..]})<-[?:_usn4|:`1esn` *..07{`5esn`:01234567 =~12e12 =~.0e-0,@usn5:.9e12 Contains 0 Contains $0}]-(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false}))),`2esn`=Shortestpath((@usn6 :@usn5)) Create `2esn`=Allshortestpaths((:`3esn`{@usn5:9e12[..usn2][.._usn3]})),``=Shortestpath((`1esn` :`1esn`:``{`2esn`:_usn4 Ends With {`8esn`} Ends With usn2,`4esn`:0e-0[$``..10.12e12]})<-[ *0X0123456789ABCDEF]->(usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))) Union All Return _usn3($0 Ends With 9e-12 Ends With $_usn4) Is Null Is Null As `4esn`,1.9e0 In 2.12 As usn2,$#usn7[$``..999][$usn2..$usn2] Order By `4esn` =~usn1 =~Count(*) Descending,Reduce(#usn8={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$@usn5 Is Not Null Is Not Null) =~count(Distinct $`8esn` =~{`1esn`} =~$7,@usn6 Starts With #usn7) =~None(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}]) Desc Skip 2.12 Is Not Null Is Not Null Limit {`5esn`}[01234567..][5.9e-12..] Union Create ((#usn7 :usn2{_usn4:{#usn7} =~$@usn6 =~$7})<-[`5esn`?:`7esn`|usn1{@usn5:9e0[`3esn`][0]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})<-[_usn4?:_usn4|:`1esn` *..0x0{`6esn`:{`5esn`} Is Not Null Is Not Null,`3esn`:0xabc[..{usn1}][..\"d_str\"]}]-({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})),#usn8=({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)})"),
    octest_legacy:ct_string("With  \"d_str\" Starts With $`7esn` Starts With 999,[`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] Skip Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {0}[.1e-1..][_usn4..])[[`6esn` In 010[{`1esn`}..] Where Count ( * ) Starts With 0.12|.12e12 Ends With 07 Ends With 3.9e-1]..] With  $_usn3 Contains 1.0 Contains 0.12 As ``,0x0 Ends With #usn8 Ends With .9e-1 As _usn4 Order By 01234567 Ends With .0e0 Ends With 12e12 Ascending,usn1(Distinct {usn1}[7.0e-0..][3.9e-1..]) Asc,.0e-0[..01234567] Descending Union Detach Delete $`5esn` Is Null,{1000} Starts With {`1esn`} Start _usn3=Rel:usn2(#usn7='s_str')  Create Shortestpath(((@usn6 :usn2{@usn5:$`5esn`[{`4esn`}][{0}],usn2:9e12 Is Null Is Null})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})-[usn1?:@usn6|:`4esn` *..123456789]->({#usn8:_usn4[$_usn4]}))),`2esn`=(:_usn3{usn2:6.0e0[$12..0.12],#usn7:`2esn`})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]})"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`6esn`)Assert Exists([`` In `7esn` =~#usn8 =~\"d_str\" Where 3.9e-1 Starts With .9e0 Starts With {#usn7}|$usn1 =~.9e12 =~`6esn`].`3esn`!)"),
    octest_legacy:ct_string("Delete None(`2esn` In $@usn5 Is Not Null Is Not Null Where {7}[$@usn5..123456789][1e1..1.9e0]) Ends With Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End Ends With {_usn3:$1000 Starts With {@usn6} Starts With $@usn5},Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End[(`4esn` :#usn7:`8esn`)-[_usn3?:@usn6|:`4esn`{_usn4:$12 Ends With 12.0 Ends With $`4esn`}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[{_usn3:$@usn6 Starts With 0xabc Starts With {`7esn`},`1esn`:_usn4['s_str'][8.1e1]}]->(#usn7 :usn2)..][Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1)..] Union Create `4esn`=Shortestpath((:`6esn`{`3esn`:9e12[..usn2][.._usn3]})<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})<-[`2esn`?:`8esn`|:#usn8]->(:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})),#usn7=((`1esn` :usn2{`8esn`:12.0[...0e0]})) Optional Match Shortestpath(((({usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]})-[_usn4? *7]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})))),_usn3=Allshortestpaths((((`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999})<-[``?:@usn5|:#usn7 *..00{#usn8:$`8esn`[...1e-1]}]->(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[? *12{@usn6:$`` =~.1e-1}]->(`1esn` {usn2:.9e-12[.12e12..][0Xa..]})))) Using Index `3esn`:`8esn`(`5esn`) Where .12e12 Ends With 07 Ends With 3.9e-1 Unwind 01234567 Ends With .0e0 Ends With 12e12 As `3esn` Union All Load Csv From $@usn5 Is Not Null Is Not Null As `7esn`  Load Csv With Headers From {123456789} In \"d_str\" As `2esn`  Remove ({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000})<-[`5esn` *01]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}).#usn7!,All(usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..]).`8esn`!,`7esn`:usn2"),
    octest_legacy:ct_string("Remove (`` :`8esn`)-[#usn7? *..00{_usn3:.0e-0[..``][..$7],_usn4:{#usn8} Ends With _usn3 Ends With `2esn`}]->(:`3esn`)-[usn1?:usn1|usn2]->(#usn7 :@usn5).usn1,{12}.`6esn`? Create Unique #usn8=((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) Merge (((`1esn` :#usn8:@usn6{`7esn`:.1e-1 Contains .12e-12,`2esn`:.1e1 Ends With #usn7 Ends With {#usn7}})-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5)-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5))) On Match Set Allshortestpaths((:``{usn2:$_usn3[0X0123456789ABCDEF..][0x0..],`8esn`:0Xa In 1.0 In $@usn5})).@usn6! =12 Is Not Null Is Not Null On Create Set Shortestpath((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})-[usn1?:`8esn`|:#usn8{``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}]-(`2esn` {`8esn`:_usn4['s_str'][8.1e1]})-[usn1?:@usn5|:#usn7{``:{@usn5}[10.12e12..]}]-(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})).`5esn`!._usn3!._usn3? =$`1esn` Ends With 1000,(`8esn` :usn1)<-[usn2 *7]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})-[ *01{usn1:false[..usn2][..999]}]-(_usn3 ).#usn7!.`` =4.9e12 Ends With $@usn6,usn2 =10.12e12[.0e0] Union All Start _usn3=Rel:`8esn`(usn1={#usn7}) ,@usn6=Rel:usn1({usn2}) Create `5esn`=Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))),((_usn3 {@usn6:{0} In {`1esn`}})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->(`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999})) Create `7esn`=(((:`1esn`:``{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[`8esn`? *1000..{usn2:0X7[#usn7..][$@usn5..]}]->(`2esn` {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})<-[?:usn1|usn2{#usn8:2.9e1[2.12..1.9e0],#usn8:@usn6[true..]}]-(:@usn6:_usn3{``:{@usn5}[10.12e12..]}))),((#usn8 :usn2)-[``? *0Xa..12{@usn5:01 Ends With .0e0 Ends With 7.0e-0,_usn3:0.0[00..][0xabc..]}]-(usn2 :`2esn`:`4esn`{`7esn`:@usn5 =~$#usn7 =~{usn1}})) Union All Merge _usn3=Shortestpath(((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))) On Create Set @usn5 ={``}[$usn2..00][{_usn3}..123.654],_usn4 =Reduce(`3esn`=`7esn`[1.9e0..5.9e-12][9e0..@usn5],`` In `7esn` =~#usn8 =~\"d_str\"|{_usn3}[{0}...9e-1][9e-1...0e0])[Case false Contains {`7esn`} When `3esn` Is Null Then `1esn` Is Not Null Is Not Null Else .9e-1 Is Null Is Null End..][Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999})..],{@usn5:`2esn`}.``! =\"d_str\" Starts With `` Load Csv From 1e-1[$`5esn`][9e12] As `2esn`  Create Unique `3esn`=(_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null})"),
    octest_legacy:ct_string("Remove Shortestpath(({`6esn`:{123456789} Contains $0,`8esn`:2.9e1[2.9e1..][`4esn`..]})<-[`8esn`*]-(@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}}))._usn3?.`3esn`? Optional Match `4esn`=Shortestpath(((usn1 :#usn7:`8esn`{`6esn`:`5esn` Ends With Count(*),usn1:1e-1 Contains 0.0}))),((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})) Unwind 12.0 In `7esn` As _usn4 Union Delete {_usn4} In 0X7 In 0e0,.9e12 Starts With 0X7 Starts With .9e-1 Create Allshortestpaths((`5esn` {`3esn`:$@usn5 Is Null Is Null})-[`8esn`? *1000..{usn2:0X7[#usn7..][$@usn5..]}]->(`2esn` {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})),``=({`4esn`:{7}[0x0][1e1]})-[:`8esn`|:#usn8 *01]-(usn2 :`2esn`:`4esn`)-[$#usn8]->({usn2:01[`4esn`..]}) With  Extract(#usn7 In .0e-0 In 12 Where {`6esn`}[6.0e0..9e0][.9e1..12e12]|Count(*)[$7]) Is Null Is Null As `1esn` Order By {_usn3:.0e-0[..``][..$7]}[..(`6esn` :`4esn`:usn2)-[$#usn8]->(`3esn` :`5esn`:`7esn`)][..@usn5] Descending,Any(@usn6 In 9e12[..usn2][.._usn3] Where 12e12[.9e12..07]) Ends With Shortestpath(((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}))) Asc,$`1esn` In 0Xa Desc Skip 1e1 Ends With $_usn3 Ends With .1e1 Where {#usn8} Starts With {`2esn`} Union All Detach Delete {1000} =~4.9e12 =~9e1,Null,10.12e12[010..1e1][.1e-1..{1000}] Return *,2.12[{12}] As #usn7,.0e-0 =~usn2 As `1esn` Order By $`8esn` =~{`6esn`} =~12 Ascending,Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End In (:usn1)<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}) In [_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|usn2 Ends With $123456789 Ends With {999}] Ascending,Any(_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0) Ends With Reduce(`6esn`=1e1 Ends With 12 Ends With 999,`` In `7esn` =~#usn8 =~\"d_str\"|$usn2 Contains $`3esn` Contains 6.0e0) Ends With `1esn`(Distinct {0} Is Not Null Is Not Null) Descending Skip {`6esn`} In {_usn4} In $12 Foreach(usn2 In {_usn4} In 0X7 In 0e0| Detach Delete $@usn5 Is Not Null Is Not Null,_usn3 =~{7} =~123.654,@usn5[@usn6] Start _usn4=Rel:_usn4({`1esn`}) )"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv From (usn1 :usn1{#usn7:.0e-0[..01234567],#usn7:{1000}[0..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[`3esn`?:_usn4|:`1esn`]->(`6esn` :`4esn`:usn2)[Filter(`2esn` In $@usn5 Is Not Null Is Not Null Where {@usn6} In 9e12)][(`` {`7esn`:`4esn` =~010})<-[:`5esn`{_usn4:0e-0[..$usn2],usn2:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]-(`6esn` :_usn4:`2esn`)-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})] As `` Fieldterminator \"d_str\" Merge `5esn`=(:`3esn`{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}) On Create Set Allshortestpaths(((:usn1{#usn8:$`8esn` Is Not Null Is Not Null,`5esn`:3.9e-1 Starts With .9e0 Starts With {#usn7}})-[usn2 *7]-(`` )<-[``:usn1|usn2{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]}]->(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1}))).`4esn`!.`4esn`? =01[{usn2}..][1.9e0..],@usn5+=_usn3($`5esn`[$_usn3][$12])[None(#usn8 In 07[..$`5esn`])..][All(`` In `7esn` =~#usn8 =~\"d_str\" Where 12e12 Is Not Null Is Not Null)..],Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`|\"d_str\" In usn2 In $`7esn`).`1esn`! =(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])] On Match Set `6esn` =$`5esn`[$0],@usn5 =None(`` In `7esn` =~#usn8 =~\"d_str\" Where 1e-1 =~$`7esn` =~1e1) Is Not Null Is Not Null,`2esn` ={`8esn`} Starts With .9e-1 Starts With 1000 Return 00[..@usn6] As `6esn`,{`3esn`}[...1e1][..0],Extract(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`|{`2esn`} Contains 0xabc) Is Null Is Null As `2esn` Skip $usn2 Ends With 9e12 Ends With Count ( * ) Limit 0xabc Starts With {`3esn`} Starts With {``}"),
    octest_legacy:ct_string("Create Constraint On(`1esn`:`5esn`)Assert usn2(Distinct 1.0 In {usn1},10.12e12[usn2]).`1esn`?.`3esn`!.`7esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[``:_usn4]-()Assert Exists(Case When 6.0e0 =~12.0 =~9e1 Then $12 Ends With 7.0e-0 Ends With 9e-12 When $usn2[..$999][..#usn8] Then $1000[_usn4][{@usn5}] End.`8esn`!._usn3)"),
    octest_legacy:ct_string("Drop Constraint On()<-[usn2:#usn8]-()Assert Exists(Single(usn1 In \"d_str\" Contains {@usn6} Where {`1esn`} Is Null).@usn6!)"),
    octest_legacy:ct_string("With  0Xa Starts With 9e0 Starts With Count(*) Skip $``[1.0..][_usn3..] Foreach(`5esn` In Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}]| Load Csv From 7 In 1e1 In {``} As `2esn` Fieldterminator \"d_str\") Union All Start `1esn`=Rel:_usn3(@usn5='s_str') Where 12[4.9e12..]"),
    octest_legacy:ct_string("Create Constraint On(_usn3:usn1)Assert Exists(Single(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`).``!)"),
    octest_legacy:ct_string("Create `7esn`=((`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[_usn3?:`7esn`|usn1]-(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[usn2 *7]-(`8esn` :#usn7:`8esn`)) Create Unique (`1esn` {usn2:.9e-12[.12e12..][0Xa..]}),Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})))"),
    octest_legacy:ct_string("Create Constraint On(#usn7:usn1)Assert None(usn2 In $`5esn`[{`4esn`}][{0}]).`5esn` Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()<-[`7esn`:``]-()Assert Exists(Single(`2esn` In $@usn5 Is Not Null Is Not Null Where {`3esn`} =~$@usn5 =~`2esn`).@usn5?.@usn6!)"),
    octest_legacy:ct_string("Create Constraint On(usn2:#usn7)Assert Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .12e12 Starts With 5.9e-12 Starts With `4esn`).`3esn`? Is Unique"),
    octest_legacy:ct_string("Unwind Case When $123456789 Is Not Null Is Not Null Then $`5esn` Is Not Null End Ends With {_usn3:$12 Is Not Null Is Not Null} Ends With [`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 6.0e0 =~12.0 =~9e1|@usn6 Ends With $`2esn` Ends With 1.0] As `3esn` Remove `8esn`:usn2 Load Csv With Headers From Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}]) As usn2  Union All Merge ((`8esn` :`8esn`)-[#usn7:@usn6|:`4esn`]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[`8esn`*]-(`7esn` :``{usn2:$7})) With  9e-1 Is Not Null As _usn3,{12} Ends With 1e1 Skip Reduce(`8esn`=1e1[$_usn3],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e-0[..``][..$7]) Ends With Reduce(`3esn`=2.12[`4esn`][.9e-1],usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{`8esn`} In {_usn3} In 6.0e0) Ends With `1esn`(@usn5[9e-1..{`1esn`}],$`4esn`[$@usn6...12e12]) Limit (`1esn` :@usn6:_usn3{#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12})<-[@usn5?:`5esn` *01{#usn8:00[Null..usn2],@usn6:0.12 =~2.9e1 =~9e1}]-({@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})[Filter(_usn3 In `8esn`[_usn4] Where 01234567 =~12e12 =~.0e-0)..][{`7esn`:.9e1[$`1esn`..][$``..]}..] Where false[9e12] Create #usn7=Allshortestpaths(((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),Shortestpath((_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[?{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})) Union All Return Distinct {1000} Is Null As `2esn`,(`` {`7esn`:`4esn` =~010})<-[:`5esn`{_usn4:0e-0[..$usn2],usn2:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]-(`6esn` :_usn4:`2esn`)-[?:_usn3]->({`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}}) Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where `7esn` Ends With 10.12e12) As `8esn`,$`` =~$_usn3 Order By usn1 Ends With 11.12e-12 Ends With 5.9e-12 Descending,.1e-1 Is Not Null Ascending,Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}] Descending Skip Any(usn1 In $@usn6 Is Null Is Null Where 0e-0[{@usn6}]) =~[`6esn` In 010[{`1esn`}..] Where 7 Starts With 9e-12|Null[#usn7..][9.1e-1..]] =~Reduce(#usn7={12} Ends With $`3esn` Ends With 0xabc,usn1 In $@usn6 Is Null Is Null|`1esn`[Null][{@usn6}]) Create Allshortestpaths((({usn1:#usn7[.9e0..`3esn`][{`6esn`}..1000],_usn4:$usn2 In #usn7 In #usn7})-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[``? *0Xa..12{@usn5:01 Ends With .0e0 Ends With 7.0e-0,_usn3:0.0[00..][0xabc..]}]-(`7esn` :`7esn`))),(((:`1esn`:``{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]})<-[:#usn8|:``{#usn7:$#usn7}]-(#usn7 $12)-[`7esn`?:`2esn`|`5esn` *0]->(`4esn` :@usn5))) Unwind Allshortestpaths((`` $999)<-[? *0X0123456789ABCDEF]->(`1esn` :_usn3)<-[#usn8?:#usn7|:@usn5]-(@usn5 :#usn7:`8esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true}))[All(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Is Null Is Null)..][Allshortestpaths((({@usn6:01 Contains 9e-12 Contains $7})))..] As @usn5"),
    octest_legacy:ct_string("Drop Constraint On(``:`2esn`)Assert Exists(Allshortestpaths((`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})).``?)"),
    octest_legacy:ct_string("Foreach(usn1 In \"d_str\" Is Not Null Is Not Null| Create #usn7=(((#usn8 :`8esn`{usn1:{1000} Starts With 10.12e12 Starts With .0e-0,`7esn`:11.12e-12 Ends With 's_str'})-[?:@usn5|:#usn7 *0]->({@usn6:{`5esn`} Is Not Null Is Not Null,`6esn`:`4esn`[9e-12..true]})-[:usn2{``:07 Ends With {1000} Ends With 01234567,`5esn`:999 Ends With {#usn8}}]->(:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]}))) Unwind (@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[`8esn`?:_usn3 *12{usn1:#usn7[.9e0..`3esn`][{`6esn`}..1000],_usn4:$usn2 In #usn7 In #usn7}]-(_usn4 :_usn4:`2esn`{usn1:$`6esn` In 999 In {_usn3},usn1:1.0 Is Null Is Null})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(usn2 :`2esn`:`4esn`)[..Reduce(`2esn`={1000}[..{usn1}][..1e-1],_usn3 In `8esn`[_usn4]|Count(*)[$7])][..{_usn3}] As `6esn`) Create usn1=(:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0}),(`` :`8esn`)"),
    octest_legacy:ct_string("With Distinct Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .12e12 Ends With 07 Ends With 3.9e-1) Is Null Is Null As #usn8,.9e1 Is Null Is Null As #usn8,00[..@usn6] Order By 12 Ends With 12e12 Asc,.9e12 Starts With 0X7 Starts With .9e-1 Asc Skip 00[Null..usn2] Limit 01[{usn2}..][1.9e0..] Where $usn1 =~.0e0 =~{`4esn`} Remove Allshortestpaths((`2esn` :_usn3)).@usn6!,Extract(usn1 In $@usn6 Is Null Is Null Where _usn4[{``}..{`6esn`}][$7..$_usn3])._usn4!.@usn5? Start `2esn`=Node:@usn5(#usn7=\"d_str\") ,@usn6=Relationship:#usn8(usn2={12})Where \"d_str\" Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Constraint On(``:`7esn`)Assert All(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1]).``! Is Unique"),
    octest_legacy:ct_string("Unwind (`4esn` {`6esn`})<-[?{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[?:`5esn`]-(`4esn` {`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}) Is Not Null Is Not Null As `2esn` Unwind Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null As #usn8 Foreach(@usn5 In {`6esn`} Starts With 12e12 Starts With {`2esn`}| Load Csv With Headers From $`3esn` =~0x0 As usn1  Remove #usn7:`1esn`:``)"),
    octest_legacy:ct_string("Drop Constraint On(#usn8:``)Assert Exists(Reduce(_usn3=0e-0[..$usn2],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|01234567[10.12e12][0Xa])._usn3!._usn3?.@usn5?)"),
    octest_legacy:ct_string("Create Constraint On()-[`1esn`:`8esn`]->()Assert Exists(Filter(`6esn` In 010[{`1esn`}..] Where `6esn` Ends With 1e1 Ends With $#usn7).`4esn`)"),
    octest_legacy:ct_string("Create Constraint On(@usn5:#usn7)Assert Any(_usn3 In `8esn`[_usn4] Where $_usn3[usn2..][usn1..]).`8esn`.`2esn`.#usn8! Is Unique"),
    octest_legacy:ct_string("Start `1esn`=Rel:`2esn`(#usn8=\"d_str\") ,#usn8=Node( {123456789})Where .12e-12[@usn6..'s_str'] With Distinct .12e-12[@usn6..'s_str'],Allshortestpaths((((@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})-[``? *..00{@usn5:$`8esn` =~{`1esn`} =~$7,#usn7:.12e-12 Starts With .12e-12}]->({_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]})-[:`8esn`|:#usn8 *01]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}}))))[..Case When {#usn7} Ends With 999 Ends With 12 Then {`3esn`}[999..$`4esn`] End],5.9e-12[01][`4esn`] As _usn4 Skip Single(`` In `7esn` =~#usn8 =~\"d_str\")[Reduce(`3esn`=1e1[$_usn3],`2esn` In $@usn5 Is Not Null Is Not Null|8.1e1[..9.1e-1][...9e1])][[#usn7 In .0e-0 In 12 Where \"d_str\"[0x0..{@usn6}][$@usn5..0]|{7}[$@usn5..123456789][1e1..1.9e0]]] Union All Merge `5esn`=Shortestpath(((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`}))) On Create Set `4esn` =Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 7 In 1e1 In {``})[Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..])..@usn6(0xabc[..Count(*)][..$`5esn`])][$`6esn`..{#usn7:00 =~`4esn` =~.9e-12}] Return Distinct Allshortestpaths((({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)))[Extract(`1esn` In $12 In {usn2} Where 9e-1[1.9e0])..][Case When `3esn` =~$#usn7 Then $usn2 In #usn7 In #usn7 When $`5esn`[{`4esn`}][{0}] Then 2.9e1[2.12..1.9e0] Else #usn7 =~$@usn5 =~{7} End..] As #usn8,{12} Ends With 1e1 As `8esn` Order By ``[$7..$_usn4] Asc Delete {@usn5:usn1 =~0Xa =~0,`3esn`:{`8esn`} Contains $@usn5} Starts With [#usn8 In 07[..$`5esn`] Where {`8esn`} In {_usn3} In 6.0e0] Starts With Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null),0.0[$`4esn`] Union All Merge `5esn`=Shortestpath(((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`}))) Return Null[{999}..$usn2] As `7esn`,{@usn6:$12 Is Null} In (`4esn` {`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}) As usn2 Skip .12e-12[{`1esn`}][`1esn`] Remove (:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(`2esn` :@usn5)-[`8esn`:_usn4|:`1esn`]->({@usn6:.12e12 Starts With 5.9e-12 Starts With `4esn`}).#usn7,Filter(#usn7 In .0e-0 In 12 Where _usn4 Is Not Null Is Not Null).#usn7!"),
    octest_legacy:ct_string("Detach Delete \"d_str\" Starts With ``,{12}[true..][7..] Start _usn3=Rel:`8esn`(usn1={#usn7}) ,`4esn`=Rel:_usn4(@usn5={#usn7})Where 6.0e0 =~12.0 =~9e1 Union Foreach(`1esn` In `5esn` Contains 0 Contains $12| Load Csv From $12 Contains false Contains {`1esn`} As _usn4 ) Unwind 9e-1[0.0..] As `7esn` Unwind Extract(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`|.9e-12[.12e12..][0Xa..])[{#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]}..] As `1esn` Union All Create Unique @usn6=(({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)) Start @usn6=Node:`2esn`(#usn7={`4esn`})  Unwind [`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] As @usn5"),
    octest_legacy:ct_string("Load Csv With Headers From 2.12[010..][{999}..] As `5esn` Fieldterminator \"d_str\" Remove All(usn1 In {#usn7} =~.12e12 =~9e0 Where {7}[$@usn5..123456789][1e1..1.9e0]).`6esn`!,{`8esn`:2.9e1[Count ( * )..]}.@usn6.usn2!,Any(_usn3 In `8esn`[_usn4] Where 010[..9e-1][..0X7]).`1esn`? Union Foreach(usn2 In Single(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Is Not Null| Unwind 5.9e-12 =~@usn6 =~.12e-12 As _usn4 Remove _usn4:`4esn`:usn2,`1esn`(Distinct 0e-0[{12}],Count(*)[$7]).`4esn`._usn4,[#usn7 In .0e-0 In 12 Where {#usn8} In {12} In .9e12].`4esn`!.#usn7) Optional Match #usn7=((`` {`7esn`:`4esn` =~010})<-[`3esn`?:_usn4|:`1esn`]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})) Using Join On #usn8 Using Join On _usn4 Start _usn3=Relationship(0x0) ,``=Relationship( {@usn5})Where 0Xa In 1.0 In $@usn5 Union All Load Csv From $12 Is Null As `7esn` Fieldterminator 's_str' Merge `5esn`=((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1)) On Match Set usn2+={7} Starts With 0x0 Starts With 9e1,`3esn`:`8esn`,{_usn4:07 Ends With {1000} Ends With 01234567}._usn4?.`1esn`? =$`7esn` Is Null On Create Set `5esn` =({`4esn`:#usn8[\"d_str\"..usn2],`1esn`:12.0[..Count ( * )][..@usn6]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ) =~Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End =~{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Foreach(`8esn` In 2.9e1 In {``}| Create Shortestpath(((`7esn` {@usn5:Count ( * )[_usn4..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null}))) Unwind Allshortestpaths(({`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})-[_usn3? *999..123456789{_usn3:`2esn` Starts With 010 Starts With ``}]-({`7esn`:.9e12 Is Not Null Is Not Null})<-[?:@usn5|:#usn7 *0]-(`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0}))[Reduce(@usn6=10.12e12 Starts With $`4esn` Starts With 0e0,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|$1000 Contains $123456789 Contains #usn8)..Case 7[..123456789][..true] When $1000[..0e-0][..010] Then 999 Starts With 7.0e-0 Starts With true End][[`2esn` In $@usn5 Is Not Null Is Not Null Where {`8esn`}[@usn5][$`2esn`]]..Case When 8.1e1 Contains .9e-1 Contains false Then 12e12 Ends With `5esn` Ends With .0e0 When 0.12[Count ( * )..Count ( * )][$999..`5esn`] Then $123456789[..$999][..`6esn`] Else 7[{`4esn`}..] End] As @usn6)"),
    octest_legacy:ct_string("Create Constraint On()<-[`6esn`:``]-()Assert Exists((`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[?:@usn5|:#usn7 *0]->(_usn3 {`2esn`:5.9e-12[0x0..]}).@usn6!.`6esn`!)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`7esn`)Assert None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where usn1 =~false =~{999}).#usn8! Is Unique"),
    octest_legacy:ct_string("With  $12 Contains false Contains {`1esn`},None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Starts With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) Starts With None(usn1 In \"d_str\" Contains {@usn6} Where `1esn` Is Not Null Is Not Null),[`6esn` In 010[{`1esn`}..] Where 7 Starts With 9e-12|Null[#usn7..][9.1e-1..]][None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`})..][`1esn`(@usn5[9e-1..{`1esn`}],$`4esn`[$@usn6...12e12])..] As `4esn` Limit {usn1}[`7esn`..Count(*)] Where $@usn6 Starts With 0xabc Starts With {`7esn`} Detach Delete $`3esn`[..{`5esn`}] Merge `4esn`=((`7esn` {@usn5:Count ( * )[_usn4..]})-[?:#usn8|:``{``:usn1 Ends With 11.12e-12 Ends With 5.9e-12,`2esn`:{12} Contains `8esn` Contains @usn5}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})) On Match Set #usn7 =``[$7..$_usn4] Union Merge usn1=Allshortestpaths(((`1esn` {usn2:.9e-12[.12e12..][0Xa..]})-[``? *0X0123456789ABCDEF{`3esn`:#usn8 =~{@usn5}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]}))) On Create Set `5esn`+=Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] Detach Delete Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})[Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})<-[`5esn`?:`7esn`|usn1{@usn5:9e0[`3esn`][0]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(`5esn` )))..][Case When $#usn7 Contains 3.9e-1 Then .12e12 Starts With 5.9e-12 Starts With `4esn` When {1000}[`2esn`...0e-0][9e-1..0X7] Then 010[...12e-12] End..]"),
    octest_legacy:ct_string("Drop Constraint On()<-[usn2:_usn4]-()Assert Exists({`6esn`:{usn1}[7.0e-0..][3.9e-1..]}._usn4?)"),
    octest_legacy:ct_string("With  (usn1 {@usn6:3.9e-1[..$1000][..0.12]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` )<-[_usn4?:``|:`7esn` *0X0123456789ABCDEF]-({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5}) Contains ({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})-[:_usn3]->(`1esn` :`2esn`:`4esn`)-[usn1?:`3esn`|`3esn`{usn2:01[`4esn`..]}]->({`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Contains ``(Distinct 9e12[..usn2][.._usn3],Count ( * )[_usn4..]) As `2esn` Order By 6.0e0 In 9e-1 In 123456789 Ascending,Shortestpath(((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1)))[..Any(#usn7 In .0e-0 In 12)] Asc,(`2esn` :_usn4:`2esn`{usn1:12.0 Starts With 00,`6esn`:0.12 =~2.9e1 =~9e1})-[`3esn` *..0x0]-(`` {#usn7:{_usn3}[{0}...9e-1][9e-1...0e0]})<-[?:_usn4|:`1esn` *01]-(`4esn` {`3esn`:{`7esn`} =~\"d_str\" =~{``},`3esn`:{`1esn`} Contains 1.0 Contains 4.9e12}) =~Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 9e12 Is Null Is Null) =~(:@usn5{#usn7:Null,`5esn`:{@usn5} Ends With 0Xa Ends With .12e-12})-[:`3esn`|`3esn` *1000..]-(@usn6 ) Ascending Merge (:`3esn`{@usn5:9e12[..usn2][.._usn3]}) On Create Set #usn8:`8esn` On Match Set `4esn`+=Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000),{`8esn`:`` Ends With 1.0 Ends With usn1,@usn5:$usn1 =~.0e0 =~{`4esn`}}.#usn7 ={usn1} Contains {`2esn`},Case {`8esn`} Is Not Null Is Not Null When 999 Starts With 7.0e-0 Starts With true Then .12e12[$usn1..][{@usn6}..] End.#usn8?.`2esn`?.`7esn`? =#usn7[$`8esn`][{`3esn`}] Union Merge Shortestpath(((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]}))) On Match Set #usn7 =All(#usn8 In 07[..$`5esn`] Where $@usn6 Starts With 0xabc Starts With {`7esn`}) On Match Set @usn6 =$@usn6[.1e-1][9e12] Merge `6esn`=Shortestpath((`1esn` :`2esn`:`4esn`)<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[?:_usn3]->(#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})) Start _usn4=Node:`4esn`({12}) ,``=Node:_usn3({0})"),
    octest_legacy:ct_string("Load Csv From 0[10.12e12] As `6esn` "),
    octest_legacy:ct_string("Create Constraint On()-[`8esn`:_usn4]-()Assert Exists(Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `2esn`|01 =~07).`2esn`!)"),
    octest_legacy:ct_string("Drop Constraint On(_usn4:`6esn`)Assert Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {#usn8}[..@usn5]).`7esn`.@usn6 Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`5esn`:`4esn`)Assert Reduce(_usn4=1e-1 =~$`7esn` =~1e1,usn2 In .12e-12 Ends With `2esn`|0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}]).usn2! Is Unique"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:@usn6]->()Assert Exists(Allshortestpaths(((usn1 :@usn6:_usn3)-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1}))).`1esn`!)"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From .9e12 Starts With 0X7 Starts With .9e-1 As `1esn`  Merge Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))) On Match Set $`4esn`.@usn6? =0e-0[#usn7..999],`6esn` =.1e-1[$@usn6],_usn4+=All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] On Match Set `7esn` =0.0[..9e1][..2.12],#usn8+=1.0[$`4esn`..$@usn5]"),
    octest_legacy:ct_string("With Distinct [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,$`7esn` In $`4esn` As `8esn`,Extract(`1esn` In $12 In {usn2} Where 2.9e1 =~Count(*) =~{123456789})[{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}..][123.654..] Order By 0x0[{`6esn`}..] Descending Limit usn1 =~false =~{999}"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`3esn`)Assert Reduce(#usn8=$_usn3 In `2esn` In `3esn`,`2esn` In $@usn5 Is Not Null Is Not Null|5.9e-12[12e-12][$`8esn`])._usn4! Is Unique"),
    octest_legacy:ct_string("Remove Reduce(usn1=false[..usn2][..999],`2esn` In $@usn5 Is Not Null Is Not Null|7.0e-0 Is Not Null).@usn6?"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`2esn`)Assert Case When {usn2} Is Not Null Is Not Null Then false Contains {`7esn`} When {_usn3} Is Null Is Null Then .12e12 Ends With 07 Ends With 3.9e-1 End.#usn7! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:@usn5)Assert Exists(#usn7(.12e12 Is Not Null).@usn5?)"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From 12 Ends With 12e12 As usn1 Fieldterminator \"d_str\" Foreach(#usn7 In Reduce(#usn8={12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],`8esn` In {_usn4} Ends With {0} Ends With `1esn`|$@usn5 Is Not Null Is Not Null) =~count(Distinct $`8esn` =~{`1esn`} =~$7,@usn6 Starts With #usn7) =~None(usn2 In .12e-12 Ends With `2esn` Where 12[@usn6][{`2esn`}])| Unwind 1e1 =~{@usn5} =~`7esn` As #usn8) Return Distinct [@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {`6esn`} =~2.12 =~123.654|.0e0[usn1..7.0e-0][$`5esn`...9e-12]] Starts With Case $_usn4 =~$#usn8 =~{`4esn`} When 9e12[..usn2][.._usn3] Then 0 Starts With `7esn` Starts With 9e0 When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End Starts With Case When @usn5 Ends With $`8esn` Ends With $1000 Then 1000[{`1esn`}..][$`3esn`..] When usn2 Ends With $123456789 Ends With {999} Then 12.0[...0e0] End,$`7esn` In $`4esn` As `8esn`,Extract(`1esn` In $12 In {usn2} Where 2.9e1 =~Count(*) =~{123456789})[{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]}..][123.654..] Order By $`6esn`[@usn6...9e-12] Asc,9e-12 Starts With {1000} Desc Skip 9e0 Ends With {7}"),
    octest_legacy:ct_string("Optional Match (_usn4 :`6esn`)<-[:#usn8|:``{#usn7:$#usn7}]-(#usn7 $12),(((:_usn3{`5esn`:.9e-1 Contains .9e0 Contains ``})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]}))) Using Index `3esn`:`8esn`(`5esn`) Using Index `6esn`:usn1(`3esn`) With Distinct 1.9e0[..1.0][..`6esn`] As `1esn` Order By $999 Ends With `2esn` Ends With 12.0 Ascending Limit Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] Load Csv From `1esn`[{@usn5}..][{_usn4}..] As `6esn`  Union All With Distinct usn1 Ends With 11.12e-12 Ends With 5.9e-12 Limit Any(`1esn` In $12 In {usn2} Where @usn6[true..]) Contains Any(usn2 In .12e-12 Ends With `2esn` Where 9e12 Ends With 9e-1 Ends With 9e1) Contains (`2esn` :usn1)<-[:`1esn`|:`1esn`]-(:`1esn`:``{_usn3:9e-1 Contains 3.9e-1,@usn6:$`8esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(_usn4 :_usn3) Start `5esn`=Relationship:_usn4({_usn3}) Where `` Ends With 1.0 Ends With usn1 Start `2esn`=Relationship:``(`1esn`=\"d_str\") ,`2esn`=Node( {`6esn`})"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:#usn8)Assert Reduce(`2esn`=$1000 Contains $123456789 Contains #usn8,`` In `7esn` =~#usn8 =~\"d_str\"|_usn4 Is Not Null Is Not Null).`4esn` Is Unique"),
    octest_legacy:ct_string("Create ({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})<-[_usn3? *0xabc..12]->(_usn3 {#usn7:$999 =~false =~{`8esn`}}) Start _usn3=Node( {123456789}) Where {`3esn`}[$#usn8..] With  Filter(usn1 In \"d_str\" Contains {@usn6} Where $`8esn`) Contains (`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2) Contains Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where Null In {7}),1.9e0[Shortestpath((`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})-[`3esn`?:_usn3 *..123456789]-(:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]}))] As _usn4 Skip (`1esn` :`8esn`{`6esn`:9e-1 Contains 3.9e-1,_usn4:{`3esn`}[...1e1][..0]})<-[`7esn`?:@usn5|:#usn7]->(`8esn` :@usn6:_usn3)<-[`1esn`:#usn7|:@usn5 *..123456789]-({#usn7:{7}[0x0][1e1]})[{`3esn`:0.12 In $``}] Limit 11.12e-12 =~Count ( * ) Union All Start `3esn`=Node( {1000}) ,`1esn`=Rel:@usn6(`2esn`='s_str')Where $123456789[..$999][..`6esn`] With Distinct .1e-1[2.9e1..][$`7esn`..] As #usn8,Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Not Null Is Not Null As #usn8,07[9e-1..][1e1..] As `4esn` Skip {`4esn`} Contains 4.9e12"),
    octest_legacy:ct_string("Create Constraint On()-[`5esn`:`1esn`]-()Assert Exists(Reduce(`2esn`=$usn2 Starts With $999 Starts With .0e0,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|0xabc[0Xa..]).@usn5)"),
    octest_legacy:ct_string("Foreach(usn2 In usn2[12e-12..{`8esn`}][.12e12..{123456789}]| Unwind {`7esn`}[0.12] As `6esn` Match `2esn`=Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}}))) Where $123456789[..$999][..`6esn`]) Load Csv From None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) As `6esn` Fieldterminator \"d_str\" Union Optional Match (((`` :`1esn`:``)<-[usn2:`3esn`|`3esn` *0Xa..12]->(`4esn` )-[usn1?:`3esn`|`3esn`*..]-(@usn5 :`3esn`{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))),#usn7=Allshortestpaths(((`2esn` :`4esn`:usn2{`7esn`:$_usn4 =~$#usn8 =~{`4esn`}})-[`3esn`?:usn2]-(:`1esn`:``{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})<-[``?{``:{#usn7} =~$@usn6 =~$7}]-(:@usn6:_usn3))) Using Join On usn1,`1esn`,_usn4 Where {0}[.1e-1..][_usn4..] With  .1e1 Contains 1e-1 Contains #usn8,.9e-12[usn2] As usn1,.1e1 Contains 1e-1 Contains #usn8 As `` Skip Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Limit 010 =~9.1e-1 =~{`8esn`}"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths(((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[usn2 *999..123456789{usn1:12e12 Ends With `5esn` Ends With .0e0}]-(`3esn` :#usn8:@usn6)-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}))),Shortestpath((((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[`8esn`*]-(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)))) With Distinct 12.0 =~{@usn6} As _usn3,.1e-1[$@usn6] As `3esn` Skip {`4esn`}[{`3esn`}][$`2esn`] Where .0e-0[..01234567]"),
    octest_legacy:ct_string("Create Constraint On()<-[`6esn`:_usn4]-()Assert Exists(Case 0e-0 In 0X0123456789ABCDEF In `3esn` When $12[10.12e12][.1e1] Then usn1 Ends With 11.12e-12 Ends With 5.9e-12 Else {123456789} Starts With $_usn4 Starts With 0x0 End.`8esn`?.`7esn`?)"),
    octest_legacy:ct_string("Detach Delete Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])[..(#usn7 {`5esn`:.12e12 Is Not Null,@usn5:.12e12 Is Not Null})-[#usn8:`7esn`|usn1 *0X7..0Xa{usn1:_usn4 Is Not Null Is Not Null}]->(@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[ *999..123456789{`2esn`:_usn3 =~{7} =~123.654}]->(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})][..Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`)] Start `5esn`=Node:`8esn`('s_str')  Union Start `7esn`=Rel( {_usn3})  With Distinct *,0 Contains {`2esn`} Union All Load Csv From Single(`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0) Is Not Null As `3esn`  Merge `6esn`=(usn1 :#usn8:@usn6) On Create Set `6esn`+=$#usn7 On Create Set `8esn` ={#usn8} Is Not Null Is Not Null,@usn5+={`3esn`} Is Not Null Is Not Null,#usn8:`` Detach Delete Single(_usn3 In `8esn`[_usn4] Where `3esn` Contains `2esn` Contains {_usn4}) In Any(_usn3 In `8esn`[_usn4] Where 1e1 =~{@usn5} =~`7esn`) In {7},$usn2 Ends With 9e12 Ends With Count ( * ),$`5esn` =~Count(*) =~1.9e0"),
    octest_legacy:ct_string("Unwind 8.1e1[..9.1e-1][...9e1] As @usn5 With  9e1 =~$`8esn` =~10.12e12 Limit 5.9e-12[\"d_str\"..][{`6esn`}..] Where {`8esn`}[..999][.._usn3]"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:usn2)Assert Exists({usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]}._usn4)"),
    octest_legacy:ct_string("Create Constraint On(``:`5esn`)Assert Shortestpath((`8esn` :#usn8:@usn6{#usn7:`6esn`[0X0123456789ABCDEF..][`8esn`..],#usn8:Count(*)[..{#usn7}]})<-[usn1:`2esn`|`5esn`{`2esn`:$`7esn` Starts With 's_str',``:2.12[{12}]}]-({`5esn`:.0e-0 In 12,_usn4:{_usn3}[{0}...9e-1][9e-1...0e0]})).@usn6? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(`8esn`:`2esn`)Assert #usn7($12[10.12e12][.1e1]).`6esn`!.usn2?.usn2! Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`8esn`)Assert Reduce(`2esn`=.1e-1[..$_usn3][..0],@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|5.9e-12[12e-12][$`8esn`])._usn3.`6esn`?.`3esn`! Is Unique"),
    octest_legacy:ct_string("Start `5esn`=Node:usn2(_usn4='s_str') Where 0e-0[..7.0e-0][..{`8esn`}] Unwind 0[.9e-1..0e0][.1e1.._usn4] As #usn8 Union Create #usn8=Allshortestpaths((usn1 {`2esn`:{`6esn`} In {_usn4} In $12,@usn6:00[Null..usn2]})-[`3esn`:#usn8|:``{``:$``[9e0..][5.9e-12..],``:$#usn7 Contains 3.9e-1}]->(:_usn4:`2esn`{``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})),Shortestpath(((@usn6 :usn2{@usn5:$`5esn`[{`4esn`}][{0}],usn2:9e12 Is Null Is Null})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})-[usn1?:@usn6|:`4esn` *..123456789]->({#usn8:_usn4[$_usn4]}))) Match `3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})-[?]->(`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?]-(@usn5 :`2esn`:`4esn`{`1esn`:0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}],@usn6:999 Starts With 7.0e-0 Starts With true})),usn1=((`` :`7esn`)) Using Index @usn5:_usn4(usn2) Using Join On `1esn`,`3esn`,`5esn` Union All Start `5esn`=Relationship:#usn8(@usn5={@usn6}) ,@usn6=Node:@usn5({`4esn`}) Unwind 5.9e-12 =~{12} =~{`2esn`} As usn1 Create Unique ``=Allshortestpaths(((`8esn` :#usn7:`8esn`)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(`8esn` :`4esn`:usn2))),`7esn`=(@usn5 :@usn5{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6})-[usn2?:`1esn`|:`1esn` *..123456789]-(:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[:_usn3]-(`3esn` )"),
    octest_legacy:ct_string("Return 5.9e-12 =~{12} =~{`2esn`} Limit Count ( * ) Starts With 0.12 Union All With  *,12.0[..Count ( * )][..@usn6] Where $`1esn`[..12e-12][...9e12] Optional Match _usn4=(((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 )<-[`3esn`?:`6esn`{@usn6:{`5esn`} Is Not Null Is Not Null,@usn6:$usn1 Contains 4.9e12 Contains $`2esn`}]->(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}))) Using Scan `3esn`:`` Where $`5esn` =~Count(*) =~1.9e0"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`6esn`)Assert All(`7esn` In 0.12 Is Not Null Where 01234567[1000..][$`8esn`..]).`1esn`!.usn1? Is Unique"),
    octest_legacy:ct_string("Return Distinct {123456789} =~.9e1 =~$_usn3,12.0[..Count ( * )][..@usn6] Order By Any(`7esn` In 0.12 Is Not Null Where $0 Contains $7) Is Not Null Is Not Null Asc Limit Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Null Is Null Merge `6esn`=Shortestpath(((#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn4]-(`2esn` :`1esn`:``))) Return Distinct *,$`4esn`[#usn7][8.1e1] As `2esn` Skip [usn1 In \"d_str\" Contains {@usn6} Where 5.9e-12[0x0..]|4.9e12 Ends With $@usn6] =~(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})<-[`1esn`{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]-(`1esn` :usn2) =~(`3esn` :#usn8:@usn6)-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-({usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[:`2esn`|`5esn` *01]-({@usn6:{_usn4} In 0X7 In 0e0}) Union Merge _usn4=((_usn3 :`6esn`)<-[?{`1esn`:{123456789}[...9e-1][..1.0],#usn8:$`4esn` Ends With {999}}]->({`2esn`:$`6esn` Starts With 0.0})) On Create Set `7esn`+=$``[Count(*)..{12}],@usn5 =All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))]"),
    octest_legacy:ct_string("Return $12 Contains false Contains {`1esn`},None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Starts With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) Starts With None(usn1 In \"d_str\" Contains {@usn6} Where `1esn` Is Not Null Is Not Null),[`6esn` In 010[{`1esn`}..] Where 7 Starts With 9e-12|Null[#usn7..][9.1e-1..]][None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`})..][`1esn`(@usn5[9e-1..{`1esn`}],$`4esn`[$@usn6...12e12])..] As `4esn` Limit {usn1}[`7esn`..Count(*)] Union Create `6esn`=(({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[_usn4? *999..123456789{@usn6:$`4esn` Ends With .12e12 Ends With 123.654}]->(#usn8 {usn2:$0 Ends With 9e-12 Ends With $_usn4,`5esn`:0e-0[{@usn6}]})-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]-(`1esn` :_usn4:`2esn`))"),
    octest_legacy:ct_string("Merge Allshortestpaths(((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))) With Distinct $usn2 Starts With $999 Starts With .0e0,Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where $`` =~$_usn3) In .0e0 In Shortestpath((:`7esn`{usn2:00 Is Not Null Is Not Null})) Skip 0xabc Contains 12 Contains Null Limit None(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where {0}[.1e-1..][_usn4..])[Case {_usn3} In $#usn8 In $12 When $`5esn` =~Count(*) =~1.9e0 Then {123456789} Ends With 11.12e-12 Ends With 00 Else 01 =~{_usn3} =~01 End..][Case When .1e1 Is Not Null Is Not Null Then @usn6 Starts With #usn7 When {1000}[`2esn`...0e-0][9e-1..0X7] Then $`8esn`[..12][..9e12] End..] Where `5esn` Contains 0 Contains $12"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`6esn`)Assert Exists(Any(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null).`3esn`!)"),
    octest_legacy:ct_string("Load Csv From $#usn8 Is Not Null Is Not Null As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Constraint On(`7esn`:`6esn`)Assert [usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null].`1esn`! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[`3esn`:_usn4]->()Assert Exists((#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[`7esn`?]-(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}).`6esn`.#usn7._usn3!)"),
    octest_legacy:ct_string("Create Constraint On()<-[#usn8:@usn6]-()Assert Exists(None(usn2 In .12e-12 Ends With `2esn` Where {``} Is Null Is Null).@usn6?.`4esn`?._usn4)"),
    octest_legacy:ct_string("Start @usn5=Relationship:_usn3({`7esn`})  Merge ((#usn8 :`4esn`:usn2{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})) On Create Set `5esn` =0xabc[9.1e-1..],Case When $12[$`6esn`..][01..] Then $`4esn`[$@usn6...12e12] When .9e-12[.12e12..][0Xa..] Then {`7esn`} Is Not Null Is Not Null Else {`6esn`}[6.0e0..9e0][.9e1..12e12] End.#usn8! =(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[?{@usn6:{_usn4} In 0X7 In 0e0}]-(:`6esn`{`2esn`:`5esn` Ends With Count(*)})<-[usn2?:usn2]-({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12}) In Any(`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}) In Single(`7esn` In 0.12 Is Not Null Where $`7esn` Starts With 's_str'),Allshortestpaths((`8esn` :@usn6:_usn3)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :``{`7esn`:.9e1[$`1esn`..][$``..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}})).`3esn` ={123456789} Starts With $_usn4 Starts With 0x0 On Create Set `5esn`+=7.0e-0 Is Not Null,Any(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null).`3esn`! =_usn4 Is Not Null,`` =9e1 Is Null Is Null Union Start @usn5=Rel:#usn7(usn1={`6esn`})  Union Foreach(`3esn` In [usn1 In $@usn6 Is Null Is Null Where {_usn4} Ends With {0} Ends With `1esn`|0.12 =~2.9e1 =~9e1][Shortestpath((({@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})))..Shortestpath(((:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12})-[``?:#usn7|:@usn5{``:$usn1 Ends With {`2esn`} Ends With $usn1}]->(:`5esn`:`7esn`$usn2)-[{#usn8:\"d_str\" Contains {@usn6}}]->({`8esn`:8.1e1[.1e1..][`4esn`..],`2esn`:{@usn6} In 9e12})))]| Match ((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1)),_usn4=(`8esn` :`4esn`:usn2)-[#usn8?:`8esn`|:#usn8 *999..123456789]->(#usn7 :_usn3{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]-(#usn7 :``{`2esn`:{0}[`4esn`..{`8esn`}],`8esn`:usn2 Ends With $123456789 Ends With {999}}) Using Scan `8esn`:`2esn`) With Distinct *,(:`6esn`)<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]->(@usn5 )<-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(`7esn` ) In Case 9e1[0.0] When 999 Starts With 7.0e-0 Starts With true Then {usn2}[{999}..][9e12..] End In [`2esn` In $@usn5 Is Not Null Is Not Null Where {`3esn`} =~$@usn5 =~`2esn`|\"d_str\" Is Not Null Is Not Null] As _usn4 Order By Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] Asc,9e-12 Contains .12e12 Ascending,4.9e12[{_usn4}..] Descending Skip 010[...12e-12] Limit _usn4[{``}..{`6esn`}][$7..$_usn3] Where 11.12e-12 Ends With 's_str'"),
    octest_legacy:ct_string("Create Constraint On(_usn4:`6esn`)Assert Reduce(``=01234567[1000..][$`8esn`..],usn1 In $@usn6 Is Null Is Null|6.0e0[$12..0.12]).``.`5esn` Is Unique"),
    octest_legacy:ct_string("Start _usn3=Node( {123456789}) ,_usn3=Relationship(0x0)Where {0}[.0e-0][$`2esn`] Load Csv With Headers From {_usn3}[@usn6..] As `3esn` Fieldterminator \"d_str\" Return Distinct $7 In 1.0 In 01234567,2.9e1 =~{123456789} =~01 As usn1,Reduce(#usn7=#usn8[\"d_str\"..usn2],#usn7 In .0e-0 In 12|`` Ends With 1.0 Ends With usn1) Ends With [_usn3 In `8esn`[_usn4] Where _usn4[{``}..{`6esn`}][$7..$_usn3]] Ends With Shortestpath((((:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[`2esn`?:`8esn`|:#usn8]->(`` )<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->(`` :`1esn`:``)))) Order By 5.9e-12 =~01234567 =~$`3esn` Ascending,[`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] Descending Skip `3esn`[{`4esn`}] Union All Create Unique `2esn`=((_usn3 :`6esn`{usn2:.9e1 In .1e-1,usn2:1e-1 Contains 0.0}))"),
    octest_legacy:ct_string("Using Periodic Commit 01234567 Load Csv With Headers From Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[`8esn`(0X0123456789ABCDEF Is Not Null Is Not Null,{usn1} Is Not Null Is Not Null)..][{usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}..] As usn2 Fieldterminator \"d_str\" Foreach(#usn8 In $usn2 Starts With $999 Starts With .0e0| Match ((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0})) Using Join On `4esn`,`5esn`,@usn6) Create Unique ((`4esn` {@usn5:$999 Ends With `2esn` Ends With 12.0})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]}))"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths(((`4esn` :`8esn`{`4esn`:4.9e12 Starts With {``},`8esn`:$12 Ends With {_usn4} Ends With $`8esn`})-[_usn3:`4esn`|:`2esn` *01234567..]->(`8esn` :`2esn`:`4esn`)<-[`2esn`?:_usn4|:`1esn`]->(_usn4 :usn2))) On Create Set usn1+=$`` Ends With 1e-1 Ends With $@usn6 Union Delete 0X0123456789ABCDEF,$usn1 =~9e1 =~$1000,{``} Contains $1000 Remove [`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 01234567[1000..][$`8esn`..]|.9e-1 Is Not Null Is Not Null].@usn5!.``?.usn2!,Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))).`5esn`?.`8esn`?.@usn5?,Extract(`7esn` In 0.12 Is Not Null Where 4.9e12 Is Not Null Is Not Null).@usn6! Detach Delete Reduce(`6esn`=`2esn`[`7esn`][1000],usn2 In .12e-12 Ends With `2esn`|010[..9e-1][..0X7]) Contains `7esn` Contains Case When 9e1 Ends With 9e12 Ends With 0x0 Then {12} Ends With 1e1 Else `4esn` Contains 0X0123456789ABCDEF Contains $usn2 End"),
    octest_legacy:ct_string("Foreach(_usn3 In $0 =~{@usn5} =~1e1| Start @usn5=Relationship( {#usn8}) ,_usn3=Rel:`1esn`({0}) Unwind 01234567[10.12e12][0Xa] As `1esn`) Union All Optional Match (({_usn3:00 =~`4esn` =~.9e-12,`1esn`:{@usn5} Contains .1e1 Contains {`5esn`}})<-[usn2:`4esn`|:`2esn` *0X7..0Xa]-(#usn7 :#usn7:`8esn`)) Using Join On ``,`4esn`,`7esn` Using Index `8esn`:#usn8(#usn8) Where 0xabc Starts With {`3esn`} Starts With {``} Unwind $`7esn` Ends With 7.0e-0 Ends With $usn2 As `5esn`"),
    octest_legacy:ct_string("Start ``=Rel:`5esn`({`2esn`})  Remove Shortestpath((_usn4 {`3esn`:.0e-0 In 12})).`2esn`._usn4!,`4esn`:@usn5 Union Delete Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``}) In (_usn4 :_usn3)<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-({#usn7:12e12[.9e12..07]}) In @usn5({1000}[0..]),`8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End Union Create Unique Allshortestpaths(((({#usn7:{7}[0x0][1e1]})<-[{@usn5:0.12 =~`6esn` =~.9e-1}]->({_usn4:12e12 Ends With `5esn` Ends With .0e0})<-[usn2?:`2esn`|`5esn`{``:{#usn7} =~$@usn6 =~$7}]->(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]}))))"),
    octest_legacy:ct_string("Drop Constraint On(usn2:`6esn`)Assert Exists([`1esn` In $12 In {usn2} Where 0 Starts With `7esn` Starts With 9e0|$12 Is Null Is Null].`3esn`?)"),
    octest_legacy:ct_string("Create Constraint On(usn2:`6esn`)Assert Reduce(_usn3=@usn5[9e-1..{`1esn`}],`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|{123456789} Starts With `6esn`).`4esn`.`6esn`? Is Unique"),
    octest_legacy:ct_string("Foreach(@usn5 In Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where $@usn6[``..][3.9e-1..]|@usn5 =~$#usn7 =~{usn1}) In Case 9.1e-1 Contains {`3esn`} Contains $12 When {@usn6} In 9e12 Then 01[$`1esn`..$`7esn`][{usn2}..12.0] When {#usn8} In {12} In .9e12 Then @usn6 Starts With #usn7 End In All(usn1 In $@usn6 Is Null Is Null Where {7} Starts With 0x0 Starts With 9e1)| Remove [`2esn` In $@usn5 Is Not Null Is Not Null Where {`6esn`} In .0e0 In $0].`4esn`?)"),
    octest_legacy:ct_string("Drop Constraint On(``:_usn4)Assert Exists(Case .9e-1 Ends With .0e-0 Ends With {_usn3} When $12 Is Not Null Is Not Null Then {``}[$usn2..00][{_usn3}..123.654] When .1e-1 Starts With @usn6 Starts With _usn3 Then 9e0[{7}...0e-0][Null..@usn5] Else $12 =~4.9e12 End._usn4!)"),
    octest_legacy:ct_string("Create Constraint On(#usn8:`1esn`)Assert Extract(#usn8 In 07[..$`5esn`] Where 00 Is Not Null Is Not Null|`5esn` Is Not Null Is Not Null).`3esn`? Is Unique"),
    octest_legacy:ct_string("Create Constraint On(`2esn`:#usn8)Assert Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 9e1[$``.._usn4][999..`3esn`])._usn3!.#usn7! Is Unique"),
    octest_legacy:ct_string("Remove Extract(`7esn` In 0.12 Is Not Null Where #usn7 In 07|2.9e1[Count ( * )..])._usn4!,Reduce(`8esn`=.9e0 =~#usn7,@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|#usn8 Is Null Is Null).`5esn`,(`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->($999)<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->(:``{`2esn`:{`8esn`} In {_usn3} In 6.0e0,usn1:{`1esn`} Is Null})._usn4? Merge (_usn4 {#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12}) Create Unique Shortestpath((:_usn3{`6esn`:{`3esn`}[..{`4esn`}][..usn2]})<-[?:`8esn`|:#usn8{`5esn`:$1000 Starts With {@usn6} Starts With $@usn5}]->(@usn6 :usn1{`2esn`:$`6esn` Starts With 0.0})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(usn2 {`7esn`:.9e12 Contains 0 Contains $0})) Union Foreach(#usn7 In Extract(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1) Starts With Case 7.0e-0[$`6esn`..] When \"d_str\"[0x0..{@usn6}][$@usn5..0] Then {1000}[`2esn`...0e-0][9e-1..0X7] Else $`5esn`[{`4esn`}][{0}] End Starts With Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $`` Starts With $`4esn` Starts With `3esn`)| Start @usn5=Relationship:_usn3({`7esn`})  Detach Delete 1.9e0 In $@usn6 In $_usn3) Remove usn1:#usn7:`8esn`,0Xa.@usn6._usn4!,[`6esn` In 010[{`1esn`}..] Where `3esn` Starts With 9.1e-1 Starts With .9e-1].`5esn`!"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:usn1)Assert Exists(Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where {@usn5} Ends With 0Xa Ends With .12e-12|{`8esn`} In {_usn3} In 6.0e0)._usn4?)"),
    octest_legacy:ct_string("Start `2esn`=Node:`8esn`('s_str') Where {`8esn`}[9e12..][{_usn4}..]"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`2esn`)Assert Exists(Reduce(`2esn`={12} Ends With $`3esn` Ends With 0xabc,#usn7 In .0e-0 In 12|.9e-12[usn2]).`3esn`)"),
    octest_legacy:ct_string("Create Constraint On(usn2:_usn3)Assert Exists(All(usn1 In $@usn6 Is Null Is Null Where 9e0[`4esn`..$_usn4][9.1e-1..0e0])._usn4!.`1esn`.`4esn`!)"),
    octest_legacy:ct_string("Create Unique @usn6=((`1esn` :`8esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))"),
    octest_legacy:ct_string("Using Periodic Commit 010 Load Csv From \"d_str\" Starts With `` As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On()-[`1esn`:#usn8]->()Assert Exists(Allshortestpaths(((#usn8 :usn2)<-[? *1000..{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]}]->(usn2 :`5esn`:`7esn`)<-[@usn5:usn1|usn2{`8esn`:{usn2} Is Not Null Is Not Null}]->(usn2 :`2esn`:`4esn`{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))).@usn5?)"),
    octest_legacy:ct_string("Create Constraint On(``:`8esn`)Assert @usn5(Distinct 0.0[00..][0xabc..]).#usn8! Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`1esn`)Assert Exists(All(`6esn` In 010[{`1esn`}..] Where usn2[12e-12..{`8esn`}][.12e12..{123456789}]).`5esn`.@usn6!.`5esn`!)"),
    octest_legacy:ct_string("Merge ({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}) On Match Set @usn5+={#usn8} Starts With {`2esn`},#usn8 =01234567[01234567..],@usn6 =6.0e0[None(`2esn` In $@usn5 Is Not Null Is Not Null Where $`5esn` =~Count(*) =~1.9e0)..][[_usn3 In `8esn`[_usn4] Where $@usn5 Is Null Is Null|.12e-12[9e1]]..] On Match Set `7esn` =1e1 Ends With $_usn3 Ends With .1e1 Merge (:usn2)<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)-[_usn3:#usn8|:``{#usn8:{_usn4} In 0X7 In 0e0,`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]-(@usn5 ) Union Merge Allshortestpaths((`2esn` :_usn3{usn1:5.9e-12 Is Null Is Null})<-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]->(:`5esn`:`7esn`{`4esn`:2.9e1[{`2esn`}]})-[ *..123456789{@usn5:$`8esn`}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})) Unwind 01[`4esn`..] As `6esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 9.1e-1 In 9e1 As `5esn`  Match _usn4=Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]}))),`3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})) Where 9e12[..usn2][.._usn3] Union Load Csv With Headers From #usn7({12} Starts With $`` Starts With 0X0123456789ABCDEF)[Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where .12e-12[9e1])..] As @usn5 Fieldterminator \"d_str\" Foreach(`2esn` In {#usn8} Starts With {`2esn`}| Load Csv From Filter(_usn3 In `8esn`[_usn4] Where 123456789[#usn7..9e-1][10.12e12..{0}]) Starts With Allshortestpaths((`5esn` :_usn4:`2esn`{``:11.12e-12 In {usn1},usn2:`3esn` Is Null})-[ *01]->(`3esn` :#usn8:@usn6{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]})<-[?:_usn3{`4esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}]->(#usn7 :@usn6:_usn3)) Starts With {@usn5:$123456789 Is Not Null Is Not Null} As usn2  Load Csv With Headers From 9e-1[{7}..1e-1][0.12..{12}] As @usn6 ) Union All Create #usn7=(((#usn8 :`8esn`{usn1:{1000} Starts With 10.12e12 Starts With .0e-0,`7esn`:11.12e-12 Ends With 's_str'})-[?:@usn5|:#usn7 *0]->({@usn6:{`5esn`} Is Not Null Is Not Null,`6esn`:`4esn`[9e-12..true]})-[:usn2{``:07 Ends With {1000} Ends With 01234567,`5esn`:999 Ends With {#usn8}}]->(:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]})))"),
    octest_legacy:ct_string("Create Constraint On()-[`8esn`:usn1]-()Assert Exists([`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where 2.12[{12}]|123.654[10.12e12..$12][6.0e0..{#usn8}]].usn2?.#usn7)"),
    octest_legacy:ct_string("Create Constraint On(usn1:`6esn`)Assert Exists([`7esn` In 0.12 Is Not Null Where 0X0123456789ABCDEF In false].`7esn`)"),
    octest_legacy:ct_string("Match `7esn`=Allshortestpaths((`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)),`8esn`=Allshortestpaths((((@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]->(#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[`6esn`? *0X0123456789ABCDEF{@usn6:.1e-1 Contains .12e-12}]-(#usn7 :`8esn`)))) Remove (@usn5 :@usn6:_usn3{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`3esn`:`6esn` *..0x0]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}).`3esn` Delete $123456789[..$999][..`6esn`],$`4esn`[#usn7][8.1e1],10.12e12 Contains .9e0 Union All Create Shortestpath(((:`2esn`:`4esn`{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})))"),
    octest_legacy:ct_string("Remove [`3esn` In 8.1e1 Contains .9e-1 Contains false Where 07 Ends With {1000} Ends With 01234567|$`5esn` Ends With 's_str' Ends With $`6esn`].`2esn`,{`2esn`:0xabc[01234567][.12e-12],`1esn`:{`3esn`}[#usn7]}._usn4?,(_usn3 )<-[:`8esn`|:#usn8 *0X7..0Xa]->(`4esn` :`8esn`{12}).`8esn`!._usn3? Unwind $`6esn` In 999 In {_usn3} As usn2 Optional Match ({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})<-[_usn3? *0xabc..12]->(_usn3 {#usn7:$999 =~false =~{`8esn`}}) Union All Start `2esn`=Relationship:``(`1esn`=\"d_str\") ,`3esn`=Node(0xabc,7,0Xa,01234567)Where 2.12[`4esn`][.9e-1] Merge @usn6=(({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)) Union All Unwind $`3esn`[0X7..$`8esn`] As @usn5"),
    octest_legacy:ct_string("Drop Constraint On(#usn7:usn2)Assert (`2esn` :`4esn`:usn2{`8esn`:.9e-1 Contains .9e0 Contains ``,_usn4:8.1e1 Contains .9e-1 Contains false})<-[`4esn`? *..123456789{#usn7:$`6esn`[@usn6...9e-12]}]-(:`1esn`:``{_usn3:\"d_str\" Starts With ``,`4esn`:{`3esn`}[..0xabc][..{`6esn`}]})-[:#usn7|:@usn5]-(_usn3 :_usn3{@usn6:$999 Ends With `2esn` Ends With 12.0}).``.@usn5._usn3 Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:#usn7)Assert [`6esn` In 010[{`1esn`}..]|.1e-1[2.9e1..][$`7esn`..]].usn2 Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[`3esn`:#usn8]-()Assert Exists([`6esn` In 010[{`1esn`}..] Where 9e-12[$7..]].`6esn`?)"),
    octest_legacy:ct_string("Remove `2esn`:`3esn`,(`8esn` {`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->(:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})<-[ *1000..{`2esn`:0.12[Count ( * )..Count ( * )][$999..`5esn`]}]->(`` ).#usn8! Return Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] As #usn8,[`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..]),{`7esn`} Is Not Null Is Not Null As `1esn` Order By 00[{1000}] Descending,'s_str'[$_usn3..][9.1e-1..] Desc,$_usn4 =~$#usn8 =~{`4esn`} Desc Skip $``[9e12..] Limit Reduce(`3esn`=0.12 =~2.9e1 =~9e1,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|{0} Is Not Null Is Not Null)[`8esn`(0X0123456789ABCDEF Is Not Null Is Not Null,{usn1} Is Not Null Is Not Null)..][{usn1:.9e0[07..][4.9e12..],_usn3:{1000}[`2esn`...0e-0][9e-1..0X7]}..] Union Unwind {`8esn`}[.0e0..][999..] As `1esn`"),
    octest_legacy:ct_string("Foreach(`7esn` In 01234567[1000..][$`8esn`..]| With Distinct 5.9e-12[01][`4esn`],$#usn8 Starts With 9.1e-1 Starts With {#usn7} As `8esn`,`5esn` Ends With 's_str' Ends With @usn5 As `1esn` Order By 's_str'[$_usn3..][9.1e-1..] Desc Where 1.0 Is Null Is Null Optional Match #usn7=(`8esn` :`7esn`)-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``),`4esn`=Shortestpath((_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn2 *7]-(`` ))) With Distinct $`5esn` =~Count(*) =~1.9e0 As @usn6,.9e12[6.0e0..][@usn5..],07[9e-1..][1e1..] As `4esn` Order By Reduce(_usn3={usn1} Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|01234567[1000..][$`8esn`..]) Is Null Is Null Desc,$`8esn`[...1e-1] Desc,$12 Is Not Null Descending Limit `4esn`[12.0..][9.1e-1..] Union All Start usn1=Rel:`8esn`({`3esn`}) ,#usn7=Node:#usn8(usn2='s_str') Return *,9e1[12] As usn1,Reduce(`2esn`={0} Ends With 0Xa,usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]|$#usn8 =~9e1 =~{``})[`3esn`(Distinct 0 Starts With `7esn` Starts With 9e0,$`4esn` Is Null Is Null)][`7esn`(Distinct $`4esn` Ends With .12e12 Ends With 123.654)] Limit true In 0.0 Create (((`3esn` $0)-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(:#usn8:@usn6{usn1:12e12 Ends With `5esn` Ends With .0e0})<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]-(_usn3 :_usn4:`2esn`{usn1:`3esn` Contains `2esn` Contains {_usn4},#usn8:010[{`1esn`}..]}))),(({`6esn`:8.1e1 Contains .9e-1 Contains false})<-[`8esn`*]-(@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})-[`6esn`?:@usn5|:#usn7{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-(:`5esn`:`7esn`{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}))"),
    octest_legacy:ct_string("Detach Delete 1.9e0 In $@usn6 In $_usn3,$@usn5 =~{`3esn`} Load Csv With Headers From .0e0 =~Case $`6esn` Starts With 0.0 When {`3esn`}[01234567][{#usn7}] Then 12[4.9e12..] End =~All(`` In `7esn` =~#usn8 =~\"d_str\" Where #usn7[$`8esn`][{`3esn`}]) As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return Distinct *,$999 =~0e0 =~0X7 As `1esn` Order By $`6esn`[@usn6...9e-12] Asc,9e-12 Starts With {1000} Desc Limit Reduce(`4esn`=.0e-0[..01234567],`7esn` In 0.12 Is Not Null|$123456789)[..All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 1e1 =~{@usn5} =~`7esn`)][..Case 07[..$`5esn`] When 00[$_usn4][$`1esn`] Then {#usn7}[.12e-12] Else `5esn` Contains 0 Contains $12 End] Delete {`8esn`}[9e-12..0],usn1 =~false =~{999},.12e-12 Ends With `2esn` With  8.1e1[$``],.9e12 Contains 0 Contains $0 As _usn4 Skip [usn2 In .12e-12 Ends With `2esn` Where @usn5 In Null|false =~{`8esn`} =~00][Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where Count ( * ) =~123456789 =~{@usn5})..Reduce(usn2={`4esn`} In 1000 In {@usn5},@usn6 In $usn2 Contains $`3esn` Contains 6.0e0|.0e0 =~0 =~.0e0)] Limit Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null Where $_usn4 Ends With {#usn8} Union All Create Shortestpath((`` :`3esn`)-[:#usn8|:``*{#usn8:.1e-1[2.9e1..][$`7esn`..],#usn8:0e0[12.0][{#usn7}]}]->(:``{`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]}))"),
    octest_legacy:ct_string("Drop Constraint On()-[`2esn`:usn1]-()Assert Exists(Filter(#usn7 In .0e-0 In 12 Where 00[$``])._usn3!)"),
    octest_legacy:ct_string("Start `6esn`=Rel(7,0X7,0,01) ,@usn5=Rel:usn1({usn2})Where 11.12e-12 Ends With 's_str' Union All Create Unique (((@usn5 {@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]})<-[:_usn3 *7]->(_usn4 {_usn4:12e12 Ends With `5esn` Ends With .0e0})-[?:`1esn`|:`1esn` *0X7..0Xa{``:01234567[10.12e12][0Xa]}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]}))) Foreach(_usn4 In {_usn3}[{0}...9e-1][9e-1...0e0]| Match _usn4=(({`2esn`:00[Null..usn2],`2esn`:3.9e-1[..$1000][..0.12]})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})),_usn4=Allshortestpaths(((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[usn2 *999..123456789{usn1:12e12 Ends With `5esn` Ends With .0e0}]-(`3esn` :#usn8:@usn6)-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}))) Using Scan #usn7:`3esn` Using Index @usn5:`4esn`(usn1) Optional Match `1esn`=Allshortestpaths((_usn3 {#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]})),(`6esn` {`3esn`:Count ( * )[_usn4..]})) Union All Merge `4esn`=Shortestpath((#usn8 :`8esn`{usn1:{1000} Starts With 10.12e12 Starts With .0e-0,`7esn`:11.12e-12 Ends With 's_str'})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})) On Create Set `4esn` =Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 7 In 1e1 In {``})[Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..])..@usn6(0xabc[..Count(*)][..$`5esn`])][$`6esn`..{#usn7:00 =~`4esn` =~.9e-12}]"),
    octest_legacy:ct_string("Create usn2=Shortestpath(((@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0}))) Optional Match `4esn`=(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})<-[?:_usn4|:`1esn` *..07{``:12.0[..Count ( * )][..@usn6],`6esn`:.9e-12[usn2]}]-(_usn4 :#usn8:@usn6),Shortestpath((((_usn3 {_usn3:.12e-12 Ends With `2esn`,usn1:Null[#usn7..][9.1e-1..]})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[ *..123456789{@usn5:$`8esn`}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]})))) Where .9e12[6.0e0..][@usn5..] Union Merge #usn7=Allshortestpaths(((`2esn` :usn1{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))) On Match Set (:@usn6:_usn3{`5esn`:0X0123456789ABCDEF Is Not Null Is Not Null,`8esn`:\"d_str\" Is Not Null Is Not Null})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn4 :`1esn`:``{`3esn`})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(usn1 :`8esn`{`3esn`:$#usn8 Is Not Null Is Not Null,_usn4:$usn2 Ends With 00 Ends With 9e12}).`3esn`! =0x0[{`6esn`}..],_usn3+=Extract(@usn6 In 9e12[..usn2][.._usn3] Where $12 Ends With {_usn4} Ends With $`8esn`|.9e-12[.12e12..][0Xa..])[{#usn8:@usn6 Ends With $`2esn` Ends With 1.0,`3esn`:$1000[_usn4][{@usn5}]}..],`4esn` ={`8esn`}[.0e0..][999..]"),
    octest_legacy:ct_string("Drop Constraint On()-[`6esn`:usn2]-()Assert Exists(All(`` In `7esn` =~#usn8 =~\"d_str\").`3esn`!)"),
    octest_legacy:ct_string("Create Constraint On(`3esn`:usn1)Assert Single(`7esn` In 0.12 Is Not Null Where 010[{`1esn`}..]).`3esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[`7esn`:usn2]-()Assert Exists(Any(usn1 In \"d_str\" Contains {@usn6} Where $`8esn` Is Null Is Null).usn1)"),
    octest_legacy:ct_string("Return Distinct *,{#usn7} =~.12e12 =~9e0,Shortestpath((((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})))) Ends With Reduce(`5esn`=0 In 2.9e1 In 7,usn1 In \"d_str\" Contains {@usn6}|01[$`1esn`..$`7esn`][{usn2}..12.0]) Ends With [#usn7 In .0e-0 In 12 Where {#usn7} Is Not Null] Order By $123456789[{usn1}][.12e-12] Asc,0X0123456789ABCDEF Desc Skip 11.12e-12 =~Count ( * ) Limit (`4esn` {``:$@usn6[.1e-1][9e12],#usn8:0xabc[..{usn1}][..\"d_str\"]})-[?:#usn7|:@usn5 *12]->(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1}) Contains Case 1.0 Is Null Is Null When .12e12[..7] Then $_usn4[..$999] When .0e-0[..01234567] Then $#usn7 Starts With $123456789 End Contains Shortestpath((usn1 :#usn8:@usn6)) Create `5esn`=(:`3esn`{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]})<-[`1esn`:#usn7|:@usn5 *..123456789]-(usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789}),(usn1 :`3esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 )<-[_usn4{`5esn`:9e0[..{#usn7}][..`4esn`]}]-({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`}) Union All With Distinct *,Single(`2esn` In $@usn5 Is Not Null Is Not Null) =~$1000,Case \"d_str\"[0x0..{@usn6}][$@usn5..0] When 0e0 Contains {`2esn`} Then 0X0123456789ABCDEF[1e1..] Else .12e12 Starts With 5.9e-12 Starts With `4esn` End In {usn1:$#usn7[01..2.12][2.12..3.9e-1],`6esn`:.0e-0 Ends With $`2esn` Ends With `5esn`} Order By .9e12 Contains 5.9e-12 Contains 9e-1 Descending Skip $123456789[..$999][..`6esn`] Unwind #usn7[{_usn3}] As @usn5 Union All Match _usn3=Shortestpath(((usn1 :#usn8:@usn6))),((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`})) Where .0e-0 Ends With $`2esn` Ends With `5esn` Merge Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))) On Match Set $`4esn`.@usn6? =0e-0[#usn7..999],`6esn` =.1e-1[$@usn6],_usn4+=All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] On Match Set `7esn` =0.0[..9e1][..2.12],#usn8+=1.0[$`4esn`..$@usn5] Foreach(_usn3 In Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $`5esn` Is Not Null) In `4esn`(Distinct 7 In 1e1 In {``},$`` Starts With $`4esn` Starts With `3esn`)| Detach Delete $`4esn`[usn2..],Single(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`}) In Allshortestpaths(((_usn3 {#usn7:$999 =~false =~{`8esn`}})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) In Extract(usn1 In $@usn6 Is Null Is Null Where 0Xa In 1.0 In $@usn5|Null[#usn7..][9.1e-1..]),Extract(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`|{`2esn`} Contains 0xabc) Is Null Is Null)"),
    octest_legacy:ct_string("Return * Foreach(usn2 In 9e12 =~12e-12| Remove Case When $usn2 Ends With 00 Ends With 9e12 Then $#usn7 Ends With 999 Ends With {12} Else 0e0 =~{12} =~{1000} End.@usn6.usn1?,None(@usn6 In 9e12[..usn2][.._usn3] Where {`8esn`}[@usn5][$`2esn`])._usn3!) Unwind Case false =~{`8esn`} =~00 When usn2 Starts With $usn1 Starts With 10.12e12 Then usn2 Starts With $usn1 Starts With 10.12e12 When {1000} =~4.9e12 =~9e1 Then `3esn` =~$#usn7 End Ends With All(usn2 In $`5esn`[{`4esn`}][{0}] Where 0e0 Contains {`2esn`}) Ends With [#usn7 In .0e-0 In 12 Where Count ( * ) Is Not Null Is Not Null|$`7esn` Starts With 's_str'] As `1esn` Union All Create Unique (`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]}),@usn6=Shortestpath((@usn6 :`5esn`:`7esn`)) Foreach(`2esn` In 010[.0e-0..\"d_str\"][.9e0..123.654]| Create Unique `6esn`=(@usn6 :`5esn`:`7esn`) Remove (:`1esn`:``{`8esn`:0X0123456789ABCDEF Ends With {1000}})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2)<-[? *01{_usn4:07 Ends With {1000} Ends With 01234567}]-(`6esn` :`4esn`:usn2).`2esn`!._usn4?.`4esn`!,Case `1esn` =~{12} =~{999} When .9e1[$`1esn`..][$``..] Then $12 Is Null Is Null When $#usn7[01..2.12][2.12..3.9e-1] Then $999 Ends With `2esn` Ends With 12.0 End.usn1!.`6esn`!.#usn7!) Union All With  *,{`3esn`}[...1e1][..0],$12 Ends With 7.0e-0 Ends With 9e-12 As usn1 Order By (:`1esn`:``{`4esn`:Count(*) Starts With 07 Starts With $#usn7,_usn3:Count ( * ) =~123456789 =~{@usn5}})-[`8esn`?:`2esn`|`5esn` *..123456789{usn2:12.0[..Count ( * )][..@usn6]}]-(`7esn` {`2esn`:2.9e1 =~Count(*) =~{123456789},`1esn`:.1e-1[..$_usn3][..0]})-[:`1esn`|:`1esn` *999..123456789{@usn5:$999 Ends With `2esn` Ends With 12.0}]->(:`8esn`{usn2:01[$`1esn`..$`7esn`][{usn2}..12.0],@usn5:{#usn7} Starts With .1e-1}) Contains Case {`8esn`} In {_usn3} In 6.0e0 When 9e0[..{#usn7}][..`4esn`] Then .12e12 Is Not Null When #usn8[$`2esn`] Then 3.9e-1 Starts With .9e0 Starts With {#usn7} Else 8.1e1 Contains .9e-1 Contains false End Contains Extract(#usn7 In .0e-0 In 12 Where {0}[.0e-0][$`2esn`]) Descending,[`3esn` In 8.1e1 Contains .9e-1 Contains false Where .12e-12 Is Null] =~`6esn`(Distinct 2.9e1[Count ( * )..]) Ascending,01234567[10.12e12][0Xa] Desc Skip {7} Is Not Null Where .1e-1[2.9e1..][$`7esn`..] Load Csv From {`7esn`}[$12..123456789] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On()<-[`1esn`:@usn6]-()Assert Exists(Filter(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where $12 Is Null Is Null).`4esn`)"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:`7esn`)Assert All(`6esn` In 010[{`1esn`}..] Where {`4esn`}[00..]).`8esn`.`4esn`.`5esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:@usn5)Assert Shortestpath(((:_usn3{@usn5:`2esn`[`7esn`][1000]})<-[`2esn` *7]->(:`8esn`{@usn6:$`6esn`[$_usn3..{1000}],_usn3:0xabc[..{usn1}][..\"d_str\"]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ))).`4esn`? Is Unique"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath((_usn4 {`3esn`:.0e-0 In 12})) Detach Delete $12 Ends With {_usn4} Ends With $`8esn`,.1e1 Is Null Is Null Union All Unwind {@usn5} As _usn4 Load Csv From 's_str'[`2esn`][12.0] As @usn6  Union Unwind {`8esn`}[.0e0..][999..] As `1esn`"),
    octest_legacy:ct_string("Foreach(#usn8 In `5esn`[9e-1][7.0e-0]| Load Csv From {usn1:$usn1[9e1][{999}],#usn8:0e-0[$``..10.12e12]}[Case $7[.1e-1..{@usn6}][$7..{`1esn`}] When .0e-0 Ends With $`2esn` Ends With `5esn` Then 7[{`4esn`}..] End] As `8esn` ) Union All Match Shortestpath(((usn1 :@usn6:_usn3{_usn3:{`3esn`} =~$@usn5 =~`2esn`,`5esn`:$#usn7 Starts With $123456789})-[{#usn7:1e-1[$`4esn`]}]->(_usn4 :`1esn`:``{`3esn`})<-[ *0X7..0Xa{``:{`2esn`} Contains 0xabc,#usn7:{12} Starts With $`` Starts With 0X0123456789ABCDEF}]->(`8esn` :`5esn`:`7esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}))),(:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})<-[`5esn`:@usn6|:`4esn` *010..0{`8esn`:0xabc Starts With 12 Starts With 0e-0}]-(:`4esn`:usn2{``:$usn1 Ends With {`2esn`} Ends With $usn1})<-[?:@usn6|:`4esn`{`2esn`:$12[10.12e12][.1e1],#usn7:9e0[..{#usn7}][..`4esn`]}]-(`7esn` :usn2{`2esn`:9e1 Starts With $@usn6 Starts With 0e-0,`2esn`:0xabc[0Xa..]}) Using Index `1esn`:`1esn`(`4esn`) Using Join On _usn4,usn2,`` Create `3esn`=(((`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}})<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`5esn`:`7esn`{`3esn`:Count ( * )[_usn4..],`8esn`:false[..usn2][..999]})-[?:`6esn` *0]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}))),`6esn`=Shortestpath((`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})<-[`7esn`:`4esn`|:`2esn` *0X7..0Xa{_usn3:@usn6[0x0..][$_usn4..],`6esn`:9e-1[1.9e0]}]->(_usn3 :``)) With  *,0e-0[_usn4..{`7esn`}][\"d_str\"..{`2esn`}] As `4esn`,$_usn4[..01234567][..$`6esn`]"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:@usn6)Assert (`` $999)<-[? *010..0]-(#usn7 :``)-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(:`5esn`:`7esn`{`8esn`:{12} Ends With $`3esn` Ends With 0xabc}).`3esn`?.`6esn`? Is Unique"),
    octest_legacy:ct_string("Drop Constraint On()-[`6esn`:`5esn`]-()Assert Exists(Extract(usn2 In .12e-12 Ends With `2esn` Where `7esn`[1.9e0..5.9e-12][9e0..@usn5]).#usn7!.`3esn`?.`3esn`!)"),
    octest_legacy:ct_string("Foreach(_usn4 In Reduce(@usn5={`8esn`} Is Not Null Is Not Null,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|07 Ends With $_usn3 Ends With $#usn8) Is Null| Optional Match `2esn`=Allshortestpaths((({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[?{`6esn`:{123456789} Starts With `6esn`,usn1:$`8esn` =~{`6esn`} =~12}]->(_usn3 :`7esn`{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}))) Using Join On _usn3,usn2 Using Index _usn4:`1esn`(@usn5) Where 0e0 Contains {`2esn`})"),
    octest_legacy:ct_string("Merge `2esn`=Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) On Create Set Case 0xabc[..Count(*)][..$`5esn`] When `6esn`[0X0123456789ABCDEF..][`8esn`..] Then `2esn`[`7esn`][1000] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} Else 12e12[{`4esn`}..`4esn`][999..{@usn6}] End.``!.#usn8! =Allshortestpaths((`` :#usn8:@usn6{@usn5:$999 Ends With `2esn` Ends With 12.0})),(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})-[_usn4:_usn3{`1esn`:2.12 Is Not Null Is Not Null,`6esn`:07[{@usn5}..]}]-(`4esn` :`7esn`{@usn5:`2esn`[`7esn`][1000]}).#usn7! =8.1e1 Contains .9e-1 Contains false,`5esn` =false Is Not Null Is Not Null Union All Load Csv From 6.0e0 In 9e-1 In 123456789 As `4esn`  Foreach(@usn6 In {`6esn`} Starts With 12e12 Starts With {`2esn`}| Delete {123456789} Contains $#usn7 Contains {#usn8} Load Csv From None(`1esn` In $12 In {usn2})[..Reduce(usn2=.9e0 In 8.1e1,`3esn` In 8.1e1 Contains .9e-1 Contains false|$_usn3 Is Not Null)] As #usn7 Fieldterminator 's_str') Union All Create Unique Allshortestpaths(({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)})),((:`1esn`:``{`7esn`:`5esn` Contains 0 Contains $12,`2esn`:.9e12[6.0e0..][@usn5..]}))"),
    octest_legacy:ct_string("Create Constraint On(usn2:@usn6)Assert ``(Distinct {_usn3}[{0}...9e-1][9e-1...0e0],$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]).`3esn`? Is Unique"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv With Headers From 2.12[10.12e12][_usn4] As `1esn`  Start `2esn`=Node:_usn4(#usn8=\"d_str\") ,`7esn`=Relationship:usn1(usn2='s_str')"),
    octest_legacy:ct_string("Return $`5esn` Is Not Null Is Not Null,Allshortestpaths(({usn1:12[..$`5esn`]})<-[:`4esn`|:`2esn`{`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]}]-(#usn8 :usn2))[..`1esn`][..Case .12e-12 Starts With .12e-12 When 0xabc Starts With {`3esn`} Starts With {``} Then {usn2} Is Not Null Is Not Null Else {`4esn`} Ends With Count(*) End] As @usn6 Skip 0e-0[4.9e12..00][0X0123456789ABCDEF..{_usn4}] Limit 's_str'[$_usn3..][9.1e-1..] Load Csv With Headers From Allshortestpaths((((@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})-[#usn8?*..]-(`` {`6esn`:1000[{`1esn`}..][$`3esn`..]})-[?:@usn6|:`4esn` *..123456789]-(:``{``:`6esn`[0X0123456789ABCDEF..][`8esn`..],`8esn`:$7[.1e-1..{@usn6}][$7..{`1esn`}]}))))[Allshortestpaths((`1esn` :usn2{`8esn`:12.0[...0e0]})-[?:`1esn`|:`1esn` *..0x0{@usn6:.0e-0 In 12}]-(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]}))][Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 01234567[1000..][$`8esn`..])] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match #usn7=(`8esn` :`7esn`)-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``),((:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1})<-[usn2 *999..123456789{usn1:12e12 Ends With `5esn` Ends With .0e0}]-(`3esn` :#usn8:@usn6)-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})) Using Join On `3esn`,`` Using Index `1esn`:_usn4(`5esn`) Create ``=Shortestpath(((_usn3 :@usn6:_usn3{`7esn`:{`8esn`}[..999][.._usn3],usn2:Count ( * )[_usn4..]})<-[`4esn`? *01234567..{usn1:1.9e0[.12e-12][9e-12],`3esn`:01234567 Ends With .0e0 Ends With 12e12}]-({@usn6:01 Contains 9e-12 Contains $7})<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}))) Union Create Unique ((`1esn` :`8esn`)<-[:usn1|usn2]-(`` :`4esn`:usn2)<-[`2esn`{@usn5:$`6esn`[@usn6...9e-12],_usn3:Null}]->(_usn4 :`1esn`:``)),Allshortestpaths(({`5esn`:`1esn` In 010 In 1e-1})<-[?:#usn7|:@usn5 *999..123456789{`4esn`:$0 Contains $7}]->(:`6esn`{`2esn`:`5esn` Ends With Count(*)})) Remove (:usn2{`7esn`:`2esn` Starts With 010 Starts With ``,``:010 Starts With 9e12 Starts With 1000})-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]->(`2esn` :@usn5)-[`8esn`:_usn4|:`1esn`]->({@usn6:.12e12 Starts With 5.9e-12 Starts With `4esn`}).#usn7,Filter(#usn7 In .0e-0 In 12 Where _usn4 Is Not Null Is Not Null).#usn7! Unwind Single(`6esn` In 010[{`1esn`}..]) As `8esn` Union Unwind .9e12 Is Not Null Is Not Null As #usn7 Load Csv From 9e-1[1.9e0] As #usn8 "),
    octest_legacy:ct_string("Start _usn3=Rel:`8esn`(usn1={#usn7}) Where $usn1 Contains 4.9e12 Contains $`2esn`"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`1esn`)Assert Case {`6esn`}[6.0e0..9e0][.9e1..12e12] When 3.9e-1 Ends With {usn1} Ends With {`5esn`} Then 5.9e-12 Is Null Is Null When 7 Is Null Is Null Then 2.12[`4esn`][.9e-1] End.``?.#usn8?.`3esn`? Is Unique"),
    octest_legacy:ct_string("Merge `5esn`=((#usn8 :`4esn`:usn2{usn2:$0 Contains $7,``:false Contains {`7esn`}})-[`3esn`:@usn6|:`4esn`]-(#usn8 :`7esn`{_usn4:07 Ends With {1000} Ends With 01234567})<-[$#usn8]->(:`7esn`{`7esn`:{`3esn`} =~$@usn5 =~`2esn`,#usn7:.9e0[$#usn8][Count ( * )]})) On Create Set (:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[_usn3:`5esn` *7{#usn8:12e12 Is Not Null Is Not Null,`8esn`:9e-1[0.0..]}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]}).usn2 =Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where {0} Is Not Null)[..All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..])][..[usn1 In \"d_str\" Contains {@usn6} Where 7.0e-0 Is Not Null]] On Match Set $`4esn`.@usn6? =0e-0[#usn7..999],`6esn` =.1e-1[$@usn6],_usn4+=All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Delete 5.9e-12[01][`4esn`],00[Null..usn2] Union All Foreach(#usn8 In $_usn4 =~$#usn8 =~{`4esn`}| Start _usn3=Relationship:usn2(`8esn`=\"d_str\") Where $1000[..0e-0][..010] With Distinct *,$`1esn`[4.9e12..][_usn3..],Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End =~{usn1:`6esn`[0X0123456789ABCDEF..][`8esn`..],@usn5:{`8esn`}[9e12..][{_usn4}..]} Order By Case $12 Is Not Null Is Not Null When 0.12 =~2.9e1 =~9e1 Then #usn7[.9e0..`3esn`][{`6esn`}..1000] When $`8esn` Then 9e1 Starts With $@usn6 Starts With 0e-0 End Contains `7esn` Contains `4esn`(Distinct 0[..12][..{`8esn`}]) Descending,5.9e-12[01][`4esn`] Descending,[`6esn` In 010[{`1esn`}..] Where {1000}[0..]|Count ( * )[9e0..$``]][{_usn4:07 Ends With {1000} Ends With 01234567}..Reduce(`4esn`=usn1 =~false =~{999},`6esn` In 010[{`1esn`}..]|$@usn5 =~{`3esn`})] Descending Skip Count(*) Is Not Null Is Not Null Limit 12e-12 =~$_usn3 Where false Contains {`7esn`}) Union All Optional Match ((_usn3 :`7esn`{@usn6:$`4esn` Ends With .12e12 Ends With 123.654})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)<-[#usn7? *0xabc..12]-(:`3esn`)) Using Scan `4esn`:#usn7 Using Join On usn1 Where 0.12 In $`` Create Unique `1esn`=Allshortestpaths(((:usn1{`6esn`:$_usn3[usn2..][usn1..],#usn7:$_usn4 =~$#usn8 =~{`4esn`}})-[:#usn7|:@usn5]->(`` :usn1{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null}))),#usn8=Shortestpath((:``{usn2:00 Is Not Null Is Not Null})<-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]-(#usn7 {`4esn`:0X0123456789ABCDEF In false,`2esn`:0X7[#usn7..][$@usn5..]})-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(:`7esn`{_usn4:.0e-0[..01234567],`5esn`:`` Contains {`6esn`} Contains 123456789})) Merge `5esn`=Shortestpath(((`8esn` )-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`}))) On Create Set `4esn` =Filter(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 7 In 1e1 In {``})[Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..])..@usn6(0xabc[..Count(*)][..$`5esn`])][$`6esn`..{#usn7:00 =~`4esn` =~.9e-12}]"),
    octest_legacy:ct_string("Create Constraint On(`6esn`:usn1)Assert Exists(Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..]|1e-1 Contains 0.0)._usn4?)"),
    octest_legacy:ct_string("Merge #usn7=Shortestpath(((`8esn` :@usn6:_usn3{`2esn`:#usn7 =~$@usn5 =~{7},`2esn`:{`3esn`}[..{`4esn`}][..usn2]})-[`8esn`:`4esn`|:`2esn`]->(`7esn` {`8esn`:0x0 Ends With #usn8 Ends With .9e-1}))) On Match Set {#usn8:$#usn7[01..2.12][2.12..3.9e-1],``:.9e0[$#usn8][Count ( * )]}.usn2! =Extract(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 01[`6esn`..][0e0..]) Is Not Null Is Not Null Merge Shortestpath(((`6esn` :``)<-[:`2esn`|`5esn`{_usn4:{@usn5}[10.12e12..]}]->(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null}))) On Match Set Case .12e12 Ends With 07 Ends With 3.9e-1 When 0.12 In $`` Then 0e-0 In 0X0123456789ABCDEF In `3esn` When 01 Ends With .0e0 Ends With 7.0e-0 Then $`6esn`[@usn6...9e-12] End.`1esn`.`1esn` =1e-1 Starts With .1e1 Starts With 12.0"),
    octest_legacy:ct_string("Create Constraint On(usn1:`5esn`)Assert Filter(#usn7 In .0e-0 In 12 Where 123.654 Ends With {1000} Ends With 9e12).#usn8!.`6esn` Is Unique"),
    octest_legacy:ct_string("Create Constraint On()<-[#usn7:`1esn`]-()Assert Exists([@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {1000}[..`5esn`][..9e12]].#usn7!.`5esn`!._usn3)"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((#usn8 :`4esn`:usn2)<-[#usn8:`1esn`|:`1esn` *12{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-({`6esn`:0xabc[..{usn1}][..\"d_str\"],_usn3:$_usn3[.0e-0..999]}))) Load Csv From 4.9e12[{_usn4}..] As _usn4 Fieldterminator 's_str' Load Csv From `8esn`(Distinct 12[..$`5esn`]) In Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End As ``  Union All With Distinct *,{``:$`8esn`[..5.9e-12][..`8esn`]}[[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .9e12[6.0e0..][@usn5..]|2.9e1[2.9e1..][`4esn`..]]..][Case {`7esn`} =~\"d_str\" =~{``} When Null In {7} Then @usn5[{`1esn`}..][Count ( * )..] End..],01234567[1000..][$`8esn`..] Limit 07 Ends With {1000} Ends With 01234567 Where `4esn` Contains 0X0123456789ABCDEF Contains $usn2 Foreach(usn2 In 9e0[..{#usn7}][..`4esn`]| Start _usn4=Relationship:usn2({usn1}) ,_usn4=Relationship:`4esn`(\"d_str\")) Union Load Csv With Headers From Any(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`3esn`}[_usn4][2.9e1]) In None(`1esn` In $12 In {usn2} Where $12 =~4.9e12) As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`3esn`)Assert Exists((`8esn` :`8esn`)-[`2esn` *1000..{`2esn`:{@usn6} In 9e12}]->(:usn1{usn1:true In 0.0,@usn5:{`1esn`} Is Null}).`7esn`.#usn7!)"),
    octest_legacy:ct_string("Create Constraint On(@usn6:`8esn`)Assert Exists((@usn5 )<-[`5esn`?{usn1:2.9e1[2.12..1.9e0]}]-(`5esn` :``{usn2:{_usn3} In $#usn8 In $12}).@usn6?)"),
    octest_legacy:ct_string("Drop Constraint On()<-[`6esn`:`2esn`]-()Assert Exists({`4esn`:`3esn` Starts With 9.1e-1 Starts With .9e-1,#usn8:1e-1[$`4esn`]}._usn4)"),
    octest_legacy:ct_string("Remove Allshortestpaths((({`6esn`:3.9e-1[..$1000][..0.12]})-[_usn4? *0Xa..12{`4esn`:{`3esn`} =~$`` =~$`8esn`,@usn6:Null[$`3esn`..][`1esn`..]}]-(:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[``?:`4esn`|:`2esn` *0X0123456789ABCDEF{`5esn`:$`8esn` Is Not Null Is Not Null,`1esn`:8.1e1 Contains $@usn6}]-(:usn2{``:$0 Ends With 9e-12 Ends With $_usn4,`4esn`:false =~{`8esn`} =~00}))).`2esn`.#usn8 Unwind Case When `1esn`[{usn1}..] Then $`6esn`[@usn6...9e-12] When $usn2 Starts With $999 Starts With .0e0 Then {`6esn`} =~2.12 =~123.654 End[(`4esn` :#usn7:`8esn`)-[_usn3?:@usn6|:`4esn`{_usn4:$12 Ends With 12.0 Ends With $`4esn`}]->(:`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[{_usn3:$@usn6 Starts With 0xabc Starts With {`7esn`},`1esn`:_usn4['s_str'][8.1e1]}]->(#usn7 :usn2)..][Filter(`` In `7esn` =~#usn8 =~\"d_str\" Where {`6esn`} Starts With {`5esn`} Starts With 2.9e1)..] As _usn4 With Distinct *,{7} Ends With 999 As @usn5 Order By 7.0e-0 Ends With 0e0 Ends With 3.9e-1 Asc Skip {`5esn`}[{1000}..] Union Merge `5esn`=((`5esn` :_usn3)<-[`7esn`?:#usn7|:@usn5 *1000..]-(`7esn` :usn1)) On Match Set usn2+={7} Starts With 0x0 Starts With 9e1,`3esn`:`8esn`,{_usn4:07 Ends With {1000} Ends With 01234567}._usn4?.`1esn`? =$`7esn` Is Null On Create Set `5esn` =({`4esn`:#usn8[\"d_str\"..usn2],`1esn`:12.0[..Count ( * )][..@usn6]})<-[:_usn4|:`1esn`{`7esn`:{1000}[`2esn`...0e-0][9e-1..0X7],`5esn`:$`5esn` =~Count(*) =~1.9e0}]-(_usn3 ) =~Case When 10.12e12[usn2] Then $12 =~4.9e12 Else 9e12[..usn2][.._usn3] End =~{@usn5:7[{`4esn`}..],_usn4:999 Is Null Is Null} Load Csv From $@usn6 Starts With 0xabc Starts With {`7esn`} As usn1  Union All Foreach(`7esn` In .1e-1[$@usn6]| Delete $`8esn` Contains _usn4,{usn2} Contains {0} Start `1esn`=Relationship:_usn4(`5esn`={usn1}) ) Foreach(`` In Any(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..] Where 0xabc[..{usn1}][..\"d_str\"])[Extract(usn1 In {#usn7} =~.12e12 =~9e0 Where 0X0123456789ABCDEF Is Not Null Is Not Null)..None(#usn8 In 07[..$`5esn`] Where 8.1e1 Contains .9e-1 Contains false)][Case {0} Is Not Null Is Not Null When {`1esn`}[{usn2}] Then {`7esn`} Is Not Null Is Not Null End..[`` In `7esn` =~#usn8 =~\"d_str\"|$_usn4 Ends With {#usn8}]]| Load Csv From {@usn6:3.9e-1[..$1000][..0.12]}[All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000)] As `3esn` )"),
    octest_legacy:ct_string("Start #usn7=Node( {``}) ,`6esn`=Node:@usn6(#usn8='s_str')Where {_usn3} In $#usn8 In $12 Unwind .12e-12 Ends With `2esn` As `` Start `4esn`=Node(0x0)  Union With Distinct *,@usn6[Reduce(`5esn`=_usn4['s_str'][8.1e1],_usn3 In `8esn`[_usn4]|$_usn3 =~'s_str' =~12)..][(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[`7esn`?]-(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})..] As usn1 Skip {`6esn`} In .0e0 In $0 Limit (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])] Where 1.0 In {usn1} Union Match Shortestpath((`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})<-[:`7esn`|usn1 *7]-(`8esn` :`5esn`:`7esn`{usn1:{``} Contains 0.0 Contains `4esn`})-[? *1000..{`1esn`:{`1esn`} Is Null}]->(`6esn` :`2esn`:`4esn`{@usn6:0e-0[$``..10.12e12]})),(`` :``{usn1:010[...12e-12],#usn7:1e1[$_usn3]})<-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({``:{#usn8} Ends With _usn3 Ends With `2esn`,usn1:5.9e-12[\"d_str\"..][{`6esn`}..]})<-[`5esn`? *0X0123456789ABCDEF{_usn4:{#usn7} Is Not Null}]-(`8esn` {`8esn`:{`6esn`}[@usn5..{@usn6}],`1esn`:0xabc Starts With {`3esn`} Starts With {``}}) Using Index `7esn`:``(`8esn`) Where .9e12[6.0e0..][@usn5..] Delete $usn1[7.0e-0..][{123456789}..],{usn1}[`7esn`..Count(*)] Foreach(`8esn` In (`1esn` :@usn6:_usn3{#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12})<-[@usn5?:`5esn` *01{#usn8:00[Null..usn2],@usn6:0.12 =~2.9e1 =~9e1}]-({@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})[Filter(_usn3 In `8esn`[_usn4] Where 01234567 =~12e12 =~.0e-0)..][{`7esn`:.9e1[$`1esn`..][$``..]}..]| Remove (#usn8 :`8esn`{``:`7esn`[1.9e0..5.9e-12][9e0..@usn5]})-[#usn7?:`1esn`|:`1esn`{`5esn`:`2esn`[`7esn`][1000],``:010[...12e-12]}]-(`7esn` {@usn5:Count ( * )[_usn4..]}).usn2?)"),
    octest_legacy:ct_string("Drop Constraint On(_usn3:_usn3)Assert Exists(_usn3($`5esn`[$_usn3][$12]).`7esn`)"),
    octest_legacy:ct_string("Create Unique (((`1esn` :`3esn`{@usn6:$12 Is Null})<-[:`3esn`|`3esn`{usn2:12e12 Ends With `5esn` Ends With .0e0,usn2:0[$usn1..]}]->(`` {``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),`3esn`=(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0})-[?:_usn3]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[usn1?:`3esn`|`3esn`*..]-(`1esn` ) Union All Unwind usn2($12 =~4.9e12) Ends With Any(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]) Ends With Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End As #usn8 With  *,@usn6 Ends With $`2esn` Ends With 1.0,.1e-1[$@usn6] Skip usn2($12 =~4.9e12) Ends With Any(@usn6 In 9e12[..usn2][.._usn3] Where 7[{`4esn`}..]) Ends With Case When `6esn`[$@usn5][01] Then 7[{`4esn`}..] When {1000} =~4.9e12 =~9e1 Then 9e1 In $1000 End Limit false =~$7 Where {``} Contains 0.0 Contains `4esn` Union Unwind $123456789 As #usn7 Start `2esn`=Node:`5esn`({`2esn`}) ,@usn6=Node( {``})Where .0e-0 Ends With $`2esn` Ends With `5esn`"),
    octest_legacy:ct_string("Create Constraint On()-[`1esn`:`8esn`]-()Assert Exists(All(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where .9e12 Is Not Null Is Not Null).`1esn`!)"),
    octest_legacy:ct_string("Unwind 00[$_usn4][$`1esn`] As _usn4 Remove `4esn`().`6esn`!.#usn7!.`2esn` Remove Case $`8esn` Is Not Null Is Not Null When #usn8[\"d_str\"..usn2] Then .12e-12 Is Null End.@usn6?,Filter(`6esn` In 010[{`1esn`}..] Where {`8esn`}[9e12..][{_usn4}..]).`3esn`!,Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $``[1.0..][_usn3..]|$1000 Starts With {@usn6} Starts With $@usn5).usn1 Union Merge ((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[ *..123456789{@usn5:1e-1[$`4esn`]}]->(:usn2{`8esn`:0xabc Starts With 12 Starts With 0e-0})) Start @usn5=Rel:`8esn`(usn1={#usn7}) ,``=Relationship:@usn6(#usn8='s_str')Where 12e-12 In .9e0"),
    octest_legacy:ct_string("Remove usn2(Distinct .9e0 In 8.1e1).usn2?,({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})-[`2esn`{usn1:$@usn5 Is Null Is Null,`3esn`:999[..$@usn5][..``]}]-(:_usn3{@usn6:$1000 Starts With {@usn6} Starts With $@usn5})-[?:`2esn`|`5esn` *..123456789$1000]-(:`8esn`{#usn7:$`1esn`[..12e-12][...9e12],usn1:{7} Starts With 0x0 Starts With 9e1}).usn1?.@usn5.`2esn`!,Reduce(`5esn`=.9e1 Ends With 0x0,`8esn` In {usn1}[7.0e-0..][3.9e-1..]|Count ( * ) Contains 9.1e-1 Contains {`2esn`}).`6esn` Union Create `4esn`=((`3esn` :#usn8:@usn6)-[`4esn`? *01{#usn8:12.0[..Count ( * )][..@usn6]}]-(usn1 :#usn8:@usn6)) Remove Filter(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1]).`5esn`!._usn3!,Any(usn2 In .12e-12 Ends With `2esn` Where .12e-12 Starts With .12e-12).#usn7.`7esn`,`7esn`(Distinct `` Ends With 1.0 Ends With usn1).`3esn`? Union All Unwind {0}[.0e-0][$`2esn`] As _usn3 Foreach(#usn8 In Any(`3esn` In 8.1e1 Contains .9e-1 Contains false Where Null In {7}) Ends With ({`4esn`:0.12 In $``,usn2:.1e-1 Contains .12e-12})-[ *12{#usn8:0e0 =~{12} =~{1000}}]->(:@usn6:_usn3{@usn6:`6esn`[3.9e-1..`8esn`][12.0..0.0]}) Ends With Case When $@usn5[``..] Then `3esn` Is Null When $7[.1e-1..{@usn6}][$7..{`1esn`}] Then 0xabc[0Xa..] Else 1e-1[$`6esn`..{#usn8}][4.9e12..Count ( * )] End| With Distinct 12e12[usn2..$`6esn`] As usn1,0Xa Contains 12e-12,Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null As #usn7 Order By 9e12 Ends With \"d_str\" Ends With 0X7 Desc Skip {12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1])"),
    octest_legacy:ct_string("Foreach(`3esn` In \"d_str\" Starts With $`7esn` Starts With 999| Unwind Extract(usn1 In $@usn6 Is Null Is Null Where 1e1 =~{@usn5} =~`7esn`) Ends With [`2esn` In $@usn5 Is Not Null Is Not Null Where 010[..9e-1][..0X7]|.1e1[{@usn6}][true]] Ends With All(usn1 In $@usn6 Is Null Is Null Where {`8esn`} Starts With .9e-1 Starts With 1000) As @usn6) With  {@usn5:5.9e-12 Is Null Is Null} Ends With Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where _usn4['s_str'][8.1e1]|0.12 =~2.9e1 =~9e1) Ends With All(`1esn` In $12 In {usn2} Where `5esn` Contains 0 Contains $12) As `7esn` Order By _usn4['s_str'][8.1e1] Asc,Filter(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {#usn8}[..@usn5])[(:#usn8:@usn6{`3esn`:$#usn7})-[ *12{#usn8:0e0 =~{12} =~{1000}}]-(:usn1{`5esn`:{`6esn`} =~2.12 =~123.654})-[usn2:`5esn`]-(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})][[`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where 01 =~{_usn3} =~01|_usn4 Ends With {`8esn`} Ends With usn2]] Ascending Skip {`1esn`}[..$_usn4] Where $@usn5[.9e-1] Match _usn4=Shortestpath(((`7esn` :usn1{`7esn`:_usn3 =~{7} =~123.654})-[`7esn`:`2esn`|`5esn` *01234567..]->(:`6esn`{@usn5:{#usn8}[..@usn5],`6esn`:0.0[$`4esn`]})<-[#usn8?:_usn4|:`1esn`{usn1:$`4esn` Is Null Is Null}]->({`6esn`:3.9e-1[..$1000][..0.12]}))),`3esn`=Shortestpath(({`6esn`:$#usn7 Ends With 999 Ends With {12},usn1:6.0e0[$#usn7..$1000]})) Using Join On `6esn`,_usn3 Using Index @usn5:@usn6(`5esn`) Union All Optional Match _usn4=((:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:_usn4|:`1esn`]->(`2esn` :@usn6:_usn3)) Where .0e0['s_str'..][0Xa..] Union All Merge Shortestpath((@usn5 {`2esn`:#usn7[.9e0..`3esn`][{`6esn`}..1000],`6esn`:$7})-[#usn8?:`8esn`|:#usn8 *999..123456789]->(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})<-[#usn7? *0xabc..12]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))"),
    octest_legacy:ct_string("Create Constraint On(#usn8:#usn7)Assert Exists((usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[_usn3?:@usn5|:#usn7]->(`2esn` :usn1)<-[?:usn1|usn2{#usn8:'s_str'[`2esn`][12.0]}]->(_usn3 :``).`5esn`)"),
    octest_legacy:ct_string("Create ``=Shortestpath(((`1esn` :`8esn`)-[`7esn`?:`2esn`|`5esn` *0]->(@usn5 {`5esn`:4.9e12[{_usn4}..],`2esn`:{1000} Starts With 10.12e12 Starts With .0e-0}))),@usn6=((#usn8 :@usn5{`8esn`:0x0 Ends With #usn8 Ends With .9e-1})) Create `7esn`=((`2esn` {``:{#usn7} =~$@usn6 =~$7})<-[@usn6 *0X7..0Xa{`7esn`:{#usn7}[.12e-12]}]->(:`2esn`:`4esn`{@usn5:Count(*) Starts With 07 Starts With $#usn7,usn2:`6esn` Ends With 1e1 Ends With $#usn7})<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->({`4esn`:{7}[0x0][1e1]})),_usn3=(#usn7 :@usn6:_usn3)-[`6esn`?:@usn5|:#usn7{@usn6:0xabc Starts With {`3esn`} Starts With {``}}]-({`7esn`:{`8esn`} In {_usn3} In 6.0e0,``:{`5esn`}[01234567..][5.9e-12..]})"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:usn1)Assert Exists(Extract(#usn7 In .0e-0 In 12 Where 0xabc =~123456789|Null[$`3esn`..][`1esn`..]).usn2!)"),
    octest_legacy:ct_string("Drop Constraint On(@usn6:`7esn`)Assert Exists(Extract(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..]|11.12e-12 Contains usn1)._usn4?)"),
    octest_legacy:ct_string("With  *,4.9e12[{_usn4}..],Reduce(`6esn`=$`5esn`[$_usn3][$12],`2esn` In $@usn5 Is Not Null Is Not Null|1.9e0 In $@usn6 In $_usn3)[{``:.12e-12 Is Null}..][Case When $1000 Starts With {@usn6} Starts With $@usn5 Then `2esn` When $`8esn` =~{`6esn`} =~12 Then 1.0 In {usn1} Else 12[4.9e12..] End..] Order By 0xabc[01234567][.12e-12] Ascending,Extract(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`8esn`}[..999][.._usn3]) Starts With Reduce(``=$#usn7 Ends With 999 Ends With {12},`2esn` In $@usn5 Is Not Null Is Not Null|{`6esn`} Starts With .12e-12) Descending Limit None(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With $`7esn` Starts With 999)[Shortestpath((((:#usn8:@usn6{`3esn`:$#usn7})<-[?:`5esn`{_usn4:$12[$`6esn`..][01..]}]->(`4esn` :`8esn`{12})-[`6esn`?{`6esn`:1000[{`1esn`}..][$`3esn`..]}]->({`8esn`:8.1e1[.1e1..][`4esn`..],`2esn`:{@usn6} In 9e12}))))..] Where 00[{1000}] Create `2esn`=Allshortestpaths((((@usn6 :`5esn`:`7esn`)-[`8esn`{#usn8:.12e12[..7]}]-({_usn4:9e-12[010..{#usn7}][{123456789}..7],`5esn`:$_usn4 Ends With {#usn8}})<-[ *999..123456789{`2esn`:_usn3 =~{7} =~123.654}]->({_usn4:.1e1 Is Null Is Null,`5esn`:{1000}[`2esn`...0e-0][9e-1..0X7]})))),`2esn`=Shortestpath((`` :`3esn`)-[?:@usn5|:#usn7 *0X0123456789ABCDEF{``:$12[$`6esn`..][01..],`8esn`:{12} Ends With 1e1}]-(`5esn` :`1esn`:``{usn2:`7esn` =~#usn8 =~\"d_str\",`4esn`:$usn1 Contains 4.9e12 Contains $`2esn`})) Create Unique @usn6=((({@usn5:$`6esn`[@usn6...9e-12],_usn3:Null})<-[:@usn5|:#usn7 *0X0123456789ABCDEF{`5esn`:9e-1 Contains 3.9e-1}]->(`6esn` $_usn3)<-[? *01234567..{_usn3:12.0[..Count ( * )][..@usn6]}]-(:`8esn`{`1esn`:{usn1} Contains {`2esn`},`8esn`:{12} Ends With 1e1}))),(((`4esn` :``{``:$`6esn` =~$#usn7 =~$`4esn`,_usn3:{usn2} In false})-[`8esn`:`4esn`|:`2esn`]->(`6esn` {`4esn`:$#usn7[01..2.12][2.12..3.9e-1]})<-[`3esn`?{`2esn`:.9e-1 Contains .9e0 Contains ``,@usn6:4.9e12 Is Not Null Is Not Null}]-(:usn1{#usn8:`1esn` =~{12} =~{999},`8esn`:$12 Ends With 12.0 Ends With $`4esn`}))) Union All With  $123456789[{usn1}][.12e-12] As `3esn`,1.9e0 =~.0e0 =~0X7 As #usn7,9e1 Ends With 9e12 Ends With 0x0 As #usn8 Order By $@usn5 Is Null Is Null Ascending,`1esn` Is Not Null Is Not Null Desc Limit {`8esn`} Ends With true Ends With {`3esn`} Where $12 Is Not Null Is Not Null Remove (`3esn` :`2esn`:`4esn`{`2esn`:{usn1} Is Not Null,`8esn`:999[..$@usn5][..``]})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(`1esn` :#usn7:`8esn`).@usn5.`5esn`?,[usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null|2.12[`4esn`][.9e-1]].`1esn`!,{`3esn`:00 =~`4esn` =~.9e-12}.`3esn`? Load Csv From $@usn6 Is Null As `1esn` "),
    octest_legacy:ct_string("Drop Constraint On(`3esn`:`3esn`)Assert Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})))).`5esn` Is Unique"),
    octest_legacy:ct_string("Remove None(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $usn2 Ends With 00 Ends With 9e12).`3esn`,Reduce(`3esn`=1e1[$_usn3],`2esn` In $@usn5 Is Not Null Is Not Null|8.1e1[..9.1e-1][...9e1]).`2esn`!.`1esn`?.`3esn`? Start `3esn`=Node(0xabc,7,0Xa,01234567) Where $`8esn` Is Not Null Is Not Null Union Create Unique (`1esn` :`7esn`) With Distinct *,(:`6esn`)<-[:usn1|usn2{`6esn`:usn2 Contains `2esn` Contains {1000}}]->(@usn5 )<-[:`4esn`|:`2esn`{usn1:3.9e-1 Contains $@usn5}]->(`7esn` ) In Case 9e1[0.0] When 999 Starts With 7.0e-0 Starts With true Then {usn2}[{999}..][9e12..] End In [`2esn` In $@usn5 Is Not Null Is Not Null Where {`3esn`} =~$@usn5 =~`2esn`|\"d_str\" Is Not Null Is Not Null] As _usn4 Order By Reduce(#usn8={`6esn`}[6.0e0..9e0][.9e1..12e12],_usn3 In `8esn`[_usn4]|01 Ends With .0e0 Ends With 7.0e-0) =~[`` In `7esn` =~#usn8 =~\"d_str\" Where `3esn` Contains `2esn` Contains {_usn4}] Asc,9e-12 Contains .12e12 Ascending,4.9e12[{_usn4}..] Descending Skip 010[...12e-12] Limit _usn4[{``}..{`6esn`}][$7..$_usn3] Where `8esn`[_usn4] Delete 9e0 Is Null,1e-1 Ends With {@usn5} Ends With {usn2}"),
    octest_legacy:ct_string("Remove Case #usn8[\"d_str\"..usn2] When $12[$`6esn`..][01..] Then $`4esn`[$@usn6...12e12] End.`6esn`._usn3,Reduce(usn2=$@usn6 Is Null Is Null,`5esn` In {123456789} Starts With $_usn4 Starts With 0x0|$`4esn` Contains `4esn` Contains .0e-0).usn2 Unwind $usn2[$999][1e1] As `4esn`"),
    octest_legacy:ct_string("With  *,Case .12e-12 Is Null When Count ( * )[_usn4..] Then 7.0e-0 Is Not Null When 2.12[{12}] Then {usn2} Ends With {@usn6} Ends With 1000 End[Extract(`6esn` In 010[{`1esn`}..] Where {1000}[0..])][({`3esn`:{`6esn`}[@usn5..{@usn6}],_usn3:@usn6 Starts With #usn7})<-[?{#usn8:9e1 Starts With $@usn6 Starts With 0e-0,usn2:.9e1 In .1e-1}]-(:`3esn`{#usn7:{`7esn`} Is Not Null Is Not Null})-[usn2? *01234567..]->(:`5esn`:`7esn`{``:{@usn5}[10.12e12..]})] Order By .0e0 Starts With 1.0 Starts With $12 Ascending Limit 0e0[2.9e1..][.12e-12..]"),
    octest_legacy:ct_string("Start _usn4=Rel:`4esn`({7}) ,`6esn`=Rel:@usn6(`8esn`='s_str')Where {0} Ends With 0Xa Start _usn4=Rel:`5esn`(@usn5=\"d_str\")  With  .0e-0 Ends With $`2esn` Ends With `5esn`,Case {`4esn`} Ends With Count(*) When `7esn` =~#usn8 =~\"d_str\" Then 010[..9e-1][..0X7] When $#usn7 Contains 3.9e-1 Then 123.654[10.12e12..$12][6.0e0..{#usn8}] Else $usn1[0e0...9e-12] End[Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7}))..][Any(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 0e0 Contains {`2esn`})..] As `2esn`,true In 0.0 As @usn5 Order By 0 Ends With .0e-0 Ends With false Descending,Extract(`2esn` In $@usn5 Is Not Null Is Not Null Where .9e1[$`1esn`..][$``..]) Ascending,Allshortestpaths((((#usn8 :`5esn`:`7esn`{`5esn`:$usn1[9e1][{999}]})<-[_usn4 *..07{``:{#usn8} In {12} In .9e12,`7esn`:.0e0 =~0 =~.0e0}]->(:``{usn1:.12e-12 Starts With .12e-12,`3esn`:\"d_str\"[0x0..{@usn6}][$@usn5..0]})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1}))))[`7esn`(Distinct `` Ends With 1.0 Ends With usn1)][None(#usn7 In .0e-0 In 12 Where 1e1[$_usn3])] Asc Limit [`` In `7esn` =~#usn8 =~\"d_str\" Where $_usn4[..$999]] Contains Reduce(@usn6='s_str' =~$usn2 =~{7},usn2 In .12e-12 Ends With `2esn`|$`5esn`[$_usn3][$12]) Contains Single(usn2 In .12e-12 Ends With `2esn` Where 5.9e-12[0x0..])"),
    octest_legacy:ct_string("Optional Match `7esn`=Allshortestpaths(((`4esn` :`8esn`{@usn5:01234567 =~12e12 =~.0e-0})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->({usn1:12[..$`5esn`]})-[`8esn`?:`3esn`|`3esn`]->(#usn8 :`5esn`:`7esn`{`5esn`:false[..usn2][..999]}))) Using Index #usn8:`3esn`(@usn6) Create `8esn`=(({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})),Allshortestpaths((:`3esn`)) Union Return Distinct *,@usn6[Reduce(`5esn`=_usn4['s_str'][8.1e1],_usn3 In `8esn`[_usn4]|$_usn3 =~'s_str' =~12)..][(#usn7 {@usn6:9e12 Ends With 9e-1 Ends With 9e1})<-[ *7{usn2:.9e1 Ends With 0x0,``:.1e1 Contains 1e-1 Contains #usn8}]->(_usn3 {`1esn`:`3esn` =~$#usn7,_usn3:@usn6[999][1000]})<-[`7esn`?]-(@usn6 {usn2:1e1 Ends With $_usn3 Ends With .1e1})..] As usn1 Skip {`6esn`} In .0e0 In $0 Limit (:`1esn`:``{`8esn`:{12} Ends With $`3esn` Ends With 0xabc})-[`5esn`:usn1|usn2 *7{#usn7:7[{`4esn`}..],@usn5:$@usn6 Is Null Is Null}]-(@usn5 :`3esn`{`1esn`:`5esn` Ends With Count(*)})[Extract(#usn8 In 07[..$`5esn`] Where $_usn3[0X0123456789ABCDEF..][0x0..])][Any(@usn6 In 9e12[..usn2][.._usn3] Where 0xabc[..Count(*)][..$`5esn`])]"),
    octest_legacy:ct_string("Create Constraint On(usn1:`1esn`)Assert Exists(Filter(usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..]).#usn8.`5esn`!)"),
    octest_legacy:ct_string("Create Constraint On()-[`2esn`:`1esn`]-()Assert Exists(Reduce(`7esn`=$usn2 Starts With $999 Starts With .0e0,@usn6 In 9e12[..usn2][.._usn3]|$@usn6 Is Null Is Null)._usn4?.usn1?)"),
    octest_legacy:ct_string("Create (`6esn` :`2esn`:`4esn`{`4esn`:9e-1 Is Not Null,`8esn`:9e0[`7esn`..][#usn8..]})-[``?:#usn8|:``*{`2esn`:`4esn` =~010}]-(:_usn4:`2esn`) Foreach(`1esn` In [`1esn` In $12 In {usn2} Where $`8esn` Is Not Null Is Not Null|8.1e1 Contains $@usn6] In All(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where `6esn`[0X0123456789ABCDEF..][`8esn`..]) In Extract(`7esn` In 0.12 Is Not Null Where .12e-12[@usn6..'s_str'])| Create Unique Allshortestpaths(((({#usn7:{7}[0x0][1e1]})<-[{@usn5:0.12 =~`6esn` =~.9e-1}]->({_usn4:12e12 Ends With `5esn` Ends With .0e0})<-[usn2?:`2esn`|`5esn`{``:{#usn7} =~$@usn6 =~$7}]->(`5esn` {`4esn`:{`3esn`}[_usn4][2.9e1]})))) Load Csv From _usn4['s_str'][8.1e1] As `` ) Union Delete 9e0 Is Null,1e-1 Ends With {@usn5} Ends With {usn2} Start `1esn`=Rel:`5esn`(@usn5=\"d_str\") ,usn1=Rel:`7esn`(`8esn`={`3esn`})Where {usn1} In Count ( * ) In 12e12 Start #usn8=Relationship:usn2(usn1={_usn3}) "),
    octest_legacy:ct_string("Drop Constraint On(`6esn`:@usn5)Assert Exists(All(usn1 In \"d_str\" Contains {@usn6} Where .12e-12[9e1]).``!)"),
    octest_legacy:ct_string("Load Csv With Headers From {0}[..`3esn`][..8.1e1] As `2esn` Fieldterminator \"d_str\" Load Csv From Single(`6esn` In 010[{`1esn`}..] Where _usn4 Ends With {`8esn`} Ends With usn2) =~`1esn`(123.654[01..][Count(*)..],{_usn4} Ends With {0} Ends With `1esn`) =~(`7esn` {`7esn`:9e-1 Contains 3.9e-1,@usn6:{`6esn`} =~2.12 =~123.654})-[`1esn`?:``|:`7esn`{#usn7:01[`4esn`..]}]->(`` :`5esn`:`7esn`{`8esn`:2.9e1[Count ( * )..]}) As `8esn`  Unwind $`6esn` =~$#usn7 =~$`4esn` As usn1 Union All Foreach(usn2 In {usn1:12[..$`5esn`]}[None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where .9e1[$`1esn`..][$``..])]| Optional Match Allshortestpaths(((:`6esn`{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}}))),(((usn1 :@usn6:_usn3)<-[_usn4?{_usn3:999[..$@usn5][..``],`8esn`:.0e0[usn1..7.0e-0][$`5esn`...9e-12]}]->(:usn1)<-[:``|:`7esn`{@usn6:{#usn8}[..@usn5],@usn6:$1000 Contains $123456789 Contains #usn8}]->(`1esn` :@usn6:_usn3{#usn8:2.9e1[2.12..1.9e0],`6esn`:Count ( * ) Starts With 0.12}))) Create Allshortestpaths((((_usn3 :`8esn`)<-[`8esn`?]->(`1esn` {usn1:2.9e1 =~Count(*) =~{123456789}})-[? *1000..]-(`` :#usn8:@usn6{``:.0e-0[..01234567],`1esn`:$#usn8[$0..`3esn`][1e-1..$7]})))),@usn6=((#usn8 :`5esn`:`7esn`{usn2})<-[?:`6esn`{`1esn`:$`5esn` Is Not Null,`2esn`:.1e-1[2.9e1..][$`7esn`..]}]->(:@usn6:_usn3{#usn7:0Xa In 1.0 In $@usn5})<-[#usn8?:`7esn`|usn1*..$`1esn`]->(:#usn7:`8esn`{``:_usn4 Ends With {`8esn`} Ends With usn2,_usn3:$@usn6 Is Null Is Null}))) Create Unique (@usn5 :`3esn`{`4esn`:12e12[.9e12..07]})-[#usn8?*..]-(`` {`6esn`:1000[{`1esn`}..][$`3esn`..]})"),
    octest_legacy:ct_string("Create Constraint On()-[usn2:@usn6]->()Assert Exists(Shortestpath((:`3esn`)-[#usn8*..]-(`5esn` :#usn8:@usn6)<-[`4esn`?]-(:@usn5{#usn7:Null,`5esn`:{@usn5} Ends With 0Xa Ends With .12e-12})).`8esn`)"),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`1esn`)Assert Exists(Filter(#usn8 In 07[..$`5esn`] Where $`5esn` Is Not Null).@usn6!)"),
    octest_legacy:ct_string("Create Unique (@usn5 ) Delete $7 =~01234567 =~12.0,9e1 Starts With $@usn6 Starts With 0e-0 Union With Distinct *,9e1[12] As usn1 Limit 9.1e-1[..Null][..#usn8] Where $#usn8 Is Not Null Is Not Null Detach Delete 8.1e1[usn2..{1000}][0X7..9e12],$1000[_usn4][{@usn5}]"),
    octest_legacy:ct_string("Drop Constraint On(@usn5:`1esn`)Assert Exists(Single(_usn3 In `8esn`[_usn4] Where 01234567 Ends With .0e0 Ends With 12e12).#usn8!)"),
    octest_legacy:ct_string("Unwind $`8esn`[0x0][.9e0] As `5esn`"),
    octest_legacy:ct_string("Drop Constraint On()-[`8esn`:`4esn`]->()Assert Exists((_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]})-[_usn3?:`7esn`|usn1]-(`6esn` :`7esn`{@usn5:999 Is Null Is Null,`4esn`:Count(*)[Null..][01234567..]})-[:`4esn`|:`2esn` *0X0123456789ABCDEF{_usn4:$`1esn`[4.9e12..][_usn3..],@usn6:`3esn` =~$#usn7}]-(`2esn` ).`4esn`.`8esn`)"),
    octest_legacy:ct_string("Foreach(@usn6 In 7.0e-0 Ends With 0e0 Ends With 3.9e-1| With Distinct 5.9e-12[01][`4esn`],$#usn8 Starts With 9.1e-1 Starts With {#usn7} As `8esn`,`5esn` Ends With 's_str' Ends With @usn5 As `1esn` Order By 's_str'[$_usn3..][9.1e-1..] Desc Where 1.0 Is Null Is Null Create Shortestpath((`1esn` :`5esn`:`7esn`)-[`6esn`?*]->(:`8esn`{@usn6:Null,_usn4:0e-0[{12}]})),((_usn3 :`7esn`{@usn6:$`4esn` Ends With .12e12 Ends With 123.654})-[usn1? *..123456789{`8esn`:00[$``],``:$`4esn`[12e-12..$`1esn`][$`2esn`...9e12]}]->(:`6esn`)<-[#usn7? *0xabc..12]-(:`3esn`))) Optional Match @usn5=Allshortestpaths(((:`6esn`{usn1:{_usn4}[{`6esn`}],`8esn`:1e1 Ends With $_usn3 Ends With .1e1})-[@usn5{`1esn`:0e-0[..7.0e-0][..{`8esn`}],`8esn`:\"d_str\" Starts With $`7esn` Starts With 999}]->(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[usn1?{usn1:#usn7 In 07,usn1:0[..{0}][..true]}]->(`7esn` :`8esn`{@usn5:$usn1 =~.0e0 =~{`4esn`},`5esn`:$`4esn` Ends With {999}}))),(@usn6 :_usn4:`2esn`) Using Join On `2esn`,`6esn` Using Scan #usn8:`1esn` Where 5.9e-12[12e-12][$`8esn`]"),
    octest_legacy:ct_string("Remove [_usn3 In `8esn`[_usn4] Where 12.0[..Count ( * )][..@usn6]|$#usn7].``.usn1!.#usn8!,Allshortestpaths((`7esn` {@usn5:07[{@usn5}..],`3esn`:$1000 Starts With {@usn6} Starts With $@usn5})-[`7esn`:`2esn`|`5esn`{_usn4:\"d_str\"[0x0..{@usn6}][$@usn5..0],`1esn`:`8esn`[.12e12..]}]->(_usn4 :`2esn`:`4esn`{#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[#usn7? *0xabc..12]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})).usn2!.`5esn`?,{usn2:.9e1 In .1e-1,usn2:1e-1 Contains 0.0}.`5esn`?.``"),
    octest_legacy:ct_string("Return Distinct {`5esn`} Ends With $`7esn` Ends With {@usn5} As `4esn`,{#usn8} Is Not Null As `6esn`,{`3esn`}[...1e1][..0] Order By usn1 Ends With 11.12e-12 Ends With 5.9e-12 Descending,.1e-1 Is Not Null Ascending,Allshortestpaths((({usn1:{0}[.0e-0][$`2esn`],@usn5:7 Starts With 9e-12})<-[_usn3?:`8esn`|:#usn8{`5esn`:9e1[0.0]}]->({usn1:2.9e1 =~Count(*) =~{123456789}})))[..$`4esn`][..{#usn7:usn2 Ends With $123456789 Ends With {999},`1esn`:$12[10.12e12][.1e1]}] Descending Skip 9e0[{7}...0e-0][Null..@usn5] Limit $`5esn` =~Count(*) =~1.9e0 Create Unique _usn4=((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})) Merge Allshortestpaths(((`8esn` :`7esn`)<-[`2esn`?:`4esn`|:`2esn`]-(@usn5 )))"),
    octest_legacy:ct_string("Unwind {`3esn`}[..0xabc][..{`6esn`}] As `7esn` With  *,Reduce(`4esn`={0} Is Not Null,#usn7 In .0e-0 In 12|12e12[{`4esn`}..`4esn`][999..{@usn6}]) Contains Single(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where 0xabc[..{usn1}][..\"d_str\"]) Contains `3esn` As `5esn`,None(usn2 In .12e-12 Ends With `2esn` Where 7.0e-0 Is Not Null) Starts With usn1({`7esn`} Is Not Null Is Not Null,$`8esn` =~{`6esn`} =~12) Starts With None(usn1 In \"d_str\" Contains {@usn6} Where `1esn` Is Not Null Is Not Null) As _usn3 Order By {12}[true..][7..] Ascending,All(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where _usn4 Is Not Null Is Not Null)[..Allshortestpaths(((@usn5 {`8esn`:.1e1 Ends With #usn7 Ends With {#usn7}})<-[usn1? *12{@usn6:{_usn4}[{`6esn`}],#usn7:.1e1[{@usn6}][true]}]->({usn1:$999 Ends With `2esn` Ends With 12.0,_usn3:`1esn`[{usn1}..]})))] Asc,({#usn8:3.9e-1 Ends With {usn1} Ends With {`5esn`},`7esn`:8.1e1[..9.1e-1][...9e1]})<-[`8esn`*]-(#usn8 )[..Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn`[0X0123456789ABCDEF..][`8esn`..]|$_usn3 =~'s_str' =~12)][..`1esn`(Distinct .9e1[$`1esn`..][$``..])] Ascending Skip 7[..123456789][..true] Where {#usn7}[.12e-12] Union Create `7esn`=(`3esn` :usn2) Union Load Csv With Headers From All(usn1 In {#usn7} =~.12e12 =~9e0 Where \"d_str\" Starts With $`7esn` Starts With 999)[..Case $12[10.12e12][.1e1] When {999} Starts With $`4esn` Starts With $`1esn` Then $_usn3 In `2esn` In `3esn` End] As `` Fieldterminator \"d_str\" Create @usn5=(((`1esn` :usn2{`8esn`:12.0[...0e0]})-[`5esn`?:@usn5|:#usn7{`4esn`:9e-12[$7..]}]->(`5esn` :``{usn2:{_usn3} In $#usn8 In $12})-[?:`1esn`|:`1esn` *999..123456789]-(usn1 {@usn6:3.9e-1[..$1000][..0.12]}))),Shortestpath((`6esn` :``)<-[`5esn`?:`1esn`|:`1esn` *12]->(`6esn` {`3esn`:Count ( * )[_usn4..]})) With  Allshortestpaths((({#usn7:12e12[.9e12..07]})-[{`6esn`:\"d_str\" Contains {@usn6},`4esn`:12e12 Contains {0}}]-(`7esn` :@usn6:_usn3)-[`7esn`:`2esn`|`5esn` *01234567..]->(`1esn` :`2esn`:`4esn`)))[Extract(`1esn` In $12 In {usn2} Where 9e-1[1.9e0])..][Case When `3esn` =~$#usn7 Then $usn2 In #usn7 In #usn7 When $`5esn`[{`4esn`}][{0}] Then 2.9e1[2.12..1.9e0] Else #usn7 =~$@usn5 =~{7} End..] As #usn8,{12} Ends With 1e1 As `8esn` Order By ``[$7..$_usn4] Asc Where 0.0[`7esn`]"),
    octest_legacy:ct_string("Create Constraint On()<-[_usn3:@usn5]-()Assert Exists(Case When $12[$`6esn`..][01..] Then $`4esn`[$@usn6...12e12] When .9e-12[.12e12..][0Xa..] Then {`7esn`} Is Not Null Is Not Null Else {`6esn`}[6.0e0..9e0][.9e1..12e12] End.#usn8!)"),
    octest_legacy:ct_string("Load Csv From 0.12[Count ( * )..Count ( * )][$999..`5esn`] As `7esn`  Unwind 0.0[00..][0xabc..] As #usn7 Start #usn7=Node:``('s_str')  Union Foreach(`1esn` In Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null)| Delete 2.9e1 Ends With `5esn` Ends With 1000 With Distinct *,false[..usn2][..999] Order By .0e-0[010..] Asc,6.0e0 In 9e-1 In 123456789 Ascending,Reduce(@usn5=7 In 1e1 In {``},usn1 In \"d_str\" Contains {@usn6}|.9e12[6.0e0..][@usn5..]) Contains (:usn1{`2esn`:$`7esn` In $`4esn`,_usn4:12e12 Ends With `5esn` Ends With .0e0})-[`6esn`?{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc}]->(#usn8 :#usn7:`8esn`{`4esn`:9e1[$``.._usn4][999..`3esn`]}) Desc Skip $`3esn` =~$123456789 =~`3esn`) Return Distinct 9.1e-1[..Null][..#usn8] As @usn6 Order By {999} Starts With $`4esn` Starts With $`1esn` Ascending,$`8esn`[...1e-1] Desc Limit Extract(#usn8 In 07[..$`5esn`] Where 0e-0 In 0X0123456789ABCDEF In `3esn`|{`2esn`} Contains 0xabc) Is Null Is Null"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:`5esn`)Assert Exists(Extract(`8esn` In {usn1}[7.0e-0..][3.9e-1..] Where `6esn` =~999 =~$999|`1esn` In 6.0e0 In 12).usn1?.``)"),
    octest_legacy:ct_string("Create Constraint On(`8esn`:`6esn`)Assert Exists((@usn5 :#usn8:@usn6{`3esn`:$@usn6[.1e-1][9e12],_usn3:$12 Is Null Is Null})<-[#usn7? *0xabc..12]-(_usn3 :`6esn`).#usn7?)"),
    octest_legacy:ct_string("Merge `8esn`=Allshortestpaths(({`8esn`:{usn1}[`7esn`..Count(*)],#usn7:$usn1 =~.0e0 =~{`4esn`}})<-[?:usn2 *010..0{`4esn`:9e-12[$7..]}]-(@usn6 :`3esn`{usn2:0xabc Starts With {`3esn`} Starts With {``},#usn7:Count(*) Starts With 07 Starts With $#usn7})) On Match Set Filter(usn2 In $`5esn`[{`4esn`}][{0}] Where {0}[.1e-1..][_usn4..]).`6esn`.usn1.`7esn`? =0xabc Starts With `2esn` Starts With 10.12e12,`8esn` =[usn2 In $`5esn`[{`4esn`}][{0}] Where $@usn5 Contains _usn3][[_usn3 In `8esn`[_usn4] Where usn2[..$0][..`3esn`]]] Merge (#usn7 :@usn5)-[:`8esn`|:#usn8 *0X7..0Xa]->(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})<-[usn2?:@usn5|:#usn7 *7{``:{``} Is Null Is Null,_usn4:{`6esn`} =~2.12 =~123.654}]->(_usn4 :`5esn`:`7esn`{_usn4:$_usn3[.0e-0..999]}) On Create Set usn2+=Case 1.9e0 In $@usn6 In $_usn3 When .1e1 Contains 1e-1 Contains #usn8 Then #usn7 Is Null Is Null When $`8esn` Then 0[..{0}][..true] End Starts With _usn4(Distinct 0X0123456789ABCDEF Ends With {1000},0X0123456789ABCDEF Is Not Null Is Not Null),#usn8 =None(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where {`6esn`} In {_usn4} In $12) =~None(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where {_usn3} In $#usn8 In $12) =~All(usn2 In $_usn3[0X0123456789ABCDEF..][0x0..]) Create (#usn7 :`6esn`{usn1:`4esn` Ends With 9e12 Ends With {`5esn`},_usn4:$`5esn` Is Not Null})-[`2esn`?:``|:`7esn` *1000..]-(:_usn3{@usn5:`2esn`[`7esn`][1000]}) Union All Unwind `4esn` =~010 As `` Remove ({`5esn`:{123456789} Contains $0,_usn4:2.9e1 Ends With `5esn` Ends With 1000})<-[`5esn` *01]-(`1esn` {`6esn`:#usn8[\"d_str\"..usn2],`3esn`:{`3esn`}[01234567][{#usn7}]}).#usn7!,All(usn1 In {#usn7} =~.12e12 =~9e0 Where 4.9e12[{_usn4}..]).`8esn`!,`7esn`:usn2"),
    octest_legacy:ct_string("Load Csv With Headers From #usn8(Distinct {#usn7}[.12e-12],Count ( * )[`5esn`..\"d_str\"][01234567..{1000}]) As `1esn` Fieldterminator \"d_str\" Match Shortestpath(((`` :`7esn`))),Allshortestpaths((:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010})-[*{usn1:{`6esn`} In .0e0 In $0,usn1:07[..$`5esn`]}]-(:`8esn`{``:1e1 =~{@usn5} =~`7esn`,usn2:{`2esn`} Contains 0xabc})<-[`3esn`?:usn2]-(`7esn` {@usn5:0.12 =~`6esn` =~.9e-1})) Using Index @usn5:usn1(`4esn`) Where {0}[.1e-1..][_usn4..]"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From {0}[.1e-1..][_usn4..] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Drop Constraint On(`1esn`:`2esn`)Assert Exists((#usn7 :_usn3{`4esn`:$@usn6[.1e-1][9e12],`6esn`:Null[#usn7..][9.1e-1..]})-[`3esn`?:`3esn`|`3esn`*..]-({`6esn`:1000[{`1esn`}..][$`3esn`..]})-[@usn6:`1esn`|:`1esn`{#usn8:12.0[..Count ( * )][..@usn6]}]-(@usn6 :`3esn`{`4esn`:$`5esn`[$_usn3][$12],#usn8:`8esn`[.12e12..]}).#usn7!)"),
    octest_legacy:ct_string("Drop Constraint On(`4esn`:`6esn`)Assert Exists(Single(`3esn` In 8.1e1 Contains .9e-1 Contains false Where $0 Contains $123456789 Contains {`3esn`}).@usn6!)"),
    octest_legacy:ct_string("Start `1esn`=Rel:`5esn`(@usn5=\"d_str\") ,`5esn`=Node:@usn6(#usn8='s_str') With Distinct 00[..@usn6] As `6esn`,.0e0[$usn1][0] As ``,$`8esn` Contains {@usn6} Contains `7esn` Skip {usn1:$1000 Is Null}[Shortestpath((:usn1$1000))..][Reduce(``={`4esn`}[00..],usn1 In {#usn7} =~.12e12 =~9e0|999 Starts With 7.0e-0 Starts With true)..] Where `3esn` Starts With 9.1e-1 Starts With .9e-1 Match ((`4esn` :`6esn`)<-[{``:7.0e-0 Is Not Null}]->(:#usn7:`8esn`{@usn5:{0} In {`1esn`}})-[``?{``:{#usn7} =~$@usn6 =~$7}]-(`3esn` :@usn5)) Using Join On #usn8 Union Foreach(`1esn` In $@usn6 Starts With 0xabc Starts With {`7esn`}| With Distinct *,7 Starts With 9e-12 As #usn7,$_usn3 In `2esn` In `3esn` Order By Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null Desc,0X7 Contains $12 Contains 0e0 Descending,{@usn5:5.9e-12 Is Null Is Null} Ends With Extract(`8esn` In {_usn4} Ends With {0} Ends With `1esn` Where _usn4['s_str'][8.1e1]|0.12 =~2.9e1 =~9e1) Ends With All(`1esn` In $12 In {usn2} Where `5esn` Contains 0 Contains $12) Descending Where {`1esn`} Contains 1.0 Contains 4.9e12) Union Match Shortestpath(((`1esn` {_usn4:999[..$@usn5][..``],usn2:\"d_str\" Starts With $`7esn` Starts With 999}))),_usn3=(`3esn` {_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null}) Using Join On `4esn`,`5esn`,@usn6 Where #usn8 =~{@usn5} Unwind {7} Is Not Null As _usn3"),
    octest_legacy:ct_string("Optional Match _usn3=(((`4esn` )-[{#usn7:1e-1[$`4esn`]}]->(`1esn` :`2esn`:`4esn`)-[?:#usn8|:``{usn2:{12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1],usn1:\"d_str\"[0x0..{@usn6}][$@usn5..0]}]-(:`6esn`{usn2:0Xa In 1.0 In $@usn5,#usn7:999 Contains {999} Contains 12}))),`1esn`=Allshortestpaths((usn2 {#usn8:$12 Ends With 12.0 Ends With $`4esn`,`5esn`:9e12 Ends With \"d_str\" Ends With 0X7})<-[?$999]-(`4esn` {#usn7:$usn1[0e0...9e-12]})-[:`5esn` *01234567..{`2esn`:{usn1} Contains {`2esn`},#usn7:`4esn`[9e-12..true]}]-(#usn7 {`6esn`:_usn3[{#usn7}],#usn8:.9e-1 Is Null Is Null})) Foreach(@usn5 In Case Count(*) =~01234567 =~.1e-1 When {123456789} Starts With $_usn4 Starts With 0x0 Then .9e-12[usn2] When {`8esn`}[@usn5][$`2esn`] Then 00[$``] End[..Filter(@usn6 In $usn2 Contains $`3esn` Contains 6.0e0 Where 999[..$@usn5][..``])][..Case When `3esn` =~$#usn7 Then $usn2 In #usn7 In #usn7 When $`5esn`[{`4esn`}][{0}] Then 2.9e1[2.12..1.9e0] Else #usn7 =~$@usn5 =~{7} End]| Create Unique `2esn`=(((@usn6 :`2esn`:`4esn`{@usn6:$12[10.12e12][.1e1],`8esn`:@usn5 In Null})-[`1esn`{@usn5:9e-1 Contains 3.9e-1,usn2:9e12[..usn2][.._usn3]}]-(#usn7 )-[`3esn`?:usn2]-(:`1esn`:``{_usn4:123.654[01..][Count(*)..],`8esn`:12e12}))))"),
    octest_legacy:ct_string("With Distinct 0xabc[..Count(*)][..$`5esn`],{12} Ends With 1e1 As `8esn`,{`4esn`} In 1000 In {@usn5} Order By {7} Ends With 999 Asc,_usn3 =~{`4esn`} Desc Skip [`1esn` In $12 In {usn2} Where 12e-12 Starts With $`7esn`][{`3esn`:$`6esn`[@usn6...9e-12],`7esn`:4.9e12 Ends With $@usn6}..] Where Null In {7} Match Shortestpath((((`1esn` :#usn8:@usn6{usn1:#usn8 Is Null Is Null,_usn3:{`4esn`} In 1000 In {@usn5}})<-[`6esn`?:@usn5|:#usn7{`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`}]->(`7esn` {_usn4:$7[.1e-1..{@usn6}][$7..{`1esn`}]})-[?*{@usn6:$999 Ends With `2esn` Ends With 12.0}]-(#usn8 :`8esn`)))),Allshortestpaths(((_usn3 :`1esn`:``)<-[@usn5?:`6esn` *..00{`3esn`:Count(*)[$7],_usn3:$#usn7[01..2.12][2.12..3.9e-1]}]->($12)-[_usn3?:@usn5|:#usn7]->(`7esn` {``:Null,_usn4:10.12e12 Starts With $`4esn` Starts With 0e0}))) Using Join On `6esn`,``,usn2 Where .12e-12 Is Null Merge (((`7esn` :usn1)<-[:`7esn`|usn1{usn1:$usn2 Starts With $999 Starts With .0e0,#usn7:$`5esn`[$_usn3][$12]}]-(usn2 :``{_usn3:$12 In {usn2},``:.9e-1 Is Null Is Null})<-[`3esn`?:@usn6|:`4esn`]-(:`1esn`:``{`6esn`:$#usn7[01..2.12][2.12..3.9e-1],usn1:$_usn3 Starts With 010}))) On Create Set `4esn` =Any(_usn3 In `8esn`[_usn4] Where {@usn6} In 1.0) Is Not Null,{``:`6esn` =~999 =~$999}.`3esn`! =.1e1 In $999 In {#usn8},@usn5 =9e1 In $1000 On Match Set Shortestpath(((:#usn8:@usn6{@usn6:{`4esn`}[{`3esn`}][$`2esn`]})-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->(`` :`4esn`:usn2)-[ *999..123456789{`8esn`:{``}[usn1..][{`8esn`}..]}]->(`` :`4esn`:usn2))).usn1? =9e0[`1esn`..0e-0][00..`1esn`],`7esn`+=00[(`3esn` :_usn3{@usn6:0.12 Is Not Null})-[#usn8:`5esn`]-({`6esn`:12[@usn6][{`2esn`}]})..],Shortestpath(((usn1 {`6esn`:9e-1 Is Not Null,#usn7:`1esn`[{@usn5}..][{_usn4}..]})-[`8esn`{#usn8:.12e12[..7]}]-({`6esn`:1000[{`1esn`}..][$`3esn`..]}))).`7esn`? =$12 Contains false Contains {`1esn`} Union All Detach Delete {1000} =~4.9e12 =~9e1,Null,10.12e12[010..1e1][.1e-1..{1000}] Return *,2.12[{12}] As #usn7,.0e-0 =~usn2 As `1esn` Order By $`8esn` =~{`6esn`} =~12 Ascending,Case When .1e1 Ends With #usn7 Ends With {#usn7} Then .9e0[$#usn8][Count ( * )] When 0X0123456789ABCDEF[1e1..] Then 0X0123456789ABCDEF Ends With {1000} End In (:usn1)<-[_usn4? *7{`1esn`:.0e0['s_str'..][0Xa..]}]->(_usn3 :`6esn`{#usn7:{`6esn`} Starts With @usn6,`7esn`:{7}[0x0][1e1]}) In [_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0|usn2 Ends With $123456789 Ends With {999}] Ascending,Any(_usn3 In `8esn`[_usn4] Where @usn6 Ends With $`2esn` Ends With 1.0) Ends With Reduce(`6esn`=1e1 Ends With 12 Ends With 999,`` In `7esn` =~#usn8 =~\"d_str\"|$usn2 Contains $`3esn` Contains 6.0e0) Ends With `1esn`(Distinct {0} Is Not Null Is Not Null) Descending Skip {`6esn`} In {_usn4} In $12 Foreach(usn2 In {_usn4} In 0X7 In 0e0| Detach Delete $@usn5 Is Not Null Is Not Null,_usn3 =~{7} =~123.654,@usn5[@usn6] Start _usn4=Rel:_usn4({`1esn`}) )"),
    octest_legacy:ct_string("Drop Constraint On(`7esn`:`3esn`)Assert Exists(Shortestpath(((({@usn5:`2esn`})<-[`8esn`? *0X7..0Xa{_usn3:$`4esn`[$@usn6...12e12]}]-(`4esn` :usn2{_usn4:123.654[01..][Count(*)..],`8esn`:12e12})-[{#usn8:\"d_str\" Contains {@usn6}}]->(@usn6 {#usn8:$`6esn` Starts With 0.0,usn1:$`8esn`[0x0][.9e0]})))).`4esn`?.``?._usn4!)"),
    octest_legacy:ct_string("Create Constraint On(#usn7:`4esn`)Assert Exists(Single(usn2 In .12e-12 Ends With `2esn` Where 1e-1 Contains 0.0).`2esn`?)"),
    octest_legacy:ct_string("Optional Match ((usn1 :_usn3{`2esn`:{usn2}[9e-1],#usn8:_usn4 Is Not Null Is Not Null})),_usn3=Shortestpath((({`7esn`:00 Is Not Null Is Not Null,_usn4:.12e12 Starts With 5.9e-12 Starts With `4esn`})-[`5esn`? *999..123456789{_usn4:$123456789[{usn1}][.12e-12],#usn8:$999 =~false =~{`8esn`}}]-(_usn3 :`1esn`:``))) Unwind $`6esn` In 999 In {_usn3} As `5esn` Unwind Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null As #usn8 Union All With Distinct 12e12[usn2..$`6esn`] As usn1,0Xa Contains 12e-12,Single(`5esn` In {123456789} Starts With $_usn4 Starts With 0x0 Where $@usn6 Starts With 0xabc Starts With {`7esn`}) Is Not Null Is Not Null As #usn7 Order By 9e12 Ends With \"d_str\" Ends With 0X7 Desc Skip {12}[$`7esn`..usn2][0X0123456789ABCDEF..1e1] Where $@usn6 Is Null Load Csv From 1e-1[..$`2esn`][..01] As #usn7 "),
    octest_legacy:ct_string("Start `7esn`=Rel( {_usn3})  With Distinct *,0 Contains {`2esn`} Union Detach Delete $@usn5 Is Not Null Is Not Null,_usn3 =~{7} =~123.654,@usn5[@usn6] Merge Allshortestpaths((((#usn7 {`4esn`:0e-0 In 0X0123456789ABCDEF In `3esn`,`4esn`:`6esn` Ends With 1e1 Ends With $#usn7})-[`8esn`*]-(_usn4 {#usn8:{`3esn`} =~$`` =~$`8esn`})-[`4esn`?:`4esn`|:`2esn` *0Xa..12{``:$`` Starts With $`4esn` Starts With `3esn`,``:7 In 1e1 In {``}}]-(:`5esn`:`7esn`$usn2))))").
