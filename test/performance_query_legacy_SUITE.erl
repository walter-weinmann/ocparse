%%%-------------------------------------------------------------------
%%% File        : performance_query_legacy_SUITE.erl
%%% Description : Test Suite for rule: query.
%%%
%%% Created     : 15.12.2016
%%%-------------------------------------------------------------------
-module(performance_query_legacy_SUITE).

-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - SUITE
%%--------------------------------------------------------------------

suite() ->
    [
        {timetrap, {minutes, 10}}
    ].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - ALL
%%--------------------------------------------------------------------

all() ->
    [test_query].

%%--------------------------------------------------------------------
%% TEST CASES
%%--------------------------------------------------------------------

test_query(_Config) ->
    octest_legacy:ct_string("Create `1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))),Shortestpath((`6esn` :`2esn`{`7esn`:#usn8 =~{999}})) Detach Delete {123456789}[{12}..],9e0 =~0.0 =~$`5esn` Foreach(`1esn` In Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End[(`8esn` :`2esn`)-[`8esn`]->(`8esn` :`8esn`:@usn5)..]| Create Unique @usn6=(_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]}),`7esn`=(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})))) Union Foreach(usn2 In {_usn3} Contains 9e0 Contains $999| With Distinct *,All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..],$`2esn` Is Null Is Null Where _usn4[Count(*)] Create (`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})) Unwind [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]][Shortestpath(((`1esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))..] As #usn8 Start `8esn`=Rel( {`7esn`}) ,`3esn`=Node:`2esn`(@usn6={`4esn`})Where 07 Is Null Union Remove {@usn6:.e12 Is Null Is Null}.``?,Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})).@usn5? Create Unique `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4),`5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})"),
    octest_legacy:ct_string("Foreach(_usn3 In Reduce(`1esn`=12[..$@usn6],`` In {`1esn`} Starts With @usn6|00[..$123456789][..$`5esn`])[Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where {@usn5} Is Null)]| Detach Delete $`2esn`,7[123456789..$123456789][``..00]) Return $1000 =~{1000} =~`5esn`,12e12 Is Not Null Is Not Null As `5esn` Order By {#usn8}[Null] Descending,{`4esn`} In _usn4 Asc Limit [Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[{999}..][{_usn4}..])..]"),
    octest_legacy:ct_string("Create (((_usn3 :`3esn`:`6esn`)<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[?:#usn8|`2esn` *01..07]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))),`4esn`=((`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})-[_usn4?:`3esn`|:@usn5]->(`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})) Load Csv With Headers From {`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}] As @usn5 "),
    octest_legacy:ct_string("Start usn1=Node:#usn8(#usn8={``})  Foreach(`6esn` In #usn8 Is Not Null| Load Csv From 12.e12[$`4esn`..] As usn1 )"),
    octest_legacy:ct_string("Detach Delete Case When Null Ends With 12 Ends With usn2 Then {7}[{`4esn`}][`6esn`] End Is Not Null Is Not Null Union Create Unique (((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Union All Match ({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})<-[? *0xabc..7]->(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6}) Using Scan `1esn`:`7esn` Using Join On `8esn`,`3esn` Start `5esn`=Node:`6esn`(usn2={`8esn`}) ,usn1=Node:`6esn`({`8esn`})Where {#usn7} Contains 0.0 Contains $0 Create _usn3=(({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}))"),
    octest_legacy:ct_string("Unwind 12.e12[..1e1] As usn1 Union All Create Unique Allshortestpaths((({`7esn`:123.654 Ends With usn2 Ends With 0})<-[@usn6?:`7esn` *07{123456789}]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))),(((_usn3 :@usn5{`2esn`:@usn5[$12..\"d_str\"]})-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[`4esn`?*..]-(:`4esn`:@usn6{`3esn`:123456789 Is Not Null Is Not Null}))) Remove [`3esn` =~9e0 =~@usn6].`1esn`,Allshortestpaths((((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)))).`8esn`"),
    octest_legacy:ct_string("Load Csv With Headers From {@usn5}[{`5esn`}][$12] As usn1  Union Optional Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})) Using Scan _usn4:_usn3 Using Index usn1:@usn5(`7esn`)"),
    octest_legacy:ct_string("Load Csv From 12.e12 Starts With 1000 Starts With 's_str' As usn2  Union Load Csv With Headers From {`2esn`} Ends With {#usn7} As `3esn`  Union With Distinct {@usn5} Is Null,``[$0..][`1esn`..] As `4esn` Order By 0Xa[07..] Ascending Limit 's_str'[.._usn4][..``] Where $#usn7[$`4esn`] Optional Match `5esn`=Allshortestpaths(((_usn3 :`6esn`:`8esn`{`4esn`:$usn1 Starts With $999 Starts With {@usn5},`7esn`:``[..$#usn7]})-[#usn7?:`1esn`|:`3esn`]-(`7esn` :@usn5{`7esn`:{1000}[{usn1}][Null],`3esn`:7[$0..][{_usn4}..]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))),((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})) Using Join On `7esn` Using Join On #usn8,#usn8 Where `8esn`[..`4esn`][..$usn1]"),
    octest_legacy:ct_string("Merge usn2=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))) On Match Set @usn5 =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Foreach(#usn7 In {@usn5} =~_usn4 =~0.12| Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),usn1=((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})) Where .e12[$7..][{`6esn`}..]) Union Foreach(@usn6 In 1.e1[0xabc..]| Delete .e1[@usn5]['s_str'],Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Unwind {12}[$`3esn`] As `6esn`) Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),((`4esn` {`1esn`:9e12 Is Not Null Is Not Null})-[?:`7esn` *999{@usn6:{``} Ends With .e12 Ends With 0.e0,`5esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})) Using Scan #usn7:`3esn` With  *,Case 0[{@usn5}..][7..] When {`4esn`} In _usn4 Then `1esn`[Null..] When ``[{#usn8}] Then {`4esn`} Starts With $7 Starts With $`` Else `8esn` Contains $`3esn` Contains {`4esn`} End In [{_usn4} In {1000}] In Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`4esn`} Starts With $7 Starts With $``|0Xa Contains {`7esn`} Contains $999),[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]|0[Count(*)][0e0]] Contains Extract(`` In {`1esn`} Starts With @usn6 Where .e0[..{`5esn`}][..999]|$`3esn`[..$`2esn`][..123.654]) Contains Reduce(`2esn`=$usn1[0X7],@usn5 In Null =~12e12|#usn7 =~{`4esn`} =~123456789) As usn2 Order By Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..] Descending,0.12 In 0X7 Descending Skip Count ( * )[\"d_str\"][_usn3]"),
    octest_legacy:ct_string("Unwind {`3esn`:'s_str'[..0X7]}[(@usn5 :@usn5)<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]->(:`5esn`:@usn5{``:.e12 =~$_usn4})] As `1esn` Start `5esn`=Rel:`4esn`('s_str') ,`6esn`=Node:_usn4(``=\"d_str\")Where $@usn5[$`4esn`][$@usn6] Union All Load Csv From `2esn` Ends With $`4esn` Ends With {#usn7} As usn2 Fieldterminator \"d_str\" Union Create Unique Allshortestpaths((({_usn3})-[`5esn` *0x0..]->(usn1 :usn1:_usn4))),`4esn`=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7))"),
    octest_legacy:ct_string("Return Distinct Count(*) Is Not Null,{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Skip Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123456789 Is Not Null Is Not Null)[Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}))..Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8)][Case When 01 =~$`1esn` Then {@usn5}[Count(*)..] End..count(Distinct 07 =~@usn5)] Create Unique Shortestpath((((`2esn` {@usn6:True Is Null Is Null})-[`5esn` *0x0..]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})-[?:`7esn`]->(#usn7 :@usn6)))),`2esn`=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})) Union With Distinct `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Limit `` =~`6esn` =~usn1 Where 123.654[{`7esn`}][{7}] Remove `8esn`(9e1 =~999,{``} Is Null Is Null).`3esn`! Merge usn2=Shortestpath(((:@usn5{`3esn`:@usn5 =~'s_str',`1esn`:$`7esn` Contains {`1esn`} Contains 9e12}))) Union All Load Csv With Headers From 00[0.12..] As `2esn`  Match _usn3=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`)))"),
    octest_legacy:ct_string("With  0Xa[07..] Order By Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4])[Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End] Descending,Case When {@usn6} Contains 123.654 Contains 01 Then usn2 Ends With Count ( * ) Ends With $@usn6 End Is Not Null Is Not Null Desc,{_usn4}[{usn1}..$_usn3] Asc Skip .e1 Ends With {7} Ends With $usn1 Limit {`3esn`} =~$7"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv From (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Is Null As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return 1.e1 Is Null Skip $`2esn`[{``}..{1000}][#usn8..`2esn`] Limit $123456789[..$7][..$`6esn`] Merge `5esn`=(_usn3 :`6esn`:`8esn`{`4esn`:$usn1 Starts With $999 Starts With {@usn5},`7esn`:``[..$#usn7]}) On Create Set #usn8 =$`1esn` =~$`1esn` =~{`6esn`},`2esn` =@usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2),`6esn` =`6esn` In Null On Match Set `5esn` =123456789 Is Not Null Is Not Null,`6esn` ={@usn5}[{`5esn`}][$12] Union Start `7esn`=Node:usn1({999})  Start `1esn`=Node:@usn6(\"d_str\") ,`3esn`=Rel:`5esn`({0}) Union All Load Csv From $`2esn` Starts With {`8esn`} Starts With {usn1} As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct Count(*) Is Not Null,{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Order By {`8esn`}[0X7][$`3esn`] Descending,12.e12[$`4esn`..] Descending,`3esn` In {@usn6} Ascending Skip 01234567 =~0x0 =~9e12 With  True Is Not Null As @usn5 Order By {`2esn`} In $123456789 In True Ascending,Reduce(#usn7={`1esn`} Starts With `4esn` Starts With {0},`3esn` In 123.654[1e1..][{#usn8}..]|9e12[$`5esn`]) Desc Skip 0Xa In {`7esn`} Limit 9e0 =~0.0 =~$`5esn`"),
    octest_legacy:ct_string("Load Csv From .e12[$#usn8..@usn6] As usn2 Fieldterminator \"d_str\" Union All Foreach(`3esn` In {`5esn`} Contains 123456789 Contains 9e12| With  `7esn` =~.e12 =~$#usn7 As `3esn`,$`8esn` Is Null Is Null As `6esn` Order By False[{`8esn`}] Asc,Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null Asc,{1000}[1000][$usn1] Ascending Skip $#usn8[{12}..]) Union Merge `6esn`=((@usn5 {#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})-[{@usn5:1000 Is Null Is Null}]-(_usn3 :@usn5{`2esn`:@usn5[$12..\"d_str\"]})) On Match Set _usn3 ={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null,Reduce(usn2=.e1[..\"d_str\"],#usn7 In 123.654 Starts With $``|0Xa[$1000..$123456789]).@usn6 ={`2esn`}[Count(*)],`2esn`+=[{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] On Match Set `` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Merge ((usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) On Create Set @usn6+={`3esn`} =~$7,{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}._usn3 ={`5esn`} Ends With \"d_str\" With  *,$usn1 In 01234567 In .e1 Order By Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] Descending,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,{7}[$7..] Desc Skip \"d_str\"[{999}..] Limit @usn5[$12..\"d_str\"]"),
    octest_legacy:ct_string("Create Unique ``=Allshortestpaths((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[?:`6esn` *01..07]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[:`1esn`|:`3esn` *1000]-($12)),`7esn`=({#usn7:#usn8 =~{999}}) Union Create Unique (((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[ *0xabc..7]-(`` :`6esn`:`8esn`))),`2esn`=((`4esn` :`2esn`)) Union Foreach(usn2 In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| Start #usn8=Relationship:usn1({7}) ,`5esn`=Relationship:_usn4(usn1={_usn4})Where .e12 Ends With 1000 Ends With 010) Remove (#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})-[`3esn`:`6esn`{`3esn`}]-(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6).@usn6"),
    octest_legacy:ct_string("Delete $@usn5[..usn2][..$#usn7],`3esn` In {@usn6},0[{@usn5}..][7..] Union All Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12].`2esn`,[usn1 Contains $7 Contains $``,$@usn5 In 's_str' In $12,$`1esn` Is Not Null Is Not Null].usn2!,All(`1esn` In `3esn`[07..] Where 999 Starts With 's_str').#usn8! Remove Extract(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..]|0Xa Contains {`7esn`} Contains $999).`5esn`!,All(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12}).`2esn`,Reduce(`3esn`={7} Starts With $usn1 Starts With 1.0,_usn3 In True[7][$999]|123.654[{@usn5}..123.654][1.0..$12]).#usn8 Foreach(`` In {123456789} =~01234567 =~`3esn`| With  (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Order By `1esn`[..00][..{7}] Ascending,`6esn` In Null Descending,{`3esn`} Is Null Descending Skip Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} Where $``[..1.e1][..12] Start @usn5=Node:``(#usn7=\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str')Where $``[..1.e1][..12]) Union All Unwind Filter(#usn7 In 0Xa[@usn5][{`7esn`}] Where {1000}[\"d_str\"..{@usn5}][$1000..$#usn8]) Starts With All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Starts With [#usn7 Contains {`3esn`} Contains $`6esn`] As #usn8"),
    octest_legacy:ct_string("Create Unique Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) Union All Remove [$12[{7}..0X0123456789ABCDEF]]._usn4?,(usn1 :`2esn`{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})<-[``?:usn2|#usn7 *0x0..]->(@usn6 :usn1:_usn4).`7esn`? Unwind 999 Starts With $123456789 Starts With {``} As `8esn`"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..] As `4esn`  With  (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Order By `1esn`[..00][..{7}] Ascending,`6esn` In Null Descending,{`3esn`} Is Null Descending Skip Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} Where $``[..1.e1][..12] Load Csv From Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..] As `4esn` "),
    octest_legacy:ct_string("Load Csv With Headers From Count ( * )[$1000..] As @usn5  Remove Filter(`` In {`1esn`} Starts With @usn6 Where $`5esn`[`1esn`][0X0123456789ABCDEF]).@usn6?,Single(_usn4 In `2esn` Where ``[00..$7]).``?,Any(`5esn` In $`2esn`[12.e12][$@usn5] Where `6esn`[{`6esn`}..]).`7esn`! Union Create Allshortestpaths(((@usn6 :`2esn`))),#usn7=(($`5esn`))"),
    octest_legacy:ct_string("Create ``=({#usn7:#usn8 =~{999}})-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})"),
    octest_legacy:ct_string("Optional Match `6esn`=(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}),(((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6))) Remove (`2esn` :`2esn`{`5esn`:{1000}[{``}][999],`3esn`:#usn7 =~{`4esn`} =~123456789})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3)-[? *01..07]->(`8esn` :#usn7)._usn3!,Any(@usn5 In Null =~12e12 Where {_usn4} In {1000}).`3esn`,Reduce(_usn3=12.e12[``..usn2][{#usn7}..@usn5],`2esn` In {999} Is Not Null|@usn6[$_usn4]).`6esn` Start ``=Node:`6esn`(usn2={`8esn`}) Where {7} Starts With $usn1 Starts With 1.0 Union All Remove {`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}.`1esn`,[0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0],Count(*) Starts With $usn1 Starts With {usn2}].`2esn`?,Reduce(`5esn`=$_usn4[{``}..][1e1..],usn1 In 12.e12 In {0} In 9e1|{`1esn`} Starts With @usn6).#usn8? Optional Match (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Using Scan `3esn`:`3esn` Start `6esn`=Node:@usn5({`3esn`}) ,`4esn`=Node:#usn7({``}) Union Unwind #usn7[9e0] As ``"),
    octest_legacy:ct_string("Create Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) Union Start usn2=Relationship:`5esn`(#usn7=\"d_str\") ,`8esn`=Rel( {`7esn`})Where $@usn5 In $usn2 In {1000} Create Unique #usn7=Allshortestpaths(((:`6esn`:`8esn`))),usn1=Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Merge Shortestpath(((({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`)<-[@usn5:_usn4|:usn1*]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF})))) On Create Set `6esn`({`6esn`}[..{`2esn`}]).`7esn` =`4esn` Is Not Null Is Not Null,`6esn` ={_usn3}[usn1][0],Single(`2esn` In {999} Is Not Null Where $7[{`1esn`}]).usn2? ={@usn6}[0Xa..$@usn6][0..`5esn`]"),
    octest_legacy:ct_string("Unwind Count(*)[..``][..#usn8] As #usn7 Union Return Distinct *,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7,.e1 Ends With 0Xa Ends With 00 As _usn3 Order By usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) Ascending,.e1 =~$`5esn` Desc,Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null Ascending Limit 12 Starts With 7 Starts With $`5esn` With  *,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..] As `3esn`,123456789[12..$`4esn`] As `7esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Unwind 0x0[{7}..] As #usn7 Union Start usn1=Relationship:`8esn`(`8esn`={12}) Where {@usn5}[..#usn7]"),
    octest_legacy:ct_string("Foreach(@usn5 In {1000}[7..$usn2]| Create ``=(({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[ *0xabc..7]->(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]}))) Start `4esn`=Node:``(\"d_str\") Where True =~_usn3 =~123456789 Foreach(`` In [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]]| Optional Match ``=Allshortestpaths((((:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(usn2 :`4esn`:@usn6)-[`8esn`?:``]->(`` {`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]})))) Where `6esn`[..{999}] With  12.0[010],{@usn5} Is Null Order By `3esn`[$@usn5..@usn5][9e1..$``] Desc,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] Descending,.e1 =~$`5esn` Desc Skip Count ( * ) Contains 12 Limit Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1))"),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv From 1e1 Starts With 9e1 Starts With {`4esn`} As `2esn`  Match ``=Shortestpath((`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00})) Using Scan `1esn`:`7esn` Using Join On `7esn`"),
    octest_legacy:ct_string("Match `8esn`=Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) Using Scan `3esn`:#usn8 Using Join On _usn3 Create _usn4=((`8esn` :`5esn`:@usn5)-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Union Foreach(usn1 In $`6esn`[`8esn`][$`5esn`]| Start `6esn`=Relationship:`4esn`(\"d_str\") ,`3esn`=Relationship:`2esn`(#usn7={usn1})Where @usn5 Is Not Null Is Not Null Match (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Using Scan `2esn`:#usn7 Where {#usn8} =~{999} =~{#usn7}) Union All Detach Delete {12}[00..{@usn6}][1.e1..0],`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null] Start ``=Node:`6esn`('s_str') Where #usn7 Ends With $#usn7 Ends With {`8esn`}"),
    octest_legacy:ct_string("Remove Allshortestpaths(((_usn3 :#usn8{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]}))).`8esn`! Remove Shortestpath((({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))).#usn8!,({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`5esn`?,[{`6esn`}[..{`2esn`}],$`8esn`[..$999][..0],`3esn` Is Not Null Is Not Null].`1esn`? Return Distinct *,010 Is Not Null Is Not Null As #usn7,123456789[12..$`4esn`] As `7esn` Order By $_usn3[..$`2esn`][..\"d_str\"] Desc Limit `` Is Null Is Null"),
    octest_legacy:ct_string("Unwind `4esn`[usn1] As _usn4 Union All Foreach(`4esn` In 0.e0[12.e12]| Optional Match `5esn`=((`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(:`7esn`{``:.e1 Contains $`3esn`})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)) Remove [`1esn` Is Null Is Null,$`3esn` Contains 0 Contains 07,0 Contains $usn2 Contains 12e12].@usn6!,(usn1 :usn2:`2esn`{`1esn`:{123456789}[12..][$12..]})<-[@usn6?:`7esn`]->(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:``{`2esn`:Null In .e0,usn1:01234567[..9e1]}).#usn8,None(#usn7 In 123.654 Starts With $`` Where .e1[@usn5]['s_str']).#usn8) Start @usn6=Rel:`2esn`(`5esn`='s_str') ,usn1=Rel(*)Where {#usn7} Contains @usn5 Contains Count ( * ) Foreach(`7esn` In $`2esn`[{usn2}]| Create Unique Allshortestpaths((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12})),`1esn`=Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}))) Union With Distinct usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) As usn1,$999 Contains {7},\"d_str\"[..0.e0] As #usn8 Order By None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) Is Null Is Null Descending Skip Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4])[Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End] Limit [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null Where $0[$1000..00][{0}..{usn1}] Merge `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))) On Match Set `6esn`+={`8esn`}[Null..][{`8esn`}..],_usn4+={#usn8} =~{999} =~{#usn7} On Match Set usn1 =[usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] Remove {_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}.#usn7!,Extract(_usn3 In {@usn5}[..#usn7]).`4esn`?"),
    octest_legacy:ct_string("With  *,#usn7[..12e12] Order By Count(*) Ends With 123.654 Ends With $12 Asc Limit {usn2}[$`4esn`] Where {`6esn`} Contains 07 Merge Shortestpath((((#usn8 :@usn6)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})-[:`3esn`|:@usn5]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})))) On Create Set Reduce(#usn7=`4esn`[usn1],usn1 In 12.e12 In {0} In 9e1|2.12 =~0x0 =~_usn4).``! =False[`4esn`..Count(*)] On Match Set `4esn`+=12.e12[..1e1] Create Unique ((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})),``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) Union All Remove Single(usn1 In 12.e12 In {0} In 9e1 Where `7esn` Contains {@usn5} Contains $123456789)._usn4?,(_usn4 :_usn4)-[``?:#usn7|`2esn`{`5esn`:123456789 Starts With {@usn6} Starts With $12}]->(`7esn` {@usn6:{_usn4} Is Null})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}).`4esn`? Create `1esn`=((`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})),`5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]})"),
    octest_legacy:ct_string("Create usn1=((:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})<-[`5esn`:usn2|#usn7 *999]-(:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(`1esn` :@usn6)),Allshortestpaths(((_usn4 :@usn6)-[`5esn`?:@usn5|:`7esn`]-(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})))"),
    octest_legacy:ct_string("Start #usn7=Node:``(_usn3={0}) ,`8esn`=Node:`4esn`(\"d_str\")Where 9e0 In usn1 Load Csv From `3esn`[_usn4..{0}][`5esn`..usn2] As usn1 Fieldterminator 's_str' Union Load Csv With Headers From Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} As _usn3 Fieldterminator \"d_str\" Unwind {123456789}[..'s_str'][..$@usn6] As `8esn` Detach Delete $1000 Is Not Null Is Not Null,$`7esn` Is Null Is Null,_usn4 Is Not Null Is Not Null Union All With Distinct *,9e1[9e1...e0] Order By 1e1[{_usn4}..123.654] Ascending,00[..$123456789][..$`5esn`] Asc Skip 7[1e1..#usn7] Limit [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] Unwind $123456789 Starts With .e12 As _usn3"),
    octest_legacy:ct_string("Remove All(`1esn` In $12 Is Not Null Where {usn1} In Count ( * )).usn1,Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where _usn3[\"d_str\"]|$_usn4 Is Not Null Is Not Null).`1esn`? Start `7esn`=Node:usn1(@usn5={12}) ,usn1=Node:_usn3(_usn3='s_str')Where _usn4 In $usn1 Union Foreach(`6esn` In .e12[$7..][{`6esn`}..]| Create (`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})) Remove Filter(`1esn` In `3esn`[07..] Where 9e12 Is Not Null).@usn5! Union All Unwind 9e0[#usn8] As `2esn`"),
    octest_legacy:ct_string("Foreach(`4esn` In [00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])]| Unwind 0Xa[.._usn3][..$`6esn`] As `4esn` Load Csv With Headers From Any(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12})[Reduce(#usn7={_usn3}[`3esn`..$#usn8],`3esn` In 123.654[1e1..][{#usn8}..]|{999} Starts With {_usn4} Starts With 00)..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000])][All(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])..[$_usn3 Is Null Is Null,`5esn` Is Null Is Null,7 Is Null Is Null]] As `2esn` ) Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),Allshortestpaths((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[#usn8? *..01234567]-($_usn3))"),
    octest_legacy:ct_string("Using Periodic Commit 123456789 Load Csv With Headers From $usn1 =~010 =~07 As _usn4  Create usn1=(({`7esn`:123456789[0..]})),`4esn`=Shortestpath((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))"),
    octest_legacy:ct_string("With Distinct *,Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}) As `8esn` Skip {`5esn`} Contains 's_str' Contains 9e1 Limit Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(:#usn8)<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})))[False..][({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null})..] Union Remove @usn5:``,Reduce(`8esn`=0.12 Contains 12.0,`8esn` In $12[{7}..0X0123456789ABCDEF]|`8esn`[..`4esn`][..$usn1]).`8esn`? With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $123456789[..$7][..$`6esn`] Load Csv From {_usn3}[`3esn`..$#usn8] As `4esn` Fieldterminator 's_str' Union All Foreach(`` In `6esn` Starts With 123.654| Create Unique `1esn`=(({`3esn`:@usn5[12.0][{1000}]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Unwind Reduce(@usn6=12 Is Not Null,`` In {usn1} Ends With {`6esn`} Ends With 123456789|.e1 Ends With {7} Ends With $usn1)[Case {12} Contains `7esn` Contains $_usn3 When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then Count ( * ) Starts With 010 Starts With 0x0 When $7 Ends With 0X7 Then {#usn8}[2.12] Else $7 In 1.0 In 1e1 End..][_usn4(Distinct 0.12 Ends With {1000} Ends With `6esn`,$_usn3 =~{_usn4} =~$`6esn`)..] As _usn3) Create (`4esn` :`4esn`:@usn6)"),
    octest_legacy:ct_string("Remove [`6esn` In 00 Where 0.12[..$`6esn`][..$1000]|Null =~12e12]._usn4?,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|0.0[..{999}][..0.0]].`7esn`!,Shortestpath(({`6esn`:$``['s_str'..][0x0..]})).`8esn` Unwind @usn6[Count ( * )][True] As usn2 Unwind 0x0[{7}..] As `3esn` Union All Optional Match @usn6=Shortestpath(((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))),(`2esn` :`5esn`:@usn5{_usn4:{`2esn`} Is Not Null Is Not Null,usn2:{`4esn`} In _usn4})<-[#usn7?:#usn8|`2esn`]->(#usn7 {usn1:$#usn7 =~{12} =~False,#usn7:0x0 =~123.654 =~{999}})-[`8esn`?]->(`3esn` :`6esn`:`8esn`) Using Scan `3esn`:#usn8 Using Join On `1esn`,`7esn`,usn2 Where {``} Is Null Is Null Merge `6esn`=(`3esn` :#usn7)-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Union All Return *,Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Skip 0e0[..$@usn5][..$`8esn`] Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])] Start `8esn`=Relationship:`4esn`(``='s_str') ,`8esn`=Rel( {`7esn`})"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv With Headers From Reduce(``={usn2} =~@usn6 =~{`4esn`},`` In {`1esn`} Starts With @usn6|0[{@usn5}..][7..]) Contains [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]] Contains [$999 Is Null,{``}[010]] As `4esn` Fieldterminator 's_str' Detach Delete 123.654[{`7esn`}][{7}],Count ( * ) Starts With 010 Starts With 0x0"),
    octest_legacy:ct_string("Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),Allshortestpaths((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[#usn8? *..01234567]-($_usn3)) Remove [@usn5 In Null =~12e12 Where _usn4 In $usn1].`6esn`?,Reduce(`4esn`=`3esn`[..{_usn4}][..{@usn5}],`2esn` In {999} Is Not Null|123456789 Starts With {@usn6} Starts With $12).usn2,Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3).`3esn` Union All Merge _usn4=(`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00}) Foreach(`1esn` In Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']) In [$`2esn`[$usn2..][{``}..],0.e0 Ends With False] In (:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})-[`2esn`?$_usn4]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})| Detach Delete 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,#usn8[1.0..] Delete $#usn7[`2esn`][010],{`7esn`} Is Not Null Is Not Null) Union All Foreach(`5esn` In $_usn4 Is Null Is Null| Create _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})),`5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))) Remove (`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]}).`1esn`?,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000].usn1?,{`4esn`:0.12 In 0X7}._usn4!) Remove Shortestpath(((@usn6 :`4esn`:@usn6{#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}))).#usn7!,Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``!"),
    octest_legacy:ct_string("Delete Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null) Ends With Single(usn1 In 12.e12 In {0} In 9e1 Where 07 =~@usn5) Ends With [`` In {`1esn`} Starts With @usn6 Where {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]|$`` In 0 In {1000}] Union Unwind $_usn4[$`4esn`..$12] As `3esn` Load Csv With Headers From #usn8 In `8esn` In 07 As #usn7 Fieldterminator \"d_str\" Create @usn5=Allshortestpaths((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),(((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})))"),
    octest_legacy:ct_string("Foreach(_usn3 In 1000 Is Null| Start @usn6=Rel:`2esn`(`5esn`='s_str') ,`1esn`=Node(00)Where $usn2 =~\"d_str\" =~_usn3 Create `7esn`=Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})),_usn3=Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]}))) Start `5esn`=Relationship:`4esn`(#usn8=\"d_str\") ,#usn8=Node:``(#usn7=\"d_str\")"),
    octest_legacy:ct_string("Merge Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Union All Remove Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})).`4esn`,Reduce(#usn7={_usn4}[{``}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`6esn`} Ends With 0e0 Ends With {``}).#usn7! Union All With Distinct 0Xa Contains #usn8 Contains 1000 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Skip ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]] Remove None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]).`2esn`,{`5esn`:usn2 =~0X7 =~{#usn7}}.`3esn`? Return *,All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Skip [`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]]"),
    octest_legacy:ct_string("Detach Delete $@usn6 Contains $`7esn` Contains 1e1 Merge _usn3=Shortestpath((((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))) On Match Set #usn8 =$`1esn` =~$`1esn` =~{`6esn`},`2esn` =@usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2),`6esn` =`6esn` In Null On Create Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] With  0X0123456789ABCDEF[0X7..] As `4esn`,7 Contains 9e0 As `4esn`,0x0 Ends With {``} As `7esn` Where 1.e1[0X0123456789ABCDEF..] Union Detach Delete \"d_str\" Starts With $`8esn` Starts With {usn1},12.e12[2.12..][0xabc..],(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Merge ((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})) On Create Set `4esn` ={999} Ends With {`5esn`} Ends With {0} Start `6esn`=Node:_usn4('s_str') ,#usn8=Node:`2esn`({_usn3}) Union All Remove Single(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn4} In {1000}).usn1 Remove Filter(`6esn` In 00 Where 0.12[..$`6esn`][..$1000]).#usn8!,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6?"),
    octest_legacy:ct_string("Start _usn4=Node:`6esn`({`1esn`}) ,`3esn`=Rel:#usn8(\"d_str\")Where 12 Starts With 7 Starts With $`5esn` Foreach(`` In {12} =~0.e0 =~{_usn3}| Detach Delete 12.e12 In {0} In 9e1,$``[01],0.0 In `6esn` In $@usn5 Create Unique #usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}),`6esn`=(({@usn6:Null =~12e12}))) With  *,2.12[`8esn`][1e1],$usn1 Starts With {_usn3} As _usn4 Limit {`2esn`} In 0Xa In {_usn3} Union Remove (#usn8 :_usn3)<-[?:usn2|#usn7]->(#usn8 :#usn7)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`).`2esn`,{@usn6:12 Starts With {_usn4} Starts With $#usn8,`2esn`:{@usn6}[$`7esn`..][False..]}.`1esn` Create Unique (((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})-[]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})<-[@usn6?]->(`8esn` :``))),usn2=Allshortestpaths(((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})))) Detach Delete {`5esn`} Starts With 12.0,1000 Starts With `7esn`,$usn1 In 01234567 In .e1 Union Create Unique `8esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00}))"),
    octest_legacy:ct_string("Remove ({#usn8:0Xa Contains Count ( * ),`8esn`:Null Is Null Is Null})<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})-[`5esn` *0x0..]->(usn1 :usn1:_usn4)._usn3! Start `4esn`=Node:`1esn`(#usn7=\"d_str\") Where $0[$1000..00][{0}..{usn1}] Union All With  `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By \"d_str\"[Count ( * )..`6esn`] Desc Skip 9e1 Ends With $@usn5 Ends With $123456789 Limit $`8esn`[0e0..] Where {999} Starts With {_usn4} Starts With 00 Create Unique `2esn`=Shortestpath((:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]})) Foreach(`` In {`7esn`}[0X7..][0x0..]| Load Csv With Headers From 12.e12[`7esn`] As `1esn`  With  `7esn`[{usn1}][999] As `7esn`,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Order By @usn5 =~$`3esn` =~0X7 Descending Skip {usn1}[01..7][{`3esn`}..`6esn`]) Union All Match `6esn`=(`4esn` {`2esn`:@usn5[$12..\"d_str\"]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000}),``=Shortestpath((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[#usn8?:#usn8|`2esn` *0X7..0Xa{usn2:{1000},`6esn`:#usn8[`7esn`..]}]->(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})) Using Scan `1esn`:`7esn` Using Join On #usn8,#usn8 Where 's_str' Starts With 12e12 Starts With $_usn4 Foreach(#usn8 In {1000}| Create Unique _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})))"),
    octest_legacy:ct_string("Unwind _usn4 =~0e0 As `` Detach Delete ({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})[(`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(usn2 )],{123456789} =~usn1 =~{usn1}"),
    octest_legacy:ct_string("Load Csv From 010 Ends With 01 Ends With {_usn3} As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete 9e0 Starts With .e0 Starts With \"d_str\",(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) Union All Unwind 0.0 In `6esn` In $@usn5 As `6esn` Union Load Csv From 0.0 In `6esn` In $@usn5 As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete $`3esn`[{``}..],All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null,$@usn5[..usn2][..$#usn7] Union All Delete $`2esn`[{`6esn`}][0.0],Single(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7])[..{@usn5:_usn4[Count(*)],`6esn`:$`3esn` Contains 0 Contains 07}][..Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])],Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Union Unwind 010 Is Not Null Is Not Null As usn1"),
    octest_legacy:ct_string("Detach Delete {`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}[Case When 1.e1[0X0123456789ABCDEF..] Then `6esn`[..{999}] When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} End..Filter(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)],Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As @usn6 Fieldterminator 's_str' Union All Start `3esn`=Node:`4esn`({#usn8}) ,`2esn`=Rel:`4esn`(#usn8='s_str')Where 010 In `1esn` Union Load Csv With Headers From $`8esn`[..0x0][..``] As usn2  Start ``=Relationship( {``}) ,`7esn`=Relationship(07,123456789,123456789)Where 12.e12[{@usn5}..][9e1..] Remove Reduce(@usn6=0.e0[12.e12],_usn4 In `2esn`|True Starts With $`4esn` Starts With 12e12).@usn6?"),
    octest_legacy:ct_string("Load Csv From `4esn` Is Not Null Is Not Null As `7esn` Fieldterminator \"d_str\" Create Unique _usn4=Shortestpath(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Load Csv From `1esn` In 07 As `8esn` "),
    octest_legacy:ct_string("With Distinct *,$`1esn` Ends With {`7esn`} Ends With $_usn3 As `7esn`,{1000} As `` Load Csv With Headers From 01234567[{`7esn`}..] As `7esn` Fieldterminator \"d_str\" Union Optional Match `5esn`=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}) Using Join On `4esn` Using Join On `1esn`,`7esn`,usn2 Where 00 With  `7esn`[{usn1}][999] As `7esn`,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Order By @usn5 =~$`3esn` =~0X7 Descending Skip {usn1}[01..7][{`3esn`}..`6esn`] Start `2esn`=Rel:usn2(`2esn`={`7esn`}) ,`1esn`=Relationship( {@usn6})Where {`7esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove Single(@usn5 In Null =~12e12 Where `7esn`[0..$usn2][{usn2}..0.e0]).`5esn`? Union Foreach(usn2 In Any(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12})[Reduce(#usn7={_usn3}[`3esn`..$#usn8],`3esn` In 123.654[1e1..][{#usn8}..]|{999} Starts With {_usn4} Starts With 00)..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000])][All(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])..[$_usn3 Is Null Is Null,`5esn` Is Null Is Null,7 Is Null Is Null]]| With Distinct {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}[..None(`1esn` In `3esn`[07..] Where 0X0123456789ABCDEF[`5esn`..][$#usn8..])] Skip 0xabc[$999..][{#usn7}..]) Optional Match @usn6=(`2esn` :`3esn`:`6esn`),`8esn`=(@usn6 :`6esn`:`8esn`)<-[_usn4?:`7esn`{``:{_usn3} Contains $`1esn` Contains 12.0}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}) Using Join On _usn4,_usn4,@usn6 Where 0.12 Starts With 9e12 Starts With $`1esn`"),
    octest_legacy:ct_string("Optional Match `7esn`=Shortestpath((((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})))),`6esn`=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))) Where $1000[{`6esn`}..] Unwind $`` Contains 1.e1 As `` With  All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,1000 As `1esn`,12e12[{usn2}..][`8esn`..] Order By Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null) Ascending,[False Contains 0.e0 Contains Count(*)][Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12])..[$_usn4 Is Not Null Is Not Null,`7esn` Is Not Null Is Not Null]] Descending,(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({#usn7:#usn8 =~{999}}) In Shortestpath(((:`1esn`)<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[`7esn`? *123456789..0X7{`6esn`:{0}[..{`7esn`}]}]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))) Desc Where `5esn`[0xabc..]"),
    octest_legacy:ct_string("With  @usn5[$12..\"d_str\"] As @usn6,usn2 In `2esn` In $`7esn`,.e1[0.12] As @usn6 Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Descending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc Skip {#usn8} =~{999} =~{#usn7} Union Remove {@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]}.`6esn`? Detach Delete 0.12 Contains 12.0,{999}[$123456789..][12..] Load Csv From [1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] As `6esn` Fieldterminator \"d_str\" Union All Merge `8esn`=((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *..00{#usn7:`4esn`[usn1]}]-(:@usn5{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})) On Create Set `1esn`+=usn1[0],None(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``).@usn5! =0e0 Contains 9e12,`3esn`(Distinct 0[Count(*)][0e0],#usn8 =~{_usn3} =~``).@usn6 =Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12) Contains {`1esn`:$999 Ends With {0}} Contains (`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00}) With Distinct Count(*) Ends With $`` Ends With {7} As #usn7,$#usn7 =~9e1 =~$_usn4 Order By Case $1000[..12.0][..0e0] When `3esn` Is Not Null Is Not Null Then 12.e12[{7}..7] When Count(*) In {``} Then 12[..$@usn6] End[..All(#usn7 In 0Xa[@usn5][{`7esn`}] Where 1e1[1.e1..][123.654..])][..[0.0 =~12.e12 =~1.0,$`7esn` Is Null Is Null,``[..$#usn7]]] Ascending"),
    octest_legacy:ct_string("Merge _usn3=(@usn6 {``:.e12[\"d_str\"..][.e1..]}) Union Start usn1=Node:_usn3(_usn3='s_str') ,`3esn`=Node:``(_usn3={0}) Optional Match (:``{``:0x0 =~123.654 =~{999}})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}),Allshortestpaths((:@usn6{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]})) Using Scan `6esn`:`` Create Unique Allshortestpaths(((_usn4 :`6esn`:`8esn`$``))),usn2=({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})"),
    octest_legacy:ct_string("Merge ((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[``?:usn2|#usn7 *0x0..]-(@usn5 :usn1:_usn4)-[:`5esn`]->(:@usn6{`2esn`:$999 In 999})) Unwind $`7esn` Is Null Is Null As `1esn` Delete Count(*) Ends With 0x0 Ends With 9e0,{123456789} =~usn1 =~{usn1}"),
    octest_legacy:ct_string("Delete (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Not Null Is Not Null Unwind 0Xa[.._usn3][..$`6esn`] As `4esn`"),
    octest_legacy:ct_string("Detach Delete Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null)[..Reduce(`1esn`=$`3esn` In 9e12 In ``,`2esn` In {999} Is Not Null|$@usn5[..usn2][..$#usn7])],$#usn7[`5esn`] Union Create Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Union All Foreach(`4esn` In [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]]| Create ((:``)-[:``]->({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}}))) Optional Match ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),((`8esn` :`8esn`:@usn5)<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})) Where {`3esn`} Is Null"),
    octest_legacy:ct_string("Load Csv With Headers From ``(999 Starts With 's_str',1e1[1.e1..][123.654..]) =~[$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]] =~[#usn7 In 0Xa[@usn5][{`7esn`}] Where `5esn`[0xabc..]] As @usn5  Union Create Unique ({`4esn`:#usn8 Is Null}) Union All Create `5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Return Distinct ``[$0..][`1esn`..] As `4esn`,Allshortestpaths((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))[..[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8]][..(:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})] Order By {12} Starts With #usn8 Starts With 0e0 Descending,0.0 Is Null Asc Skip All(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]) =~(_usn4 :`7esn`)<-[{`2esn`:1000 Is Null Is Null}]->({`6esn`:7[010][00],#usn8:$usn1 =~010 =~07}) Limit [_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]|0[Count(*)][0e0]] Contains Extract(`` In {`1esn`} Starts With @usn6 Where .e0[..{`5esn`}][..999]|$`3esn`[..$`2esn`][..123.654]) Contains Reduce(`2esn`=$usn1[0X7],@usn5 In Null =~12e12|#usn7 =~{`4esn`} =~123456789)"),
    octest_legacy:ct_string("Remove Shortestpath((({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))).#usn8!,({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`5esn`?,[{`6esn`}[..{`2esn`}],$`8esn`[..$999][..0],`3esn` Is Not Null Is Not Null].`1esn`? Merge `8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})) On Match Set `8esn`+=$`4esn` In Null Start `3esn`=Relationship:#usn8(_usn3={#usn7}) ,`8esn`=Rel( {`3esn`})Where $`2esn` Is Null Is Null Union All Merge @usn6=((_usn4 :#usn8)<-[:#usn8|`2esn` *123456789..0X7{``:$#usn7 =~{12} =~False,`5esn`:{1000} In {123456789}}]->({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})<-[{``:\"d_str\"[{`8esn`}..]}]-(:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`} Union Create Unique `8esn`=Allshortestpaths(((`8esn` :@usn6)))"),
    octest_legacy:ct_string("With Distinct *,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 9e12 Is Not Null) =~Case When False[0Xa..$usn1] Then {123456789}[12..][$12..] Else 0e0 Contains 9e12 End As usn2 Order By $`7esn` Contains {`1esn`} Contains 9e12 Asc,usn1 Is Null Is Null Descending Limit `5esn` Is Not Null Is Not Null Union All Load Csv From .e12[010..$123456789] As _usn4 Fieldterminator \"d_str\" Optional Match (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))),#usn7=(($`5esn`)) Using Scan #usn7:_usn3 Using Index `6esn`:`7esn`(#usn8)"),
    octest_legacy:ct_string("Remove (:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).``? Foreach(`3esn` In 01234567[$7..{12}]| Create Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Return Distinct *,`` Ends With $`4esn` Ends With 0X0123456789ABCDEF As #usn7,False Contains 0.e0 Contains Count(*) Order By Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) Is Null Is Null Desc,[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Ascending Skip $@usn5[`6esn`..] Limit $`4esn`[..7][..{12}]) Delete `2esn`[Null],$7 In #usn8 Union Unwind $``['s_str'..][0x0..] As #usn7 Union All Load Csv From Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] As usn1  Load Csv With Headers From 9e1 =~999 As `7esn` "),
    octest_legacy:ct_string("Foreach(`` In 0X7[0X7..][Count ( * )..]| Unwind [`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)] Starts With (`5esn` :`7esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}) Starts With `6esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],$`7esn` In 12) As @usn5) Delete True[7][$999],Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) With  *,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7 Union All Create Unique `1esn`=Allshortestpaths((((#usn7 :@usn5)<-[`4esn`?*..]-(:`4esn`:@usn6{`3esn`:123456789 Is Not Null Is Not Null})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})))),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Create `2esn`=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})))"),
    octest_legacy:ct_string("Remove None(`5esn` In $`2esn`[12.e12][$@usn5] Where 's_str' Starts With 12e12 Starts With $_usn4).@usn5!,[usn1 In 12.e12 In {0} In 9e1 Where {1000} Ends With {`8esn`}|$_usn3 =~{_usn4} =~$`6esn`]._usn3 Merge `6esn`=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))) On Match Set `4esn`+=Any(`6esn` In Count(*) Ends With $`` Ends With {7} Where 1000 Is Null) Is Not Null Is Not Null,{`6esn`:7 Is Not Null}.`5esn` =$`6esn`[`8esn`][$`5esn`],`2esn`+=Reduce(`3esn`=#usn8 In `8esn` In 07,#usn7 In 123.654 Starts With $``|_usn3[$usn2..0])[..Any(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`])][..[$`1esn`[#usn8][$@usn5],\"d_str\" Ends With False Ends With {@usn6}]] On Match Set `7esn` =$1000[0.12..0.12] Union Start @usn6=Node( {`8esn`}) ,`3esn`=Relationship:@usn6({`2esn`}) Remove {usn2:7 In 1.e1 In $usn1}.`4esn`!,All(_usn4 In 0.0[..{999}][..0.0] Where #usn8 Is Null).`8esn`? Create #usn7=(`4esn` :usn2:`2esn`)"),
    octest_legacy:ct_string("Create Unique (`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`),(((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))) Create Shortestpath(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)),`3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))) Load Csv With Headers From $`2esn`[{usn2}] As #usn8  Union All Start @usn6=Node:`4esn`(``='s_str') Where {`5esn`} Contains 's_str' Contains 9e1 Start `8esn`=Relationship(07,123456789,123456789) ,usn2=Relationship( {123456789})Where $0[$1000..00][{0}..{usn1}] Optional Match _usn3=((:@usn5{`3esn`:@usn5 =~'s_str',`1esn`:$`7esn` Contains {`1esn`} Contains 9e12})),_usn4=(((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) Using Index `3esn`:``(`5esn`) Using Scan usn2:_usn3 Where $12 Is Not Null Union Unwind Reduce(`6esn`=7[$0..][{_usn4}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)[[$#usn7[`5esn`],Count(*) Ends With 123.654 Ends With $12,$#usn7[..@usn6][..$0]]] As `3esn`"),
    octest_legacy:ct_string("Create (((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})-[`4esn`?:``{usn2:12e12 Ends With `4esn` Ends With 123456789}]->(:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))),(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]})))"),
    octest_legacy:ct_string("Load Csv From 9e1 =~`` =~{`7esn`} As @usn6  Union Foreach(_usn4 In `3esn`[_usn4..{0}][`5esn`..usn2]| Optional Match (((`3esn` :@usn5)<-[`7esn`? *0xabc..7]->(:usn2:`2esn`{`5esn`:@usn5 =~'s_str'})-[? *0X0123456789ABCDEF]-(_usn3 :`5esn`:@usn5))) Using Join On @usn5,usn2,_usn3 Using Join On `8esn`,#usn8 Where {_usn3} Contains True Contains 0X7) Remove Single(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])._usn3,Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $``[.e12..]).`6esn` Start `3esn`=Relationship:#usn8(_usn3={#usn7}) Where {999} Is Null Union Merge ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})) Match ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})),(((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Using Index `6esn`:`2esn`(`1esn`) Create Unique ``=Shortestpath(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]})))"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From usn2 =~0X7 =~{#usn7} As ``  Unwind {`1esn`} In 12.e12 In 9e1 As `4esn` Create Unique _usn3=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]})"),
    octest_legacy:ct_string("Unwind `7esn`[0..$usn2][{usn2}..0.e0] As `1esn` Union Unwind All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] As usn1 Create Unique ((:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})<-[`2esn`?:@usn6|`` *..00]->({_usn3})) Merge _usn3=Shortestpath((((#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})-[ *..0{`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}]->(:usn1:_usn4{`4esn`:01234567 In $123456789})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))))"),
    octest_legacy:ct_string("Optional Match @usn6=Allshortestpaths(({`4esn`:#usn8 Is Null})),@usn6=Allshortestpaths(({_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..],`2esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]->({_usn4})) Using Scan `5esn`:#usn8 Merge `4esn`=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})<-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(`` :`7esn`))) On Create Set `1esn`:`` On Create Set usn1+=$999 Is Not Null Is Not Null,Shortestpath(((`4esn` :`2esn`)<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]}))).`3esn`! =@usn5 In 1e1"),
    octest_legacy:ct_string("Load Csv From 999 Starts With 's_str' As _usn4  Optional Match `3esn`=((_usn4 :#usn8{`5esn`})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5)-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]})) Using Scan `3esn`:`3esn` Union All With Distinct {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}[..None(`1esn` In `3esn`[07..] Where 0X0123456789ABCDEF[`5esn`..][$#usn8..])] Skip 0xabc[$999..][{#usn7}..] Optional Match Allshortestpaths((usn2 :`5esn`:@usn5)),Allshortestpaths((((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})))) Load Csv With Headers From 0Xa[$1000..$123456789] As `7esn`  Union Optional Match #usn7=Allshortestpaths(((:`5esn`:@usn5))),@usn5=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where _usn4[Count(*)] Load Csv From {`1esn`} Starts With {`3esn`} As `2esn` Fieldterminator \"d_str\" Remove Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})).`4esn`,Reduce(#usn7={_usn4}[{``}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`6esn`} Ends With 0e0 Ends With {``}).#usn7!"),
    octest_legacy:ct_string("Remove (usn1 :#usn8{``:$7[{`1esn`}]})-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null}).usn1?,[`3esn` =~9e0 =~@usn6].`1esn`,None(`1esn` In $12 Is Not Null Where .e1[@usn5]['s_str']).usn1! Unwind 07[$#usn8] As usn2 Match (_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Using Index @usn6:#usn8(_usn4) Using Index usn1:``(#usn7) Where 0X7[0X7..][Count ( * )..]"),
    octest_legacy:ct_string("Create Unique #usn7=Allshortestpaths(((:`6esn`:`8esn`))),usn1=Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Union Return *,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7,.e1 Ends With 0Xa Ends With 00 As _usn3 Detach Delete Count(*)[010..][#usn7..],usn2[..`1esn`],1.e1 =~$usn2"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1}) Starts With {usn2:{`1esn`} Is Not Null} As _usn4  Merge `2esn`=((({`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})))"),
    octest_legacy:ct_string("Detach Delete $7 In 1.0 In 1e1 Create Unique (#usn7 :#usn8)-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),@usn6=Allshortestpaths(((`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[`6esn`:`8esn`|:_usn4]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}))) Foreach(@usn5 In [_usn3 In {@usn5}[..#usn7] Where 12.e12[{7}..7]][Case $`2esn`[{``}..{1000}][#usn8..`2esn`] When {999} Ends With 123456789 Ends With {@usn5} Then Count(*)[.e12..] When {_usn4}[{``}..] Then 0Xa[.._usn3][..$`6esn`] Else #usn8 In `8esn` In 07 End..][All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0])..]| Remove (:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).``?)"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),`6esn`=(({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})) Using Join On `6esn`,`1esn`,`` Using Index `4esn`:usn2(`4esn`) Where {``} Starts With 123456789 Starts With usn2 Unwind `6esn` Ends With 2.12 Ends With @usn6 As @usn6"),
    octest_legacy:ct_string("With  7[1e1..#usn7] As _usn3 Where 999[12.0..][#usn7..] Union All Create Unique ((@usn5 :`7esn`{#usn8:`8esn` Starts With {123456789},`1esn`:{12} Contains 9e0})<-[`3esn`?{`3esn`:1e1 Contains usn2}]->(:`3esn`:`6esn`)) Optional Match `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})),usn1=(({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[`5esn` *0x0..]->(`8esn` :#usn7)) Using Index `3esn`:#usn8(`2esn`) Where $`2esn` In {123456789}"),
    octest_legacy:ct_string("Create `4esn`=((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})),``=Shortestpath((((`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})))) Union Detach Delete {123456789}[{12}..],9e0 =~0.0 =~$`5esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[`8esn`?]->(:`3esn`:`6esn`))),`3esn`=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`) Start #usn8=Relationship( {`4esn`})  Remove {#usn7:`2esn` Starts With `` Starts With 1e1}.@usn5!,{`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]}.@usn6 Union All Start `8esn`=Relationship:`8esn`({`1esn`}) Where $_usn4 Contains {#usn7} Contains `1esn` Merge ((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[{#usn7:'s_str'[_usn4..0x0]}]-({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]})) On Match Set `6esn`+=`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) In Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`}))) In All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]),All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12],`2esn`+=0.0 In `6esn` In $@usn5 On Match Set Reduce(`8esn`=7 Contains `2esn` Contains $`8esn`,_usn4 In 0.0[..{999}][..0.0]|$@usn5[`1esn`..]).`2esn` =$`5esn`[`4esn`] Foreach(`` In usn1(Distinct {@usn5}[Count(*)..])[[@usn5 In Null =~12e12 Where {`5esn`} Contains 's_str' Contains 9e1|`2esn`]..][{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}..]| Load Csv With Headers From {usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]} Is Null Is Null As usn1  Create Allshortestpaths(({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})))"),
    octest_legacy:ct_string("Optional Match `1esn`=Allshortestpaths(((($_usn3)<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:@usn5{#usn7:{#usn7} In Count ( * ) In $#usn8})-[? *01..07]->(`8esn` :#usn7)))) Using Join On ``,`7esn`,#usn7 Where $`1esn`[$12][Count ( * )] Return Distinct {#usn8}[12.0][$@usn6],$usn2 In 123.654 In .e0,{@usn6}[$`7esn`..][False..] Skip 1000 Is Null Limit $usn1 In 0.12 In $``"),
    octest_legacy:ct_string("Load Csv With Headers From Count(*)[.e12..] As _usn4 Fieldterminator \"d_str\" Union All Create Unique `8esn`=((#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(`` {``:0x0 =~123.654 =~{999}})),(({`1esn`:{123456789}[12..][$12..]})) Create Unique Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) Unwind 01234567[..9e1] As usn2 Union All Match usn1=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),`8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) Using Scan `4esn`:#usn8 Unwind .e0[..{`5esn`}][..999] As `4esn`"),
    octest_legacy:ct_string("Detach Delete ``[..$#usn7],{123456789}[..'s_str'][..$@usn6] Merge @usn6=Allshortestpaths(((`6esn` :_usn3{#usn7:$@usn6[01..@usn5][0x0..`4esn`],_usn4:9e12 =~123456789 =~$999})<-[usn1? *01..07]->({`1esn`:$123456789[..$7][..$`6esn`]}))) On Create Set None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =0X0123456789ABCDEF[$`5esn`..],(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[_usn3?:`1esn`|:`3esn`{`3esn`:$@usn6 Contains $`7esn` Contains 1e1,@usn5:True Starts With $`4esn` Starts With 12e12}]-(`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]})<-[`3esn`?*{#usn8:$`1esn`[..{_usn3}]}]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}).`8esn`? =$12 Is Not Null On Match Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Merge Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Union Match @usn6=((`8esn` :`5esn`:@usn5)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null})),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) Where .e12[$#usn8..@usn6] Start @usn5=Relationship:#usn7({`4esn`}) ,`3esn`=Rel:`8esn`(@usn6='s_str')Where 9e12[$`5esn`]"),
    octest_legacy:ct_string("Merge ((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5)<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})) On Create Set #usn8+=``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` Start #usn7=Node:_usn4(``=\"d_str\") ,`4esn`=Node:_usn3({123456789}) Return *,`2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}],{#usn7} Starts With `3esn` Starts With {``} As `8esn` Order By (`4esn` :`1esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]->(#usn7 )[Single(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)] Ascending,Reduce(@usn6=@usn5[$12..\"d_str\"],`` In {`1esn`} Starts With @usn6|Count ( * ) =~{`5esn`} =~{_usn4}) Starts With None(`1esn` In $12 Is Not Null Where `7esn` Is Not Null Is Not Null) Starts With [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null] Descending Skip ``[$0..][`1esn`..] Union All Unwind 01234567['s_str'] As usn2 Start usn1=Node:`7esn`(`5esn`={usn2}) ,_usn3=Node:`2esn`(#usn7={usn1}) Load Csv With Headers From Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Is Null Is Null As `2esn` Fieldterminator 's_str' Union All Remove `4esn`({`2esn`} Starts With @usn6,{`2esn`}[..{@usn6}][..1.e1]).`3esn`?,{`3esn`:$#usn7 =~{12} =~False,usn2:$@usn6[$`8esn`..][7..]}.@usn5? Remove Case 0x0 =~123.654 =~{999} When $7 Is Null Then {`1esn`} =~{_usn4} When {`3esn`}[{`5esn`}] Then usn1 Contains $7 Contains $`` End.usn2,None(#usn7 In 123.654 Starts With $`` Where $999 In 999).`5esn`!,({_usn4:{usn1} =~123.654 =~\"d_str\"})-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}}).`8esn`?"),
    octest_legacy:ct_string("Unwind [@usn5[..$@usn5][..0Xa],{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`]] In Filter(_usn4 In 0.0[..{999}][..0.0] Where True Starts With $`4esn` Starts With 12e12) As `6esn` Unwind 0X7 Is Null As `2esn` Unwind {`7esn`}[..9e12][..0.0] As #usn7 Union With  *,{999}[9e1] As usn1,{`6esn`} Is Null As `2esn` Skip Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Limit $`3esn` Ends With $999 Ends With 0X0123456789ABCDEF Create (@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}),_usn4=(@usn6 :@usn6{`5esn`:@usn5[$12..\"d_str\"],usn2:1.e1[0X0123456789ABCDEF..]}) Union Merge Allshortestpaths(((`4esn` :`1esn`)-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6})))"),
    octest_legacy:ct_string("Match Allshortestpaths(((_usn4 :@usn6)-[`5esn`?:@usn5|:`7esn`]-(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]}))),Shortestpath(((`` {``:0x0 =~123.654 =~{999}})-[{`2esn`:``[{123456789}..]}]->(#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]}))) Where Count ( * )[Count ( * )][12] Unwind [usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] As `2esn` Detach Delete 0x0 Is Not Null Is Not Null Union Detach Delete `3esn` In {@usn6} Return {usn2:{1000}[{usn1}][Null],_usn4:0[{@usn5}..][7..]}[Shortestpath(((@usn6 {@usn5:0X0123456789ABCDEF[$999..][@usn5..]})))][All(`1esn` In `3esn`[07..] Where 12 Starts With {_usn4} Starts With $#usn8)] As @usn6,{#usn8} Is Null Is Null Limit 0x0 Is Not Null Is Not Null Remove @usn5:``,(`6esn` :_usn3)<-[`1esn`? *0X0123456789ABCDEF{`5esn`:1.e1 Starts With $`2esn` Starts With $0}]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`2esn`"),
    octest_legacy:ct_string("Remove @usn6:@usn6,Allshortestpaths(((($_usn3)<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:@usn5{#usn7:{#usn7} In Count ( * ) In $#usn8})-[? *01..07]->(`8esn` :#usn7)))).#usn8,All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]).#usn8? Create Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})),((@usn6 :`7esn`)<-[``?:`6esn` *07{`5esn`:{12} Contains `7esn` Contains $_usn3,_usn4:$`3esn` In 9e12 In ``}]-({#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]})-[_usn3:#usn7|`2esn`]-(_usn3 :#usn8)) Create ((@usn6 :@usn6)-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})-[{`2esn`:1000 Is Null Is Null}]->(`5esn` :`2esn`{#usn8:True[$`7esn`..{1000}]})) Union Unwind @usn6[Count ( * )][True] As usn2 Detach Delete 9e12 =~123456789 =~$999 Union Start #usn7=Node:`1esn`(\"d_str\") Where $_usn3[010..False] Foreach(#usn7 In {@usn6} Contains 123.654 Contains 01| Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6 Delete Filter(#usn7 In 123.654 Starts With $`` Where Count(*)[010..][#usn7..])[None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0})..])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {7} Starts With $usn1 Starts With 1.0 As `8esn` "),
    octest_legacy:ct_string("Optional Match ((#usn8 :@usn5)<-[_usn3{@usn6:{7} Contains $123456789}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})),`2esn`=Allshortestpaths((usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})) Where #usn8[$0..False][$`1esn`..$#usn7] Start ``=Relationship:#usn7(_usn3=\"d_str\") ,@usn5=Relationship:`8esn`(usn1={1000}) Union Unwind 0e0 Starts With $@usn6 Starts With $`6esn` As _usn4 Union Create @usn6=Allshortestpaths((({#usn7:123456789[0..]}))),((`` :`6esn`:`8esn`)<-[`4esn`?{usn2:{#usn8}[$#usn7..],@usn5:{@usn5}[..@usn6]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})<-[{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]}]-(`` :`4esn`:@usn6{``:.e12 =~$_usn4})) Foreach(#usn7 In $usn1[0X7]| With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $`6esn` Starts With 12.e12 Starts With $#usn7 With Distinct $#usn8 Is Null Is Null,Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))),{7} Is Null As `7esn` Order By [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null Asc,{@usn5} =~_usn4 =~0.12 Desc Limit #usn7 Contains {`3esn`} Contains $`6esn` Where 12e12 Ends With `6esn` Ends With {`3esn`})"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv With Headers From {`2esn`}[@usn5..][{``}..] As usn2  Unwind False Ends With $`` As _usn4"),
    octest_legacy:ct_string("With Distinct *,`6esn` Contains {`1esn`} Contains 9e0,$`1esn` Is Not Null Is Not Null Order By $7 Is Not Null Descending,Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..] Descending Limit 0x0 =~123.654 =~{999} Where 9e0 In usn1 Start @usn5=Node:_usn4(``=\"d_str\") ,@usn5=Node:`7esn`(@usn5=\"d_str\") Unwind Count(*)[..``][..#usn8] As #usn7 Union All Remove {`3esn`:#usn8 In `8esn` In 07}._usn4!,Allshortestpaths(((:`8esn`:@usn5)-[`3esn`?:`8esn`|:_usn4 *07]->(@usn5 {#usn7:$`7esn` In 12}))).`4esn`,Any(`1esn` In `3esn`[07..] Where {#usn7} In Count ( * ) In $#usn8).#usn7? Unwind {12}[$`3esn`] As `6esn` With Distinct 1.e1 =~$`1esn` As `8esn`,0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0] Union All Remove ({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Merge `2esn`=(:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}}) Start `8esn`=Relationship:`4esn`(``='s_str') ,`8esn`=Rel( {`7esn`})"),
    octest_legacy:ct_string("Create `5esn`=((#usn7 :_usn3{`2esn`})<-[@usn6?:`1esn`|:`3esn` *..0Xa{`1esn`:12 Starts With 0x0}]->(#usn7 :_usn3{`2esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),Shortestpath((:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})) Start `8esn`=Rel:`5esn`({0}) ,`8esn`=Node:`7esn`(usn1='s_str')Where {@usn5} =~_usn4 =~0.12"),
    octest_legacy:ct_string("Return @usn5[$12..\"d_str\"] As @usn6,usn2 In `2esn` In $`7esn`,.e1[0.12] As @usn6 Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Descending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc Skip {#usn8} =~{999} =~{#usn7}"),
    octest_legacy:ct_string("Optional Match usn1=((`5esn` :_usn4)),((`4esn` :`8esn`:@usn5)-[`6esn`:usn1{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]-(@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})) Using Index @usn5:usn2(`2esn`) Create Unique #usn7=Allshortestpaths(((`5esn` :`2esn`{#usn8:True[$`7esn`..{1000}]})<-[usn1?:`6esn` *12..{`6esn`:999 Starts With $123456789 Starts With {``}}]->({_usn4}))),((:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) Union All Unwind {#usn7}[{#usn7}..][$`4esn`..] As `5esn` Merge Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}))"),
    octest_legacy:ct_string("Optional Match (((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Using Scan #usn7:usn2 Using Join On `1esn`,#usn8 With  `4esn`[usn1] As @usn5 Skip 1.e1 Is Null Where $@usn6 Contains $`7esn` Contains 1e1 Union All Start _usn4=Node:`7esn`(@usn5={`4esn`}) ,`7esn`=Node:usn2(usn2='s_str') Delete (`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3})[Reduce(usn1=0x0[$`8esn`.._usn3],_usn4 In `2esn`|{123456789} Is Not Null)..Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789])][[_usn4 In `2esn` Where 9e12 Ends With 123456789|07 =~$`8esn` =~9e1]..(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->()],{0}[False..@usn5],_usn4 Is Null Is Null Remove [0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}].`5esn`!,Case `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] When 1.e1[..12.e12][..$usn2] Then $_usn3[{999}] When $7 Is Null Then `1esn` =~1000 =~1000 Else 9e12[$`5esn`] End.`3esn`?,exists(Distinct #usn8 =~{999},$`2esn` Ends With 0.12 Ends With .e1).@usn5?"),
    octest_legacy:ct_string("Unwind 010 Ends With 01 Ends With {_usn3} As #usn7 Detach Delete $@usn5 Is Not Null Is Not Null,{`8esn`}[..$`6esn`][..123.654],Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Foreach(usn1 In {`4esn`}[{`4esn`}..999]| Create (`4esn` :`4esn`:@usn6) With Distinct 0Xa Contains #usn8 Contains 1000 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Skip ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]])"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))),`6esn`=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) Merge ((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5)<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})) On Create Set #usn8+=``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`"),
    octest_legacy:ct_string("Match @usn6=Shortestpath((:``{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})-[?:`4esn`|:#usn7]->(`1esn` :@usn6)<-[`1esn`?]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})),(((`4esn` :usn2:`2esn`)-[`8esn`?:`4esn`|:#usn7]->({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]}))) Using Index usn2:`8esn`(`5esn`) Where _usn4[Count(*)]"),
    octest_legacy:ct_string("Create Unique Shortestpath((`5esn` )<-[`3esn` *..010]-(:@usn5{`2esn`:True[$123456789][`8esn`]})) Merge usn2=Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})) Union Load Csv With Headers From Count ( * )[$12..] As @usn5  Remove All(`1esn` In `3esn`[07..] Where @usn6[{0}..]).``?,(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})<-[`8esn`?:`4esn`|:#usn7]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"}).@usn5!,Reduce(#usn7=$`7esn` Is Null Is Null,`1esn` In `3esn`[07..]|1000 Is Not Null)._usn3! Create `4esn`=Shortestpath((((`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})))),Allshortestpaths((@usn6 :`7esn`{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})-[_usn3?:``]-(@usn5 {_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})) Union Create (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),(((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))) Foreach(`3esn` In {123456789} Is Not Null| With Distinct *,.e0 =~{`8esn`} =~$999 As #usn7,{_usn4:$0[$1000..00][{0}..{usn1}]}[{`2esn`:$``['s_str'..][0x0..]}..] As `1esn` Skip $usn1 =~010 =~07 Where {@usn5} Starts With 1.0 Starts With 00 Remove Shortestpath(((usn2 :_usn3{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000}))).@usn6?) Match Allshortestpaths((#usn8 :`7esn`)) Using Join On usn1 Using Join On `6esn`,_usn4"),
    octest_legacy:ct_string("Foreach(`1esn` In 7 Is Not Null| Create Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))),`8esn`=({`2esn`:{7}[$7..],#usn7:`1esn` In 07})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})) Union Create `8esn`=((#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(`` {``:0x0 =~123.654 =~{999}})),(({`1esn`:{123456789}[12..][$12..]})) Union All Create Unique Shortestpath((`7esn` {@usn6:{_usn4} Is Null})<-[usn2? *0xabc..7{usn1:$123456789 Starts With `5esn`}]->(:`4esn`:@usn6{`1esn`:{12}[00..{@usn6}][1.e1..0],usn1:``[..0X0123456789ABCDEF]})-[`1esn`?:_usn4|:usn1*]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})),((`2esn` :usn1:_usn4)<-[ *0xabc..7]->(:`4esn`:@usn6)) With  *,0X7[0.e0][{`4esn`}],usn1 Contains $7 Contains $`` Limit usn2 In `2esn` In $`7esn` Where {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Unwind {`4esn`} In _usn4 As usn2"),
    octest_legacy:ct_string("Merge (:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0}) On Create Set #usn7+=All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null On Match Set [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12]].#usn8 =Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]),Case When Count ( * ) Starts With 010 Starts With 0x0 Then 9e12[$`5esn`] When {999}[$123456789..][12..] Then {@usn5}[..{12}][..0x0] End.`8esn`? =$`6esn`[{`3esn`}..12],`6esn` =9e0 Contains @usn6 Contains {#usn7} Return Distinct 9e1[$`2esn`..][`1esn`..] Limit Any(`6esn` In Count(*) Ends With $`` Ends With {7} Where 1000 Is Null) Is Not Null Is Not Null Union All Create @usn5=Allshortestpaths(((#usn7 :`2esn`)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]})-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}))) Remove [`` In {`1esn`} Starts With @usn6 Where 12.e12 In {0} In 9e1].#usn8? Return Distinct Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} As #usn7,0X0123456789ABCDEF Contains {usn1} As @usn5,{999} Starts With {_usn4} Starts With 00 As _usn4 Skip {_usn4}[{``}..]"),
    octest_legacy:ct_string("Create Unique `3esn`=(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}),usn2=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))) Create usn2=((`3esn` :`1esn`)<-[? *0xabc..7]->(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})) Union Unwind 1e1[..`1esn`][..0e0] As _usn4 Remove (`2esn` :@usn6{7})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]}).``!"),
    octest_legacy:ct_string("Foreach(`6esn` In `8esn` Contains 1e1| Detach Delete usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3),Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])) Load Csv From None(`1esn` In $12 Is Not Null Where Null Is Null Is Null) Contains $`6esn` Contains exists(Distinct {`3esn`} Is Null) As `2esn`  Union Foreach(@usn6 In 's_str'[$usn2][Count(*)]| With Distinct {_usn3} Is Not Null As `4esn`,Case 00 Starts With $`6esn` When $@usn5 In 's_str' In $12 Then Count(*)[010..][#usn7..] When Count ( * )[Count ( * )][12] Then True[7][$999] Else `4esn` Contains #usn8 Contains 7 End =~Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}))) As `4esn` Limit Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] Where {123456789} =~01234567 =~`3esn` Create Unique _usn4=Allshortestpaths(((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-(`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null}))),``=Shortestpath((`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00}))) Foreach(@usn5 In 7[010][00]| With  .e0 =~{`8esn`} =~$999 As #usn7,$12 Is Not Null As `7esn`,{``} Is Null Is Null Limit All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1}) Starts With {usn2:{`1esn`} Is Not Null} Delete Case $1000[..12.0][..0e0] When `3esn` Is Not Null Is Not Null Then 12.e12[{7}..7] When Count(*) In {``} Then 12[..$@usn6] End[..All(#usn7 In 0Xa[@usn5][{`7esn`}] Where 1e1[1.e1..][123.654..])][..[0.0 =~12.e12 =~1.0,$`7esn` Is Null Is Null,``[..$#usn7]]],0xabc Contains {1000}) With  0x0[{999}..][{_usn4}..] As `6esn`,{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] As `6esn`,Case When $`6esn` Starts With 12.e12 Starts With $#usn7 Then #usn8[`7esn`..] When {`4esn`}[$123456789..] Then {_usn3} Contains 9e0 Contains $999 End As @usn6 Order By {@usn5} Ascending,Reduce(@usn5=$`8esn`[..$999][..0],`` In {`1esn`} Starts With @usn6|{@usn6} Contains 123.654 Contains 01) Contains [`1esn` In `3esn`[07..] Where {0} =~12.0] Contains (:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null}) Descending,1000 Is Not Null Desc Skip Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Union Foreach(`6esn` In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null| Create Unique @usn6=((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[``?:#usn8|`2esn`]->(:`8esn`:@usn5)<-[#usn7]-(`3esn` :#usn7)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Delete Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null),[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]] Is Not Null,Single(_usn3 In True[7][$999]) Is Not Null Is Not Null) Merge ((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})) On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False On Match Set [`6esn` In 00 Where $`1esn`[$12][Count ( * )]].`5esn`? =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,_usn4 =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]]"),
    octest_legacy:ct_string("Return Distinct $`2esn`[{usn2}],$`5esn`[$#usn7..][0xabc..] Order By [0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Ascending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc,{999} Ends With 123456789 Ends With {@usn5} Descending Limit $usn1 Contains {`8esn`} Contains $123456789 Union Create Unique `8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}))"),
    octest_legacy:ct_string("Foreach(`8esn` In Extract(#usn7 In 123.654 Starts With $`` Where #usn8[`7esn`..]|0.0[..{999}][..0.0])[..Extract(`1esn` In `3esn`[07..] Where 00[07..]|$#usn7 Starts With 9e0 Starts With 2.12)][..None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])]| Unwind `5esn`[..9e0][..01234567] As @usn5 Remove Filter(`6esn` In 00 Where 0.12[..$`6esn`][..$1000]).#usn8!,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6?) Return usn1[0] As ``,9e12 Is Not Null Is Not Null Order By {`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Desc Limit 9e0 In usn1"),
    octest_legacy:ct_string("Unwind {12}[999][{_usn3}] As `3esn` Foreach(`1esn` In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| With Distinct *,0X0123456789ABCDEF Contains {usn1} As @usn5 Order By (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] Descending,`2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] Asc Skip #usn7[00] Limit Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]]) Union All Foreach(`1esn` In Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`)| Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\") Start usn1=Node:`6esn`({`8esn`}) Where $_usn4 Ends With 0.e0 Ends With .e0 Union All With  \"d_str\"[..0.e0] As #usn7,[12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))] As `1esn` Where $999 Ends With {0}"),
    octest_legacy:ct_string("Create Unique usn1=((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})),Allshortestpaths(((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(`4esn` {`2esn`:@usn5[$12..\"d_str\"]}))) Unwind [#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) As `8esn`"),
    octest_legacy:ct_string("Load Csv With Headers From {#usn7}[{#usn7}..][$`4esn`..] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct 1e1[{_usn4}..123.654] Order By Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] Ascending,Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Asc,usn1 Is Null Is Null Descending Start usn2=Node:usn1(`5esn`={_usn4}) ,_usn3=Relationship:``(_usn3={0})Where 1.0[{999}][$999]"),
    octest_legacy:ct_string("Start _usn3=Relationship:``(`1esn`={`2esn`}) Where 0[{usn2}..][usn1..] Return *,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] As `8esn`,12 Starts With 0x0 As `2esn` Order By All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[{#usn7:Count ( * )[$12..]}..][`5esn`(Distinct False Starts With 010)..] Asc,All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] Asc Limit 0Xa[07..] Detach Delete [`8esn` In $12[{7}..0X0123456789ABCDEF] Where {`2esn`}[Count(*)]|0e0 Contains 9e12][None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6])][All(@usn5 In Null =~12e12 Where 0X0123456789ABCDEF[$`5esn`..])],12.e12 In $0 In $0 Union All Load Csv From usn2 =~0X7 =~{#usn7} As ``  Foreach(usn1 In {usn2}[$`4esn`]| Start `3esn`=Relationship:#usn8(_usn3={#usn7}) Where {999} Is Null Create (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` ))) Union All Match Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})),#usn8=Shortestpath((#usn7 :usn1:_usn4{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})) Using Index @usn5:usn2(`6esn`) Where $`8esn` In $`2esn` In {7} Merge Shortestpath((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) On Create Set `6esn`+=$7 In #usn8 On Match Set `2esn`+=$999 =~0 =~{7},@usn5+=0X7[0.e0][{`4esn`}],Extract(`` In {`1esn`} Starts With @usn6 Where {`2esn`}[..{@usn6}][..1.e1]|True =~{`1esn`})._usn4! =All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..]"),
    octest_legacy:ct_string("Merge (((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))) On Create Set _usn3 =Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)..Shortestpath(((_usn3 {@usn5:.e12 =~.e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))][Shortestpath(((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})))..Reduce(usn2=Null In .e0,_usn3 In {`2esn`} Ends With {12} Ends With 7|{0}[..{`7esn`}])] On Create Set _usn4+={`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]],`6esn`+=[usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] Return *,`7esn` Is Not Null Is Not Null As @usn5,`1esn`[Null..] As `2esn` Order By Extract(_usn4 In `2esn` Where $999 Is Null) In Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End In Any(`6esn` In 00 Where `5esn`[..9e0][..01234567]) Asc Limit `6esn`[{`6esn`}..] Foreach(#usn8 In {123456789}[12..][$12..]| Remove Case When $`3esn` In 9e12 In `` Then 9e0[#usn8] When {999} Starts With {12} Then 7 Is Null Is Null End._usn4!,{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}.#usn8 Remove {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]}.`2esn`!) Union All With Distinct 1.e1 =~9e12 =~`4esn` As `7esn`,0 Contains $usn2 Contains 12e12 Order By {@usn6} Is Not Null Asc Where $123456789 Starts With .e12 Detach Delete Single(_usn3 In True[7][$999]) Is Not Null Is Not Null,{`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] Union All Unwind @usn5[12.0][{1000}] As `8esn`"),
    octest_legacy:ct_string("Return $7 Ends With $`8esn` As `4esn` Order By {#usn8}[usn2][{0}] Ascending,00 Contains #usn8 Desc Skip 1e1 Is Not Null Is Not Null Start #usn8=Relationship:usn1({7}) ,`2esn`=Node(123456789,01234567,01234567)Where $12 Is Not Null Foreach(`` In True Is Not Null Is Not Null| Create Unique ((`4esn` :`8esn`:@usn5)-[`6esn`:usn1{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]-(@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})) With Distinct Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) As _usn4,7[..$`1esn`][..00],{12} Starts With #usn8 Starts With 0e0 Order By $0 Starts With `2esn` Desc,0.12 In 0X7 Descending,12.e12 In $0 In $0 Desc Limit `6esn` In Null Where False Contains 0.e0 Contains Count(*)) Union All Start `1esn`=Rel:`6esn`(`3esn`={12}) Where $`5esn`[$#usn7..][0xabc..] Create Unique usn2=(`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}}),(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})"),
    octest_legacy:ct_string("Create ((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )),#usn7=((`4esn` :`1esn`)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})) Create Unique `3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))) Create (#usn7 :#usn8)-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),`3esn`=Shortestpath(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[:#usn7|`2esn`]-(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))) Union All Merge `5esn`=({_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})"),
    octest_legacy:ct_string("Using Periodic Commit 01234567 Load Csv From 0.0 Is Not Null As `5esn`  Foreach(_usn4 In 12e12 Ends With `4esn` Ends With 123456789| Create `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4),`5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Return *,Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Skip 0e0[..$@usn5][..$`8esn`] Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])]) Return *,$1000[..{`7esn`}][..#usn7] Order By 7[010][00] Descending Skip {`5esn`} Starts With 12.0"),
    octest_legacy:ct_string("Unwind {usn2}[`6esn`..01234567] As _usn3 Optional Match `6esn`=(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}),(((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)))"),
    octest_legacy:ct_string("Optional Match @usn6=Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))) Using Join On @usn5,usn2,_usn3 Foreach(usn1 In {`3esn`} Starts With $`8esn` Starts With 1e1| Start `7esn`=Node:`2esn`(#usn7={usn1}) Where $#usn7 Ends With 0.12 Ends With {@usn6})"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From ``[{123456789}..] As `3esn` "),
    octest_legacy:ct_string("Create `5esn`=Shortestpath(((:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}}))),`2esn`=(`` :`7esn`) Start `4esn`=Relationship:`1esn`({@usn5})  Create (`4esn` :#usn7)<-[@usn6?:usn2|#usn7]->(`1esn` )-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}),_usn4=Allshortestpaths((_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})) Union With Distinct .e1 Contains $`3esn` As #usn7 Order By Extract(_usn3 In True[7][$999] Where $`3esn`[{``}..]) Is Not Null Is Not Null Desc,`6esn`[{`6esn`}..] Descending,123456789 Starts With {@usn6} Starts With $12 Asc Where Count ( * )[$12..]"),
    octest_legacy:ct_string("Create Unique usn2=Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})),`7esn`=Shortestpath((@usn5 {#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Union Merge #usn8=Allshortestpaths(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)) On Create Set `6esn`+=$7 In #usn8 Union Merge ((`8esn` :`2esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[@usn6?]-({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})) On Match Set `3esn`(\"d_str\"[..0.e0]).`8esn` =[1e1[{_usn4}..123.654]] In Reduce(`5esn`=9e1 Ends With Count(*) Ends With False,`1esn` In $12 Is Not Null|123.654[{`7esn`}][{7}]) In [usn2[True],{`3esn`}[{`5esn`}]] On Match Set `1esn`+=`2esn` Starts With `` Starts With 1e1,Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End.`3esn` =$0 Ends With False Ends With $_usn4 Match Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})),#usn8=Shortestpath((#usn7 :usn1:_usn4{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})) Using Index @usn5:usn2(`6esn`) Where $`8esn` In $`2esn` In {7} Create Unique `6esn`=((`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`5esn`:`5esn`]-(:usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07}))"),
    octest_legacy:ct_string("With Distinct *,$123456789[..$7][..$`6esn`],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}) Skip Count(*)[..``][..#usn8] Limit 9e12[{123456789}..][$`2esn`..] Where 0X0123456789ABCDEF[$999..][@usn5..] Union All Merge `3esn`=Allshortestpaths((:@usn6{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]})) On Match Set `2esn`+=0X0123456789ABCDEF[{@usn5}..1.e1][$_usn3..{7}],`2esn` =True[7][$999],_usn3+=$usn2 Starts With $`5esn` On Match Set Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where Count(*) In 0e0 In 9e1).usn1? =[`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]] Optional Match #usn7=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where #usn7 Starts With 1000 Starts With .e1 Union All Start _usn4=Node:#usn8(#usn7='s_str') ,@usn5=Node:_usn4(``=\"d_str\")"),
    octest_legacy:ct_string("Detach Delete 123456789 Is Not Null Is Not Null,{@usn6} Starts With @usn5 Starts With @usn6,.e1[..\"d_str\"] Return $7 Ends With $`8esn` As `4esn` Skip {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) Detach Delete {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])] Union All Match #usn8=(((#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})-[ *..0{`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}]->(:usn1:_usn4{`4esn`:01234567 In $123456789})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Using Index usn2:@usn6(`2esn`) Using Index @usn6:#usn8(`8esn`) Where 12e12 Create Unique @usn5=(`6esn` :`8esn`:@usn5),usn1=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)) Foreach(_usn4 In $`8esn` Starts With 0xabc Starts With {usn2}| Optional Match usn1=((`5esn` :_usn4)),((`4esn` :`8esn`:@usn5)-[`6esn`:usn1{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]-(@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})) Using Index @usn5:usn2(`2esn`) Return *,{7}[$123456789..{1000}][$`3esn`..`7esn`] Limit $123456789[..$7][..$`6esn`])"),
    octest_legacy:ct_string("With  $12 Is Not Null As `6esn`,(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Not Null Is Not Null As `2esn`,$`4esn` In Null Order By 2.12[`8esn`][1e1] Descending Skip $1000 Is Null Is Null Optional Match `8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan `4esn`:_usn4"),
    octest_legacy:ct_string("With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Skip Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) Limit 0.e0 Ends With False Where Null[{_usn4}..] Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Delete `` =~`6esn` =~usn1 Load Csv With Headers From usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]] As _usn3  Return True Is Null Is Null As `3esn` Order By $`8esn`[0xabc][Null] Desc,`2esn`[usn2..][$7..] Descending Limit .e1[..$`4esn`][..$`6esn`] Union Load Csv From None(`1esn` In $12 Is Not Null Where Null Is Null Is Null) Contains $`6esn` Contains exists(Distinct {`3esn`} Is Null) As `2esn`  Detach Delete 0.12 Ends With {1000} Ends With `6esn`,$@usn5[usn2..][$0..] Union Create usn1=Allshortestpaths(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]}))) Unwind #usn7 Starts With $999 As #usn7"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) On Create Set `5esn`+={usn1}[$`8esn`..0.0],`2esn`+={`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] On Create Set `7esn` =[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999),Reduce(#usn7=_usn3 Contains .e0 Contains {usn2},_usn4 In `2esn`|{@usn6} In {#usn7} In 12.e12).@usn6 =Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})],Extract(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]|`1esn`[Null..]).`4esn`? =0Xa Is Not Null Is Not Null Union All Load Csv With Headers From Shortestpath((((:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00}))))[`4esn`(999[12.0..][#usn7..],False[999])..00] As `3esn`  Foreach(@usn5 In {1000}[{#usn8}]| Create Unique `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})),Shortestpath((usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) Unwind Case {1000}[{#usn8}] When `7esn` Contains `5esn` Contains 0X7 Then True[..010] When {#usn8} =~{999} =~{#usn7} Then `1esn`[..\"d_str\"][..$`5esn`] Else `6esn`[..{999}] End In Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}]) As `8esn`) Delete {#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null),$`5esn`[`1esn`..$123456789]"),
    octest_legacy:ct_string("Match (#usn7 :#usn8)-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),@usn6=Allshortestpaths(((`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[`6esn`:`8esn`|:_usn4]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}))) Using Index `6esn`:usn2(@usn5)"),
    octest_legacy:ct_string("Load Csv From [False Contains 0.e0 Contains Count(*)][Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12])..[$_usn4 Is Not Null Is Not Null,`7esn` Is Not Null Is Not Null]] As `3esn` Fieldterminator \"d_str\" Union Create `3esn`=Shortestpath((({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))),((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[{#usn7:'s_str'[_usn4..0x0]}]-({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]})) Create Allshortestpaths(((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7))) Union Unwind Shortestpath(({``:False Contains $#usn8 Contains 9e1})<-[`6esn`?:_usn3|`8esn`]->(`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})) Starts With Reduce(_usn4=Count(*) In {``},`` In {usn1} Ends With {`6esn`} Ends With 123456789|9e12 =~123456789 =~$999) Starts With None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}]) As usn2 Detach Delete $_usn3[{#usn8}..`7esn`][0..$0],usn1(Distinct {@usn5}[Count(*)..])[[@usn5 In Null =~12e12 Where {`5esn`} Contains 's_str' Contains 9e1|`2esn`]..][{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}..]"),
    octest_legacy:ct_string("Unwind .e1 Starts With {`1esn`} Starts With $_usn3 As _usn4 Foreach(`` In False[1000][{`7esn`}]| With  *,0x0[$`8esn`.._usn3],True[$123456789][`8esn`] As @usn5 Skip \"d_str\" Contains @usn6 Contains 12.e12 Limit 9e1 =~`` =~{`7esn`} Delete 12e12 Ends With $999 Ends With 1e1,$`3esn`,1000) Union All Create Shortestpath(((`2esn` {_usn4:`4esn`[usn1]})<-[`2esn`?{`3esn`:$7 In 1.0 In 1e1,@usn5:{@usn6} Contains 123.654 Contains 01}]->(@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}}))),`5esn`=(`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[:`3esn`|:@usn5{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}]-($`5esn`)-[? *07{#usn7:`5esn`[..9e0][..01234567]}]-({#usn8:0Xa Contains Count ( * ),`8esn`:Null Is Null Is Null}) Unwind `2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] As _usn3 Remove (`5esn` {@usn5:07 =~$`8esn` =~9e1,#usn7:{`1esn`} Starts With `4esn` Starts With {0}})<-[`2esn`?*]->({#usn7:1e1[1.e1..][123.654..],`3esn`:True Starts With $`4esn` Starts With 12e12}).`1esn` Union Create Unique Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}))"),
    octest_legacy:ct_string("Match usn1=(((:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})<-[:``]-(_usn3 :`7esn`)<-[ *0xabc..7]->({#usn7:123456789[0..]}))),(usn2 :`5esn`:@usn5)-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})"),
    octest_legacy:ct_string("Load Csv From 12e12 Is Not Null Is Not Null As usn1  Merge `4esn`=Shortestpath((`3esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8})) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null Union Unwind False Starts With 010 As #usn8 Return Distinct *,Single(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7])[..{@usn5:_usn4[Count(*)],`6esn`:$`3esn` Contains 0 Contains 07}][..Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])],0e0[$#usn8...e12] Order By {#usn7}[{`4esn`}..][0X7..] Desc,Filter(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]) Ends With Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}]) Ends With {`2esn`:usn1 Is Null Is Null,usn2:0.e0 =~`1esn` =~`6esn`} Desc Skip Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null Union All Remove Reduce(@usn6=_usn4 Is Null,`1esn` In $12 Is Not Null|`5esn`[..9e0][..01234567]).#usn7?,Case {`1esn`} In 12.e12 In 9e1 When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else {1000}[{#usn8}] End.`1esn`!,Reduce(`5esn`=12 Starts With {_usn4} Starts With $#usn8,`1esn` In 0.e0 =~`1esn` =~`6esn`|@usn5[$12..\"d_str\"]).`5esn`! Create Unique ``=(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})<-[:#usn7|`2esn` *1000]->(`5esn` :_usn4)-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`) With  {_usn3}[`3esn`..$#usn8] As `1esn`,12 Starts With 7 Starts With $`5esn`,$#usn7 Contains True Contains _usn4 As `4esn` Skip $@usn6[..123.654]"),
    octest_legacy:ct_string("Merge _usn3=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}) Detach Delete {1000}[01234567..$_usn4][{@usn6}..$_usn3],{usn2} =~`7esn` =~07,count(Distinct 999[12.0..][#usn7..]) =~Allshortestpaths(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) =~@usn6(`8esn` Starts With {123456789},$`` Starts With 12 Starts With $usn2) Unwind {`7esn`}[0X7..][0x0..] As `3esn` Union All Create (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),`7esn`=(({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})) Remove {@usn6:12 Starts With {_usn4} Starts With $#usn8,`2esn`:{@usn6}[$`7esn`..][False..]}.`1esn` Merge `2esn`=((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})) On Create Set _usn4 =Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) In [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 12 Starts With {_usn4} Starts With $#usn8] In Filter(`2esn` In {999} Is Not Null Where $7 Ends With 0X7),#usn8 =0Xa[@usn5][{`7esn`}]"),
    octest_legacy:ct_string("Delete Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12]) Is Null,Count ( * )[9e1..{@usn5}],{`3esn`} Is Not Null Is Not Null Merge Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))) On Match Set Allshortestpaths((:`3esn`:`6esn`{999})).`6esn`! =00[07..],usn2 =usn1 Is Null Is Null,#usn8+=0e0 On Match Set `4esn` =$0[..{usn2}][..$usn1],`5esn`+=Count(*) In 0e0 In 9e1,`8esn` =$123456789[{@usn6}][{999}] Merge (((#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[`2esn`?{`3esn`:$7 In 1.0 In 1e1,@usn5:{@usn6} Contains 123.654 Contains 01}]->(:`1esn`{_usn4:{`6esn`} Ends With 0e0 Ends With {``}})-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null}))) On Match Set Allshortestpaths((((:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[`3esn`?{`3esn`:1e1 Contains usn2}]->(:`3esn`:`6esn`)))).@usn6! =`5esn` Contains {`7esn`} Contains $7 Union All Foreach(#usn7 In Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)]| With  *,1.e1[`4esn`..][$`6esn`..] As @usn5,Count ( * ) =~{`5esn`} =~{_usn4} As _usn3 Where _usn3[\"d_str\"]) Union All Load Csv From `7esn` Contains {@usn5} Contains $123456789 As `6esn`  Return #usn7 Starts With $999 Skip {@usn6}[0Xa..$@usn6][0..`5esn`] Limit {`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}[Reduce(`6esn`=$12 Contains 0Xa,`6esn` In 00|$`4esn`[..'s_str'][..`8esn`])][Shortestpath(((:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})))]"),
    octest_legacy:ct_string("Load Csv With Headers From None(_usn3 In {@usn5}[..#usn7] Where `2esn` Starts With `` Starts With 1e1) Contains Reduce(`1esn`={999} Ends With 123456789 Ends With {@usn5},_usn4 In 0.0[..{999}][..0.0]|$1000 =~{1000} =~`5esn`) Contains `6esn`(Distinct {1000}[{#usn8}],$#usn7[123.654]) As @usn5 Fieldterminator 's_str' Load Csv From 123456789 Starts With {999} As usn2  Union All Merge ``=(`` :``)-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3) Merge (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}) On Match Set `8esn` =[`` In {`1esn`} Starts With @usn6 Where 0Xa[$1000..$123456789]] Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null}) Starts With Allshortestpaths((`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})),[$0[`7esn`],0.12 Contains 12.0,True Is Null Is Null].`3esn`? =`2esn` Ends With $`4esn` Ends With {#usn7}"),
    octest_legacy:ct_string("With  *,{@usn6} Contains 123.654 Contains 01 As `4esn` Skip @usn5[12.0][{1000}] Where @usn6[$usn2..#usn7] Create Unique @usn5=(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})<-[?:`6esn` *01..07]->(:usn2:`2esn`{`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12}) Start #usn8=Rel:usn2(`7esn`={7})  Union Foreach(`` In {999} Ends With {`5esn`} Ends With {0}| Start @usn5=Relationship:usn2({`5esn`}) ,@usn5=Node:@usn5(\"d_str\") Unwind 1.e1 Ends With 0 Ends With $usn1 As `1esn`) Remove {``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}.`7esn`,(:usn2:`2esn`)<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]}).`7esn`!,{`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}.`3esn`? Match Allshortestpaths((:``{``:0x0 =~123.654 =~{999}})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),_usn4=(usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]})"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv With Headers From Count ( * )[$12..] As @usn5 "),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv With Headers From 12.e12[`7esn`] As `1esn`  Load Csv With Headers From $`7esn` Is Null Is Null As usn1 Fieldterminator 's_str' Optional Match (((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})-[]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})<-[@usn6?]->(`8esn` :``))),`4esn`=(:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[`8esn`?:`4esn`|:#usn7{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})"),
    octest_legacy:ct_string("Unwind Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789) Is Not Null As `5esn` Union Foreach(@usn6 In Case $123456789[..$7][..$`6esn`] When 0.e0 Contains #usn7 Then {`6esn`} Contains 07 When {_usn4} In {1000} Then ``[..$#usn7] End[Shortestpath((usn1 :usn1:_usn4))..][Reduce(@usn6={`4esn`} Starts With $7 Starts With $``,`` In {usn1} Ends With {`6esn`} Ends With 123456789|$`6esn` Starts With 12.e12 Starts With $#usn7)..]| Optional Match `5esn`=((`8esn` :@usn6)),`8esn`=Shortestpath(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})) Using Scan @usn6:@usn6) Create `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4) Unwind usn2[999..] As `1esn`"),
    octest_legacy:ct_string("Create Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})<-[*{`8esn`:0Xa[.._usn3][..$`6esn`]}]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})) Union All With  *,$`1esn`[`6esn`..][00..],$1000 =~{1000} =~`5esn` As @usn6 Order By {#usn8}[usn1][1.0] Asc,`7esn`[{usn1}][999] Descending Skip Null In .e0 Where {999} Is Null Foreach(#usn7 In 0Xa Contains #usn8 Contains 1000| Create Unique #usn7=(_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}) Match ``=(({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[ *0xabc..7]->(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})) Using Index `1esn`:`4esn`(`1esn`)) Start _usn3=Relationship:``(_usn3={0})  Union All Load Csv With Headers From {@usn5}[{`5esn`}][$12] As usn1 "),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From {`3esn`}[{123456789}..][{usn1}..] As `6esn`  Start @usn6=Rel:`2esn`(`5esn`='s_str') ,usn1=Rel(*)Where {#usn7} Contains @usn5 Contains Count ( * )"),
    octest_legacy:ct_string("Match Shortestpath(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)),_usn4=Allshortestpaths((@usn6 :`6esn`:`8esn`)<-[_usn4?:`7esn`{``:{_usn3} Contains $`1esn` Contains 12.0}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})) Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)) Merge @usn6=((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})) Union Merge (:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}) Create Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Load Csv From Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) Starts With [{@usn6} Contains 123.654 Contains 01,$`2esn` Starts With {`8esn`} Starts With {usn1}] Starts With All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]) As `5esn` "),
    octest_legacy:ct_string("Remove (`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]}).`1esn`?,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000].usn1?,{`4esn`:0.12 In 0X7}._usn4! Start `4esn`=Node:`1esn`(#usn7=\"d_str\") Where $_usn3 Is Null Is Null Start _usn3=Relationship:`1esn`(\"d_str\") ,`8esn`=Node:`4esn`(\"d_str\") Union With  Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}),@usn6 Contains Null As `2esn`,00 =~0.e0 =~$`8esn` Order By `5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] Ascending,#usn7[9e0] Asc,{`5esn`} Starts With 12.0 Desc Limit {@usn5}[Count(*)..] Create Unique Allshortestpaths((@usn6 :usn1:_usn4)),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Union All Optional Match #usn8=((`7esn` :@usn6)<-[#usn8? *0X7..0Xa$`2esn`]-(:`5esn`:@usn5{usn2:{#usn8}[12.0][$@usn6]})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3)),usn2=(((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})-[?:#usn7|`2esn` *0x0..]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Using Index @usn6:#usn8(`8esn`) Merge (`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]}) Start _usn3=Node( {usn2}) ,@usn5=Node:`6esn`(#usn8={`5esn`})"),
    octest_legacy:ct_string("Detach Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`])[(`3esn` :#usn7{`6esn`:{_usn4} Is Null,usn2:{`2esn`} Starts With @usn6})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)<-[@usn6?:`7esn`]->(:`2esn`{#usn7:#usn8 =~{999}})..Shortestpath((`8esn` {_usn4:{usn1} In Count ( * )})<-[`6esn`?]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})<-[@usn6?:`7esn`]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}))][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12])..[`1esn` In $12 Is Not Null Where {usn1} In Count ( * )|$`3esn`[{``}..]]],\"d_str\" Contains @usn6 Contains 12.e12 With  9e12[{123456789}..][$`2esn`..] As `2esn` Order By {#usn7}[{`4esn`}..][0X7..] Desc Where 1.e1 =~`2esn` Union All Remove None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000).`2esn`? With Distinct {#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null As `8esn`,Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4])[Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End] As `7esn`,{_usn4} In {1000} As `1esn` Order By $@usn5[`1esn`..] Desc Limit #usn8['s_str'..][123.654..] Where 's_str' Starts With 12e12 Starts With $_usn4"),
    octest_legacy:ct_string("Return *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc"),
    octest_legacy:ct_string("Merge `8esn`=Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})) On Create Set `2esn`+=$#usn7[`2esn`][010] On Create Set `1esn`:`` Union Load Csv From #usn8 =~`7esn` As ``  Foreach(`2esn` In None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Ends With Case When 0x0[{999}..][{_usn4}..] Then Count(*)[.e12] When {_usn4}[...e12][..0xabc] Then Count(*) Ends With $`` Ends With {7} Else ``[{#usn8}] End Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 's_str' Starts With 12e12 Starts With $_usn4|True Starts With $`4esn` Starts With 12e12)| Create Unique Shortestpath(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})),`8esn`=((`5esn` )) Load Csv From #usn8 =~`7esn` As `` ) Foreach(`1esn` In All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Contains `4esn`(999 Starts With 's_str') Contains (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})| Create (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})) Detach Delete Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null,``[..0X0123456789ABCDEF],{`1esn`}[$`4esn`..][False..])"),
    octest_legacy:ct_string("Create Unique ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),`5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Union All Match @usn5=(`4esn` :#usn7)<-[@usn6?:usn2|#usn7]->(`1esn` )-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}),(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]->({_usn4})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`) Using Index @usn6:#usn8(_usn4) Using Scan ``:usn2 Where .e12[$#usn8..@usn6] Create `7esn`=Allshortestpaths(((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))),@usn6=((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-(#usn8 {#usn7:$1000 Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("With  Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}),'s_str' Starts With 12e12 Starts With $_usn4 As `4esn` Return *,0.e0 Contains #usn7 Order By {@usn5}[Count(*)..] Asc,9e0[Count ( * )] Descending Skip Case When #usn8 In `8esn` In 07 Then 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF] Else 12.e12[{7}..7] End In Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]})) In Reduce(`3esn`=00 Ends With `8esn`,usn1 In 12.e12 In {0} In 9e1|True Starts With $`4esn` Starts With 12e12) Limit $12 Is Not Null Is Not Null Union Return *,1.e1 =~$`1esn` As `8esn` Order By {usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}[Reduce(`1esn`={usn1} In Count ( * ),`` In {usn1} Ends With {`6esn`} Ends With 123456789|0[{usn2}..][usn1..])][[`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|{``} Starts With 123456789 Starts With usn2]] Ascending,Reduce(usn1=1e1 Contains usn2,`8esn` In $12[{7}..0X0123456789ABCDEF]|#usn7 =~{`4esn`} =~123456789) Contains `3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) Asc,[False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null] Asc Load Csv From (#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start ``=Rel:_usn4({`2esn`}) ,`6esn`=Rel:`2esn`({_usn3})Where @usn5[$12..\"d_str\"] Union Unwind {@usn6} In {#usn7} In 12.e12 As `8esn`"),
    octest_legacy:ct_string("Load Csv From Extract(_usn3 In {@usn5}[..#usn7])[Case $1000[..12.0][..0e0] When `3esn` Is Not Null Is Not Null Then 12.e12[{7}..7] When Count(*) In {``} Then 12[..$@usn6] End..] As #usn7 Fieldterminator \"d_str\" Load Csv With Headers From $`2esn`[{`6esn`}][0.0] As `2esn` Fieldterminator \"d_str\" Optional Match Allshortestpaths((:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})<-[#usn8:_usn3|`8esn`{usn1:{#usn8}[usn1][1.0],@usn6:1.e1 =~$usn2}]->(#usn7 :usn1:_usn4{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})),`8esn`=Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) Union All Remove Reduce(_usn3=12 Starts With 0x0,_usn4 In 0.0[..{999}][..0.0]|$usn1[..'s_str'][..$#usn8]).`6esn`! With Distinct 12 Is Not Null Is Not Null As `2esn`,Case When $`6esn` Starts With 12.e12 Starts With $#usn7 Then #usn8[`7esn`..] When {`4esn`}[$123456789..] Then {_usn3} Contains 9e0 Contains $999 End As @usn6 Order By {`2esn`} In 0Xa In {_usn3} Ascending,All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] Ascending,{usn2}[$`4esn`] Descending Skip 1.e1 Starts With $`2esn` Starts With $0 Limit All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1}) Starts With {usn2:{`1esn`} Is Not Null} Union All Detach Delete {#usn8}[#usn7..{`2esn`}],$usn1 Is Not Null Is Not Null,12e12 Remove usn2(Distinct 1e1[..01],$123456789 Is Not Null)._usn3?"),
    octest_legacy:ct_string("Create Unique (:``) Start ``=Node:_usn3('s_str')  With Distinct 0e0[..1000] As #usn7,#usn8 Is Not Null As usn2 Order By 0.0[9e1..][Null..] Ascending,123.654[{@usn5}..123.654][1.0..$12] Descending,All(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]) =~(_usn4 :`7esn`)<-[{`2esn`:1000 Is Null Is Null}]->({`6esn`:7[010][00],#usn8:$usn1 =~010 =~07}) Desc Skip `8esn` Is Null Is Null Limit 12.0[#usn7]"),
    octest_legacy:ct_string("Create Unique _usn4=((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`))),(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}) Start #usn8=Node:`2esn`(#usn7={usn1}) ,``=Node:`5esn`(#usn7=\"d_str\")Where {``}[_usn4..$`1esn`] Foreach(_usn4 In 12e12 Ends With `4esn` Ends With 123456789| Create `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4),`5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Return *,Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Skip 0e0[..$@usn5][..$`8esn`] Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])]) Union All Start `5esn`=Relationship:@usn6(_usn4={_usn4})  Delete usn1 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))) Using Scan #usn7:_usn3 Unwind `5esn` In 12e12 In `8esn` As `8esn` Merge `5esn`=Shortestpath((_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})<-[@usn5?:`8esn`|:_usn4 *0X0123456789ABCDEF{usn1:False Contains $#usn8 Contains 9e1}]->({@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]}))"),
    octest_legacy:ct_string("Create Unique @usn5=({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1}) Union All Remove None(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * )).`3esn`,{`2esn`:Null In .e0,usn1:01234567[..9e1]}.`2esn`,Filter(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0.12 In 0X7).`1esn` Match usn1=Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})),`4esn`=Shortestpath((({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`))) Using Scan `2esn`:`2esn` Using Join On `8esn`,_usn4 Where True =~_usn3 =~123456789"),
    octest_legacy:ct_string("Remove @usn6(Distinct {@usn5}[..#usn7],0X0123456789ABCDEF[$999..][@usn5..]).`8esn`?,[usn1 Is Null Is Null].`4esn` Start ``=Relationship( {``}) ,`7esn`=Relationship(07,123456789,123456789)Where 12.e12[{@usn5}..][9e1..] Union With  $999[07..{#usn7}][1e1..0xabc] As #usn8,{1000}[{#usn8}] As `2esn` Skip `3esn` Contains $`6esn` Contains `8esn` Where 0.e0 =~`1esn` =~`6esn` Remove (:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).``? Union All Foreach(#usn7 In Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12) Contains {`1esn`:$999 Ends With {0}} Contains (`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})| Delete 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,$7 Is Not Null,0X0123456789ABCDEF[$`5esn`..]) Detach Delete $`2esn`,_usn4 Is Null Is Null,12.e12[{7}..7]"),
    octest_legacy:ct_string("Create Unique `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})),({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]}) Unwind Count(*)[.e12..] As @usn6 Merge ((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})) On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False On Match Set [`6esn` In 00 Where $`1esn`[$12][Count ( * )]].`5esn`? =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,_usn4 =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] Union All Delete 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,$7 Is Not Null,0X0123456789ABCDEF[$`5esn`..] Unwind [0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..]) As @usn5 Return Distinct #usn7 Starts With $999 As `6esn`,{7}[$123456789..{1000}][$`3esn`..`7esn`] Skip $123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]} Limit None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Union All Load Csv With Headers From #usn8['s_str'..][123.654..] As `4esn` Fieldterminator \"d_str\" With Distinct usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) As usn1,$999 Contains {7},\"d_str\"[..0.e0] As #usn8 Order By $0 Ends With False Ends With $_usn4 Descending,Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null] Desc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Descending Limit {`2esn`} Ends With {#usn7}"),
    octest_legacy:ct_string("Remove (`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[`2esn`?*]->({#usn7:1e1[1.e1..][123.654..],`3esn`:True Starts With $`4esn` Starts With 12e12})._usn4? Create Unique `7esn`=((`1esn` :#usn7))"),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv With Headers From (#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..] As usn1  With  `7esn` Contains `5esn` Contains 0X7 As `1esn`,#usn7(01 =~$`1esn`) =~{@usn6:12.e12[$`8esn`..{`8esn`}],#usn8:#usn7 =~00} As `5esn`,{@usn6}[$`7esn`..][False..] Order By $@usn6 =~#usn8 Descending,{1000} Ends With {`8esn`} Ascending Skip 1000[$7..$123456789] Limit 9e12[..0X7] With Distinct Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..],`` =~`6esn` =~usn1 As `2esn` Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Limit 0X0123456789ABCDEF[0X7..] Where $123456789[..$7][..$`6esn`]"),
    octest_legacy:ct_string("Start _usn4=Node:usn2(usn2='s_str') ,#usn7=Node:`5esn`(\"d_str\")Where .e1 Starts With $_usn4 Starts With {`1esn`} Union All Delete None(_usn4 In `2esn` Where 9e12 Ends With 123456789) Contains All(`2esn` In {999} Is Not Null Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF),{`2esn`:`8esn`[..`4esn`][..$usn1],@usn6:{123456789}[12..][$12..]} In [$0 Is Not Null,#usn7 Starts With $999,$`6esn`[`8esn`][0.0]] In [$999 Is Null,{``}[010]] Create _usn4=Shortestpath((`6esn` :`2esn`{`7esn`:#usn8 =~{999}})),`7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2}))"),
    octest_legacy:ct_string("Load Csv With Headers From (usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}) Contains {`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]} As `8esn`  Union All Remove @usn6(Distinct {@usn5}[..#usn7],0X0123456789ABCDEF[$999..][@usn5..]).`8esn`?,[usn1 Is Null Is Null].`4esn` Start ``=Relationship( {``}) ,`7esn`=Relationship(07,123456789,123456789)Where 12.e12[{@usn5}..][9e1..]"),
    octest_legacy:ct_string("Create usn1=(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})) Union Return Distinct *,12.0[{`5esn`}..][$@usn5..],[`6esn` In 00 Where 0.12 In 0X7|{999} Is Null][Allshortestpaths((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}))][Case {999}[$123456789..][12..] When $@usn6 =~#usn8 Then $999 Contains {7} When False Starts With 010 Then `8esn` Starts With {123456789} Else True Is Not Null Is Not Null End] As `6esn` Order By 1e1[..01] Desc Union All Detach Delete \"d_str\" Starts With $`8esn` Starts With {usn1} With Distinct *,1.e1[`4esn`..][$`6esn`..] As @usn5,Count ( * ) =~{`5esn`} =~{_usn4} As _usn3 Create `1esn`=Shortestpath((usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("With  $1000[\"d_str\"..$999][$`3esn`..{`3esn`}] Order By (:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Desc,{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}[Reduce(`1esn`={usn1} In Count ( * ),`` In {usn1} Ends With {`6esn`} Ends With 123456789|0[{usn2}..][usn1..])][[`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|{``} Starts With 123456789 Starts With usn2]] Ascending Where 0x0 Ends With {``} Union Create Unique usn1=Allshortestpaths((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})) Merge (`3esn` :`1esn`)-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}) On Match Set `7esn` =$999[{_usn4}] On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12]"),
    octest_legacy:ct_string("Detach Delete [12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))],[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]][Shortestpath(((`1esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))..],Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] Optional Match `4esn`=(`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]}) Using Join On `7esn` Match _usn4=Shortestpath((`6esn` :`2esn`{`7esn`:#usn8 =~{999}})),(((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))) Using Index ``:`1esn`(_usn4) Using Index _usn3:_usn3(`6esn`) Where 123.654[1e1..][{#usn8}..]"),
    octest_legacy:ct_string("Merge ``=((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[ *0xabc..7]->(:`4esn`:@usn6)-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})) On Create Set [`6esn` In 00 Where $`1esn`[$12][Count ( * )]].`5esn`? =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,_usn4 =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] Foreach(@usn6 In {1000}[{usn1}][Null]| Load Csv With Headers From $`8esn`[..0x0][..``] As usn2  Delete Case 0Xa Contains Count ( * ) When 12e12 Starts With `1esn` Starts With usn2 Then 010 In `1esn` When 123456789 Ends With usn1 Ends With usn2 Then `1esn`[..\"d_str\"][..$`5esn`] End[..{`2esn`:Count(*)[.e12]}]) Foreach(usn2 In {`4esn`}[{`4esn`}..999]| Detach Delete 9e1[9e1...e0])"),
    octest_legacy:ct_string("Return *,0X0123456789ABCDEF[9e12] As @usn5,Count(*)[.e12..] Skip (usn1 :@usn5)<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)[Extract(`1esn` In $12 Is Not Null Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|12.0 =~$#usn7 =~9e12)] Limit (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})-[:`2esn` *1000{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(_usn3 :#usn8)-[:``]->({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}}) Ends With 01234567 Detach Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`])[(`3esn` :#usn7{`6esn`:{_usn4} Is Null,usn2:{`2esn`} Starts With @usn6})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)<-[@usn6?:`7esn`]->(:`2esn`{#usn7:#usn8 =~{999}})..Shortestpath((`8esn` {_usn4:{usn1} In Count ( * )})<-[`6esn`?]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})<-[@usn6?:`7esn`]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}))][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12])..[`1esn` In $12 Is Not Null Where {usn1} In Count ( * )|$`3esn`[{``}..]]],{usn2}[`6esn`..01234567],All(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7]) Contains Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End Contains Reduce(`6esn`={_usn4} In {1000},usn1 In 12.e12 In {0} In 9e1|{`4esn`} Starts With $7 Starts With $``) Start `8esn`=Node:`4esn`(\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str')"),
    octest_legacy:ct_string("Load Csv With Headers From usn1 In 00 In {_usn3} As usn2 Fieldterminator 's_str' With Distinct {`8esn`}[..$`6esn`][..123.654],{@usn6} In {#usn7} In 12.e12 As usn1,0.12 Is Not Null Is Not Null Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])] Union Merge @usn5=(({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[`5esn` *0x0..]->(`8esn` :#usn7)) On Match Set `2esn`+=0X0123456789ABCDEF[{@usn5}..1.e1][$_usn3..{7}],`2esn` =True[7][$999],_usn3+=$usn2 Starts With $`5esn` On Match Set `4esn` ={999} Ends With {`5esn`} Ends With {0} Foreach(`` In 0X7[0X7..][Count ( * )..]| Unwind [`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)] Starts With (`5esn` :`7esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}) Starts With `6esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],$`7esn` In 12) As @usn5) Return Distinct $`2esn`[{usn2}],$`5esn`[$#usn7..][0xabc..] Order By [0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Ascending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc,{999} Ends With 123456789 Ends With {@usn5} Descending Limit $usn1 Contains {`8esn`} Contains $123456789"),
    octest_legacy:ct_string("Merge `2esn`=((:`5esn`:@usn5)) On Create Set [12.e12[{7}..7],_usn3[\"d_str\"]]._usn4! =$``[..1.e1][..12],#usn7 =1.e1 Is Null,usn1+=Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False"),
    octest_legacy:ct_string("Merge Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})) On Create Set ['s_str'[..0X7],False Contains 0.e0 Contains Count(*)].``? =$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`] Return *,Any(_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``})[..[$#usn7[`5esn`],.e1[@usn5]['s_str'],Count(*) Starts With $usn1 Starts With {usn2}]][..{usn2:$7 In @usn5 In {@usn5},`7esn`:{#usn7} Contains @usn5 Contains Count ( * )}] Order By $`4esn` In Null Descending,#usn8 =~{999} Asc Skip Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $#usn7[$`4esn`])[(usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})][Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))] Match Allshortestpaths(((`2esn` :@usn6)<-[:#usn7|`2esn`]->(`1esn` :`6esn`:`8esn`{usn2:Count ( * )[..12][..{@usn6}]}))),#usn8=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[?:`6esn` *01..07]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[:`1esn`|:`3esn` *1000]-($12) Using Join On `4esn`,`2esn` Where $@usn6 Contains `7esn` Union Delete 12e12 Ends With $999 Ends With 1e1,$`3esn`,1000 Merge usn1=(@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0}) On Create Set Allshortestpaths(((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]}))).`8esn`? =`6esn`[{`6esn`}..],@usn6+=Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,Extract(usn1 In 12.e12 In {0} In 9e1 Where False Starts With 010|True Starts With $`4esn` Starts With 12e12).`7esn`? =0X0123456789ABCDEF Is Null Is Null"),
    octest_legacy:ct_string("Remove Extract(_usn4 In `2esn` Where 123.654 Starts With $``).usn2 Unwind {`2esn`}[..{@usn6}][..1.e1] As #usn7 Return Distinct *,None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `1esn` Order By None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Desc,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null) Is Null Is Null Descending Skip Single(_usn3 In True[7][$999]) Is Not Null Is Not Null Limit $1000[..12.0][..0e0] Union All Match ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})),(((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Using Index `6esn`:`2esn`(`1esn`) Merge @usn5=Allshortestpaths(((:`2esn`)))"),
    octest_legacy:ct_string("Start `2esn`=Relationship:`4esn`(``='s_str') Where 7 Contains `2esn` Contains $`8esn`"),
    octest_legacy:ct_string("Create Unique `6esn`=(_usn3 {@usn5:.e12 =~.e0})-[?:`7esn`]-(usn2 :`4esn`:@usn6)-[?:@usn6|`` *1000]-(`5esn` :`7esn`),`3esn`=(((:_usn3{`8esn`:9e1 =~999})<-[@usn6?]->(`6esn` :_usn3)<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`))) Union All Create Unique Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]}) Union Merge Shortestpath((`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})) Return Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) As _usn4,7[..$`1esn`][..00],{12} Starts With #usn8 Starts With 0e0 Order By $0 Starts With `2esn` Desc,0.12 In 0X7 Descending,12.e12 In $0 In $0 Desc Limit `6esn` In Null Load Csv From Reduce(`7esn`={@usn5} Is Null,#usn7 In 0Xa[@usn5][{`7esn`}]|0e0[0X0123456789ABCDEF..010][$@usn6..010]) Is Not Null Is Not Null As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge (@usn6 :@usn5{usn2:{`6esn`} Ends With 0e0 Ends With {``}})<-[{`2esn`:``[{123456789}..]}]->(:_usn4) On Create Set `2esn`+=Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})],`3esn` =$12 Starts With $`8esn`,@usn5 =Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) Match @usn6=Allshortestpaths((:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})),(:``) Using Index usn1:_usn3(``) Using Scan `1esn`:`3esn` Where 1e1[1.e1..][123.654..] Union All Create `8esn`=Shortestpath(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),`4esn`=Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Union Foreach(@usn6 In 9e12 In 1e1 In .e12| Remove {`1esn`:7 Is Null Is Null,@usn6:9e1 =~`` =~{`7esn`}}.`2esn`,(:@usn5{#usn7:{#usn7} In Count ( * ) In $#usn8})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00}).#usn7!,`4esn`:_usn4 Remove Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null|_usn4[Count(*)]).`7esn`!,[#usn7 In 0Xa[@usn5][{`7esn`}] Where #usn7 Starts With $999|$@usn5[$`4esn`][$@usn6]].`2esn`!,Reduce(`2esn`=9e12 Ends With 123456789,`1esn` In 0.e0 =~`1esn` =~`6esn`|$`3esn` Contains 0 Contains 07).`7esn`?) Match @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))"),
    octest_legacy:ct_string("Create Unique `3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))) Foreach(`3esn` In {_usn4:$0[$1000..00][{0}..{usn1}]}[{`2esn`:$``['s_str'..][0x0..]}..]| Optional Match `1esn`=Allshortestpaths(((($_usn3)<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:@usn5{#usn7:{#usn7} In Count ( * ) In $#usn8})-[? *01..07]->(`8esn` :#usn7)))) Using Join On ``,`7esn`,#usn7 Where $`1esn`[$12][Count ( * )] Remove [`6esn` In 00 Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF].@usn5!,{usn1:$123456789 Starts With `5esn`}.`6esn`) Create Unique usn2=(`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}}),Shortestpath((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))"),
    octest_legacy:ct_string("Unwind {#usn7}[{#usn7}..][$`4esn`..] As `6esn` Merge ((:`8esn`:@usn5{`5esn`:$`8esn`[..$999][..0],#usn7:$1000 =~{1000} =~`5esn`})) Create Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Union Foreach(`6esn` In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null| Create Unique @usn6=((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[``?:#usn8|`2esn`]->(:`8esn`:@usn5)<-[#usn7]-(`3esn` :#usn7)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Delete Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null),[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]] Is Not Null,Single(_usn3 In True[7][$999]) Is Not Null Is Not Null) Merge ((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})) On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False On Match Set [`6esn` In 00 Where $`1esn`[$12][Count ( * )]].`5esn`? =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,_usn4 =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] Union Merge @usn5=Allshortestpaths(((:`2esn`)))"),
    octest_legacy:ct_string("Remove Extract(_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]|$usn2 Ends With $`5esn`).`8esn`!,@usn6:`` Union Optional Match `8esn`=(({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})),((@usn5 )<-[#usn8? *..01234567]-($_usn3)) Using Join On ``,`7esn`,#usn7 Where True[$`7esn`..{1000}]"),
    octest_legacy:ct_string("Return Distinct {`5esn`:2.12 =~0x0 =~_usn4,`3esn`:$@usn6 Contains `7esn`}[..(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})<-[`7esn`?:`7esn` *..7{`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})][..Any(_usn3 In {`2esn`} Ends With {12} Ends With 7)] As #usn8,12.e12 In {0} In 9e1 As #usn8 Order By #usn7[9e0] Ascending Skip #usn8 =~{999} Limit $`6esn`['s_str'..][{_usn4}..]"),
    octest_legacy:ct_string("Start usn2=Node:#usn8(_usn3={#usn7}) Where 's_str'[_usn4..0x0] Foreach(_usn3 In `1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null]| Match `1esn`=Allshortestpaths((`6esn` :@usn5{`4esn`:{#usn8}[$#usn7..],`4esn`:0[{@usn5}..][7..]})),`1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Using Scan `2esn`:`2esn` Return Distinct Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] As usn2,{usn1}[01..7][{`3esn`}..`6esn`] Order By Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] Ascending,[.e12 Ends With 1000 Ends With 010,Count(*)] Ends With {`7esn`:$_usn3 =~{_usn4} =~$`6esn`} Ends With Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Descending Skip [`` In {`1esn`} Starts With @usn6 Where $123456789 Starts With $123456789 Starts With Count ( * )|{#usn8}[usn1][1.0]][Shortestpath((@usn6 {usn1:$#usn7 =~{12} =~False})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6))..] Limit $`5esn`[`4esn`]) Union All Load Csv With Headers From Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Is Null Is Null As `2esn` Fieldterminator 's_str' Union All Start @usn6=Node:@usn5({usn1}) ,#usn8=Node:`6esn`(#usn8={@usn5})Where {7} Starts With $usn1 Starts With 1.0 Merge @usn6=((_usn4 :#usn8)<-[:#usn8|`2esn` *123456789..0X7{``:$#usn7 =~{12} =~False,`5esn`:{1000} In {123456789}}]->({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})<-[{``:\"d_str\"[{`8esn`}..]}]-(:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) On Create Set _usn3 =1.e1[`4esn`..][$`6esn`..] Detach Delete \"d_str\"[..0.e0],{7}[$_usn4..Count ( * )],{#usn7} Contains 0.0 Contains $0"),
    octest_legacy:ct_string("Unwind Filter(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]) Ends With Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}]) Ends With {`2esn`:usn1 Is Null Is Null,usn2:0.e0 =~`1esn` =~`6esn`} As _usn3 Load Csv With Headers From {``} Starts With 123456789 Starts With usn2 As `3esn`  Union All Foreach(`3esn` In {@usn5} Starts With 1.0 Starts With 00| Detach Delete True Starts With $`2esn` Starts With {@usn6},.e12[\"d_str\"..][.e1..],$_usn3[..$`2esn`][..\"d_str\"])"),
    octest_legacy:ct_string("Merge ((`8esn` :`8esn`:@usn5)<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})) On Create Set Filter(`1esn` In `3esn`[07..] Where 9e12 Is Not Null).@usn5! =07 =~$`8esn` =~9e1,`4esn` =Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null On Match Set Reduce(`3esn`={123456789}[12..][$12..],#usn7 In 0Xa[@usn5][{`7esn`}]|123.654[$`1esn`..Null][1000..{_usn3}]).`8esn`? =#usn8 =~{999},`5esn`+=`6esn`[$0][#usn8] Remove [{_usn3}[$usn2..],`5esn` Is Null Is Null,0.12 Contains 12.0].`3esn`,Shortestpath((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})).``! Union All Detach Delete 123.654 Ends With usn2 Ends With 0,{usn1} In Count ( * ),0x0[{999}..`1esn`][0Xa..False] Start `5esn`=Rel( {_usn4})  Union All Start `7esn`=Node:`2esn`(#usn7={usn1}) ,usn2=Rel:`5esn`(\"d_str\")Where Null =~12e12 Load Csv From [1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] As `` "),
    octest_legacy:ct_string("Foreach(usn1 In {`4esn`:12 Starts With {_usn4} Starts With $#usn8} =~Reduce(@usn5=$@usn6 =~#usn8,`5esn` In $`2esn`[12.e12][$@usn5]|{`1esn`} In 12.e12 In 9e1)| Start `3esn`=Relationship:`2esn`(#usn7={usn1}) ,`5esn`=Relationship:`7esn`({#usn8})) Merge (((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[`8esn`?]->({@usn6:$`` Starts With 12 Starts With $usn2}))) On Match Set `6esn`($usn1 Starts With $999 Starts With {@usn5},#usn7 =~00).usn2! =Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End[(`8esn` :`2esn`)-[`8esn`]->(`8esn` :`8esn`:@usn5)..],`7esn`+='s_str' Starts With 12e12 Starts With $_usn4,(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`8esn`? =Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)) Union All Match `3esn`=(({#usn7:$0 Is Not Null})),`2esn`=Allshortestpaths(((_usn4 :#usn8))) Using Index @usn6:#usn8(`8esn`) Using Index usn2:`8esn`(`5esn`) Union With  *,0X7[0.e0][{`4esn`}],usn1 Contains $7 Contains $`` Limit usn2 In `2esn` In $`7esn` Where {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Merge `4esn`=(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 :`4esn`:@usn6)<-[:`6esn` *0xabc..7{`8esn`:0X7[0X7..][Count ( * )..]}]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"}))) Remove {#usn7:`2esn` Starts With `` Starts With 1e1}.@usn5!,{`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]}.@usn6"),
    octest_legacy:ct_string("Merge @usn6=Shortestpath((:``{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})-[?:`4esn`|:#usn7]->(`1esn` :@usn6)<-[`1esn`?]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})) On Match Set `5esn` =Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 's_str'[.._usn4][..``]),{usn2:{`6esn`} Ends With 0e0 Ends With {``}}.``? =`7esn`[{7}..@usn5],`3esn`+={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null Load Csv With Headers From {`4esn`} Contains $`1esn` Contains 01234567 As `8esn` Fieldterminator \"d_str\" Unwind {1000}[{#usn8}] As #usn8"),
    octest_legacy:ct_string("Create Unique `6esn`=(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`3esn`?:#usn7|`2esn`]->(usn1 :`6esn`:`8esn`)-[`7esn`? *..0{`2esn`:07 =~$`8esn` =~9e1,``:`5esn`[0xabc..]}]->({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7}),Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Match @usn5=($`5esn`)-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Using Scan usn2:@usn5 Where True Is Null Is Null Merge _usn4=(((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) On Match Set #usn8+={123456789} Is Not Null,{#usn7:'s_str'[_usn4..0x0],`6esn`:$`6esn` Ends With {0} Ends With {`7esn`}}.`` =07 Is Not Null,usn2 ={usn2} =~@usn6 =~{`4esn`}"),
    octest_legacy:ct_string("Remove Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``!,Case 7 Contains $`` Contains {`6esn`} When {#usn8}[2.12] Then $``['s_str'..][0x0..] When $7 Ends With $`8esn` Then {`7esn`}[``..] Else {123456789}[12..][$12..] End.`6esn`! Unwind Extract(#usn7 In 0Xa[@usn5][{`7esn`}] Where $@usn5 In $usn2 In {1000}|{`2esn`}[..{@usn6}][..1.e1]) In Reduce(`5esn`=7[$0..][{_usn4}..],`` In {usn1} Ends With {`6esn`} Ends With 123456789|#usn8[$0..False][$`1esn`..$#usn7]) In Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1) As `7esn` With  `7esn`[{7}..@usn5],{@usn6} Contains 0e0,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Limit $#usn7[.e1..{7}] Where 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Union Match `6esn`=Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(:`2esn`{`6esn`:@usn6[{0}..]}))),`8esn`=({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(usn1 :`8esn`:@usn5{`1esn`:{#usn7} Contains 0.0 Contains $0,`2esn`:.e12[010..$123456789]})<-[_usn3?:@usn6|`` *0x0..{`3esn`}]-(@usn6 {`1esn`:01234567 In $123456789,`1esn`:{`6esn`}[..{`2esn`}]}) Using Scan `3esn`:`3esn` Where 999[12.0..][#usn7..]"),
    octest_legacy:ct_string("Detach Delete {`4esn`:`7esn` Contains `5esn` Contains 0X7} Ends With Allshortestpaths((`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4)) Merge Shortestpath((((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null})<-[#usn8?:``]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})))) Union Return Distinct $`2esn`[{usn2}],`7esn` Ends With $_usn3 Ends With usn2 Order By $_usn3[..$`2esn`][..\"d_str\"] Desc Skip `4esn`[{1000}][{`5esn`}]"),
    octest_legacy:ct_string("Start `3esn`=Relationship:`2esn`(#usn7={usn1}) ,`5esn`=Relationship:`7esn`({#usn8}) Unwind [False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null] As `` Match Shortestpath((({`2esn`:{7}[$7..],#usn7:`1esn` In 07})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Where .e12 =~$_usn4 Union All Load Csv From $@usn6 Ends With 01 Ends With 999 As _usn3 Fieldterminator \"d_str\" Detach Delete usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3),[$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End] Union All Unwind Count(*)[..``][..#usn8] As #usn7"),
    octest_legacy:ct_string("Create Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})),((@usn6 :`7esn`)<-[``?:`6esn` *07{`5esn`:{12} Contains `7esn` Contains $_usn3,_usn4:$`3esn` In 9e12 In ``}]-({#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]})-[_usn3:#usn7|`2esn`]-(_usn3 :#usn8)) Union All Create `6esn`=(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[?:`6esn`{`1esn`:{@usn5}[..{12}][..0x0],usn2:1000}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})<-[`1esn`?:usn2|#usn7 *..0]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Delete $@usn6[1.e1..`8esn`][Null..123456789]"),
    octest_legacy:ct_string("Load Csv From $0 Is Not Null As `3esn` Fieldterminator 's_str' Start `5esn`=Rel:`4esn`('s_str') ,`6esn`=Node:_usn4(``=\"d_str\")Where $@usn5[$`4esn`][$@usn6]"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From 010 Ends With 01 Ends With {_usn3} As #usn8 Fieldterminator 's_str' Remove Extract(`2esn` In {999} Is Not Null Where {#usn7} In Count ( * ) In $#usn8|{usn1} =~123.654 =~\"d_str\").@usn5?,Case .e12[$#usn8..@usn6] When {12} =~0.e0 =~{_usn3} Then $7 In 1.0 In 1e1 End.`4esn`? Create Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))"),
    octest_legacy:ct_string("Load Csv With Headers From $`2esn` Starts With {`8esn`} Starts With {usn1} As usn2 Fieldterminator 's_str' Return Distinct *,{`8esn`:{#usn8}[$#usn7..]}[Case 12.e12[``..usn2][{#usn7}..@usn5] When `3esn` Is Not Null Is Not Null Then 7 Contains `2esn` Contains $`8esn` Else $``[..1.e1][..12] End..] As `2esn`,0e0 Starts With $@usn6 Starts With $`6esn` Detach Delete Allshortestpaths(((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8?:``]-(`1esn` :`1esn`{`7esn`:{1000}[{usn1}][Null],`3esn`:7[$0..][{_usn4}..]})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]}))) Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})"),
    octest_legacy:ct_string("Match `3esn`=((#usn8 :@usn5)) Using Index #usn7:`8esn`(@usn6) Where 12.e12[$`8esn`..{`8esn`}] Foreach(`2esn` In {usn2}[`6esn`..01234567]| Remove Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``!,Case 7 Contains $`` Contains {`6esn`} When {#usn8}[2.12] Then $``['s_str'..][0x0..] When $7 Ends With $`8esn` Then {`7esn`}[``..] Else {123456789}[12..][$12..] End.`6esn`!) Union Load Csv From $``[.e12..] As usn1 "),
    octest_legacy:ct_string("Return Distinct $#usn7 Contains True Contains _usn4,.e1 Ends With {7} Ends With $usn1 As `` Limit {usn2}[`6esn`..01234567] Unwind `2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] As `6esn` Union All Load Csv From {@usn5}[1e1..][9e1..] As `8esn` "),
    octest_legacy:ct_string("Delete 0.0 In `6esn` In $@usn5,9e12 In 1e1 In .e12,1.0[..`4esn`][..{0}] Merge (((`8esn` {_usn4:{usn1} In Count ( * )})<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:`5esn`:@usn5)<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07}))) Delete 12 Starts With {_usn4} Starts With $#usn8,.e12 Ends With 1000 Ends With 010,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null Union Delete 12e12 Ends With $999 Ends With 1e1,$`3esn`,1000 Merge usn1=(@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0}) On Create Set Allshortestpaths(((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]}))).`8esn`? =`6esn`[{`6esn`}..],@usn6+=Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,Extract(usn1 In 12.e12 In {0} In 9e1 Where False Starts With 010|True Starts With $`4esn` Starts With 12e12).`7esn`? =0X0123456789ABCDEF Is Null Is Null"),
    octest_legacy:ct_string("Create Unique _usn3=((:@usn5{`3esn`:@usn5 =~'s_str',`1esn`:$`7esn` Contains {`1esn`} Contains 9e12})) Return Distinct $`6esn`[`8esn`][0.0] Order By {`7esn`}[0X7..][0x0..] Asc,Single(usn1 In 12.e12 In {0} In 9e1 Where `4esn` Contains #usn8 Contains 7) Ends With [123.654[$`1esn`..Null][1000..{_usn3}],#usn8[`7esn`..],$@usn6 Starts With {`1esn`} Starts With 12] Ends With {`4esn`:{usn1} In Count ( * )} Descending Skip Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $#usn7[$`4esn`])[(usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})][Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))] Unwind {usn2} Starts With `` Starts With {0} As #usn7 Union With Distinct {`8esn`}[@usn5..][01..],All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2] As `5esn` Order By [#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}][..[$`6esn`[`8esn`][0.0],$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,True[$`7esn`..{1000}]]][..None(`2esn` In {999} Is Not Null Where {``} Ends With .e12 Ends With 0.e0)] Desc,{@usn5}[Count(*)..] Asc,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[Shortestpath(((({``:$7[{`1esn`}]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(#usn7 :@usn6))))..Extract(_usn3 In True[7][$999] Where $7 Is Null Is Null)][{`4esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:.e12 Is Null Is Null}..[`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000]] Descending Limit $`8esn` =~0x0 =~usn2 Where $_usn4 Ends With 0.e0 Ends With .e0 With  0xabc[$_usn3..],[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Order By $_usn4 Is Null Is Null Asc,.e1 Contains $`3esn` Descending,$_usn3 =~{_usn4} =~$`6esn` Ascending Skip $usn2 In 123.654 In .e0"),
    octest_legacy:ct_string("Return Distinct $1000[\"d_str\"..$999][$`3esn`..{`3esn`}] Order By (:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Desc,{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}[Reduce(`1esn`={usn1} In Count ( * ),`` In {usn1} Ends With {`6esn`} Ends With 123456789|0[{usn2}..][usn1..])][[`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|{``} Starts With 123456789 Starts With usn2]] Ascending Remove {usn2:7 In 1.e1 In $usn1}.`4esn`!,All(_usn4 In 0.0[..{999}][..0.0] Where #usn8 Is Null).`8esn`? Union Start `5esn`=Node:#usn8(#usn7='s_str') ,`5esn`=Node:_usn3(_usn3='s_str')Where {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Union Remove {#usn8:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}.usn1 Detach Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`])[(`3esn` :#usn7{`6esn`:{_usn4} Is Null,usn2:{`2esn`} Starts With @usn6})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)<-[@usn6?:`7esn`]->(:`2esn`{#usn7:#usn8 =~{999}})..Shortestpath((`8esn` {_usn4:{usn1} In Count ( * )})<-[`6esn`?]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})<-[@usn6?:`7esn`]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}))][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12])..[`1esn` In $12 Is Not Null Where {usn1} In Count ( * )|$`3esn`[{``}..]]],{usn2}[`6esn`..01234567],All(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7]) Contains Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End Contains Reduce(`6esn`={_usn4} In {1000},usn1 In 12.e12 In {0} In 9e1|{`4esn`} Starts With $7 Starts With $``)"),
    octest_legacy:ct_string("Detach Delete All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2],[`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]] Optional Match (`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})-[``:usn2|#usn7 *..0Xa]->(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}),`3esn`=Allshortestpaths((:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )})) Using Index @usn6:#usn8(_usn4) Using Join On `6esn`,usn2,`5esn`"),
    octest_legacy:ct_string("Create `2esn`=(:_usn3{#usn7:#usn8 =~{999}}),Shortestpath(((:#usn8{``:12.e12[$`4esn`..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))) Return $`2esn`[12.e12][$@usn5],12 Starts With $#usn7,(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..] Order By @usn5 In 1e1 Asc Limit {_usn4}[...e12][..0xabc] Union All Detach Delete 123.654[{`7esn`}][{7}],Count ( * ) Starts With 010 Starts With 0x0 Match `2esn`=(_usn3 :@usn5),(@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]}) Using Scan `3esn`:_usn3 Where $`` Starts With 12 Starts With $usn2 Foreach(`3esn` In 0X0123456789ABCDEF[$`5esn`..]| With Distinct $`2esn`[12.e12][$@usn5],12 Starts With $#usn7,(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..] Where 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Create `8esn`=((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *..00{#usn7:`4esn`[usn1]}]-(:@usn5{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})),_usn4=(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))))"),
    octest_legacy:ct_string("Detach Delete usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3),Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12]) Union Create ((({usn2:`1esn` In 07})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}))) Load Csv From $`1esn` =~$`1esn` =~{`6esn`} As `7esn`  Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..],123456789 Is Not Null Is Not Null,$usn2"),
    octest_legacy:ct_string("Return *,1.e1 Starts With $`2esn` Starts With $0 Create Allshortestpaths(((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)))"),
    octest_legacy:ct_string("Start _usn3=Node(01,0x0,0X7,0X7) ,`2esn`=Relationship:_usn4(usn1={_usn4})Where $`8esn`[..$999][..0] Union All Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))) Using Join On _usn3 Using Scan `6esn`:``"),
    octest_legacy:ct_string("Create Unique Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths(({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) Start @usn5=Node:``(#usn7=\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str')Where $``[..1.e1][..12] Union All Create Unique ((`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})) Create @usn6=Shortestpath(((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}))),(`6esn` :#usn8) With  {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Order By 0.12[999][$#usn8] Descending,`7esn`[..$`5esn`][..{`5esn`}] Desc Limit {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] Where 1.0 Is Null Is Null Union Foreach(`3esn` In `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}]| Match Shortestpath(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)),`3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))))"),
    octest_legacy:ct_string("Start `6esn`=Node:@usn6(_usn4={_usn4}) ,`8esn`=Node:`8esn`('s_str')Where 07[`8esn`] With  [`1esn` In `3esn`[07..] Where @usn6[{0}..]|0.e0[12.e12]] Contains {usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF} As @usn6,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Contains All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]) As #usn8 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Where 123456789[0..]"),
    octest_legacy:ct_string("With Distinct *,{`6esn`} Contains {usn2} Contains $1000 As `2esn` Order By $`5esn`[`1esn`][0X0123456789ABCDEF] Ascending,Count(*)[usn2..][$#usn8..] Asc Where 0X7 Starts With {999} Starts With 12e12 Create `7esn`=((`1esn` :#usn7)) Load Csv With Headers From {_usn3}[$usn2..] As `` Fieldterminator 's_str' Union All Unwind $0 Ends With False Ends With $_usn4 As `1esn` Merge `6esn`=Shortestpath(((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))) Optional Match `1esn`=Allshortestpaths((((#usn7 :@usn5)<-[`4esn`?*..]-(:`4esn`:@usn6{`3esn`:123456789 Is Not Null Is Not Null})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})))),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Where 00[..$123456789][..$`5esn`] Union All Detach Delete $1000 Is Not Null Is Not Null,$`7esn` Is Null Is Null,_usn4 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Unique @usn6=Allshortestpaths(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}))),Shortestpath((`5esn` )<-[`3esn` *..010]-(:@usn5{`2esn`:True[$123456789][`8esn`]})) Union All Load Csv From `6esn` Starts With 123.654 As `8esn` Fieldterminator \"d_str\" Unwind Filter(`3esn` In 123.654[1e1..][{#usn8}..] Where $7 Is Not Null) Is Null Is Null As #usn8"),
    octest_legacy:ct_string("Merge Shortestpath(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})) On Match Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] Union All Load Csv With Headers From .e0[0.12] As _usn4  Start `4esn`=Node:@usn6(`5esn`={1000}) Where {@usn5}[1e1..][9e1..] Union All Remove `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null).`3esn`! Delete 0e0[..$@usn5][..$`8esn`]"),
    octest_legacy:ct_string("Unwind .e0 =~{`8esn`} =~$999 As _usn4 Create ``=Allshortestpaths(((:usn1:_usn4)-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`))),Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(usn1 :`8esn`:@usn5)-[? *0x0..{`6esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-({`2esn`})) With  `7esn` Contains `5esn` Contains 0X7 As `1esn`,#usn7(01 =~$`1esn`) =~{@usn6:12.e12[$`8esn`..{`8esn`}],#usn8:#usn7 =~00} As `5esn`,{@usn6}[$`7esn`..][False..] Order By $@usn6 =~#usn8 Descending,{1000} Ends With {`8esn`} Ascending Skip 1000[$7..$123456789] Limit 9e12[..0X7]"),
    octest_legacy:ct_string("With Distinct (@usn5 {`2esn`:1.e1 =~9e12 =~`4esn`})<-[@usn5?:usn1 *..010{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}]->(`8esn` :`1esn`{usn2:0.0 Is Not Null,usn2:0.12[Count(*)..][$#usn7..]})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]}) In Case When .e0[True..Count ( * )][#usn7..0X7] Then $@usn5[`6esn`..] When 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Then $`1esn`[#usn8][$@usn5] End In @usn6(`` Ends With $`4esn` Ends With 0X0123456789ABCDEF),{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0},$`2esn` Ends With 0.12 Ends With .e1 As `` Limit {_usn3} Contains $`1esn` Contains 12.0 Where {999} Is Null Create Unique usn2=(((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})-[?:#usn7|`2esn` *0x0..]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Merge `1esn`=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}) On Match Set Any(_usn4 In `2esn` Where 0X0123456789ABCDEF[9e12]).`5esn`! =(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) On Match Set `3esn`(Distinct 's_str' Starts With 12e12 Starts With $_usn4).`3esn` =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End"),
    octest_legacy:ct_string("Foreach(`3esn` In {usn1} In Count ( * )| With Distinct *,{`6esn`} Contains {usn2} Contains $1000 As `2esn` Order By $`5esn`[`1esn`][0X0123456789ABCDEF] Ascending,Count(*)[usn2..][$#usn8..] Asc Where 0X7 Starts With {999} Starts With 12e12 With  *,$999[07..{#usn7}][1e1..0xabc] As #usn8 Order By None(@usn5 In Null =~12e12 Where #usn8[`7esn`..])[{123456789}..][All(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0})..] Ascending Skip Single(`6esn` In 00 Where $_usn4 Ends With 0.e0 Ends With .e0) Contains Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End) Union All Match @usn6=Allshortestpaths(({`4esn`:#usn8 Is Null})),(({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})) Using Scan `1esn`:`7esn` Match ``=Allshortestpaths((((`6esn` :@usn5)<-[`4esn`?*..]-(:`4esn`:@usn6{`3esn`:123456789 Is Not Null Is Not Null})-[_usn4?:`3esn`|:@usn5]->(:@usn5{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})))) Using Scan usn2:@usn5 Where 0 Contains $usn2 Contains 12e12 Create Unique Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))),`5esn`=Allshortestpaths(((:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})<-[`8esn`?:`4esn`|:#usn7]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})-[usn2 *07{usn1:07 =~@usn5}]->({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})))"),
    octest_legacy:ct_string("Merge Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Union Create Unique Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Shortestpath(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) Detach Delete Reduce(@usn5=0.e0 Contains #usn7,`` In {usn1} Ends With {`6esn`} Ends With 123456789|$999 In 999)[Allshortestpaths(({`4esn`:#usn8 Is Null})-[:usn1{_usn4:0[{usn2}..][usn1..],`3esn`:12 Starts With 7 Starts With $`5esn`}]-(`7esn` :`3esn`:`6esn`)<-[`6esn`?:#usn8|`2esn`*..{`5esn`:@usn5 =~'s_str'}]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}))..{@usn6:0.0 Is Not Null Is Not Null,#usn7:\"d_str\"[{`8esn`}..]}],Single(_usn3 In True[7][$999]) Is Not Null Is Not Null Union All Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\" Return Distinct *,(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn` Limit `2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]]"),
    octest_legacy:ct_string("Start _usn3=Node( {usn2}) ,`8esn`=Rel( {`7esn`})Where {0} Is Null Detach Delete 0.12 Ends With {1000} Ends With `6esn`,$@usn5[usn2..][$0..] Return Distinct *,.e0 =~{`8esn`} =~$999 As #usn7,010 In $`5esn` In 0 As `6esn` Order By $usn1 In 0.12 In $`` Descending,Count ( * ) Contains 12 Descending Skip $`` In `7esn` Limit [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]][Shortestpath(((`1esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))..]"),
    octest_legacy:ct_string("Create Unique @usn5=Allshortestpaths(((_usn3 {@usn5:.e12 =~.e0})<-[`3esn` *..010]-({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Detach Delete {999}[$123456789..][12..],$`6esn`[..1.e1][..1e1]"),
    octest_legacy:ct_string("Foreach(#usn7 In {_usn3}[`3esn`..$#usn8]| With Distinct (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Order By `1esn`[..00][..{7}] Ascending,`6esn` In Null Descending,{`3esn`} Is Null Descending Skip Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} Where @usn5 Is Not Null Is Not Null) Union All With  *,0.e0 Contains #usn7 Order By $_usn4[9e0..] Asc,12 In 999 Descending Limit {`2esn`} Starts With @usn6 Foreach(`1esn` In 0x0 =~123.654 =~{999}| Create Unique @usn5=((`4esn` {`8esn`:0Xa[@usn5][{`7esn`}]})<-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`3esn` :#usn7)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-(#usn8 {#usn7:$1000 Is Not Null Is Not Null})) Match #usn8=(({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`)),usn2=(`4esn` {_usn4:12 Starts With {_usn4} Starts With $#usn8,_usn4:$@usn5[$`4esn`][$@usn6]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Using Index @usn6:`4esn`(`6esn`))"),
    octest_legacy:ct_string("Unwind 0X0123456789ABCDEF[7...e0][`1esn`..usn2] As `` Remove Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn1 Starts With {_usn3}|{123456789}[12..][$12..]).usn1?,[$``[..1.e1][..12],7 Contains $`` Contains {`6esn`}].`7esn`!"),
    octest_legacy:ct_string("Detach Delete {_usn3}[$usn2..] Union All Start `4esn`=Rel:`1esn`(@usn5={`5esn`}) ,`4esn`=Node(01234567,0Xa,07)Where @usn6[{0}..] Union All Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12].`2esn`,[usn1 Contains $7 Contains $``,$@usn5 In 's_str' In $12,$`1esn` Is Not Null Is Not Null].usn2!,All(`1esn` In `3esn`[07..] Where 999 Starts With 's_str').#usn8! Remove Extract(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..]|0Xa Contains {`7esn`} Contains $999).`5esn`!,All(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12}).`2esn`,Reduce(`3esn`={7} Starts With $usn1 Starts With 1.0,_usn3 In True[7][$999]|123.654[{@usn5}..123.654][1.0..$12]).#usn8 Foreach(`` In {123456789} =~01234567 =~`3esn`| With  (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Order By `1esn`[..00][..{7}] Ascending,`6esn` In Null Descending,{`3esn`} Is Null Descending Skip Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} Where $``[..1.e1][..12] Start @usn5=Node:``(#usn7=\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str')Where $``[..1.e1][..12])"),
    octest_legacy:ct_string("Remove `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null).`3esn`! Delete 0e0[..$@usn5][..$`8esn`] Union Remove Shortestpath((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})).#usn8?"),
    octest_legacy:ct_string("Unwind $usn2 As `5esn` Union Merge `2esn`=Allshortestpaths((((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})))) On Create Set Case $`1esn`[07] When Null =~12e12 Then $``['s_str'..][0x0..] Else Null Is Null Is Null End.usn2? =0X0123456789ABCDEF[9e12],`4esn`+=12.e12[$`4esn`..],`8esn` =$usn1[0X7] On Match Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )]"),
    octest_legacy:ct_string("Load Csv With Headers From [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] As @usn5 Fieldterminator \"d_str\" Union Unwind Case {`1esn`} Is Not Null When 9e12 =~123456789 =~$999 Then 999[12.0..][#usn7..] When `4esn` Contains #usn8 Contains 7 Then `2esn` Starts With `` Starts With 1e1 Else Count(*) Ends With $`` Ends With {7} End In Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) In Reduce(``=12 Starts With $#usn7,`6esn` In 00|False Contains $#usn8 Contains 9e1) As `` Foreach(`2esn` In Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)]| Create Unique usn2=((:`7esn`{999})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"})) With  *,$@usn5 In 's_str' In $12 As `2esn`,Count ( * )[{12}..{@usn5}][{#usn8}..Null] As `5esn` Order By {12} Contains 9e0 Descending,`5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] Descending Skip [usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] Where $#usn7[..@usn6][..$0])"),
    octest_legacy:ct_string("Unwind None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] As _usn3 Start `4esn`=Rel:`7esn`(usn2='s_str')  Create Unique _usn3=(((`7esn` :#usn7{`5esn`:_usn4 Is Null Is Null})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})-[{``:\"d_str\"[{`8esn`}..]}]-(:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]}))),#usn8=(((:@usn5{@usn6:{7} Contains $123456789})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})))"),
    octest_legacy:ct_string("Start @usn6=Relationship:_usn3({`2esn`}) ,`7esn`=Node:usn2(usn2='s_str')Where 7 Contains $`` Contains {`6esn`} Remove [$7 Is Not Null,Count(*) Ends With 123.654 Ends With $12,$`1esn`[07]]._usn3,[9e12 Ends With 123456789].`1esn`!,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6? Union Remove {usn2:_usn4 Is Null}.`7esn`,Case When ``[{123456789}..] Then `1esn` =~1000 =~1000 End._usn4?,{`4esn`}.`2esn`? Unwind $0 Is Not Null As usn2 Start usn1=Node:`6esn`({`8esn`}) Where 07[..`6esn`][..'s_str']"),
    octest_legacy:ct_string("Remove Reduce(#usn8=$#usn7 =~{12} =~False,`1esn` In `3esn`[07..]|{usn2}[$`4esn`]).`4esn`,(_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]}).``!,Extract(`6esn` In 00 Where 0Xa[0e0..{#usn7}]).@usn6! Unwind Count ( * )[\"d_str\"][_usn3] As `5esn` Union Load Csv With Headers From 's_str'[$usn2][Count(*)] As `5esn`  Remove {`5esn`:01234567[..9e1]}.#usn8!,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $`8esn`[..$999][..0]].@usn6!,None(#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}).`6esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 123.654 Starts With $`` As `7esn`  Create (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),(((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))) Load Csv With Headers From 0.12[999][$#usn8] As usn1 "),
    octest_legacy:ct_string("With  2.12 =~0x0 =~_usn4 Limit [123456789[0..]] Ends With Any(`1esn` In $12 Is Not Null) Ends With @usn5(Distinct 1.e1[{#usn8}],123.654 Ends With usn2 Ends With 0) Where `3esn`[..{_usn4}][..{@usn5}] Create `7esn`=Allshortestpaths(((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))),@usn6=((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-(#usn8 {#usn7:$1000 Is Not Null Is Not Null})) Union Optional Match ((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})-[`2esn`?:`` *999{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12}]-(usn2 {`7esn`:{usn1}[$`8esn`..0.0]})) Where `3esn`[..{_usn4}][..{@usn5}] Remove (_usn4 :#usn8{`5esn`})-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`).usn2?,usn2($123456789[$`5esn`][$_usn4],#usn7 Starts With $999).@usn5? Create Unique `6esn`=(`4esn` {`2esn`:@usn5[$12..\"d_str\"]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})"),
    octest_legacy:ct_string("Create Unique (((:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})<-[:``]-(_usn3 :`7esn`)<-[ *0xabc..7]->({#usn7:123456789[0..]}))),((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})) Union Match Allshortestpaths((({`5esn`:0Xa[0e0..{#usn7}]})<-[?:``]-(`7esn` :`3esn`:`6esn`))),(usn1 :usn2:`2esn`{`1esn`:{123456789}[12..][$12..]}) Using Index `1esn`:`4esn`(`1esn`) Where $_usn3[{999}]"),
    octest_legacy:ct_string("Merge #usn8=((#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})) On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False On Match Set @usn5 =`2esn`[$1000..9e12][{#usn8}..{7}] Create Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})))"),
    octest_legacy:ct_string("Foreach(_usn3 In 123456789[12..$`4esn`]| Detach Delete {`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}[Case When 1.e1[0X0123456789ABCDEF..] Then `6esn`[..{999}] When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} End..Filter(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)],Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})]) Unwind `5esn`[..9e0][..01234567] As @usn5 Create Unique @usn6=Shortestpath(((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))),((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) Union All Optional Match Allshortestpaths(({`4esn`:#usn8 Is Null})) Using Index `3esn`:#usn8(`2esn`) Using Scan `1esn`:`3esn` Unwind `7esn`[{7}..@usn5] As @usn5 Union All Merge `8esn`=((`5esn` )) On Match Set (:usn1:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})-[`7esn`]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}).``? =$`2esn`[{usn1}..],None(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e12 =~$_usn4).`7esn`! =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] On Create Set _usn4+=0.12[Count(*)..][$#usn7..],None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =[$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null Start @usn6=Node:@usn5({usn1}) ,#usn8=Node:`6esn`(#usn8={@usn5})Where {7} Starts With $usn1 Starts With 1.0"),
    octest_legacy:ct_string("With Distinct *,$@usn5 In 's_str' In $12 As `2esn`,Count ( * )[{12}..{@usn5}][{#usn8}..Null] As `5esn` Order By $@usn5[..usn2][..$#usn7] Descending,7[..$`1esn`][..00] Desc,{0}[{@usn6}..{123456789}] Asc Limit {`4esn`:`7esn` Contains `5esn` Contains 0X7} Ends With Allshortestpaths((`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4)) Where ``[..0X0123456789ABCDEF] Union All Unwind 9e0[#usn8] As `2esn` Union All Delete $usn2,`8esn` Is Null Is Null"),
    octest_legacy:ct_string("Match `5esn`=Shortestpath(((#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]}))),@usn6=((usn1 :`8esn`:@usn5{`1esn`:{#usn7} Contains 0.0 Contains $0,`2esn`:.e12[010..$123456789]})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})<-[?:usn2|#usn7]->(#usn8 :#usn7)) Using Index usn2:``(#usn8) Using Join On ``,usn1,usn2 Where @usn5 In 1e1 Start `7esn`=Node:usn1({999})  Delete 1000 Is Not Null"),
    octest_legacy:ct_string("Detach Delete {@usn5}[..{_usn4}][..$@usn5],0Xa Is Not Null Is Not Null,{usn2}[`6esn`..01234567] Unwind #usn8['s_str'..][123.654..] As _usn4 Create _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})),`5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]})))"),
    octest_legacy:ct_string("Load Csv With Headers From {`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `6esn` Fieldterminator 's_str' With Distinct Reduce(#usn7={`1esn`} Starts With `4esn` Starts With {0},`3esn` In 123.654[1e1..][{#usn8}..]|9e12[$`5esn`]) As `3esn` Skip \"d_str\"[..0.e0] Limit ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]] Create Unique Allshortestpaths((#usn8 :`7esn`))"),
    octest_legacy:ct_string("Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Using Index usn1:usn1(`4esn`) Using Join On `3esn` Start @usn6=Relationship:`1esn`({@usn5})  Union All Load Csv From Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) Starts With [{@usn6} Contains 123.654 Contains 01,$`2esn` Starts With {`8esn`} Starts With {usn1}] Starts With All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]) As `5esn`  Remove {_usn4:12.e12[2.12..][0xabc..],_usn4:$_usn4[{``}..][1e1..]}.`5esn`!,[$7[{`1esn`}],$_usn4[$`4esn`..$12]].`2esn`? Union Remove Filter(`1esn` In `3esn`[07..] Where {0} =~12.0).``!,{usn2:$`5esn`[`4esn`][_usn3]}.@usn6?"),
    octest_legacy:ct_string("Detach Delete @usn5 In 1e1,[$@usn6 Contains `7esn`,$_usn4[{``}..][1e1..]][..{usn1:0e0[0X0123456789ABCDEF..010][$@usn6..010]}][..usn2(Distinct 1e1[..01],$123456789 Is Not Null)] Union Create Unique #usn7=Allshortestpaths(((#usn8 :@usn5)<-[_usn3{@usn6:{7} Contains $123456789}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1}))),usn1=Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Create #usn8=(:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`}),Shortestpath((:`2esn`{`6esn`:@usn6[{0}..]})<-[usn2?:usn2|#usn7]->(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Union Create Unique (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Merge `3esn`=(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}) On Match Set `7esn`+=False[..[`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]|\"d_str\" Contains @usn6 Contains 12.e12]][..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End],#usn8 =.e12[\"d_str\"..][.e1..]"),
    octest_legacy:ct_string("Foreach(#usn8 In 0.0 Is Not Null| Optional Match #usn7=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where #usn7 Starts With 1000 Starts With .e1 Match `5esn`=Shortestpath((_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})<-[@usn5?:`8esn`|:_usn4 *0X0123456789ABCDEF{usn1:False Contains $#usn8 Contains 9e1}]->({@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]})),`8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})) Using Index @usn5:usn2(`6esn`)) Create Unique usn1=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),`7esn`=(`3esn` :`4esn`:@usn6{`5esn`:$`2esn`[$usn2..][{``}..]})-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]-(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[@usn6?:`2esn`]->(_usn4 :`6esn`:`8esn`$``) Union All Unwind Null[010..][{``}..] As `3esn` Remove Case #usn8[`7esn`..] When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then {0}[False..@usn5] End.usn1,None(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12).`8esn`,({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Remove Extract(_usn4 In `2esn` Where 123.654 Starts With $``).usn2 Union Merge `2esn`=Shortestpath(((_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})-[?:#usn7|`2esn` *0x0..]->(usn1 :#usn8{``:$7[{`1esn`}]})-[#usn7? *..0Xa{usn1:$`6esn`[`8esn`][0.0],`5esn`:$`6esn`[{`3esn`}..12]}]-(#usn7 :#usn8))) On Create Set {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}.`7esn`! =$usn1[False][999] On Match Set _usn3 ={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null,Reduce(usn2=.e1[..\"d_str\"],#usn7 In 123.654 Starts With $``|0Xa[$1000..$123456789]).@usn6 ={`2esn`}[Count(*)],`2esn`+=[{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] With  `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By \"d_str\"[Count ( * )..`6esn`] Desc Skip 9e1 Ends With $@usn5 Ends With $123456789 Limit $`8esn`[0e0..] Where {999} Starts With {_usn4} Starts With 00"),
    octest_legacy:ct_string("Return *,Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `7esn` Starts With 0X7 Starts With $`7esn`) Is Not Null As `2esn` Order By Null[010..][{``}..] Desc,`3esn`[_usn4..{0}][`5esn`..usn2] Desc,{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] Ascending Skip Null =~12e12 Union All Delete Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],{`3esn`}[{`5esn`}] Create Unique #usn8=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),Shortestpath(((`1esn` :`4esn`:@usn6))) Union All Foreach(`3esn` In 's_str'[_usn4..0x0]| Optional Match Shortestpath((usn1 :usn1:_usn4)),`8esn`=Allshortestpaths(((`8esn` :@usn6))) Using Index #usn7:usn1(``) Using Scan #usn7:_usn3 Where $`` In 0 In {1000})"),
    octest_legacy:ct_string("Delete $12 Starts With $`8esn` Foreach(@usn6 In 1.e1[0xabc..]| Delete .e1[@usn5]['s_str'],Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Unwind {12}[$`3esn`] As `6esn`) Union All Start `4esn`=Node:`4esn`(\"d_str\") Where {#usn8}[#usn7..{`2esn`}] Detach Delete $`` In \"d_str\",$12[{7}..0X0123456789ABCDEF] Foreach(#usn8 In _usn4[..``][..{``}]| Return Distinct *,{#usn7} Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn`|.e1 Ends With 0Xa Ends With .e1) As `5esn`,123456789 Is Not Null Is Not Null As #usn7 Skip {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Detach Delete Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..],`6esn`[00..][$123456789..],$usn2 Ends With $`5esn`)"),
    octest_legacy:ct_string("Match _usn4=((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`))),((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}))) Using Index usn1:``(#usn7) Using Index `3esn`:#usn8(`2esn`) Where 7 Contains $`` Contains {`6esn`} Optional Match Allshortestpaths((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Optional Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))),`6esn`=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) Union Remove Allshortestpaths((({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2}))).@usn6,_usn4:`8esn`:@usn5 Start #usn7=Relationship:usn2(_usn3='s_str') ,`4esn`=Node:`7esn`(``={usn2}) Match ((`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})-[?:`1esn`|:`3esn` *999{usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]}]->(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})),(({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})-[`6esn`:`8esn`|:_usn4]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) Using Scan `8esn`:#usn7 Using Scan `1esn`:`4esn` Union Detach Delete {@usn5}[..{_usn4}][..$@usn5],Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Optional Match Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))) Where 1000 Is Not Null Unwind $`` In `7esn` As `7esn`"),
    octest_legacy:ct_string("Load Csv From Reduce(usn1=1e1 Contains usn2,`8esn` In $12[{7}..0X0123456789ABCDEF]|#usn7 =~{`4esn`} =~123456789) Contains `3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) As @usn6 Fieldterminator 's_str' Union Unwind All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..] As @usn6"),
    octest_legacy:ct_string("Foreach(usn2 In usn2(Distinct 0Xa[..{1000}][..$#usn7])[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000|\"d_str\"[{`8esn`}..])][(`4esn` :`1esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]->(#usn7 )]| With Distinct *,`7esn` Contains `5esn` Contains 0X7 As `1esn` Order By usn2 Ends With Count ( * ) Ends With $@usn6 Asc,.e1 Ends With 0Xa Ends With 00 Ascending Where 123.654 Starts With $``) Foreach(`4esn` In `6esn`[$0][#usn8]| Detach Delete $`` In `7esn`) Match #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))),Allshortestpaths((((:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})))) Using Scan `4esn`:_usn4 Union All Foreach(usn1 In {`2esn`}[@usn5..][{``}..]| Load Csv From {_usn3}[`3esn`..$#usn8] As `4esn` Fieldterminator 's_str') Union Remove `3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]).@usn6,Reduce(`4esn`=$`7esn` Contains {`1esn`} Contains 9e12,`` In {usn1} Ends With {`6esn`} Ends With 123456789|.e12[$7..][{`6esn`}..]).usn1?"),
    octest_legacy:ct_string("With Distinct #usn7[..12e12] Limit {@usn5} Starts With 1.0 Starts With 00 Where $1000 Is Not Null Is Not Null Merge _usn4=Shortestpath(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) On Match Set usn2 =#usn7 Starts With $999,usn1+={@usn6}[True..{_usn3}] On Create Set @usn5+=$@usn6 Ends With 01 Ends With 999,`3esn` =0.e0 =~`1esn` =~`6esn` With Distinct {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn` Order By Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} Ascending,`8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]] Desc Limit None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Where {`1esn`} Starts With `4esn` Starts With {0} Union All Load Csv With Headers From @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn6  Union All Create `1esn`=((`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})-[:`1esn`|:`3esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->({`2esn`:#usn8 Is Null,`6esn`:123456789 Ends With usn1 Ends With usn2})<-[#usn8? *0X7..0Xa$`2esn`]-({`7esn`:123456789[0..]})),usn1=Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}))"),
    octest_legacy:ct_string("Foreach(@usn6 In (:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Reduce(`5esn`=.e12[$#usn8..@usn6],usn1 In 12.e12 In {0} In 9e1|Count(*)[.e12])| Load Csv With Headers From $`3esn` In 9e12 In `` As `6esn` Fieldterminator 's_str' Detach Delete {usn2:{`1esn`} Is Not Null} Is Null,0.0 In `6esn` In $@usn5,[{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null]) Create Unique @usn5=(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})<-[?:`6esn` *01..07]->(:usn2:`2esn`{`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12}) Union Optional Match `5esn`=Allshortestpaths(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]}))) Using Index usn1:`3esn`(`3esn`) Using Scan `2esn`:`2esn` Where Count(*) Is Not Null"),
    octest_legacy:ct_string("Unwind 9e1[$_usn4..0xabc] As `8esn` Create ``=((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 )),`6esn`=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) Return Distinct $@usn6 Ends With 01 Ends With 999 Skip {_usn3} Contains 9e0 Contains $999 Limit Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`)"),
    octest_legacy:ct_string("Create ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})) Match Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})) Using Scan _usn3:`4esn` Using Scan `2esn`:`1esn` Where $123456789 Starts With $123456789 Starts With Count ( * ) Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\" Union All Foreach(`6esn` In _usn3 =~123.654| Create Unique ((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})),``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) Remove (usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[`7esn`? *0X0123456789ABCDEF{@usn6:12 Starts With {_usn4} Starts With $#usn8}]-(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`5esn`) Merge Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) On Create Set None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =0X0123456789ABCDEF[$`5esn`..],(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[_usn3?:`1esn`|:`3esn`{`3esn`:$@usn6 Contains $`7esn` Contains 1e1,@usn5:True Starts With $`4esn` Starts With 12e12}]-(`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]})<-[`3esn`?*{#usn8:$`1esn`[..{_usn3}]}]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}).`8esn`? =$12 Is Not Null Create (((_usn3 :`3esn`:`6esn`)<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[?:#usn8|`2esn` *01..07]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))),`4esn`=((`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})-[_usn4?:`3esn`|:@usn5]->(`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})) Union All Start @usn6=Rel:usn1(@usn6=\"d_str\") Where @usn5 Is Not Null Is Not Null Create Unique ((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})))"),
    octest_legacy:ct_string("Foreach(`` In Extract(`6esn` In 00 Where 9e1 Ends With $@usn5 Ends With $123456789) Ends With All(usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * ))| Match _usn4=Shortestpath((`6esn` :`2esn`{`7esn`:#usn8 =~{999}})),(((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))) Using Index ``:`1esn`(_usn4) Using Index _usn3:_usn3(`6esn`) Where 123.654[1e1..][{#usn8}..]) Union All Merge usn2=Allshortestpaths((({`1esn`:{123456789}[12..][$12..]})<-[``{_usn4:.e1[..\"d_str\"]}]-({@usn5:Count ( * ) Is Null})<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) On Create Set Any(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `2esn` Starts With `` Starts With 1e1)._usn3! =$@usn6[$0..usn1][0X0123456789ABCDEF..$999],`4esn`+={#usn7} Ends With 12e12 Ends With {123456789} Delete $`1esn` Starts With 9e1 Starts With 1.e1,$@usn6[$0..usn1][0X0123456789ABCDEF..$999],[`6esn` In Count(*) Ends With $`` Ends With {7} Where {`3esn`} Ends With `1esn` Ends With $@usn6][None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where {`4esn`}[..{`4esn`}])..] Union With  Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}),@usn6 Contains Null As `2esn`,00 =~0.e0 =~$`8esn` Order By `5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] Ascending,#usn7[9e0] Asc,{`5esn`} Starts With 12.0 Desc Limit {@usn5}[Count(*)..] Create Unique Allshortestpaths((@usn6 :usn1:_usn4)),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})"),
    octest_legacy:ct_string("Merge Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] On Create Set (@usn5 :usn1:_usn4)-[``?:#usn7|`2esn`{`5esn`:123456789 Starts With {@usn6} Starts With $12}]->(`7esn` {@usn6:{_usn4} Is Null}).`2esn`! =07[$#usn8],Case When $7 Ends With $`8esn` Then .e12 Contains $`1esn` Contains $@usn6 End.`8esn`! =$`6esn`['s_str'..][{_usn4}..],`2esn` ={usn1:$`8esn` In $`2esn` In {7},`7esn`:{`2esn`} In $123456789 In True}[..(:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]-(`3esn` :`7esn`)-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`)][..Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)] Union With Distinct (@usn5 {`2esn`:1.e1 =~9e12 =~`4esn`})<-[@usn5?:usn1 *..010{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}]->(`8esn` :`1esn`{usn2:0.0 Is Not Null,usn2:0.12[Count(*)..][$#usn7..]})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]}) In Case When .e0[True..Count ( * )][#usn7..0X7] Then $@usn5[`6esn`..] When 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Then $`1esn`[#usn8][$@usn5] End In @usn6(`` Ends With $`4esn` Ends With 0X0123456789ABCDEF),{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0},$`2esn` Ends With 0.12 Ends With .e1 As `` Order By Case $123456789[..$7][..$`6esn`] When 0.e0 Contains #usn7 Then {`6esn`} Contains 07 When {_usn4} In {1000} Then ``[..$#usn7] End[Shortestpath((usn1 :usn1:_usn4))..][Reduce(@usn6={`4esn`} Starts With $7 Starts With $``,`` In {usn1} Ends With {`6esn`} Ends With 123456789|$`6esn` Starts With 12.e12 Starts With $#usn7)..] Descending,'s_str'[_usn4..0x0] Descending Skip 12.e12 Starts With 1000 Starts With 's_str' Where $#usn7[`5esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From $`2esn`[{usn2}] As #usn8  Create `3esn`=Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) Unwind Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] As #usn7"),
    octest_legacy:ct_string("Create Unique (_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),`5esn`=Shortestpath(((#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(`` {``:0x0 =~123.654 =~{999}}))) Merge Shortestpath((_usn4 :#usn7{`8esn`:$999 Contains {7}})) Union Create usn1=Allshortestpaths((`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})),#usn7=Allshortestpaths((({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))) Create Unique `8esn`=(((`4esn` :usn2:`2esn`)-[`8esn`?:`4esn`|:#usn7]->({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})))"),
    octest_legacy:ct_string("Load Csv With Headers From `3esn` Starts With Count(*) As `3esn`  Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As `1esn`  Remove usn2(Distinct 1e1[..01],$123456789 Is Not Null).@usn6"),
    octest_legacy:ct_string("Return *,None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) In usn1({`1esn`} Starts With @usn6),$`8esn`[0e0..] As @usn5 Limit 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF"),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv From .e12[..{0}][..Null] As usn1 Fieldterminator \"d_str\" Merge `1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) On Create Set [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07].`6esn`? ={#usn8} Ends With 1.0 Ends With 12.0,`4esn` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Foreach(#usn7 In $usn1[0X7]| With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $`6esn` Starts With 12.e12 Starts With $#usn7 With Distinct $#usn8 Is Null Is Null,Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))),{7} Is Null As `7esn` Order By [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null Asc,{@usn5} =~_usn4 =~0.12 Desc Limit #usn7 Contains {`3esn`} Contains $`6esn` Where 12e12 Ends With `6esn` Ends With {`3esn`})"),
    octest_legacy:ct_string("Detach Delete $`1esn` Ends With {12} Ends With 0xabc,7 Is Null Is Null,`4esn`[{1000}][{`5esn`}] Foreach(`3esn` In `3esn`[07..]| With  *,0e0 Starts With $@usn6 Starts With $`6esn` As `7esn` Skip 0X7 Is Not Null Is Not Null Limit `` =~`6esn` =~usn1 Where 0e0[0X0123456789ABCDEF..010][$@usn6..010] Delete 1e1[..$1000][..999],Reduce(usn1=``[00..$7],`5esn` In $`2esn`[12.e12][$@usn5]|12 Starts With 0x0)[Any(#usn7 In 123.654 Starts With $`` Where 's_str'[_usn4..0x0])][Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where True[True..]|$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF)]) Load Csv With Headers From $usn1 In 01234567 In .e1 As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return #usn7 Starts With $999,1e1[..`1esn`][..0e0] Limit (:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Reduce(`5esn`=.e12[$#usn8..@usn6],usn1 In 12.e12 In {0} In 9e1|Count(*)[.e12]) Foreach(`8esn` In Extract(#usn7 In 123.654 Starts With $`` Where #usn8[`7esn`..]|0.0[..{999}][..0.0])[..Extract(`1esn` In `3esn`[07..] Where 00[07..]|$#usn7 Starts With 9e0 Starts With 2.12)][..None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])]| Unwind `5esn`[..9e0][..01234567] As @usn5 Remove Filter(`6esn` In 00 Where 0.12[..$`6esn`][..$1000]).#usn8!,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6?) Union All Merge _usn4=((`8esn` :@usn6)) Union All Unwind 123456789 Starts With {@usn6} Starts With $12 As `8esn` Start _usn3=Node(01,0x0,0X7,0X7) ,`2esn`=Relationship:_usn4(usn1={_usn4})Where $`8esn`[..$999][..0] Remove {usn2:123.654[{`7esn`}][{7}],#usn8:$0[..{usn2}][..$usn1]}.usn2?"),
    octest_legacy:ct_string("Unwind Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Ends With @usn5(Distinct {0} Is Null) Ends With {`6esn`:`3esn`[..{_usn4}][..{@usn5}],`2esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]} As _usn4 Remove {`8esn`:False Ends With $``}.`3esn`,Case {usn1}[$7..0x0] When {``}[010] Then True =~_usn3 =~123456789 When @usn6[$12] Then {`4esn`} Starts With $7 Starts With $`` End.`7esn`!"),
    octest_legacy:ct_string("With Distinct 12.e12[$`8esn`..{`8esn`}] As `7esn` Order By 07[$`2esn`..0x0] Ascending,$`8esn` Is Null Is Null Desc,`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] Asc Limit .e1[..{`7esn`}][..{_usn3}] Load Csv With Headers From None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `8esn` Fieldterminator 's_str' Start `5esn`=Rel( {_usn4}) "),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))),@usn6=((usn2 :_usn3)-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) Start `6esn`=Relationship:usn2({`5esn`}) Where `7esn`[0..$usn2][{usn2}..0.e0] Create Unique usn1=(((usn2 )<-[ *0xabc..7]->(:`4esn`:@usn6)<-[usn2?:usn2|#usn7]->(`3esn` :_usn4))),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})"),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv With Headers From All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null As usn2  Foreach(_usn3 In {`3esn`} =~$7| Delete {1000}[{``}][999],`4esn`[{1000}][{`5esn`}]) With Distinct `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By @usn6[$usn2..#usn7] Ascending,{`3esn`} Ends With 0 Ends With 9e1 Desc Limit {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}[..({``:.e1 Contains $`3esn`})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})]"),
    octest_legacy:ct_string("Unwind 9e12 Is Not Null Is Not Null As @usn5 Create (({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)) Merge ((`5esn` :@usn6)<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})) On Create Set _usn4+=Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null)[..Reduce(`1esn`=$`3esn` In 9e12 In ``,`2esn` In {999} Is Not Null|$@usn5[..usn2][..$#usn7])],Shortestpath(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))).`7esn`! =1e1[{_usn4}..123.654] On Match Set `1esn`+=`2esn` Starts With `` Starts With 1e1,Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End.`3esn` =$0 Ends With False Ends With $_usn4"),
    octest_legacy:ct_string("Remove [_usn3 In {@usn5}[..#usn7] Where True Is Null Is Null|Count(*) Ends With $`` Ends With {7}].`3esn`?,{@usn5:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12],@usn6:Count(*)[.e12..]}.`2esn`? Union Load Csv With Headers From $1000[{`6esn`}..] As _usn3 Fieldterminator 's_str' Detach Delete {999}[$123456789..][12..],$`6esn`[..1.e1][..1e1]"),
    octest_legacy:ct_string("Create _usn4=Allshortestpaths((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),((`2esn` :#usn8)<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})) Detach Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`])[(`3esn` :#usn7{`6esn`:{_usn4} Is Null,usn2:{`2esn`} Starts With @usn6})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)<-[@usn6?:`7esn`]->(:`2esn`{#usn7:#usn8 =~{999}})..Shortestpath((`8esn` {_usn4:{usn1} In Count ( * )})<-[`6esn`?]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})<-[@usn6?:`7esn`]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}))][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12])..[`1esn` In $12 Is Not Null Where {usn1} In Count ( * )|$`3esn`[{``}..]]],{usn2}[`6esn`..01234567],All(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7]) Contains Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End Contains Reduce(`6esn`={_usn4} In {1000},usn1 In 12.e12 In {0} In 9e1|{`4esn`} Starts With $7 Starts With $``) Create Unique Allshortestpaths((:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})),#usn8=Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) Union Detach Delete `` Is Null Is Null,{`4esn`}[{`1esn`}][{1000}] Optional Match #usn7=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where #usn7 Starts With 1000 Starts With .e1 Create Unique `5esn`=((`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}}))"),
    octest_legacy:ct_string("Create Unique _usn3=Allshortestpaths((((:`3esn`:`6esn`)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[:`8esn`|:_usn4 *999{_usn3:9e1 =~999}]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]})))),Allshortestpaths((((:`7esn`{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})<-[?:_usn3|`8esn` *1000]-(:``)))) Detach Delete False[1000][{`7esn`}] Union Optional Match @usn5=Allshortestpaths((@usn6 :usn1:_usn4)<-[?:@usn6|`` *..01234567]->(#usn8 {usn1:$123456789 Starts With `5esn`})-[? *01..07]->(`8esn` :#usn7)),`8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan usn2:`5esn` Where 123.654[{@usn5}..123.654][1.0..$12] Load Csv With Headers From 0X0123456789ABCDEF Is Null Is Null As ``  Union All With  {`3esn`} =~[1.e1 =~$usn2] =~Filter(`6esn` In 00 Where `5esn`[..9e0][..01234567]) Limit {#usn8} =~{999} =~{#usn7} Where $_usn3[010..False]"),
    octest_legacy:ct_string("Delete #usn7 =~00 Start #usn8=Node:``(`1esn`={`2esn`})  Foreach(`5esn` In Extract(_usn4 In `2esn` Where 1.0[{999}][$999]|$`8esn` In $`2esn` In {7})[[{`8esn`}[0X7][$`3esn`]]][(`5esn` :`3esn`:`6esn`)-[`8esn`?:`4esn`|:#usn7{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})]| Create (`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`),(((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})))) Union All Remove {#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}.#usn8"),
    octest_legacy:ct_string("Unwind $`3esn`[..$`2esn`][..123.654] As `1esn` Foreach(#usn8 In 12 In 0e0| Unwind {`4esn`}[{`1esn`}][{1000}] As #usn7 Delete $`7esn` In 12) Unwind False Starts With 010 As @usn5"),
    octest_legacy:ct_string("Start #usn7=Node:#usn7('s_str') Where {12}[00..{@usn6}][1.e1..0] Union All With Distinct $@usn6 Ends With 01 Ends With 999 Skip {_usn3} Contains 9e0 Contains $999 Limit Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Where 12.e12[`7esn`] Remove [`1esn` In $12 Is Not Null].`6esn`? Union All Create Unique usn2=Allshortestpaths((({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))) Start `1esn`=Rel:@usn5({usn1}) Where 7[$0..][{_usn4}..] Foreach(usn2 In {`7esn`}[..9e12][..0.0]| Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As `1esn`  Delete {@usn5}[..@usn6],0e0 Contains `3esn` Contains `7esn`,1.e1 Ends With 0 Ends With $usn1)"),
    octest_legacy:ct_string("Detach Delete False Ends With $``,{_usn4}[..$#usn7] Start _usn3=Relationship:#usn7({`4esn`}) Where ``[..0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Detach Delete $usn2 Is Null Is Null,`3esn` =~9e0 =~@usn6,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null Union Remove Allshortestpaths(((_usn3 :#usn8{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]}))).`8esn`! Remove Shortestpath((({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))).#usn8!,({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`5esn`?,[{`6esn`}[..{`2esn`}],$`8esn`[..$999][..0],`3esn` Is Not Null Is Not Null].`1esn`? Return Distinct *,010 Is Not Null Is Not Null As #usn7,123456789[12..$`4esn`] As `7esn` Order By $_usn3[..$`2esn`][..\"d_str\"] Desc Limit `` Is Null Is Null Union Load Csv With Headers From Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1) As `2esn` Fieldterminator \"d_str\" Remove (:@usn5)-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).`4esn`!,Extract(`6esn` In 00 Where 12e12 Is Not Null Is Not Null|`1esn`[Null..]).usn1"),
    octest_legacy:ct_string("Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $#usn7[$`4esn`]].@usn5,[`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`|$7 Is Null].@usn5!,_usn3:`2esn` Union All Detach Delete $``[01],{999} In 0.0 In {0}"),
    octest_legacy:ct_string("Remove [{usn1} Ends With {`6esn`} Ends With 123456789,$usn1[@usn6][#usn7]].`2esn`!,Reduce(`4esn`=$1000 Starts With $`8esn` Starts With {`5esn`},`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`8esn`}[True..][.e1..]).`3esn`! Create Unique #usn8=Shortestpath(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Union All Remove None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000).`2esn`? With Distinct {#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null As `8esn`,Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4])[Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End] As `7esn`,{_usn4} In {1000} As `1esn` Order By $@usn5[`1esn`..] Desc Limit #usn8['s_str'..][123.654..] Where 's_str' Starts With 12e12 Starts With $_usn4"),
    octest_legacy:ct_string("Foreach(#usn7 In 9e12 Is Not Null Is Not Null| Remove [{#usn8}[#usn7..{`2esn`}],{1000},{@usn5}[1e1..][9e1..]].@usn6,[`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]].`6esn`?) Create _usn3=Shortestpath((:_usn3{`3esn`:{0} Is Null,#usn7:{0} Is Null})-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5)),Shortestpath(((`6esn` :@usn5)<-[`7esn`?:`2esn` *..0Xa{usn1:.e1 Ends With {7} Ends With $usn1}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}))) Union Start #usn7=Node:`1esn`(\"d_str\") Where $_usn3[010..False] Foreach(#usn7 In {@usn6} Contains 123.654 Contains 01| Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6 Delete Filter(#usn7 In 123.654 Starts With $`` Where Count(*)[010..][#usn7..])[None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0})..])"),
    octest_legacy:ct_string("Return Distinct *,{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] As `4esn` Skip `2esn`[usn2..][$7..] Union Remove Allshortestpaths(((:`8esn`:@usn5{@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2],``:{`7esn`} Is Not Null Is Not Null})-[?:#usn7|`2esn` *123456789..0X7{@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}]->(`8esn` ))).usn1! Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12].`2esn`,[usn1 Contains $7 Contains $``,$@usn5 In 's_str' In $12,$`1esn` Is Not Null Is Not Null].usn2!,All(`1esn` In `3esn`[07..] Where 999 Starts With 's_str').#usn8! Remove (`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})._usn3?,(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}).usn2!,[$usn1[0X7],7[1000.._usn3][9e0..\"d_str\"],0X7 Starts With {999} Starts With 12e12].`7esn`!"),
    octest_legacy:ct_string("Remove None(_usn4 In `2esn` Where 9e12 Ends With 123456789).`7esn`! Return Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],0e0[{_usn3}..],.e1[..{`7esn`}][..{_usn3}] Skip {`2esn`}[12..][{_usn3}..] Create Unique usn2=((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[ *0X7..0Xa]->(@usn6 :`2esn`)<-[`2esn`?:@usn6|`` *..00]->({_usn3})),`8esn`=Allshortestpaths((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Union Return Distinct 0X0123456789ABCDEF[0X7..] As `4esn`,7 Contains 9e0 As `4esn`,0x0 Ends With {``} As `7esn` Skip 1.e1 Is Null Limit 0Xa[1000.._usn4] Start usn2=Relationship( {#usn7}) "),
    octest_legacy:ct_string("With  *,[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999),Count(*) Starts With $usn1 Starts With {usn2} As @usn6 Limit Reduce(`6esn`=7[$0..][{_usn4}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)[[$#usn7[`5esn`],Count(*) Ends With 123.654 Ends With $12,$#usn7[..@usn6][..$0]]] Where $_usn4 Is Not Null Is Not Null With  *,{#usn7} Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn`|.e1 Ends With 0Xa Ends With .e1) As `5esn`,123456789 Is Not Null Is Not Null As #usn7 Skip {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Where $``['s_str'..][0x0..] Create #usn8=(`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`) Union Unwind 0e0 Starts With $@usn6 Starts With $`6esn` As _usn4 Union Start @usn5=Node:``(#usn7=\"d_str\") ,`3esn`=Node:usn1('s_str')Where {`3esn`}[{`5esn`}] Create Shortestpath(((`4esn` :`2esn`)<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})))"),
    octest_legacy:ct_string("Merge Shortestpath((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[#usn7?:#usn8|`2esn`]-(usn2 {`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})) On Create Set `1esn`+=010 In $`5esn` In 0,[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null].@usn6? ={@usn6} Contains 123.654 Contains 01,@usn5 =$#usn7 =~{12} =~False On Create Set usn1+={usn1}[{`5esn`}..],Case {0} Is Null When $0 Is Not Null Then #usn8 Is Not Null When 12.e12[{@usn5}..][9e1..] Then `2esn`[$1000..9e12][{#usn8}..{7}] End.`6esn` =#usn8 =~{_usn3} =~``,`7esn`+=12e12 Ends With `4esn` Ends With 123456789 Delete $0 Starts With `2esn`"),
    octest_legacy:ct_string("Create Unique usn1=(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]})-[`3esn`:`6esn`{`3esn`}]-(@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]}) Union Start _usn4=Rel:_usn3('s_str')  Foreach(_usn4 In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| Create (((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})-[`4esn`?:``{usn2:12e12 Ends With `4esn` Ends With 123456789}]->(:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))),(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))))"),
    octest_legacy:ct_string("Create `6esn`=((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->({``:.e1 Contains $`3esn`})) Union Match `1esn`=((`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})-[:`1esn`|:`3esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->({`2esn`:#usn8 Is Null,`6esn`:123456789 Ends With usn1 Ends With usn2})<-[#usn8? *0X7..0Xa$`2esn`]-({`7esn`:123456789[0..]})),usn1=Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})) Using Index @usn6:#usn8(_usn4) Using Join On _usn3,`` Where $`1esn`[#usn8][$@usn5] Start @usn5=Node:_usn4(``=\"d_str\") Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF"),
    octest_legacy:ct_string("Create Unique `7esn`=({#usn7:#usn8 =~{999}}) Optional Match ((`2esn` {_usn4:`4esn`[usn1]})<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(:_usn4)) Where {usn1} Ends With {`6esn`} Ends With 123456789 Union Match Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))),`5esn`=Allshortestpaths(((:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})<-[`8esn`?:`4esn`|:#usn7]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})-[usn2 *07{usn1:07 =~@usn5}]->({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))) Using Scan `1esn`:`3esn` Using Index @usn5:usn1(_usn3) Where {@usn5}[..{12}][..0x0] Delete {`3esn`} Ends With `1esn` Ends With $@usn6,{12} =~0.e0 =~{_usn3},[_usn4 In 0.0[..{999}][..0.0] Where ``[..0X0123456789ABCDEF]][Reduce(``=`6esn` Is Null Is Null,`2esn` In {999} Is Not Null|{12}[999][{_usn3}])..[_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]]] Match (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Using Scan `2esn`:#usn7 Where {#usn8} =~{999} =~{#usn7} Union Create Shortestpath((usn1 :usn1:_usn4)),Shortestpath((((#usn8 :@usn6)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})-[:`3esn`|:@usn5]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})))) Create (((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((:usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null})),_usn3=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Remove Allshortestpaths(((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7))).@usn6?,Reduce(`6esn`={usn2} =~@usn6 =~{`4esn`},_usn3 In {`2esn`} Ends With {12} Ends With 7|{_usn3} Contains True Contains 0X7)._usn3?,All(`6esn` In 00 Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]).`5esn` Remove [$7 Is Not Null,Count(*) Ends With 123.654 Ends With $12,$`1esn`[07]]._usn3,[9e12 Ends With 123456789].`1esn`!,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6? Union With Distinct 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0],_usn4(Distinct 9e12[$`5esn`],$_usn4[$`4esn`..$12]) Starts With [`` In {`1esn`} Starts With @usn6 Where {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]|$`` In 0 In {1000}] Starts With [_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``}] As `4esn` Order By @usn6[{0}..] Ascending Limit 9e12[$`5esn`] Where `1esn`[..\"d_str\"][..$`5esn`] Foreach(`` In $`2esn` Ends With `` Ends With {12}| Remove Case 1.0[{999}][$999] When 12 Starts With {_usn4} Starts With $#usn8 Then Count(*) Is Not Null Else 1000 Starts With `7esn` End.`1esn`,{`1esn`:$@usn6 Starts With {`1esn`} Starts With 12,usn2:$`5esn`[..{`2esn`}][..{0}]}.``!,{`5esn`:{#usn7} In Count ( * ) In $#usn8}.`7esn`! Match usn1=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),`8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) Using Scan `4esn`:#usn8) Union Start usn1=Node:`6esn`(#usn8={@usn5}) ,`3esn`=Node:`4esn`({#usn8})Where $`2esn`[12.e12][$@usn5]"),
    octest_legacy:ct_string("Remove Filter(`2esn` In {999} Is Not Null Where $usn1[$123456789..0][{`1esn`}..12.0]).`1esn`!,{usn2:_usn4 Is Null}.`7esn`,(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[@usn6:@usn6|``*{#usn8:{@usn5}[12.0..1000][{`3esn`}..{7}],`8esn`:07[..`6esn`][..'s_str']}]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[? *0xabc..7]->(`3esn` :`3esn`:`6esn`).usn2? Unwind ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..Case $1000 =~{1000} =~`5esn` When 9e1[9e1...e0] Then 00 Starts With $`6esn` When 123.654[1e1..][{#usn8}..] Then $`3esn`[{``}..] End] As `8esn` Remove Shortestpath((:_usn3{#usn7:#usn8 =~{999}})).#usn8,Any(#usn7 In 0Xa[@usn5][{`7esn`}]).`4esn`,Case When {1000}[{``}][999] Then `1esn` Is Null Is Null When Count(*)[.e12..] Then $#usn7[123.654] Else $1000 Starts With $`8esn` Starts With {`5esn`} End.usn1 Union All With Distinct Count ( * ) =~{`5esn`} =~{_usn4} As _usn3,Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)] As #usn8 Where {`3esn`} Ends With `1esn` Ends With $@usn6"),
    octest_legacy:ct_string("Remove Case When $7 Ends With 0X7 Then Count(*)[.e12..] Else 00 Ends With `8esn` End.``?,(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1}).`3esn`?,Filter(_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null).`8esn`! Start `4esn`=Node(01234567,0Xa,07)  Merge (:``$_usn4)<-[:`1esn`|:`3esn` *1000]->(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}) On Match Set #usn8 =(`8esn` :`5esn`:@usn5)<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5) Starts With None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]),@usn5 =$_usn4 Is Null Is Null Union All Detach Delete 07[`8esn`],Extract(@usn5 In Null =~12e12 Where $`5esn`[`1esn`][0X0123456789ABCDEF])[Shortestpath((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})))..All(#usn7 In 123.654 Starts With $`` Where $`5esn`[..{`2esn`}][..{0}])][Shortestpath((:`5esn`:@usn5{``:.e12 =~$_usn4})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`)<-[@usn5:_usn4|:usn1*]->(:@usn5))..All(`1esn` In $12 Is Not Null Where {``} Is Null Is Null)]"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv From {12}[999][{_usn3}] As usn2  With  $999[07..{#usn7}][1e1..0xabc] As #usn8,{1000}[{#usn8}] As `2esn` Skip `3esn` Contains $`6esn` Contains `8esn` Where 0.e0 =~`1esn` =~`6esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((@usn6 :usn1:_usn4)),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Load Csv From 0Xa In {usn1} In Null As `3esn` Fieldterminator 's_str' Union Load Csv From {1000} Ends With 0.12 As usn2 Fieldterminator \"d_str\" Union All Load Csv With Headers From Case When {1000}[{``}][999] Then `1esn` Is Null Is Null When Count(*)[.e12..] Then $#usn7[123.654] Else $1000 Starts With $`8esn` Starts With {`5esn`} End Ends With All(_usn4 In 0.0[..{999}][..0.0] Where #usn7 =~{`4esn`} =~123456789) Ends With [$#usn7 =~{12} =~False,@usn5[$12..\"d_str\"]] As `1esn` Fieldterminator \"d_str\" Create Unique ``=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(usn1 :`8esn`:@usn5)-[? *0x0..{`6esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-({`2esn`})),#usn8=Allshortestpaths((((_usn3 :`3esn`:`6esn`)<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[?:#usn8|`2esn` *01..07]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})))) Merge Shortestpath((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[#usn7?:#usn8|`2esn`]-(usn2 {`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})) On Create Set Case {`2esn`} Ends With {12} Ends With 7 When `8esn` Starts With {123456789} Then {`1esn`} Is Not Null Else {usn2}[$`4esn`] End.usn2 =12[..$@usn6],`6esn`+=$7[$`3esn`],#usn7 =``[$0..][`1esn`..] On Create Set `2esn` =Count(*) Ends With 0x0 Ends With 9e0"),
    octest_legacy:ct_string("Merge ((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})) On Create Set `4esn` ={999} Ends With {`5esn`} Ends With {0} Merge ((:`3esn`:`6esn`{`1esn`:12 Starts With 0x0})) On Match Set _usn3 =$`` Starts With 12 Starts With $usn2,@usn5+=$@usn6[$`8esn`..][7..] With Distinct *,#usn8 Is Not Null,$usn2 Starts With $@usn6 Starts With 010 As _usn4 Where $`1esn` Is Not Null Is Not Null Union Load Csv From .e12[$#usn8..@usn6] As usn2 Fieldterminator \"d_str\" Union Optional Match ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})) With Distinct Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..],`` =~`6esn` =~usn1 As `2esn` Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Limit 0X0123456789ABCDEF[0X7..] Where $123456789[..$7][..$`6esn`] Foreach(`8esn` In (:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})<-[`4esn`:@usn6|``{_usn4:Count ( * ) Starts With 010 Starts With 0x0,`2esn`:1.0 In 9e1 In {`7esn`}}]->(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})-[? *0X0123456789ABCDEF]-(_usn3 :`5esn`:@usn5)[Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01])..]| Start @usn6=Node(0x0) ,@usn5=Rel:`8esn`(`6esn`='s_str'))"),
    octest_legacy:ct_string("Foreach(@usn6 In {`5esn`}[1000..]| Remove Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999]|$_usn3[010..False]).`2esn`? Remove {`3esn`:@usn5[12.0][{1000}]}.`2esn`?,Single(`1esn` In $12 Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]).`2esn`?,``:`4esn`:@usn6) Remove {_usn4:0Xa Contains $``,@usn6:@usn6[$_usn4]}.@usn5,Filter(`1esn` In `3esn`[07..] Where 9e1[$_usn4..0xabc]).`5esn`!"),
    octest_legacy:ct_string("Start `5esn`=Relationship:`4esn`(#usn8=\"d_str\")  Delete 0X0123456789ABCDEF[`5esn`..][$#usn8..],`3esn` Is Not Null Is Not Null,0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] With Distinct *,{`8esn`}[..$`6esn`][..123.654],None(@usn5 In Null =~12e12 Where #usn8[`7esn`..])[{123456789}..][All(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0})..] Order By $0 Ends With False Ends With $_usn4 Descending,[0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Desc Limit `1esn`[`3esn`..True] Where {12} Contains `7esn` Contains $_usn3"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Where `1esn`[..00][..{7}] Create (:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`})"),
    octest_legacy:ct_string("Optional Match Shortestpath((({``:$7[{`1esn`}]})-[`8esn`?:`5esn` *12..{#usn7:$1000 Is Not Null Is Not Null}]-(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))),Allshortestpaths(()) Using Join On `1esn`,`7esn`,usn2 Using Scan `8esn`:#usn7 Where $_usn3[010..False] Union All Remove {usn2:123.654[{`7esn`}][{7}],#usn8:$0[..{usn2}][..$usn1]}.usn2? Delete {12} Contains `7esn` Contains $_usn3 Merge `1esn`=((:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})) Union Detach Delete {usn2:{`1esn`} Is Not Null} Is Null,0.0 In `6esn` In $@usn5,[{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null]"),
    octest_legacy:ct_string("Start @usn5=Node:``(#usn7=\"d_str\")  Merge Shortestpath((`7esn` :`1esn`)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6})) On Match Set `4esn` ={`5esn`}[$`8esn`..$`1esn`][0.12..0.12],`3esn` =[`8esn` In $12[{7}..0X0123456789ABCDEF] Where 2.12 In $`8esn` In {`7esn`}|12e12 Starts With `1esn` Starts With usn2] Contains Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8]) Contains #usn7({`7esn`}[9e1..][@usn6..],{usn2}[$`4esn`]) Union With Distinct {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn` Order By Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} Ascending,`8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]] Desc Limit None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Where {`1esn`} Starts With `4esn` Starts With {0} Merge ((_usn4 :`8esn`:@usn5)) With Distinct 0x0[{7}..] As `7esn`,$`5esn`[@usn5..][$``..],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)..Shortestpath(((_usn3 {@usn5:.e12 =~.e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))][Shortestpath(((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})))..Reduce(usn2=Null In .e0,_usn3 In {`2esn`} Ends With {12} Ends With 7|{0}[..{`7esn`}])] As usn2 Order By $_usn3[{999}] Ascending,1.e1 Ends With 0 Ends With $usn1 Descending,$0[..{usn2}][..$usn1] Desc Skip Count ( * ) Starts With 010 Starts With 0x0"),
    octest_legacy:ct_string("Delete 0Xa In {`7esn`}"),
    octest_legacy:ct_string("With  $`2esn`[12.e12][$@usn5],12 Starts With $#usn7,(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..] Order By @usn5 In 1e1 Asc Limit {_usn4}[...e12][..0xabc] Where True Is Null Is Null Union Return Distinct *,.e0 =~{`8esn`} =~$999 As #usn7 Skip 1000 Is Not Null Limit Count(*)[..``][..#usn8] Unwind [1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] As `3esn` Start #usn7=Relationship:usn2(_usn3='s_str') ,`4esn`=Node:`7esn`(``={usn2})"),
    octest_legacy:ct_string("Start @usn6=Rel:usn1(@usn6=\"d_str\") Where @usn5 Is Not Null Is Not Null Create Unique ((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}))) Union All Detach Delete $usn1 Contains {`8esn`} Contains $123456789 Union All Foreach(@usn5 In $123456789[..$7][..$`6esn`]| Detach Delete Case True[$123456789][`8esn`] When 12.e12[{@usn5}..][9e1..] Then 12.e12[`7esn`] Else {`2esn`}[Count(*)] End Ends With (`` :`7esn`)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) Ends With None(`1esn` In `3esn`[07..]),[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]][[9e0 Starts With .e0 Starts With \"d_str\",`3esn`[..{_usn4}][..{@usn5}],1.e1 =~`2esn`]..Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `6esn` Ends With 2.12 Ends With @usn6)],{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]} Starts With Allshortestpaths((`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`)) Starts With All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789) Delete 12.e12[{@usn5}..][9e1..],Extract(_usn3 In True[7][$999] Where $`3esn`[{``}..]) Is Not Null Is Not Null,0.0 Contains $_usn4 Contains {`2esn`})"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})),Shortestpath((((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null})<-[#usn8?:``]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})))) Return *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc"),
    octest_legacy:ct_string("Merge _usn3=((:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})<-[@usn6?]->(`3esn` :`4esn`:@usn6{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]})) On Match Set _usn4 =9e0 Starts With .e0 Starts With \"d_str\",`4esn` =Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))),@usn6+={999} Starts With {_usn4} Starts With 00 Match usn1=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),`8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) Using Scan `4esn`:#usn8 Union All Start `4esn`=Node:_usn3({123456789}) Where $@usn5[$`4esn`][$@usn6] Unwind `5esn` In 12e12 In `8esn` As #usn7"),
    octest_legacy:ct_string("Merge (({`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``})) Create Unique ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),`5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Load Csv With Headers From (#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..] As usn1  Union All Optional Match usn2=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))),((usn1 :@usn5)<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`1esn`?:`3esn`|:@usn5{usn2:Count ( * )[..12][..{@usn6}]}]-(@usn5 {``:`3esn` =~9e0 =~@usn6})) Create Unique `2esn`=Allshortestpaths((:`3esn`:`6esn`{999})),`8esn`=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)) With  *,`3esn` Ends With .e0 Ends With $`7esn` As @usn5,(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Order By 0.12 In 0X7 Descending Skip @usn6[$12] Limit $999 Ends With $`2esn` Where {#usn8}[12.0][$@usn6]"),
    octest_legacy:ct_string("Remove Case When $1000[..$999] Then 0x0 Ends With {``} When 0[$`6esn`...e1][`1esn`..$`7esn`] Then $#usn7 Starts With False Starts With {`6esn`} End._usn3,Extract(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}]).@usn6,_usn3.`5esn`! Merge ((#usn8 {`8esn`:{7} Contains $123456789})) On Match Set #usn8+=$`5esn` Is Not Null,`5esn`._usn3! =Reduce(@usn6=$7 Is Null,`6esn` In 00|`6esn`[..{999}]) =~[$12 Is Not Null,07 =~@usn5] =~Reduce(`6esn`=9e12 Ends With 123456789,`8esn` In $12[{7}..0X0123456789ABCDEF]|$#usn7[..@usn6][..$0]) Remove `5esn`:_usn4,Shortestpath((({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))).#usn8! Union Detach Delete Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null] Delete 01234567[..$`5esn`],{`8esn`}[True..][.e1..],(`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]-(`5esn` :@usn6)<-[`7esn`?:@usn5|:`7esn`{`1esn`:{`6esn`} Contains {usn2} Contains $1000}]->(_usn3 :_usn4{`7esn`:00 Starts With $`6esn`,`6esn`:{12}[999][{_usn3}]}) Ends With [_usn4 In `2esn` Where {`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]] Ends With Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $7 In 1.0 In 1e1) Union All Return *,0Xa Contains $``,1000 Starts With 123.654 Starts With $_usn4 Order By {_usn4} In {`6esn`} In `1esn` Descending,_usn4 In $usn1 Desc With Distinct *,Single(`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`)[..[$_usn4 Contains {#usn7} Contains `1esn`,{123456789} =~01234567 =~`3esn`]][..{`5esn`:{999} Starts With {_usn4} Starts With 00,usn1:$``['s_str'..][0x0..]}] As #usn8 Order By `6esn` Is Null Is Null Descending,`1esn` Is Null Is Null Asc Limit {12} In $12 In 0xabc Where False Contains $#usn8 Contains 9e1"),
    octest_legacy:ct_string("Create ``=(`` :``)-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3),Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})) Union With Distinct *,$`8esn` In $`2esn` In {7} As _usn3 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Skip [$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End] Where {`5esn`} Contains 's_str' Contains 9e1 Detach Delete #usn8 Is Null,1e1 Starts With 9e1 Starts With {`4esn`} Return Distinct *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc"),
    octest_legacy:ct_string("Remove Filter(`1esn` In `3esn`[07..] Where #usn8 =~{_usn3} =~``).@usn5!,[`5esn` Is Null Is Null,$1000 Is Not Null Is Not Null].@usn6! Merge Shortestpath((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[#usn7?:#usn8|`2esn`]-(usn2 {`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})) On Create Set `1esn`+=010 In $`5esn` In 0,[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null].@usn6? ={@usn6} Contains 123.654 Contains 01,@usn5 =$#usn7 =~{12} =~False On Create Set usn1+={usn1}[{`5esn`}..],Case {0} Is Null When $0 Is Not Null Then #usn8 Is Not Null When 12.e12[{@usn5}..][9e1..] Then `2esn`[$1000..9e12][{#usn8}..{7}] End.`6esn` =#usn8 =~{_usn3} =~``,`7esn`+=12e12 Ends With `4esn` Ends With 123456789 Create `4esn`=Shortestpath(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))),((#usn8 {`8esn`:{7} Contains $123456789})) Union All Unwind $7 Is Not Null As `5esn` Create @usn6=(#usn8 :`7esn`)"),
    octest_legacy:ct_string("Load Csv From _usn3[$usn2..0] As #usn7 Fieldterminator \"d_str\" Foreach(`6esn` In Count(*) In 0e0 In 9e1| Match usn1=Allshortestpaths((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[#usn8?:#usn8|`2esn` *0X7..0Xa{usn2:{1000},`6esn`:#usn8[`7esn`..]}]->(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})))"),
    octest_legacy:ct_string("Start `1esn`=Rel:usn2(`7esn`={7})  Unwind Reduce(`1esn`=12[..$@usn6],`` In {`1esn`} Starts With @usn6|00[..$123456789][..$`5esn`])[Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where {@usn5} Is Null)] As _usn3 Start #usn7=Node:#usn7('s_str') ,`6esn`=Node:@usn6({999})"),
    octest_legacy:ct_string("Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`}"),
    octest_legacy:ct_string("Create Allshortestpaths((((`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5)-[_usn4? *..010{`3esn`:$`3esn` In 9e12 In ``,@usn6:'s_str'[.._usn4][..``]}]->(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})))) Create Shortestpath((({`2esn`:{7}[$7..],#usn7:`1esn` In 07})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}))),`1esn`=Allshortestpaths(((`8esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']}))) Union Delete Count(*)[.e12],All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,#usn7(01 =~$`1esn`) =~{@usn6:12.e12[$`8esn`..{`8esn`}],#usn8:#usn7 =~00} Load Csv From 9e1[$`2esn`..][`1esn`..] As `4esn`  Return {1000} As `` Order By {1000}[1000][$usn1] Descending,$999[9e0..] Desc Skip Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))]"),
    octest_legacy:ct_string("Merge @usn6=((_usn4 :#usn8)<-[:#usn8|`2esn` *123456789..0X7{``:$#usn7 =~{12} =~False,`5esn`:{1000} In {123456789}}]->({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})<-[{``:\"d_str\"[{`8esn`}..]}]-(:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) On Create Set _usn3 =1.e1[`4esn`..][$`6esn`..]"),
    octest_legacy:ct_string("Start `1esn`=Relationship:usn1({999}) ,`4esn`=Node(01234567,0Xa,07)Where $usn1[$123456789..0][{`1esn`}..12.0] Union With  *,[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999),Count(*) Starts With $usn1 Starts With {usn2} As @usn6 Limit Reduce(`6esn`=7[$0..][{_usn4}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)[[$#usn7[`5esn`],Count(*) Ends With 123.654 Ends With $12,$#usn7[..@usn6][..$0]]] Where $_usn4 Is Not Null Is Not Null With  *,{#usn7} Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn`|.e1 Ends With 0Xa Ends With .e1) As `5esn`,123456789 Is Not Null Is Not Null As #usn7 Skip {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Where $``['s_str'..][0x0..] Create #usn8=(`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`) Union All Load Csv With Headers From {`2esn`}[Count(*)] As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind Count ( * )[00] As `3esn` Unwind 01[..{`7esn`}][..01234567] As @usn5 Start @usn6=Rel:`2esn`(`5esn`='s_str') ,_usn3=Relationship:`1esn`(#usn7=\"d_str\")Where 0.e0 Contains #usn7"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0e0 Contains 9e12 As _usn3  Foreach(#usn8 In [`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]]| Create `6esn`=(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})),@usn5=((:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})<-[``:usn2|#usn7 *..0Xa]->(`1esn` {#usn8:$12 Contains 0Xa})) Remove {usn2:123.654[{`7esn`}][{7}],#usn8:$0[..{usn2}][..$usn1]}.usn2?)"),
    octest_legacy:ct_string("Return {`4esn`}[$_usn4..][9e0..],0X7 Starts With {999} Starts With 12e12 As @usn5,$`2esn` Ends With 0.12 Ends With .e1 As `` Order By False[{`8esn`}] Asc,Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null Asc,{1000}[1000][$usn1] Ascending Union All Create Unique Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]}) Union All Create `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}))"),
    octest_legacy:ct_string("Using Periodic Commit 01234567 Load Csv From 7 Contains $`` Contains {`6esn`} As `8esn` Fieldterminator \"d_str\" Delete 12.e12[{@usn5}..][9e1..],Extract(_usn3 In True[7][$999] Where $`3esn`[{``}..]) Is Not Null Is Not Null,0.0 Contains $_usn4 Contains {`2esn`}"),
    octest_legacy:ct_string("With  0.0 Is Not Null As `4esn` Order By $`8esn` Is Null Is Null Desc,[.e12 Ends With 1000 Ends With 010,Count(*)] Ends With {`7esn`:$_usn3 =~{_usn4} =~$`6esn`} Ends With Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Descending Remove {usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}.`7esn`?,Reduce(`1esn`=$`1esn`[#usn8][$@usn5],usn1 In 12.e12 In {0} In 9e1|.e12[$7..][{`6esn`}..]).`7esn`"),
    octest_legacy:ct_string("Detach Delete Count ( * )[{12}..{@usn5}][{#usn8}..Null],(:_usn3{#usn7:#usn8 =~{999}})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07}) Contains None(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`) Contains Case When $`` Is Null Then 0.12 Ends With {1000} Ends With `6esn` When True[7][$999] Then 0Xa Contains Count ( * ) End Union All Start `1esn`=Relationship:usn1({999}) ,@usn5=Rel:usn1(@usn6=\"d_str\") Union All With  *,`1esn`[Null..] As `2esn` Skip 's_str'[_usn4..0x0] Limit Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} Where {7} Is Null Load Csv From {1000}[01234567..$_usn4][{@usn6}..$_usn3] As usn2 "),
    octest_legacy:ct_string("Foreach(`6esn` In Reduce(`3esn`=#usn8 In `8esn` In 07,#usn7 In 123.654 Starts With $``|_usn3[$usn2..0])[..Any(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`])][..[$`1esn`[#usn8][$@usn5],\"d_str\" Ends With False Ends With {@usn6}]]| Create `5esn`=Shortestpath(((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Unwind {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] As @usn6) Create Unique @usn5=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Union Match (`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}) Using Join On `6esn`,`1esn`,`` Load Csv From None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Ends With Case When 0x0[{999}..][{_usn4}..] Then Count(*)[.e12] When {_usn4}[...e12][..0xabc] Then Count(*) Ends With $`` Ends With {7} Else ``[{#usn8}] End Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 's_str' Starts With 12e12 Starts With $_usn4|True Starts With $`4esn` Starts With 12e12) As usn1  Create ``=(:_usn3{`8esn`:9e1 =~999})"),
    octest_legacy:ct_string("Remove (:@usn5)-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).`7esn`,All(#usn7 In 0Xa[@usn5][{`7esn`}] Where $@usn5 In $usn2 In {1000}).`6esn`!,{`7esn`:12e12 Ends With `4esn` Ends With 123456789}.usn2 Union All Start `3esn`=Rel:#usn8(\"d_str\") ,`3esn`=Node:`2esn`(@usn6={`4esn`}) Union All Merge Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Remove Case 07[`8esn`] When {1000} Then {usn1} =~123.654 =~\"d_str\" Else Null Ends With 12 Ends With usn2 End._usn4?"),
    octest_legacy:ct_string("Load Csv With Headers From 9e12 In 1e1 In .e12 As `5esn`  With Distinct *,{999} Starts With {_usn4} Starts With 00 As `6esn`,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7 Order By $@usn6 Starts With $123456789 Starts With 0X7 Desc Skip [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]] Limit $7 In 1.0 In 1e1 With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $123456789[..$7][..$`6esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From 0e0 Contains 9e12 As _usn3  Remove Single(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn4} In {1000}).usn1 Union All Create Unique Allshortestpaths((:_usn4{`1esn`:{123456789}[12..][$12..]})) Load Csv With Headers From @usn5 Contains {0} Contains 9e12 As ``  Union Start #usn8=Relationship( {`4esn`}) ,@usn6=Node:@usn6(_usn4={_usn4})Where `2esn` Merge ((`4esn` :usn2:`2esn`))"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv With Headers From All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[{#usn7:Count ( * )[$12..]}..][`5esn`(Distinct False Starts With 010)..] As @usn5 Fieldterminator 's_str' Remove (:`7esn`{999})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})<-[:`1esn`|:`3esn` *1000]->(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0}).`2esn`! Merge `7esn`=Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) On Match Set `3esn`+=$`5esn`[$#usn7..][0xabc..],`4esn`+=$#usn7 =~9e1 =~$_usn4,`3esn`+=#usn8 =~`7esn`"),
    octest_legacy:ct_string("Foreach(`4esn` In Reduce(`7esn`={@usn5} Is Null,#usn7 In 0Xa[@usn5][{`7esn`}]|0e0[0X0123456789ABCDEF..010][$@usn6..010])[Extract(_usn4 In `2esn` Where 123.654 Starts With $``|12.e12[``..usn2][{#usn7}..@usn5])]| Delete Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]],{@usn5} Is Null With  {`4esn`}[$_usn4..][9e0..] Skip Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Where {`2esn`} Is Not Null Is Not Null) Union With  $12 Is Not Null As `6esn`,(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Not Null Is Not Null As `2esn`,$`4esn` In Null Order By 2.12[`8esn`][1e1] Descending Skip $1000 Is Null Is Null Optional Match `8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan `4esn`:_usn4"),
    octest_legacy:ct_string("Start @usn6=Node:@usn6(_usn4={_usn4}) ,@usn5=Rel:@usn5({`3esn`})Where Count(*)[010..][#usn7..] Unwind [0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..]) As @usn5 Load Csv With Headers From {`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `6esn` Fieldterminator 's_str' Union Create Unique `5esn`=((`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})) Merge `5esn`=Allshortestpaths((((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[?:`` *..00{``:`3esn` =~9e0 =~@usn6}]-(:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))) On Create Set _usn4+=0.12[Count(*)..][$#usn7..],None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =[$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null On Create Set {`3esn`:0X0123456789ABCDEF[$`2esn`..][`2esn`..]}.`4esn`? =`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null],usn1:#usn7,Case When 1.e1[0xabc..] Then $@usn6 Starts With {`1esn`} Starts With 12 End.`2esn`! ={@usn5} Starts With 1.0 Starts With 00"),
    octest_legacy:ct_string("Match (_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),`5esn`=Shortestpath(((#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(`` {``:0x0 =~123.654 =~{999}}))) Using Index `6esn`:`7esn`(#usn8) Using Join On #usn8,usn2,#usn7 Where $_usn3[010..False] Union All Detach Delete Count ( * )[{12}..{@usn5}][{#usn8}..Null],(:_usn3{#usn7:#usn8 =~{999}})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07}) Contains None(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`) Contains Case When $`` Is Null Then 0.12 Ends With {1000} Ends With `6esn` When True[7][$999] Then 0Xa Contains Count ( * ) End"),
    octest_legacy:ct_string("Remove (_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[_usn4 *0x0..]-(:``$_usn4).#usn8!,Extract(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|{`6esn`} Ends With 0e0 Ends With {``}).`1esn`! Foreach(`` In 00 Ends With `8esn`| Match _usn4=Shortestpath(((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Using Index `1esn`:`4esn`(`1esn`)) Unwind {`6esn`} Contains {usn2} Contains $1000 As `2esn` Union All Match (:``),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) Using Scan `7esn`:#usn8 Create Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Foreach(usn1 In `8esn`[..`4esn`][..$usn1]| Load Csv With Headers From {12}[00..{@usn6}][1.e1..0] As @usn6 ) Union All Start `8esn`=Node:`1esn`({@usn5})  Load Csv From [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null As `7esn` Fieldterminator 's_str' Foreach(`8esn` In 1.0 Ends With $`2esn` Ends With {`8esn`}| With Distinct *,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,12 Is Not Null Is Not Null As #usn8 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending)"),
    octest_legacy:ct_string("Remove @usn5:``,(`6esn` :_usn3)<-[`1esn`? *0X0123456789ABCDEF{`5esn`:1.e1 Starts With $`2esn` Starts With $0}]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`2esn` Create Unique ((:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Union Start `8esn`=Node:#usn7(`5esn`=\"d_str\") ,`6esn`=Node:_usn4({`8esn`})Where 9e0[#usn8]"),
    octest_legacy:ct_string("Foreach(`5esn` In Null Ends With 12 Ends With usn2| Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)),``=Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))) Union All Merge usn2=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))) On Match Set @usn5 =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Foreach(#usn7 In {@usn5} =~_usn4 =~0.12| Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),usn1=((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})) Where .e12[$7..][{`6esn`}..]) Union Detach Delete 0.0 =~12.e12 =~1.0,$`2esn`[{usn1}..]"),
    octest_legacy:ct_string("Merge `7esn`=Allshortestpaths(((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))) On Create Set `8esn`+=Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null),`8esn` ={#usn7} Starts With `3esn` Starts With {``},Single(_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``}).`1esn`! =0X0123456789ABCDEF =~@usn6 =~{0} Return *,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] As `8esn`,12 Starts With 0x0 As `2esn` Order By All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[{#usn7:Count ( * )[$12..]}..][`5esn`(Distinct False Starts With 010)..] Asc,All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] Asc Limit 0Xa[07..] Union Load Csv From _usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..] As `3esn`  Optional Match #usn7=Allshortestpaths(((:`5esn`:@usn5))),(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))) Using Scan usn1:`1esn` Foreach(usn2 In $@usn6[$0..usn1][0X0123456789ABCDEF..$999]| With Distinct *,{@usn6} Is Not Null As `7esn` Order By usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) Ascending,.e1 =~$`5esn` Desc,Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null Ascending Skip #usn7[00] Limit $`7esn` Is Null Is Null)"),
    octest_legacy:ct_string("Remove Reduce(usn1=12e12 Ends With `4esn` Ends With 123456789,`1esn` In 0.e0 =~`1esn` =~`6esn`|1.e1[0xabc..]).`4esn`!,[$@usn6[$0..usn1][0X0123456789ABCDEF..$999],0.0 Is Not Null Is Not Null,0Xa Contains $``].`7esn`? Union Start `4esn`=Node:`1esn`(#usn7=\"d_str\") Where $_usn3 Is Null Is Null Unwind `7esn`[0..$usn2][{usn2}..0.e0] As `1esn` Create `7esn`=((:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})<-[`2esn`?:@usn6|`` *..00]->({_usn3})) Union All Create usn1=(((:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})<-[:``]-(_usn3 :`7esn`)<-[ *0xabc..7]->({#usn7:123456789[0..]}))) Start ``=Node:`6esn`('s_str') Where #usn7 Ends With $#usn7 Ends With {`8esn`}"),
    octest_legacy:ct_string("Match `5esn`=Shortestpath((_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})<-[@usn5?:`8esn`|:_usn4 *0X0123456789ABCDEF{usn1:False Contains $#usn8 Contains 9e1}]->({@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]})),`8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})) Using Index @usn5:usn2(`6esn`) With Distinct *,$`8esn` In $`2esn` In {7} As #usn8,$#usn8[{12}..] As `6esn` Skip Null In .e0 Limit 0e0[{_usn3}..] Where 9e1 =~`` =~{`7esn`} Union All Delete 0X0123456789ABCDEF[`5esn`..][$#usn8..],`3esn` Is Not Null Is Not Null,0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Foreach(`` In $`6esn`[9e1]| Load Csv With Headers From Reduce(@usn5=0.e0 Contains #usn7,`` In {usn1} Ends With {`6esn`} Ends With 123456789|$999 In 999)[Allshortestpaths(({`4esn`:#usn8 Is Null})-[:usn1{_usn4:0[{usn2}..][usn1..],`3esn`:12 Starts With 7 Starts With $`5esn`}]-(`7esn` :`3esn`:`6esn`)<-[`6esn`?:#usn8|`2esn`*..{`5esn`:@usn5 =~'s_str'}]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}))..{@usn6:0.0 Is Not Null Is Not Null,#usn7:\"d_str\"[{`8esn`}..]}] As `3esn` Fieldterminator 's_str') Create Allshortestpaths((((:@usn5{@usn6:{7} Contains $123456789})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]}))))"),
    octest_legacy:ct_string("Create Unique Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))),Shortestpath((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Remove Reduce(`3esn`={usn1} In Count ( * ),`1esn` In `3esn`[07..]|$123456789 Starts With $123456789 Starts With Count ( * )).@usn6!,Shortestpath((:_usn3{#usn7:#usn8 =~{999}})).#usn8 Start `2esn`=Node:usn1({`7esn`}) ,@usn5=Rel( {`7esn`})Where 123.654[1e1..][{#usn8}..] Union Return $12 Is Not Null As `6esn`,(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Not Null Is Not Null As `2esn`,$`4esn` In Null Order By 2.12[`8esn`][1e1] Descending Skip $1000 Is Null Is Null Create Unique `2esn`=((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})),@usn6=(((:_usn3{`8esn`:9e1 =~999})<-[@usn6?]->(`6esn` :_usn3)<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`))) Union Optional Match `8esn`=(@usn6 :`6esn`:`8esn`)<-[_usn4?:`7esn`{``:{_usn3} Contains $`1esn` Contains 12.0}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}),Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Using Join On `7esn` Using Scan _usn4:#usn8 Where $12 Contains 0Xa Create (#usn8 :#usn8) Unwind `6esn` Contains {`1esn`} Contains 9e0 As `1esn`"),
    octest_legacy:ct_string("Remove Extract(_usn4 In `2esn` Where 1.0[{999}][$999]|`4esn`[usn1]).#usn7! Union All Foreach(`8esn` In Shortestpath(((:@usn6{usn2:{#usn8}[12.0][$@usn6]})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(:`3esn`:`6esn`{999})))[..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where Count(*) Ends With 123.654 Ends With $12|0Xa[$1000..$123456789])][..{@usn6:12 Starts With {_usn4} Starts With $#usn8}]| Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `3esn`:#usn7(usn2))"),
    octest_legacy:ct_string("Detach Delete Filter(`1esn` In `3esn`[07..] Where 07 =~$`8esn` =~9e1) Is Not Null,False Ends With $`` With Distinct {`8esn`}[..$`6esn`][..123.654],{@usn6} In {#usn7} In 12.e12 As usn1,0.12 Is Not Null Is Not Null Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])] Load Csv From {`6esn`} Is Null As `8esn` Fieldterminator \"d_str\" Union All Merge `7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2})) On Match Set (:_usn3$usn1)<-[`2esn`:`5esn` *0x0..{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})._usn4 =#usn7 Starts With $999 Create `3esn`=Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) Start #usn8=Relationship:usn1({7}) "),
    octest_legacy:ct_string("Unwind 0xabc[9e12][0X0123456789ABCDEF] As _usn4"),
    octest_legacy:ct_string("Optional Match Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})) Where {@usn5} =~_usn4 =~0.12 Foreach(`1esn` In .e1 Contains $`3esn`| Create Unique @usn5=Allshortestpaths(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})),`1esn`=((`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[ *0xabc..7{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}]-({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}))) Unwind Reduce(@usn6=@usn5[$12..\"d_str\"],`` In {`1esn`} Starts With @usn6|Count ( * ) =~{`5esn`} =~{_usn4}) Starts With None(`1esn` In $12 Is Not Null Where `7esn` Is Not Null Is Not Null) Starts With [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null] As `2esn` Union All Create Unique `6esn`=((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->({``:.e1 Contains $`3esn`})) Load Csv With Headers From @usn5 Contains {0} Contains 9e12 As ``  Remove [`3esn` In 123.654[1e1..][{#usn8}..] Where {@usn6} In {#usn7} In 12.e12|123.654 Contains $_usn3 Contains 0X0123456789ABCDEF].usn2?,None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5])._usn3? Union All With  {usn1}[$`8esn`..0.0] As #usn8 Skip {`2esn`} Ends With {12} Ends With 7 Limit .e1 Starts With $_usn4 Starts With {`1esn`} Where .e12 Contains $`1esn` Contains $@usn6 Match (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Using Join On `8esn`,_usn4 Using Index `7esn`:`1esn`(`2esn`)"),
    octest_legacy:ct_string("Remove Reduce(`4esn`={7} Contains $123456789,`1esn` In `3esn`[07..]|$@usn6 Contains $`7esn` Contains 1e1).usn2?,None(`1esn` In $12 Is Not Null Where .e1[@usn5]['s_str']).usn1!,Any(`` In {`1esn`} Starts With @usn6 Where \"d_str\"[{`8esn`}..])._usn4!"),
    octest_legacy:ct_string("Load Csv With Headers From Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]] As `4esn`  Unwind {``} Is Null Is Null As `3esn` Optional Match `1esn`=(usn1 :`8esn`:@usn5)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00}) Using Index usn1:`3esn`(`3esn`) Using Join On usn1 Where $7[$`3esn`] Union Create Unique `7esn`=((`8esn` :@usn6)) Unwind {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` As `5esn` Unwind {usn1:$`8esn` In $`2esn` In {7},`7esn`:{`2esn`} In $123456789 In True}[..(:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]-(`3esn` :`7esn`)-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`)][..Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)] As `1esn`"),
    octest_legacy:ct_string("Load Csv From ``(999 Starts With 's_str',1e1[1.e1..][123.654..]) =~[$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]] =~[#usn7 In 0Xa[@usn5][{`7esn`}] Where `5esn`[0xabc..]] As #usn8  Create `6esn`=Shortestpath(((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}))),Shortestpath((usn2 :`5esn`:@usn5)<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[?:`7esn`]->(#usn7 :@usn6)) Start `4esn`=Node:``(\"d_str\")  Union Load Csv With Headers From $1000[..12.0][..0e0] As ``  Union Load Csv With Headers From $`1esn`[07..][9e12..] As `` Fieldterminator 's_str' Create `2esn`=Allshortestpaths(((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({#usn7:123456789[0..]}))) Return *,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null,{999}[9e1] As usn1 Order By {123456789} =~{@usn6} Desc,Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..] Desc,{`5esn`} Ends With \"d_str\" Desc Limit _usn4 =~0e0"),
    octest_legacy:ct_string("Return Distinct {usn1}[{`5esn`}..] As _usn4,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Skip 07[$`2esn`..0x0] Limit {_usn4}[..$#usn7] Return Distinct Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..],`` =~`6esn` =~usn1 As `2esn` Order By .e12[$#usn8..@usn6] Desc,{usn1}[$`8esn`..0.0] Desc Limit None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null Return Distinct {`3esn`}[{12}..][0.12..] As ``,$``[True..] Order By [`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`) Ascending,{0}[False..@usn5] Desc Limit 12 In 999"),
    octest_legacy:ct_string("Start `5esn`=Relationship(01,0x0,0X7,0X7) Where {@usn5}[1e1..][9e1..] Optional Match Shortestpath((`7esn` {@usn6:{_usn4} Is Null})<-[usn2? *0xabc..7{usn1:$123456789 Starts With `5esn`}]->(:`4esn`:@usn6{`1esn`:{12}[00..{@usn6}][1.e1..0],usn1:``[..0X0123456789ABCDEF]})-[`1esn`?:_usn4|:usn1*]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})) Using Scan `2esn`:@usn6 Return Distinct [.e12 Ends With 1000 Ends With 010,Count(*)] Ends With {`7esn`:$_usn3 =~{_usn4} =~$`6esn`} Ends With Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) As @usn6,$123456789[$`5esn`][$_usn4] As `4esn` Order By Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..] Descending"),
    octest_legacy:ct_string("Optional Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),((`4esn` {`1esn`:9e12 Is Not Null Is Not Null})-[?:`7esn` *999{@usn6:{``} Ends With .e12 Ends With 0.e0,`5esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})) Using Index usn1:`7esn`(_usn3) Where 07 =~@usn5 Union Detach Delete 9e0 Starts With .e0 Starts With \"d_str\",(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) Union Match _usn3=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`)))"),
    octest_legacy:ct_string("Delete $`1esn`[..{_usn3}],usn2[`7esn`..{`3esn`}][$7..{#usn7}],{`8esn`}[0X7][$`3esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str'[$usn2][Count(*)] As `5esn`  Remove {`5esn`:01234567[..9e1]}.#usn8!,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $`8esn`[..$999][..0]].@usn6!,None(#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}).`6esn` Union All Load Csv With Headers From ``(999 Starts With 's_str',1e1[1.e1..][123.654..]) =~[$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]] =~[#usn7 In 0Xa[@usn5][{`7esn`}] Where `5esn`[0xabc..]] As @usn5  Union All Return Distinct *,1.e1 Ends With 0 Ends With $usn1 As `` Order By $`1esn` =~$usn1 =~01234567 Asc,$`2esn` Ends With `` Ends With {12} Descending,$#usn7 =~9e1 =~$_usn4 Asc Skip Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))[All(`2esn` In {999} Is Not Null Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)][Shortestpath((:_usn3{_usn3:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,`5esn`:1.0 Is Null Is Null})<-[`3esn`:`6esn`{`3esn`}]-(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})<-[ *123456789..0X7]-(`2esn` :`2esn`{`3esn`:#usn8 =~{999}}))] Foreach(`` In 0X7[0X7..][Count ( * )..]| Unwind [`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)] Starts With (`5esn` :`7esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}) Starts With `6esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],$`7esn` In 12) As @usn5)"),
    octest_legacy:ct_string("Remove $`6esn`.`8esn`,Extract(@usn5 In Null =~12e12 Where 7 Is Not Null|True =~_usn3 =~123456789).usn1?,{`8esn`:1e1[{_usn4}..123.654],`2esn`:0X0123456789ABCDEF[$999..][@usn5..]}.`8esn`"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Detach Delete 0.12[Count(*)..][$#usn7..],0Xa[0e0..{#usn7}] Match ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})),(((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Using Join On `8esn`,_usn4 Where $`7esn` In 12"),
    octest_legacy:ct_string("Load Csv From {`3esn`}[{123456789}..][{usn1}..] As `6esn`  Optional Match Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Using Join On usn1,_usn4,`6esn` Using Index usn1:_usn3(``) Where {_usn3}[`3esn`..$#usn8] Return _usn4 Is Null Is Null,$`5esn` Is Not Null As _usn4 Order By Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Ascending,({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}) Ascending Skip {`4esn`}[$123456789] Limit Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Union All With Distinct {`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] As `4esn`,123.654 Ends With usn2 Ends With 0 Skip .e0[0.12] Where 9e12 Ends With 123456789"),
    octest_legacy:ct_string("Remove ({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6})-[`7esn`? *..0{`2esn`:07 =~$`8esn` =~9e1,``:`5esn`[0xabc..]}]->({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7})._usn3!,Any(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null).``,None(`2esn` In {999} Is Not Null Where {1000}[1000][$usn1]).`4esn`? Return Distinct {#usn8}[12.0][$@usn6],$usn2 In 123.654 In .e0,{@usn6}[$`7esn`..][False..] Skip 1000 Is Null Limit $usn1 In 0.12 In $`` Union All Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:usn1('s_str') Load Csv From {_usn3}[`3esn`..$#usn8] As `4esn` Fieldterminator 's_str' Union Merge ((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5)<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})) On Create Set #usn8+=``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` Start #usn7=Node:_usn4(``=\"d_str\") ,`4esn`=Node:_usn3({123456789}) Return *,`2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}],{#usn7} Starts With `3esn` Starts With {``} As `8esn` Order By (`4esn` :`1esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]->(#usn7 )[Single(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)] Ascending,Reduce(@usn6=@usn5[$12..\"d_str\"],`` In {`1esn`} Starts With @usn6|Count ( * ) =~{`5esn`} =~{_usn4}) Starts With None(`1esn` In $12 Is Not Null Where `7esn` Is Not Null Is Not Null) Starts With [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null] Descending Skip ``[$0..][`1esn`..]"),
    octest_legacy:ct_string("Unwind $999 Contains 12e12 Contains {usn2} As #usn7 Remove Allshortestpaths((({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2}))).@usn6,_usn4:`8esn`:@usn5 Merge `7esn`=((:`2esn`))"),
    octest_legacy:ct_string("Start `3esn`=Relationship:#usn8(_usn3={#usn7}) ,`8esn`=Rel( {`3esn`})Where $`2esn` Is Null Is Null Return *,{`4esn`:$`3esn` Contains 0 Contains 07}[Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])][(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6)] As #usn7,_usn4 Is Null Is Null Order By {usn2} =~@usn6 =~{`4esn`} Asc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `6esn` Starts With 123.654 Limit @usn6(`` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[:#usn8|`2esn` *0x0..{`3esn`:.e12[$7..][{`6esn`}..]}]->({usn1:1000 Is Null Is Null})] Unwind $999 Contains 12e12 Contains {usn2} As #usn7 Union All Delete {`8esn`} =~#usn8 =~$`3esn`,0Xa Contains {`7esn`} Contains $999,\"d_str\"[Count ( * )..`6esn`] Create _usn3=Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})),((:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]->(:`2esn`{`6esn`:@usn6[{0}..]})<-[`1esn`?:_usn4|:usn1*]->(usn2 :``)) Return {`7esn`}[0X7..][0x0..] As @usn6,@usn6[Count ( * )][True] Skip 7 Is Not Null Limit `8esn` Union Match Shortestpath((((:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})))) Using Index `4esn`:usn2(`4esn`) Match (({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]}))"),
    octest_legacy:ct_string("Load Csv With Headers From @usn5 Contains {0} Contains 9e12 As ``  Remove Filter(`` In {`1esn`} Starts With @usn6 Where 12 Starts With 7 Starts With $`5esn`).``,Single(`1esn` In $12 Is Not Null Where {usn1} In Count ( * )).usn2?,Shortestpath((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})).#usn8? Foreach(`7esn` In usn2(Distinct 0Xa[..{1000}][..$#usn7])[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000|\"d_str\"[{`8esn`}..])][(`4esn` :`1esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]->(#usn7 )]| With Distinct *,{@usn6} Contains 0e0,[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn` Order By @usn5 =~`` Asc Skip 07 =~$`8esn` =~9e1 Limit \"d_str\"[{`8esn`}..] Where `3esn` Is Not Null Is Not Null Create Unique @usn5=Allshortestpaths(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})),`1esn`=((`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[ *0xabc..7{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}]-({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}))) Union All Load Csv From $`4esn` Starts With 9e12 As `3esn` Fieldterminator \"d_str\" Unwind @usn5[12.0][{1000}] As `8esn` Merge #usn8=Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) On Create Set [0X0123456789ABCDEF Contains $`1esn` Contains 1000].``! =1000[$7..$123456789] On Create Set Filter(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).``! =$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,exists($`5esn`[`4esn`][_usn3]).@usn5 =$7[{`1esn`}],`2esn`({1000}[1000][$usn1]).`8esn`! =_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..] Union Create (({`1esn`:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("Merge @usn6=((usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})<-[? *0xabc..7]->(`3esn` :`3esn`:`6esn`)) On Create Set Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]).`2esn`! =123456789 Starts With {999} Create Unique (:`2esn`$1000)-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`` {``:0x0 =~123.654 =~{999}})"),
    octest_legacy:ct_string("Remove {`4esn`:`3esn` Is Not Null Is Not Null}.`2esn`! Unwind False Starts With 010 As #usn8 Return Distinct $#usn7 =~9e1 =~$_usn4 Union All Match usn1=(((:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})<-[:``]-(_usn3 :`7esn`)<-[ *0xabc..7]->({#usn7:123456789[0..]}))),(usn2 :`5esn`:@usn5)-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]}) Union Unwind #usn8['s_str'..][123.654..] As _usn4 Load Csv From $usn2 Ends With $`5esn` As #usn8  Create Unique Shortestpath((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]}))"),
    octest_legacy:ct_string("Foreach(`` In {12} =~0.e0 =~{_usn3}| Detach Delete 12.e12 In {0} In 9e1,$``[01],0.0 In `6esn` In $@usn5 Create Unique #usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}),`6esn`=(({@usn6:Null =~12e12}))) Union All Load Csv With Headers From {`7esn`}[..9e12][..0.0] As @usn5 Fieldterminator 's_str' Remove Single(`2esn` In {999} Is Not Null Where $usn1[@usn6][#usn7]).#usn8? Return Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) As _usn4,7[..$`1esn`][..00],{12} Starts With #usn8 Starts With 0e0 Order By $0 Starts With `2esn` Desc,0.12 In 0X7 Descending,12.e12 In $0 In $0 Desc Limit `6esn` In Null Union Load Csv From [{`3esn`} Is Null,{@usn5} =~_usn4 =~0.12] =~Extract(_usn4 In `2esn` Where 1.0[{999}][$999]) As _usn3 Fieldterminator \"d_str\" Load Csv From {usn1} In Count ( * ) As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(#usn8 In Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End| Start `4esn`=Node:``(\"d_str\")  Start _usn3=Relationship:``(`1esn`={`2esn`}) Where 0[{usn2}..][usn1..]) Create Unique ``=((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 )),`6esn`=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}}))"),
    octest_legacy:ct_string("Return Distinct Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] As usn2,{usn1}[01..7][{`3esn`}..`6esn`] Order By Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] Ascending,[.e12 Ends With 1000 Ends With 010,Count(*)] Ends With {`7esn`:$_usn3 =~{_usn4} =~$`6esn`} Ends With Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Descending Skip [`` In {`1esn`} Starts With @usn6 Where $123456789 Starts With $123456789 Starts With Count ( * )|{#usn8}[usn1][1.0]][Shortestpath((@usn6 {usn1:$#usn7 =~{12} =~False})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6))..] Limit $`5esn`[`4esn`] Union Create Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))) Merge `4esn`=({`1esn`:$123456789[..$7][..$`6esn`]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}) On Match Set {usn2:00[..$123456789][..$`5esn`],``:0.12[Count(*)..][$#usn7..]}.#usn7? =(`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Create Unique (:``)"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv With Headers From usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]] As _usn3  Create `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))"),
    octest_legacy:ct_string("Foreach(_usn4 In 01234567[{`7esn`}..]| Delete $0 Starts With `2esn` Delete `6esn`[{`6esn`}..],$`1esn`[`6esn`..][00..]) Foreach(@usn6 In 0[{@usn5}..][7..]| Optional Match Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})) Where {@usn5} =~_usn4 =~0.12) Union With  0.0 Is Not Null As `4esn` Order By $`8esn` Is Null Is Null Desc,[.e12 Ends With 1000 Ends With 010,Count(*)] Ends With {`7esn`:$_usn3 =~{_usn4} =~$`6esn`} Ends With Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Descending Remove {usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}.`7esn`?,Reduce(`1esn`=$`1esn`[#usn8][$@usn5],usn1 In 12.e12 In {0} In 9e1|.e12[$7..][{`6esn`}..]).`7esn`"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} As `5esn`  Start ``=Node:_usn3('s_str')  Optional Match usn2=Allshortestpaths(((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})))),@usn6=(`2esn` :#usn8)"),
    octest_legacy:ct_string("Foreach(_usn3 In {12} =~0.e0 =~{_usn3}| Optional Match (usn2 :`5esn`:@usn5)-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]}) Create Unique `5esn`=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}))"),
    octest_legacy:ct_string("Start `3esn`=Rel:`5esn`({0}) ,`6esn`=Relationship:`1esn`({@usn5})Where $7[{`1esn`}] Create usn2=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))),`6esn`=((@usn6 :`2esn`)) Merge ((:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`1esn`)) On Match Set `2esn`+=Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})],`3esn` =$12 Starts With $`8esn`,@usn5 =Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) On Match Set `6esn` =[`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`),usn1:`8esn`:@usn5 Union All With Distinct *,01234567[..9e1] Where $7 Is Null Is Null"),
    octest_legacy:ct_string("Merge `1esn`=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}) On Match Set Any(_usn4 In `2esn` Where 0X0123456789ABCDEF[9e12]).`5esn`! =(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) On Match Set `3esn`(Distinct 's_str' Starts With 12e12 Starts With $_usn4).`3esn` =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End Create `2esn`=Shortestpath((:`5esn`:@usn5{``:.e12 =~$_usn4})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`)<-[@usn5:_usn4|:usn1*]->(:@usn5)),`2esn`=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})) Union All Load Csv With Headers From Case When 0.e0 Contains #usn7 Then $_usn4[{``}..][1e1..] When $`2esn`[12.e12][$@usn5] Then $usn1[0X7] End Ends With Extract(`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]) Ends With Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End As `8esn`  Unwind Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null) As `2esn` Merge @usn5=Shortestpath(({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) Union Load Csv With Headers From None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `8esn` Fieldterminator 's_str' Create Unique `8esn`=Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(`1esn` :@usn6))),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Start `3esn`=Node:`2esn`(@usn6={`4esn`}) Where False[999]"),
    octest_legacy:ct_string("Create Shortestpath(((`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0}))),`8esn`=((#usn8 {`8esn`:{7} Contains $123456789})) Start _usn4=Relationship:@usn6(#usn7='s_str') Where 9e1 Ends With Count(*) Ends With False Union Optional Match usn1=Shortestpath(((:`1esn`{usn2:{`6esn`} Ends With 0e0 Ends With {``}}))) Using Scan usn2:@usn5 Start usn1=Node:#usn8(#usn8={``}) Where `4esn`[usn1] Union Merge `5esn`=Shortestpath(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[:#usn7|`2esn`]-(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))) On Match Set `2esn`+=$999 =~0 =~{7},@usn5+=0X7[0.e0][{`4esn`}],Extract(`` In {`1esn`} Starts With @usn6 Where {`2esn`}[..{@usn6}][..1.e1]|True =~{`1esn`})._usn4! =All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] Remove All(_usn4 In 0.0[..{999}][..0.0] Where 1e1[1.e1..][123.654..]).`3esn`! Merge (((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))) On Match Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5"),
    octest_legacy:ct_string("Match _usn3=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))) Union Delete 12e12 Ends With $999 Ends With 1e1,$`3esn`,1000 Merge usn1=(@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0}) On Create Set Allshortestpaths(((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]}))).`8esn`? =`6esn`[{`6esn`}..],@usn6+=Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,Extract(usn1 In 12.e12 In {0} In 9e1 Where False Starts With 010|True Starts With $`4esn` Starts With 12e12).`7esn`? =0X0123456789ABCDEF Is Null Is Null"),
    octest_legacy:ct_string("Merge @usn6=(((`2esn` {_usn4:`4esn`[usn1]})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00}))) On Match Set {#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]}.usn1 =(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where `7esn` Starts With 0X7 Starts With $`7esn`).`4esn` =$@usn6[..123.654],_usn4:`4esn`:@usn6 On Match Set @usn5 =`2esn`[$1000..9e12][{#usn8}..{7}] With Distinct {@usn5},{0} Is Null As `6esn` Skip Null In .e0 Where True[..010]"),
    octest_legacy:ct_string("Create (:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0}),(:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}) Union Unwind [`1esn` In 0.e0 =~`1esn` =~`6esn` Where `8esn` Contains $`3esn` Contains {`4esn`}|{`4esn`}[..{`4esn`}]][Reduce(usn2={0}[False..@usn5],`1esn` In `3esn`[07..]|$@usn6 =~#usn8)][Extract(`1esn` In `3esn`[07..] Where 00[07..]|$#usn7 Starts With 9e0 Starts With 2.12)] As #usn7 Start `3esn`=Relationship:@usn6({`2esn`}) ,`8esn`=Node:`6esn`('s_str')Where $@usn6 =~#usn8 Merge _usn3=(((#usn8 :#usn7)-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})))"),
    octest_legacy:ct_string("Delete $_usn4[{``}..][1e1..],[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1|{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]] =~Extract(`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]|$usn1 In 0.12 In $``) =~Single(_usn3 In {@usn5}[..#usn7] Where {`4esn`}[..07][..$`6esn`]) Union Optional Match `5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))),Allshortestpaths((:@usn5{@usn6:{7} Contains $123456789})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}))"),
    octest_legacy:ct_string("Detach Delete $usn1[..{@usn5}][..'s_str'],$`7esn` Is Null Is Null,{``}[_usn4..$`1esn`] Foreach(`6esn` In .e12[\"d_str\"..][.e1..]| Start #usn7=Node( {usn2})  Return 0.e0 Ends With False As `` Skip Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..]) Foreach(#usn8 In Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End| Start `4esn`=Node:``(\"d_str\")  Start _usn3=Relationship:``(`1esn`={`2esn`}) Where 0[{usn2}..][usn1..])"),
    octest_legacy:ct_string("With  *,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..] As `3esn`,123456789[12..$`4esn`] As `7esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Where $`3esn` Ends With $999 Ends With 0X0123456789ABCDEF Foreach(#usn7 In {`1esn`}[`6esn`..12e12]| Delete $`1esn`[07],{`3esn`}[{`5esn`}],999 Optional Match `8esn`=(({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})),((@usn5 )<-[#usn8? *..01234567]-($_usn3)) Using Join On ``,`7esn`,#usn7 Where True[$`7esn`..{1000}]) Unwind {#usn8} Is Null Is Null As _usn4 Union Optional Match `5esn`=(((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))),`8esn`=Shortestpath((({`2esn`:{7}[$7..],#usn7:`1esn` In 07}))) Return Distinct [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null][Allshortestpaths((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}))][Case {999}[$123456789..][12..] When $@usn6 =~#usn8 Then $999 Contains {7} When False Starts With 010 Then `8esn` Starts With {123456789} Else True Is Not Null Is Not Null End] As usn1 Order By 7[010][00] Descending,False[{`8esn`}] Asc,1e1 =~#usn8 =~2.12 Ascending Skip Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))[All(`2esn` In {999} Is Not Null Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)][Shortestpath((:_usn3{_usn3:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,`5esn`:1.0 Is Null Is Null})<-[`3esn`:`6esn`{`3esn`}]-(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})<-[ *123456789..0X7]-(`2esn` :`2esn`{`3esn`:#usn8 =~{999}}))] Limit 00 Contains #usn8 Return Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}] As @usn5,#usn7[00] As `7esn`,False Contains $#usn8 Contains 9e1 Order By Count(*) Is Not Null Asc Skip usn1 Is Not Null Is Not Null"),
    octest_legacy:ct_string("With Distinct *,9e1[9e1...e0] Order By 1e1[{_usn4}..123.654] Ascending,00[..$123456789][..$`5esn`] Asc Skip 7[1e1..#usn7] Limit [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] Unwind $123456789 Starts With .e12 As _usn3 Union Merge usn1=Shortestpath(((:`1esn`{usn2:{`6esn`} Ends With 0e0 Ends With {``}}))) On Create Set All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {7}[$123456789..{1000}][$`3esn`..`7esn`]).``! =All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $@usn6[01..@usn5][0x0..`4esn`]) Is Not Null Is Not Null,@usn5+=[12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))],#usn8 =$999[07..{#usn7}][1e1..0xabc]"),
    octest_legacy:ct_string("Match `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))),usn2=Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))) Using Scan ``:`4esn` Using Index `7esn`:`1esn`(`2esn`) Create `4esn`=({`5esn`:0Xa[0e0..{#usn7}]})<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00}),#usn7=(:``{``:0x0 =~123.654 =~{999}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}) Match `7esn`=(((:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[`3esn`?{`3esn`:1e1 Contains usn2}]->(:`3esn`:`6esn`))),`2esn`=Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Using Join On `1esn`,#usn8 Using Scan usn2:@usn5"),
    octest_legacy:ct_string("Load Csv From Extract(usn1 In 12.e12 In {0} In 9e1 Where {_usn4} Is Null|{@usn5}[..{12}][..0x0]) Starts With (@usn6 )<-[?:`6esn`$usn1]->(_usn4 )<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00}) As usn2 Fieldterminator \"d_str\" Create `5esn`=((usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null})-[?:`4esn`|:#usn7 *..0]-({`7esn`:{`1esn`} =~{_usn4}})),Shortestpath(((`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})<-[:`1esn`|:`3esn` *..01234567]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})-[``?:`4esn`|:#usn7 *07]-(_usn3 {@usn5:.e12 =~.e0}))) Union With Distinct 0e0[..1000] As #usn7,#usn8 Is Not Null As usn2 Order By 0.0[9e1..][Null..] Ascending,123.654[{@usn5}..123.654][1.0..$12] Descending,All(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]) =~(_usn4 :`7esn`)<-[{`2esn`:1000 Is Null Is Null}]->({`6esn`:7[010][00],#usn8:$usn1 =~010 =~07}) Desc Skip `8esn` Is Null Is Null Limit 12.0[#usn7]"),
    octest_legacy:ct_string("Start `8esn`=Rel( {`7esn`}) ,`3esn`=Node:`2esn`(@usn6={`4esn`})Where 07 Is Null Load Csv With Headers From $`4esn` Starts With 0e0 As #usn8  Foreach(`3esn` In {_usn4:$0[$1000..00][{0}..{usn1}]}[{`2esn`:$``['s_str'..][0x0..]}..]| Optional Match `1esn`=Allshortestpaths(((($_usn3)<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:@usn5{#usn7:{#usn7} In Count ( * ) In $#usn8})-[? *01..07]->(`8esn` :#usn7)))) Using Join On ``,`7esn`,#usn7 Where $`1esn`[$12][Count ( * )] Remove [`6esn` In 00 Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF].@usn5!,{usn1:$123456789 Starts With `5esn`}.`6esn`) Union All Remove {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}}.`3esn` With Distinct 0x0[{999}..][{_usn4}..] As `6esn`,{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] As `6esn`,Case When $`6esn` Starts With 12.e12 Starts With $#usn7 Then #usn8[`7esn`..] When {`4esn`}[$123456789..] Then {_usn3} Contains 9e0 Contains $999 End As @usn6 Order By {@usn5} Ascending,Reduce(@usn5=$`8esn`[..$999][..0],`` In {`1esn`} Starts With @usn6|{@usn6} Contains 123.654 Contains 01) Contains [`1esn` In `3esn`[07..] Where {0} =~12.0] Contains (:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null}) Descending,1000 Is Not Null Desc Skip Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Remove (:@usn5)-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).`4esn`!,Extract(`6esn` In 00 Where 12e12 Is Not Null Is Not Null|`1esn`[Null..]).usn1"),
    octest_legacy:ct_string("Start _usn3=Node( {usn2}) ,@usn5=Node:`6esn`(#usn8={`5esn`}) Union Merge _usn4=(({`5esn`:0Xa[0e0..{#usn7}]})<-[?:``]-(`7esn` :`3esn`:`6esn`)) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null On Match Set `5esn` =True[..010],#usn8+=Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}),`3esn` =@usn6[$_usn4] Unwind `7esn` Is Not Null Is Not Null As `6esn` Load Csv From (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] As `4esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return $7 Ends With $`8esn` As `4esn` Skip {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) Create #usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)) With Distinct 0xabc[$_usn3..],[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Order By 1.0 Ends With 1000 Descending,Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))) Asc Skip {usn2}[$`4esn`] Limit {123456789} =~{@usn6} Union All Merge `1esn`=((:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}))"),
    octest_legacy:ct_string("Merge _usn4=Allshortestpaths(((`4esn` :`1esn`)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6}))) On Create Set #usn8+=$1000 Is Not Null Is Not Null,`3esn` =Reduce(@usn6=@usn5[$12..\"d_str\"],`` In {`1esn`} Starts With @usn6|Count ( * ) =~{`5esn`} =~{_usn4}) Starts With None(`1esn` In $12 Is Not Null Where `7esn` Is Not Null Is Not Null) Starts With [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null]"),
    octest_legacy:ct_string("Load Csv With Headers From 1000 As `2esn` Fieldterminator \"d_str\" Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)),``=Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) Union All Remove [{usn1} Ends With {`6esn`} Ends With 123456789,$usn1[@usn6][#usn7]].`2esn`!,Reduce(`4esn`=$1000 Starts With $`8esn` Starts With {`5esn`},`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`8esn`}[True..][.e1..]).`3esn`! Create Unique #usn8=Shortestpath(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Union All Unwind $`2esn` Ends With `` Ends With {12} As `6esn`"),
    octest_legacy:ct_string("Start _usn3=Node:_usn3(_usn3='s_str') ,``=Relationship:#usn7(_usn3=\"d_str\")Where $_usn3[010..False] Match `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))),@usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Using Join On `6esn`,#usn7 Using Join On #usn7,@usn5 Union Merge (_usn3 :#usn8) On Create Set _usn3 =$`1esn` Ends With {`7esn`} Ends With $_usn3 Union All Unwind {123456789}[..'s_str'][..$@usn6] As `8esn` Remove [`3esn` In 123.654[1e1..][{#usn8}..] Where _usn3[\"d_str\"]|False Contains 0.e0 Contains Count(*)].`8esn`!,Filter(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`]).`3esn`!,Extract(_usn4 In `2esn` Where 1.0[{999}][$999]|`4esn`[usn1]).#usn7!"),
    octest_legacy:ct_string("Load Csv With Headers From Case 0[{@usn5}..][7..] When {`4esn`} In _usn4 Then `1esn`[Null..] When ``[{#usn8}] Then {`4esn`} Starts With $7 Starts With $`` Else `8esn` Contains $`3esn` Contains {`4esn`} End In [{_usn4} In {1000}] In Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`4esn`} Starts With $7 Starts With $``|0Xa Contains {`7esn`} Contains $999) As _usn3 Fieldterminator \"d_str\" Create #usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)) Union With Distinct @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn5,$`` =~{``} =~0.e0 Skip Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}) Where {_usn3} Contains True Contains 0X7 Create ((#usn8 :`8esn`:@usn5)-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]-(`8esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']})),@usn6=Allshortestpaths((:`2esn`{`2esn`:`5esn` Is Null Is Null})) Union Unwind None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null As `2esn` Merge (`3esn` :`1esn`)-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}) On Match Set `7esn` =$999[{_usn4}] On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] Detach Delete Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`])[(`3esn` :#usn7{`6esn`:{_usn4} Is Null,usn2:{`2esn`} Starts With @usn6})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)<-[@usn6?:`7esn`]->(:`2esn`{#usn7:#usn8 =~{999}})..Shortestpath((`8esn` {_usn4:{usn1} In Count ( * )})<-[`6esn`?]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})<-[@usn6?:`7esn`]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}))][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12])..[`1esn` In $12 Is Not Null Where {usn1} In Count ( * )|$`3esn`[{``}..]]],{usn2}[`6esn`..01234567],All(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7]) Contains Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End Contains Reduce(`6esn`={_usn4} In {1000},usn1 In 12.e12 In {0} In 9e1|{`4esn`} Starts With $7 Starts With $``)"),
    octest_legacy:ct_string("Load Csv From usn1(``[..$#usn7]) Ends With Reduce(#usn8=`1esn`[..01],_usn4 In 0.0[..{999}][..0.0]|``[00..$7]) Ends With Extract(_usn3 In True[7][$999] Where {`2esn`}[Count(*)]|{`7esn`}[``..]) As `3esn` Fieldterminator 's_str' Optional Match _usn3=Allshortestpaths(((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-(`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null}))) Using Index `3esn`:#usn8(`2esn`) Using Scan usn1:usn2 Where $@usn6[01..@usn5][0x0..`4esn`]"),
    octest_legacy:ct_string("Create `1esn`=(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}),Shortestpath((({_usn4:False[0Xa..$usn1]}))) Union All Unwind {`4esn`} In _usn4 As usn2 Merge ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}))"),
    octest_legacy:ct_string("Foreach(`2esn` In 07 =~$`8esn` =~9e1| Optional Match @usn5=((`1esn` :`4esn`:@usn6)),(#usn8 :#usn8) Where 9e1 Ends With Count(*) Ends With False) Foreach(`2esn` In #usn7[00]| Unwind $_usn4 As `8esn`) Union Load Csv With Headers From All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null As usn2  Start `3esn`=Rel:``(usn1={`4esn`})  Match ``=((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[ *0xabc..7]->(:`4esn`:@usn6)-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})) Using Index `6esn`:usn2(@usn5) Using Join On ``,`2esn`,`8esn` Union All Create ``=((:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})),((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[{#usn7:'s_str'[_usn4..0x0]}]-({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}))"),
    octest_legacy:ct_string("Unwind Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] As `4esn` Create Unique _usn3=(usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}),@usn6=({_usn4:False[0Xa..$usn1]})<-[:_usn3|`8esn` *0x0..{`5esn`:0.e0[12.e12]}]-(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]}) Start _usn3=Relationship:usn1('s_str') Where {_usn4} In {1000} Union Match ((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})),Allshortestpaths((#usn8 :`7esn`)) Using Index @usn5:usn2(`7esn`) Using Join On @usn5,usn2,_usn3 Unwind 01[..{`7esn`}][..01234567] As @usn5"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From 12.e12 In {0} In 9e1 As `4esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind $`1esn`[#usn8][$@usn5] As `1esn` Create Unique #usn8=(`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`),``=((`8esn` :@usn6)-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-({`7esn`:{usn1}[$`8esn`..0.0]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))"),
    octest_legacy:ct_string("Optional Match @usn5=Allshortestpaths((@usn6 :usn1:_usn4)<-[?:@usn6|`` *..01234567]->(#usn8 {usn1:$123456789 Starts With `5esn`})-[? *01..07]->(`8esn` :#usn7)),`8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan usn2:`5esn` Where 123.654[{@usn5}..123.654][1.0..$12] Load Csv With Headers From 0X0123456789ABCDEF Is Null Is Null As `` "),
    octest_legacy:ct_string("Return Distinct {`8esn`:{#usn8}[$#usn7..]}[Case 12.e12[``..usn2][{#usn7}..@usn5] When `3esn` Is Not Null Is Not Null Then 7 Contains `2esn` Contains $`8esn` Else $``[..1.e1][..12] End..] As `2esn` With Distinct *,(usn1 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})<-[`4esn`:#usn7|`2esn` *0X7..0Xa]-(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}) Is Not Null,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] Skip @usn5[$@usn5][{0}] Limit None(_usn3 In {@usn5}[..#usn7] Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000) Is Null Is Null Unwind {@usn5}[..#usn7] As `1esn` Union All Unwind {7}[$123456789..{1000}][$`3esn`..`7esn`] As #usn7 Load Csv From Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} As `1esn`  Remove [#usn7 In 123.654 Starts With $`` Where #usn8[`7esn`..]|{_usn3}[{0}]].usn2,``(True[True..],$_usn4).`5esn`? Union Create Unique `5esn`=Shortestpath(((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`))))"),
    octest_legacy:ct_string("Return {@usn5} Is Null,``[$0..][`1esn`..] As `4esn` Order By 0Xa[07..] Ascending Limit 's_str'[.._usn4][..``]"),
    octest_legacy:ct_string("Detach Delete [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]][Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..])..][None(`6esn` In 00 Where {@usn5} Starts With 1.0 Starts With 00)..],{``}[_usn4..$`1esn`] Remove (:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}).``? With  True Is Not Null As @usn5 Order By {`2esn`} In $123456789 In True Ascending,Reduce(#usn7={`1esn`} Starts With `4esn` Starts With {0},`3esn` In 123.654[1e1..][{#usn8}..]|9e12[$`5esn`]) Desc Skip 0Xa In {`7esn`} Limit 9e0 =~0.0 =~$`5esn` Union Match ``=Shortestpath(((`` {``:0x0 =~123.654 =~{999}})-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999}))) Using Scan `8esn`:_usn3 Using Index usn2:usn1(`8esn`)"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath((((`6esn` {``:`4esn`[usn1]})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})))) On Match Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5 Union All Detach Delete $#usn7[`2esn`][010],`7esn` =~.e12 =~$#usn7,$`2esn` In {123456789} Remove Shortestpath((((_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]})<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]})))).`3esn`?,``:`6esn`:`8esn`,Case Count(*) Is Not Null When {`4esn`} Starts With $7 Starts With $`` Then {`4esn`} Starts With $7 Starts With $`` Else 0X0123456789ABCDEF[`5esn`..][$#usn8..] End.usn2 Union Merge Shortestpath(((`6esn` :_usn3{#usn7:$@usn6[01..@usn5][0x0..`4esn`],_usn4:9e12 =~123456789 =~$999})<-[usn1? *01..07]->({`1esn`:$123456789[..$7][..$`6esn`]}))) On Create Set #usn8 =(`8esn` :`5esn`:@usn5)<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5) Starts With None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]),@usn5 =$_usn4 Is Null Is Null"),
    octest_legacy:ct_string("Unwind 9e1[9e1...e0] As #usn7 With  {_usn3} Is Not Null As `` Limit $#usn7[..{`4esn`}][..9e1] Where 1e1[..01] Foreach(@usn5 In 010 In `1esn`| Start #usn7=Relationship:usn2(_usn3='s_str') Where 0x0[{999}..][{_usn4}..]) Union Start @usn5=Node:``(#usn7=\"d_str\") Where $`6esn` Starts With 12.e12 Starts With $#usn7 Detach Delete 0.e0 Ends With False"),
    octest_legacy:ct_string("Remove Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 123456789 Is Not Null Is Not Null).`2esn`!,(usn1 {usn2:#usn8 =~{_usn3} =~``})-[?{`2esn`:0X0123456789ABCDEF[9e12],`7esn`:{`4esn`}[..07][..$`6esn`]}]->(`1esn` {@usn5:$usn1 In 0.12 In $``}).`6esn`!,Shortestpath((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})).`1esn`? Union All Create Unique (@usn5 :`8esn`:@usn5)<-[?:`1esn`|:`3esn`*]->({_usn4:{usn1} =~123.654 =~\"d_str\"}) Merge ((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`)) On Match Set @usn5 =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) With  [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]],$1000[..12.0][..0e0] Where $12 Contains 0Xa Union All Detach Delete Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}),{7} Starts With $usn1 Starts With 1.0"),
    octest_legacy:ct_string("Return Distinct $@usn6 Ends With 01 Ends With 999 Skip {_usn3} Contains 9e0 Contains $999 Limit Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Foreach(`2esn` In $`3esn`[..$`2esn`][..123.654]| Create `5esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),#usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)))"),
    octest_legacy:ct_string("Match _usn4=Allshortestpaths((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),((`2esn` :#usn8)<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})) Using Index @usn6:#usn8(_usn4) Using Scan _usn4:`2esn` Where 1.e1[{#usn8}] Remove {`1esn`:9e12 Is Not Null Is Not Null}._usn3!,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]).#usn8,Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str'|{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]).@usn6 Detach Delete [$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null,$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],$usn1 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv With Headers From False Ends With $`` As `6esn`  Foreach(`8esn` In `1esn` Is Null Is Null| Unwind Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Is Null Is Null As #usn8)"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})),`3esn`=((_usn4 :#usn8{`5esn`})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5)-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]})) Using Scan `4esn`:`` Using Index usn1:@usn5(`7esn`) Where {@usn5}[12.0..1000][{`3esn`}..{7}] Optional Match ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null}))"),
    octest_legacy:ct_string("Create (((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Match `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4),`5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Where $`8esn` In $`2esn` In {7}"),
    octest_legacy:ct_string("Match @usn6=Allshortestpaths((:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})),(:``) Using Index usn1:_usn3(``) Using Scan `1esn`:`3esn` Where 1e1[1.e1..][123.654..] Union Foreach(@usn6 In Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)]| Create usn1=Allshortestpaths(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]}))),((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`)))) Unwind $``['s_str'..][0x0..] As #usn7 Union All Merge @usn6=Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})) On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` On Create Set usn1+={usn1}[{`5esn`}..],Case {0} Is Null When $0 Is Not Null Then #usn8 Is Not Null When 12.e12[{@usn5}..][9e1..] Then `2esn`[$1000..9e12][{#usn8}..{7}] End.`6esn` =#usn8 =~{_usn3} =~``,`7esn`+=12e12 Ends With `4esn` Ends With 123456789"),
    octest_legacy:ct_string("Unwind #usn7[9e0] As usn2 Union With Distinct {@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] As `6esn`,Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123456789 Is Not Null Is Not Null) Starts With Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999) Starts With Reduce(usn2=1.e1 =~`2esn`,@usn5 In Null =~12e12|Count(*)[..``][..#usn8]) As `1esn` Order By 0x0[{999}..`1esn`][0Xa..False] Descending,{_usn4}[..$#usn7] Ascending Skip @usn6 Contains Null Merge `7esn`=Shortestpath((((`6esn` {``:`4esn`[usn1]})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})))) On Match Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5 Union Remove #usn8:#usn8,Single(_usn4 In `2esn` Where 0X0123456789ABCDEF[9e12]).`1esn`! Foreach(`1esn` In All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Contains `4esn`(999 Starts With 's_str') Contains (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})| Create (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})) Detach Delete Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null,``[..0X0123456789ABCDEF],{`1esn`}[$`4esn`..][False..])"),
    octest_legacy:ct_string("Using Periodic Commit 01234567 Load Csv With Headers From 's_str'[$usn2][Count(*)] As usn2 Fieldterminator \"d_str\" Return 9e12[{123456789}..][$`2esn`..] As `1esn`,010 Is Not Null Is Not Null As #usn7,{7} Is Null Order By $12 Contains 0Xa Descending Skip $12 Contains 0Xa Create Unique usn1=(((usn2 )<-[ *0xabc..7]->(:`4esn`:@usn6)<-[usn2?:usn2|#usn7]->(`3esn` :_usn4))),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})"),
    octest_legacy:ct_string("Load Csv From 123456789[12..$`4esn`] As _usn3 "),
    octest_legacy:ct_string("Merge ((`2esn` {_usn4:`4esn`[usn1]})<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(:_usn4)) On Match Set `6esn` ={1000},`` =All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null,All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]).`4esn`! =01234567[{`7esn`}..]"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths((usn1 :usn1:_usn4)) On Match Set _usn3 ={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null,Reduce(usn2=.e1[..\"d_str\"],#usn7 In 123.654 Starts With $``|0Xa[$1000..$123456789]).@usn6 ={`2esn`}[Count(*)],`2esn`+=[{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] On Match Set `6esn` =Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1),`3esn` =0.0 Contains $_usn4 Contains {`2esn`},(`4esn` {_usn4:12 Starts With {_usn4} Starts With $#usn8,_usn4:$@usn5[$`4esn`][$@usn6]})-[{`1esn`:@usn6[$usn2..#usn7]}]->({`3esn`:$usn1 In 01234567 In .e1,``:False[999]}).``? =\"d_str\" Ends With 1.0 Ends With 0e0 Union Remove Case When $1000[..12.0][..0e0] Then $_usn3 Is Null Is Null When `3esn` Is Not Null Is Not Null Then 7 Contains `2esn` Contains $`8esn` Else {`4esn`}[..{`4esn`}] End.usn2!,`7esn`:`4esn`:@usn6,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[{999}..][{_usn4}..]|$`1esn`[$12][Count ( * )]).`5esn`! Return *,(usn1 :@usn5)<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)[Extract(`1esn` In $12 Is Not Null Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|12.0 =~$#usn7 =~9e12)],[00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])] As #usn7 Order By Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc,\"d_str\"[..0.e0] Ascending,$7[{`1esn`}] Descending Limit $`5esn`[`1esn`..$123456789]"),
    octest_legacy:ct_string("Remove {``:00[07..],#usn7:$`3esn` In 9e12 In ``}.usn1?,{usn2:123.654[{`7esn`}][{7}],#usn8:$0[..{usn2}][..$usn1]}.usn2? Unwind $`8esn` In 0.0 In `1esn` As `6esn` Union All Detach Delete 07 =~$`8esn` =~9e1 Return *,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null,{999}[9e1] As usn1 Order By {123456789} =~{@usn6} Desc,Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..] Desc,{`5esn`} Ends With \"d_str\" Desc Limit _usn4 =~0e0 Union Delete #usn7[..12e12] Foreach(`6esn` In {_usn3}[{0}]| Detach Delete 12.e12 In {0} In 9e1,$``[01],0.0 In `6esn` In $@usn5 Start @usn5=Relationship:usn2({`5esn`}) ,@usn5=Node:@usn5(\"d_str\"))"),
    octest_legacy:ct_string("Remove Case 12.e12[$`8esn`..{`8esn`}] When {``} Starts With 123456789 Starts With usn2 Then 12.e12[{7}..7] End.`7esn`,usn1:`3esn`:`6esn`,Filter(#usn7 In 0Xa[@usn5][{`7esn`}] Where #usn7 Starts With $999).usn1! Union Merge usn1=Allshortestpaths(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]}))) Merge `5esn`=({_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}) Return Distinct All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,1000 As `1esn`,12e12[{usn2}..][`8esn`..] Order By Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null) Ascending,[False Contains 0.e0 Contains Count(*)][Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12])..[$_usn4 Is Not Null Is Not Null,`7esn` Is Not Null Is Not Null]] Descending,(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({#usn7:#usn8 =~{999}}) In Shortestpath(((:`1esn`)<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[`7esn`? *123456789..0X7{`6esn`:{0}[..{`7esn`}]}]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))) Desc"),
    octest_legacy:ct_string("Foreach(`2esn` In {`3esn`} Is Null| Create Unique ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})),(((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Unwind \"d_str\" Starts With $`8esn` Starts With {usn1} As `7esn`) Foreach(usn2 In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| Start #usn8=Relationship:usn1({7}) ,`5esn`=Relationship:_usn4(usn1={_usn4})Where .e12 Ends With 1000 Ends With 010) Start _usn4=Relationship:@usn6(#usn7='s_str') Where 9e1 Ends With Count(*) Ends With False"),
    octest_legacy:ct_string("With  *,#usn8 Is Not Null,$usn2 Starts With $@usn6 Starts With 010 As _usn4 Order By 12.e12[$`4esn`..] Descending Skip 00 Limit 0X0123456789ABCDEF[.e1..] Where \"d_str\" Ends With False Ends With {@usn6} Merge `8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) On Create Set @usn6+={7}[$123456789..{1000}][$`3esn`..`7esn`],Extract(#usn7 In 0Xa[@usn5][{`7esn`}] Where $@usn5 In $usn2 In {1000}|{`2esn`}[..{@usn6}][..1.e1]).`3esn`! =$@usn6[$0..usn1][0X0123456789ABCDEF..$999] On Create Set Extract(usn1 In 12.e12 In {0} In 9e1 Where False Starts With 010|True Starts With $`4esn` Starts With 12e12).`7esn`? =0X0123456789ABCDEF Is Null Is Null,`4esn` =`3esn` In {@usn6} Union All Merge `2esn`=(@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]}) On Create Set #usn8 =(`8esn` :`5esn`:@usn5)<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5) Starts With None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]),@usn5 =$_usn4 Is Null Is Null On Create Set #usn8+=1e1 =~#usn8 =~2.12,#usn7:`2esn`,`1esn` =Count ( * )[..12][..{@usn6}] Unwind 01 Starts With {999} Starts With $`2esn` As #usn8"),
    octest_legacy:ct_string("Match #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))),@usn6=((usn2 :_usn3)-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) Using Join On `5esn`,``,usn1 Using Join On #usn8,usn2,#usn7 Where 0X7[0X7..][Count ( * )..]"),
    octest_legacy:ct_string("Unwind 1e1 Is Not Null Is Not Null As `6esn` Start #usn8=Relationship:usn1({7}) ,`2esn`=Node(123456789,01234567,01234567)Where $12 Is Not Null With Distinct Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..],`` =~`6esn` =~usn1 As `2esn` Order By $_usn4 Starts With 's_str' Starts With {7} Desc,123456789 In $`6esn` In _usn3 Ascending Where 0.12[Count(*)..][$#usn7..]"),
    octest_legacy:ct_string("With Distinct .e0 =~{`8esn`} =~$999 As #usn7,$12 Is Not Null As `7esn`,{``} Is Null Is Null Limit {_usn4}[..$#usn7] Where {999} Is Null Create (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),(((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))) Merge (usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})"),
    octest_legacy:ct_string("Create Unique ((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})) Match #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))),@usn6=((usn2 :_usn3)-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) Using Join On `5esn`,``,usn1 Using Join On #usn8,usn2,#usn7 Where 0X7[0X7..][Count ( * )..]"),
    octest_legacy:ct_string("Optional Match `6esn`=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))),@usn5=(({`5esn`:0Xa[0e0..{#usn7}]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:#usn7)-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})) Remove [01 =~$`1esn`,1.e1[12e12..{`6esn`}],`8esn`].`1esn` Foreach(`6esn` In Filter(#usn7 In 123.654 Starts With $`` Where Count(*)[010..][#usn7..])[None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0})..]| With Distinct *,{1000}[7..$usn2] As @usn5,[12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))] As `1esn` Where {_usn4}[{``}..])"),
    octest_legacy:ct_string("Foreach(`5esn` In $usn1 Is Not Null Is Not Null| Return Distinct [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] As `6esn` Order By @usn6[$usn2..#usn7] Ascending,{`3esn`} Ends With 0 Ends With 9e1 Desc) Load Csv With Headers From Filter(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}) =~({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null}) As `1esn` Fieldterminator \"d_str\" Delete 00[0.12..],{999} Starts With {12},1.e1 =~$usn2"),
    octest_legacy:ct_string("Using Periodic Commit 123456789 Load Csv From Case {7} Contains $123456789 When {0} Is Null Then 0.0 Is Not Null Is Not Null Else {usn1} =~123.654 =~\"d_str\" End Starts With `1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7]) As `4esn`  Foreach(`4esn` In Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})]| Delete Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]],[1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End],Case {1000}[{#usn8}] When `7esn` Contains `5esn` Contains 0X7 Then True[..010] When {#usn8} =~{999} =~{#usn7} Then `1esn`[..\"d_str\"][..$`5esn`] Else `6esn`[..{999}] End In Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}]) Detach Delete 1.0 Is Null,{`6esn`} Ends With 0e0 Ends With {``})"),
    octest_legacy:ct_string("Create Unique (({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Return {`8esn`}[@usn5..][01..],All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2] As `5esn` Order By [#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}][..[$`6esn`[`8esn`][0.0],$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,True[$`7esn`..{1000}]]][..None(`2esn` In {999} Is Not Null Where {``} Ends With .e12 Ends With 0.e0)] Desc,{@usn5}[Count(*)..] Asc,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[Shortestpath(((({``:$7[{`1esn`}]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(#usn7 :@usn6))))..Extract(_usn3 In True[7][$999] Where $7 Is Null Is Null)][{`4esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:.e12 Is Null Is Null}..[`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000]] Descending Limit $`8esn` =~0x0 =~usn2 Union All With  $`2esn`[{usn2}],`7esn` Ends With $_usn3 Ends With usn2 Skip .e1 Ends With 0Xa Ends With 00 Where `1esn`[..01] Create @usn5=Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})),`2esn`=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]}))"),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)) Load Csv With Headers From 9e12 In 1e1 In .e12 As `5esn`  Union All Optional Match ((:`5esn`:@usn5)-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})) Using Scan usn1:`3esn` Using Index usn2:#usn7(usn2) Where 123456789[0..] Match `2esn`=(@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]}),Shortestpath((({_usn4:False[0Xa..$usn1]})))"),
    octest_legacy:ct_string("Load Csv From {`7esn`} Ends With `` Ends With {`8esn`} As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove {`8esn`:$@usn6 Starts With {`1esn`} Starts With 12,_usn3:@usn6[$_usn4]}.`2esn` Load Csv With Headers From {_usn3}[$usn2..] As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove [`5esn` In $`2esn`[12.e12][$@usn5] Where False[0Xa..$usn1]|$usn1[$123456789..0][{`1esn`}..12.0]].@usn6! Union Merge _usn3=((_usn3 :`1esn`)) Delete 12e12 Ends With `6esn` Ends With {`3esn`} Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As usn1 Fieldterminator \"d_str\" Union Load Csv With Headers From 1.e1[1.0] As `3esn`  Unwind `` Ends With {usn1} As `1esn`"),
    octest_legacy:ct_string("Optional Match `8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan `4esn`:_usn4 Load Csv With Headers From 12.e12[..1e1] As `2esn`  Merge Allshortestpaths((usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))"),
    octest_legacy:ct_string("Remove [{_usn3}[$usn2..],`5esn` Is Null Is Null,0.12 Contains 12.0].`3esn`,Shortestpath((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})).``! Unwind {#usn8} Is Null Is Null As _usn4 Union With  $`2esn`[{usn2}] Order By 07 Is Null Ascending Where {7}[{`4esn`}][`6esn`] Create Unique _usn4=Allshortestpaths(((({_usn4})<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})-[@usn6?:`2esn`]->(`7esn` )))),((:``{``:0x0 =~123.654 =~{999}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]}))"),
    octest_legacy:ct_string("Start `7esn`=Node:`4esn`(``='s_str') ,@usn6=Node:`5esn`({0}) Merge (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}) Unwind All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2] As `` Union All With Distinct *,`7esn`[{7}..@usn5],$`5esn`[`1esn`..$123456789] Order By $999 Contains {7} Desc,Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] Asc Skip $`6esn`[..1.e1][..1e1] Limit All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Contains `4esn`(999 Starts With 's_str') Contains (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Match Allshortestpaths((#usn8 :`7esn`)) Using Join On usn1 Using Join On `6esn`,_usn4"),
    octest_legacy:ct_string("Merge Shortestpath((((usn1 :@usn5)-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})))) On Create Set `8esn`+=Case #usn7 Ends With $#usn7 Ends With {`8esn`} When Count(*) Ends With 123.654 Ends With $12 Then $`3esn` Contains 0 Contains 07 When 0.e0 Ends With False Then {@usn6}[True..{_usn3}] Else 9e1 Ends With Count(*) Ends With False End Starts With [$usn1 In 01234567 In .e1,9e1 =~999,$0[$1000..00][{0}..{usn1}]] Starts With Allshortestpaths((`5esn` $`8esn`)<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})),Single(`3esn` In 123.654[1e1..][{#usn8}..] Where $7 Is Not Null).`8esn`? =$7 In @usn5 In {@usn5} Optional Match Shortestpath((@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0})) Using Index ``:`6esn`(usn1) Where 0e0 Contains `3esn` Contains `7esn`"),
    octest_legacy:ct_string("Foreach(`` In Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..]| With Distinct *,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,12 Is Not Null Is Not Null As #usn8 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending) Return 0.e0 Ends With False As `` Skip Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..] Optional Match usn1=(@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0}) Using Scan _usn4:`2esn` Using Scan `2esn`:`1esn` Where 12.e12[`7esn`] Union All Create #usn7=(_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}) Unwind $@usn5[$`4esn`][$@usn6] As usn2"),
    octest_legacy:ct_string("With Distinct *,Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']) In [$`2esn`[$usn2..][{``}..],0.e0 Ends With False] In (:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})-[`2esn`?$_usn4]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}) Order By {#usn7}[{#usn7}..][$`4esn`..] Ascending,_usn4(Distinct 9e12[$`5esn`],$_usn4[$`4esn`..$12]) Starts With [`` In {`1esn`} Starts With @usn6 Where {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]|$`` In 0 In {1000}] Starts With [_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``}] Desc,1000 Starts With 123.654 Starts With $_usn4 Asc Where Count(*) Starts With $usn1 Starts With {usn2} Union With  .e0 =~{`8esn`} =~$999 As #usn7,$12 Is Not Null As `7esn`,{``} Is Null Is Null Limit All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1}) Starts With {usn2:{`1esn`} Is Not Null}"),
    octest_legacy:ct_string("Return *,Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Skip 0e0[..$@usn5][..$`8esn`] Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])] Start `8esn`=Relationship:`4esn`(``='s_str') ,`8esn`=Rel( {`7esn`}) Union All Foreach(@usn5 In ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]]| Create Unique Allshortestpaths((`` :``)-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})) Optional Match Allshortestpaths((usn2 :`5esn`:@usn5)),Allshortestpaths((((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))))) Return Distinct [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] As `6esn` Order By @usn6[$usn2..#usn7] Ascending,{`3esn`} Ends With 0 Ends With 9e1 Desc"),
    octest_legacy:ct_string("Unwind $@usn5 Is Not Null Is Not Null As #usn7 Union With  {usn2} Starts With `` Starts With {0},@usn6[2.12..$#usn8][`3esn`..{`5esn`}] As `8esn` Order By ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4) In (`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})<-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]->(`4esn` :#usn7)<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}) In Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Desc,{_usn4}[{usn1}..$_usn3] Asc Skip {`3esn`}[$1000] Detach Delete {`2esn`} Ends With {12} Ends With 7,1e1[7..][.e1..],#usn7(Distinct)[usn2(Distinct)..{#usn7:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:#usn8[$0..False][$`1esn`..$#usn7]}][Case When {`4esn`}[..{`4esn`}] Then {`7esn`}[0X7..][0x0..] When {@usn6} Contains 123.654 Contains 01 Then #usn8 Is Not Null End..[9e12 Ends With 123456789]]"),
    octest_legacy:ct_string("Unwind #usn8 =~{usn1} =~00 As _usn4 Create Unique `3esn`=(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]}),Shortestpath(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})<-[@usn5:`3esn`|:@usn5 *01..07{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}]->(usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null}))) Remove [{#usn8}[#usn7..{`2esn`}],{1000},{@usn5}[1e1..][9e1..]]._usn4!,Allshortestpaths(((`` {``:$0[..{usn2}][..$usn1]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))).@usn5!,Reduce(#usn7=9e0[#usn8],_usn3 In True[7][$999]|{`2esn`}[Count(*)]).`8esn`?"),
    octest_legacy:ct_string("Remove Any(#usn7 In 0Xa[@usn5][{`7esn`}]).`4esn`"),
    octest_legacy:ct_string("Optional Match Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))),_usn4=Allshortestpaths(((usn1 :#usn7))) Where $1000[{`6esn`}..] Remove [`5esn` Is Null Is Null,$1000 Is Not Null Is Not Null].@usn6!,Single(_usn4 In 0.0[..{999}][..0.0] Where 1e1[1.e1..][123.654..]).`5esn`?,`4esn`:usn1:_usn4"),
    octest_legacy:ct_string("Remove Case When 00 =~0.e0 =~$`8esn` Then `5esn`[..9e0][..01234567] When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then {999} Starts With {12} End.`8esn`?,Filter(`1esn` In `3esn`[07..] Where 07 Is Null).@usn5!,#usn7(Distinct `2esn`[$1000..9e12][{#usn8}..{7}]).`7esn` Union Unwind #usn7 Starts With $999 As #usn7 Optional Match Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Using Join On usn1,_usn4,`6esn` Using Index usn1:_usn3(``) Where {_usn3}[`3esn`..$#usn8] Union All Return Distinct [`` In {`1esn`} Starts With @usn6 Where 0Xa[$1000..$123456789]] Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null}) Starts With Allshortestpaths((`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})),$`2esn` Ends With `` Ends With {12} As usn1 Order By `2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,12 Is Not Null Is Not Null Desc Skip ``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] Unwind .e1[..$`4esn`][..$`6esn`] As `7esn` Create (@usn6 {usn1:$#usn7 =~{12} =~False})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6)"),
    octest_legacy:ct_string("With  *,$usn1 In 01234567 In .e1 Order By Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] Descending,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,{7}[$7..] Desc Skip \"d_str\"[{999}..] Limit @usn5[$12..\"d_str\"] Where .e1 Contains $`3esn`"),
    octest_legacy:ct_string("Foreach(`3esn` In {@usn5} Starts With 1.0 Starts With 00| Detach Delete True Starts With $`2esn` Starts With {@usn6},.e12[\"d_str\"..][.e1..],$_usn3[..$`2esn`][..\"d_str\"]) Union All Remove Reduce(`4esn`=_usn4 Is Null Is Null,_usn3 In {@usn5}[..#usn7]|$@usn6[$`8esn`..][7..])._usn4? Optional Match (usn2 :`5esn`:@usn5)-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})"),
    octest_legacy:ct_string("Unwind {`6esn`}[All(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0])..][{`3esn`:{``}[010],`4esn`:$123456789 Starts With `5esn`}..] As `2esn` Return Distinct *,{@usn6} Contains 0e0,[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn` Order By 0Xa[..07] Ascending,False[999] Descending,'s_str'[_usn3..] Ascending Skip Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..] Limit {999}[$123456789..][12..] Return Distinct $@usn6[1.e1..`8esn`][Null..123456789] As `2esn` Order By $7 Is Not Null Descending Skip ({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})<-[`5esn`?:`7esn`]->(:@usn5)<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-({usn2:`1esn` In 07}) =~Reduce(@usn6=`3esn` =~9e0 =~@usn6,_usn3 In True[7][$999]|$`8esn`[..$999][..0]) =~{@usn5:12 Is Not Null,`2esn`:$999 In 999} Limit `6esn` Starts With 123.654 Union All Foreach(`8esn` In $`7esn` Contains {`1esn`} Contains 9e12| Remove (#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})-[`3esn`:`6esn`{`3esn`}]-(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6).@usn6) Optional Match #usn7=Allshortestpaths(((:`5esn`:@usn5))),@usn5=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where _usn4[Count(*)] Foreach(`6esn` In _usn3 =~123.654| Create Unique ((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})),``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) Remove (usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[`7esn`? *0X0123456789ABCDEF{@usn6:12 Starts With {_usn4} Starts With $#usn8}]-(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`5esn`) Union All Remove `7esn`(Distinct {999} Starts With {12},999 Ends With .e12 Ends With .e1).@usn5"),
    octest_legacy:ct_string("Remove Case 0.12 Starts With 9e12 Starts With $`1esn` When $`5esn`[`1esn`][0X0123456789ABCDEF] Then 9e12 Is Not Null Is Not Null Else {`2esn`} Ends With {12} Ends With 7 End.usn1 Load Csv With Headers From $usn1[0X7] As `6esn` Fieldterminator 's_str' Foreach(@usn6 In $`` Contains 1.e1| Create Unique #usn8=Allshortestpaths((`5esn` :_usn4)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})),Shortestpath((((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}))))) Union All Delete 12e12 =~{#usn7} =~$`3esn` With  {`3esn`}[{12}..][0.12..] As ``,$``[True..] Order By [`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`) Ascending,{0}[False..@usn5] Desc Limit 12 In 999 Where Count(*)[..``][..#usn8]"),
    octest_legacy:ct_string("Start `8esn`=Relationship:`7esn`({usn1}) ,@usn6=Node:`1esn`(\"d_str\")Where @usn6[$_usn4]"),
    octest_legacy:ct_string("With  *,$7 In 1.0 In 1e1,0X7 Starts With {999} Starts With 12e12 As @usn5 Skip {usn1}[$7..0x0] Return *,.e1 Contains $`3esn` As _usn3 Skip Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})] Limit #usn7 Starts With 1000 Starts With .e1 Union Remove Single(`1esn` In $12 Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]).#usn7,Single(_usn4 In `2esn` Where False Ends With $``).`1esn`! Union All Merge ``=(usn2 :`4esn`:@usn6)<-[_usn3?:@usn6|``]->(usn1 :`5esn`:@usn5) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] On Match Set ``+=$@usn6 Contains `7esn`,_usn4:`5esn`:@usn5"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From (`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3})[Reduce(usn1=0x0[$`8esn`.._usn3],_usn4 In `2esn`|{123456789} Is Not Null)..Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789])][[_usn4 In `2esn` Where 9e12 Ends With 123456789|07 =~$`8esn` =~9e1]..(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->()] As @usn5 "),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From {@usn6} Starts With @usn5 Starts With @usn6 As `6esn` "),
    octest_legacy:ct_string("Foreach(_usn3 In 12 In 999| With Distinct `7esn`[{7}..@usn5] As `6esn`,[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn`,$999 Is Not Null Is Not Null As `3esn` With Distinct `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Limit `` =~`6esn` =~usn1 Where @usn5[12.0][{1000}]) Remove `1esn`:`4esn`:@usn6,{@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']}.#usn7? Union Unwind 9e0 Contains @usn6 Contains {#usn7} As `` Create #usn8=(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Load Csv With Headers From {999} Starts With {_usn4} Starts With 00 As `8esn` Fieldterminator \"d_str\" Union Return 999[12.0..][#usn7..],7[010][00] Limit `4esn` Contains #usn8 Contains 7 Create Unique `3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))) Remove None(_usn3 In {@usn5}[..#usn7] Where $`` In 0 In {1000}).`5esn`,[@usn5 In Null =~12e12 Where 0[{usn2}..][usn1..]|_usn3[\"d_str\"]].`3esn`?,Extract(`1esn` In `3esn`[07..] Where 12 Ends With 01|{#usn7}[Count ( * )..12][$`2esn`..`4esn`]).usn1?"),
    octest_legacy:ct_string("Return 1.0 In 9e1 In {`7esn`},$12 Is Not Null As `6esn`,01234567[$7..{12}] Order By False[1000][{`7esn`}] Asc,Count(*) Ends With $`` Ends With {7} Asc Skip 9e12 Contains $`7esn` Limit #usn7 Ends With $#usn7 Ends With {`8esn`} Return 1.e1 Is Null Skip $`2esn`[{``}..{1000}][#usn8..`2esn`] Limit $123456789[..$7][..$`6esn`] Union All Create @usn6=Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))),`8esn`=Shortestpath((({`7esn`:{`1esn`} =~{_usn4}})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`))) Return *,1.e1 Starts With $`2esn` Starts With $0 Union Create Unique usn1=Allshortestpaths((`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})),#usn7=Allshortestpaths((({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))) Delete 0.0 In `6esn` In $@usn5,9e12 In 1e1 In .e12,1.0[..`4esn`][..{0}] Foreach(`1esn` In $#usn7[`5esn`]| Start ``=Rel:_usn4({`2esn`}) ,`7esn`=Node:`4esn`(``='s_str')Where 1000 Is Not Null)"),
    octest_legacy:ct_string("Unwind $123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]} As `2esn` Union All Unwind None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] As _usn3 Start `4esn`=Rel:`7esn`(usn2='s_str')  Create Unique _usn3=(((`7esn` :#usn7{`5esn`:_usn4 Is Null Is Null})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})-[{``:\"d_str\"[{`8esn`}..]}]-(:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]}))),#usn8=(((:@usn5{@usn6:{7} Contains $123456789})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]}))) Union All Create (usn1 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`) Merge Allshortestpaths((`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})-[``:usn2|#usn7 *..0Xa]->(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})) On Create Set Extract(`1esn` In $12 Is Not Null Where 1e1[..$1000][..999]|True Starts With $`2esn` Starts With {@usn6}).``? =[$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]],usn1 ={usn2} =~`7esn` =~07,usn1+=usn2[999..] On Match Set [#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]].@usn5 =Reduce(#usn8=$7[{`1esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|$12 Contains 0Xa) Is Null Is Null,Reduce(`7esn`=$0[`7esn`],`6esn` In Count(*) Ends With $`` Ends With {7}|$7 Ends With 0X7).`5esn` =$0 Is Not Null,`1esn`+=`2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}]"),
    octest_legacy:ct_string("Create (@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}),_usn4=(@usn6 :@usn6{`5esn`:@usn5[$12..\"d_str\"],usn2:1.e1[0X0123456789ABCDEF..]}) Remove None(_usn4 In `2esn` Where `3esn`[..{_usn4}][..{@usn5}]).`1esn`,[999 Ends With .e12 Ends With .e1,{_usn3}[..$`8esn`]].@usn6? Merge @usn6=Allshortestpaths((@usn6 :@usn5{usn2:{`6esn`} Ends With 0e0 Ends With {``}})) On Create Set Reduce(`4esn`=1000,`5esn` In $`2esn`[12.e12][$@usn5]|True Starts With $`2esn` Starts With {@usn6}).`6esn`! =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,All(`` In {`1esn`} Starts With @usn6 Where #usn7[$`5esn`..])._usn3? ={999} In 0.0 In {0},@usn5+=[12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))]"),
    octest_legacy:ct_string("Unwind 01234567['s_str'] As usn2 Start usn1=Node:`7esn`(`5esn`={usn2}) ,_usn3=Node:`2esn`(#usn7={usn1}) Load Csv With Headers From Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Is Null Is Null As `2esn` Fieldterminator 's_str' Union All Detach Delete $999 In 999,`2esn`[usn2..][$7..] Union All Create _usn4=Allshortestpaths(((({_usn4})<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})-[@usn6?:`2esn`]->(`7esn` )))),((:``{``:0x0 =~123.654 =~{999}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})) Return *,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7,.e1 Ends With 0Xa Ends With 00 As _usn3"),
    octest_legacy:ct_string("Create Unique ``=(({`4esn`:1000 Is Null Is Null})),Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))) Foreach(usn1 In 999| With  {@usn5},{0} Is Null As `6esn` Skip Null In .e0) Union All Create Unique ((`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})),`4esn`=Shortestpath((({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`))) Foreach(`6esn` In {``} Starts With 123456789 Starts With usn2| Return Distinct True[..010],`1esn` =~1000 =~1000 As `8esn` Order By 0.0[9e1..][Null..] Descending,Reduce(`6esn`={@usn5} Starts With 1.0 Starts With 00,usn1 In 12.e12 In {0} In 9e1|123456789 Ends With usn1 Ends With usn2) In (_usn3 :_usn3)<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)-[`7esn`?:`` *0xabc..7]-(usn2 ) Descending Skip Reduce(#usn8=``[00..$7],_usn4 In 0.0[..{999}][..0.0]|12 Starts With $#usn7) =~usn1() =~Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 999 Ends With .e12 Ends With .e1|0[`4esn`][12.e12]) Limit $`7esn`[$0..][{`4esn`}..])"),
    octest_legacy:ct_string("Remove {@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0}.#usn7! With  [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]],$1000[..12.0][..0e0] Where $12 Contains 0Xa Union Load Csv With Headers From `2esn` As `` "),
    octest_legacy:ct_string("Create Unique ((({_usn4})<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})-[@usn6?:`2esn`]->(`7esn` ))),``=(({usn1:{usn2} =~@usn6 =~{`4esn`},usn1:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[``?:`6esn` *07{`5esn`:{12} Contains `7esn` Contains $_usn3,_usn4:$`3esn` In 9e12 In ``}]-(:@usn6)-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}))"),
    octest_legacy:ct_string("Foreach(#usn8 In $1000 =~{1000} =~`5esn`| Unwind Single(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7])[..{@usn5:_usn4[Count(*)],`6esn`:$`3esn` Contains 0 Contains 07}][..Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])] As #usn7) Union Delete All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $@usn6[01..@usn5][0x0..`4esn`]) Is Not Null Is Not Null,[`1esn` In $12 Is Not Null Where 07 =~@usn5][..Reduce(#usn8=``[00..$7],_usn4 In 0.0[..{999}][..0.0]|12 Starts With $#usn7)][..Filter(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0})],0Xa In {`7esn`} Remove @usn5(Distinct 0.e0 Contains #usn7).`8esn`!,({usn2:`1esn` In 07})<-[?]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01}).#usn7 Union Unwind 0.12[010..][{0}..] As #usn8 With Distinct Count ( * ) =~{`5esn`} =~{_usn4} As _usn3,Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)] As #usn8 Where {`3esn`} Ends With `1esn` Ends With $@usn6 Foreach(#usn8 In $usn1 =~010 =~07| Optional Match Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Using Scan `2esn`:@usn6)"),
    octest_legacy:ct_string("Return Distinct @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn5,$`` =~{``} =~0.e0 Skip Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}) Merge ((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`)) On Match Set @usn5 =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Union All Delete `3esn`[..0.e0][..$usn1],$#usn7[.e1..{`7esn`}][{`6esn`}..$_usn4] Return Distinct #usn7 Starts With $999 As `6esn`,{7}[$123456789..{1000}][$`3esn`..`7esn`] Skip $123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]} Limit None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])]"),
    octest_legacy:ct_string("Load Csv With Headers From .e0[0.12] As usn1 Fieldterminator \"d_str\" Foreach(`1esn` In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| With Distinct *,0X0123456789ABCDEF Contains {usn1} As @usn5 Order By (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] Descending,`2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] Asc Skip #usn7[00] Limit Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]]) Optional Match `6esn`=Allshortestpaths((@usn6 :usn1:_usn4)),@usn6=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))) Union Remove None(_usn4 In 0.0[..{999}][..0.0] Where {`7esn`} Is Not Null Is Not Null).`3esn`? Delete {`3esn`} Ends With `1esn` Ends With $@usn6,{12} =~0.e0 =~{_usn3},[_usn4 In 0.0[..{999}][..0.0] Where ``[..0X0123456789ABCDEF]][Reduce(``=`6esn` Is Null Is Null,`2esn` In {999} Is Not Null|{12}[999][{_usn3}])..[_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]]]"),
    octest_legacy:ct_string("Detach Delete {`2esn`} Ends With {12} Ends With 7,1e1[7..][.e1..],#usn7(Distinct)[usn2(Distinct)..{#usn7:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:#usn8[$0..False][$`1esn`..$#usn7]}][Case When {`4esn`}[..{`4esn`}] Then {`7esn`}[0X7..][0x0..] When {@usn6} Contains 123.654 Contains 01 Then #usn8 Is Not Null End..[9e12 Ends With 123456789]] Return None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) Is Null Is Null As @usn5,Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) As ``,None(`3esn` In 123.654[1e1..][{#usn8}..] Where 7[$0..][{_usn4}..])[All(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..])..(:_usn3{0})-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]->({@usn5:``[{123456789}..]})<-[`4esn`:`3esn`|:@usn5 *..010]->({`4esn`:12 Starts With {_usn4} Starts With $#usn8})] Skip {``}[_usn4..$`1esn`] Foreach(`3esn` In {`5esn`} Contains 123456789 Contains 9e12| With  `7esn` =~.e12 =~$#usn7 As `3esn`,$`8esn` Is Null Is Null As `6esn` Order By False[{`8esn`}] Asc,Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null Asc,{1000}[1000][$usn1] Ascending Skip $#usn8[{12}..]) Union Merge ((`5esn` :@usn6)<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})) On Create Set _usn4+=Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null)[..Reduce(`1esn`=$`3esn` In 9e12 In ``,`2esn` In {999} Is Not Null|$@usn5[..usn2][..$#usn7])],Shortestpath(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))).`7esn`! =1e1[{_usn4}..123.654] On Match Set `1esn`+=`2esn` Starts With `` Starts With 1e1,Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End.`3esn` =$0 Ends With False Ends With $_usn4 Load Csv With Headers From Any(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12})[Reduce(#usn7={_usn3}[`3esn`..$#usn8],`3esn` In 123.654[1e1..][{#usn8}..]|{999} Starts With {_usn4} Starts With 00)..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000])][All(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])..[$_usn3 Is Null Is Null,`5esn` Is Null Is Null,7 Is Null Is Null]] As `2esn` "),
    octest_legacy:ct_string("Return Extract(#usn7 In 123.654 Starts With $`` Where #usn8[`7esn`..]|0.0[..{999}][..0.0])[..Extract(`1esn` In `3esn`[07..] Where 00[07..]|$#usn7 Starts With 9e0 Starts With 2.12)][..None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])],All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..] Skip [{999} Starts With {12},9e1 Ends With Count(*) Ends With False,0X0123456789ABCDEF[`5esn`..][$#usn8..]] In Single(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null) Limit (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) Start #usn7=Node(0,0X7) Where True Is Not Null Is Not Null Return 's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Union Foreach(`4esn` In Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})]| Delete Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]],[1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End],Case {1000}[{#usn8}] When `7esn` Contains `5esn` Contains 0X7 Then True[..010] When {#usn8} =~{999} =~{#usn7} Then `1esn`[..\"d_str\"][..$`5esn`] Else `6esn`[..{999}] End In Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}]) Detach Delete 1.0 Is Null,{`6esn`} Ends With 0e0 Ends With {``}) Union All Merge `8esn`=((`5esn` )) On Match Set (:usn1:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})-[`7esn`]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}).``? =$`2esn`[{usn1}..],None(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e12 =~$_usn4).`7esn`! =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] On Create Set _usn4+=0.12[Count(*)..][$#usn7..],None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =[$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null Start @usn6=Node:@usn5({usn1}) ,#usn8=Node:`6esn`(#usn8={@usn5})Where {7} Starts With $usn1 Starts With 1.0"),
    octest_legacy:ct_string("Return Distinct *,.e0 =~{`8esn`} =~$999 As #usn7,010 In $`5esn` In 0 As `6esn` Order By $usn1 In 0.12 In $`` Descending,Count ( * ) Contains 12 Descending Skip $`` In `7esn` Limit [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]][Shortestpath(((`1esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))..] Foreach(@usn5 In 010 In `1esn`| Start #usn7=Relationship:usn2(_usn3='s_str') Where 0x0[{999}..][{_usn4}..]) Union Create `6esn`=Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(:`2esn`{`6esn`:@usn6[{0}..]}))),`8esn`=({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(usn1 :`8esn`:@usn5{`1esn`:{#usn7} Contains 0.0 Contains $0,`2esn`:.e12[010..$123456789]})<-[_usn3?:@usn6|`` *0x0..{`3esn`}]-(@usn6 {`1esn`:01234567 In $123456789,`1esn`:{`6esn`}[..{`2esn`}]}) Load Csv With Headers From `3esn` Starts With Count(*) As `3esn`  With  *,$`1esn`[`6esn`..][00..],$1000 =~{1000} =~`5esn` As @usn6 Order By {#usn8}[usn1][1.0] Asc,`7esn`[{usn1}][999] Descending Skip Null In .e0 Where {999} Is Null Union Optional Match Shortestpath(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0}))),Shortestpath((`6esn` :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})) Using Scan `8esn`:#usn7"),
    octest_legacy:ct_string("Delete $123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]} Load Csv With Headers From 7[$0..][{_usn4}..] As usn1  Start `7esn`=Node:`4esn`(``='s_str') Where 01 =~$`1esn`"),
    octest_legacy:ct_string("Load Csv From (#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start `4esn`=Node:`1esn`(#usn7=\"d_str\") Where $_usn3 Is Null Is Null Unwind `7esn`[0..$usn2][{usn2}..0.e0] As `1esn` Create `7esn`=((:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})<-[`2esn`?:@usn6|`` *..00]->({_usn3})) Union All Unwind 123.654 Contains $#usn8 Contains .e1 As usn2 Merge _usn4=(({`5esn`:0Xa[0e0..{#usn7}]})<-[?:``]-(`7esn` :`3esn`:`6esn`)) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null On Match Set `5esn` =True[..010],#usn8+=Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}),`3esn` =@usn6[$_usn4] Load Csv From Shortestpath((((`6esn` :`7esn`)-[_usn4 *0x0..]-(:``$_usn4)<-[#usn8?:``]-({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})))) Starts With Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End Starts With [True[7][$999],{`8esn`}[0X7][$`3esn`]] As `3esn` Fieldterminator \"d_str\" Union All Merge (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})) Optional Match Shortestpath((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12})),`7esn`=(((`8esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']})-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(:`2esn`{`6esn`:@usn6[{0}..]})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:``{`2esn`:Null In .e0,usn1:01234567[..9e1]}))) Using Index usn2:``(#usn8) Using Index usn1:`3esn`(`3esn`) Where Count ( * ) Starts With 010 Starts With 0x0"),
    octest_legacy:ct_string("Create usn2=(((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``}))),`7esn`=Allshortestpaths(((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}))) Remove Reduce(`2esn`={1000},_usn3 In {@usn5}[..#usn7]|00).`6esn`! Create Unique #usn7=((_usn3 :`7esn`)<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),@usn5=(({`5esn`:0Xa[0e0..{#usn7}]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:#usn7)-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})) Union Create Unique `5esn`=Allshortestpaths((usn2 :`5esn`:@usn5)),@usn5=(({_usn4:False[0Xa..$usn1]})) Foreach(`1esn` In True[$`7esn`..{1000}]| Create (((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Unwind `3esn`[$@usn5..@usn5][9e1..$``] As #usn8) Load Csv With Headers From {`4esn`}[{`1esn`}][{1000}] As `6esn` Fieldterminator \"d_str\" Union Detach Delete 2.12 In $`8esn` In {`7esn`},12.e12[``..usn2][{#usn7}..@usn5],Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null)[..Reduce(`1esn`=$`3esn` In 9e12 In ``,`2esn` In {999} Is Not Null|$@usn5[..usn2][..$#usn7])]"),
    octest_legacy:ct_string("Load Csv From .e1[..{`7esn`}][..{_usn3}] As usn1 Fieldterminator \"d_str\" Merge usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) Union All Merge (:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Union Unwind {999} Is Not Null As `6esn` Return Distinct Count(*) Is Not Null,{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Order By [0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Ascending,{1000}[{``}][999] Asc Foreach(_usn3 In .e1 Contains $`3esn`| Optional Match Allshortestpaths(((`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))),`1esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4) Using Scan `4esn`:_usn4)"),
    octest_legacy:ct_string("Create `4esn`=Shortestpath(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))),((#usn8 {`8esn`:{7} Contains $123456789})) Merge `4esn`=Shortestpath((`3esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8})) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null Remove usn1:`4esn`:@usn6,`3esn`:`1esn`,({usn2:`1esn` In 07})<-[usn2? *0xabc..7{usn1:$123456789 Starts With `5esn`}]->(:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[`6esn`?:_usn3|`8esn`]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]}).@usn6 Union Unwind #usn7[9e0] As `` Union Return Distinct *,0 Contains $usn2 Contains 12e12 Order By $_usn4 Contains {#usn7} Contains `1esn` Descending,$`1esn`[#usn8][$@usn5] Asc,0e0 Contains `3esn` Contains `7esn` Descending Skip ``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] Create Unique @usn5=(`6esn` :`8esn`:@usn5),usn1=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)) Create _usn3=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}),@usn5=({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})"),
    octest_legacy:ct_string("Foreach(`8esn` In {@usn5}[12.0..1000][{`3esn`}..{7}]| Optional Match @usn5=((@usn5 :`8esn`:@usn5)<-[:`1esn`|:`3esn` *07{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]-(`6esn` {``:`4esn`[usn1]})<-[@usn6?:`8esn`|:_usn4 *0X7..0Xa{`3esn`:9e1 =~999}]-(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})),Allshortestpaths(({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]}))) Match Allshortestpaths(({`5esn`:0Xa[0e0..{#usn7}]})<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})),usn2=((`4esn` :`7esn`))"),
    octest_legacy:ct_string("Optional Match Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Shortestpath((:_usn3{0})-[usn2 *12..]->(:``)) Using Join On usn2,`6esn` Using Index usn1:`7esn`(_usn3) Where 1000 Load Csv With Headers From usn1[_usn4][{#usn8}] As `2esn` Fieldterminator \"d_str\" Union Detach Delete $`2esn`[{usn1}..] Foreach(_usn4 In ``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..]| Create `2esn`=((#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})-[? *07{#usn7:`5esn`[..9e0][..01234567]}]-({#usn8:0Xa Contains Count ( * ),`8esn`:Null Is Null Is Null})) Start `6esn`=Node:``(usn1={`4esn`}) ) Union Return *,$`8esn` In $`2esn` In {7} As _usn3 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Skip [$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End] Unwind Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) As usn2 Detach Delete Single(`2esn` In {999} Is Not Null Where 123.654 Ends With usn2 Ends With 0) =~{#usn8:Count(*)[010..][#usn7..]} =~Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)"),
    octest_legacy:ct_string("Unwind $_usn4[$`4esn`..$12] As _usn3 Foreach(`2esn` In $usn2 In 123.654 In .e0| Remove {@usn6:.e12 Is Null Is Null}.``?,Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})).@usn5? Create `5esn`=Allshortestpaths(((:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})<-[`8esn`?:`4esn`|:#usn7]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})-[usn2 *07{usn1:07 =~@usn5}]->({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))),((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[``?:usn2|#usn7 *0x0..]-(@usn5 :usn1:_usn4)-[:`5esn`]->(:@usn6{`2esn`:$999 In 999}))) Remove Filter(_usn4 In 0.0[..{999}][..0.0] Where True Starts With $`4esn` Starts With 12e12).@usn5!,(usn2 {_usn3:$0 In _usn4})-[_usn4? *07{1000}]-(`` )-[?:`6esn` *07]-(#usn7 :_usn3{`2esn`}).#usn7?,None(`2esn` In {999} Is Not Null Where {``} Ends With .e12 Ends With 0.e0).usn2 Union All Create ({#usn7:#usn8 =~{999}}) Start ``=Node:`6esn`(usn2={`8esn`})  Return Distinct Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}],$#usn8[{12}..] As `6esn`,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)] Skip Count(*)[.e12]"),
    octest_legacy:ct_string("Foreach(#usn8 In Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null]| Remove usn2:@usn5,Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End.#usn8!,`8esn`:_usn3) Return *,{`4esn`:$`3esn` Contains 0 Contains 07}[Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])][(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6)] As #usn7,_usn4 Is Null Is Null Order By {usn2} =~@usn6 =~{`4esn`} Asc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `6esn` Starts With 123.654 Limit @usn6(`` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[:#usn8|`2esn` *0x0..{`3esn`:.e12[$7..][{`6esn`}..]}]->({usn1:1000 Is Null Is Null})]"),
    octest_legacy:ct_string("Start `6esn`=Relationship:`7esn`({usn1})  Load Csv With Headers From [{`3esn`} Is Null,{@usn5} =~_usn4 =~0.12] =~Extract(_usn4 In `2esn` Where 1.0[{999}][$999]) As `2esn` Fieldterminator 's_str' Union Create Unique usn1=(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]})-[`3esn`:`6esn`{`3esn`}]-(@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]}) Union Match ((:`6esn`:`8esn`)),`1esn`=(((#usn8 {#usn7:$1000 Is Not Null Is Not Null})<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:usn1 *0X7..0Xa]->(:#usn7{#usn7:$`8esn` In $`2esn` In {7}}))) Where {@usn6}[$`7esn`..][False..] Create Unique `3esn`=(((`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[usn1?:`4esn`|:#usn7 *0X7..0Xa]->({_usn4:01234567[..9e1]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}))) Foreach(`5esn` In 0Xa[0e0..{#usn7}]| Optional Match Allshortestpaths(((`5esn` :@usn6)<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}}))),@usn6=Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})))"),
    octest_legacy:ct_string("Match ((`3esn` :`4esn`:@usn6{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]})-[`8esn`?:``]->(`` {`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]})),`3esn`=((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})) Using Scan ``:usn2"),
    octest_legacy:ct_string("Match Shortestpath((((:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})))) Using Index `4esn`:usn2(`4esn`) Match (({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})) Union All Create `4esn`=((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({`1esn`:$123456789[..$7][..$`6esn`]})) Foreach(_usn4 In $`` In \"d_str\"| Load Csv From `4esn` Is Not Null Is Not Null As `7esn` Fieldterminator \"d_str\" Return ``[{#usn8}]) Load Csv With Headers From {#usn8} Is Null Is Null As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From 1.e1[1.0] As `3esn`  Unwind `` Ends With {usn1} As `1esn` Union All Detach Delete ``[..$#usn7],{123456789}[..'s_str'][..$@usn6] Merge @usn6=Allshortestpaths(((`6esn` :_usn3{#usn7:$@usn6[01..@usn5][0x0..`4esn`],_usn4:9e12 =~123456789 =~$999})<-[usn1? *01..07]->({`1esn`:$123456789[..$7][..$`6esn`]}))) On Create Set None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =0X0123456789ABCDEF[$`5esn`..],(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[_usn3?:`1esn`|:`3esn`{`3esn`:$@usn6 Contains $`7esn` Contains 1e1,@usn5:True Starts With $`4esn` Starts With 12e12}]-(`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]})<-[`3esn`?*{#usn8:$`1esn`[..{_usn3}]}]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}).`8esn`? =$12 Is Not Null On Match Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Merge Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))))"),
    octest_legacy:ct_string("Merge ``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) On Match Set _usn4 =9e0 Starts With .e0 Starts With \"d_str\",`4esn` =Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))),@usn6+={999} Starts With {_usn4} Starts With 00 Optional Match @usn6=((`4esn` :usn2:`2esn`)) Using Join On @usn5,`3esn` Using Scan `8esn`:#usn8 Where 9e12 Is Not Null"),
    octest_legacy:ct_string("Foreach(`` In _usn4(Distinct 9e12[$`5esn`],$_usn4[$`4esn`..$12]) Starts With [`` In {`1esn`} Starts With @usn6 Where {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]|$`` In 0 In {1000}] Starts With [_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``}]| Load Csv From 12 In 999 As `8esn` Fieldterminator \"d_str\" Load Csv From None(`` In {`1esn`} Starts With @usn6 Where {12}[00..{@usn6}][1.e1..0])[Filter(_usn3 In True[7][$999] Where 12e12 Ends With `6esn` Ends With {`3esn`})] As _usn3 Fieldterminator \"d_str\") Start #usn8=Node:usn2(_usn3='s_str') Where 9e12 Ends With 123456789"),
    octest_legacy:ct_string("With Distinct {`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] As `4esn`,{usn1}[$`8esn`..0.0] As `2esn`,{_usn4} In {`6esn`} In `1esn` Skip $@usn6 Starts With {`1esn`} Starts With 12 Where `4esn`[usn1] Union All Start `8esn`=Node:`4esn`(`1esn`=\"d_str\") ,#usn8=Relationship:usn1({7})Where @usn6[$12] Return Distinct Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,.e1 Ends With {7} Ends With $usn1 As ``,_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..] Union Load Csv With Headers From $`8esn` Starts With 0xabc Starts With {usn2} As `1esn`  Foreach(`5esn` In 9e1['s_str'..0xabc]| Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`} Create `5esn`=Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))),`8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))) Load Csv With Headers From {_usn4} Is Null As `` "),
    octest_legacy:ct_string("With Distinct Null Ends With 12 Ends With usn2,010 In `1esn`,07 =~$`8esn` =~9e1 As _usn4 Skip Reduce(@usn6=#usn8 Is Not Null,#usn7 In 0Xa[@usn5][{`7esn`}]|{7}[{`4esn`}][`6esn`])[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])] Limit #usn8 In `8esn` In 07 Union All Unwind {#usn7}[{#usn7}..][$`4esn`..] As `5esn` Merge Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})) Union All Delete Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],{`3esn`}[{`5esn`}] Create Unique #usn8=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),Shortestpath(((`1esn` :`4esn`:@usn6)))"),
    octest_legacy:ct_string("Return Distinct *,`5esn` Contains {`7esn`} Contains $7 Skip All(`5esn` In $`2esn`[12.e12][$@usn5] Where False[0Xa..$usn1])[Case When {usn2} Then $1000 Starts With $`8esn` Starts With {`5esn`} When {`6esn`}[..{`2esn`}] Then 12.e12[``..usn2][{#usn7}..@usn5] Else False[0Xa..$usn1] End][[`6esn` In Count(*) Ends With $`` Ends With {7} Where 0Xa[..{1000}][..$#usn7]]]"),
    octest_legacy:ct_string("Return *,Any(_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``})[..[$#usn7[`5esn`],.e1[@usn5]['s_str'],Count(*) Starts With $usn1 Starts With {usn2}]][..{usn2:$7 In @usn5 In {@usn5},`7esn`:{#usn7} Contains @usn5 Contains Count ( * )}] Order By $`4esn` In Null Descending,#usn8 =~{999} Asc Skip Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $#usn7[$`4esn`])[(usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})][Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))] Load Csv From (:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) As `1esn` Fieldterminator 's_str' Start `2esn`=Node:`8esn`(`6esn`='s_str') ,`3esn`=Node:`4esn`({#usn8}) Union All With Distinct _usn3[\"d_str\"],None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) Is Null Is Null Order By 0Xa[1000.._usn4] Asc,$0[..{usn2}][..$usn1] Desc Skip {#usn8}[12.0][$@usn6]"),
    octest_legacy:ct_string("With  #usn8 Is Not Null As #usn8 Order By {`3esn`} Is Null Descending,[{0}[False..@usn5]] Starts With {`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]} Starts With Shortestpath((:_usn3{0})-[usn2 *12..]->(:``)) Ascending,{`2esn`}[Count(*)] Descending Where 0.12 Ends With {1000} Ends With `6esn` Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:usn1('s_str') Union Optional Match @usn6=(`2esn` :`3esn`:`6esn`),`8esn`=(@usn6 :`6esn`:`8esn`)<-[_usn4?:`7esn`{``:{_usn3} Contains $`1esn` Contains 12.0}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}) Using Join On _usn4,_usn4,@usn6 Where 0.12 Starts With 9e12 Starts With $`1esn` Remove (:`3esn`:`6esn`{usn1:{usn2} =~@usn6 =~{`4esn`},usn1:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})<-[_usn3?*]-(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}).`4esn`?,Reduce(usn2=.e1[..\"d_str\"],#usn7 In 123.654 Starts With $``|0Xa[$1000..$123456789]).`8esn`? Union All Remove [_usn3 In {@usn5}[..#usn7] Where True Is Null Is Null|Count(*) Ends With $`` Ends With {7}].`3esn`?,{@usn5:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12],@usn6:Count(*)[.e12..]}.`2esn`?"),
    octest_legacy:ct_string("Load Csv From 12.e12[2.12..][0xabc..] As `6esn`  Merge usn2=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))) On Match Set @usn5 =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Merge (({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}}))"),
    octest_legacy:ct_string("Unwind [{999} Starts With {12},9e1 Ends With Count(*) Ends With False,0X0123456789ABCDEF[`5esn`..][$#usn8..]] In Single(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null) As `1esn` Load Csv With Headers From 0e0 As `8esn` Fieldterminator 's_str' Union All Delete {123456789}[{_usn3}][False],0Xa[.._usn3][..$`6esn`],Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} Foreach(usn1 In All(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999) Is Not Null| Detach Delete ({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})[(`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(usn2 )],{123456789} =~usn1 =~{usn1}) Merge ((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})) On Create Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )] Union Unwind 7[123456789..$123456789][``..00] As `6esn` Unwind {999} Is Null As `6esn` With  {`3esn`}[{12}..][0.12..] As ``,$``[True..] Order By [`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`) Ascending,{0}[False..@usn5] Desc Limit 12 In 999 Where Count(*)[..``][..#usn8]"),
    octest_legacy:ct_string("Start @usn6=Rel:``(usn1={`4esn`}) ,``=Relationship( {usn1}) Union Create Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))) Merge `4esn`=({`1esn`:$123456789[..$7][..$`6esn`]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}) On Match Set {usn2:00[..$123456789][..$`5esn`],``:0.12[Count(*)..][$#usn7..]}.#usn7? =(`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Create Unique (:``) Union All Remove Allshortestpaths((_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})).`5esn`,`7esn`:@usn5 Match (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Using Join On `8esn`,_usn4 Using Index `7esn`:`1esn`(`2esn`)"),
    octest_legacy:ct_string("Create Unique #usn8=Shortestpath(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Union All Create ``=((`` {``:$0[..{usn2}][..$usn1]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})) Return *,.e1 Contains $`3esn` As _usn3 Skip Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})] Limit #usn7 Starts With 1000 Starts With .e1 Create Unique @usn6=(((`2esn` {_usn4:`4esn`[usn1]})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})))"),
    octest_legacy:ct_string("Load Csv From {#usn8}[usn2][{0}] As `2esn` Fieldterminator \"d_str\" Merge ((usn1 :usn1:_usn4)-[`6esn`?:@usn5|:`7esn`]->(`2esn` :@usn5{@usn5:{`2esn`} Is Not Null Is Not Null})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]})) On Match Set `5esn`+=Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8])[{`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]}..None(`` In {`1esn`} Starts With @usn6 Where $usn1[@usn6][#usn7])][Extract(_usn4 In `2esn` Where $999 Is Null|00[07..])..Shortestpath(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5))],`2esn`+=0xabc[$999..][{#usn7}..],`5esn`+=123.654 Contains $#usn8 Contains .e1 On Create Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] Union Merge ((`4esn` :usn2:`2esn`)) Start `1esn`=Rel:@usn5({usn1})  Merge (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From {`5esn`} =~Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) =~_usn4(Distinct #usn8 =~{999},``[00..$7]) As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start `3esn`=Rel:#usn8(\"d_str\")  Load Csv With Headers From $`4esn` Starts With 0e0 As `6esn` Fieldterminator 's_str' Optional Match #usn8=Allshortestpaths((`5esn` :_usn4)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})),Shortestpath((((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))) Where #usn8 =~{_usn3} =~``"),
    octest_legacy:ct_string("Create Unique `2esn`=((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})),@usn6=(((:_usn3{`8esn`:9e1 =~999})<-[@usn6?]->(`6esn` :_usn3)<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`))) Load Csv From {#usn7} Ends With 12e12 Ends With {123456789} As `7esn`  Start `8esn`=Node:#usn7(\"d_str\") ,#usn7=Node( {usn2})Where 0x0 Ends With {``}"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv From .e1 =~$`5esn` As _usn4 "),
    octest_legacy:ct_string("Foreach(`2esn` In @usn5 Is Null| Return 9e12 Is Not Null,(`8esn` :`8esn`:@usn5)<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]->(#usn7 :`2esn`)-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Null Is Null Order By Count ( * )[00] Ascending Skip True[..010] Limit 0e0 Starts With $@usn6 Starts With $`6esn`) Detach Delete All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2],[`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]] Create #usn8=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}),`1esn`=Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}))"),
    octest_legacy:ct_string("Create Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})) Create ((usn1 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})) Load Csv With Headers From Count(*)[.e12..] As _usn4 Fieldterminator \"d_str\" Union All Detach Delete $`3esn`[{``}..] Start `6esn`=Node:@usn6(`3esn`='s_str') Where True Is Not Null Union Unwind $#usn7 =~9e1 =~$_usn4 As _usn4"),
    octest_legacy:ct_string("Unwind 9e0 Contains @usn6 Contains {#usn7} As `` Create #usn8=(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Load Csv With Headers From {999} Starts With {_usn4} Starts With 00 As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Delete `2esn` Starts With `` Starts With 1e1,$@usn6[01..@usn5][0x0..`4esn`] Create Unique #usn7=Allshortestpaths(((`5esn` :`2esn`{#usn8:True[$`7esn`..{1000}]})<-[usn1?:`6esn` *12..{`6esn`:999 Starts With $123456789 Starts With {``}}]->({_usn4}))),((:#usn7{#usn7:$`8esn` In $`2esn` In {7}}))"),
    octest_legacy:ct_string("Remove [#usn7 In 123.654 Starts With $`` Where #usn8[`7esn`..]|{_usn3}[{0}]].usn2,``(True[True..],$_usn4).`5esn`? Create Unique (`4esn` :#usn7)<-[@usn6?:usn2|#usn7]->(`1esn` )-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}),_usn4=Allshortestpaths((_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As @usn6 Fieldterminator 's_str' Delete [#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1|{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]] =~Extract(`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]|$usn1 In 0.12 In $``) =~Single(_usn3 In {@usn5}[..#usn7] Where {`4esn`}[..07][..$`6esn`])"),
    octest_legacy:ct_string("Foreach(`` In (`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[`2esn`?*]->({#usn7:1e1[1.e1..][123.654..],`3esn`:True Starts With $`4esn` Starts With 12e12})[Shortestpath((((:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[`6esn`?:_usn4|:usn1 *07{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}]-(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})<-[`7esn`? *0X0123456789ABCDEF{@usn6:12 Starts With {_usn4} Starts With $#usn8}]-(`3esn` :`7esn`{`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}}))))..][(`1esn` :@usn6)<-[@usn5:_usn4|:usn1*]->(:@usn5)<-[`2esn`:#usn8|`2esn` *0xabc..7]-(usn1 :#usn8)..]| Remove {usn2:7 In 1.e1 In $usn1}.`4esn`!,All(_usn4 In 0.0[..{999}][..0.0] Where #usn8 Is Null).`8esn`? Create `5esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),#usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`))) Create `6esn`=((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->({``:.e1 Contains $`3esn`}))"),
    octest_legacy:ct_string("With  *,_usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..] As `3esn`,{`7esn`}[..9e12][..0.0] Limit Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null Where 123.654[1e1..][{#usn8}..] Start ``=Relationship( {``}) Where {`1esn`} =~{_usn4} Union Match (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Using Scan `2esn`:#usn7 Where {#usn8} =~{999} =~{#usn7}"),
    octest_legacy:ct_string("Optional Match (`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})-[``:usn2|#usn7 *..0Xa]->(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}),`3esn`=Allshortestpaths((:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )})) Using Index @usn6:#usn8(_usn4) Using Join On `6esn`,usn2,`5esn` Create Unique `5esn`=Shortestpath(((#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]}))),`8esn`=Allshortestpaths(((#usn8 {`8esn`:{7} Contains $123456789})))"),
    octest_legacy:ct_string("Start ``=Rel:`2esn`(`5esn`='s_str')  Create `2esn`=(:_usn3{#usn7:#usn8 =~{999}}),Shortestpath(((:#usn8{``:12.e12[$`4esn`..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))) Detach Delete Count ( * ) =~{`5esn`} =~{_usn4},{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}[Case When 1.e1[0X0123456789ABCDEF..] Then `6esn`[..{999}] When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} End..Filter(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)],None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) In usn1({`1esn`} Starts With @usn6) Union Start `2esn`=Node:`8esn`(`6esn`='s_str') ,`4esn`=Node:`1esn`(#usn7=\"d_str\") Create Unique ((@usn6 {@usn5:0X0123456789ABCDEF[$999..][@usn5..]})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})),#usn7=(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}) Union All Start _usn3=Node:``({`1esn`}) ,`3esn`=Rel:`8esn`(@usn6='s_str')"),
    octest_legacy:ct_string("Create Unique #usn7=(`4esn` :usn2:`2esn`) Remove [@usn5 In Null =~12e12 Where _usn4 In $usn1].`6esn`?,Reduce(`4esn`=`3esn`[..{_usn4}][..{@usn5}],`2esn` In {999} Is Not Null|123456789 Starts With {@usn6} Starts With $12).usn2,Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3).`3esn` Start `7esn`=Node:usn1(@usn5={12}) ,usn1=Node:_usn3(_usn3='s_str')Where _usn4 In $usn1 Union All With  123456789 Starts With {@usn6} Starts With $12,(_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Is Null As `1esn` Order By $`2esn`[{usn2}] Descending,1.e1 In 0Xa In $#usn8 Desc,{@usn6} Starts With @usn5 Starts With @usn6 Desc Skip [_usn4 In 0.0[..{999}][..0.0] Where ``[..0X0123456789ABCDEF]][Reduce(``=`6esn` Is Null Is Null,`2esn` In {999} Is Not Null|{12}[999][{_usn3}])..[_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]]] Limit `7esn` Contains `5esn` Contains 0X7 Where 0.12 Starts With 9e12 Starts With $`1esn` Remove {`8esn`:False Ends With $``}.`3esn`,Case {usn1}[$7..0x0] When {``}[010] Then True =~_usn3 =~123456789 When @usn6[$12] Then {`4esn`} Starts With $7 Starts With $`` End.`7esn`! Return Distinct *,[False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null] As `2esn`,Filter(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}) =~({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null}) Order By Reduce(@usn5=$`8esn`[..$999][..0],`` In {`1esn`} Starts With @usn6|{@usn6} Contains 123.654 Contains 01) Contains [`1esn` In `3esn`[07..] Where {0} =~12.0] Contains (:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null}) Descending,.e1[..\"d_str\"] Asc Skip $`6esn`[{`3esn`}..12]"),
    octest_legacy:ct_string("Create (@usn5 :`8esn`:@usn5)<-[?:`1esn`|:`3esn`*]->({_usn4:{usn1} =~123.654 =~\"d_str\"}) Union With Distinct `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Limit `` =~`6esn` =~usn1 Where @usn5[12.0][{1000}] Optional Match (:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}),@usn5=(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})<-[?:`6esn` *01..07]->(:usn2:`2esn`{`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12}) Using Index `8esn`:``(@usn5) Using Scan #usn7:_usn3 Unwind 1e1 Is Not Null Is Not Null As `6esn` Union Foreach(usn2 In {`7esn`}[..9e12][..0.0]| Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As `1esn`  Delete {@usn5}[..@usn6],0e0 Contains `3esn` Contains `7esn`,1.e1 Ends With 0 Ends With $usn1) Return *,@usn6[Count ( * )][True]"),
    octest_legacy:ct_string("Return Distinct `7esn` =~.e12 =~$#usn7 As `3esn`,$`8esn` Is Null Is Null As `6esn` Order By {`8esn`}[0X7][$`3esn`] Descending Skip Any(`2esn` In {999} Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e12 Is Not Null]..][$`6esn`..] Return *,{usn1} =~123.654 =~\"d_str\" Order By {`4esn`} In _usn4 Desc Limit {0}[..{`7esn`}] Union Load Csv With Headers From {7}[$_usn4..Count ( * )] As `7esn` Fieldterminator \"d_str\" Start `3esn`=Relationship:#usn8(_usn3={#usn7}) ,`3esn`=Node:``({`1esn`})"),
    octest_legacy:ct_string("Remove Shortestpath(((@usn6 :`4esn`:@usn6{#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}))).#usn7!,Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``! Merge `4esn`=({`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5) On Create Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )] On Create Set {#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]}.usn1 =(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where `7esn` Starts With 0X7 Starts With $`7esn`).`4esn` =$@usn6[..123.654],_usn4:`4esn`:@usn6 Union All With  *,{_usn3}[$usn2..] As `6esn` Limit Count ( * )[{12}..{@usn5}][{#usn8}..Null] Where 0X0123456789ABCDEF[9e12] With Distinct [`1esn` In `3esn`[07..] Where @usn6[{0}..]|0.e0[12.e12]] Contains {usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF} As @usn6,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Contains All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]) As #usn8 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Union All Create `5esn`=((#usn7 :_usn3{`2esn`})<-[@usn6?:`1esn`|:`3esn` *..0Xa{`1esn`:12 Starts With 0x0}]->(#usn7 :_usn3{`2esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0}))"),
    octest_legacy:ct_string("Merge `4esn`=(((#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})<-[`2esn`?:@usn6|`` *..00]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`8esn`?{`6esn`:$#usn7 =~{12} =~False}]->(`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]}))) Create Shortestpath((((usn2 )<-[ *0xabc..7]->(:`4esn`:@usn6)<-[usn2?:usn2|#usn7]->(`3esn` :_usn4)))) Detach Delete None(usn1 In 12.e12 In {0} In 9e1 Where Count(*) In 0e0 In 9e1)[Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End..][@usn5($`7esn` Is Null Is Null)..]"),
    octest_legacy:ct_string("Return *,Case $1000 =~{1000} =~`5esn` When 9e1[9e1...e0] Then 00 Starts With $`6esn` When 123.654[1e1..][{#usn8}..] Then $`3esn`[{``}..] End In [`6esn` In Count(*) Ends With $`` Ends With {7} Where 0Xa[..{1000}][..$#usn7]] As `5esn` Limit {#usn8}[2.12] Union With Distinct *,$`8esn` In $`2esn` In {7} As _usn3 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Skip [$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End] Where {`5esn`} Contains 's_str' Contains 9e1 Detach Delete #usn8 Is Null,1e1 Starts With 9e1 Starts With {`4esn`} Return Distinct *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc"),
    octest_legacy:ct_string("Merge ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]}) Unwind $``[.e12..] As `3esn`"),
    octest_legacy:ct_string("Detach Delete 0.12 Ends With {1000} Ends With `6esn`,$@usn5[usn2..][$0..] Load Csv With Headers From $0 Is Not Null As #usn8 Fieldterminator \"d_str\" Union All Foreach(@usn6 In .e1 =~$`5esn`| Unwind $`2esn`[{usn1}..] As `3esn`) Return Distinct 0X0123456789ABCDEF[$999..][@usn5..] Union Create _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Create Unique `8esn`=((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *..00{#usn7:`4esn`[usn1]}]-(:@usn5{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})),_usn4=(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]})))"),
    octest_legacy:ct_string("Load Csv From Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] As `2esn` Fieldterminator \"d_str\" Foreach(usn1 In #usn7[$`5esn`..]| Unwind {`7esn`} Ends With `` Ends With {`8esn`} As _usn3 Optional Match `8esn`=(@usn6 :`6esn`:`8esn`)<-[_usn4?:`7esn`{``:{_usn3} Contains $`1esn` Contains 12.0}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}),Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Using Join On `7esn` Using Scan _usn4:#usn8 Where $12 Contains 0Xa) Foreach(`4esn` In Count ( * )[$12..]| Create Shortestpath((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))) Union Detach Delete {_usn3}[$usn2..] Union All Merge (#usn7 :_usn3{`2esn`})-[`8esn`?:`2esn`{`2esn`:{#usn8} =~{999} =~{#usn7}}]->(@usn6 :`7esn`) Optional Match `8esn`=Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(`1esn` :@usn6))),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Using Index usn1:`3esn`(`3esn`) Using Scan usn1:`3esn` Where $`6esn`[`8esn`][0.0]"),
    octest_legacy:ct_string("Delete $`1esn` Starts With 9e1 Starts With 1.e1,$@usn6[$0..usn1][0X0123456789ABCDEF..$999],[`6esn` In Count(*) Ends With $`` Ends With {7} Where {`3esn`} Ends With `1esn` Ends With $@usn6][None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where {`4esn`}[..{`4esn`}])..] With Distinct *,{`8esn`}[..$`6esn`][..123.654],None(@usn5 In Null =~12e12 Where #usn8[`7esn`..])[{123456789}..][All(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0})..] Order By $0 Ends With False Ends With $_usn4 Descending,[0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Desc Limit `1esn`[`3esn`..True] Where {12} Contains `7esn` Contains $_usn3 Union All Optional Match `4esn`=Allshortestpaths((((@usn6 {_usn3:{`8esn`}[0X7][$`3esn`],_usn4:$_usn4[9e0..]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-({`6esn`:1000,#usn8:$`5esn`[$#usn7..][0xabc..]})-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})))),Allshortestpaths(((`4esn` :`1esn`)-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}))) Using Scan _usn3:`` Using Index `8esn`:``(@usn5) Optional Match `8esn`=(({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})),((@usn5 )<-[#usn8? *..01234567]-($_usn3)) Using Join On ``,`7esn`,#usn7 Where True[$`7esn`..{1000}] Union Create #usn7=Allshortestpaths(((:`5esn`:@usn5))),@usn5=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Create _usn4=Shortestpath((`6esn` :`2esn`{`7esn`:#usn8 =~{999}})),`7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2}))"),
    octest_legacy:ct_string("Create (`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})-[``:usn2|#usn7 *..0Xa]->(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}),`3esn`=Allshortestpaths((:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )})) Start `2esn`=Rel:#usn7(`6esn`=\"d_str\") ,`3esn`=Node:``(_usn3={0})Where #usn8 =~{999} Start @usn5=Relationship(999) ,``=Relationship( {``}) Union Unwind {@usn6} In {#usn7} In 12.e12 As `8esn` Union All Optional Match Allshortestpaths((`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})),Shortestpath((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})) Using Join On _usn4,@usn6 Remove All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000]).@usn6?,{usn2:$`5esn`[`4esn`][_usn3]}.@usn6?"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv With Headers From None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(@usn6 In {999} Ends With 123456789 Ends With {@usn5}| Return Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) As _usn4,7[..$`1esn`][..00],{12} Starts With #usn8 Starts With 0e0 Order By $0 Starts With `2esn` Desc,0.12 In 0X7 Descending,12.e12 In $0 In $0 Desc Limit `6esn` In Null) Remove All(`1esn` In $12 Is Not Null Where {usn1} In Count ( * )).usn1,Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where _usn3[\"d_str\"]|$_usn4 Is Not Null Is Not Null).`1esn`? Foreach(`6esn` In _usn3 =~123.654| Create Unique ((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})),``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) Remove (usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[`7esn`? *0X0123456789ABCDEF{@usn6:12 Starts With {_usn4} Starts With $#usn8}]-(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`5esn`) Union Optional Match ((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})<-[?:#usn7|`2esn` *0x0..]->({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})),`5esn`=Allshortestpaths(((`` {``:$0[..{usn2}][..$usn1]}))) Where {@usn5}[12.0..1000][{`3esn`}..{7}] Foreach(`` In Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null| Load Csv From 0.0 Is Not Null As `5esn`  Remove {_usn4:{1000} Ends With {`8esn`}}.usn1) With  *,9e12[{123456789}..][$`2esn`..] As `2esn` Skip 9e12 Is Null Is Null Where 00 Union All Start `7esn`=Rel:`4esn`(#usn7={@usn5}) ,_usn3=Relationship:usn1('s_str')"),
    octest_legacy:ct_string("With  usn2[`7esn`..{`3esn`}][$7..{#usn7}],Case When $`6esn` Starts With 12.e12 Starts With $#usn7 Then #usn8[`7esn`..] When {`4esn`}[$123456789..] Then {_usn3} Contains 9e0 Contains $999 End As @usn6 Order By 1.e1 Ends With 0 Ends With $usn1 Descending,[_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]] Ends With {``:{usn1} Ends With {`6esn`} Ends With 123456789,`5esn`:{999} Is Null} Ascending Limit $`1esn`[`4esn`..][{``}..] Where {12}[00..{@usn6}][1.e1..0] Union All Foreach(`7esn` In True Is Not Null Is Not Null| Detach Delete `2esn`[Null]) Remove #usn7._usn4!,_usn3($``['s_str'..][0x0..]).`6esn`"),
    octest_legacy:ct_string("Create Unique `5esn`=((`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Remove {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]}.@usn6 Remove Extract(#usn7 In 0Xa[@usn5][{`7esn`}] Where 's_str'[_usn4..0x0]).`5esn`?,Reduce(`4esn`=`3esn`[..{_usn4}][..{@usn5}],`2esn` In {999} Is Not Null|123456789 Starts With {@usn6} Starts With $12).usn1? Union Foreach(#usn8 In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null)[[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]..]| Remove Filter(`1esn` In 0.e0 =~`1esn` =~`6esn` Where True[True..]).@usn6,Shortestpath(((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` ))).`2esn`,[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789].#usn8 Create Unique `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))),usn2=Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`)))) Union All Remove (`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})._usn3?"),
    octest_legacy:ct_string("Create Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})),#usn7=Allshortestpaths((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Union All Delete Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],Reduce(usn1=$usn1[..'s_str'][..$#usn8],`8esn` In $12[{7}..0X0123456789ABCDEF]|.e1[0.12])[[@usn5 In Null =~12e12 Where {_usn4} In {1000}|12.e12[``..usn2][{#usn7}..@usn5]]..All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1})],Count ( * )[\"d_str\"][_usn3] Start @usn5=Node:``(#usn7=\"d_str\") Where $`6esn` Starts With 12.e12 Starts With $#usn7 Create Unique usn2=((`4esn` :`4esn`:@usn6)<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})),((usn1 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}))"),
    octest_legacy:ct_string("With Distinct $usn2[..9e0],{12}[010..{1000}][1e1...e1] Where 12e12 Is Not Null Is Not Null Merge @usn6=Shortestpath((:``{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})-[?:`4esn`|:#usn7]->(`1esn` :@usn6)<-[`1esn`?]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})) On Match Set `5esn` =Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 's_str'[.._usn4][..``]),{usn2:{`6esn`} Ends With 0e0 Ends With {``}}.``? =`7esn`[{7}..@usn5],`3esn`+={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null Create (`3esn` :`1esn`)-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}),`1esn`=Allshortestpaths((usn2 :`5esn`:@usn5)) Union Create Allshortestpaths((`4esn` :usn2:`2esn`)<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})-[{#usn7:'s_str'[_usn4..0x0]}]-(`8esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']})) Optional Match Allshortestpaths(((`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))) Using Scan `4esn`:`` Using Join On `8esn`,#usn8 Unwind 1.e1 Ends With 0 Ends With $usn1 As `7esn` Union All Remove Reduce(usn2={`4esn`} In _usn4,usn1 In 12.e12 In {0} In 9e1|7 In 1.e1 In $usn1).@usn6? Remove {_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}.#usn7!,Extract(_usn3 In {@usn5}[..#usn7]).`4esn`?"),
    octest_legacy:ct_string("Merge Allshortestpaths(({`4esn`:#usn8 Is Null})-[:usn1{_usn4:0[{usn2}..][usn1..],`3esn`:12 Starts With 7 Starts With $`5esn`}]-(`7esn` :`3esn`:`6esn`)<-[`6esn`?:#usn8|`2esn`*..{`5esn`:@usn5 =~'s_str'}]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})) On Match Set `4esn` =Filter(_usn4 In 0.0[..{999}][..0.0] Where #usn7 =~{`4esn`} =~123456789) Is Not Null Is Not Null,_usn3 =`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) In Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`}))) In All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]) On Create Set #usn8 =$`1esn` =~$`1esn` =~{`6esn`},`2esn` =@usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2),`6esn` =`6esn` In Null"),
    octest_legacy:ct_string("Merge Allshortestpaths((((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)))) On Match Set usn1 =1.0 Is Null Is Null On Match Set `6esn`+={`8esn`}[Null..][{`8esn`}..],_usn4+={#usn8} =~{999} =~{#usn7} Match `6esn`=Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(:`2esn`{`6esn`:@usn6[{0}..]}))),`8esn`=({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(usn1 :`8esn`:@usn5{`1esn`:{#usn7} Contains 0.0 Contains $0,`2esn`:.e12[010..$123456789]})<-[_usn3?:@usn6|`` *0x0..{`3esn`}]-(@usn6 {`1esn`:01234567 In $123456789,`1esn`:{`6esn`}[..{`2esn`}]}) Using Index usn2:``(#usn8) Using Scan @usn6:`5esn`"),
    octest_legacy:ct_string("Remove (`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]})<-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(`` :`7esn`).usn2?,[0X0123456789ABCDEF[$`5esn`..],.e1 Contains $`3esn`,_usn4 In $usn1].`8esn`? Union All Load Csv From usn2 =~0X7 =~{#usn7} As ``  Foreach(usn1 In {usn2}[$`4esn`]| Start `3esn`=Relationship:#usn8(_usn3={#usn7}) Where {999} Is Null Create (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` ))) Union All Unwind $`3esn`[..$`2esn`][..123.654] As `1esn` Foreach(#usn8 In 12 In 0e0| Unwind {`4esn`}[{`1esn`}][{1000}] As #usn7 Delete $`7esn` In 12) Unwind False Starts With 010 As @usn5"),
    octest_legacy:ct_string("With  $`7esn` Contains {`1esn`} Contains 9e12 As usn1,Reduce(usn2=00[Count(*)...e0][$#usn7..0X0123456789ABCDEF],usn1 In 12.e12 In {0} In 9e1|{`7esn`}[0X7..][0x0..]) Starts With [_usn4 In `2esn`] Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Where {@usn5}[..{12}][..0x0]"),
    octest_legacy:ct_string("Create Unique ((usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) Create `5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Union All Unwind 010 Ends With 01 Ends With {_usn3} As #usn7 Detach Delete $@usn5 Is Not Null Is Not Null,{`8esn`}[..$`6esn`][..123.654],Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Foreach(usn1 In {`4esn`}[{`4esn`}..999]| Create (`4esn` :`4esn`:@usn6) With Distinct 0Xa Contains #usn8 Contains 1000 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Skip ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]])"),
    octest_legacy:ct_string("Optional Match `2esn`=Shortestpath((((`1esn` {usn2:12 Is Not Null,`4esn`:`1esn`[..01]})-[_usn3?:@usn6|``]-(usn1 :@usn5)-[``?:usn2|#usn7 *0x0..]-(@usn5 :usn1:_usn4)))),``=({#usn7:#usn8 =~{999}})-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Using Index @usn6:`4esn`(`6esn`) Using Scan _usn4:#usn8 Where 1.e1[_usn4..][07..] Foreach(@usn6 In $`` Contains 1.e1| Create Unique #usn8=Allshortestpaths((`5esn` :_usn4)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})),Shortestpath((((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}))))) Union Return {@usn6}[True..{_usn3}] As `3esn`,Shortestpath((((`1esn` {#usn7:Count ( * )[$12..]})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}))))[..Case {`1esn`} In 12.e12 In 9e1 When 12 Starts With {_usn4} Starts With $#usn8 Then Count(*) Is Not Null Else 12.e12 In $0 In $0 End][..#usn8],1.e1 =~$`1esn` As `8esn` Order By `1esn`[$123456789..] Desc,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,.e1 Ends With 0Xa Ends With 00 Ascending Skip 0xabc =~12 =~0x0 Limit 0e0[0X0123456789ABCDEF..010][$@usn6..010] Union Load Csv From $`6esn`[{`3esn`}..12] As @usn5 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind `6esn`[{`6esn`}..] As usn2 Merge `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})) On Create Set usn1 =#usn8 In `8esn` In 07 On Match Set [\"d_str\"[{`8esn`}..]].#usn8? =$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]"),
    octest_legacy:ct_string("With Distinct Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(:#usn8)<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})))..],_usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..] As #usn8 Order By $123456789 Is Not Null Asc Limit 0Xa Is Not Null Is Not Null Where {`3esn`}[{`5esn`}] Remove Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`]).`2esn`? Unwind 9e12 Is Not Null Is Not Null As @usn5"),
    octest_legacy:ct_string("Optional Match (:_usn3{`3esn`:{0} Is Null,#usn7:{0} Is Null})-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Create Shortestpath(((`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0}))),`8esn`=((#usn8 {`8esn`:{7} Contains $123456789})) Return Distinct *,@usn5 Is Not Null Is Not Null As `` Skip Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) Union All Delete 0x0 =~123.654 =~{999} Remove Reduce(usn1=1.e1[0xabc..],#usn7 In 0Xa[@usn5][{`7esn`}]|12 Starts With $#usn7).``? Create Unique (({`7esn`:123456789[0..]})) Union Start `3esn`=Rel:`5esn`({0}) ,`6esn`=Relationship:`1esn`({@usn5})Where $7[{`1esn`}] Create usn2=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))),`6esn`=((@usn6 :`2esn`)) Merge ((:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`1esn`)) On Match Set `2esn`+=Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})],`3esn` =$12 Starts With $`8esn`,@usn5 =Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) On Match Set `6esn` =[`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`),usn1:`8esn`:@usn5"),
    octest_legacy:ct_string("Start `4esn`=Node:``(\"d_str\") Where 9e12 Is Not Null Is Not Null Union All Start _usn4=Node:`4esn`(`2esn`={``}) Where False Starts With 010 Create Unique `6esn`=((({`1esn`:$123456789[..$7][..$`6esn`]})<-[:`2esn` *1000{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]-(#usn8 :`8esn`:@usn5)-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}))),(((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``}))) Union Foreach(usn2 In 2.12[..$_usn4]| Remove Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn1 Starts With {_usn3}|{123456789}[12..][$12..]).usn1?,[$``[..1.e1][..12],7 Contains $`` Contains {`6esn`}].`7esn`! Match #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))),Allshortestpaths((((:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})))) Using Scan `4esn`:_usn4)"),
    octest_legacy:ct_string("Optional Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})) Using Scan _usn4:_usn3 Using Index usn1:@usn5(`7esn`)"),
    octest_legacy:ct_string("Match `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))),@usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Using Join On `6esn`,#usn7 Using Join On #usn7,@usn5 Union With Distinct $`` =~{``} =~0.e0,{`3esn`}[{`5esn`}] As `6esn` Order By 12.e12[$`4esn`..] Descending,{`2esn`}[@usn5..][{``}..] Descending Skip 0.0[..{999}][..0.0] Where _usn4 In $usn1 Union Delete $0 Starts With `2esn` Create Unique `8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))"),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv With Headers From [.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]] Is Not Null As usn1 Fieldterminator 's_str' Create Unique (`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})"),
    octest_legacy:ct_string("Match @usn6=Allshortestpaths(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))"),
    octest_legacy:ct_string("With Distinct *,1000 As `5esn` Limit {`1esn`} In 12.e12 In 9e1 Where `8esn` Contains $`3esn` Contains {`4esn`} Union All Unwind `4esn`[usn1] As _usn4 Union All Unwind $`7esn` Is Null Is Null As `8esn` Remove Case @usn5[..$@usn5][..0Xa] When $@usn6 Starts With {`1esn`} Starts With 12 Then $1000[..12.0][..0e0] Else 's_str'[..0X7] End.`8esn` Create Unique Shortestpath((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]}))"),
    octest_legacy:ct_string("With  *,7[1000.._usn3][9e0..\"d_str\"],(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})-[`4esn`?:_usn4|:usn1 *999{_usn4:{7} Starts With $usn1 Starts With 1.0,#usn7:$1000[..12.0][..0e0]}]-(#usn7 :`2esn`)-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}) In {`3esn`:1e1 Contains usn2} Order By Count ( * )[00] Asc,$#usn7 Contains True Contains _usn4 Descending Skip 9e0[#usn8] Limit 123456789 Is Null Is Null Where #usn7 =~{`4esn`} =~123456789 Start _usn4=Node:`4esn`(_usn4={``}) Where {`2esn`} In 0Xa In {_usn3} Union All Remove Case @usn5[..$@usn5][..0Xa] When $@usn6 Starts With {`1esn`} Starts With 12 Then $1000[..12.0][..0e0] Else 's_str'[..0X7] End.`8esn` Foreach(`4esn` In Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]})| Create @usn5=(`4esn` :#usn7)<-[@usn6?:usn2|#usn7]->(`1esn` )-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}),(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]->({_usn4})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`) Remove [`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000|0xabc[$@usn5]].usn1,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000|\"d_str\"[{`8esn`}..])._usn3) Union Unwind 12 Starts With {_usn4} Starts With $#usn8 As usn1 With  [`1esn` In `3esn`[07..] Where @usn6[{0}..]|0.e0[12.e12]] Contains {usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF} As @usn6,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Contains All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]) As #usn8 Merge Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})) On Create Set ['s_str'[..0X7],False Contains 0.e0 Contains Count(*)].``? =$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]"),
    octest_legacy:ct_string("Unwind $0[..{usn2}][..$usn1] As `` Detach Delete `` Is Null Is Null,`2esn`[$usn1..{123456789}],$#usn7[.e1..{`7esn`}][{`6esn`}..$_usn4] Union Foreach(`7esn` In @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2)| Detach Delete .e1 Ends With _usn3,Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..]) Detach Delete [`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)][Extract(`` In {`1esn`} Starts With @usn6 Where $`7esn`[$``..][999..]|.e1 Contains $`3esn`)..Case When 's_str'[.._usn4][..``] Then 123.654 Starts With $`` Else 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] End] Union Load Csv From 9e0 Starts With .e0 Starts With \"d_str\" As `5esn` "),
    octest_legacy:ct_string("Return {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn`"),
    octest_legacy:ct_string("Match (:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}),_usn4=Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Using Scan usn1:usn2 Using Index _usn3:``(#usn7) Where 12.e12[``..usn2][{#usn7}..@usn5] Remove All(`6esn` In 00 Where `5esn`[..9e0][..01234567]).`4esn`,(_usn4 :#usn8{`5esn`})-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`).usn2?,None(_usn4 In 0.0[..{999}][..0.0] Where {`7esn`} Is Not Null Is Not Null).`3esn`? Create `2esn`=((`4esn` :`2esn`)),Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})))"),
    octest_legacy:ct_string("Remove Allshortestpaths((((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})-[_usn4 *0x0..]-(:``$_usn4)))).`5esn`? Remove usn2:@usn5,Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End.#usn8!,`8esn`:_usn3"),
    octest_legacy:ct_string("Start @usn6=Node:`4esn`(``='s_str') ,`2esn`=Rel:#usn7(`6esn`=\"d_str\")Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` Merge Allshortestpaths((@usn6 :usn1:_usn4)) On Match Set usn1 =Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Create Allshortestpaths((((@usn5 :@usn5)-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4)<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})))),`2esn`=Allshortestpaths((((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})))) Union All Create `6esn`=(_usn3 {@usn5:.e12 =~.e0})-[?:`7esn`]-(usn2 :`4esn`:@usn6)-[?:@usn6|`` *1000]-(`5esn` :`7esn`),@usn5=((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})))"),
    octest_legacy:ct_string("Match `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))),@usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Using Index ``:`6esn`(usn1) Where 1.e1[12e12..{`6esn`}] Union Remove {@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]}.`6esn`? Detach Delete 0.12 Contains 12.0,{999}[$123456789..][12..] Load Csv From [1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind Reduce(``=12 Starts With $#usn7,`6esn` In 00|False Contains $#usn8 Contains 9e1)[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789|12e12 Is Not Null Is Not Null]][All(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4)] As @usn5 Merge usn1=Allshortestpaths(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]}))) Remove [_usn3 Contains .e0 Contains {usn2},12.e12[2.12..][0xabc..]].`7esn`!,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF]).usn2! Union All Load Csv From {@usn5}[..{_usn4}][..$@usn5] As `3esn` Fieldterminator 's_str' Match `5esn`=(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4)-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-({``:.e1 Contains $`3esn`}),Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) Using Index usn2:usn1(`8esn`) Using Scan `2esn`:@usn6 Where .e1 Ends With {7} Ends With $usn1"),
    octest_legacy:ct_string("Start `3esn`=Rel:_usn3(_usn3='s_str') ,usn1=Node:#usn8(#usn8={``}) Remove Allshortestpaths(((:#usn7{#usn7:$`8esn` In $`2esn` In {7}}))).`1esn` Create Unique _usn4=((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`))),(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[`3esn`:`8esn`|:_usn4 *..01234567]->(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}) Union With Distinct $123456789 Starts With $123456789 Starts With Count ( * ),$`4esn` In Null,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)] Limit Case When {`4esn`}[..{`4esn`}] Then {`7esn`}[0X7..][0x0..] When {@usn6} Contains 123.654 Contains 01 Then #usn8 Is Not Null End Contains {#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]} Contains All(`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]) Remove {`5esn`:@usn5[$12..\"d_str\"],usn2:1.e1[0X0123456789ABCDEF..]}.`6esn`! Load Csv With Headers From Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] As `5esn`  Union Foreach(usn1 In 999| With  {@usn5},{0} Is Null As `6esn` Skip Null In .e0)"),
    octest_legacy:ct_string("Match `7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2})) Using Join On `3esn`,`8esn`,`5esn` Unwind $1000[..$999] As `2esn` Match @usn5=($`5esn`)-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Using Scan usn2:@usn5 Where True Is Null Is Null Union Unwind #usn7 Starts With $999 As #usn7 Optional Match Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Using Join On usn1,_usn4,`6esn` Using Index usn1:_usn3(``) Where {_usn3}[`3esn`..$#usn8]"),
    octest_legacy:ct_string("Unwind 12e12 Starts With `1esn` Starts With usn2 As `4esn` Remove Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End.``,All(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}).`7esn`!,Case 1e1[{_usn4}..123.654] When $123456789 =~`4esn` Then $`` Starts With 12 Starts With $usn2 When {`5esn`}[$`8esn`..$`1esn`][0.12..0.12] Then 0.e0[12.e12] Else 1.e1 =~`2esn` End.#usn8!"),
    octest_legacy:ct_string("Detach Delete Filter(#usn7 In 0Xa[@usn5][{`7esn`}] Where {1000}[\"d_str\"..{@usn5}][$1000..$#usn8]) Starts With All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Starts With [#usn7 Contains {`3esn`} Contains $`6esn`],{12}[$`3esn`]"),
    octest_legacy:ct_string("Unwind (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) As #usn8 Create Unique _usn3=((`5esn` :`3esn`:`6esn`)) Union All Create Unique Allshortestpaths((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[_usn3{@usn6:{7} Contains $123456789}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]}))),Allshortestpaths((({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2}))) Remove All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000]).@usn6?,{usn2:$`5esn`[`4esn`][_usn3]}.@usn6?"),
    octest_legacy:ct_string("Start `7esn`=Relationship:`2esn`(@usn5={#usn7})  Remove [@usn5 In Null =~12e12 Where _usn4 In $usn1].`6esn`?,Reduce(`4esn`=`3esn`[..{_usn4}][..{@usn5}],`2esn` In {999} Is Not Null|123456789 Starts With {@usn6} Starts With $12).usn2,Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3).`3esn` Create `3esn`=Shortestpath((({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))),((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})<-[?:`6esn` *07]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})<-[{#usn7:'s_str'[_usn4..0x0]}]-({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]})) Union Load Csv With Headers From {#usn8} =~{7} As `3esn` Fieldterminator \"d_str\" Remove usn2($@usn6[$0..usn1][0X0123456789ABCDEF..$999]).`1esn`?,Allshortestpaths(((_usn4 :`6esn`:`8esn`$``))).usn1! Union All Remove Allshortestpaths((((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})-[_usn4 *0x0..]-(:``$_usn4)))).`5esn`? Remove usn2:@usn5,Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End.#usn8!,`8esn`:_usn3"),
    octest_legacy:ct_string("Start @usn6=Rel:usn1(@usn6=\"d_str\") Where 0.e0 =~`1esn` =~`6esn` With  {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Order By 0.12[999][$#usn8] Descending,`7esn`[..$`5esn`][..{`5esn`}] Desc Limit {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] Where 1.0 Is Null Is Null With  {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Order By 0.12[999][$#usn8] Descending,`7esn`[..$`5esn`][..{`5esn`}] Desc Limit {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]] Where 1.0 Is Null Is Null Union All Unwind {12}[999][{_usn3}] As `3esn` Foreach(`1esn` In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| With Distinct *,0X0123456789ABCDEF Contains {usn1} As @usn5 Order By (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] Descending,`2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] Asc Skip #usn7[00] Limit Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]])"),
    octest_legacy:ct_string("Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=({`7esn`:123.654 Ends With usn2 Ends With 0})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->(:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000}) Using Index #usn7:`8esn`(@usn6) Where 0Xa Contains $`` Union All Load Csv With Headers From $0 Is Not Null As #usn8 Fieldterminator \"d_str\" Match @usn6=Shortestpath((:``{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})-[?:`4esn`|:#usn7]->(`1esn` :@usn6)<-[`1esn`?]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})),(((`4esn` :usn2:`2esn`)-[`8esn`?:`4esn`|:#usn7]->({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]}))) Using Index usn2:`8esn`(`5esn`) Where _usn4[Count(*)]"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From {#usn8}[$#usn7..] As `8esn` Fieldterminator \"d_str\" Create usn2=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})),(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}) Start `5esn`=Relationship:`4esn`(#usn8=\"d_str\") "),
    octest_legacy:ct_string("Load Csv From {`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]} Starts With Allshortestpaths((`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`)) Starts With All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789) As `3esn` Fieldterminator 's_str' Create Unique `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})),Shortestpath((usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) Union Delete {#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null),$`5esn`[`1esn`..$123456789]"),
    octest_legacy:ct_string("Start @usn6=Node:`1esn`(#usn7=\"d_str\") Where 0X0123456789ABCDEF[$`5esn`..] Union All Foreach(`8esn` In Shortestpath(((:@usn6{usn2:{#usn8}[12.0][$@usn6]})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(:`3esn`:`6esn`{999})))[..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where Count(*) Ends With 123.654 Ends With $12|0Xa[$1000..$123456789])][..{@usn6:12 Starts With {_usn4} Starts With $#usn8}]| Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `3esn`:#usn7(usn2)) Union All Remove Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12).`1esn`!,Case `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] When 1.e1[..12.e12][..$usn2] Then $_usn3[{999}] When $7 Is Null Then `1esn` =~1000 =~1000 Else 9e12[$`5esn`] End._usn3,#usn7:_usn3"),
    octest_legacy:ct_string("Unwind Single(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..])[Extract(`1esn` In `3esn`[07..] Where {0} =~12.0|`8esn` Contains 1e1)][None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6])] As `2esn` Return Distinct *,(usn1 :@usn5)<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)[Extract(`1esn` In $12 Is Not Null Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|12.0 =~$#usn7 =~9e12)],[00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])] As #usn7 Order By {#usn8}[Null] Descending,Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Ascending,Case When #usn8 In `8esn` In 07 Then 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF] Else 12.e12[{7}..7] End In Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]})) In Reduce(`3esn`=00 Ends With `8esn`,usn1 In 12.e12 In {0} In 9e1|True Starts With $`4esn` Starts With 12e12) Ascending Skip $@usn5[`1esn`..] Limit @usn5[..$@usn5][..0Xa] Match `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))),@usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Using Join On `6esn`,#usn7 Using Join On #usn7,@usn5 Union Unwind {12}[usn2] As `2esn` Foreach(@usn6 In 1.e1[0xabc..]| Delete .e1[@usn5]['s_str'],Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Unwind {12}[$`3esn`] As `6esn`) Foreach(_usn4 In Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`4esn`} Starts With $7 Starts With $``|0Xa Contains {`7esn`} Contains $999) Contains {`4esn`:0X0123456789ABCDEF[$999..][@usn5..],@usn5:{_usn3}[{0}]}| Create usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})),#usn8=Allshortestpaths((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`})) With Distinct *,$1000[..{`7esn`}][..#usn7] Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Asc,`3esn`[$@usn5..@usn5][9e1..$``] Desc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `2esn`[$1000..9e12][{#usn8}..{7}] Limit [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]][Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..])..][None(`6esn` In 00 Where {@usn5} Starts With 1.0 Starts With 00)..])"),
    octest_legacy:ct_string("Return \"d_str\" Ends With 1.0 Ends With 0e0 As `3esn` Merge _usn3=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}) Merge ((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5)<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})) On Create Set #usn8+=``(#usn8 =~{999})[Single(_usn3 In {@usn5}[..#usn7])..][Case $123456789 Is Not Null When .e1[0.12] Then {@usn5}[..{12}][..0x0] When @usn5 Is Not Null Is Not Null Then \"d_str\" Ends With False Ends With {@usn6} End..] On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`"),
    octest_legacy:ct_string("Unwind $`5esn`[$#usn7..][0xabc..] As usn2 Merge `4esn`=({`1esn`:$123456789[..$7][..$`6esn`]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}) On Match Set {usn2:00[..$123456789][..$`5esn`],``:0.12[Count(*)..][$#usn7..]}.#usn7? =(`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Detach Delete {12}[00..{@usn6}][1.e1..0],`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null]"),
    octest_legacy:ct_string("Load Csv With Headers From $`8esn` Starts With 0xabc Starts With {usn2} As `1esn`  Foreach(`5esn` In 9e1['s_str'..0xabc]| Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`} Create `5esn`=Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))),`8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))) Load Csv With Headers From {_usn4} Is Null As `` "),
    octest_legacy:ct_string("Foreach(`5esn` In $_usn4 Is Null Is Null| Create _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})),`5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))) Remove (`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]}).`1esn`?,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000].usn1?,{`4esn`:0.12 In 0X7}._usn4!) Remove Shortestpath(((@usn6 :`4esn`:@usn6{#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}))).#usn7!,Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``! Union Remove None(#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}).`6esn`,{`1esn`}.`6esn`? Merge `1esn`=({`4esn`:#usn8 Is Null}) On Match Set @usn5+=usn2 =~0X7 =~{#usn7},usn1 =[False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null],usn2 =$`4esn` Starts With 9e12 On Match Set [$1000 Is Not Null Is Not Null].``? =7 In 1.e1 In $usn1,`4esn`(Distinct 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF],`3esn`[..{_usn4}][..{@usn5}]).`8esn` =$`6esn`[`8esn`][$`5esn`],Any(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).usn2! =Null[010..][{``}..] Remove `7esn`(Distinct {999} Starts With {12},999 Ends With .e12 Ends With .e1).@usn5"),
    octest_legacy:ct_string("Create `6esn`=(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})-[:_usn4|:usn1{``:0 Contains $usn2 Contains 12e12}]-(`4esn` :`2esn`)<-[`7esn`?:_usn3|`8esn`*..]->(`2esn` :_usn3))),@usn5=(({`5esn`:0Xa[0e0..{#usn7}]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:#usn7)-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})) Unwind (`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3})[Reduce(usn1=0x0[$`8esn`.._usn3],_usn4 In `2esn`|{123456789} Is Not Null)..Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789])][[_usn4 In `2esn` Where 9e12 Ends With 123456789|07 =~$`8esn` =~9e1]..(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->()] As `7esn`"),
    octest_legacy:ct_string("Return Distinct *,`1esn`[Null..] As `2esn` Order By $7 Is Not Null Descending,Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..] Descending Limit Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Start #usn8=Node:``(#usn7=\"d_str\") "),
    octest_legacy:ct_string("Return Distinct {`2esn`} In $123456789 In True As `7esn`,$7 Ends With $`8esn` As `4esn`,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Union Remove [#usn7 In 0Xa[@usn5][{`7esn`}] Where $0 In _usn4].#usn7,Any(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]).#usn7,Case When {`3esn`}[{`5esn`}] Then \"d_str\" Contains @usn6 Contains 12.e12 When $`5esn`[..{`2esn`}][..{0}] Then {_usn3}[$usn2..] End.@usn6!"),
    octest_legacy:ct_string("Remove All(_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``).`3esn`?,`7esn`(Count(*)[.e12]).@usn5!,`8esn`:@usn5"),
    octest_legacy:ct_string("Return *,1000 As ``,{usn2:$#usn7 Starts With 9e0 Starts With 2.12}[Single(#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1)..][[.e0[True..Count ( * )][#usn7..0X7],$`` Is Null]..] Order By 07 =~$`8esn` =~9e1 Asc,$`7esn` Is Null Is Null Asc,$`5esn`[`1esn`][0X0123456789ABCDEF] Ascending Limit {usn2} Load Csv With Headers From None(_usn3 In {@usn5}[..#usn7] Where `2esn` Starts With `` Starts With 1e1) Contains Reduce(`1esn`={999} Ends With 123456789 Ends With {@usn5},_usn4 In 0.0[..{999}][..0.0]|$1000 =~{1000} =~`5esn`) Contains `6esn`(Distinct {1000}[{#usn8}],$#usn7[123.654]) As @usn5 Fieldterminator 's_str' Return Distinct $@usn5[{_usn3}][$#usn7],123.654[{`7esn`}][{7}] As @usn5,9e0 =~0.0 =~$`5esn` Skip None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Limit @usn6(`` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[:#usn8|`2esn` *0x0..{`3esn`:.e12[$7..][{`6esn`}..]}]->({usn1:1000 Is Null Is Null})] Union All Unwind $7[$`6esn`] As `8esn` Load Csv From {#usn8} Ends With 1.0 Ends With 12.0 As `2esn` Fieldterminator 's_str' Union Remove Shortestpath((({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))).#usn8!,({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`5esn`?,[{`6esn`}[..{`2esn`}],$`8esn`[..$999][..0],`3esn` Is Not Null Is Not Null].`1esn`? Merge `8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})) On Match Set `8esn`+=$`4esn` In Null Start `3esn`=Relationship:#usn8(_usn3={#usn7}) ,`8esn`=Rel( {`3esn`})Where $`2esn` Is Null Is Null"),
    octest_legacy:ct_string("Remove [$0[`7esn`],0.12 Contains 12.0,True Is Null Is Null].``?,[`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]].`2esn`! Load Csv With Headers From Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Ends With @usn5(Distinct {0} Is Null) Ends With {`6esn`:`3esn`[..{_usn4}][..{@usn5}],`2esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]} As _usn4 Fieldterminator \"d_str\" Unwind $0 Is Not Null As usn2"),
    octest_legacy:ct_string("Optional Match `5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))),Allshortestpaths((:@usn5{@usn6:{7} Contains $123456789})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})) Union With  *,$`7esn`[$0..][{`4esn`}..] Where {`3esn`} Is Null Start @usn5=Node:@usn5(\"d_str\") ,_usn3=Relationship:usn1('s_str') Load Csv With Headers From {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])] As _usn4 Fieldterminator 's_str' Union Merge ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})) Match ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]})),(((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Using Index `6esn`:`2esn`(`1esn`) Create Unique ``=Shortestpath(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]})))"),
    octest_legacy:ct_string("Foreach(#usn8 In $usn1 =~010 =~07| Optional Match Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Using Scan `2esn`:@usn6) Union Merge Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Start ``=Relationship:`1esn`({@usn5}) Where 1000[$7..$123456789]"),
    octest_legacy:ct_string("Start usn1=Node:`6esn`({`8esn`}) ,`3esn`=Rel:`5esn`({0}) Unwind `6esn` Is Not Null Is Not Null As _usn3 Load Csv With Headers From 9e1['s_str'..0xabc] As usn2  Union Delete $`2esn`[{usn1}..],None(_usn4 In 0.0[..{999}][..0.0] Where 01234567[..9e1]) Ends With Case $`1esn`[07] When _usn4 Is Null Is Null Then 12.0 =~$#usn7 =~9e12 When {#usn7} Contains 0.0 Contains $0 Then 1.e1[..12.e12][..$usn2] Else 010 In `1esn` End,Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null] Return *,$`4esn` Starts With 0e0 As `` Order By {#usn7}[{`4esn`}..][0X7..] Desc,Filter(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]) Ends With Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}]) Ends With {`2esn`:usn1 Is Null Is Null,usn2:0.e0 =~`1esn` =~`6esn`} Desc Skip $12 Is Not Null"),
    octest_legacy:ct_string("Unwind 00 Ends With `8esn` As usn1"),
    octest_legacy:ct_string("Return $usn1 =~010 =~07 As usn2 Skip 123.654[{@usn5}..123.654][1.0..$12] Limit [@usn5[..$@usn5][..0Xa],{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`]] In Filter(_usn4 In 0.0[..{999}][..0.0] Where True Starts With $`4esn` Starts With 12e12) Union All Foreach(#usn8 In $_usn4 Is Not Null Is Not Null| Create Unique #usn8=Allshortestpaths((`5esn` :_usn4)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})),Shortestpath((((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))) Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Remove [$usn1 In 01234567 In .e1,$@usn5[..usn2][..$#usn7],True Is Not Null].`4esn`,[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]|1000 Is Not Null]._usn3?,None(`1esn` In $12 Is Not Null Where Null Is Null Is Null).``! Start @usn6=Node:`1esn`(\"d_str\")  Union Start _usn3=Relationship:``(`1esn`={`2esn`}) ,_usn3=Relationship:_usn4(usn1={_usn4})Where $999 Contains {7} Remove Reduce(usn1=12e12 Ends With `4esn` Ends With 123456789,`1esn` In 0.e0 =~`1esn` =~`6esn`|1.e1[0xabc..]).`4esn`!,[$@usn6[$0..usn1][0X0123456789ABCDEF..$999],0.0 Is Not Null Is Not Null,0Xa Contains $``].`7esn`? Union All Optional Match _usn3=Allshortestpaths((`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})) Using Scan usn2:#usn7"),
    octest_legacy:ct_string("Delete 0Xa[{``}] Create Unique Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) Start @usn5=Rel:_usn4(\"d_str\") Where $12[{7}..0X0123456789ABCDEF] Union All Create Unique Allshortestpaths((:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})),#usn8=Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})))"),
    octest_legacy:ct_string("With Distinct *,Null[010..][{``}..] Where `5esn`[..9e0][..01234567] Create (_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Return *,(usn1 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})<-[`4esn`:#usn7|`2esn` *0X7..0Xa]-(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}) Is Not Null,$_usn3[..$`2esn`][..\"d_str\"] Skip $999 In 999 Limit Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] Union Create Allshortestpaths((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12})) Delete @usn6[$12],None(`5esn` In $`2esn`[12.e12][$@usn5] Where `6esn`[{`6esn`}..]) =~Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]),{`8esn`} Is Not Null Is Not Null Union All Unwind [{999} Starts With {12},9e1 Ends With Count(*) Ends With False,0X0123456789ABCDEF[`5esn`..][$#usn8..]] In Single(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null) As `1esn` Load Csv With Headers From 0e0 As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge `4esn`=({`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]})-[@usn5{#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,#usn7:.e12[$#usn8..@usn6]}]->(`5esn` :@usn5) On Create Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )] On Create Set {#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]}.usn1 =(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where `7esn` Starts With 0X7 Starts With $`7esn`).`4esn` =$@usn6[..123.654],_usn4:`4esn`:@usn6 With Distinct *,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 9e12 Is Not Null) =~Case When False[0Xa..$usn1] Then {123456789}[12..][$12..] Else 0e0 Contains 9e12 End As usn2 Order By $`7esn` Contains {`1esn`} Contains 9e12 Asc,usn1 Is Null Is Null Descending Limit `5esn` Is Not Null Is Not Null Union Load Csv With Headers From All(#usn7 In 123.654 Starts With $`` Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF) =~[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|{#usn8}[2.12]] =~Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) As `4esn`  Union Create ((:``)-[:``]->({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}})) Start #usn8=Node:`2esn`(#usn7={usn1}) ,``=Node:`5esn`(#usn7=\"d_str\")Where {``}[_usn4..$`1esn`] Start usn2=Node:usn1(`5esn`={_usn4}) ,_usn3=Relationship:``(_usn3={0})Where 1.0[{999}][$999]"),
    octest_legacy:ct_string("Create (@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]}) Foreach(`5esn` In `1esn` Is Null Is Null| Unwind {`3esn`:'s_str'[..0X7]}[(@usn5 :@usn5)<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]->(:`5esn`:@usn5{``:.e12 =~$_usn4})] As `1esn`) Unwind 12.e12[`7esn`] As usn1 Union All Load Csv From 12.e12[$`8esn`..{`8esn`}] As `` Fieldterminator 's_str' Load Csv From Count ( * )[Count ( * )][12] As #usn7  Union All Create ``=(`1esn` :`1esn`{`7esn`:{1000}[{usn1}][Null],`3esn`:7[$0..][{_usn4}..]})<-[`2esn`:usn2|#usn7 *0X0123456789ABCDEF]-(@usn6 {`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]})<-[@usn6?:`2esn`]->(_usn4 :`6esn`:`8esn`$``) Remove All(_usn4 In `2esn` Where Count(*)[..``][..#usn8])._usn3,(:usn1:_usn4{@usn5:1000 Is Null Is Null})<-[ *..01234567{`3esn`:$#usn7 =~{12} =~False,usn2:$@usn6[$`8esn`..][7..]}]->(#usn8 :usn2:`2esn`).usn2!,Case When 0X0123456789ABCDEF[9e12] Then 1000 Starts With `7esn` When 999[12.0..][#usn7..] Then `1esn` =~1000 =~1000 Else {_usn4} Is Null End.usn1? Foreach(@usn5 In 9e12 Is Not Null| Unwind 0.12[010..][{0}..] As #usn8 Load Csv With Headers From 12 Starts With $#usn7 As `3esn` )"),
    octest_legacy:ct_string("Remove Filter(`` In {`1esn`} Starts With @usn6).@usn5? Union All Delete {`3esn`} Ends With `1esn` Ends With $@usn6,{usn2}[`6esn`..01234567] Return Distinct #usn7[..12e12] As `1esn`,Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)],12[12e12] Order By [Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[{999}..][{_usn4}..])..] Descending,Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}|{1000}[{#usn8}]) =~All(#usn7 In 123.654 Starts With $`` Where $`5esn`[..{`2esn`}][..{0}]) =~Case _usn4 Is Not Null Is Not Null When .e1[..\"d_str\"] Then $#usn7 =~{12} =~False When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} Else 9e12[$`5esn`] End Desc Skip @usn6[$12] Return {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn`"),
    octest_legacy:ct_string("Create @usn5=Allshortestpaths(((:`2esn`))),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Foreach(_usn3 In 12 In 999| With Distinct `7esn`[{7}..@usn5] As `6esn`,[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn`,$999 Is Not Null Is Not Null As `3esn` With Distinct `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Limit `` =~`6esn` =~usn1 Where @usn5[12.0][{1000}]) Start _usn3=Node(07,123456789,123456789) ,`7esn`=Relationship:`2esn`(@usn5={#usn7})Where `5esn`[0xabc..] Union Foreach(@usn5 In [1e1[{_usn4}..123.654]] In Reduce(`5esn`=9e1 Ends With Count(*) Ends With False,`1esn` In $12 Is Not Null|123.654[{`7esn`}][{7}]) In [usn2[True],{`3esn`}[{`5esn`}]]| Unwind Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null As `1esn` Load Csv From $`5esn`[`1esn`..$123456789] As #usn7 ) Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))) Where 0Xa[@usn5][{`7esn`}] Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6"),
    octest_legacy:ct_string("Load Csv With Headers From $usn1 =~010 =~07 As _usn4 "),
    octest_legacy:ct_string("Create usn1=(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})))"),
    octest_legacy:ct_string("Delete @usn5 In 1e1,Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})],usn1 In 00 In {_usn3} Merge Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})) Load Csv With Headers From {`2esn`:`8esn`[..`4esn`][..$usn1],@usn6:{123456789}[12..][$12..]} In [$0 Is Not Null,#usn7 Starts With $999,$`6esn`[`8esn`][0.0]] In [$999 Is Null,{``}[010]] As `3esn`  Union With Distinct {@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] As `6esn`,Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123456789 Is Not Null Is Not Null) Starts With Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999) Starts With Reduce(usn2=1.e1 =~`2esn`,@usn5 In Null =~12e12|Count(*)[..``][..#usn8]) As `1esn` Order By 0x0[{999}..`1esn`][0Xa..False] Descending,{_usn4}[..$#usn7] Ascending Skip @usn6 Contains Null Merge `7esn`=Shortestpath((((`6esn` {``:`4esn`[usn1]})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})))) On Match Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5"),
    octest_legacy:ct_string("With  *,`7esn`[0..$usn2][{usn2}..0.e0],[9e1[123456789..]] In Reduce(`1esn`=12[..$@usn6],`` In {`1esn`} Starts With @usn6|00[..$123456789][..$`5esn`]) In Case When {``}[010] Then {`3esn`} Is Null End As _usn4 Order By 9e0 In usn1 Ascending Limit True[..010] Merge `8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) On Create Set @usn6+={7}[$123456789..{1000}][$`3esn`..`7esn`],Extract(#usn7 In 0Xa[@usn5][{`7esn`}] Where $@usn5 In $usn2 In {1000}|{`2esn`}[..{@usn6}][..1.e1]).`3esn`! =$@usn6[$0..usn1][0X0123456789ABCDEF..$999] On Create Set Extract(usn1 In 12.e12 In {0} In 9e1 Where False Starts With 010|True Starts With $`4esn` Starts With 12e12).`7esn`? =0X0123456789ABCDEF Is Null Is Null,`4esn` =`3esn` In {@usn6} Foreach(`7esn` In All(#usn7 In 123.654 Starts With $`` Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF) =~[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|{#usn8}[2.12]] =~Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789])| Return {`8esn`}[0X7][$`3esn`] As `6esn`,{`4esn`:12 Starts With {_usn4} Starts With $#usn8} =~Reduce(@usn5=$@usn6 =~#usn8,`5esn` In $`2esn`[12.e12][$@usn5]|{`1esn`} In 12.e12 In 9e1) As #usn7,``[$0..][`1esn`..] As `4esn` Skip None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[Shortestpath(((({``:$7[{`1esn`}]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(#usn7 :@usn6))))..Extract(_usn3 In True[7][$999] Where $7 Is Null Is Null)][{`4esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:.e12 Is Null Is Null}..[`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000]] Return $1000[\"d_str\"..$999][$`3esn`..{`3esn`}] As `6esn` Skip `8esn` Limit 9e1[9e1...e0])"),
    octest_legacy:ct_string("Foreach(@usn5 In {`1esn`}[`6esn`..12e12]| Delete 123456789 Starts With {999},{_usn4}[{``}..],{``}[_usn4..$`1esn`]) Optional Match ((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})<-[? *..0Xa]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[?:`6esn`$usn1]->(_usn4 )),@usn5=((@usn5 :`8esn`:@usn5)<-[:`1esn`|:`3esn` *07{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]-(`6esn` {``:`4esn`[usn1]})<-[@usn6?:`8esn`|:_usn4 *0X7..0Xa{`3esn`:9e1 =~999}]-(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})) Using Scan `3esn`:_usn3 Using Join On `3esn` Where {0}[False..@usn5] Return Distinct *,$1000[..{`7esn`}][..#usn7] Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Asc,`3esn`[$@usn5..@usn5][9e1..$``] Desc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `2esn`[$1000..9e12][{#usn8}..{7}] Limit [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]][Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..])..][None(`6esn` In 00 Where {@usn5} Starts With 1.0 Starts With 00)..] Union All Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\" Optional Match ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),((`8esn` :`8esn`:@usn5)<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})) Where {`3esn`} Is Null"),
    octest_legacy:ct_string("Unwind \"d_str\"[{999}..] As usn1 Union Unwind [12e12,123.654 Starts With $``,`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]][Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}])..] As `7esn` Match `7esn`=Shortestpath((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))),`6esn`=Allshortestpaths((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Using Index ``:#usn7(`1esn`) Return Distinct *,Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null As usn2 Skip {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] Limit 0Xa[.._usn3][..$`6esn`]"),
    octest_legacy:ct_string("Merge ((`4esn` :usn2:`2esn`)) Start `1esn`=Rel:@usn5({usn1})  Merge (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})) Union Merge @usn6=((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})) On Create Set (`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})<-[`7esn`?:#usn7|`2esn` *01..07]-(`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[`6esn`?:@usn6|`` *01..07{usn2:usn1 Contains $7 Contains $``,@usn6:`7esn` Starts With 0X7 Starts With $`7esn`}]-(`` :_usn4)._usn4! =Filter(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}) =~({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null}) With  9e12 Is Not Null,(`8esn` :`8esn`:@usn5)<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]->(#usn7 :`2esn`)-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Null Is Null Order By Count ( * )[00] Ascending Skip True[..010] Limit 0e0 Starts With $@usn6 Starts With $`6esn`"),
    octest_legacy:ct_string("Return Distinct Case $1000[..12.0][..0e0] When `3esn` Is Not Null Is Not Null Then 12.e12[{7}..7] When Count(*) In {``} Then 12[..$@usn6] End[..All(#usn7 In 0Xa[@usn5][{`7esn`}] Where 1e1[1.e1..][123.654..])][..[0.0 =~12.e12 =~1.0,$`7esn` Is Null Is Null,``[..$#usn7]]],[usn1 In 12.e12 In {0} In 9e1 Where Count(*) In 0e0 In 9e1] Is Null As _usn3,`1esn`[..\"d_str\"][..$`5esn`] As `6esn` Order By Case True[$123456789][`8esn`] When 12.e12[{@usn5}..][9e1..] Then 12.e12[`7esn`] Else {`2esn`}[Count(*)] End Ends With (`` :`7esn`)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) Ends With None(`1esn` In `3esn`[07..]) Descending,0X0123456789ABCDEF[7...e0][`1esn`..usn2] Asc Limit {999} Is Not Null Unwind 9e12 Is Not Null Is Not Null As @usn5 Optional Match (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))),#usn7=(($`5esn`)) Using Scan #usn7:_usn3 Using Index `6esn`:`7esn`(#usn8)"),
    octest_legacy:ct_string("Return Distinct ``[$0..][`1esn`..] Limit usn1[0] Union Merge ((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})) On Create Set `4esn` ={999} Ends With {`5esn`} Ends With {0} Merge ((:`3esn`:`6esn`{`1esn`:12 Starts With 0x0})) On Match Set _usn3 =$`` Starts With 12 Starts With $usn2,@usn5+=$@usn6[$`8esn`..][7..] With Distinct *,#usn8 Is Not Null,$usn2 Starts With $@usn6 Starts With 010 As _usn4 Where $`1esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("With Distinct *,$`8esn` In $`2esn` In {7} As _usn3 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,1.e1 =~$`1esn` Ascending,12.e12[..1e1] Asc Skip [$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End] Where {`5esn`} Contains 's_str' Contains 9e1 Detach Delete #usn8 Is Null,1e1 Starts With 9e1 Starts With {`4esn`} Return Distinct *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc Union Match Allshortestpaths(((:`8esn`:@usn5{`5esn`:$`8esn`[..$999][..0],#usn7:$1000 =~{1000} =~`5esn`}))) Using Index `6esn`:`2esn`(`1esn`) Return Distinct $999[07..{#usn7}][1e1..0xabc] As #usn8,{1000}[{#usn8}] As `2esn` Limit Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Delete [`3esn` =~9e0 =~@usn6] In Shortestpath((:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})) In Filter(_usn4 In `2esn` Where #usn8[`7esn`..]),`5esn` In 12e12 In `8esn`"),
    octest_legacy:ct_string("Return Distinct $@usn5[{_usn3}][$#usn7] Order By Case True[$123456789][`8esn`] When 12.e12[{@usn5}..][9e1..] Then 12.e12[`7esn`] Else {`2esn`}[Count(*)] End Ends With (`` :`7esn`)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) Ends With None(`1esn` In `3esn`[07..]) Descending,`3esn`[..0.e0][..$usn1] Descending,Shortestpath((_usn3 :@usn5)) Is Not Null Desc Skip {_usn3}[`3esn`..$#usn8] Create usn2=Allshortestpaths((({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))),(((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[`8esn`?]->({@usn6:$`` Starts With 12 Starts With $usn2}))) Union Create Unique usn2=(((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})-[?:#usn7|`2esn` *0x0..]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Match @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))"),
    octest_legacy:ct_string("Foreach(_usn4 In 07 Starts With True Starts With 's_str'| Optional Match (:`5esn`:@usn5{`5esn`:`2esn`[$1000..9e12][{#usn8}..{7}]}),`1esn`=(((#usn8 :#usn7)-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000}))) Using Join On `6esn`,_usn4 Where $7 In @usn5 In {@usn5} With  {#usn8} Is Null Is Null As `1esn`,$7 In @usn5 In {@usn5},`1esn`[Null..] As `2esn` Order By ({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})<-[`5esn`?:`7esn`]->(:@usn5)<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-({usn2:`1esn` In 07}) =~Reduce(@usn6=`3esn` =~9e0 =~@usn6,_usn3 In True[7][$999]|$`8esn`[..$999][..0]) =~{@usn5:12 Is Not Null,`2esn`:$999 In 999} Descending,{`4esn`}[..07][..$`6esn`] Ascending Limit (`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({#usn7:#usn8 =~{999}}) In Shortestpath(((:`1esn`)<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[`7esn`? *123456789..0X7{`6esn`:{0}[..{`7esn`}]}]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})))) Load Csv From $`5esn` =~.e12 =~2.12 As _usn4  Start `2esn`=Relationship:_usn4(usn1={_usn4}) Where {`7esn`}[0X7..][0x0..] Union All Unwind {7} Starts With $usn1 Starts With 1.0 As #usn7 Union All Unwind Reduce(`1esn`=12[..$@usn6],`` In {`1esn`} Starts With @usn6|00[..$123456789][..$`5esn`])[Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where {@usn5} Is Null)] As _usn3"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn6  Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})) Where {#usn8}[$#usn7..] Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `3esn`:#usn7(usn2)"),
    octest_legacy:ct_string("Merge _usn4=((@usn5 {``:`3esn` =~9e0 =~@usn6})<-[`2esn`? *..010]-(`6esn` :usn2:`2esn`{`3esn`:{@usn5} =~_usn4 =~0.12,`7esn`:0e0 Contains `3esn` Contains `7esn`})) Create Unique ``=Shortestpath((((`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})))),`6esn`=(({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})) Union Merge #usn8=Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) On Create Set [0X0123456789ABCDEF Contains $`1esn` Contains 1000].``! =1000[$7..$123456789] On Create Set Filter(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).``! =$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,exists($`5esn`[`4esn`][_usn3]).@usn5 =$7[{`1esn`}],`2esn`({1000}[1000][$usn1]).`8esn`! =_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..]"),
    octest_legacy:ct_string("Create Shortestpath((`8esn` :_usn3)<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]->(`4esn` {_usn4:@usn5 Is Not Null Is Not Null})-[{``:\"d_str\"[{`8esn`}..]}]-(`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})),(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}))) Union All Detach Delete {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])],$123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]},.e12[{_usn4}..] Union With  0.12 Starts With 9e12 Starts With $`1esn`,{`2esn`} Starts With @usn6 As `3esn` Order By 07[$#usn8] Descending,Case True[$123456789][`8esn`] When 12.e12[{@usn5}..][9e1..] Then 12.e12[`7esn`] Else {`2esn`}[Count(*)] End Ends With (`` :`7esn`)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) Ends With None(`1esn` In `3esn`[07..]) Descending Limit \"d_str\" Starts With $`8esn` Starts With {usn1} Where 123.654[{`7esn`}][{7}] Return `3esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],1000 Is Not Null) In {`1esn`:@usn6[$usn2..#usn7]},{123456789}[..'s_str'][..$@usn6] As #usn7 Skip ({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})[(`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(usn2 )] Limit Reduce(#usn8=``[00..$7],_usn4 In 0.0[..{999}][..0.0]|12 Starts With $#usn7) =~usn1() =~Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 999 Ends With .e12 Ends With .e1|0[`4esn`][12.e12])"),
    octest_legacy:ct_string("Create Unique (_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`),Shortestpath(((:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})-[?:`1esn`|:`3esn` *999{usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]}]->(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}))) Union All Detach Delete 07 Is Null,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Match `8esn`=((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})<-[?:#usn7|`2esn` *0x0..]->({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) Using Scan #usn7:usn2 Using Scan `7esn`:#usn8 Foreach(`6esn` In Count(*) Is Not Null| Unwind [0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..]) As @usn5) Union All Return Distinct *,0x0[$`8esn`.._usn3],True[$123456789][`8esn`] As @usn5 Skip 0.0[9e1..][Null..]"),
    octest_legacy:ct_string("With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $`6esn` Starts With 12.e12 Starts With $#usn7 Union Optional Match `5esn`=((`8esn` :@usn6)),`8esn`=Shortestpath(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})) Using Scan @usn6:@usn6 Foreach(#usn7 In `1esn` Is Null Is Null| Start @usn6=Node( {`8esn`}) Where `4esn`[usn1]) Unwind {`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1}[Reduce(`6esn`=$12 Contains 0Xa,`6esn` In 00|$`4esn`[..'s_str'][..`8esn`])][Shortestpath(((:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})))] As usn1"),
    octest_legacy:ct_string("Using Periodic Commit 12 Load Csv From `1esn` In 07 As @usn5 Fieldterminator 's_str' Load Csv With Headers From #usn7 Contains {`3esn`} Contains $`6esn` As `` "),
    octest_legacy:ct_string("With Distinct _usn4 Is Null Is Null,$`5esn` Is Not Null As _usn4 Order By Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Ascending,({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}) Ascending Skip {`4esn`}[$123456789] Limit Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Where 0.12 Ends With {1000} Ends With `6esn` Load Csv From 00 As _usn4  Union All Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:#usn8('s_str') Load Csv From usn2 Ends With Count ( * ) Ends With $@usn6 As @usn5 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\" Optional Match ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),((`8esn` :`8esn`:@usn5)<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})) Where {`3esn`} Is Null Union All Merge ((`2esn` {_usn4:`4esn`[usn1]})<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(:_usn4)) On Match Set `6esn` ={1000},`` =All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null,All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]).`4esn`! =01234567[{`7esn`}..]"),
    octest_legacy:ct_string("With  *,_usn3(Distinct 07[..`6esn`][..'s_str'],123456789 Starts With {@usn6} Starts With $12) Is Null,[@usn5[..$@usn5][..0Xa],{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`]] In Filter(_usn4 In 0.0[..{999}][..0.0] Where True Starts With $`4esn` Starts With 12e12) As `8esn` Skip [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null][Allshortestpaths((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}))][Case {999}[$123456789..][12..] When $@usn6 =~#usn8 Then $999 Contains {7} When False Starts With 010 Then `8esn` Starts With {123456789} Else True Is Not Null Is Not Null End] Where .e1[..{`7esn`}][..{_usn3}] Load Csv With Headers From 010 Ends With 01 Ends With {_usn3} As #usn8 Fieldterminator 's_str' Delete False Contains $#usn8 Contains 9e1,0xabc[9e12][0X0123456789ABCDEF],12.e12[{@usn5}..][9e1..] Union All Merge @usn6=((_usn4 :#usn8)<-[:#usn8|`2esn` *123456789..0X7{``:$#usn7 =~{12} =~False,`5esn`:{1000} In {123456789}}]->({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})<-[{``:\"d_str\"[{`8esn`}..]}]-(:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`} Union Start #usn8=Relationship:usn1({7}) ,`5esn`=Relationship:_usn4(usn1={_usn4})Where .e12 Ends With 1000 Ends With 010 Remove Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..]).``! Delete $`7esn` Contains {`1esn`} Contains 9e12,2.12[..$_usn4]"),
    octest_legacy:ct_string("Unwind `8esn` As `5esn` Foreach(`5esn` In $_usn4 Is Null Is Null| Create _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})),`5esn`=Allshortestpaths(((:_usn4)<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))) Remove (`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]}).`1esn`?,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000].usn1?,{`4esn`:0.12 In 0X7}._usn4!) Create `2esn`=Shortestpath((((`1esn` {usn2:12 Is Not Null,`4esn`:`1esn`[..01]})-[_usn3?:@usn6|``]-(usn1 :@usn5)-[``?:usn2|#usn7 *0x0..]-(@usn5 :usn1:_usn4)))),``=({#usn7:#usn8 =~{999}})-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Union Merge (((`8esn` {_usn4:{usn1} In Count ( * )})<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:`5esn`:@usn5)<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07}))) Match @usn6=((`8esn` :`5esn`:@usn5)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null})),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) Where .e12[$#usn8..@usn6]"),
    octest_legacy:ct_string("Optional Match `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})),usn1=(({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[`5esn` *0x0..]->(`8esn` :#usn7)) Using Index `3esn`:#usn8(`2esn`) Where $`2esn` In {123456789}"),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv With Headers From {_usn4} Is Null As ``  Start `4esn`=Rel:`1esn`(@usn5={`5esn`}) Where True[7][$999]"),
    octest_legacy:ct_string("Start `5esn`=Node:`6esn`(usn2={`8esn`}) "),
    octest_legacy:ct_string("Create Unique (:`5esn`:@usn5{`5esn`:`2esn`[$1000..9e12][{#usn8}..{7}]}) Union All Detach Delete $`3esn`[{``}..] Start `6esn`=Node:@usn6(`3esn`='s_str') Where True Is Not Null Union All Unwind {`5esn`}['s_str'..] As `2esn` Delete Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)..Shortestpath(((_usn3 {@usn5:.e12 =~.e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))][Shortestpath(((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})))..Reduce(usn2=Null In .e0,_usn3 In {`2esn`} Ends With {12} Ends With 7|{0}[..{`7esn`}])]"),
    octest_legacy:ct_string("Unwind _usn4 Contains 0X0123456789ABCDEF Contains {_usn4} As `2esn` Start `4esn`=Node(01234567,0Xa,07)  Union All Foreach(usn1 In {`4esn`}[{`4esn`}..999]| Create (`4esn` :`4esn`:@usn6) With Distinct 0Xa Contains #usn8 Contains 1000 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Skip ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]]) Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),((`4esn` {`1esn`:9e12 Is Not Null Is Not Null})-[?:`7esn` *999{@usn6:{``} Ends With .e12 Ends With 0.e0,`5esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})) Using Scan #usn7:`3esn` Return Distinct *,1.e1 =~$usn2 Skip Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}] Union All Unwind {usn2} =~@usn6 =~{`4esn`} As `1esn` Match `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))) Using Scan `8esn`:`8esn` Return Distinct .e1 Ends With {7} Ends With $usn1 As `` Skip Extract(_usn3 In {@usn5}[..#usn7] Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$`1esn`[#usn8][$@usn5]) Is Not Null Limit `8esn` Contains 1e1"),
    octest_legacy:ct_string("Detach Delete `4esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Return {usn1}[{`5esn`}..] As @usn5,12 Starts With {_usn4} Starts With $#usn8,False Contains $#usn8 Contains 9e1 As _usn3 Order By {`8esn`} Is Not Null Is Not Null Ascending,_usn3 =~123.654 Asc,$1000 Is Null Is Null Asc Skip 1e1[..$1000][..999] Merge `5esn`=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}) With Distinct _usn4 Is Null Is Null,$`5esn` Is Not Null As _usn4 Order By Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Ascending,({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}) Ascending Skip {`4esn`}[$123456789] Limit Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Where 0.12 Ends With {1000} Ends With `6esn` Union Load Csv With Headers From 999 As `4esn` Fieldterminator 's_str' Create Unique (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Merge Allshortestpaths((@usn6 :usn1:_usn4)) On Match Set usn1 =Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Union All Load Csv With Headers From 9e1['s_str'..0xabc] As usn2 "),
    octest_legacy:ct_string("Foreach(@usn5 In 0Xa[Reduce(`7esn`={@usn5} Is Null,#usn7 In 0Xa[@usn5][{`7esn`}]|0e0[0X0123456789ABCDEF..010][$@usn6..010])..$#usn7]| Return Distinct usn1[0] As ``,9e12 Is Not Null Is Not Null Order By {`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Desc Limit 9e0 In usn1 With Distinct *,0X0123456789ABCDEF Contains {usn1} As @usn5 Order By (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] Descending,`2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] Asc Skip #usn7[00] Limit Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]])"),
    octest_legacy:ct_string("Foreach(`8esn` In {`2esn`}[..{@usn6}][..1.e1]| Return Distinct *,0X7[0.e0][{`4esn`}],usn1 Contains $7 Contains $`` Limit usn2 In `2esn` In $`7esn`) Merge (`` :``)-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3) On Match Set {#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]}.usn1 =(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where `7esn` Starts With 0X7 Starts With $`7esn`).`4esn` =$@usn6[..123.654],_usn4:`4esn`:@usn6 With  {_usn3} Contains $`1esn` Contains 12.0 Order By 1e1[..01] Descending,Any(`1esn` In `3esn`[07..] Where .e1 Starts With $_usn4 Starts With {`1esn`}) Starts With 0x0 Descending Skip $@usn5[usn2..][$0..] Limit ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4) In (`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})<-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]->(`4esn` :#usn7)<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}) In Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Where $``['s_str'..][0x0..] Union Load Csv With Headers From {_usn4}[{usn1}..$_usn3] As `3esn` Fieldterminator 's_str' Union All Start ``=Relationship:usn1({999}) "),
    octest_legacy:ct_string("Merge `4esn`=Allshortestpaths(((`4esn` :`1esn`)-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}))) Union All With Distinct *,Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] As #usn8 Skip {_usn4}[{``}..] Union Unwind 0xabc[9e12][0X0123456789ABCDEF] As _usn4"),
    octest_legacy:ct_string("Create (({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)) Match Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})) Using Scan _usn3:`4esn` Using Scan `2esn`:`1esn` Where $123456789 Starts With $123456789 Starts With Count ( * ) With Distinct None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)] As `3esn`,`7esn`[{7}..@usn5],usn1 Is Null Is Null Order By `6esn` Is Null Is Null Asc,1e1 =~#usn8 =~2.12 Ascending,1e1[{_usn4}..123.654] Asc"),
    octest_legacy:ct_string("Return Reduce(`4esn`=$0[$1000..00][{0}..{usn1}],@usn5 In Null =~12e12|_usn4 Is Null) Is Not Null Is Not Null Limit $_usn4[9e0..]"),
    octest_legacy:ct_string("Remove [#usn7 In 0Xa[@usn5][{`7esn`}] Where 0[`4esn`][12.e12]].@usn6,Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 1.e1[0X0123456789ABCDEF..]).#usn7?"),
    octest_legacy:ct_string("Unwind Reduce(@usn6=@usn5[$12..\"d_str\"],`` In {`1esn`} Starts With @usn6|Count ( * ) =~{`5esn`} =~{_usn4}) Starts With None(`1esn` In $12 Is Not Null Where `7esn` Is Not Null Is Not Null) Starts With [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null] As `2esn`"),
    octest_legacy:ct_string("Remove ``(Distinct 1.e1 Starts With $`2esn` Starts With $0).`7esn`?,[{7}[$7..],``[..$#usn7],01234567[$7..{12}]].`` Create Unique `7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2})) Create ((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0})),(((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))"),
    octest_legacy:ct_string("Return Distinct {#usn8}[12.0][$@usn6],$usn2 In 123.654 In .e0,{@usn6}[$`7esn`..][False..] Skip .e12[$7..][{`6esn`}..] Limit $12 Is Not Null Foreach(`1esn` In Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`)| Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Using Scan `1esn`:_usn4 Merge `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))) On Match Set `6esn`+={`8esn`}[Null..][{`8esn`}..],_usn4+={#usn8} =~{999} =~{#usn7} On Match Set usn1 =[usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] Union Merge (usn1 :usn2:`2esn`{`1esn`:{123456789}[12..][$12..]}) On Create Set usn2 =_usn4 Contains 0X0123456789ABCDEF Contains {_usn4},Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})<-[@usn6?:#usn7|`2esn` *12..{#usn8:12 Starts With 7 Starts With $`5esn`}]->(usn2 {_usn3:$0 In _usn4}))).@usn5? ={123456789}[{12}..],`2esn` =[`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)][Extract(`` In {`1esn`} Starts With @usn6 Where $`7esn`[$``..][999..]|.e1 Contains $`3esn`)..Case When 's_str'[.._usn4][..``] Then 123.654 Starts With $`` Else 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] End] On Match Set usn1 =1e1 =~#usn8 =~2.12,@usn6 =0e0[..1000] With Distinct {`5esn`}['s_str'..] As ``,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] As usn2,{#usn8} Is Null Is Null As `1esn` Order By ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4) In (`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})<-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]->(`4esn` :#usn7)<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}) In Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Desc,{_usn4}[{usn1}..$_usn3] Asc Skip $@usn5[$`4esn`][$@usn6] Limit $#usn7 Starts With 9e0 Starts With 2.12 Where $0 Is Not Null Create usn1=(({`7esn`:123456789[0..]})),`4esn`=Shortestpath((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))"),
    octest_legacy:ct_string("Merge `5esn`=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}) Optional Match Allshortestpaths((usn1 {usn2:#usn8 =~{_usn3} =~``})-[`5esn`?{`2esn`:`3esn`[07..],_usn3:{``} Is Null Is Null}]-(@usn5 )),Shortestpath((((#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))) Where \"d_str\" Ends With False Ends With {@usn6} Load Csv With Headers From None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `8esn` Fieldterminator 's_str' Union All Load Csv With Headers From $1000[_usn4..$0][9e12..`3esn`] As @usn5  Match ({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})<-[? *0xabc..7]->(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6}) Using Scan `1esn`:`7esn` Using Join On `8esn`,`3esn`"),
    octest_legacy:ct_string("Unwind 1e1[1.e1..][123.654..] As `7esn` Union All Optional Match _usn3=(({_usn4})),(((_usn3 :`3esn`:`6esn`)<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[?:#usn8|`2esn` *01..07]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))) Where {_usn3} Contains $`1esn` Contains 12.0 Load Csv With Headers From $0 In _usn4 As `6esn`  Optional Match ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})),_usn3=Allshortestpaths(((_usn4 :#usn8))) Using Join On _usn3,`` Using Index usn1:@usn6(`3esn`)"),
    octest_legacy:ct_string("Create Unique (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`)"),
    octest_legacy:ct_string("Start `6esn`=Node:_usn4('s_str') ,#usn8=Node:`2esn`({_usn3}) Create `3esn`=Allshortestpaths(((_usn3 {usn2:_usn3[$usn2..0]}))) Load Csv From 12 In 0e0 As _usn4 Fieldterminator \"d_str\" Union All Remove None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000).`2esn`? With Distinct {#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null As `8esn`,Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4])[Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End] As `7esn`,{_usn4} In {1000} As `1esn` Order By $@usn5[`1esn`..] Desc Limit #usn8['s_str'..][123.654..] Where 's_str' Starts With 12e12 Starts With $_usn4"),
    octest_legacy:ct_string("Return *,{7}[$123456789..{1000}][$`3esn`..`7esn`] Limit $123456789[..$7][..$`6esn`] Start _usn4=Rel:_usn3(`1esn`='s_str') Where 12.e12[``..usn2][{#usn7}..@usn5] Start usn2=Relationship( {#usn7}) "),
    octest_legacy:ct_string("Detach Delete 12 Contains 1.0 Contains 999 Remove Reduce(@usn6=0.e0[12.e12],_usn4 In `2esn`|True Starts With $`4esn` Starts With 12e12).@usn6? Unwind 9e12[$`5esn`] As @usn6 Union Merge Shortestpath(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})) On Match Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}]"),
    octest_legacy:ct_string("Delete {7}[$123456789..{1000}][$`3esn`..`7esn`],.e12 =~{`3esn`} =~{`7esn`}"),
    octest_legacy:ct_string("Foreach(#usn8 In {1000}| Create Unique _usn4=((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}))) Match `5esn`=Shortestpath((_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})<-[@usn5?:`8esn`|:_usn4 *0X0123456789ABCDEF{usn1:False Contains $#usn8 Contains 9e1}]->({@usn6:$usn1[0X7],`3esn`:$7[$`3esn`]})),`8esn`=((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})) Using Index @usn5:usn2(`6esn`) Union All Remove (#usn7 :@usn6{`8esn`:{@usn6}[True..{_usn3}],`1esn`:07 Is Null})-[`3esn`:`6esn`{`3esn`}]-(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6).@usn6 Delete .e1[..\"d_str\"],[0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..]) Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=({`7esn`:123.654 Ends With usn2 Ends With 0})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->(:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000}) Using Index #usn7:`8esn`(@usn6) Where 0Xa Contains $``"),
    octest_legacy:ct_string("Match `3esn`=(usn1 {`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}),($`5esn`)-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Where $_usn4 Starts With 's_str' Starts With {7} Unwind .e12 Is Null Is Null As _usn4 Detach Delete 9e12 =~123456789 =~$999 Union All Match ({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})<-[? *0xabc..7]->(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6}) Using Scan `1esn`:`7esn` Using Join On `8esn`,`3esn` Start `5esn`=Node:`6esn`(usn2={`8esn`}) ,usn1=Node:`6esn`({`8esn`})Where {#usn7} Contains 0.0 Contains $0 Create _usn3=(({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})) Union Optional Match ({_usn4:0.e0[{999}][{`1esn`}]})<-[:`1esn`|:`3esn` *..0]->(:@usn5) Where \"d_str\" Is Null Is Null Remove Allshortestpaths(((:usn1:_usn4)-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)))._usn4,All(`3esn` In 123.654[1e1..][{#usn8}..] Where .e1[0.12]).`6esn`!"),
    octest_legacy:ct_string("Create Shortestpath((usn1 :usn1:_usn4)),Shortestpath((((#usn8 :@usn6)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})-[:`3esn`|:@usn5]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})))) Create (((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Union All Foreach(@usn6 In 0Xa Contains Count ( * )| With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $#usn7 Is Null Is Null Descending,Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(_usn3 In True[7][$999] Where {usn2})][Any(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)] Ascending Limit {usn2:_usn4 Is Null}[[True =~_usn3 =~123456789,0Xa[@usn5][{`7esn`}],{`1esn`} Starts With `4esn` Starts With {0}]..] Where {_usn3}[..$`8esn`] Create ``=(({`4esn`:1000 Is Null Is Null})),Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))))) Remove Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})).`6esn`!,Case 12.e12[..1e1] When {1000}[{#usn8}] Then $@usn5[$`4esn`][$@usn6] Else 123456789 Ends With usn1 Ends With usn2 End.`5esn`"),
    octest_legacy:ct_string("Start _usn3=Relationship:`1esn`(#usn7=\"d_str\")  Union Detach Delete #usn7 Starts With $0 Starts With .e12,$_usn4[$`4esn`..$12],Reduce(@usn5=$`8esn`[..$999][..0],`` In {`1esn`} Starts With @usn6|{@usn6} Contains 123.654 Contains 01) Contains [`1esn` In `3esn`[07..] Where {0} =~12.0] Contains (:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})"),
    octest_legacy:ct_string("Start `2esn`=Node:`8esn`(`6esn`='s_str')  Merge (((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6))) Create Unique `7esn`=Shortestpath((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))),`6esn`=Allshortestpaths((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Union All Foreach(`1esn` In 00| With  *,None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) In usn1({`1esn`} Starts With @usn6),$`8esn`[0e0..] As @usn5 Skip 0xabc[$999..][{#usn7}..] Limit $usn1 In 0.12 In $`` Remove {``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}.`7esn`,(:usn2:`2esn`)<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]}).`7esn`!,{`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}.`3esn`?) Load Csv With Headers From {7}[$_usn4..Count ( * )] As `7esn` Fieldterminator \"d_str\" Optional Match Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Using Join On usn1,_usn4,`6esn` Using Index usn1:_usn3(``) Where {_usn3}[`3esn`..$#usn8] Union All Create Unique Allshortestpaths((:``{``:0x0 =~123.654 =~{999}})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})),_usn4=(usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}) Create Unique (`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})"),
    octest_legacy:ct_string("Load Csv From {@usn5}[..{_usn4}][..$@usn5] As `3esn` Fieldterminator 's_str' Match `5esn`=(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4)-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-({``:.e1 Contains $`3esn`}),Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) Using Index usn2:usn1(`8esn`) Using Scan `2esn`:@usn6 Where .e1 Ends With {7} Ends With $usn1"),
    octest_legacy:ct_string("Return *,Count(*) Ends With $`` Ends With {7} As _usn3 Skip All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[{#usn7:Count ( * )[$12..]}..][`5esn`(Distinct False Starts With 010)..] Union Load Csv With Headers From $`2esn`[{usn2}] As #usn8  Create `3esn`=Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) Unwind Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] As #usn7"),
    octest_legacy:ct_string("Unwind 0x0[{7}..] As #usn7 Start _usn3=Node( {usn2}) ,`8esn`=Rel( {`7esn`})Where {0} Is Null"),
    octest_legacy:ct_string("Match usn1=Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})),`5esn`=Shortestpath((((:`7esn`{``:.e1 Contains $`3esn`})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`)<-[`2esn`:#usn8|`2esn` *0xabc..7]-(usn1 :#usn8)))) Using Join On `5esn`,``,usn1 Where .e1 Ends With {7} Ends With $usn1 Union All Match #usn8=(:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`}),Shortestpath((:`2esn`{`6esn`:@usn6[{0}..]})<-[usn2?:usn2|#usn7]->(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Where 12e12 Starts With `1esn` Starts With usn2"),
    octest_legacy:ct_string("Load Csv From $`2esn` Starts With {`8esn`} Starts With {usn1} As #usn7 Fieldterminator \"d_str\" Union All Unwind Count(*) In {``} As `3esn` Merge _usn4=((`8esn` :@usn6))"),
    octest_legacy:ct_string("Foreach(usn2 In {_usn3} Contains 9e0 Contains $999| With Distinct *,All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..],$`2esn` Is Null Is Null Where _usn4[Count(*)] Create (`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})) Unwind [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]][Shortestpath(((`1esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})))..] As #usn8 Start `8esn`=Rel( {`7esn`}) ,`3esn`=Node:`2esn`(@usn6={`4esn`})Where 07 Is Null Union Foreach(@usn5 In [1e1[{_usn4}..123.654]] In Reduce(`5esn`=9e1 Ends With Count(*) Ends With False,`1esn` In $12 Is Not Null|123.654[{`7esn`}][{7}]) In [usn2[True],{`3esn`}[{`5esn`}]]| Unwind Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null As `1esn` Load Csv From $`5esn`[`1esn`..$123456789] As #usn7 ) Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))) Where 0Xa[@usn5][{`7esn`}] Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6"),
    octest_legacy:ct_string("Return Distinct *,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..] As `3esn`,123456789[12..$`4esn`] As `7esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Create Unique `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))),usn2=Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))) Union Load Csv With Headers From 12.e12 In {0} In 9e1 As `4esn` Fieldterminator 's_str' Union All Optional Match _usn3=Allshortestpaths((`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})) Using Scan usn2:#usn7"),
    octest_legacy:ct_string("Merge (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) On Match Set Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`,#usn8+=$@usn5 In 's_str' In $12,@usn5 =$@usn5 On Create Set `4esn` =$#usn7 Contains True Contains _usn4 Merge #usn7=Allshortestpaths((((:`7esn`{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})<-[?:_usn3|`8esn` *1000]-(:``)))) On Match Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] On Create Set (@usn5 :usn1:_usn4)-[``?:#usn7|`2esn`{`5esn`:123456789 Starts With {@usn6} Starts With $12}]->(`7esn` {@usn6:{_usn4} Is Null}).`2esn`! =07[$#usn8],Case When $7 Ends With $`8esn` Then .e12 Contains $`1esn` Contains $@usn6 End.`8esn`! =$`6esn`['s_str'..][{_usn4}..],`2esn` ={usn1:$`8esn` In $`2esn` In {7},`7esn`:{`2esn`} In $123456789 In True}[..(:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]-(`3esn` :`7esn`)-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`)][..Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)] Union All Remove {`7esn`:{12}[00..{@usn6}][1.e1..0],``:$123456789 Starts With $123456789 Starts With Count ( * )}.`8esn`?,({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}).#usn8?,Shortestpath((@usn6 :@usn6)).#usn8? Create usn1=Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))),`4esn`=(:_usn3{`3esn`:{0} Is Null,#usn7:{0} Is Null})-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Merge Allshortestpaths((:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})-[_usn4? *07{1000}]-(`` )<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})) On Create Set ['s_str'[..0X7],False Contains 0.e0 Contains Count(*)].``? =$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]"),
    octest_legacy:ct_string("Remove Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999]|$_usn3[010..False]).usn2? Foreach(_usn3 In {`4esn`:$`8esn` In $`2esn` In {7},`8esn`:00[..$123456789][..$`5esn`]} Ends With Any(_usn4 In `2esn` Where $`2esn`[123.654][1e1]) Ends With Single(_usn3 In True[7][$999] Where Count(*) Is Not Null)| Start usn2=Rel:#usn8(#usn7='s_str') ,`8esn`=Rel:_usn3(`2esn`={`2esn`})Where @usn5 In 1e1 Remove [0x0[$`8esn`.._usn3],`5esn`[0xabc..],{`1esn`}[$`4esn`..][False..]].`1esn`!,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5).``!,[`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999]|12.e12[{@usn5}..][9e1..]].`5esn`) Union Merge `1esn`=(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(usn1 :`6esn`:`8esn`) On Match Set `1esn` =12e12 Starts With `1esn` Starts With usn2 On Create Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] Create Allshortestpaths((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12})) Union All Unwind {usn1:$`8esn` In $`2esn` In {7},`7esn`:{`2esn`} In $123456789 In True}[..(:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]-(`3esn` :`7esn`)-[?*..{`1esn`:$`1esn`[07..][9e12..],@usn6:{7} Starts With $usn1 Starts With 1.0}]->(:`3esn`:`6esn`)][..Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)] As `1esn`"),
    octest_legacy:ct_string("Merge `6esn`=(`3esn` :#usn7)-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Foreach(`` In Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..]| Start _usn3=Rel:`4esn`(`1esn`=\"d_str\") ,_usn4=Node:`5esn`(`5esn`={999})Where $`6esn` Ends With {0} Ends With {`7esn`}) Union Remove [Count ( * )[$12..]].usn1!,[$usn1 In 0.12 In $``].`8esn`?,[#usn7 In 0Xa[@usn5][{`7esn`}] Where 0x0 Ends With {``}].`1esn`! Load Csv From `3esn`[_usn4..{0}][`5esn`..usn2] As usn1 Fieldterminator 's_str' Create Unique #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))"),
    octest_legacy:ct_string("Remove [`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]].`3esn` Unwind Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] As `` Match _usn3=(((`6esn` {``:`4esn`[usn1]})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}))),Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Using Index @usn5:usn2(`7esn`) Union All Load Csv With Headers From $`2esn` In .e1 In .e0 As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove All(_usn4 In `2esn` Where 0Xa Contains {`7esn`} Contains $999).`8esn`,None(`3esn` In 123.654[1e1..][{#usn8}..] Where $`2esn`[12.e12][$@usn5])._usn4?,``:_usn3 Union Unwind Filter(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]) Ends With Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}]) Ends With {`2esn`:usn1 Is Null Is Null,usn2:0.e0 =~`1esn` =~`6esn`} As _usn3 Load Csv With Headers From {``} Starts With 123456789 Starts With usn2 As `3esn` "),
    octest_legacy:ct_string("Unwind {_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))) As `4esn` Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6 Union All Start #usn7=Relationship:usn2(_usn3='s_str') ,`4esn`=Node:`7esn`(``={usn2}) Optional Match `1esn`=Shortestpath(((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 ))),#usn8=(:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`}) Using Join On #usn8,usn2,#usn7 Using Join On #usn8,#usn8 Where Null[{_usn4}..] Remove Case @usn5[..$@usn5][..0Xa] When $@usn6 Starts With {`1esn`} Starts With 12 Then $1000[..12.0][..0e0] Else 's_str'[..0X7] End.`8esn` Union All Merge `2esn`=((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})) On Create Set _usn4:usn1:_usn4,`7esn` =#usn7[00],``:@usn6 On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] Create #usn7=Allshortestpaths(((:`5esn`:@usn5))),(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})))"),
    octest_legacy:ct_string("Delete `4esn`[{1000}][{`5esn`}],Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}),(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3}) Is Null Union All Merge `5esn`=Allshortestpaths((((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[?:`` *..00{``:`3esn` =~9e0 =~@usn6}]-(:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))) On Create Set _usn4+=0.12[Count(*)..][$#usn7..],None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =[$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null On Create Set {`3esn`:0X0123456789ABCDEF[$`2esn`..][`2esn`..]}.`4esn`? =`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null],usn1:#usn7,Case When 1.e1[0xabc..] Then $@usn6 Starts With {`1esn`} Starts With 12 End.`2esn`! ={@usn5} Starts With 1.0 Starts With 00"),
    octest_legacy:ct_string("Remove `2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0).@usn6 Union All Unwind ``[..0X0123456789ABCDEF] As @usn5"),
    octest_legacy:ct_string("Merge Shortestpath((`7esn` :`1esn`)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6})) On Match Set `4esn` ={`5esn`}[$`8esn`..$`1esn`][0.12..0.12],`3esn` =[`8esn` In $12[{7}..0X0123456789ABCDEF] Where 2.12 In $`8esn` In {`7esn`}|12e12 Starts With `1esn` Starts With usn2] Contains Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8]) Contains #usn7({`7esn`}[9e1..][@usn6..],{usn2}[$`4esn`])"),
    octest_legacy:ct_string("Create Unique Shortestpath((((usn1 :@usn5)-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})))) Union All Merge @usn6=((usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})<-[? *0xabc..7]->(`3esn` :`3esn`:`6esn`)) On Create Set Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]).`2esn`! =123456789 Starts With {999} Create Unique (:`2esn`$1000)-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`` {``:0x0 =~123.654 =~{999}})"),
    octest_legacy:ct_string("Unwind [#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) As `8esn` Unwind None(`6esn` In 00 Where 0.12[..$`6esn`][..$1000])[Case _usn4 Is Null Is Null When 07 Is Null Then False Contains $#usn8 Contains 9e1 End..`2esn`(Distinct #usn8[`7esn`..])][[_usn4 In 0.0[..{999}][..0.0] Where 12 Ends With 01|0.0 Is Not Null Is Not Null]..[Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null]] As _usn4"),
    octest_legacy:ct_string("Start `8esn`=Relationship:`8esn`({`1esn`})  Detach Delete `5esn`[..9e0][..01234567],01234567[..$`5esn`],{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0}"),
    octest_legacy:ct_string("Optional Match `5esn`=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}) Using Join On `4esn` Using Join On `1esn`,`7esn`,usn2 Where 00 With  `7esn`[{usn1}][999] As `7esn`,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Order By @usn5 =~$`3esn` =~0X7 Descending Skip {usn1}[01..7][{`3esn`}..`6esn`] Start `2esn`=Rel:usn2(`2esn`={`7esn`}) ,`1esn`=Relationship( {@usn6})Where {`7esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(`` In `6esn` Starts With 123.654| Create Unique `1esn`=(({`3esn`:@usn5[12.0][{1000}]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Unwind Reduce(@usn6=12 Is Not Null,`` In {usn1} Ends With {`6esn`} Ends With 123456789|.e1 Ends With {7} Ends With $usn1)[Case {12} Contains `7esn` Contains $_usn3 When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then Count ( * ) Starts With 010 Starts With 0x0 When $7 Ends With 0X7 Then {#usn8}[2.12] Else $7 In 1.0 In 1e1 End..][_usn4(Distinct 0.12 Ends With {1000} Ends With `6esn`,$_usn3 =~{_usn4} =~$`6esn`)..] As _usn3) Create (`4esn` :`4esn`:@usn6)"),
    octest_legacy:ct_string("Remove Extract(`2esn` In {999} Is Not Null Where {#usn7} In Count ( * ) In $#usn8|{usn1} =~123.654 =~\"d_str\").@usn5?,Case .e12[$#usn8..@usn6] When {12} =~0.e0 =~{_usn3} Then $7 In 1.0 In 1e1 End.`4esn`?"),
    octest_legacy:ct_string("Optional Match (:``{``:0x0 =~123.654 =~{999}})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}),Allshortestpaths((:@usn6{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]})) Using Scan `6esn`:`` Return *,(usn1 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})<-[`4esn`:#usn7|`2esn` *0X7..0Xa]-(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]}) Is Not Null,$_usn3[..$`2esn`][..\"d_str\"] Skip $999 In 999 Limit Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] Create Shortestpath((((`8esn` {_usn4:{usn1} In Count ( * )})<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:`5esn`:@usn5)<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})))),Shortestpath((@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0})) Union Load Csv From `3esn`[..{_usn4}][..{@usn5}] As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct 010 In $`5esn` In 0,{_usn3}[`3esn`..$#usn8] As `1esn` Order By $@usn5[usn2..][$0..] Ascending,.e12 Ends With 1000 Ends With 010 Descending Limit 0xabc[$_usn3..] Where 0.12 Ends With {1000} Ends With `6esn` Optional Match @usn6=((`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`5esn`:`5esn`]-(:usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})) Where {_usn3} Is Not Null Merge _usn4=Shortestpath(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) On Match Set usn2 =#usn7 Starts With $999,usn1+={@usn6}[True..{_usn3}] On Create Set @usn5+=$@usn6 Ends With 01 Ends With 999,`3esn` =0.e0 =~`1esn` =~`6esn` Union Return Distinct `7esn` Is Not Null Is Not Null As @usn5 Order By Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]] Asc,{@usn5}[..{12}][..0x0] Desc Skip $12 Starts With $`8esn` With  $@usn5 As @usn6,[{@usn5}[..@usn6],$7[{`1esn`}]] Is Null Is Null As `5esn`,All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2] As _usn4 Order By $usn1 In 0.12 In $`` Desc,Case When {@usn6} Contains 123.654 Contains 01 Then usn2 Ends With Count ( * ) Ends With $@usn6 End Is Not Null Is Not Null Desc Skip Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] Limit {`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} Where 0.e0[{999}][{`1esn`}] Load Csv From {@usn5}[..{_usn4}][..$@usn5] As `3esn` Fieldterminator 's_str' Union All Create Unique @usn5=Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))),Allshortestpaths(((`4esn` :_usn4{`2esn`:#usn7 =~00})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}))) Unwind {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) As usn2"),
    octest_legacy:ct_string("Create `5esn`=Shortestpath(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[:#usn7|`2esn`]-(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))) Merge Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))) Union All Load Csv From $`4esn` Starts With 9e12 As `3esn` Fieldterminator \"d_str\" Unwind @usn5[12.0][{1000}] As `8esn` Merge #usn8=Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) On Create Set [0X0123456789ABCDEF Contains $`1esn` Contains 1000].``! =1000[$7..$123456789] On Create Set Filter(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).``! =$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,exists($`5esn`[`4esn`][_usn3]).@usn5 =$7[{`1esn`}],`2esn`({1000}[1000][$usn1]).`8esn`! =_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..]"),
    octest_legacy:ct_string("With  *,$usn1 In 01234567 In .e1 Order By Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] Descending,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,{7}[$7..] Desc Skip \"d_str\"[{999}..] Limit @usn5[$12..\"d_str\"] Union All Return Distinct *,7[1000.._usn3][9e0..\"d_str\"],(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})-[`4esn`?:_usn4|:usn1 *999{_usn4:{7} Starts With $usn1 Starts With 1.0,#usn7:$1000[..12.0][..0e0]}]-(#usn7 :`2esn`)-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}) In {`3esn`:1e1 Contains usn2} Order By `4esn`({`2esn`} Starts With @usn6,{`2esn`}[..{@usn6}][..1.e1]) Ends With Any(`2esn` In {999} Is Not Null Where #usn8 =~{_usn3} =~``) Desc,None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] Descending,{_usn4} In {`6esn`} In `1esn` Descending Skip $usn1[False][999] Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `3esn`:#usn7(usn2) Create `7esn`=((`1esn` :#usn7))"),
    octest_legacy:ct_string("Optional Match Shortestpath(($`5esn`)-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})) With Distinct 0Xa[07..] Limit $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`] Where `4esn` Contains #usn8 Contains 7 Remove Case 0x0 =~123.654 =~{999} When $7 Is Null Then {`1esn`} =~{_usn4} When {`3esn`}[{`5esn`}] Then usn1 Contains $7 Contains $`` End.usn2,None(#usn7 In 123.654 Starts With $`` Where $999 In 999).`5esn`!,({_usn4:{usn1} =~123.654 =~\"d_str\"})-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}}).`8esn`? Union Create _usn3=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}) Load Csv From Extract(`` In {`1esn`} Starts With @usn6 Where $usn1[@usn6][#usn7]) Contains [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07] As `4esn`  Create (((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`)))"),
    octest_legacy:ct_string("Delete $#usn7[`2esn`][010],{`7esn`} Is Not Null Is Not Null Start usn1=Node:`8esn`('s_str') ,`5esn`=Rel:`6esn`(`3esn`={12})Where 0x0[$`8esn`.._usn3]"),
    octest_legacy:ct_string("Load Csv From $`1esn` =~$`1esn` =~{`6esn`} As `7esn`  Optional Match Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))) Using Join On #usn8,`5esn`,`1esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} As _usn3 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind {`4esn`}[$123456789..] As usn1 Union Merge ((:`1esn`{usn2:{`6esn`} Ends With 0e0 Ends With {``}})) Create Unique Shortestpath((`1esn` {_usn4:{1000} Ends With {`8esn`}})-[#usn8:#usn7|`2esn`]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})),(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]}) Create Unique Shortestpath((`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})),@usn6=((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-(#usn8 {#usn7:$1000 Is Not Null Is Not Null})) Union All With Distinct *,1.e1 Ends With 0 Ends With $usn1 As `` Order By 0.12[Count(*)..][$#usn7..] Descending,`3esn` =~`7esn` =~\"d_str\" Desc Limit {1000}[{#usn8}] Where 1.0[{999}][$999] Unwind $`4esn` In Null As `5esn`"),
    octest_legacy:ct_string("Create (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Match #usn7=Allshortestpaths(((:`5esn`:@usn5))),(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))) Where $`7esn` In 12 Union Foreach(_usn3 In (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]]| Create usn2=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})),(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}) Unwind [`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999) As #usn8) Remove Shortestpath((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})).#usn8? Merge `5esn`=(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})"),
    octest_legacy:ct_string("Return *,({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}) As `7esn` Order By {12} Contains 9e0 Descending,`5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] Descending Skip $`8esn`[0xabc][Null] Union Create `5esn`=Allshortestpaths(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]}))),`6esn`=Allshortestpaths((`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})) Load Csv From {`1esn`} Starts With `4esn` Starts With {0} As `1esn` Fieldterminator 's_str' Foreach(_usn3 In $#usn8 Is Null Is Null| Create `5esn`=((#usn7 :_usn3{`2esn`})<-[@usn6?:`1esn`|:`3esn` *..0Xa{`1esn`:12 Starts With 0x0}]->(#usn7 :_usn3{`2esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),Shortestpath((:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})) Create @usn6=(_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})) Union All Create Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))) Delete {1000} Ends With {`8esn`},$12[{7}..0X0123456789ABCDEF] Load Csv With Headers From False Ends With $`` As `6esn` "),
    octest_legacy:ct_string("Match ((_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),#usn7=(({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})) Merge Allshortestpaths((usn2 :`5esn`:@usn5)) On Match Set @usn6($@usn6 Contains `7esn`).@usn5! =$`5esn` Ends With 00 Ends With #usn7,Reduce(usn2=True[7][$999],`` In {`1esn`} Starts With @usn6|{`4esn`}[$_usn4..][9e0..]).`6esn` ={`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn` Union All Start usn1=Node:`8esn`('s_str') ,#usn7=Node:#usn7('s_str') Load Csv With Headers From Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) In [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 12 Starts With {_usn4} Starts With $#usn8] In Filter(`2esn` In {999} Is Not Null Where $7 Ends With 0X7) As _usn4 "),
    octest_legacy:ct_string("Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `7esn`:`1esn`(`2esn`) Using Scan `3esn`:`3esn` Create ``=Shortestpath(((@usn6 :`4esn`:@usn6{#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}))) Unwind $7 Ends With $`8esn` As `3esn` Union All Load Csv From .e12 Is Null Is Null As `5esn` "),
    octest_legacy:ct_string("With Distinct *,$#usn8 Is Null Is Null Order By $`6esn`[`8esn`][$`5esn`] Desc,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789) Is Not Null Ascending Skip 0X7 Is Null Unwind Single(usn1 In 12.e12 In {0} In 9e1 Where `4esn` Contains #usn8 Contains 7) Ends With [123.654[$`1esn`..Null][1000..{_usn3}],#usn8[`7esn`..],$@usn6 Starts With {`1esn`} Starts With 12] Ends With {`4esn`:{usn1} In Count ( * )} As `4esn` Foreach(_usn3 In ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]]| Unwind {999} Is Null As `6esn`) Union All Create Unique `8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Unwind #usn8 =~{usn1} =~00 As _usn4 Union All With Distinct *,{`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `8esn` Order By $999 Contains {7} Ascending,None(`6esn` In 00 Where 0.12[..$`6esn`][..$1000])[Case _usn4 Is Null Is Null When 07 Is Null Then False Contains $#usn8 Contains 9e1 End..`2esn`(Distinct #usn8[`7esn`..])][[_usn4 In 0.0[..{999}][..0.0] Where 12 Ends With 01|0.0 Is Not Null Is Not Null]..[Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null]] Desc Limit usn1 In 00 In {_usn3} Unwind 9e0[#usn8] As `2esn` Unwind $@usn5[usn2..][$0..] As @usn6"),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) Foreach(_usn3 In Reduce(`8esn`={`2esn`} Starts With @usn6,`3esn` In 123.654[1e1..][{#usn8}..]|0X0123456789ABCDEF[$999..][@usn5..]) Is Null Is Null| Return {`2esn`} In $123456789 In True As `7esn`,$7 Ends With $`8esn` As `4esn`,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Start #usn8=Relationship(0,0X7) ) Delete _usn3[$usn2..0] Union Unwind False Ends With $`` As _usn4 Create Allshortestpaths((({`7esn`:123.654 Ends With usn2 Ends With 0})<-[@usn6?:`7esn` *07{123456789}]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))) Return Distinct *,$_usn4[$`4esn`..$12],{`5esn`} Starts With 12.0 Order By @usn5 =~`` Asc Union With Distinct Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) =~Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) As _usn4,7[..$`1esn`][..00],{12} Starts With #usn8 Starts With 0e0 Order By $0 Starts With `2esn` Desc,0.12 In 0X7 Descending,12.e12 In $0 In $0 Desc Limit `6esn` In Null Where False Contains 0.e0 Contains Count(*) Create Unique usn2=(`4esn` {_usn4:12 Starts With {_usn4} Starts With $#usn8,_usn4:$@usn5[$`4esn`][$@usn6]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) With  `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By \"d_str\"[Count ( * )..`6esn`] Desc Skip 9e1 Ends With $@usn5 Ends With $123456789 Limit $`8esn`[0e0..] Where {999} Starts With {_usn4} Starts With 00"),
    octest_legacy:ct_string("Foreach(#usn8 In $``[.e12..]| With  1.e1 Is Null Skip $`2esn`[{``}..{1000}][#usn8..`2esn`] Limit $123456789[..$7][..$`6esn`] Match `5esn`=(:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[#usn8? *..01234567]-($_usn3),((@usn6 :@usn5{usn2:{`6esn`} Ends With 0e0 Ends With {``}})-[? *0x0..{`6esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]->(`1esn` {#usn8:$12 Contains 0Xa})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})) Using Join On #usn8,`5esn`,`1esn` Using Join On _usn4,@usn6)"),
    octest_legacy:ct_string("Start `8esn`=Node:`4esn`(\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str') Union All Unwind [`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]][[9e0 Starts With .e0 Starts With \"d_str\",`3esn`[..{_usn4}][..{@usn5}],1.e1 =~`2esn`]..Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `6esn` Ends With 2.12 Ends With @usn6)] As @usn6 Load Csv With Headers From $usn1 Contains {`8esn`} Contains $123456789 As @usn6 Fieldterminator \"d_str\" Start #usn7=Node:usn2({@usn5}) ,``=Node:``(@usn6='s_str')Where {0}[..{`7esn`}] Union All Foreach(`2esn` In Single(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..])[Extract(`1esn` In `3esn`[07..] Where {0} =~12.0|`8esn` Contains 1e1)][None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6])]| Match `5esn`=Shortestpath(((#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]}))),@usn6=((usn1 :`8esn`:@usn5{`1esn`:{#usn7} Contains 0.0 Contains $0,`2esn`:.e12[010..$123456789]})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})<-[?:usn2|#usn7]->(#usn8 :#usn7)) Using Index usn2:``(#usn8) Using Join On ``,usn1,usn2 Where @usn5 In 1e1 Match ``=(`` :``)-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3),Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})) Using Scan `6esn`:`` Using Scan `1esn`:_usn4) Unwind {usn1}[$`8esn`..0.0] As `` Load Csv From 0X0123456789ABCDEF[$`2esn`..][`2esn`..] As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv From {@usn5}[..{_usn4}][..$@usn5] As `3esn` Fieldterminator 's_str' Merge Allshortestpaths(((`4esn` :_usn4{`2esn`:#usn7 =~00})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}))) On Match Set `6esn`+=`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) In Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`}))) In All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]),All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12],`2esn`+=0.0 In `6esn` In $@usn5 On Create Set #usn7(Distinct 7[$0..][{_usn4}..],Count(*)[.e12..]).`2esn`! =$usn1 In 0.12 In $`` Foreach(_usn4 In 1e1[..`1esn`][..0e0]| Start #usn7=Rel( {_usn4}) ,`1esn`=Relationship:`6esn`({999})Where $`4esn` Starts With 0e0)"),
    octest_legacy:ct_string("Unwind (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) As _usn4"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((`` {``:0x0 =~123.654 =~{999}})-[{`2esn`:``[{123456789}..]}]->(#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]}))) Using Join On `5esn`,``,usn1 Where {@usn5}[Count(*)..] Foreach(`7esn` In 01 Starts With {999} Starts With $`2esn`| With  `8esn`(False Contains 0.e0 Contains Count(*)) Is Null Is Null Skip {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]]) With  *,None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `1esn` Order By None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Desc,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null) Is Null Is Null Descending Skip Single(_usn3 In True[7][$999]) Is Not Null Is Not Null Limit $1000[..12.0][..0e0] Union Remove {``:0.12[..$`6esn`][..$1000]}.`1esn`?,Extract(_usn3 In True[7][$999] Where $usn1[$123456789..0][{`1esn`}..12.0]).#usn7,Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})).usn1 With Distinct [1.e1[0X0123456789ABCDEF..],Null In .e0][`8esn`(Distinct {#usn8}[$#usn7..],`3esn`[$@usn5..@usn5][9e1..$``])..][Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where $0[$1000..00][{0}..{usn1}])..] As #usn7,`8esn` Contains $`3esn` Contains {`4esn`},`1esn`[$123456789..] Order By Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 9e1[9e1...e0]) Is Not Null Asc,{`3esn`} Ends With `1esn` Ends With $@usn6 Descending Skip `8esn`[..`4esn`][..$usn1] Where $@usn6[$`8esn`..][7..] Load Csv With Headers From ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]] As usn1 Fieldterminator 's_str' Union All With Distinct 1e1[{_usn4}..123.654],{_usn4}[...e12][..0xabc] As `3esn`,.e1[..{`7esn`}][..{_usn3}] As `5esn` Order By Case {`1esn`} Is Not Null When 9e12 =~123456789 =~$999 Then 999[12.0..][#usn7..] When `4esn` Contains #usn8 Contains 7 Then `2esn` Starts With `` Starts With 1e1 Else Count(*) Ends With $`` Ends With {7} End In Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) In Reduce(``=12 Starts With $#usn7,`6esn` In 00|False Contains $#usn8 Contains 9e1) Asc,$`2esn` Descending,`1esn`[$123456789..] Desc Limit $0 Starts With `2esn` Where #usn8 =~{_usn3} =~``"),
    octest_legacy:ct_string("Create Unique `6esn`=((`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`5esn`:`5esn`]-(:usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})) Union All Optional Match ((`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})-[?:`1esn`|:`3esn` *999{usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]}]->(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})),Allshortestpaths((:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})<-[:``]-(`2esn` :`5esn`:@usn5{_usn4:{`2esn`} Is Not Null Is Not Null,usn2:{`4esn`} In _usn4})) Using Scan `2esn`:@usn6 Create Unique `8esn`=((:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *..00{#usn7:`4esn`[usn1]}]-(:@usn5{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})),_usn4=(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))) Remove Reduce(usn1=0.e0[{999}][{`1esn`}],`` In {`1esn`} Starts With @usn6|{`3esn`} Ends With `1esn` Ends With $@usn6)._usn3! Union All Unwind $`2esn`[{usn1}..] As _usn4 Delete 9e12 In 1e1 In .e12,`3esn`[_usn4..{0}][`5esn`..usn2]"),
    octest_legacy:ct_string("Create Unique (((#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[`2esn`?{`3esn`:$7 In 1.0 In 1e1,@usn5:{@usn6} Contains 123.654 Contains 01}]->(:`1esn`{_usn4:{`6esn`} Ends With 0e0 Ends With {``}})-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null}))) Start ``=Relationship:`8esn`({#usn8}) ,@usn5=Relationship:usn1({7})Where 12.e12 In {0} In 9e1 Union All Merge @usn5=Shortestpath(({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) On Match Set Extract(`2esn` In {999} Is Not Null Where {1000}[1000][$usn1]|{7} Is Null).`3esn`! =$#usn7[123.654],`1esn` =9e12 Is Null,@usn5+=0Xa[07..] Merge ``=((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 )) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] On Match Set Allshortestpaths((`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})-[:`3esn`|:@usn5]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})-[`2esn`?$_usn4]->({_usn4:0.12 Starts With 9e12 Starts With $`1esn`})).``! =``[{#usn8}..9e0][12.e12..0xabc]"),
    octest_legacy:ct_string("Detach Delete {usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}[Reduce(`1esn`={usn1} In Count ( * ),`` In {usn1} Ends With {`6esn`} Ends With 123456789|0[{usn2}..][usn1..])][[`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|{``} Starts With 123456789 Starts With usn2]],{999} Starts With {_usn4} Starts With 00,{`5esn`:2.12 =~0x0 =~_usn4,`3esn`:$@usn6 Contains `7esn`}[..(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})<-[`7esn`?:`7esn` *..7{`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})][..Any(_usn3 In {`2esn`} Ends With {12} Ends With 7)] With  Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}),@usn6 Contains Null As `2esn`,00 =~0.e0 =~$`8esn` Order By `5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] Ascending,#usn7[9e0] Asc,{`5esn`} Starts With 12.0 Desc Limit {@usn5}[Count(*)..] Detach Delete `` Is Null Is Null,07 =~@usn5"),
    octest_legacy:ct_string("Create Unique (#usn8 :#usn8) Union All Return Distinct *,[`1esn` In `3esn`[07..] Where @usn6[{0}..]|0.e0[12.e12]] Contains {usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF} As @usn6 Limit Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} Remove Shortestpath(({`4esn`:12 Starts With {_usn4} Starts With $#usn8})<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})).`6esn`,Case `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] When 1.e1[..12.e12][..$usn2] Then $_usn3[{999}] When $7 Is Null Then `1esn` =~1000 =~1000 Else 9e12[$`5esn`] End.`3esn`? Load Csv With Headers From @usn6 Contains Null As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(`1esn` In {@usn5}[..@usn6]| Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))) Using Join On _usn3 Using Scan `6esn`:``) Union All Load Csv With Headers From Extract(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..]|0Xa Contains {`7esn`} Contains $999)[..None(`1esn` In $12 Is Not Null Where $`2esn`[{``}..{1000}][#usn8..`2esn`])] As usn1  Merge `3esn`=((`3esn` :`6esn`:`8esn`))"),
    octest_legacy:ct_string("Detach Delete $`2esn`[$usn2..][{``}..] Start `5esn`=Relationship:@usn6(_usn4={_usn4}) ,#usn8=Relationship( {`4esn`})Where {@usn6}[$`7esn`..][False..] Union Load Csv With Headers From $`1esn`[07..][9e12..] As `` Fieldterminator 's_str' Create `2esn`=Allshortestpaths(((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({#usn7:123456789[0..]}))) Return *,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null,{999}[9e1] As usn1 Order By {123456789} =~{@usn6} Desc,Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..] Desc,{`5esn`} Ends With \"d_str\" Desc Limit _usn4 =~0e0 Union Start `6esn`=Relationship:usn2({`5esn`}) Where #usn8 In `8esn` In 07 Delete Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12]) Is Null,Count ( * )[9e1..{@usn5}],{`3esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Allshortestpaths(((`2esn` :@usn6)<-[:#usn7|`2esn`]->(`1esn` :`6esn`:`8esn`{usn2:Count ( * )[..12][..{@usn6}]}))),#usn8=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[?:`6esn` *01..07]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[:`1esn`|:`3esn` *1000]-($12) Start _usn3=Relationship:usn1('s_str') ,usn2=Node:usn1(#usn8='s_str')Where 0e0[..$@usn5][..$`8esn`]"),
    octest_legacy:ct_string("Using Periodic Commit 0X0123456789ABCDEF Load Csv With Headers From $usn1 Contains {`8esn`} Contains $123456789 As @usn6 Fieldterminator \"d_str\" Create usn1=(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))"),
    octest_legacy:ct_string("Unwind $7 Is Not Null As `4esn`"),
    octest_legacy:ct_string("Return Distinct {`5esn`}['s_str'..] As ``,{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]} =~(`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})-[ *..0{`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}]->(:usn1:_usn4{`4esn`:01234567 In $123456789}) =~01 As `3esn`,{#usn7}[{`4esn`}..][0X7..] As @usn6 Order By 1.0 Ends With 1000 Descending,Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))) Asc Skip Reduce(#usn7={`1esn`} Starts With `4esn` Starts With {0},`3esn` In 123.654[1e1..][{#usn8}..]|9e12[$`5esn`]) Match @usn5=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]})"),
    octest_legacy:ct_string("Return Distinct {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}[..None(`1esn` In `3esn`[07..] Where 0X0123456789ABCDEF[`5esn`..][$#usn8..])] Order By {usn2} Descending Skip $usn1 In 01234567 In .e1 Limit Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null)[[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]..] Return Distinct *,`3esn` Ends With .e0 Ends With $`7esn` As @usn5,(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Order By 0.12 In 0X7 Descending Skip @usn6[$12] Limit $999 Ends With $`2esn` Create `1esn`=(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}),Shortestpath((({_usn4:False[0Xa..$usn1]}))) Union All Unwind Null[010..][{``}..] As `3esn` Remove Case #usn8[`7esn`..] When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then {0}[False..@usn5] End.usn1,None(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12).`8esn`,({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Remove Extract(_usn4 In `2esn` Where 123.654 Starts With $``).usn2 Union All Start @usn5=Node:usn1(@usn5={12})  With Distinct Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,0.12 Starts With 9e12 Starts With $`1esn`,$`2esn` Ends With 0.12 Ends With .e1 Order By Filter(usn1 In 12.e12 In {0} In 9e1 Where 123.654[$`1esn`..Null][1000..{_usn3}]) Is Null Is Null Asc,$@usn6 Ends With 01 Ends With 999 Asc Where 9e0 =~0.0 =~$`5esn`"),
    octest_legacy:ct_string("With  *,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Order By `6esn` Is Null Is Null Desc Detach Delete 9e12 =~123456789 =~$999 Union Create Unique Allshortestpaths(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[usn1?:usn2|#usn7 *01..07]-(@usn6 {`5esn`:\"d_str\" =~`1esn` =~{`5esn`}})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]}))),usn1=(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))) Start `6esn`=Relationship:`1esn`({@usn5}) Where 12 Is Not Null Is Not Null Return Distinct *,0x0 Is Not Null Is Not Null Order By {7} Contains $123456789 Ascending Skip [`` In {`1esn`} Starts With @usn6 Where $123456789 Starts With $123456789 Starts With Count ( * )|{#usn8}[usn1][1.0]][Shortestpath((@usn6 {usn1:$#usn7 =~{12} =~False})-[`1esn`?:_usn3|`8esn` *0xabc..7]-(`4esn` :@usn6))..] Limit #usn8['s_str'..][123.654..] Union All Remove None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]).`2esn`,{`5esn`:usn2 =~0X7 =~{#usn7}}.`3esn`? With Distinct {@usn5} Is Null,``[$0..][`1esn`..] As `4esn` Order By 0Xa[07..] Ascending Limit 's_str'[.._usn4][..``] Create Unique (((`4esn` :@usn6)<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)-[ *0x0..{@usn6:'s_str'[_usn4..0x0],`4esn`:_usn4 In $usn1}]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}))),usn2=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})"),
    octest_legacy:ct_string("Start #usn7=Node:usn2({@usn5}) Where \"d_str\" Contains @usn6 Contains 12.e12 Create @usn6=(_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]}) With Distinct *,$`3esn`[..$`2esn`][..123.654] Where {`5esn`} Contains 's_str' Contains 9e1 Union Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7])[..{@usn5:_usn4[Count(*)],`6esn`:$`3esn` Contains 0 Contains 07}][..Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])] As `6esn`  Create usn1=(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))),((`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})) Union All Foreach(usn2 In [123456789[0..]] Ends With Any(`1esn` In $12 Is Not Null) Ends With @usn5(Distinct 1.e1[{#usn8}],123.654 Ends With usn2 Ends With 0)| With  `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By \"d_str\"[Count ( * )..`6esn`] Desc Skip 9e1 Ends With $@usn5 Ends With $123456789 Limit $`8esn`[0e0..] Where {999} Starts With {_usn4} Starts With 00 Return $1000[\"d_str\"..$999][$`3esn`..{`3esn`}] As `6esn` Skip `8esn` Limit 9e1[9e1...e0]) Load Csv From [{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] As #usn7 "),
    octest_legacy:ct_string("Detach Delete usn2[999..],$7 Ends With 0X7 Start usn1=Node:_usn3(_usn3='s_str') ,`3esn`=Node:``(_usn3={0}) Union Foreach(`6esn` In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null| Create Unique @usn6=((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[``?:#usn8|`2esn`]->(:`8esn`:@usn5)<-[#usn7]-(`3esn` :#usn7)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Delete Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null),[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]] Is Not Null,Single(_usn3 In True[7][$999]) Is Not Null Is Not Null) Merge ((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})) On Match Set Reduce(#usn8=Count ( * )[..12][..{@usn6}],`` In {`1esn`} Starts With @usn6|@usn6[{0}..]).@usn5 =$#usn7 =~{12} =~False On Match Set [`6esn` In 00 Where $`1esn`[$12][Count ( * )]].`5esn`? =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,_usn4 =Reduce(@usn5=True[7][$999],usn1 In 12.e12 In {0} In 9e1|.e12 =~$_usn4)[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])][[`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]]] Union Merge Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("Foreach(`4esn` In Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]})| Create @usn5=(`4esn` :#usn7)<-[@usn6?:usn2|#usn7]->(`1esn` )-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}),(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]->({_usn4})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`) Remove [`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000|0xabc[$@usn5]].usn1,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000|\"d_str\"[{`8esn`}..])._usn3) Foreach(_usn4 In 999 Ends With {`2esn`}| With Distinct $`6esn` Starts With 12.e12 Starts With $#usn7 As @usn6 Skip 07 =~$`8esn` =~9e1)"),
    octest_legacy:ct_string("Optional Match ``=Allshortestpaths((((:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(usn2 :`4esn`:@usn6)-[`8esn`?:``]->(`` {`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]})))) Where `6esn`[..{999}] Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(usn1 In Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null| Delete `3esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],1000 Is Not Null) In {`1esn`:@usn6[$usn2..#usn7]},[`6esn` In 00 Where 0.12 In 0X7|{999} Is Null] Is Null) Match @usn5=Allshortestpaths(((:`2esn`))),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Using Join On ``,@usn5 Where `7esn` Contains {@usn5} Contains $123456789 Merge (#usn8 :`8esn`:@usn5) On Create Set Single(_usn4 In `2esn` Where 9e12 Is Not Null Is Not Null).@usn5 =Allshortestpaths(((`6esn` :`8esn`:@usn5)<-[`2esn`?:#usn7|`2esn` *..01234567{``:{usn1} Ends With {`6esn`} Ends With 123456789,`5esn`:{999} Is Null}]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})))[{`2esn`:`5esn` Is Null Is Null}] Union All With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Skip Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) Limit 0.e0 Ends With False Where Null[{_usn4}..] Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\" Union Start _usn4=Node:`1esn`({@usn5}) ,#usn7=Relationship:#usn7(`7esn`={usn2}) Foreach(`` In [$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]]| Optional Match ``=Allshortestpaths((((:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(usn2 :`4esn`:@usn6)-[`8esn`?:``]->(`` {`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]})))) Where `6esn`[..{999}] With  12.0[010],{@usn5} Is Null Order By `3esn`[$@usn5..@usn5][9e1..$``] Desc,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] Descending,.e1 =~$`5esn` Desc Skip Count ( * ) Contains 12 Limit Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1))"),
    octest_legacy:ct_string("Create Unique @usn5=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Union Foreach(`2esn` In None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)]| Create Unique @usn6=((`4esn` :usn2:`2esn`)) Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As @usn6 Fieldterminator 's_str') Unwind All(_usn4 In 0.0[..{999}][..0.0] Where 12 Ends With 01)[Allshortestpaths((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}))..] As @usn5 With  {`5esn`:2.12 =~0x0 =~_usn4,`3esn`:$@usn6 Contains `7esn`}[..(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})<-[`7esn`?:`7esn` *..7{`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})][..Any(_usn3 In {`2esn`} Ends With {12} Ends With 7)] As #usn8,{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} As #usn8 Limit All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..] Union Remove Single(`1esn` In $12 Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]).#usn7,Single(_usn4 In `2esn` Where False Ends With $``).`1esn`!"),
    octest_legacy:ct_string("Foreach(@usn6 In {`3esn`} =~[1.e1 =~$usn2] =~Filter(`6esn` In 00 Where `5esn`[..9e0][..01234567])| Delete {`8esn`} =~#usn8 =~$`3esn`,0Xa Contains {`7esn`} Contains $999,\"d_str\"[Count ( * )..`6esn`] Delete Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]],{@usn5} Is Null)"),
    octest_legacy:ct_string("Merge `2esn`=((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})) On Create Set _usn4:usn1:_usn4,`7esn` =#usn7[00],``:@usn6 On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] Create #usn7=Allshortestpaths(((:`5esn`:@usn5))),(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))) Union Start @usn5=Relationship:#usn7({`4esn`}) ,@usn5=Node:`7esn`(@usn5=\"d_str\") Union All Create Unique `2esn`=(@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]}),Allshortestpaths(((:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})<-[`8esn`?:`4esn`|:#usn7]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]})-[usn2 *07{usn1:07 =~@usn5}]->({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))) Load Csv With Headers From {usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]} Is Null Is Null As usn1  Create Unique #usn8=((:`8esn`:@usn5{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})),`5esn`=(((_usn4 :#usn8)-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})))"),
    octest_legacy:ct_string("Load Csv From `5esn` Is Not Null Is Not Null As usn1  Union Create Unique `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})),usn1=(({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[`5esn` *0x0..]->(`8esn` :#usn7)) Return Distinct $`2esn`[{usn2}] Limit Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) With Distinct @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn5,$`` =~{``} =~0.e0 Skip Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}) Where {_usn3} Contains True Contains 0X7"),
    octest_legacy:ct_string("Create Unique usn2=((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[ *0X7..0Xa]->(@usn6 :`2esn`)<-[`2esn`?:@usn6|`` *..00]->({_usn3})),`8esn`=Allshortestpaths((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Start @usn5=Node:``(#usn7=\"d_str\") Where {`8esn`}[..$`6esn`][..123.654] Create (((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))"),
    octest_legacy:ct_string("Match #usn7=(:``{``:0x0 =~123.654 =~{999}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}),#usn8=Allshortestpaths((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`})) Using Index #usn7:`8esn`(@usn6) Using Index usn2:``(#usn8) Unwind $_usn4[$`4esn`..$12] As _usn3 Return Distinct Filter(`1esn` In $12 Is Not Null Where Count(*)[..``][..#usn8]) Ends With Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}]) Ends With {`2esn`:usn1 Is Null Is Null,usn2:0.e0 =~`1esn` =~`6esn`} As usn2,$999 Is Not Null Is Not Null As `3esn` Skip _usn4 Is Not Null Is Not Null Union All Create Unique (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))),#usn8=(((usn2 )<-[ *0xabc..7]->(:`4esn`:@usn6)<-[usn2?:usn2|#usn7]->(`3esn` :_usn4))) Load Csv With Headers From [{`3esn`} Is Null,{@usn5} =~_usn4 =~0.12] =~Extract(_usn4 In `2esn` Where 1.0[{999}][$999]) As `2esn` Fieldterminator 's_str' Unwind $usn2 As `5esn`"),
    octest_legacy:ct_string("Detach Delete {`2esn`}[12..][{_usn3}..],07 =~@usn5,`6esn` Is Not Null Is Not Null Unwind 12e12 Is Not Null Is Not Null As `6esn` Union Merge `2esn`=Shortestpath((((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`)))) Union Unwind (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) As #usn8 Create Unique _usn3=((`5esn` :`3esn`:`6esn`))"),
    octest_legacy:ct_string("Detach Delete 2.12 =~_usn3 =~0.e0 Foreach(#usn8 In 0 Contains $usn2 Contains 12e12| Create ``=(((:`5esn`:@usn5)-[:`7esn`]-(:usn1:_usn4)-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`}))),usn1=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))) Union All Unwind {7} Starts With $usn1 Starts With 1.0 As #usn7"),
    octest_legacy:ct_string("Start `2esn`=Node:`8esn`(`6esn`='s_str') ,`3esn`=Node:`4esn`({#usn8})"),
    octest_legacy:ct_string("Using Periodic Commit 123456789 Load Csv From 12.e12[`7esn`] As `5esn` Fieldterminator \"d_str\" Create @usn5=Shortestpath(({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})),`7esn`=((usn1 )<-[`7esn`]->(@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})<-[{`2esn`:``[{123456789}..]}]->(@usn6 :`6esn`:`8esn`)) Unwind Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) As #usn8"),
    octest_legacy:ct_string("Foreach(`6esn` In #usn8 Is Not Null| Load Csv From 12.e12[$`4esn`..] As usn1 ) Load Csv With Headers From [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 2.12 In $`8esn` In {`7esn`}|12e12 Starts With `1esn` Starts With usn2] Contains Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8]) Contains #usn7({`7esn`}[9e1..][@usn6..],{usn2}[$`4esn`]) As _usn4  Load Csv With Headers From `2esn` As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Return {`8esn`}[@usn5..][01..] Optional Match _usn3=Allshortestpaths(((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-(`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null}))) Using Index `3esn`:#usn8(`2esn`) Using Scan usn1:usn2 Where $@usn6[01..@usn5][0x0..`4esn`] Union Foreach(`4esn` In Case True[$123456789][`8esn`] When 12.e12[{@usn5}..][9e1..] Then 12.e12[`7esn`] Else {`2esn`}[Count(*)] End Ends With (`` :`7esn`)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) Ends With None(`1esn` In `3esn`[07..])| With  {#usn8} Is Null Is Null As `1esn`,$7 In @usn5 In {@usn5},`1esn`[Null..] As `2esn` Order By ({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})<-[`5esn`?:`7esn`]->(:@usn5)<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-({usn2:`1esn` In 07}) =~Reduce(@usn6=`3esn` =~9e0 =~@usn6,_usn3 In True[7][$999]|$`8esn`[..$999][..0]) =~{@usn5:12 Is Not Null,`2esn`:$999 In 999} Descending,{`4esn`}[..07][..$`6esn`] Ascending Limit (`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({#usn7:#usn8 =~{999}}) In Shortestpath(((:`1esn`)<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[`7esn`? *123456789..0X7{`6esn`:{0}[..{`7esn`}]}]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))) Delete 0X0123456789ABCDEF[`5esn`..][$#usn8..],`3esn` Is Not Null Is Not Null,0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Create Unique usn2=Allshortestpaths((#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})),((`6esn` {#usn8:$123456789[..$7][..$`6esn`],usn1:$7 In 1.0 In 1e1})) Create Unique `5esn`=Shortestpath(((@usn6 :usn1:_usn4)-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)<-[``?:`4esn`|:#usn7{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}]->({`1esn`:$123456789[..$7][..$`6esn`]})))"),
    octest_legacy:ct_string("Unwind count(Distinct 999[12.0..][#usn7..]) =~Allshortestpaths(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) =~@usn6(`8esn` Starts With {123456789},$`` Starts With 12 Starts With $usn2) As `2esn` Create (`` {``:0x0 =~123.654 =~{999}}) Remove {usn1:usn2 =~0X7 =~{#usn7}}.usn1?,@usn5:@usn6 Union Unwind 0xabc[9e12][0X0123456789ABCDEF] As _usn3 Remove Single(`2esn` In {999} Is Not Null Where $usn1[@usn6][#usn7]).#usn8? Remove ({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Union All With  $@usn6 Ends With 01 Ends With 999 Skip {_usn3} Contains 9e0 Contains $999 Limit Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Where 12.e12[`7esn`] Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))) Using Join On _usn3 Using Scan `6esn`:`` Match (#usn7 :#usn8)-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),@usn6=Allshortestpaths(((`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[`6esn`:`8esn`|:_usn4]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}))) Using Index `6esn`:usn2(@usn5)"),
    octest_legacy:ct_string("With  {`8esn`}[@usn5..][01..] Where _usn4 Is Not Null Is Not Null Union Unwind @usn5[$12..\"d_str\"] As `6esn`"),
    octest_legacy:ct_string("Start _usn4=Node:`4esn`(`2esn`={``}) Where False Starts With 010 Create Unique `6esn`=((({`1esn`:$123456789[..$7][..$`6esn`]})<-[:`2esn` *1000{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]-(#usn8 :`8esn`:@usn5)-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}))),(((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})))"),
    octest_legacy:ct_string("Unwind 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF As _usn3 With  Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,0.12 Starts With 9e12 Starts With $`1esn`,$`2esn` Ends With 0.12 Ends With .e1 Order By Filter(usn1 In 12.e12 In {0} In 9e1 Where 123.654[$`1esn`..Null][1000..{_usn3}]) Is Null Is Null Asc,$@usn6 Ends With 01 Ends With 999 Asc"),
    octest_legacy:ct_string("With Distinct 9e12[..0X7] As _usn3,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null As usn2 Limit Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(_usn3 In True[7][$999] Where {usn2})][Any(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)] Where $@usn5[..usn2][..$#usn7] Match `1esn`=((`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})-[:`1esn`|:`3esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->({`2esn`:#usn8 Is Null,`6esn`:123456789 Ends With usn1 Ends With usn2})<-[#usn8? *0X7..0Xa$`2esn`]-({`7esn`:123456789[0..]})),usn1=Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})) Using Index @usn6:#usn8(_usn4) Using Join On _usn3,`` Where $`1esn`[#usn8][$@usn5] Unwind 0X0123456789ABCDEF[`5esn`..][$#usn8..] As _usn4 Union Remove Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null).`1esn`!,(`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0})-[`3esn`?:#usn7|`2esn`]->(usn1 :`6esn`:`8esn`).#usn7 Return Reduce(`4esn`=$0[$1000..00][{0}..{usn1}],@usn5 In Null =~12e12|_usn4 Is Null) Is Not Null Is Not Null Limit $_usn4[9e0..] Return Distinct *,$#usn7 =~{12} =~False Order By [`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`) Ascending,9e12[..0X7] Descending Skip Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} Union All Create ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})) Match Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})) Using Scan _usn3:`4esn` Using Scan `2esn`:`1esn` Where $123456789 Starts With $123456789 Starts With Count ( * ) Load Csv With Headers From 12[12e12] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create `6esn`=Shortestpath(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}))),`4esn`=Shortestpath((`8esn` :`7esn`)<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})) Start #usn7=Rel( {_usn4}) "),
    octest_legacy:ct_string("Detach Delete 0xabc[$999..][{#usn7}..],$12 Contains 0Xa,.e0[0.e0..][{0}..] Union Load Csv From $12 Is Not Null As @usn6  With  *,0.e0 Contains #usn7 Order By $_usn4[9e0..] Asc,12 In 999 Descending Limit {`2esn`} Starts With @usn6 Load Csv With Headers From 0Xa In {`7esn`} As usn1 Fieldterminator \"d_str\" Union Create Unique (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})-[:#usn7|`2esn` *01..07]->(`1esn` {#usn7:Count ( * )[$12..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})),usn2=Allshortestpaths(({`5esn`:0Xa[0e0..{#usn7}]})<-[@usn5? *07{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})) Unwind usn2[999..] As `1esn` Create `4esn`=Shortestpath((((`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})))),Allshortestpaths((@usn6 :`7esn`{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12})-[_usn3?:``]-(@usn5 {_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000}))"),
    octest_legacy:ct_string("Create `2esn`=Allshortestpaths(((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({#usn7:123456789[0..]}))) Union Load Csv From 999 Ends With {`2esn`} As `1esn`  Union All Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12].`2esn`,[usn1 Contains $7 Contains $``,$@usn5 In 's_str' In $12,$`1esn` Is Not Null Is Not Null].usn2!,All(`1esn` In `3esn`[07..] Where 999 Starts With 's_str').#usn8! Remove Extract(`` In {`1esn`} Starts With @usn6 Where Null[{_usn4}..]|0Xa Contains {`7esn`} Contains $999).`5esn`!,All(`5esn` In $`2esn`[12.e12][$@usn5] Where {999} Starts With {12}).`2esn`,Reduce(`3esn`={7} Starts With $usn1 Starts With 1.0,_usn3 In True[7][$999]|123.654[{@usn5}..123.654][1.0..$12]).#usn8 Foreach(`` In {123456789} =~01234567 =~`3esn`| With  (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] Order By `1esn`[..00][..{7}] Ascending,`6esn` In Null Descending,{`3esn`} Is Null Descending Skip Case When .e1[@usn5]['s_str'] Then 123456789 Starts With {@usn6} Starts With $12 End Contains [`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`] Contains {@usn5:12 Is Not Null,`2esn`:$999 In 999} Where $``[..1.e1][..12] Start @usn5=Node:``(#usn7=\"d_str\") ,#usn8=Relationship:`4esn`(``='s_str')Where $``[..1.e1][..12])"),
    octest_legacy:ct_string("Start usn1=Rel(12,1000,1000,0X7)  Union Foreach(usn1 In 9e1[$_usn4..0xabc]| Create Unique `1esn`=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}),Allshortestpaths((((:#usn7{#usn7:$`8esn` In $`2esn` In {7}})-[`7esn`? *..0{`2esn`:07 =~$`8esn` =~9e1,``:`5esn`[0xabc..]}]->({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7})-[? *01..07]->(`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7}))))) Start ``=Relationship( {usn1}) Where {@usn6} In {#usn7} In 12.e12 Union Start _usn4=Rel:`2esn`({_usn3}) "),
    octest_legacy:ct_string("With  {_usn3}[`3esn`..$#usn8] As `1esn`,12 Starts With 7 Starts With $`5esn`,$#usn7 Contains True Contains _usn4 As `4esn` Skip $@usn6[..123.654] Start `3esn`=Rel:#usn8(\"d_str\") ,`3esn`=Node:`2esn`(@usn6={`4esn`}) Foreach(@usn5 In {`1esn`}[`6esn`..12e12]| Delete 123456789 Starts With {999},{_usn4}[{``}..],{``}[_usn4..$`1esn`]) Union All Merge `2esn`=(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]}) On Create Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) With Distinct *,01234567[..9e1] Where $7 Is Null Is Null Load Csv With Headers From $@usn6 Ends With 01 Ends With 999 As `` Fieldterminator 's_str' Union All Unwind $`7esn` Is Null Is Null As `8esn` Remove Case @usn5[..$@usn5][..0Xa] When $@usn6 Starts With {`1esn`} Starts With 12 Then $1000[..12.0][..0e0] Else 's_str'[..0X7] End.`8esn` Create Unique Shortestpath((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]}))"),
    octest_legacy:ct_string("With Distinct *,All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Skip [`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]]"),
    octest_legacy:ct_string("Merge `3esn`=({`3esn`:9e1 =~999})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]}) Merge (_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]}) On Match Set ``+=[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1|{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]] =~Extract(`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]|$usn1 In 0.12 In $``) =~Single(_usn3 In {@usn5}[..#usn7] Where {`4esn`}[..07][..$`6esn`]),Allshortestpaths(((:usn1:_usn4)-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`))).usn2? =1.e1[`4esn`..][$`6esn`..] On Match Set `5esn` =@usn5 In 1e1"),
    octest_legacy:ct_string("Start #usn7=Node(999)  Remove {usn1:0e0[0X0123456789ABCDEF..010][$@usn6..010]}.`1esn`?,@usn6:`2esn`,[9e1[9e1...e0]].#usn7? Merge @usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Union All Detach Delete `2esn`[Null] With Distinct *,Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null As usn2 Skip {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] Limit 0Xa[.._usn3][..$`6esn`] Where 12 Starts With 7 Starts With $`5esn` Union All Foreach(`5esn` In Extract(_usn4 In `2esn` Where 1.0[{999}][$999]|$`8esn` In $`2esn` In {7})[[{`8esn`}[0X7][$`3esn`]]][(`5esn` :`3esn`:`6esn`)-[`8esn`?:`4esn`|:#usn7{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})]| Create (`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`),(((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})))) Return *,Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `7esn` Starts With 0X7 Starts With $`7esn`) Is Not Null As `2esn` Order By Null[010..][{``}..] Desc,`3esn`[_usn4..{0}][`5esn`..usn2] Desc,{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] Ascending Skip Null =~12e12"),
    octest_legacy:ct_string("Using Periodic Commit 0 Load Csv From {_usn3} Starts With $12 Starts With {`8esn`} As usn2  Create Unique _usn3=((`5esn` :`3esn`:`6esn`))"),
    octest_legacy:ct_string("Remove [0X0123456789ABCDEF[$`5esn`..],$999 Is Null,{`4esn`}[{`4esn`}..999]].`2esn`!,Any(@usn5 In Null =~12e12 Where $``[..1.e1][..12]).`2esn`?,[{`4esn`}[$_usn4..][9e0..],{@usn5} =~_usn4 =~0.12,`7esn` Ends With $_usn3 Ends With usn2].usn2?"),
    octest_legacy:ct_string("Create (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})) Return Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 9e12 Is Not Null) =~Case When False[0Xa..$usn1] Then {123456789}[12..][$12..] Else 0e0 Contains 9e12 End As usn2,{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}[Shortestpath(((({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[`7esn`?:_usn3|`8esn`*..]->(:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5))))..] As `6esn` Order By {#usn7}[{#usn7}..][$`4esn`..] Ascending,{`4esn`}[..07][..$`6esn`] Ascending Limit 12 Starts With 7 Starts With $`5esn` With Distinct 's_str' Starts With 12e12 Starts With $_usn4 As `6esn` Limit 0e0[$#usn8...e12] Where {usn2} =~@usn6 =~{`4esn`} Union All Return Distinct *,Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null As usn2 Skip {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] Limit 0Xa[.._usn3][..$`6esn`] Union Create Unique #usn7=Allshortestpaths((({`7esn`:123456789[0..]})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]->(:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000}))) Return *,Reduce(`5esn`=#usn7 Starts With $999,`3esn` In 123.654[1e1..][{#usn8}..]|12 Is Not Null Is Not Null) =~{@usn6:`8esn` Contains 1e1} =~(_usn4 :`5esn`:@usn5)<-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})<-[#usn8?{`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00}),$12 Is Not Null As `6esn` Skip (`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3}) Is Null"),
    octest_legacy:ct_string("Match Shortestpath((`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})),@usn6=((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-(#usn8 {#usn7:$1000 Is Not Null Is Not Null})) Using Join On `2esn`,`2esn`,_usn4 Using Join On `5esn`,``,usn1 Where _usn3 Contains .e0 Contains {usn2} Remove Filter(`` In {`1esn`} Starts With @usn6 Where 12 Starts With 7 Starts With $`5esn`).``,Single(`1esn` In $12 Is Not Null Where {usn1} In Count ( * )).usn2?,Shortestpath((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})).#usn8? Union All Return Distinct $`8esn`[..0x0][..``] As `3esn` Order By All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Desc Skip Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}] Create `3esn`=Allshortestpaths(((_usn3 {usn2:_usn3[$usn2..0]}))) Remove `8esn`(9e1 =~999,{``} Is Null Is Null).`3esn`!"),
    octest_legacy:ct_string("Optional Match `3esn`=((_usn4 :#usn8{`5esn`})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5)-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]})) Using Scan `3esn`:`3esn` Return {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn` Load Csv From `` Ends With $`4esn` Ends With 0X0123456789ABCDEF As usn2 "),
    octest_legacy:ct_string("Create Unique #usn8=(`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`),``=((`8esn` :@usn6)-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-({`7esn`:{usn1}[$`8esn`..0.0]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})) Union All Create Unique ``=Shortestpath(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Unwind (:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})<-[`4esn`:@usn6|``{_usn4:Count ( * ) Starts With 010 Starts With 0x0,`2esn`:1.0 In 9e1 In {`7esn`}}]->(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})-[? *0X0123456789ABCDEF]-(_usn3 :`5esn`:@usn5)[Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01])..] As `5esn` Load Csv With Headers From {#usn7} Is Null Is Null As `` Fieldterminator 's_str' Union All Merge Allshortestpaths((#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})) On Match Set #usn8 =$`1esn` =~$`1esn` =~{`6esn`},`2esn` =@usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2),`6esn` =`6esn` In Null On Create Set _usn4 =Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) In [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 12 Starts With {_usn4} Starts With $#usn8] In Filter(`2esn` In {999} Is Not Null Where $7 Ends With 0X7),#usn8 =0Xa[@usn5][{`7esn`}] Create Unique Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})),Shortestpath((((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null})<-[#usn8?:``]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})))) Remove [{usn1} Ends With {`6esn`} Ends With 123456789,$usn1[@usn6][#usn7]].`2esn`!,Reduce(`4esn`=$1000 Starts With $`8esn` Starts With {`5esn`},`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`8esn`}[True..][.e1..]).`3esn`!"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From $12 Is Not Null As @usn6  Foreach(usn1 In {`4esn`}[{`4esn`}..999]| Create (`4esn` :`4esn`:@usn6) With Distinct 0Xa Contains #usn8 Contains 1000 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Skip ({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]])"),
    octest_legacy:ct_string("Detach Delete Reduce(_usn3=12 Starts With 0x0,_usn4 In 0.0[..{999}][..0.0]|$usn1[..'s_str'][..$#usn8]) Is Null Is Null,{usn1}[01..7][{`3esn`}..`6esn`]"),
    octest_legacy:ct_string("Unwind None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[Shortestpath(((({``:$7[{`1esn`}]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(#usn7 :@usn6))))..Extract(_usn3 In True[7][$999] Where $7 Is Null Is Null)][{`4esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:.e12 Is Null Is Null}..[`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000]] As _usn4 Detach Delete $#usn7 Starts With 9e0 Starts With 2.12,'s_str'[..0X7] Detach Delete Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Is Not Null,0.0[9e1..][Null..] Union All Create `5esn`=((`8esn` :@usn6)),`8esn`=Shortestpath(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})) Start ``=Relationship( {``}) ,`7esn`=Relationship(07,123456789,123456789)Where 12.e12[{@usn5}..][9e1..] Union Start @usn6=Node:_usn4(``=\"d_str\") ,@usn5=Node:`1esn`(_usn4='s_str')Where 9e1[9e1...e0]"),
    octest_legacy:ct_string("Return Distinct Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} As #usn7,0X0123456789ABCDEF Contains {usn1} As @usn5,{999} Starts With {_usn4} Starts With 00 As _usn4 Skip {_usn4}[{``}..] Foreach(#usn8 In $``[.e12..]| With  1.e1 Is Null Skip $`2esn`[{``}..{1000}][#usn8..`2esn`] Limit $123456789[..$7][..$`6esn`] Match `5esn`=(:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[#usn8? *..01234567]-($_usn3),((@usn6 :@usn5{usn2:{`6esn`} Ends With 0e0 Ends With {``}})-[? *0x0..{`6esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]->(`1esn` {#usn8:$12 Contains 0Xa})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})) Using Join On #usn8,`5esn`,`1esn` Using Join On _usn4,@usn6) Load Csv From Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] As usn1  Union Start _usn4=Node:`4esn`(_usn4={``}) "),
    octest_legacy:ct_string("Start `3esn`=Relationship:@usn6({`2esn`}) ,`8esn`=Node:`6esn`('s_str')Where $@usn6 =~#usn8 Union All Create `5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Return Case 00 Starts With $`6esn` When $@usn5 In 's_str' In $12 Then Count(*)[010..][#usn7..] When Count ( * )[Count ( * )][12] Then True[7][$999] Else `4esn` Contains #usn8 Contains 7 End =~Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}))) As `4esn`,All(_usn4 In 0.0[..{999}][..0.0] Where Count(*)[.e12]) Starts With _usn4(Distinct 0.12 Ends With {1000} Ends With `6esn`,$_usn3 =~{_usn4} =~$`6esn`) Starts With {_usn4:False Contains 0.e0 Contains Count(*),`2esn`:1e1[{_usn4}..123.654]} As `5esn`,1000 As `5esn` Order By `1esn`[..00][..{7}] Ascending Skip .e12 Is Null Is Null"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((_usn4 :#usn8))),(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})) Merge ((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})) On Create Set Case $`1esn`[07] When Null =~12e12 Then $``['s_str'..][0x0..] Else Null Is Null Is Null End.usn2? =0X0123456789ABCDEF[9e12],`4esn`+=12.e12[$`4esn`..],`8esn` =$usn1[0X7] On Match Set `6esn` =Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1),`3esn` =0.0 Contains $_usn4 Contains {`2esn`},(`4esn` {_usn4:12 Starts With {_usn4} Starts With $#usn8,_usn4:$@usn5[$`4esn`][$@usn6]})-[{`1esn`:@usn6[$usn2..#usn7]}]->({`3esn`:$usn1 In 01234567 In .e1,``:False[999]}).``? =\"d_str\" Ends With 1.0 Ends With 0e0 Create #usn7=(`4esn` :usn2:`2esn`)"),
    octest_legacy:ct_string("Merge Allshortestpaths((((`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5)-[_usn4? *..010{`3esn`:$`3esn` In 9e12 In ``,@usn6:'s_str'[.._usn4][..``]}]->(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}})))) On Match Set None(`6esn` In 00 Where {12} Starts With #usn8 Starts With 0e0).`1esn` =Count(*) In 0e0 In 9e1 On Match Set Reduce(`3esn`={123456789}[12..][$12..],#usn7 In 0Xa[@usn5][{`7esn`}]|123.654[$`1esn`..Null][1000..{_usn3}]).`8esn`? =#usn8 =~{999},`5esn`+=`6esn`[$0][#usn8] Merge `3esn`=(`5esn` :_usn4)<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]}) On Create Set (#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})<-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]->(@usn5 {#usn7:$`7esn` In 12}).`4esn` =[{@usn5}[..@usn6],$7[{`1esn`}]] Is Null Is Null,Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12]).usn1! =[`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]] On Match Set `7esn` =$999[{_usn4}]"),
    octest_legacy:ct_string("Remove None(#usn7 In 123.654 Starts With $`` Where $_usn4 Is Not Null Is Not Null).usn2!,Reduce(usn2=00[Count(*)...e0][$#usn7..0X0123456789ABCDEF],usn1 In 12.e12 In {0} In 9e1|{`7esn`}[0X7..][0x0..]).@usn5?,{#usn7:$`3esn`[..$`2esn`][..123.654],@usn6:True Starts With $`4esn` Starts With 12e12}.`1esn`? Load Csv With Headers From $@usn5[`1esn`..] As @usn6 Fieldterminator \"d_str\" Unwind Single(usn1 In 12.e12 In {0} In 9e1 Where `4esn` Contains #usn8 Contains 7) Ends With [123.654[$`1esn`..Null][1000..{_usn3}],#usn8[`7esn`..],$@usn6 Starts With {`1esn`} Starts With 12] Ends With {`4esn`:{usn1} In Count ( * )} As `4esn` Union All Load Csv From 1e1 Starts With 9e1 Starts With {`4esn`} As `2esn`  Merge Allshortestpaths((((usn2 :_usn3)<-[#usn7{#usn8:{`1esn`} Is Not Null}]->(`8esn` {`3esn`:'s_str'[..0X7]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)))) On Match Set [#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]].@usn5 =Reduce(#usn8=$7[{`1esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|$12 Contains 0Xa) Is Null Is Null,Reduce(`7esn`=$0[`7esn`],`6esn` In Count(*) Ends With $`` Ends With {7}|$7 Ends With 0X7).`5esn` =$0 Is Not Null,`1esn`+=`2esn`(Distinct $`1esn` Is Not Null Is Not Null,0.12 Contains 12.0)[`3esn`(Distinct `7esn`[0..$usn2][{usn2}..0.e0])][{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] On Create Set [$1000 Is Not Null Is Not Null].``? =7 In 1.e1 In $usn1,`4esn`(Distinct 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF],`3esn`[..{_usn4}][..{@usn5}]).`8esn` =$`6esn`[`8esn`][$`5esn`],Any(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).usn2! =Null[010..][{``}..]"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv With Headers From $@usn6[01..@usn5][0x0..`4esn`] As usn2  Detach Delete {123456789} =~{@usn6},12 Starts With 9e0 Starts With `7esn` Foreach(#usn7 In 9e12 Is Not Null Is Not Null| Remove [{#usn8}[#usn7..{`2esn`}],{1000},{@usn5}[1e1..][9e1..]].@usn6,[`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]].`6esn`?)"),
    octest_legacy:ct_string("Create ``=(({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[ *0xabc..7]->(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})) Load Csv With Headers From {_usn3}[$usn2..] As `` Fieldterminator 's_str' Unwind {usn2}[`6esn`..01234567] As _usn3 Union Start `4esn`=Node:@usn6(`5esn`={1000}) ,``=Node:`6esn`('s_str')"),
    octest_legacy:ct_string("Create usn2=((`4esn` :`4esn`:@usn6)<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}))"),
    octest_legacy:ct_string("Merge `8esn`=(@usn6 :usn1:_usn4) On Create Set `5esn`+=`2esn`[usn2..][$7..],(:usn1:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})-[`7esn`]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}).``? =$`2esn`[{usn1}..],`6esn` =$`1esn`[`6esn`..][00..] On Match Set `7esn` =$1000[0.12..0.12] Create (((_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]})<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))),`3esn`=(:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )}) Union Return Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)[..Case 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0] When `4esn` Contains #usn8 Contains 7 Then 12 Ends With 01 When {999}[$123456789..][12..] Then {`4esn`} In _usn4 Else {#usn7}[Count ( * )..12][$`2esn`..`4esn`] End],Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End Order By $@usn5[{_usn3}][$#usn7] Ascending,Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) Contains {`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]} Contains Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12]) Ascending Skip {7}[{`4esn`}][`6esn`] Limit {#usn8}[2.12] Union All Create `3esn`=Allshortestpaths((:@usn6{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]})) Optional Match (((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Using Scan `3esn`:`3esn`"),
    octest_legacy:ct_string("Match ``=Shortestpath((`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00})) Using Scan `1esn`:`7esn` Using Join On `7esn` Return Distinct *,{`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `8esn` Order By $999 Contains {7} Ascending,None(`6esn` In 00 Where 0.12[..$`6esn`][..$1000])[Case _usn4 Is Null Is Null When 07 Is Null Then False Contains $#usn8 Contains 9e1 End..`2esn`(Distinct #usn8[`7esn`..])][[_usn4 In 0.0[..{999}][..0.0] Where 12 Ends With 01|0.0 Is Not Null Is Not Null]..[Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null]] Desc Limit usn1 In 00 In {_usn3} Load Csv From #usn8 =~`7esn` As #usn7 Fieldterminator \"d_str\" Union All Start `3esn`=Node:``({`1esn`}) ,``=Rel:`2esn`(`5esn`='s_str')Where $#usn7 =~{12} =~False Optional Match `2esn`=Allshortestpaths(((_usn4 :#usn8))),`2esn`=({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]}) Foreach(`4esn` In Reduce(`7esn`={@usn5} Is Null,#usn7 In 0Xa[@usn5][{`7esn`}]|0e0[0X0123456789ABCDEF..010][$@usn6..010])[Extract(_usn4 In `2esn` Where 123.654 Starts With $``|12.e12[``..usn2][{#usn7}..@usn5])]| Delete Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]],{@usn5} Is Null With  {`4esn`}[$_usn4..][9e0..] Skip Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Where {`2esn`} Is Not Null Is Not Null) Union Start `8esn`=Relationship(07,123456789,123456789) ,usn2=Relationship( {123456789})Where $0[$1000..00][{0}..{usn1}] Create Unique `8esn`=Shortestpath((({`2esn`:{7}[$7..],#usn7:`1esn` In 07}))) Return $7 Ends With $`8esn` As `4esn` Order By {#usn8}[usn2][{0}] Ascending,00 Contains #usn8 Desc Skip 1e1 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove Reduce(`2esn`={1000},_usn3 In {@usn5}[..#usn7]|00).`6esn`! Merge usn2=Allshortestpaths((({``:$7[{`1esn`}]})-[`8esn`?:`5esn` *12..{#usn7:$1000 Is Not Null Is Not Null}]-(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))) On Match Set `4esn`+=Any(`6esn` In Count(*) Ends With $`` Ends With {7} Where 1000 Is Null) Is Not Null Is Not Null,{`6esn`:7 Is Not Null}.`5esn` =$`6esn`[`8esn`][$`5esn`],`2esn`+=Reduce(`3esn`=#usn8 In `8esn` In 07,#usn7 In 123.654 Starts With $``|_usn3[$usn2..0])[..Any(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`])][..[$`1esn`[#usn8][$@usn5],\"d_str\" Ends With False Ends With {@usn6}]]"),
    octest_legacy:ct_string("Load Csv With Headers From (#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As usn2 Fieldterminator \"d_str\" Create Unique `2esn`=(_usn3 :@usn5),(@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})"),
    octest_legacy:ct_string("Using Periodic Commit 010 Load Csv From 999 Ends With {`2esn`} As `1esn`  Unwind 9e1 Ends With $@usn5 Ends With $123456789 As ``"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv With Headers From {_usn4}[{usn1}..$_usn3] As `3esn` Fieldterminator 's_str' Create _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` ))"),
    octest_legacy:ct_string("Using Periodic Commit 01 Load Csv From 1e1[..`1esn`][..0e0] As @usn5  Merge @usn6=((`4esn` :usn2:`2esn`)) On Create Set `3esn` =9e0[Count ( * )] Merge (#usn7 :_usn3{`2esn`})-[`8esn`?:`2esn`{`2esn`:{#usn8} =~{999} =~{#usn7}}]->(@usn6 :`7esn`)"),
    octest_legacy:ct_string("With Distinct *,{@usn6} Contains 0e0,[`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]|True Is Not Null Is Not Null] Ends With Case When Count(*)[..``][..#usn8] Then {0}[..{`7esn`}] End Ends With `3esn`(Distinct 1.e1 =~$usn2,0X0123456789ABCDEF Is Null Is Null) As `5esn` Order By @usn5 =~`` Asc Skip 07 =~$`8esn` =~9e1 Limit \"d_str\"[{`8esn`}..] Where `3esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Using Periodic Commit 1000 Load Csv From 9e12 Is Not Null Is Not Null As usn2 Fieldterminator \"d_str\" Load Csv From `7esn` Starts With 0X7 Starts With $`7esn` As #usn7 Fieldterminator 's_str' Match `6esn`=Shortestpath(((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)))"),
    octest_legacy:ct_string("Start `4esn`=Node:_usn3({123456789}) Where $@usn5[$`4esn`][$@usn6] Unwind `5esn` In 12e12 In `8esn` As #usn7 Union Unwind {`7esn`} Ends With `` Ends With {`8esn`} As _usn3 Unwind $`5esn` Ends With 00 Ends With #usn7 As usn1"),
    octest_legacy:ct_string("Start @usn6=Rel:`2esn`(`5esn`='s_str') ,`1esn`=Node(00)Where $usn2 =~\"d_str\" =~_usn3 Create @usn5=Allshortestpaths(((:`2esn`))),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Union All With Distinct Null Ends With 12 Ends With usn2,010 In `1esn`,07 =~$`8esn` =~9e1 As _usn4 Skip Reduce(@usn6=#usn8 Is Not Null,#usn7 In 0Xa[@usn5][{`7esn`}]|{7}[{`4esn`}][`6esn`])[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])] Limit #usn8 In `8esn` In 07"),
    octest_legacy:ct_string("Unwind 0Xa Contains $`` As `4esn` Load Csv With Headers From Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null As `2esn` Fieldterminator \"d_str\" Create `6esn`=(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]})-[?:@usn6|`` *1000]-(`5esn` :`7esn`)<-[@usn5:`3esn`|:@usn5 *01..07{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}]->(usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null}))) Union Unwind 12.e12 In {0} In 9e1 As #usn8 With Distinct {@usn6} Contains 0e0,$_usn4[$`4esn`..$12],0e0[..$@usn5][..$`8esn`] As `2esn` Order By 0Xa[$1000..$123456789] Desc Skip 1000 Is Not Null Limit $_usn4 Is Null Is Null Where $@usn5[`6esn`..] Match Allshortestpaths(((`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))) Using Scan _usn3:`4esn` Using Join On ``,`7esn`,#usn7 Where $0[_usn4..{`3esn`}][$#usn7..$#usn7]"),
    octest_legacy:ct_string("Foreach(#usn7 In Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)]| With  *,1.e1[`4esn`..][$`6esn`..] As @usn5,Count ( * ) =~{`5esn`} =~{_usn4} As _usn3 Where _usn3[\"d_str\"]) Union All Create Unique (`1esn` :@usn6)<-[{``:\"d_str\"[{`8esn`}..]}]-(:#usn7{#usn7:$`8esn` In $`2esn` In {7}})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}),_usn4=Allshortestpaths((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})) Foreach(#usn7 In Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12) Contains {`1esn`:$999 Ends With {0}} Contains (`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})| Delete 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,$7 Is Not Null,0X0123456789ABCDEF[$`5esn`..]) Create `2esn`=Shortestpath((:`5esn`:@usn5{``:.e12 =~$_usn4})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`)<-[@usn5:_usn4|:usn1*]->(:@usn5)),`2esn`=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})) Union Merge @usn6=((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})) On Create Set #usn7 =9e1['s_str'..0xabc]"),
    octest_legacy:ct_string("Return Distinct {usn1}[{`5esn`}..] As _usn4,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Order By 0.12[999][$#usn8] Descending,`7esn`[..$`5esn`][..{`5esn`}] Desc Create Unique _usn3=((:@usn5{`3esn`:@usn5 =~'s_str',`1esn`:$`7esn` Contains {`1esn`} Contains 9e12})) Remove Extract(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|{`6esn`} Ends With 0e0 Ends With {``}).`1esn`! Union All Delete $`7esn` Contains {`1esn`} Contains 9e12,2.12[..$_usn4]"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths((((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})))) On Create Set Case $`1esn`[07] When Null =~12e12 Then $``['s_str'..][0x0..] Else Null Is Null Is Null End.usn2? =0X0123456789ABCDEF[9e12],`4esn`+=12.e12[$`4esn`..],`8esn` =$usn1[0X7] On Match Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )] Union All Merge `2esn`=(:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}}) Load Csv With Headers From $`6esn`['s_str'..][{_usn4}..] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit 0X7 Load Csv From $usn1 In 01234567 In .e1 As ``  Create Unique _usn4=(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))"),
    octest_legacy:ct_string("Return {@usn6}[True..{_usn3}] As `3esn`,Shortestpath((((`1esn` {#usn7:Count ( * )[$12..]})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}))))[..Case {`1esn`} In 12.e12 In 9e1 When 12 Starts With {_usn4} Starts With $#usn8 Then Count(*) Is Not Null Else 12.e12 In $0 In $0 End][..#usn8],1.e1 =~$`1esn` As `8esn` Order By `1esn`[$123456789..] Desc,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,.e1 Ends With 0Xa Ends With 00 Ascending Skip 0xabc =~12 =~0x0 Limit 0e0[0X0123456789ABCDEF..010][$@usn6..010] Union All Create (#usn7 :#usn8)-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0}),`3esn`=Shortestpath(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[:#usn7|`2esn`]-(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))) Remove [`6esn` In Count(*) Ends With $`` Ends With {7} Where `1esn` =~1000 =~1000|0xabc[$@usn5]].usn1,Allshortestpaths((((`2esn` {_usn4:`4esn`[usn1]})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})))).#usn7 Start @usn6=Node:_usn4(``=\"d_str\") ,_usn3=Relationship:_usn4(usn1={_usn4}) Union All Detach Delete [`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)][Extract(`` In {`1esn`} Starts With @usn6 Where $`7esn`[$``..][999..]|.e1 Contains $`3esn`)..Case When 's_str'[.._usn4][..``] Then 123.654 Starts With $`` Else 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] End] Remove `5esn`(Distinct $999 Is Null,0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]).`3esn`? Remove {#usn8:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}.usn1"),
    octest_legacy:ct_string("Create Unique (((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))),`2esn`=((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})) Detach Delete {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])],$123456789 Contains [True Starts With $`2esn` Starts With {@usn6}] Contains {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]},.e12[{_usn4}..] Union All Optional Match (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))),#usn7=(($`5esn`)) Using Scan #usn7:_usn3 Using Index `6esn`:`7esn`(#usn8) Merge `8esn`=Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]})) Union All Remove Allshortestpaths((((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[#usn7{``:.e1 Contains $`3esn`}]->(`7esn` :`2esn`{`6esn`:{`3esn`}[{`5esn`}],_usn4:0X0123456789ABCDEF[$`5esn`..]})-[_usn4 *0x0..]-(:``$_usn4)))).`5esn`? Remove usn2:@usn5,Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End.#usn8!,`8esn`:_usn3"),
    octest_legacy:ct_string("Foreach(`6esn` In _usn3 =~123.654| Create Unique ((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})),``=(_usn4 :#usn7{`8esn`:$999 Contains {7}}) Remove (usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[`7esn`? *0X0123456789ABCDEF{@usn6:12 Starts With {_usn4} Starts With $#usn8}]-(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`5esn`) Merge Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0}))) On Create Set None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]).@usn6! =0X0123456789ABCDEF[$`5esn`..],(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[_usn3?:`1esn`|:`3esn`{`3esn`:$@usn6 Contains $`7esn` Contains 1e1,@usn5:True Starts With $`4esn` Starts With 12e12}]-(`3esn` :_usn3{_usn3:{_usn3} Contains 9e0 Contains $999,`2esn`:{_usn3}[$usn2..]})<-[`3esn`?*{#usn8:$`1esn`[..{_usn3}]}]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}).`8esn`? =$12 Is Not Null Create (((_usn3 :`3esn`:`6esn`)<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[?:#usn8|`2esn` *01..07]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]}))),`4esn`=((`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}})-[_usn4?:`3esn`|:@usn5]->(`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]}))"),
    octest_legacy:ct_string("Delete .e0[0X7..{`1esn`}][0xabc..$`7esn`],{`7esn`} Is Not Null Is Not Null Match @usn6=((`8esn` :`5esn`:@usn5)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null})),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) Where .e12[$#usn8..@usn6]"),
    octest_legacy:ct_string("Delete `7esn`[0..$usn2][{usn2}..0.e0],07[..`6esn`][..'s_str'],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)..Shortestpath(((_usn3 {@usn5:.e12 =~.e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))][Shortestpath(((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})))..Reduce(usn2=Null In .e0,_usn3 In {`2esn`} Ends With {12} Ends With 7|{0}[..{`7esn`}])] Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:usn1('s_str') Delete `2esn` Starts With `` Starts With 1e1,{_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789})))"),
    octest_legacy:ct_string("With  {usn2} Starts With `` Starts With {0},@usn6[2.12..$#usn8][`3esn`..{`5esn`}] As `8esn` Order By ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(_usn4 :_usn4) In (`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})<-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]->(`4esn` :#usn7)<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}) In Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Desc,{_usn4}[{usn1}..$_usn3] Asc Skip {`3esn`}[$1000] Detach Delete {`2esn`} Ends With {12} Ends With 7,1e1[7..][.e1..],#usn7(Distinct)[usn2(Distinct)..{#usn7:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:#usn8[$0..False][$`1esn`..$#usn7]}][Case When {`4esn`}[..{`4esn`}] Then {`7esn`}[0X7..][0x0..] When {@usn6} Contains 123.654 Contains 01 Then #usn8 Is Not Null End..[9e12 Ends With 123456789]] Union With Distinct {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) As @usn6,{`3esn`}[{123456789}..][{usn1}..],1.e1[12e12..{`6esn`}] As `1esn` Skip (#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) Limit 0Xa Contains Count ( * ) Where {`2esn`} Starts With @usn6 With  0.12 Starts With 9e12 Starts With $`1esn`,{`2esn`} Starts With @usn6 As `3esn` Order By $999 Contains {7} Desc,Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] Asc Skip `7esn` Contains {@usn5} Contains $123456789 Union Remove #usn8:#usn8,Single(_usn4 In `2esn` Where 0X0123456789ABCDEF[9e12]).`1esn`! Foreach(`1esn` In All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Contains `4esn`(999 Starts With 's_str') Contains (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})| Create (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})) Detach Delete Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null,``[..0X0123456789ABCDEF],{`1esn`}[$`4esn`..][False..])"),
    octest_legacy:ct_string("Unwind 1.e1[0xabc..] As usn1 Match Shortestpath(((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]}))),usn1=((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})) Using Scan `3esn`:`3esn` Unwind [{999} Starts With {12},9e1 Ends With Count(*) Ends With False,0X0123456789ABCDEF[`5esn`..][$#usn8..]] In Single(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null) As @usn6 Union Unwind 2.12 In 123456789 In usn1 As usn2 Create Unique Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})),``=(({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[ *0xabc..7]->(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})) Merge `1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) On Create Set [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07].`6esn`? ={#usn8} Ends With 1.0 Ends With 12.0,`4esn` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Union Remove `1esn`:`4esn`:@usn6,{@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']}.#usn7? Optional Match usn1=(@usn6 :`2esn`)<-[ *..0Xa]->({`8esn`:Null In .e0}) Using Scan _usn4:`2esn` Using Scan `2esn`:`1esn` Where 12.e12[`7esn`] Create `5esn`=((usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null})-[?:`4esn`|:#usn7 *..0]-({`7esn`:{`1esn`} =~{_usn4}})),Shortestpath(((`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})<-[:`1esn`|:`3esn` *..01234567]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})-[``?:`4esn`|:#usn7 *07]-(_usn3 {@usn5:.e12 =~.e0})))"),
    octest_legacy:ct_string("Start _usn3=Rel:`4esn`(`1esn`=\"d_str\") ,_usn4=Node:`5esn`(`5esn`={999})Where $`6esn` Ends With {0} Ends With {`7esn`}"),
    octest_legacy:ct_string("Remove Reduce(#usn7=$`7esn` Is Null Is Null,`1esn` In `3esn`[07..]|1000 Is Not Null)._usn3!,All(`2esn` In {999} Is Not Null Where {``} Ends With .e12 Ends With 0.e0).`1esn`! Start usn2=Relationship( {#usn7})  Load Csv From Null Is Null Is Null As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind {1000}[{#usn8}] As #usn8 Union All Return Distinct 9e12[{123456789}..][$`2esn`..] As `1esn`,010 Is Not Null Is Not Null As #usn7,{7} Is Null Order By $12 Contains 0Xa Descending Skip $12 Contains 0Xa Load Csv With Headers From {999} Is Not Null As _usn4 Fieldterminator \"d_str\" With Distinct $0 Starts With `2esn`,count(Distinct 999[12.0..][#usn7..]) =~Allshortestpaths(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) =~@usn6(`8esn` Starts With {123456789},$`` Starts With 12 Starts With $usn2) Order By $1000[..12.0][..0e0] Ascending,[`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)] Starts With (`5esn` :`7esn`)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}) Starts With `6esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],$`7esn` In 12) Descending,Any(`2esn` In {999} Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e12 Is Not Null]..][$`6esn`..] Desc Skip $#usn7 Starts With False Starts With {`6esn`} Limit `6esn` Starts With 123.654 Where 00[07..] Union With  `7esn`[{7}..@usn5],{@usn6} Contains 0e0,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Limit $#usn7[.e1..{7}] Where 0X0123456789ABCDEF[$`2esn`..][`2esn`..]"),
    octest_legacy:ct_string("Foreach(`8esn` In _usn3[\"d_str\"]| Start usn2=Rel(123456789,01234567,01234567) Where ``[{123456789}..]) Create Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})),`3esn`=Shortestpath((({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`))) Optional Match (((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Using Scan #usn7:usn2 Using Join On `1esn`,#usn8 Union All Merge ((`` :`6esn`:`8esn`)<-[`4esn`?{usn2:{#usn8}[$#usn7..],@usn5:{@usn5}[..@usn6]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})<-[{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]}]-(`` :`4esn`:@usn6{``:.e12 =~$_usn4})) On Match Set `5esn` =True[..010],#usn8+=Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}),`3esn` =@usn6[$_usn4] On Match Set Allshortestpaths((#usn8 :#usn8)).`3esn`! ={#usn8}[usn1][1.0],usn2 =$`5esn`[`4esn`][_usn3] Optional Match Allshortestpaths((((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})))),`7esn`=(:_usn3{_usn3:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,`5esn`:1.0 Is Null Is Null})<-[`3esn`:`6esn`{`3esn`}]-(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})<-[ *123456789..0X7]-(`2esn` :`2esn`{`3esn`:#usn8 =~{999}}) Create Unique usn2=(((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})-[?:#usn7|`2esn` *0x0..]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Union Delete $``[..1.e1][..12] Detach Delete Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )},Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Is Null Is Null,$`2esn` Is Null Is Null Create Unique (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}))"),
    octest_legacy:ct_string("With Distinct {#usn7} Contains @usn5 Contains Count ( * ),01 Starts With {999} Starts With $`2esn`,$usn1[@usn6][#usn7] As `6esn` Order By Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )} Ascending,`8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]] Desc Limit None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Where {`1esn`} Starts With `4esn` Starts With {0} Merge ((_usn4 :`8esn`:@usn5)) With Distinct 0x0[{7}..] As `7esn`,$`5esn`[@usn5..][$``..],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)[Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6)..Shortestpath(((_usn3 {@usn5:.e12 =~.e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})-[`5esn`?:@usn5|:`7esn`]-(:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})))][Shortestpath(((`6esn` :`7esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})))..Reduce(usn2=Null In .e0,_usn3 In {`2esn`} Ends With {12} Ends With 7|{0}[..{`7esn`}])] As usn2 Order By $_usn3[{999}] Ascending,1.e1 Ends With 0 Ends With $usn1 Descending,$0[..{usn2}][..$usn1] Desc Skip Count ( * ) Starts With 010 Starts With 0x0 Union All Start `8esn`=Node:`1esn`({@usn5})  Load Csv From [#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null As `7esn` Fieldterminator 's_str' Foreach(`8esn` In 1.0 Ends With $`2esn` Ends With {`8esn`}| With Distinct *,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,12 Is Not Null Is Not Null As #usn8 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending) Union All Create Unique (#usn8 :#usn8)"),
    octest_legacy:ct_string("Detach Delete Null[{_usn4}..],``[{#usn8}..9e0][12.e12..0xabc] Create Unique (((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})-[]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})<-[@usn6?]->(`8esn` :``))),usn2=Allshortestpaths(((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))))"),
    octest_legacy:ct_string("Create Shortestpath((((usn2 {`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})<-[`2esn`?:@usn6|``]->(`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})))),({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7}) Return `7esn` =~.e12 =~$#usn7 As `3esn`,$`8esn` Is Null Is Null As `6esn` Order By False[{`8esn`}] Asc,Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null Asc,{1000}[1000][$usn1] Ascending Skip $#usn8[{12}..] Load Csv With Headers From {1000}[01234567..$_usn4][{@usn6}..$_usn3] As `2esn` Fieldterminator 's_str' Union Merge ((:`3esn`:`6esn`{`1esn`:12 Starts With 0x0})) On Match Set _usn3 =$`` Starts With 12 Starts With $usn2,@usn5+=$@usn6[$`8esn`..][7..] Unwind $`1esn` Ends With {12} Ends With 0xabc As `3esn` Create Unique ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),`5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Union Match usn2=((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Using Scan _usn3:`` Using Index @usn5:usn2(`6esn`)"),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv From 9e0 Starts With .e0 Starts With \"d_str\" As `5esn`  Start #usn7=Node:#usn7('s_str') ,`6esn`=Node:@usn6({999}) Optional Match `8esn`=Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Using Scan `4esn`:_usn4"),
    octest_legacy:ct_string("Create (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` ))"),
    octest_legacy:ct_string("Create usn1=Allshortestpaths(((:`6esn`:`8esn`{`5esn`:{@usn5} Is Null,`8esn`:True[..010]}))),((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null})<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})<-[:`8esn`|:_usn4 *1000]->(`5esn` $`8esn`))) Merge ((:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})<-[`8esn`? *..7{`8esn`:{7}[{`4esn`}][`6esn`]}]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(:`6esn`:`8esn`$usn2)) On Match Set Allshortestpaths(((#usn8 :@usn5)<-[_usn3{@usn6:{7} Contains $123456789}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1}))).`3esn`! =[{@usn6}[True..{_usn3}]] Starts With [$`2esn`[$usn2..][{``}..],{1000}[\"d_str\"..{@usn5}][$1000..$#usn8],12.e12[$`4esn`..]] Starts With Case When $0[`7esn`] Then 1000 Is Null Is Null Else Count(*)[010..][#usn7..] End,@usn5+=0X7[01..],[`2esn` In {999} Is Not Null Where $0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`]].@usn6 =Shortestpath(((:@usn6{usn2:{#usn8}[12.0][$@usn6]})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(:`3esn`:`6esn`{999})))[..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where Count(*) Ends With 123.654 Ends With $12|0Xa[$1000..$123456789])][..{@usn6:12 Starts With {_usn4} Starts With $#usn8}] Create Unique ((({_usn4})<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})-[@usn6?:`2esn`]->(`7esn` ))),``=(({usn1:{usn2} =~@usn6 =~{`4esn`},usn1:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[``?:`6esn` *07{`5esn`:{12} Contains `7esn` Contains $_usn3,_usn4:$`3esn` In 9e12 In ``}]-(:@usn6)-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}))"),
    octest_legacy:ct_string("Remove (`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})._usn3?,(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}).usn2!,[$usn1[0X7],7[1000.._usn3][9e0..\"d_str\"],0X7 Starts With {999} Starts With 12e12].`7esn`! Unwind `` Ends With {usn1} As `1esn` Union All Load Csv From 12.e12[$`4esn`..] As usn1 "),
    octest_legacy:ct_string("Start `1esn`=Node:usn1(\"d_str\") Where $`2esn`[{``}..{1000}][#usn8..`2esn`] Start _usn4=Rel:`2esn`({_usn3})  Load Csv From 123456789[0..] As _usn3  Union All Create Unique Allshortestpaths((((:#usn7{#usn7:$`8esn` In $`2esn` In {7}})-[`7esn`? *..0{`2esn`:07 =~$`8esn` =~9e1,``:`5esn`[0xabc..]}]->({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7})-[? *01..07]->(`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})))),_usn3=Allshortestpaths(((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}))))"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})),((:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]->(:`2esn`{`6esn`:@usn6[{0}..]})<-[`1esn`?:_usn4|:usn1*]->(usn2 :``)) Using Index #usn8:`7esn`(`2esn`) Using Join On `7esn` Where {0} =~12.0"),
    octest_legacy:ct_string("Start #usn7=Node(0,0X7) Where True Is Not Null Is Not Null Start `3esn`=Relationship:#usn8(_usn3={#usn7}) Where {999} Is Null With Distinct 1.e1 =~9e12 =~`4esn` As `7esn`,0 Contains $usn2 Contains 12e12 Order By {@usn6} Is Not Null Asc Where $123456789 Starts With .e12 Union All Create Unique #usn8=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),Shortestpath(((`1esn` :`4esn`:@usn6))) Return Distinct [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]],$1000[..12.0][..0e0]"),
    octest_legacy:ct_string("Create ``=(:_usn3{`8esn`:9e1 =~999}) Merge ((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})) Detach Delete Single(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * ))[Any(`6esn` In 00)..Allshortestpaths((((:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]})<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`))))],@usn6[2.12..$#usn8][`3esn`..{`5esn`}]"),
    octest_legacy:ct_string("Unwind 9e12[..0X7] As `2esn`"),
    octest_legacy:ct_string("Load Csv With Headers From All(#usn7 In 123.654 Starts With $`` Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF) =~[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|{#usn8}[2.12]] =~Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) As `4esn`  Union All Unwind 123.654 Contains $#usn8 Contains .e1 As usn2 Merge _usn4=(({`5esn`:0Xa[0e0..{#usn7}]})<-[?:``]-(`7esn` :`3esn`:`6esn`)) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null On Match Set `5esn` =True[..010],#usn8+=Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}),`3esn` =@usn6[$_usn4] Load Csv From Shortestpath((((`6esn` :`7esn`)-[_usn4 *0x0..]-(:``$_usn4)<-[#usn8?:``]-({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]})))) Starts With Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End Starts With [True[7][$999],{`8esn`}[0X7][$`3esn`]] As `3esn` Fieldterminator \"d_str\" Union All Merge `5esn`=(((_usn4 :#usn8)-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))) Load Csv With Headers From Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As usn2 Fieldterminator \"d_str\" Match _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))),`6esn`=Allshortestpaths(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})) Using Scan `5esn`:#usn8 Using Join On `1esn`"),
    octest_legacy:ct_string("Load Csv From {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}[..None(`1esn` In `3esn`[07..] Where 0X0123456789ABCDEF[`5esn`..][$#usn8..])] As `3esn` Fieldterminator 's_str' Union Foreach(`8esn` In $`6esn`[`8esn`][0.0]| Unwind {`4esn`}[$123456789] As usn1) Foreach(`` In {`7esn`}[0X7..][0x0..]| Load Csv With Headers From 12.e12[`7esn`] As `1esn`  With  `7esn`[{usn1}][999] As `7esn`,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Order By @usn5 =~$`3esn` =~0X7 Descending Skip {usn1}[01..7][{`3esn`}..`6esn`]) Union All Merge `2esn`=Allshortestpaths((((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[{#usn7:'s_str'[_usn4..0x0]}]-(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`2esn` :_usn3{`8esn`:usn1 Contains $7 Contains $``})))) Create Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})<-[*{`8esn`:0Xa[.._usn3][..$`6esn`]}]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})) Merge usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) On Create Set {`5esn`:$7 Ends With $`8esn`,`3esn`:`4esn` Contains #usn8 Contains 7}._usn4 =_usn4 Is Null Is Null,Reduce(`8esn`=`2esn` Starts With `` Starts With 1e1,`` In {`1esn`} Starts With @usn6|$@usn6 Contains `7esn`).`8esn`! =All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null})"),
    octest_legacy:ct_string("Create Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))) Delete {1000} Ends With {`8esn`},$12[{7}..0X0123456789ABCDEF] Load Csv With Headers From False Ends With $`` As `6esn`  Union All Create Unique `5esn`=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}) Start @usn6=Node:@usn6(_usn4={_usn4}) ,@usn5=Rel:@usn5({`3esn`})Where Count(*)[010..][#usn7..] Merge `5esn`=(((_usn4 :#usn8)-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))) Union Start usn2=Rel:#usn8(\"d_str\") ,#usn8=Node:``(#usn7=\"d_str\")Where $usn2 Ends With $`5esn`"),
    octest_legacy:ct_string("Remove Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null).`1esn`!,(`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0})-[`3esn`?:#usn7|`2esn`]->(usn1 :`6esn`:`8esn`).#usn7 Return Reduce(`4esn`=$0[$1000..00][{0}..{usn1}],@usn5 In Null =~12e12|_usn4 Is Null) Is Not Null Is Not Null Limit $_usn4[9e0..] Return Distinct *,$#usn7 =~{12} =~False Order By [`2esn` In {999} Is Not Null Where {@usn6}[True..{_usn3}]] =~None(#usn7 In 123.654 Starts With $`` Where {usn2}[$`4esn`]) =~Extract(`1esn` In $12 Is Not Null Where Null Is Null Is Null|$123456789 =~`4esn`) Ascending,9e12[..0X7] Descending Skip Any(`6esn` In 00 Where 0X7 Starts With {999} Starts With 12e12) Starts With (`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(usn1 :`6esn`:`8esn`)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) Starts With {`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}"),
    octest_legacy:ct_string("Using Periodic Commit 0xabc Load Csv From 12.e12 Starts With 1000 Starts With 's_str' As usn2  Return Case 00 Starts With $`6esn` When $@usn5 In 's_str' In $12 Then Count(*)[010..][#usn7..] When Count ( * )[Count ( * )][12] Then True[7][$999] Else `4esn` Contains #usn8 Contains 7 End =~Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}))) As `4esn`,All(_usn4 In 0.0[..{999}][..0.0] Where Count(*)[.e12]) Starts With _usn4(Distinct 0.12 Ends With {1000} Ends With `6esn`,$_usn3 =~{_usn4} =~$`6esn`) Starts With {_usn4:False Contains 0.e0 Contains Count(*),`2esn`:1e1[{_usn4}..123.654]} As `5esn`,1000 As `5esn` Order By `1esn`[..00][..{7}] Ascending Skip .e12 Is Null Is Null Unwind _usn4 =~0e0 As ``"),
    octest_legacy:ct_string("Start `6esn`=Rel:`2esn`({_usn3}) ,@usn5=Relationship:`2esn`(#usn7=\"d_str\")Where {`1esn`} In 12.e12 In 9e1 Merge Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("Remove Shortestpath(((#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]}))).@usn5,Extract(usn1 In 12.e12 In {0} In 9e1 Where 123.654[$`1esn`..Null][1000..{_usn3}]|$`5esn`[`4esn`][_usn3]).#usn7!,Extract(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where Count ( * )[$12..]|$123456789 Starts With .e12).`2esn`"),
    octest_legacy:ct_string("Remove Any(`` In {`1esn`} Starts With @usn6 Where $usn1[@usn6][#usn7]).`7esn`! With Distinct {`5esn`} Starts With 12.0 Order By $`1esn` =~$usn1 =~01234567 Desc,`7esn`[{usn1}][999] Descending Skip usn1[0] Load Csv From 12 Starts With {_usn4} Starts With $#usn8 As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove Reduce(@usn5=12.e12[``..usn2][{#usn7}..@usn5],#usn7 In 0Xa[@usn5][{`7esn`}]|$`2esn`[$usn2..][{``}..]).`7esn`?,Allshortestpaths((:`5esn`:@usn5{#usn8:$12 Contains 0Xa})<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7}))._usn4?,Case 12.e12[2.12..][0xabc..] When .e12[010..$123456789] Then 0X0123456789ABCDEF[$999..][@usn5..] End.`6esn`? Load Csv With Headers From 9e12 In 1e1 In .e12 As `5esn`  Unwind $@usn5[$`4esn`][$@usn6] As usn2 Union All Optional Match (({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Using Join On ``,usn1,usn2 Where $1000 Starts With $`8esn` Starts With {`5esn`} Create Unique ((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})-[`2esn`?:`` *999{`6esn`:{@usn5}[..@usn6],#usn7:0e0 Contains 9e12}]-(usn2 {`7esn`:{usn1}[$`8esn`..0.0]})) Match Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Using Scan `1esn`:_usn4 Union Delete {#usn7}[{#usn7}..][$`4esn`..] Match `4esn`=((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})),`5esn`=Allshortestpaths(((`` {``:$0[..{usn2}][..$usn1]}))) Using Scan usn2:@usn5 Load Csv From _usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..] As `3esn` "),
    octest_legacy:ct_string("Create Allshortestpaths(((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(`4esn` {`2esn`:@usn5[$12..\"d_str\"]}))) Create #usn8=Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))) Load Csv With Headers From $`7esn` Is Null Is Null As usn1 Fieldterminator 's_str' Union All Return Distinct $`2esn`[{usn2}],$`5esn`[$#usn7..][0xabc..] Order By [0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Ascending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc,{999} Ends With 123456789 Ends With {@usn5} Descending Limit $usn1 Contains {`8esn`} Contains $123456789 Union All Detach Delete 2.12 In $`8esn` In {`7esn`}"),
    octest_legacy:ct_string("Create `6esn`=(_usn3 {@usn5:.e12 =~.e0})-[?:`7esn`]-(usn2 :`4esn`:@usn6)-[?:@usn6|`` *1000]-(`5esn` :`7esn`),@usn5=((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})))"),
    octest_legacy:ct_string("Start `8esn`=Rel:@usn6(`3esn`={`8esn`}) "),
    octest_legacy:ct_string("Return Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As `5esn`,$@usn6[$`8esn`..][7..] As `4esn`,[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999) As _usn4 Order By {`6esn`} Is Null Desc Skip `8esn` Limit {`2esn`} In 0Xa In {_usn3} Merge usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) Union Merge `7esn`=Shortestpath((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))) On Create Set `` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) On Match Set `8esn`+={12} In $12 In 0xabc,`2esn` ={`2esn`} In $123456789 In True,@usn5+=0.0 In `6esn` In $@usn5 Union Return Distinct {#usn8}[12.0][$@usn6],$usn2 In 123.654 In .e0,{@usn6}[$`7esn`..][False..] Order By \"d_str\" Starts With $`8esn` Starts With {usn1} Desc,$`1esn`[`4esn`..][{``}..] Desc,Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null Asc Return Distinct {@usn5} Is Null,``[$0..][`1esn`..] As `4esn` Order By _usn4(Distinct 9e12[$`5esn`],$_usn4[$`4esn`..$12]) Starts With [`` In {`1esn`} Starts With @usn6 Where {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]|$`` In 0 In {1000}] Starts With [_usn4 In 0.0[..{999}][..0.0] Where Count(*) In {``}] Ascending,{`3esn`:'s_str'[..0X7]}[(@usn5 :@usn5)<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]->(:`5esn`:@usn5{``:.e12 =~$_usn4})] Asc,123.654[{@usn5}..123.654][1.0..$12] Ascending Skip Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..] Limit #usn8['s_str'..][123.654..]"),
    octest_legacy:ct_string("Start `8esn`=Rel:`5esn`({0}) Where {@usn5}[1e1..][9e1..] Union Unwind Shortestpath((((`1esn` {#usn7:Count ( * )[$12..]})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}))))[..Case {`1esn`} In 12.e12 In 9e1 When 12 Starts With {_usn4} Starts With $#usn8 Then Count(*) Is Not Null Else 12.e12 In $0 In $0 End][..#usn8] As _usn4 Unwind [`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]|7[$0..][{_usn4}..]][[9e0 Starts With .e0 Starts With \"d_str\",`3esn`[..{_usn4}][..{@usn5}],1.e1 =~`2esn`]..Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `6esn` Ends With 2.12 Ends With @usn6)] As @usn6"),
    octest_legacy:ct_string("Match @usn5=((`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})<-[@usn5{`7esn`:123456789[0..]}]->(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})),(((:`8esn`:@usn5{`8esn`:True =~_usn3 =~123456789,usn2:$usn1[$123456789..0][{`1esn`}..12.0]})-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(usn2 :`4esn`:@usn6)-[`8esn`?:``]->(`` {`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}))) Using Join On usn1,_usn4,`6esn` Using Index @usn5:`2esn`(`8esn`) Unwind (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) As _usn4 Union Detach Delete 0.e0 Ends With False With  Null Ends With 12 Ends With usn2,010 In `1esn`,07 =~$`8esn` =~9e1 As _usn4 Skip Reduce(@usn6=#usn8 Is Not Null,#usn7 In 0Xa[@usn5][{`7esn`}]|{7}[{`4esn`}][`6esn`])[Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12])] Limit #usn8 In `8esn` In 07"),
    octest_legacy:ct_string("Merge `3esn`=(((:_usn3{`8esn`:9e1 =~999})<-[@usn6?]->(`6esn` :_usn3)<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`))) On Match Set ``+=`1esn`[..00][..{7}],Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']).`8esn`? =Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) On Match Set (:_usn3$usn1)<-[`2esn`:`5esn` *0x0..{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})._usn4 =#usn7 Starts With $999 Foreach(`5esn` In Null Ends With 12 Ends With usn2| Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1)),``=Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))))"),
    octest_legacy:ct_string("Optional Match (:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`}) Using Index usn2:@usn6(`2esn`) Where 's_str'[.._usn4][..``] Match (_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Using Index @usn6:#usn8(_usn4) Using Index usn1:``(#usn7) Where 0X7[0X7..][Count ( * )..] Foreach(#usn7 In #usn8 =~{usn1} =~00| Unwind 0x0[{7}..] As `3esn`) Union With Distinct Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)[..Case 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0] When `4esn` Contains #usn8 Contains 7 Then 12 Ends With 01 When {999}[$123456789..][12..] Then {`4esn`} In _usn4 Else {#usn7}[Count ( * )..12][$`2esn`..`4esn`] End],Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End Skip {7}[$123456789..{1000}][$`3esn`..`7esn`]"),
    octest_legacy:ct_string("Return 's_str'[_usn4..0x0] As #usn8,Case When $`6esn` Starts With 12.e12 Starts With $#usn7 Then #usn8[`7esn`..] When {`4esn`}[$123456789..] Then {_usn3} Contains 9e0 Contains $999 End As @usn6,{_usn3} Contains $`1esn` Contains 12.0 Order By {`2esn`} Is Not Null Is Not Null Descending,123.654 Ends With usn2 Ends With 0 Ascending,$`3esn`[..{`2esn`}][..``] Ascending Limit $usn2 Starts With $`5esn` Union Unwind 0[{@usn5}..][7..] As usn1 Union All Merge `5esn`=((`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)) On Create Set `3esn`+=(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3})[Reduce(usn1=0x0[$`8esn`.._usn3],_usn4 In `2esn`|{123456789} Is Not Null)..Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789])][[_usn4 In `2esn` Where 9e12 Ends With 123456789|07 =~$`8esn` =~9e1]..(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->()],@usn5 =0X0123456789ABCDEF =~@usn6 =~{0},#usn7+={`6esn`} Load Csv With Headers From #usn7 Contains {`3esn`} Contains $`6esn` As ``  Detach Delete 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,#usn8[1.0..]"),
    octest_legacy:ct_string("Create Unique ((`7esn` :#usn7{`3esn`:{`2esn`} Starts With @usn6})<-[`8esn`:``]->(:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})) Unwind $`2esn`[$usn2..][{``}..] As usn1 Union All Foreach(@usn6 In 12.0[.e12]| Return Distinct Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,.e1 Ends With {7} Ends With $usn1 As ``,_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..] Start `4esn`=Rel:`8esn`(@usn6='s_str') Where `4esn` Contains #usn8 Contains 7) Unwind 12.e12[..1e1] As usn1 Foreach(`7esn` In $`2esn`[{`6esn`}][0.0]| Return $usn1 In 01234567 In .e1 As `7esn`) Union All Unwind {999} Is Null As `6esn` Create ``=Allshortestpaths((((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})-[`4esn`?:``{usn2:12e12 Ends With `4esn` Ends With 123456789}]->(:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})))) Detach Delete All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null,`3esn` Starts With Count(*),{#usn7}[..{12}][..12.e12]"),
    octest_legacy:ct_string("Remove {``:$#usn7 =~{12} =~False,`5esn`:{1000} In {123456789}}.`1esn`?"),
    octest_legacy:ct_string("Optional Match usn2=Allshortestpaths((({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[?:usn2|#usn7$#usn8]->(_usn4 :`5esn`:@usn5)<-[usn1?:usn1]-(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )}))),((usn1 :@usn5)<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`1esn`?:`3esn`|:@usn5{usn2:Count ( * )[..12][..{@usn6}]}]-(@usn5 {``:`3esn` =~9e0 =~@usn6})) Create Unique `2esn`=Allshortestpaths((:`3esn`:`6esn`{999})),`8esn`=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)) With  *,`3esn` Ends With .e0 Ends With $`7esn` As @usn5,(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[?:@usn6|`` *..01234567]-(`2esn` :@usn6) Contains (#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}) Order By 0.12 In 0X7 Descending Skip @usn6[$12] Limit $999 Ends With $`2esn` Where {#usn8}[12.0][$@usn6] Union Create Unique usn2=((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[ *0X7..0Xa]->(@usn6 :`2esn`)<-[`2esn`?:@usn6|`` *..00]->({_usn3})),`8esn`=Allshortestpaths((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Start @usn5=Node:``(#usn7=\"d_str\") Where {`8esn`}[..$`6esn`][..123.654] Create (((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Union All Merge `3esn`=Allshortestpaths((((`1esn` {#usn7:Count ( * )[$12..]})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})))) On Match Set usn1 =[usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] On Create Set `5esn` =0Xa[..{1000}][..$#usn7],Shortestpath(((_usn4 :`8esn`:@usn5))).`7esn` =$999 Contains {7},#usn8 =$``[True..] Merge usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) Delete $#usn7 =~{12} =~False,`4esn`[{1000}][{`5esn`}]"),
    octest_legacy:ct_string("Remove {#usn7:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,``:$0 Is Not Null}.@usn6? Remove `3esn`:`8esn`:@usn5,All(`1esn` In `3esn`[07..] Where @usn6[{0}..]).``? Start usn1=Node:#usn8(#usn8={``}) Where $usn1 Starts With $999 Starts With {@usn5} Union All With  $@usn5 As @usn6,[{@usn5}[..@usn6],$7[{`1esn`}]] Is Null Is Null As `5esn`,All(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) In Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $`` In 0 In {1000}|$123456789[$`5esn`][$_usn4]) In [``[00..$7],.e1 Contains $`3esn`,{``} Starts With 123456789 Starts With usn2] As _usn4 Order By $usn1 In 0.12 In $`` Desc,Case When {@usn6} Contains 123.654 Contains 01 Then usn2 Ends With Count ( * ) Ends With $@usn6 End Is Not Null Is Not Null Desc Skip Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] Limit {`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} Where 0.e0[{999}][{`1esn`}] With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $999[07..{#usn7}][1e1..0xabc] Ascending,2.12[`8esn`][1e1] Ascending,$7 In @usn5 In {@usn5} Desc Limit $usn1 In 0.12 In $`` Where {`6esn`} Contains 07 Union With  *,1.e1 =~$usn2 Skip Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}] Where $usn1 =~010 =~07 Start usn2=Rel:`4esn`(@usn5=\"d_str\") ,`2esn`=Node:`8esn`(`6esn`='s_str')Where {999} Starts With {_usn4} Starts With 00"),
    octest_legacy:ct_string("Start `4esn`=Node:``(\"d_str\") Where 00 Starts With $`6esn` Unwind {_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))) As `4esn` Union Create Unique (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Optional Match _usn4=Allshortestpaths((:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})),`3esn`=((_usn4 :#usn8{`5esn`})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5)-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->({`7esn`:123456789[0..]})) Using Scan `4esn`:`` Using Index usn1:@usn5(`7esn`) Where {@usn5}[12.0..1000][{`3esn`}..{7}] Start `1esn`=Relationship:`6esn`({999}) "),
    octest_legacy:ct_string("Create #usn8=((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})),@usn6=Allshortestpaths(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}))) Foreach(`2esn` In None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)]| Create Unique @usn6=((`4esn` :usn2:`2esn`)) Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As @usn6 Fieldterminator 's_str') Delete @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2)"),
    octest_legacy:ct_string("Start #usn7=Node(0,0X7) Where 999 Starts With 's_str' Load Csv With Headers From $`8esn` Starts With 0xabc Starts With {usn2} As `1esn`  With  *,$usn1 In 01234567 In .e1 Order By Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] Descending,{#usn7:`5esn`[..9e0][..01234567]} In Case 1e1[1.e1..][123.654..] When 7[1000.._usn3][9e0..\"d_str\"] Then 12.e12[``..usn2][{#usn7}..@usn5] When 1.e1[0xabc..] Then 1.e1 Starts With $`2esn` Starts With $0 End In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null) Desc,{7}[$7..] Desc Skip \"d_str\"[{999}..] Limit @usn5[$12..\"d_str\"] Where Count ( * ) =~{`5esn`} =~{_usn4}"),
    octest_legacy:ct_string("Unwind {#usn8} Is Null Is Null As _usn4 Create Unique Allshortestpaths(((`2esn` :@usn6)<-[:#usn7|`2esn`]->(`1esn` :`6esn`:`8esn`{usn2:Count ( * )[..12][..{@usn6}]}))),#usn8=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[?:`6esn` *01..07]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[:`1esn`|:`3esn` *1000]-($12) With Distinct {@usn5},{0} Is Null As `6esn` Skip Null In .e0 Where True[..010] Union All Optional Match (((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`))) Using Scan #usn7:_usn3 Using Scan _usn4:_usn3 Where {@usn5}[Count(*)..]"),
    octest_legacy:ct_string("Foreach(@usn6 In 0Xa Contains Count ( * )| With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $#usn7 Is Null Is Null Descending,Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(_usn3 In True[7][$999] Where {usn2})][Any(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)] Ascending Limit {usn2:_usn4 Is Null}[[True =~_usn3 =~123456789,0Xa[@usn5][{`7esn`}],{`1esn`} Starts With `4esn` Starts With {0}]..] Where {_usn3}[..$`8esn`] Create ``=(({`4esn`:1000 Is Null Is Null})),Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))))) Remove Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})).`6esn`!,Case 12.e12[..1e1] When {1000}[{#usn8}] Then $@usn5[$`4esn`][$@usn6] Else 123456789 Ends With usn1 Ends With usn2 End.`5esn`"),
    octest_legacy:ct_string("Create Unique `6esn`=(`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->({usn1:{123456789} =~01234567 =~`3esn`})"),
    octest_legacy:ct_string("Return Distinct *,`7esn` Is Not Null Is Not Null As @usn5,`1esn`[Null..] As `2esn` Order By Extract(_usn4 In `2esn` Where $999 Is Null) In Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End In Any(`6esn` In 00 Where `5esn`[..9e0][..01234567]) Asc Limit `6esn`[{`6esn`}..] Detach Delete Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null] Detach Delete $`1esn` Ends With {12} Ends With 0xabc,7 Is Null Is Null,`4esn`[{1000}][{`5esn`}] Union Start `6esn`=Node:_usn4('s_str') ,#usn8=Node:`2esn`({_usn3}) Create `3esn`=Allshortestpaths(((_usn3 {usn2:_usn3[$usn2..0]}))) Load Csv From 12 In 0e0 As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge #usn8=(`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0}) Foreach(`7esn` In Count ( * ) =~{`5esn`} =~{_usn4}| Create @usn6=Shortestpath(((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))),(`2esn` :`5esn`:@usn5{_usn4:{`2esn`} Is Not Null Is Not Null,usn2:{`4esn`} In _usn4})<-[#usn7?:#usn8|`2esn`]->(#usn7 {usn1:$#usn7 =~{12} =~False,#usn7:0x0 =~123.654 =~{999}})-[`8esn`?]->(`3esn` :`6esn`:`8esn`)) Union Delete Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When $123456789 Is Not Null Then $_usn4 Is Not Null Is Not Null End[Case When #usn8 In `8esn` In 07 Then 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF] Else 12.e12[{7}..7] End..Case {12} Contains 9e0 When $1000[..12.0][..0e0] Then $_usn3 Is Null Is Null When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {7}[{`4esn`}][`6esn`] Else usn2[`7esn`..{`3esn`}][$7..{#usn7}] End],[`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] Create Unique (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))) Start `5esn`=Node:`6esn`(usn2={`8esn`}) "),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv From 123456789[0..] As _usn3  With Distinct _usn3[\"d_str\"],None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5]) Is Null Is Null Order By 0Xa[1000.._usn4] Asc,$0[..{usn2}][..$usn1] Desc Skip {#usn8}[12.0][$@usn6]"),
    octest_legacy:ct_string("Foreach(`1esn` In (`8esn` :`8esn`:@usn5)<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]->(#usn7 :`2esn`)-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Null Is Null| Return *,Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000)[[_usn4 In `2esn` Where `3esn` Is Not Null Is Not Null]..All(`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999])][(_usn4 {_usn3:9e1 =~999})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})..{`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}] As _usn3,Reduce(_usn4=.e1 Starts With $_usn4 Starts With {`1esn`},`6esn` In 00|usn2[True])[..[9e12[..0X7]]][..$`1esn`] Skip 0e0[..$@usn5][..$`8esn`] Limit Reduce(`3esn`={_usn3} Is Not Null,usn1 In 12.e12 In {0} In 9e1|0[Count(*)][0e0])[`6esn`(``[..0X0123456789ABCDEF])..Single(`` In {`1esn`} Starts With @usn6 Where {_usn3}[$usn2..])] Delete `6esn`[$0][#usn8],00,[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Optional Match Allshortestpaths((usn2 :`5esn`:@usn5)),Allshortestpaths((((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))))"),
    octest_legacy:ct_string("Create `8esn`=((#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null})<-[?:#usn7|`2esn`{@usn5:$0 Is Not Null}]-(`` {``:0x0 =~123.654 =~{999}})),(({`1esn`:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("Return `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}],{12}[010..{1000}][1e1...e1] Order By All(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])[[9e1[123456789..]]] Desc,1.0[..`4esn`][..{0}] Asc,{`3esn`} Is Not Null Is Not Null Asc Skip 12.e12 In {0} In 9e1 Limit {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Union Start `6esn`=Node:_usn4('s_str') ,#usn8=Node:`2esn`({_usn3}) Create `3esn`=Allshortestpaths(((_usn3 {usn2:_usn3[$usn2..0]}))) Load Csv From 12 In 0e0 As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Delete {`4esn`}[{`1esn`}][{1000}] Create Unique `5esn`=(usn2 :`5esn`:@usn5)<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[?:`7esn`]->(#usn7 :@usn6) Union With  *,Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null As usn2 Skip {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] Limit 0Xa[.._usn3][..$`6esn`] Foreach(#usn7 In {_usn4:$0[$1000..00][{0}..{usn1}]}[{`2esn`:$``['s_str'..][0x0..]}..]| Create Unique usn1=((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})),Allshortestpaths(((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(`4esn` {`2esn`:@usn5[$12..\"d_str\"]})))) Foreach(#usn8 In `4esn` Starts With $#usn7| Load Csv With Headers From 12.0[#usn7] As `3esn` ) Union Start usn2=Node:usn1(#usn8='s_str') Where 7 Contains `2esn` Contains $`8esn`"),
    octest_legacy:ct_string("Merge `2esn`=Shortestpath((((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`)))) On Create Set [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07].`6esn`? ={#usn8} Ends With 1.0 Ends With 12.0,`4esn` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) On Match Set `2esn`+=Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})],`3esn` =$12 Starts With $`8esn`,@usn5 =Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) Return *,$7 In 1.0 In 1e1,0X7 Starts With {999} Starts With 12e12 As @usn5 Skip `6esn` Ends With 2.12 Ends With @usn6 Create `5esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),#usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)) Union All Foreach(_usn3 In 123456789[12..$`4esn`]| Detach Delete {`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}[Case When 1.e1[0X0123456789ABCDEF..] Then `6esn`[..{999}] When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} End..Filter(_usn3 In {@usn5}[..#usn7] Where {_usn4} Is Null)],Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})]) Unwind `5esn`[..9e0][..01234567] As @usn5 Create Unique @usn6=Shortestpath(((usn1 :`5esn`:@usn5)-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:usn2:`2esn`{usn1:$7 Is Null Is Null})-[? *01..07]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}))),((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) Union Remove Shortestpath((:_usn3{#usn7:#usn8 =~{999}})).@usn5?"),
    octest_legacy:ct_string("Create Unique (({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})-[:#usn7|`2esn` *01..07]->(`1esn` {#usn7:Count ( * )[$12..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})) Return `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By @usn6[$usn2..#usn7] Ascending,{`3esn`} Ends With 0 Ends With 9e1 Desc Limit {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}[..({``:.e1 Contains $`3esn`})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})] Unwind (:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) Ends With `6esn`() Ends With Shortestpath(((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})-[:#usn8|`2esn`]->(:`3esn`:`6esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))) As #usn8"),
    octest_legacy:ct_string("Remove Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))).@usn5 Foreach(#usn7 In $`1esn`[#usn8][$@usn5]| With Distinct Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] As usn2,{usn1}[01..7][{`3esn`}..`6esn`] Limit Reduce(`6esn`=7[$0..][{_usn4}..],_usn3 In {`2esn`} Ends With {12} Ends With 7|{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)[[$#usn7[`5esn`],Count(*) Ends With 123.654 Ends With $12,$#usn7[..@usn6][..$0]]] Where 0.e0 =~`1esn` =~`6esn` Create Unique usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]})))) Create Unique Allshortestpaths((((:#usn7{#usn7:$`8esn` In $`2esn` In {7}})-[`7esn`? *..0{`2esn`:07 =~$`8esn` =~9e1,``:`5esn`[0xabc..]}]->({`3esn`:{@usn5} Is Null,`5esn`:{`2esn`} Ends With {12} Ends With 7})-[? *01..07]->(`3esn` {`1esn`:$`6esn` Starts With 12.e12 Starts With $#usn7})))),_usn3=Allshortestpaths(((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})))) Union Foreach(#usn8 In $usn1 =~010 =~07| Optional Match Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Using Scan `2esn`:@usn6)"),
    octest_legacy:ct_string("Return Distinct 0Xa Contains #usn8 Contains 1000 Order By `8esn` Is Null Is Null Desc,Reduce(usn1=1e1 Contains usn2,`8esn` In $12[{7}..0X0123456789ABCDEF]|#usn7 =~{`4esn`} =~123456789) Contains `3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) Descending,{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} Asc Limit Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..] Return Distinct *,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7,.e1 Ends With 0Xa Ends With 00 As _usn3 Order By usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) Ascending,.e1 =~$`5esn` Desc,Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null Ascending Limit 12 Starts With 7 Starts With $`5esn` Union Create `8esn`=({`2esn`:{7}[$7..],#usn7:`1esn` In 07})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}),usn1=(((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})-[?:#usn7|`2esn` *0x0..]->(_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[#usn7:@usn6|`` *01..07]-(`6esn` :`8esn`:@usn5))) Union Return `7esn` Is Not Null Is Not Null,Reduce(#usn7={`1esn`} Starts With `4esn` Starts With {0},`3esn` In 123.654[1e1..][{#usn8}..]|9e12[$`5esn`]),Allshortestpaths((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})<-[@usn6?:#usn7|`2esn` *12..{#usn8:12 Starts With 7 Starts With $`5esn`}]->(usn2 {_usn3:$0 In _usn4}))) Is Null Limit [{usn2}[$`4esn`]] Starts With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Create Unique Shortestpath((`7esn` :`1esn`)<-[`1esn`?:`4esn`|:#usn7 *..01234567]-({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6})) Match Allshortestpaths((usn2 :`5esn`:@usn5)),Shortestpath(((`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})<-[:`1esn`|:`3esn` *..01234567]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})-[``?:`4esn`|:#usn7 *07]-(_usn3 {@usn5:.e12 =~.e0}))) Using Index usn2:``(usn1)"),
    octest_legacy:ct_string("Unwind {12}[$`3esn`] As `6esn` Unwind {`7esn`}[..9e12][..0.0] As #usn7 Create #usn7=Shortestpath((:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]})),`7esn`=Allshortestpaths(((:@usn6{`2esn`:$999 In 999}))) Union Create `7esn`=((`5esn` :`7esn`)),({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(`4esn` :`2esn`{`8esn`:{@usn6}[0Xa..$@usn6][0..`5esn`],``:{@usn5} Starts With 1.0 Starts With 00})<-[:`1esn`|:`3esn` *1000]->(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0}) Match usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Using Index usn2:``(usn1) Where @usn6[$usn2..#usn7] Union Unwind {`7esn`} Ends With `` Ends With {`8esn`} As _usn3 Unwind $`5esn` Ends With 00 Ends With #usn7 As usn1"),
    octest_legacy:ct_string("With Distinct 01 =~$`1esn`,$usn1 Is Not Null Is Not Null As usn2 Order By {123456789}[12..][$12..] Desc Skip #usn8 =~{999} Limit Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Ends With @usn5(Distinct {0} Is Null) Ends With {`6esn`:`3esn`[..{_usn4}][..{@usn5}],`2esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]} Where {`8esn`}[..$`6esn`][..123.654] Detach Delete `` Is Null Is Null,{`4esn`}[{`1esn`}][{1000}] Merge `7esn`=(({@usn6:$`` Starts With 12 Starts With $usn2})) On Match Set (:_usn3$usn1)<-[`2esn`:`5esn` *0x0..{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})._usn4 =#usn7 Starts With $999 Union All Create (((_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]})<-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]->(_usn4 {_usn3:`1esn`[..00][..{7}]}))),`3esn`=(:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )})"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv With Headers From $#usn7 Is Null Is Null As _usn4 Fieldterminator \"d_str\" Match ``=((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[ *0xabc..7]->(:`4esn`:@usn6)-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})) Using Index `6esn`:usn2(@usn5) Using Join On ``,`2esn`,`8esn`"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv With Headers From 0.12[999][$#usn8] As usn1  Start #usn7=Relationship:usn2(_usn3='s_str') ,`4esn`=Node:`7esn`(``={usn2})"),
    octest_legacy:ct_string("Load Csv From 123456789 Starts With {999} As usn2 "),
    octest_legacy:ct_string("Create Unique `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})),usn1=(({`3esn`:12 Starts With 0x0,`8esn`:0X7[0.e0][{`4esn`}]})-[`5esn` *0x0..]->(`8esn` :#usn7)) Return Distinct $`2esn`[{usn2}] Limit Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) With Distinct @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) As @usn5,$`` =~{``} =~0.e0 Skip Case $@usn6 Contains $`7esn` Contains 1e1 When 0e0[$#usn8...e12] Then $7 Is Null Is Null Else {#usn8} =~{999} =~{#usn7} End Starts With (usn2 :``)<-[#usn7? *0X0123456789ABCDEF{usn1:.e1[@usn5]['s_str'],`2esn`:$`7esn` Is Null Is Null}]->({`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}) Where {_usn3} Contains True Contains 0X7 Union All With  12.0[010],{@usn5} Is Null Order By `3esn`[$@usn5..@usn5][9e1..$``] Desc,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] Descending,.e1 =~$`5esn` Desc Skip Count ( * ) Contains 12 Limit Extract(usn1 In 12.e12 In {0} In 9e1 Where 1000) Contains [0x0[$`8esn`.._usn3]] Contains count({`1esn`} Is Not Null,$`2esn` Ends With 0.12 Ends With .e1) Create Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})),#usn7=Allshortestpaths((`6esn` {``:`4esn`[usn1]})<-[`7esn`?{_usn4:9e1 Ends With Count(*) Ends With False,#usn7:$_usn4 Ends With 0.e0 Ends With .e0}]->({`1esn`:$123456789[..$7][..$`6esn`]})-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Return Distinct *,.e1 =~$`5esn` As @usn6,Count(*) Ends With 0x0 Ends With 9e0 As `2esn` Order By Any(`1esn` In `3esn`[07..] Where .e1 Starts With $_usn4 Starts With {`1esn`}) Starts With 0x0 Descending,Case $`2esn`[{``}..{1000}][#usn8..`2esn`] When #usn8 Is Not Null Then 12.e12 In $0 In $0 When usn2 =~0X7 =~{#usn7} Then {12}[usn2] End[..Extract(`6esn` In 00 Where 9e1 Ends With $@usn5 Ends With $123456789)][..(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[@usn6?:`8esn`|:_usn4 *0X7..0Xa{`3esn`:9e1 =~999}]-(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(:`7esn`{``:.e1 Contains $`3esn`})] Ascending,1.0 Ends With `8esn` Ends With {@usn6} Desc Skip {_usn3}[{0}]"),
    octest_legacy:ct_string("Unwind `7esn` Starts With 0X7 Starts With $`7esn` As `1esn` Create `3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})),_usn3=((`` {`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(`4esn` {`2esn`:@usn5[$12..\"d_str\"]})) Remove Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where _usn4 Is Null Is Null).``!,Case 7 Contains $`` Contains {`6esn`} When {#usn8}[2.12] Then $``['s_str'..][0x0..] When $7 Ends With $`8esn` Then {`7esn`}[``..] Else {123456789}[12..][$12..] End.`6esn`! Union Unwind 2.12 In 123456789 In usn1 As usn2 Create Unique Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})),``=(({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})<-[ *0xabc..7]->(`2esn` :`7esn`{`2esn`:Count(*)[010..][#usn7..]})) Merge `1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) On Create Set [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07].`6esn`? ={#usn8} Ends With 1.0 Ends With 12.0,`4esn` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})"),
    octest_legacy:ct_string("Start ``=Rel:`4esn`(#usn8='s_str') ,_usn3=Node(01,0x0,0X7,0X7)Where `2esn` Ends With $`4esn` Ends With {#usn7} Create `8esn`=(@usn6 :#usn7)<-[`6esn`?]-(`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}}),#usn7=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Union All Match #usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})) Where {#usn8}[$#usn7..] Union All With  *,usn1 Is Not Null Is Not Null As #usn8,12 Is Not Null Is Not Null As _usn4 Order By {`7esn`} =~1e1 Asc,1000 Starts With `7esn` Descending,{`4esn`:`7esn` Contains `5esn` Contains 0X7} Ends With Allshortestpaths((`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4)) Descending Unwind Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] As #usn7 Load Csv From None(`1esn` In $12 Is Not Null Where Null Is Null Is Null) Contains $`6esn` Contains exists(Distinct {`3esn`} Is Null) As `2esn` "),
    octest_legacy:ct_string("Create `4esn`=((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-({`1esn`:$123456789[..$7][..$`6esn`]})) Foreach(_usn4 In $`` In \"d_str\"| Load Csv From `4esn` Is Not Null Is Not Null As `7esn` Fieldterminator \"d_str\" Return ``[{#usn8}]) Load Csv With Headers From {#usn8} Is Null Is Null As usn2 Fieldterminator \"d_str\" Union Optional Match Allshortestpaths(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[usn1?:usn2|#usn7 *01..07]-(@usn6 {`5esn`:\"d_str\" =~`1esn` =~{`5esn`}})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]}))) Using Index `4esn`:`3esn`(`3esn`) Merge (`6esn` :`2esn`{`7esn`:#usn8 =~{999}}) On Create Set @usn5+={#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null,usn1 =\"d_str\" Is Null Is Null"),
    octest_legacy:ct_string("Create Unique ``=Shortestpath((:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})) Return Distinct *,7[1000.._usn3][9e0..\"d_str\"],(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})-[`4esn`?:_usn4|:usn1 *999{_usn4:{7} Starts With $usn1 Starts With 1.0,#usn7:$1000[..12.0][..0e0]}]-(#usn7 :`2esn`)-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}) In {`3esn`:1e1 Contains usn2} Order By `4esn`({`2esn`} Starts With @usn6,{`2esn`}[..{@usn6}][..1.e1]) Ends With Any(`2esn` In {999} Is Not Null Where #usn8 =~{_usn3} =~``) Desc,None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] Descending,{_usn4} In {`6esn`} In `1esn` Descending Skip $usn1[False][999] Merge usn1=Allshortestpaths((:_usn3{`8esn`:9e1 =~999}))"),
    octest_legacy:ct_string("Create @usn5=Shortestpath(({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})),`7esn`=((usn1 )<-[`7esn`]->(@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})<-[{`2esn`:``[{123456789}..]}]->(@usn6 :`6esn`:`8esn`)) Union Merge ``=Shortestpath((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[#usn8?:#usn8|`2esn` *0X7..0Xa{usn2:{1000},`6esn`:#usn8[`7esn`..]}]->(:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})) On Match Set {`5esn`:#usn8 In `8esn` In 07,`5esn`:.e1[..\"d_str\"]}.usn1! ={0} =~12.0,Reduce(`3esn`={7} Starts With $usn1 Starts With 1.0,_usn3 In True[7][$999]|123.654[{@usn5}..123.654][1.0..$12]).#usn8 ={_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))),`5esn` =0Xa[1000.._usn4] Remove Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where $usn1 In 0.12 In $``|Null =~12e12).`7esn`!,{#usn8:12.0 =~$#usn7 =~9e12}.@usn6!,Reduce(_usn3=12 Starts With 0x0,_usn4 In 0.0[..{999}][..0.0]|$usn1[..'s_str'][..$#usn8]).`6esn`! Unwind `7esn` Is Not Null Is Not Null As `6esn` Union All Remove `1esn`:usn1:_usn4,{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12}.@usn6,Reduce(@usn6=#usn8 Is Null,`2esn` In {999} Is Not Null|{_usn3} Is Not Null).`6esn` Foreach(`1esn` In {12}[$`3esn`]| Remove {usn2:{`6esn`} Ends With 0e0 Ends With {``}}.``?) Merge `4esn`=(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 :`4esn`:@usn6)<-[:`6esn` *0xabc..7{`8esn`:0X7[0X7..][Count ( * )..]}]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})))"),
    octest_legacy:ct_string("Return 's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Delete True[7][$999],Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Foreach(#usn8 In {123456789}[12..][$12..]| Remove Case When $`3esn` In 9e12 In `` Then 9e0[#usn8] When {999} Starts With {12} Then 7 Is Null Is Null End._usn4!,{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}.#usn8 Remove {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]}.`2esn`!) Union With Distinct *,All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Skip [`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7}|usn2[`7esn`..{`3esn`}][$7..{#usn7}]][..[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|9e12[..0X7]]][..[`2esn` Ends With $`4esn` Ends With {#usn7},'s_str'[..0X7],{#usn8} =~{999} =~{#usn7}]] Union Create Unique usn1=Allshortestpaths((`2esn` :#usn8{@usn6:`7esn` Ends With $_usn3 Ends With usn2,_usn4:{12} Starts With #usn8 Starts With 0e0})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})),#usn7=Allshortestpaths((({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True}))) Delete 0.0 In `6esn` In $@usn5,9e12 In 1e1 In .e12,1.0[..`4esn`][..{0}] Foreach(`1esn` In $#usn7[`5esn`]| Start ``=Rel:_usn4({`2esn`}) ,`7esn`=Node:`4esn`(``='s_str')Where 1000 Is Not Null)"),
    octest_legacy:ct_string("Remove Shortestpath(((usn2 :_usn3{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000}))).@usn6? Union All Unwind Case #usn7 Ends With $#usn7 Ends With {`8esn`} When Count(*) Ends With 123.654 Ends With $12 Then $`3esn` Contains 0 Contains 07 When 0.e0 Ends With False Then {@usn6}[True..{_usn3}] Else 9e1 Ends With Count(*) Ends With False End Starts With [$usn1 In 01234567 In .e1,9e1 =~999,$0[$1000..00][{0}..{usn1}]] Starts With Allshortestpaths((`5esn` $`8esn`)<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})) As `5esn`"),
    octest_legacy:ct_string("Unwind Count ( * )[..12][..{@usn6}] As @usn5 Optional Match ((:_usn3{`8esn`:9e1 =~999})-[@usn5:usn2|#usn7 *..7]-($_usn3)<-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`3esn` :#usn7)) Using Scan `8esn`:#usn7 Using Scan `2esn`:#usn7 Start `6esn`=Node:_usn4({`8esn`}) Where 12.0 =~$#usn7 =~9e12 Union Foreach(#usn7 In {@usn6} Contains 123.654 Contains 01| Remove [0.0[..{999}][..0.0],12.e12[2.12..][0xabc..],True[7][$999]].@usn6 Delete Filter(#usn7 In 123.654 Starts With $`` Where Count(*)[010..][#usn7..])[None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0})..])"),
    octest_legacy:ct_string("With Distinct *,$999 Is Not Null Is Not Null As `3esn`,[00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])] As #usn7 Order By $`2esn` Ascending,$`1esn`[..{_usn3}] Desc,$`1esn`[07] Desc Skip 9e12 Ends With 123456789 Union All Unwind _usn4 Contains 0X0123456789ABCDEF Contains {_usn4} As `2esn` Start `4esn`=Node(01234567,0Xa,07)  Union All Create Unique _usn4=Allshortestpaths(((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-(`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null}))),``=Shortestpath((`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00}))"),
    octest_legacy:ct_string("Remove Extract(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`|{`6esn`} Ends With 0e0 Ends With {``}).`1esn`! Union All Unwind {12}[999][{_usn3}] As `3esn` Foreach(`1esn` In `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null) Contains [`1esn` In `3esn`[07..] Where {`4esn`}[{`4esn`}..999]|0e0[..$@usn5][..$`8esn`]]| With Distinct *,0X0123456789ABCDEF Contains {usn1} As @usn5 Order By (:usn1:_usn4)<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[usn2?:`2esn`*..]-(:`5esn`:@usn5{``:0.12[..$`6esn`][..$1000]}) Starts With Reduce(`8esn`=00[..$123456789][..$`5esn`],`` In {`1esn`} Starts With @usn6|False[999]) Starts With [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]] Descending,`2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] Asc,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] Asc Skip #usn7[00] Limit Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]])"),
    octest_legacy:ct_string("Create usn2=(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}),((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))) Union Unwind [usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] As `2esn` Match ``=Shortestpath(((@usn6 :`4esn`:@usn6{#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}))) Using Scan ``:usn2 Using Join On #usn7,@usn5 Where #usn8[$0..False][$`1esn`..$#usn7] Union All Remove Case 12.e12[$`8esn`..{`8esn`}] When {``} Starts With 123456789 Starts With usn2 Then 12.e12[{7}..7] End.`7esn`,usn1:`3esn`:`6esn`,Filter(#usn7 In 0Xa[@usn5][{`7esn`}] Where #usn7 Starts With $999).usn1!"),
    octest_legacy:ct_string("Return Distinct usn1[0] As ``,9e12 Is Not Null Is Not Null Order By {`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}[Filter(`6esn` In 00 Where 0Xa[0e0..{#usn7}])..] Desc Limit 9e0 In usn1 Create Unique ((_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),(`1esn` :`7esn`)-[@usn5?:@usn5|:`7esn`]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}) Union Detach Delete {_usn4}[{``}..] Union Remove Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..]).``!"),
    octest_legacy:ct_string("Load Csv With Headers From {`6esn`} Contains {usn2} Contains $1000 As `3esn` Fieldterminator 's_str' Merge _usn4=(({`5esn`:0Xa[0e0..{#usn7}]})<-[?:``]-(`7esn` :`3esn`:`6esn`)) On Match Set `5esn`+=Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..],[`6esn` In Count(*) Ends With $`` Ends With {7} Where @usn5 =~'s_str'|{_usn3} Contains 9e0 Contains $999].usn2 =9e12 Is Null On Match Set `5esn` =True[..010],#usn8+=Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}),`3esn` =@usn6[$_usn4] Remove Case When {`1esn`}[$`4esn`..][False..] Then $usn2 Is Null Is Null End.`5esn`?,All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0}).`8esn`? Union All Create #usn7=Allshortestpaths(((:`5esn`:@usn5))),(((`5esn` :@usn6)<-[`1esn`?:_usn4|:usn1*]->(usn1 :`5esn`:@usn5)<-[ *123456789..0X7]-(:`7esn`{``:.e1 Contains $`3esn`}))) Union All Merge Shortestpath((({`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->(`2esn` :``)<-[`1esn`?:_usn4|:usn1*]->(usn2 :``))) On Create Set usn1 =#usn8 In `8esn` In 07"),
    octest_legacy:ct_string("With Distinct Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)[..Case 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0] When `4esn` Contains #usn8 Contains 7 Then 12 Ends With 01 When {999}[$123456789..][12..] Then {`4esn`} In _usn4 Else {#usn7}[Count ( * )..12][$`2esn`..`4esn`] End],Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End Skip {7}[$123456789..{1000}][$`3esn`..`7esn`]"),
    octest_legacy:ct_string("Start @usn6=Rel:_usn4(``=\"d_str\") Where 12 Starts With 0x0 Delete 9e12 Ends With 123456789,0X0123456789ABCDEF[$`5esn`..],{`3esn`} =~[1.e1 =~$usn2] =~Filter(`6esn` In 00 Where `5esn`[..9e0][..01234567]) Union All Create Unique `5esn`=Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))),`8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0})) Match `8esn`=Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]})) Using Scan `6esn`:#usn8 Using Index `7esn`:`1esn`(`2esn`) Where {`4esn`} In _usn4 Start @usn5=Node:`6esn`(#usn8={`5esn`}) ,usn1=Rel(12,1000,1000,0X7)Where 1.e1 Starts With $`2esn` Starts With $0"),
    octest_legacy:ct_string("Delete $_usn3[..$`2esn`][..\"d_str\"],{`3esn`}[{123456789}..][{usn1}..],True Starts With $`4esn` Starts With 12e12 Match `6esn`=((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->({``:.e1 Contains $`3esn`})),Allshortestpaths(((`` {``:$0[..{usn2}][..$usn1]})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) Using Join On `6esn`,#usn7 Using Scan `1esn`:`3esn` Union Merge _usn3=((:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})<-[@usn6?]->(`3esn` :`4esn`:@usn6{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]})) On Match Set _usn4 =9e0 Starts With .e0 Starts With \"d_str\",`4esn` =Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))),@usn6+={999} Starts With {_usn4} Starts With 00 Match usn1=((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})),`8esn`=(`6esn` {``:`4esn`[usn1]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}) Using Scan `4esn`:#usn8 Union All Start @usn6=Rel:`2esn`(`5esn`='s_str')  Merge Shortestpath(((_usn3 :`6esn`:`8esn`{`4esn`:$usn1 Starts With $999 Starts With {@usn5},`7esn`:``[..$#usn7]}))) On Create Set `3esn`+=2.12 In $`8esn` In {`7esn`},_usn4 ={`2esn`} Ends With {#usn7} Create _usn4=Allshortestpaths((@usn5 :_usn4{_usn4:0X0123456789ABCDEF[$999..][@usn5..],`1esn`:_usn4 Is Null Is Null})-[:`3esn`|:@usn5{@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}]-(usn1 :@usn5)-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),((`2esn` :#usn8)<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}))"),
    octest_legacy:ct_string("Start _usn3=Relationship:#usn7({`4esn`}) Where ``[..0X0123456789ABCDEF] Union All Create Unique ``=Shortestpath(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Unwind (:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})<-[`4esn`:@usn6|``{_usn4:Count ( * ) Starts With 010 Starts With 0x0,`2esn`:1.0 In 9e1 In {`7esn`}}]->(usn2 {usn1:{`4esn`}[..07][..$`6esn`],`5esn`:'s_str'[..0X7]})-[? *0X0123456789ABCDEF]-(_usn3 :`5esn`:@usn5)[Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01])..] As `5esn` Load Csv With Headers From {#usn7} Is Null Is Null As `` Fieldterminator 's_str' Union All Load Csv From {@usn5}[1e1..][9e1..] As `8esn` "),
    octest_legacy:ct_string("Optional Match usn2=((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})<-[?:#usn7|`2esn` *0x0..]->({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) Using Scan _usn4:`2esn` Where 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF] Detach Delete `1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null] Load Csv From `` Ends With $`4esn` Ends With 0X0123456789ABCDEF As usn2 "),
    octest_legacy:ct_string("Load Csv With Headers From {#usn7} Is Null Is Null As `` Fieldterminator 's_str' Load Csv With Headers From ``[{123456789}..] As `3esn`  Create Unique Shortestpath((((:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})<-[:`1esn`|:`3esn` *1000]-(:usn2:`2esn`{`2esn`:@usn5[$12..\"d_str\"]})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00})))) Union With Distinct *,1.e1[`4esn`..][$`6esn`..] As @usn5 Skip `3esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],1000 Is Not Null) In {`1esn`:@usn6[$usn2..#usn7]} Where 12.e12[{@usn5}..][9e1..] Load Csv With Headers From [`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]][..{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}][..`4esn`(123.654[$`1esn`..Null][1000..{_usn3}])] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From {@usn5}[..#usn7] As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge #usn8=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}) Union Load Csv With Headers From All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null As usn2  Start `3esn`=Rel:``(usn1={`4esn`})  Match ``=((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[ *0xabc..7]->(:`4esn`:@usn6)-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})) Using Index `6esn`:usn2(@usn5) Using Join On ``,`2esn`,`8esn`"),
    octest_legacy:ct_string("Load Csv From 0.0 In `6esn` In $@usn5 As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From `1esn` In 07 As @usn5 Fieldterminator 's_str' Union All Foreach(_usn3 In (`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[_usn3?:_usn3|`8esn`{`4esn`:$`1esn`[07],`6esn`:00[07..]}]->(:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->({_usn3}) Is Null| Start #usn7=Node:usn2({@usn5}) ,``=Node:``(@usn6='s_str')Where {0}[..{`7esn`}]) Union All Match Shortestpath((usn2 :`5esn`:@usn5)<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[?:`7esn`]->(#usn7 :@usn6)) Using Join On usn2,`6esn` Where 9e12 =~123456789 =~$999"),
    octest_legacy:ct_string("Merge (`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) On Create Set {``:.e12 =~$_usn4}._usn4? =@usn6 Contains Null On Match Set [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0e0[$#usn8...e12]].#usn8 =Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]),Case When Count ( * ) Starts With 010 Starts With 0x0 Then 9e12[$`5esn`] When {999}[$123456789..][12..] Then {@usn5}[..{12}][..0x0] End.`8esn`? =$`6esn`[{`3esn`}..12],`6esn` =9e0 Contains @usn6 Contains {#usn7} Start `2esn`=Node:usn1({`7esn`}) ,@usn5=Rel( {`7esn`})Where 123.654[1e1..][{#usn8}..] Union All With Distinct `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}],{12}[010..{1000}][1e1...e1] Order By All(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])[[9e1[123456789..]]] Desc,1.0[..`4esn`][..{0}] Asc,{`3esn`} Is Not Null Is Not Null Asc Skip 12.e12 In {0} In 9e1 Limit {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Delete Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,`1esn`[..\"d_str\"][..$`5esn`],9e12 Is Null With Distinct (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] As usn2 Order By All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Desc Skip `7esn` =~.e12 =~$#usn7"),
    octest_legacy:ct_string("Start usn1=Node:_usn3(_usn3='s_str') ,`8esn`=Node(07,123456789,123456789)Where $`4esn`[..'s_str'][..`8esn`] Return *,$999 Is Not Null Is Not Null As `3esn`,[00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])] As #usn7 Order By $`2esn` Ascending,$`1esn`[..{_usn3}] Desc,$`1esn`[07] Desc Skip 9e12 Ends With 123456789 Union Optional Match @usn5=((`1esn` :`4esn`:@usn6)),(#usn8 :#usn8) Where 9e1 Ends With Count(*) Ends With False Create Unique Allshortestpaths((:_usn4{`1esn`:{123456789}[12..][$12..]})) Start _usn4=Node:`4esn`(_usn4={``}) Where {`2esn`} In 0Xa In {_usn3} Union All Delete 0e0[..$@usn5][..$`8esn`] With Distinct *,$123456789[..$7][..$`6esn`],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}) Skip Count(*)[..``][..#usn8] Limit 9e12[{123456789}..][$`2esn`..] Where 0X0123456789ABCDEF[$999..][@usn5..]"),
    octest_legacy:ct_string("Create Unique #usn7=((@usn6 :`2esn`)) Union Remove Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 0X7[0.e0][{`4esn`}]|``[00..$7]).`5esn`! Load Csv From Single(_usn3 In {@usn5}[..#usn7] Where ``[..$#usn7])[..{@usn5:_usn4[Count(*)],`6esn`:$`3esn` Contains 0 Contains 07}][..Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`])] As `6esn`  Foreach(@usn6 In 0Xa Contains Count ( * )| With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $#usn7 Is Null Is Null Descending,Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(_usn3 In True[7][$999] Where {usn2})][Any(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)] Ascending Limit {usn2:_usn4 Is Null}[[True =~_usn3 =~123456789,0Xa[@usn5][{`7esn`}],{`1esn`} Starts With `4esn` Starts With {0}]..] Where {_usn3}[..$`8esn`] Create ``=(({`4esn`:1000 Is Null Is Null})),Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))))"),
    octest_legacy:ct_string("Return Distinct Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}],$#usn8[{12}..] As `6esn`,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False)[[9e1[$_usn4..0xabc],{@usn6}[$`7esn`..][False..],#usn8 In `8esn` In 07]..Any(_usn4 In `2esn` Where $999 Is Null)] Skip Count(*)[.e12]"),
    octest_legacy:ct_string("Load Csv From Allshortestpaths((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))[Case When 123.654[$`1esn`..Null][1000..{_usn3}] Then ``[$0..][`1esn`..] When 00 Ends With `8esn` Then $usn2 Is Null Is Null Else $999 Is Null End..``(999 Starts With 's_str',1e1[1.e1..][123.654..])][Single(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{usn2:{1000},`6esn`:#usn8[`7esn`..]}] As `3esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove Reduce(usn2=$7 In 1.0 In 1e1,@usn5 In Null =~12e12|.e12[$7..][{`6esn`}..]).`4esn`,(:@usn5)<-[`1esn`?:`4esn`|:#usn7{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->(`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})-[`3esn`:`6esn`{`3esn`}]-(@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]}).`5esn`?,Case When {usn1} =~123.654 =~\"d_str\" Then 9e1[$_usn4..0xabc] Else {`4esn`} In _usn4 End.@usn5! Foreach(#usn8 In Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null]| Remove usn2:@usn5,Case 0.0 =~12.e12 =~1.0 When 0.e0 Ends With False Then 00[..$123456789][..$`5esn`] Else _usn3[$usn2..0] End.#usn8!,`8esn`:_usn3) Return 123456789 Is Null Is Null As `3esn` Skip {7}[`4esn`..1.e1][`4esn`..{`6esn`}] Union With Distinct 1e1[{_usn4}..123.654] Order By Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] Ascending,Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] Asc,usn1 Is Null Is Null Descending Start usn2=Node:usn1(`5esn`={_usn4}) ,_usn3=Relationship:``(_usn3={0})Where 1.0[{999}][$999] Union Load Csv From 0.12[010..][{0}..] As _usn4 "),
    octest_legacy:ct_string("Merge ``=(usn2 :`4esn`:@usn6)<-[_usn3?:@usn6|``]->(usn1 :`5esn`:@usn5) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] On Match Set ``+=$@usn6 Contains `7esn`,_usn4:`5esn`:@usn5"),
    octest_legacy:ct_string("Load Csv With Headers From 010 Ends With 01 Ends With {_usn3} As #usn8 Fieldterminator 's_str' Optional Match `7esn`=Shortestpath((((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})))),`6esn`=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))) Where {0} =~12.0 Union All Match `6esn`=Allshortestpaths((@usn6 :usn1:_usn4)),@usn6=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))) Using Index usn1:`3esn`(`3esn`) Using Join On usn2,`6esn` Union Load Csv From `4esn` Is Not Null Is Not Null As `7esn` Fieldterminator \"d_str\" Create Unique _usn4=Shortestpath(({`3esn`:`8esn` Contains 1e1,#usn7:_usn4 Is Not Null Is Not Null})-[:`1esn`|:`3esn` *..01234567{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(#usn7 {``:0x0 =~123.654 =~{999}})),#usn8=((`2esn` :@usn6)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)<-[`1esn`:`8esn`|:_usn4 *123456789..0X7$12]->(:`1esn`{`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})) Load Csv From `1esn` In 07 As `8esn` "),
    octest_legacy:ct_string("Remove None(#usn7 In 0Xa[@usn5][{`7esn`}] Where $#usn7 Ends With 0.12 Ends With {@usn6}).`2esn`,Filter(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {1000}[01234567..$_usn4][{@usn6}..$_usn3]).@usn5! With Distinct {`5esn`}['s_str'..] As ``,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] As usn2,{#usn8} Is Null Is Null As `1esn` Order By 12 In 999 Descending,[{0}[False..@usn5]] Starts With {`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]} Starts With Shortestpath((:_usn3{0})-[usn2 *12..]->(:``)) Desc,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] Asc Skip 0Xa Contains #usn8 Contains 1000 Where {`4esn`} Starts With $7 Starts With $`` Create `2esn`=((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})) Union All Load Csv From {#usn8}[$#usn7..] As `8esn` Fieldterminator \"d_str\" Start _usn4=Node:`4esn`(`2esn`={``}) Where False Starts With 010 Create Unique ((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0})),``=Shortestpath(((`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv From {usn1}[$`8esn`..0.0] As `1esn` "),
    octest_legacy:ct_string("Load Csv With Headers From All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.e12[$`8esn`..{`8esn`}]) Is Null As usn2  Start `3esn`=Rel:``(usn1={`4esn`})  Match ``=((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[ *0xabc..7]->(:`4esn`:@usn6)-[?{`7esn`:{``} Ends With .e12 Ends With 0.e0}]-(`4esn` {`2esn`:12 Starts With 7 Starts With $`5esn`})) Using Index `6esn`:usn2(@usn5) Using Join On ``,`2esn`,`8esn` Union With Distinct *,#usn8 Is Not Null,$usn2 Starts With $@usn6 Starts With 010 As _usn4 Where $`1esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Optional Match (({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)),_usn3=Shortestpath(((`` {``:0x0 =~123.654 =~{999}})-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999}))) Using Scan _usn4:`4esn` Where $@usn5[`1esn`..] Remove Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..]).``! Union Merge ({_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}) On Match Set #usn7 =`4esn`[usn1],{`2esn`:9e12 Is Not Null Is Not Null}.usn2? =Single(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * ))[Any(`6esn` In 00)..Allshortestpaths((((:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]})<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`))))],``(True[True..],$_usn4).`5esn`? =`4esn` =~12.0 =~{`3esn`} Unwind {_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))) As `4esn` Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create ((:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})<-[`8esn`? *..7{`8esn`:{7}[{`4esn`}][`6esn`]}]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(:`6esn`:`8esn`$usn2)),_usn3=Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})) Optional Match Allshortestpaths((({_usn4}))),`7esn`=({#usn7:#usn8 =~{999}}) Where $@usn6 Starts With {`1esn`} Starts With 12"),
    octest_legacy:ct_string("With Distinct *,Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] As #usn8 Skip {_usn4}[{``}..]"),
    octest_legacy:ct_string("Remove Allshortestpaths(((:usn1:_usn4)-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)))._usn4 Foreach(`4esn` In Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End| Create (({`4esn`:1000 Is Null Is Null})),#usn8=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})<-[?:`6esn` *01..07]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[:`1esn`|:`3esn` *1000]-($12) Create Unique `4esn`=((#usn8 :usn1:_usn4))) Load Csv With Headers From Case 0xabc[$@usn5] When 9e1[$_usn4..0xabc] Then $12[{7}..0X0123456789ABCDEF] When 01 =~$`1esn` Then {1000}[\"d_str\"..{@usn5}][$1000..$#usn8] Else 1.e1[_usn4..][07..] End Is Not Null As `7esn` "),
    octest_legacy:ct_string("Remove usn2(Distinct 1e1[..01],$123456789 Is Not Null)._usn3? With Distinct *,Single(`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`)[..[$_usn4 Contains {#usn7} Contains `1esn`,{123456789} =~01234567 =~`3esn`]][..{`5esn`:{999} Starts With {_usn4} Starts With 00,usn1:$``['s_str'..][0x0..]}] As #usn8 Order By `6esn` Is Null Is Null Descending,`1esn` Is Null Is Null Asc Limit {12} In $12 In 0xabc Where False Contains $#usn8 Contains 9e1 Foreach(`2esn` In `` Ends With {usn1}| Detach Delete {#usn8}[usn1][1.0],1.e1[0X0123456789ABCDEF..],0e0[..{999}] Optional Match Allshortestpaths((usn2 :`5esn`:@usn5)),Allshortestpaths((((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[#usn8:`` *..0{@usn5:0 Contains $usn2 Contains 12e12,`2esn`:12e12}]->(#usn8 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}))))) Union All Start `6esn`=Node:_usn4({`8esn`}) Where 12.0 =~$#usn7 =~9e12 Remove [$0[`7esn`],0.12 Contains 12.0,True Is Null Is Null].``?,[`3esn` In 123.654[1e1..][{#usn8}..] Where Count(*) Starts With $usn1 Starts With {usn2}|{`4esn`}[..07][..$`6esn`]].`2esn`! Load Csv From {#usn7} Ends With 12e12 Ends With {123456789} As `7esn`  Union Merge #usn8=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})"),
    octest_legacy:ct_string("Create `5esn`=Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))),`8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0})) Return *,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Order By `6esn` Is Null Is Null Desc Union All Create Unique ((({usn2:$`5esn`[`4esn`][_usn3]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(usn1 {`3esn`:$usn1 In 01234567 In .e1,``:False[999]})-[_usn3 *..01234567$`5esn`]->({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null}))) Union All Merge ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})-[_usn4? *07{1000}]-(`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}) On Match Set [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']|\"d_str\"[{999}..]].@usn6? =Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) On Match Set _usn3+=_usn4[Count(*)],usn1 =010 Ends With 01 Ends With {_usn3},@usn6+=\"d_str\"[{`8esn`}..] Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:#usn8('s_str')"),
    octest_legacy:ct_string("Match Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})) Using Scan _usn3:`4esn` Using Scan `2esn`:`1esn` Where $123456789 Starts With $123456789 Starts With Count ( * ) Union All Remove Filter(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`]).`3esn` Foreach(`7esn` In ({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]})| Unwind {`3esn`} Ends With `1esn` Ends With $@usn6 As `2esn`)"),
    octest_legacy:ct_string("Remove Extract(`` In {`1esn`} Starts With @usn6 Where .e0[..{`5esn`}][..999]|$`3esn`[..$`2esn`][..123.654]).`4esn`!,count({@usn5}[..#usn7]).`1esn`,None(`5esn` In $`2esn`[12.e12][$@usn5] Where 9e1[9e1...e0]).`8esn` Union All Remove `8esn`(Distinct 9e12[$`5esn`],$123456789 Is Not Null).`3esn`! Delete 0e0[..$@usn5][..$`8esn`] Union Load Csv From $0[..{usn2}][..$usn1] As _usn4 Fieldterminator 's_str' Create Unique `5esn`=Allshortestpaths(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]}))),`6esn`=Allshortestpaths((`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]}))"),
    octest_legacy:ct_string("Remove [{`1esn`} In 12.e12 In 9e1,usn1 In 00 In {_usn3},`8esn` Starts With {123456789}].`7esn`,Case 0.e0 =~`1esn` =~`6esn` When $`1esn`[$12][Count ( * )] Then 0Xa Contains {`7esn`} Contains $999 Else 0.12[..$`6esn`][..$1000] End.`1esn`! Load Csv From 12 Starts With 7 Starts With $`5esn` As `3esn`  Create Unique `5esn`=((`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)),((#usn8 :usn1:_usn4)<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})) Union All Detach Delete 2.12 In $`8esn` In {`7esn`} Union All Remove ({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})<-[?{#usn7:1e1[1.e1..][123.654..],`3esn`:True Starts With $`4esn` Starts With 12e12}]-(`1esn` :`6esn`:`8esn`{usn2:Count ( * )[..12][..{@usn6}]})<-[:#usn7|`2esn` *0x0..]-({`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}).#usn8!,Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `6esn`[..{999}]).#usn8? Start #usn7=Node( {#usn7}) ,`5esn`=Node:``({`8esn`}) Foreach(`` In {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]]| Create Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) Create _usn3=Shortestpath(((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7))))"),
    octest_legacy:ct_string("Merge `4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) On Create Set `7esn` =[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999),Reduce(#usn7=_usn3 Contains .e0 Contains {usn2},_usn4 In `2esn`|{@usn6} In {#usn7} In 12.e12).@usn6 =Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})],Extract(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]|`1esn`[Null..]).`4esn`? =0Xa Is Not Null Is Not Null On Create Set #usn7+=Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End]"),
    octest_legacy:ct_string("Using Periodic Commit 123456789 Load Csv With Headers From (usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}) Contains {`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]} As `8esn`  Create Unique Allshortestpaths(((:`5esn`:@usn5)-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[ *0x0..{`2esn`:9e0 In .e1 In 1.e1,usn2:{@usn6}[$`7esn`..][False..]}]->(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})))"),
    octest_legacy:ct_string("Unwind 0xabc[9e12][0X0123456789ABCDEF] As _usn3 Remove Single(`2esn` In {999} Is Not Null Where $usn1[@usn6][#usn7]).#usn8? Remove ({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Union All Return Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] As usn2,Allshortestpaths((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))[..[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8]][..(:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})],00 Ends With `8esn` As #usn7 Skip Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})] Limit `4esn`[usn1] Union Remove [Count ( * )[$12..]].usn1!,[$usn1 In 0.12 In $``].`8esn`?,[#usn7 In 0Xa[@usn5][{`7esn`}] Where 0x0 Ends With {``}].`1esn`! Load Csv From `3esn`[_usn4..{0}][`5esn`..usn2] As usn1 Fieldterminator 's_str' Create Unique #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null})))"),
    octest_legacy:ct_string("Unwind 0[{@usn5}..][7..] As usn1"),
    octest_legacy:ct_string("Remove Shortestpath((:_usn3{#usn7:#usn8 =~{999}})).@usn5? Union Detach Delete Count(*)[010..][#usn7..],usn2[..`1esn`],1.e1 =~$usn2"),
    octest_legacy:ct_string("Load Csv With Headers From None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `8esn` Fieldterminator 's_str' Create Unique `8esn`=Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(`1esn` :@usn6))),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Start `3esn`=Node:`2esn`(@usn6={`4esn`}) Where False[999]"),
    octest_legacy:ct_string("Unwind $`` Contains 1.e1 As usn2 Delete Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],Reduce(usn1=$usn1[..'s_str'][..$#usn8],`8esn` In $12[{7}..0X0123456789ABCDEF]|.e1[0.12])[[@usn5 In Null =~12e12 Where {_usn4} In {1000}|12.e12[``..usn2][{#usn7}..@usn5]]..All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1})],Count ( * )[\"d_str\"][_usn3] Delete $`1esn` Starts With 9e1 Starts With 1.e1,$@usn6[$0..usn1][0X0123456789ABCDEF..$999],[`6esn` In Count(*) Ends With $`` Ends With {7} Where {`3esn`} Ends With `1esn` Ends With $@usn6][None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where {`4esn`}[..{`4esn`}])..]"),
    octest_legacy:ct_string("Merge ({_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}) On Match Set #usn7 =`4esn`[usn1],{`2esn`:9e12 Is Not Null Is Not Null}.usn2? =Single(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * ))[Any(`6esn` In 00)..Allshortestpaths((((:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]})<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`))))],``(True[True..],$_usn4).`5esn`? =`4esn` =~12.0 =~{`3esn`} Unwind {_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))) As `4esn` Load Csv With Headers From Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})] As @usn5 Fieldterminator \"d_str\" Union All Load Csv From Case $123456789[..$7][..$`6esn`] When 0.e0 Contains #usn7 Then {`6esn`} Contains 07 When {_usn4} In {1000} Then ``[..$#usn7] End[Shortestpath((usn1 :usn1:_usn4))..][Reduce(@usn6={`4esn`} Starts With $7 Starts With $``,`` In {usn1} Ends With {`6esn`} Ends With 123456789|$`6esn` Starts With 12.e12 Starts With $#usn7)..] As `3esn`  Unwind 12e12 Starts With `1esn` Starts With usn2 As `4esn` Union All Load Csv With Headers From {`5esn`} Contains 123456789 Contains 9e12 As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique `6esn`=(_usn3 {@usn5:.e12 =~.e0})-[?:`7esn`]-(usn2 :`4esn`:@usn6)-[?:@usn6|`` *1000]-(`5esn` :`7esn`),@usn5=((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))) Detach Delete 0X7[0X7..][Count ( * )..],$`5esn`[$#usn8..][_usn3..],{12} =~0.e0 =~{_usn3} Union Start _usn4=Node:`6esn`({`1esn`}) ,`3esn`=Rel:#usn8(\"d_str\")Where 12 Starts With 7 Starts With $`5esn` Foreach(`` In {12} =~0.e0 =~{_usn3}| Detach Delete 12.e12 In {0} In 9e1,$``[01],0.0 In `6esn` In $@usn5 Create Unique #usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}),`6esn`=(({@usn6:Null =~12e12}))) With  *,2.12[`8esn`][1e1],$usn1 Starts With {_usn3} As _usn4 Limit {`2esn`} In 0Xa In {_usn3}"),
    octest_legacy:ct_string("Remove Extract(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `1esn` =~1000 =~1000).@usn6?,Shortestpath((((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})))).usn1! Foreach(`6esn` In {_usn3}[{0}]| Detach Delete 12.e12 In {0} In 9e1,$``[01],0.0 In `6esn` In $@usn5 Start @usn5=Relationship:usn2({`5esn`}) ,@usn5=Node:@usn5(\"d_str\"))"),
    octest_legacy:ct_string("Load Csv From ({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})-[`8esn`{`8esn`:Null In .e0}]-(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}) =~All(@usn5 In Null =~12e12 Where 0X0123456789ABCDEF[$`5esn`..]) =~Extract(`1esn` In `3esn`[07..] Where 0X0123456789ABCDEF Is Null Is Null|$123456789 Starts With `5esn`) As @usn5 Fieldterminator 's_str' Remove [_usn4 In `2esn` Where {`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]].``!,[`6esn` In 00 Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|2.12 =~0x0 =~_usn4].`2esn`!,@usn6:`6esn`:`8esn` Union Unwind #usn7[9e0] As `` Union Unwind $@usn5 In $usn2 In {1000} As `4esn`"),
    octest_legacy:ct_string("Create Unique `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})),Shortestpath((usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) Create Unique `5esn`=Allshortestpaths(((_usn3 :`6esn`:`8esn`{`4esn`:$usn1 Starts With $999 Starts With {@usn5},`7esn`:``[..$#usn7]})-[#usn7?:`1esn`|:`3esn`]-(`7esn` :@usn5{`7esn`:{1000}[{usn1}][Null],`3esn`:7[$0..][{_usn4}..]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) Merge Shortestpath((_usn4 :#usn7{`8esn`:$999 Contains {7}})) On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] Union All Delete 999 Ends With .e12 Ends With .e1,{#usn8}[Null] Create #usn8=((`7esn` :@usn6)<-[#usn8? *0X7..0Xa$`2esn`]-(:`5esn`:@usn5{usn2:{#usn8}[12.0][$@usn6]})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(`2esn` :_usn3)),(`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}}) Union Unwind Reduce(@usn6=12 Is Not Null,`` In {usn1} Ends With {`6esn`} Ends With 123456789|.e1 Ends With {7} Ends With $usn1)[Case {12} Contains `7esn` Contains $_usn3 When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then Count ( * ) Starts With 010 Starts With 0x0 When $7 Ends With 0X7 Then {#usn8}[2.12] Else $7 In 1.0 In 1e1 End..][_usn4(Distinct 0.12 Ends With {1000} Ends With `6esn`,$_usn3 =~{_usn4} =~$`6esn`)..] As _usn3 Create Unique `6esn`=(_usn3 {@usn5:.e12 =~.e0})-[?:`7esn`]-(usn2 :`4esn`:@usn6)-[?:@usn6|`` *1000]-(`5esn` :`7esn`),@usn5=((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})))"),
    octest_legacy:ct_string("With  *,1000 As `5esn` Limit {`1esn`} In 12.e12 In 9e1 Merge usn1=Allshortestpaths((:_usn3{`8esn`:9e1 =~999})) Merge `2esn`=((`6esn` :_usn3{#usn7:$@usn6[01..@usn5][0x0..`4esn`],_usn4:9e12 =~123456789 =~$999})<-[usn1? *01..07]->({`1esn`:$123456789[..$7][..$`6esn`]})) On Match Set `1esn` =12e12 Starts With `1esn` Starts With usn2 On Match Set usn1 =1e1 =~#usn8 =~2.12,@usn6 =0e0[..1000] Union Unwind Any(`1esn` In `3esn`[07..] Where .e1 Starts With $_usn4 Starts With {`1esn`}) Starts With 0x0 As @usn6 Merge Shortestpath((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) On Match Set Shortestpath((:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})<-[`1esn`?]->(:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}})<-[:#usn7|`2esn`]->(`1esn` :`6esn`:`8esn`{usn2:Count ( * )[..12][..{@usn6}]})).@usn6? ={123456789}[12..][$12..],None(`1esn` In `3esn`[07..]).``? =01234567[$7..{12}] Unwind {`2esn`} In $123456789 In True As `2esn` Union All Match usn2=Allshortestpaths((({`1esn`:{123456789}[12..][$12..]})<-[``{_usn4:.e1[..\"d_str\"]}]-({@usn5:Count ( * ) Is Null})<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Using Index `4esn`:usn2(`4esn`) Return *,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] As usn1,@usn5 Is Not Null Is Not Null Order By 1000 Starts With `7esn` Descending Limit @usn5 Contains {0} Contains 9e12 Start `6esn`=Rel:`2esn`({_usn3}) Where $`7esn`[$``..][999..]"),
    octest_legacy:ct_string("Return Distinct Filter(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}) =~({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null}),{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} As #usn8,All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Skip `3esn`[07..] Union Load Csv With Headers From Count(*)[.e12..] As _usn4 Fieldterminator \"d_str\" Union All Foreach(`` In $`4esn` Starts With 0e0 Starts With _usn3| Create ``=(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})<-[:#usn7|`2esn` *1000]->(`5esn` :_usn4)-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`) Create Allshortestpaths((_usn3 :`3esn`:`6esn`{`3esn`:{`4esn`}[$123456789],`7esn`:`1esn`[Null..]})-[:_usn4|:usn1 *07]->(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]})<-[`1esn` *..00{`8esn`:{999}[$123456789..][12..],`2esn`:{123456789} Is Not Null}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}})),`3esn`=Shortestpath((({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`)))) Delete Count(*),$`` =~{``} =~0.e0 Merge `5esn`=(@usn6 :@usn5{usn2:{`6esn`} Ends With 0e0 Ends With {``}})<-[{`2esn`:``[{123456789}..]}]->(:_usn4) On Match Set `4esn` =Filter(_usn4 In 0.0[..{999}][..0.0] Where #usn7 =~{`4esn`} =~123456789) Is Not Null Is Not Null,_usn3 =`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) In Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`}))) In All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]) On Create Set Filter(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).``! =$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF,exists($`5esn`[`4esn`][_usn3]).@usn5 =$7[{`1esn`}],`2esn`({1000}[1000][$usn1]).`8esn`! =_usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..]"),
    octest_legacy:ct_string("Merge `3esn`=(:`3esn`:`6esn`{_usn4:{usn1} In Count ( * )}) Create Unique (:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})"),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv From {`3esn`} Is Null As @usn6 "),
    octest_legacy:ct_string("Foreach(usn2 In $_usn3[{#usn8}..`7esn`][0..$0]| Return Distinct *,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}),Allshortestpaths((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))[..[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8]][..(:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})] As `6esn` Order By {`2esn`} Is Not Null Is Not Null Descending,123.654 Ends With usn2 Ends With 0 Ascending,$`3esn`[..{`2esn`}][..``] Ascending Skip 1000[1000..$`2esn`][`8esn`..{`3esn`}] Limit 0.12 Ends With {1000} Ends With `6esn`) Union Merge `1esn`=(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF})-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(usn1 :`6esn`:`8esn`) On Match Set `1esn` =12e12 Starts With `1esn` Starts With usn2 On Create Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] Create Allshortestpaths((_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})-[? *1000]->(`5esn` {usn2:$#usn7 Starts With 9e0 Starts With 2.12})) Union Load Csv From 0 In 0.12 In _usn3 As `2esn` "),
    octest_legacy:ct_string("Match `5esn`=(:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[#usn8? *..01234567]-($_usn3) Using Scan _usn4:`7esn` Using Scan ``:#usn7 Where 0Xa[..{1000}][..$#usn7] Create (`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`),(((:`2esn`{_usn3:00,`2esn`:12e12 Is Not Null})-[?:@usn6|`` *..0Xa]-(_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})<-[`3esn`]-({_usn4:0.e0[{999}][{`1esn`}]}))) Union Start `4esn`=Rel:`8esn`(@usn6='s_str') Where `4esn` Contains #usn8 Contains 7 Remove Reduce(#usn7=$`7esn` Is Null Is Null,`1esn` In `3esn`[07..]|1000 Is Not Null)._usn3!,All(`2esn` In {999} Is Not Null Where {``} Ends With .e12 Ends With 0.e0).`1esn`! Union With  {@usn6} Contains 0e0 As @usn6,1e1[..`1esn`][..0e0] Order By 12.e12[$`4esn`..] Descending,{`2esn`}[@usn5..][{``}..] Descending Skip usn1 In 00 In {_usn3} Limit {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}[..({``:.e1 Contains $`3esn`})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})]"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv From $7 In @usn5 In {@usn5} As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind {usn2}[$`4esn`] As `3esn` Create `5esn`=((usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null})-[?:`4esn`|:#usn7 *..0]-({`7esn`:{`1esn`} =~{_usn4}})),Shortestpath(((`5esn` :_usn3{`4esn`:12.e12[``..usn2][{#usn7}..@usn5]})<-[:`1esn`|:`3esn` *..01234567]-({`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF})-[``?:`4esn`|:#usn7 *07]-(_usn3 {@usn5:.e12 =~.e0}))) Unwind 0X0123456789ABCDEF[7...e0][`1esn`..usn2] As `` Union All Start @usn5=Node:@usn5(\"d_str\")  Union All Create Unique ``=(:_usn3{`8esn`:9e1 =~999}),``=Shortestpath((:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})) Load Csv From Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Using Periodic Commit 0x0 Load Csv With Headers From 0X0123456789ABCDEF[$`7esn`..$``][0Xa.._usn3] As usn2 Fieldterminator 's_str' Create Allshortestpaths((_usn3 :#usn8{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})),`4esn`=(#usn7 {``:0x0 =~123.654 =~{999}})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})"),
    octest_legacy:ct_string("Load Csv With Headers From `2esn` As `4esn` Fieldterminator \"d_str\" Detach Delete Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End[(`8esn` :`2esn`)-[`8esn`]->(`8esn` :`8esn`:@usn5)..],{`5esn`} Starts With 12.0 Union All Unwind `7esn` Is Not Null Is Not Null As `6esn` Delete [`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]][{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]}..All(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null)] Foreach(@usn6 In count(Distinct 999[12.0..][#usn7..]) =~Allshortestpaths(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) =~@usn6(`8esn` Starts With {123456789},$`` Starts With 12 Starts With $usn2)| Create Unique (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})))"),
    octest_legacy:ct_string("Foreach(usn1 In {999} Is Null Is Null| Create Unique `4esn`=Shortestpath(((`6esn` {``:`4esn`[usn1]}))),`2esn`=Allshortestpaths((`4esn` {_usn4:12 Starts With {_usn4} Starts With $#usn8,_usn4:$@usn5[$`4esn`][$@usn6]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) Union All Load Csv From $@usn6 Ends With 01 Ends With 999 As _usn3 Fieldterminator \"d_str\" Detach Delete usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3),[$_usn3 Is Null Is Null,.e12 =~$_usn4,12.e12[2.12..][0xabc..]][..Case {#usn8}[#usn7..{`2esn`}] When $7 Is Not Null Then $@usn6[$`8esn`..][7..] When $`4esn`[..'s_str'][..`8esn`] Then `7esn` Contains {@usn5} Contains $123456789 Else 12.e12 In $0 In $0 End]"),
    octest_legacy:ct_string("Unwind [`` In {`1esn`} Starts With @usn6 Where 0Xa[$1000..$123456789]] Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null}) Starts With Allshortestpaths((`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})) As `3esn` Return Distinct #usn7[..12e12] As `1esn`,Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)],12[12e12] Order By [Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[{999}..][{_usn4}..])..] Descending,Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}|{1000}[{#usn8}]) =~All(#usn7 In 123.654 Starts With $`` Where $`5esn`[..{`2esn`}][..{0}]) =~Case _usn4 Is Not Null Is Not Null When .e1[..\"d_str\"] Then $#usn7 =~{12} =~False When {`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`] Then $#usn7 Ends With 0.12 Ends With {@usn6} Else 9e12[$`5esn`] End Desc Skip @usn6[$12] Create Unique `1esn`=Allshortestpaths((((:`7esn`{`1esn`:{1000} In {123456789},`4esn`:010 In `1esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)))) Union Unwind [0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..]) As @usn5 Union Create `2esn`=(`8esn` :`8esn`:@usn5)<-[{`2esn`:@usn5[$12..\"d_str\"]}]-(@usn6 :usn1:_usn4),`5esn`=(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}}) Delete {12} Contains `7esn` Contains $_usn3 Load Csv With Headers From {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])] As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge Allshortestpaths(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))) On Match Set `8esn`+={12} In $12 In 0xabc,`2esn` ={`2esn`} In $123456789 In True,@usn5+=0.0 In `6esn` In $@usn5 On Create Set `7esn`+=$0[_usn4..{`3esn`}][$#usn7..$#usn7],`6esn` ={1000}[{#usn8}],`5esn` =$`3esn`[{#usn7}..2.12][{``}..12] Unwind $usn2 Starts With $`5esn` As `3esn` Start usn1=Node:`7esn`(`5esn`={usn2}) "),
    octest_legacy:ct_string("Return Distinct {999}[9e1],$999 Is Not Null Is Not Null Order By Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] Ascending,12 Is Not Null Is Not Null Desc,$123456789 Is Not Null Asc Skip Reduce(#usn8=0X7 Starts With {999} Starts With 12e12,_usn4 In `2esn`|usn2[True]) Starts With [01234567[..9e1]] Starts With Reduce(@usn5=.e1 Ends With {7} Ends With $usn1,`` In {usn1} Ends With {`6esn`} Ends With 123456789|{`2esn`} In 0Xa In {_usn3}) Limit 9e1[$_usn4..0xabc] Create ({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})<-[? *0xabc..7]->(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6}),#usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Delete `2esn` Starts With `` Starts With 1e1,$@usn6[01..@usn5][0x0..`4esn`] Union All Load Csv From {#usn8}[usn2][{0}] As `2esn` Fieldterminator \"d_str\" Merge ((usn1 :usn1:_usn4)-[`6esn`?:@usn5|:`7esn`]->(`2esn` :@usn5{@usn5:{`2esn`} Is Not Null Is Not Null})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]})) On Match Set `5esn`+=Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8])[{`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]}..None(`` In {`1esn`} Starts With @usn6 Where $usn1[@usn6][#usn7])][Extract(_usn4 In `2esn` Where $999 Is Null|00[07..])..Shortestpath(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5))],`2esn`+=0xabc[$999..][{#usn7}..],`5esn`+=123.654 Contains $#usn8 Contains .e1 On Create Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] Union Merge (`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Unwind {`4esn`}[..{`4esn`}] As ``"),
    octest_legacy:ct_string("Start `5esn`=Relationship:`4esn`(#usn8=\"d_str\") ,#usn8=Node:``(#usn7=\"d_str\") Return Distinct 0e0 Starts With $@usn6 Starts With $`6esn` As `7esn`,0 In 0.12 In _usn3 As usn1,None(_usn3 In {@usn5}[..#usn7] Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000) Is Null Is Null As `8esn` Order By None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Ends With Case When 0x0[{999}..][{_usn4}..] Then Count(*)[.e12] When {_usn4}[...e12][..0xabc] Then Count(*) Ends With $`` Ends With {7} Else ``[{#usn8}] End Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 's_str' Starts With 12e12 Starts With $_usn4|True Starts With $`4esn` Starts With 12e12) Ascending,$`7esn`[$``..][999..] Descending"),
    octest_legacy:ct_string("Detach Delete 0X7[01..] With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $999[07..{#usn7}][1e1..0xabc] Ascending,2.12[`8esn`][1e1] Ascending,$7 In @usn5 In {@usn5} Desc Limit $usn1 In 0.12 In $`` Where {`6esn`} Contains 07 With  *,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null As @usn5,All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where {`4esn`}[..{`4esn`}])[(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})][Any(`2esn` In {999} Is Not Null Where $usn1[@usn6][#usn7])] As usn1 Skip (usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}) Contains {`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]}"),
    octest_legacy:ct_string("Load Csv With Headers From 0xabc Contains {1000} As @usn6  Union Start `5esn`=Node(01,0x0,0X7,0X7) ,usn2=Rel(123456789,01234567,01234567) Create Unique ``=(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}})<-[:#usn7|`2esn` *1000]->(`5esn` :_usn4)-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`) Start `4esn`=Node:@usn6(`5esn`={1000}) Where {@usn5}[1e1..][9e1..]"),
    octest_legacy:ct_string("With  *,010 Is Not Null Is Not Null As #usn7,123456789[12..$`4esn`] As `7esn` With  [usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] As @usn5,Count ( * ) Is Null As usn2,({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]] As `4esn` Skip $12 Starts With $`8esn` Where $_usn4 Contains {#usn7} Contains `1esn`"),
    octest_legacy:ct_string("Unwind [$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null As `6esn`"),
    octest_legacy:ct_string("Foreach(usn1 In $`1esn`[07]| Start ``=Rel:`7esn`(``={usn2}) Where {``} Ends With .e12 Ends With 0.e0) Union Optional Match `8esn`=(({#usn7:#usn8 =~{999}})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})) Union Match `7esn`=(((:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})<-[`2esn`?{``:123.654 Starts With $``,``:{``} Ends With .e12 Ends With 0.e0}]-(:_usn3{0})<-[`3esn`?{`3esn`:1e1 Contains usn2}]->(:`3esn`:`6esn`))),`2esn`=Shortestpath((usn2 )-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})) Using Join On `1esn`,#usn8 Using Scan usn2:@usn5"),
    octest_legacy:ct_string("Delete {123456789} Is Not Null Union Load Csv With Headers From {`5esn`} Starts With 12.0 As `4esn` Fieldterminator 's_str' With  *,$@usn5 In 's_str' In $12 As `2esn`,Count ( * )[{12}..{@usn5}][{#usn8}..Null] As `5esn` Skip `3esn`[_usn4..{0}][`5esn`..usn2] Where {@usn6}[$`7esn`..][False..] Foreach(`` In 00 Ends With `8esn`| Match _usn4=Shortestpath(((@usn5 :`3esn`:`6esn`{#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Using Index `1esn`:`4esn`(`1esn`))"),
    octest_legacy:ct_string("Start @usn6=Node:`4esn`(``='s_str') Where {`5esn`} Contains 's_str' Contains 9e1 Start `8esn`=Relationship(07,123456789,123456789) ,usn2=Relationship( {123456789})Where $0[$1000..00][{0}..{usn1}] Optional Match _usn3=((:@usn5{`3esn`:@usn5 =~'s_str',`1esn`:$`7esn` Contains {`1esn`} Contains 9e12})),_usn4=(((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}))) Using Index `3esn`:``(`5esn`) Using Scan usn2:_usn3 Where $12 Is Not Null"),
    octest_legacy:ct_string("With  123456789[12..$`4esn`] As `7esn` Order By $`1esn`[`6esn`..][00..] Ascending Skip Allshortestpaths((((:`8esn`:@usn5{usn1:\"d_str\"[..0.e0]})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7)-[ *0x0..{@usn6:'s_str'[_usn4..0x0],`4esn`:_usn4 In $usn1}]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}))))[..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where Count(*) Ends With 123.654 Ends With $12|0Xa[$1000..$123456789])][..[01 =~$`1esn`,1.e1[12e12..{`6esn`}],`8esn`]] Where $_usn3[010..False] Delete {_usn3}[..$`4esn`][..{`8esn`}],{`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))),[_usn3 In {@usn5}[..#usn7] Where 12.e12[{7}..7]][Case $`2esn`[{``}..{1000}][#usn8..`2esn`] When {999} Ends With 123456789 Ends With {@usn5} Then Count(*)[.e12..] When {_usn4}[{``}..] Then 0Xa[.._usn3][..$`6esn`] Else #usn8 In `8esn` In 07 End..][All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0])..] Unwind `2esn`(Null In .e0)[_usn3(Distinct {@usn6}[$`7esn`..][False..])..[`3esn` In 123.654[1e1..][{#usn8}..] Where $`5esn`[..{`2esn`}][..{0}]]] As `6esn` Union Delete Filter(#usn7 In 123.654 Starts With $`` Where Count(*)[010..][#usn7..])[None(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $999 Ends With {0})..] Union Merge `1esn`=((`4esn` {`7esn`:12.e12 In $0 In $0,@usn5:_usn4[Count(*)]})<-[? *..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})) On Match Set Single(usn1 In 12.e12 In {0} In 9e1 Where {`1esn`} In 12.e12 In 9e1).`6esn` =$999[07..{#usn7}][1e1..0xabc],Filter(#usn7 In 0Xa[@usn5][{`7esn`}] Where 12[..$@usn6]).`2esn` ={usn1}[{`5esn`}..],`6esn`+=Extract(_usn3 In {@usn5}[..#usn7] Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$`1esn`[#usn8][$@usn5]) Is Not Null On Match Set {#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]}.usn1 =(#usn8 )<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})[usn1($12 Is Not Null,\"d_str\" =~`1esn` =~{`5esn`})..],Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where `7esn` Starts With 0X7 Starts With $`7esn`).`4esn` =$@usn6[..123.654],_usn4:`4esn`:@usn6"),
    octest_legacy:ct_string("Merge @usn5=Shortestpath(({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[{``:\"d_str\"[{`8esn`}..]}]-({`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null})) On Match Set Extract(`2esn` In {999} Is Not Null Where {1000}[1000][$usn1]|{7} Is Null).`3esn`! =$#usn7[123.654],`1esn` =9e12 Is Null,@usn5+=0Xa[07..] Merge ``=((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 )) On Match Set `6esn` ={_usn3}[usn1][0],Shortestpath((@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})).@usn5? =\"d_str\" Contains @usn6 Contains 12.e12,`7esn`+=`3esn`[..{_usn4}][..{@usn5}] On Match Set Allshortestpaths((`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})-[:`3esn`|:@usn5]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})-[`2esn`?$_usn4]->({_usn4:0.12 Starts With 9e12 Starts With $`1esn`})).``! =``[{#usn8}..9e0][12.e12..0xabc]"),
    octest_legacy:ct_string("Delete $123456789 Starts With .e12,.e0[True..Count ( * )][#usn7..0X7],$`8esn` In $`2esn` In {7} Remove Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn1 Starts With {_usn3}|{123456789}[12..][$12..]).usn1?,[$``[..1.e1][..12],7 Contains $`` Contains {`6esn`}].`7esn`! Union All Return Shortestpath(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[:`5esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})))[[_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7[`5esn`]|{_usn3}[{0}]]..],0e0[{_usn3}..],.e1[..{`7esn`}][..{_usn3}] Skip {`2esn`}[12..][{_usn3}..] Union All Start ``=Relationship( {``}) ,`6esn`=Node:_usn4({`8esn`}) Detach Delete 0Xa[07..],{@usn6} Contains 0e0 Create Unique `3esn`=(({#usn7:$0 Is Not Null})),`2esn`=Allshortestpaths(((_usn4 :#usn8)))"),
    octest_legacy:ct_string("Foreach(_usn4 In (`` {@usn5:0[Count(*)][0e0]})-[`5esn` *0x0..]->(usn1 :usn1:_usn4)<-[`7esn`?:#usn7|`2esn` *01..07]-(`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})[Allshortestpaths(((:`7esn`{999})<-[`6esn`?:_usn3|`8esn`]->(`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})))..{`1esn`:$999 Ends With {0}}]| With  $12 Is Not Null As `6esn`,(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Is Not Null Is Not Null As `2esn`,$`4esn` In Null Order By 2.12[`8esn`][1e1] Descending Skip $1000 Is Null Is Null) Union All Load Csv With Headers From 9e12 In 1e1 In .e12 As `5esn`  With Distinct *,{999} Starts With {_usn4} Starts With 00 As `6esn`,(#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) As #usn7 Order By $@usn6 Starts With $123456789 Starts With 0X7 Desc Skip [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]] Limit $7 In 1.0 In 1e1 With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Order By {`5esn`:0.e0 Contains #usn7} Contains Reduce(_usn4=9e12 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|$_usn4[9e0..]) Contains [$0[..{usn2}][..$usn1]] Desc,01234567[{`7esn`}..] Descending,[{7} Contains $123456789,$``[..1.e1][..12],$`5esn`[..{`2esn`}][..{0}]] =~`3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) =~{`6esn`:{`3esn`} Ends With `1esn` Ends With $@usn6,@usn6:$usn1 In 0.12 In $``} Descending Skip .e0[..{`5esn`}][..999] Limit {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Where $123456789[..$7][..$`6esn`]"),
    octest_legacy:ct_string("Remove All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000]).@usn6?,{usn2:$`5esn`[`4esn`][_usn3]}.@usn6? Union All Return 123456789 Starts With {@usn6} Starts With $12,(_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Is Null As `1esn` Order By $`2esn`[{usn2}] Descending,1.e1 In 0Xa In $#usn8 Desc,{@usn6} Starts With @usn5 Starts With @usn6 Desc Skip [_usn4 In 0.0[..{999}][..0.0] Where ``[..0X0123456789ABCDEF]][Reduce(``=`6esn` Is Null Is Null,`2esn` In {999} Is Not Null|{12}[999][{_usn3}])..[_usn4 In `2esn` Where 0X0123456789ABCDEF[$`5esn`..]]] Limit `7esn` Contains `5esn` Contains 0X7 Match Shortestpath(((`2esn` {_usn4:`4esn`[usn1]})<-[`2esn`?{`3esn`:$7 In 1.0 In 1e1,@usn5:{@usn6} Contains 123.654 Contains 01}]->(@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}}))),`5esn`=(`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})-[:`3esn`|:@usn5{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}]-($`5esn`)-[? *07{#usn7:`5esn`[..9e0][..01234567]}]-({#usn8:0Xa Contains Count ( * ),`8esn`:Null Is Null Is Null}) Using Scan `3esn`:_usn3 Using Join On #usn7,@usn5 Where $_usn4[9e0..] Union With Distinct *,Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]] As usn1,1000 As `1esn` Skip True Is Null Is Null Limit $7 In 1.0 In 1e1 Unwind 9e12[$`5esn`] As @usn6"),
    octest_legacy:ct_string("Merge usn2=Allshortestpaths(({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) On Create Set [@usn5[12.0][{1000}]].`2esn`? ={`1esn`} Starts With {`3esn`} Union All Start #usn8=Node:`2esn`(#usn7={usn1}) ,_usn3=Node( {`7esn`})Where $_usn3[010..False] Create Unique @usn5=Allshortestpaths(({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})-[#usn8:#usn7|`2esn`]->(:@usn6{`2esn`:$999 In 999})),`1esn`=((`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})-[ *0xabc..7{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}]-({`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})-[`2esn`:`3esn`|:@usn5 *..010{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]}))"),
    octest_legacy:ct_string("Unwind $_usn4 As `8esn` Unwind $_usn4 As `8esn` Union All Delete Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]],{@usn5} Is Null"),
    octest_legacy:ct_string("Create Unique @usn5=(:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[`8esn`?:`4esn`|:#usn7{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}}),Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]})) Create Unique `1esn`=Allshortestpaths(((`8esn` :`7esn`)<-[?:`8esn`|:_usn4]-(`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999}))),#usn7=(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})-[?:_usn3|`8esn` *..0]->({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})<-[:usn2|#usn7 *0X0123456789ABCDEF{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null}]->(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}) Match `2esn`=Shortestpath(((#usn8 :@usn5)<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})-[ *..00]-(:`6esn`:`8esn`))),@usn5=(_usn3 :@usn5)-[?:#usn8|`2esn`{_usn4:{usn1} In Count ( * )}]-(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}) Using Index ``:`6esn`(usn1) Where 1.e1[12e12..{`6esn`}] Union All Match `4esn`=(:_usn3{`3esn`:{0} Is Null,#usn7:{0} Is Null})-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Using Join On ``,usn1,usn2 Using Index _usn3:_usn3(`6esn`) Where {123456789} =~01234567 =~`3esn` Match Allshortestpaths(((:`8esn`:@usn5{`5esn`:$`8esn`[..$999][..0],#usn7:$1000 =~{1000} =~`5esn`}))) Using Index `6esn`:`2esn`(`1esn`) Union With  *,None(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $#usn7 =~{12} =~False) Is Null As @usn5,All(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where {`4esn`}[..{`4esn`}])[(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF})<-[#usn8:`7esn`]-({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})][Any(`2esn` In {999} Is Not Null Where $usn1[@usn6][#usn7])] As usn1 Skip (usn1 :`6esn`:`8esn`)<-[_usn4?:`6esn` *0xabc..7$_usn3]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6}) Contains {`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]} Match Shortestpath((:`5esn`:@usn5{``:.e12 =~$_usn4})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`)<-[@usn5:_usn4|:usn1*]->(:@usn5)),@usn6=((`4esn` :`6esn`:`8esn`{`7esn`:Count(*)[.e12..]})<-[``?:#usn8|`2esn`]->(:`8esn`:@usn5)<-[#usn7]-(`3esn` :#usn7)) Where True[..010] Detach Delete $#usn7[`5esn`]"),
    octest_legacy:ct_string("Start @usn5=Rel:@usn5({`3esn`}) ,_usn4=Node:`4esn`(_usn4={``})Where {999} Is Not Null Optional Match @usn6=((`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[`5esn`:`5esn`]-(:usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})),usn1=Allshortestpaths((:`2esn`{`6esn`:_usn3 Contains .e0 Contains {usn2}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})) Using Scan `3esn`:_usn3 Using Scan usn2:_usn3 Union All Return Distinct 0Xa Contains {`7esn`} Contains $999 As ``,$#usn7[..{`4esn`}][..9e1] Create (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})) Detach Delete Single(`2esn` In {999} Is Not Null Where 123.654 Ends With usn2 Ends With 0) =~{#usn8:Count(*)[010..][#usn7..]} =~Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)"),
    octest_legacy:ct_string("With Distinct `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}],{12}[010..{1000}][1e1...e1] Order By All(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])[[9e1[123456789..]]] Desc,1.0[..`4esn`][..{0}] Asc,{`3esn`} Is Not Null Is Not Null Asc Skip 12.e12 In {0} In 9e1 Limit {#usn7}[Count ( * )..12][$`2esn`..`4esn`] Delete Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null,`1esn`[..\"d_str\"][..$`5esn`],9e12 Is Null With Distinct (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] As usn2 Order By All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Desc Skip `7esn` =~.e12 =~$#usn7 Union Create (`2esn` {@usn6:True Is Null Is Null})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)-[_usn3?:@usn6|`` *0x0..{`3esn`}]->(:#usn7{_usn3:12e12 Ends With `6esn` Ends With {`3esn`}}) Union With  \"d_str\" Order By $1000[..$999] Descending,$`` In 0 In {1000} Asc,[{0}[False..@usn5]] Starts With {`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]} Starts With Shortestpath((:_usn3{0})-[usn2 *12..]->(:``)) Desc Skip {`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]} Starts With Allshortestpaths((`2esn` :@usn6{7})<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]})<-[#usn8:usn1{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]}]->(@usn6 :`2esn`)) Starts With All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789) Limit {12} Starts With #usn8 Starts With 0e0 Where $`1esn`[07] Optional Match Allshortestpaths(({#usn8:12 Ends With 01,`8esn`:``[{#usn8}]})),Shortestpath((({`3esn`:123.654 Starts With $``,`7esn`:123.654[{`7esn`}][{7}]}))) Where `1esn`[..00][..{7}] Create `1esn`=Shortestpath(((`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]})-[`5esn`?:usn1]-(usn2 :`4esn`:@usn6)<-[#usn7]-(@usn6 )))"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv With Headers From 1.e1[1.0] As `3esn`  Delete Count(*) Ends With 0x0 Ends With 9e0,{123456789} =~usn1 =~{usn1} Start usn1=Node:`8esn`('s_str') Where `3esn`[..{_usn4}][..{@usn5}]"),
    octest_legacy:ct_string("Load Csv From _usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..] As ``  Remove {_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}.#usn7!,Extract(_usn3 In {@usn5}[..#usn7]).`4esn`? Remove `1esn`:_usn4,[_usn4 Is Null Is Null].usn1,{@usn6:True =~_usn3 =~123456789}._usn4 Union All Load Csv With Headers From #usn8['s_str'..][123.654..] As `4esn` Fieldterminator \"d_str\" With Distinct usn1(``[..$#usn7]) =~None(`5esn` In $`2esn`[12.e12][$@usn5] Where 07[`8esn`]) =~Reduce(#usn8=12e12 Is Not Null Is Not Null,@usn5 In Null =~12e12|$`4esn` Starts With 0e0 Starts With _usn3) As usn1,$999 Contains {7},\"d_str\"[..0.e0] As #usn8 Order By $0 Ends With False Ends With $_usn4 Descending,Case Count(*) Ends With 123.654 Ends With $12 When $@usn6[$0..usn1][0X0123456789ABCDEF..$999] Then {`6esn`}[..{`2esn`}] End In Reduce(`4esn`={@usn6} In {#usn7} In 12.e12,usn1 In 12.e12 In {0} In 9e1|\"d_str\"[..0.e0]) In [_usn4 In `2esn` Where 9e12 Ends With 123456789|$999 Is Null] Desc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Descending Limit {`2esn`} Ends With {#usn7}"),
    octest_legacy:ct_string("Detach Delete .e0[0.12],$`` =~{``} =~0.e0"),
    octest_legacy:ct_string("Foreach(usn2 In {7}[$123456789..{1000}][$`3esn`..`7esn`]| Optional Match (({`8esn`:0[$`6esn`...e1][`1esn`..$`7esn`]})) Using Join On `3esn`,`8esn`,`5esn` Where $`8esn`[..$999][..0]) Remove Reduce(@usn6=1000 Is Not Null,`3esn` In 123.654[1e1..][{#usn8}..]|{`4esn`}[{`4esn`}..999]).`7esn` Union Optional Match `2esn`=((`4esn` :`2esn`)),Allshortestpaths(((#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )}))) Using Scan usn2:`2esn` Using Scan usn2:`2esn` Create @usn5=Allshortestpaths((`2esn` :`5esn`:@usn5)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})),`2esn`=((@usn6 {`2esn`:{@usn6}[$`7esn`..][False..]})) Return *,{`8esn`}[..$`6esn`][..123.654],None(@usn5 In Null =~12e12 Where #usn8[`7esn`..])[{123456789}..][All(`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0})..] Order By $0 Ends With False Ends With $_usn4 Descending,[0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Desc Limit `1esn`[`3esn`..True]"),
    octest_legacy:ct_string("Start `6esn`=Rel:`2esn`({_usn3}) Where $`7esn`[$``..][999..] Union Start @usn6=Node( {`8esn`}) ,`3esn`=Relationship:@usn6({`2esn`}) Remove {usn2:7 In 1.e1 In $usn1}.`4esn`!,All(_usn4 In 0.0[..{999}][..0.0] Where #usn8 Is Null).`8esn`? Create #usn7=(`4esn` :usn2:`2esn`)"),
    octest_legacy:ct_string("Remove Allshortestpaths(((:`8esn`:@usn5{@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2],``:{`7esn`} Is Not Null Is Not Null})-[?:#usn7|`2esn` *123456789..0X7{@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`}]->(`8esn` ))).usn1! Remove [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12].`2esn`,[usn1 Contains $7 Contains $``,$@usn5 In 's_str' In $12,$`1esn` Is Not Null Is Not Null].usn2!,All(`1esn` In `3esn`[07..] Where 999 Starts With 's_str').#usn8! Remove (`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})._usn3?,(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}).usn2!,[$usn1[0X7],7[1000.._usn3][9e0..\"d_str\"],0X7 Starts With {999} Starts With 12e12].`7esn`! Union Remove .e12._usn4!,`7esn`(Distinct 12 Is Not Null Is Not Null).`8esn`! Unwind {12}[usn2] As `2esn` Union Foreach(_usn3 In {#usn7} In Count ( * ) In $#usn8| Match usn1=Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})),`5esn`=Shortestpath((((:`7esn`{``:.e1 Contains $`3esn`})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`)<-[`2esn`:#usn8|`2esn` *0xabc..7]-(usn1 :#usn8)))) Using Join On `5esn`,``,usn1 Where .e1 Ends With {7} Ends With $usn1)"),
    octest_legacy:ct_string("Merge (((`8esn` {_usn4:{usn1} In Count ( * )})<-[``?:`3esn`|:@usn5{`4esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}],@usn6:0X0123456789ABCDEF[7...e0][`1esn`..usn2]}]-(:`5esn`:@usn5)<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07}))) Match @usn6=((`8esn` :`5esn`:@usn5)-[#usn7? *999{`4esn`:#usn8 Is Null}]->(@usn6 :usn1:_usn4{`5esn`:{`1esn`} =~{_usn4},`5esn`:_usn4 Is Null Is Null})),`4esn`=(`3esn` :@usn6{`1esn`:$_usn4[{``}..][1e1..]})-[?:@usn6|`` *..0Xa]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]}) Where .e12[$#usn8..@usn6]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From False[999] As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit 010 Load Csv With Headers From {`4esn`} Contains $`1esn` Contains 01234567 As `8esn` Fieldterminator \"d_str\" With Distinct Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(:#usn8)<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})))..],_usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..] As #usn8 Order By $123456789 Is Not Null Asc Limit 0Xa Is Not Null Is Not Null Where {`3esn`}[{`5esn`}]"),
    octest_legacy:ct_string("Create Unique @usn6=((:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn7{usn1:1.0[{999}][$999]}]->(:#usn7{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})) Union All Detach Delete `` Is Null Is Null,07 =~@usn5 Return Distinct *,$7 Ends With 0X7 Order By Reduce(usn2=0e0 Contains `3esn` Contains `7esn`,#usn7 In 123.654 Starts With $``|0e0[$#usn8...e12]) Asc,Case When {@usn6} Contains 123.654 Contains 01 Then usn2 Ends With Count ( * ) Ends With $@usn6 End Is Not Null Is Not Null Desc Limit 0X0123456789ABCDEF Contains {usn1} Detach Delete _usn4($123456789 =~`4esn`)[None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where Count(*) In {``})..][Any(`3esn` In 123.654[1e1..][{#usn8}..] Where `2esn` Ends With $`4esn` Ends With {#usn7})..],[_usn3 In {@usn5}[..#usn7] Where 12.e12[{7}..7]] Contains [$`2esn`[$usn2..][{``}..],0.e0 Ends With False] Union All Match `8esn`=((@usn6 :#usn7{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}})<-[?:#usn7|`2esn` *0x0..]->({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) Using Scan #usn7:usn2 Using Scan `7esn`:#usn8 Foreach(_usn3 In $0[_usn4..{`3esn`}][$#usn7..$#usn7]| Delete All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..],$`4esn` In Null,0Xa[Reduce(`7esn`={@usn5} Is Null,#usn7 In 0Xa[@usn5][{`7esn`}]|0e0[0X0123456789ABCDEF..010][$@usn6..010])..$#usn7] Create `6esn`=(({`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})),@usn5=((:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})<-[``:usn2|#usn7 *..0Xa]->(`1esn` {#usn8:$12 Contains 0Xa}))) Return *,Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {`1esn`} Starts With @usn6) Starts With [$_usn3[010..False],$123456789 =~`4esn`,$usn1[$123456789..0][{`1esn`}..12.0]] As `8esn`,12 Starts With 0x0 As `2esn` Order By All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[{#usn7:Count ( * )[$12..]}..][`5esn`(Distinct False Starts With 010)..] Asc,All(usn1 In 12.e12 In {0} In 9e1)[[`1esn` In 0.e0 =~`1esn` =~`6esn` Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]|12.e12[$`8esn`..{`8esn`}]]..] Asc Limit 0Xa[07..]"),
    octest_legacy:ct_string("Load Csv With Headers From [00[..$123456789][..$`5esn`],{_usn3} Contains $`1esn` Contains 12.0][..[0.e0 =~`1esn` =~`6esn`,12.0[2.12..][{`5esn`}..],1.e1[0X0123456789ABCDEF..]]][..Filter(_usn3 In True[7][$999] Where 's_str'[..0X7])] As usn1  Return Reduce(`8esn`=True Starts With $`2esn` Starts With {@usn6},`5esn` In $`2esn`[12.e12][$@usn5]|999 Ends With .e12 Ends With .e1)[..Case 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0] When `4esn` Contains #usn8 Contains 7 Then 12 Ends With 01 When {999}[$123456789..][12..] Then {`4esn`} In _usn4 Else {#usn7}[Count ( * )..12][$`2esn`..`4esn`] End],Case 9e0 In usn1 When {@usn6} Contains 123.654 Contains 01 Then $@usn5 In 's_str' In $12 End In Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) In Case {`7esn`}[9e1..][@usn6..] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" When {7}[{`4esn`}][`6esn`] Then 0xabc[$@usn5] Else 0e0 End Order By $@usn5[{_usn3}][$#usn7] Ascending,Allshortestpaths((({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]-(:#usn8{``:12.e12[$`4esn`..]}))) Contains {`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]} Contains Any(@usn5 In Null =~12e12 Where 0[`4esn`][12.e12]) Ascending Skip {7}[{`4esn`}][`6esn`] Limit {#usn8}[2.12] Union All Start `7esn`=Relationship:`2esn`(@usn5={#usn7}) Where 9e0[#usn8] With  Filter(`3esn` In 123.654[1e1..][{#usn8}..] Where $7 Is Not Null) Is Null Is Null,12e12 Starts With 0.12 Starts With 9e12,Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']) In [$`2esn`[$usn2..][{``}..],0.e0 Ends With False] In (:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})-[`2esn`?$_usn4]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)}) As `1esn` Order By 0Xa[..{1000}][..$#usn7] Asc Limit Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) In {`4esn`:0.12 Starts With 9e12 Starts With $`1esn`,`4esn`:1000 Is Not Null} Merge usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})) On Create Set {`5esn`:$7 Ends With $`8esn`,`3esn`:`4esn` Contains #usn8 Contains 7}._usn4 =_usn4 Is Null Is Null,Reduce(`8esn`=`2esn` Starts With `` Starts With 1e1,`` In {`1esn`} Starts With @usn6|$@usn6 Contains `7esn`).`8esn`! =All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null})"),
    octest_legacy:ct_string("Remove Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})).`6esn`!,Case 12.e12[..1e1] When {1000}[{#usn8}] Then $@usn5[$`4esn`][$@usn6] Else 123456789 Ends With usn1 Ends With usn2 End.`5esn` Start `6esn`=Node:_usn4('s_str') Where $usn1 In 01234567 In .e1"),
    octest_legacy:ct_string("Return {`5esn`} Starts With 12.0,$usn1 =~010 =~07 As usn2,$#usn7[..{`4esn`}][..9e1] Order By None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Ends With Case When 0x0[{999}..][{_usn4}..] Then Count(*)[.e12] When {_usn4}[...e12][..0xabc] Then Count(*) Ends With $`` Ends With {7} Else ``[{#usn8}] End Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 's_str' Starts With 12e12 Starts With $_usn4|True Starts With $`4esn` Starts With 12e12) Desc,9e12 Is Null Ascending Skip @usn5[$@usn5][{0}] Limit `4esn` Is Not Null Is Not Null Merge (:`3esn`:`6esn`{999}) On Create Set `2esn` =Count(*) Ends With 0x0 Ends With 9e0 On Create Set #usn7 =9e1['s_str'..0xabc] Remove [`6esn` In 00 Where 0.12[..$`6esn`][..$1000]|Null =~12e12]._usn4?,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|0.0[..{999}][..0.0]].`7esn`!,Shortestpath(({`6esn`:$``['s_str'..][0x0..]})).`8esn` Union All Create ((@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})<-[_usn4{`7esn`:01234567[..9e1]}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[`6esn`?]->(:usn2:`2esn`{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null})),`1esn`=(((#usn8 {#usn7:$1000 Is Not Null Is Not Null})<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:usn1 *0X7..0Xa]->(:#usn7{#usn7:$`8esn` In $`2esn` In {7}}))) With Distinct {@usn5} Is Null,``[$0..][`1esn`..] As `4esn` Order By 0Xa[07..] Ascending Limit 's_str'[.._usn4][..``] Unwind Count(*) In {``} As `3esn` Union Start `4esn`=Node:``(\"d_str\") Where 00 Starts With $`6esn` Unwind {_usn4:{`6esn`} Ends With 0e0 Ends With {``}} In Shortestpath(((#usn8 {`8esn`:{7} Contains $123456789}))) As `4esn`"),
    octest_legacy:ct_string("With Distinct *,Shortestpath((@usn6 {``:.e12[\"d_str\"..][.e1..]}))[{`3esn`:#usn8 =~{999}}..[_usn3 In True[7][$999] Where 12e12 Is Not Null Is Not Null]] As usn1,1000 As `1esn` Skip True Is Null Is Null Limit $7 In 1.0 In 1e1 Unwind 9e12[$`5esn`] As @usn6 Union All Start @usn6=Node:@usn6(_usn4={_usn4}) ,_usn4=Node:usn2(usn2='s_str')Where .e1[0.12] With Distinct *,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 9e12 Is Not Null) =~Case When False[0Xa..$usn1] Then {123456789}[12..][$12..] Else 0e0 Contains 9e12 End As usn2 Order By $`7esn` Contains {`1esn`} Contains 9e12 Asc,usn1 Is Null Is Null Descending Limit `5esn` Is Not Null Is Not Null Start `8esn`=Rel:`5esn`({0}) "),
    octest_legacy:ct_string("Create Unique (`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})-[``:usn2|#usn7 *..0Xa]->(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]}) Create #usn8=(`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`),``=((`8esn` :@usn6)-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-({`7esn`:{usn1}[$`8esn`..0.0]})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null})) With Distinct Reduce(``=12 Starts With $#usn7,`6esn` In 00|False Contains $#usn8 Contains 9e1)[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where {7} Contains $123456789|12e12 Is Not Null Is Not Null]][All(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4)] Order By 00[0.12..] Desc Union All Start usn1=Node:`6esn`({`8esn`}) ,`5esn`=Relationship:@usn6(_usn4={_usn4}) Unwind Reduce(usn2={`6esn`}[..{`2esn`}],`5esn` In $`2esn`[12.e12][$@usn5]|1e1[..01]) Is Not Null Is Not Null As `1esn` Merge `2esn`=Allshortestpaths((((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})<-[_usn4?:usn2|#usn7{_usn4:{`1esn`} In 12.e12 In 9e1}]-(:usn2:`2esn`)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})))) On Create Set Case $`1esn`[07] When Null =~12e12 Then $``['s_str'..][0x0..] Else Null Is Null Is Null End.usn2? =0X0123456789ABCDEF[9e12],`4esn`+=12.e12[$`4esn`..],`8esn` =$usn1[0X7] On Match Set [1.e1 =~$usn2,$`5esn`[`1esn`][0X0123456789ABCDEF],$0[`7esn`]].`5esn`? =@usn5[$12..\"d_str\"],_usn3+=$`1esn`[$12][Count ( * )] Union All Return {1000} As `` Order By {1000}[1000][$usn1] Descending,$999[9e0..] Desc Skip Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))]"),
    octest_legacy:ct_string("Load Csv From Extract(`5esn` In $`2esn`[12.e12][$@usn5] Where 1.e1[12e12..{`6esn`}]|Count ( * )[..12][..{@usn6}]) Contains All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) Contains Extract(_usn4 In `2esn` Where $999 Is Null) As usn2 Fieldterminator 's_str' Create Unique (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Load Csv With Headers From `3esn`[12.e12..] As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths(((({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]-(:`4esn`:@usn6)<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})))) On Create Set _usn3+=_usn4[Count(*)],usn1 =010 Ends With 01 Ends With {_usn3},@usn6+=\"d_str\"[{`8esn`}..] On Create Set `1esn`:`` Return Distinct [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null][Allshortestpaths((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}))][Case {999}[$123456789..][12..] When $@usn6 =~#usn8 Then $999 Contains {7} When False Starts With 010 Then `8esn` Starts With {123456789} Else True Is Not Null Is Not Null End] As usn1 Order By 7[010][00] Descending,False[{`8esn`}] Asc,1e1 =~#usn8 =~2.12 Ascending Skip Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))[All(`2esn` In {999} Is Not Null Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)][Shortestpath((:_usn3{_usn3:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,`5esn`:1.0 Is Null Is Null})<-[`3esn`:`6esn`{`3esn`}]-(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})<-[ *123456789..0X7]-(`2esn` :`2esn`{`3esn`:#usn8 =~{999}}))] Limit 00 Contains #usn8 Union All Start _usn4=Rel:`4esn`(#usn8='s_str') ,`3esn`=Rel:``(usn1={`4esn`}) Union Return {`2esn`} In $123456789 In True As `7esn`,$7 Ends With $`8esn` As `4esn`,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8"),
    octest_legacy:ct_string("Create @usn5=(`6esn` :`8esn`:@usn5),usn1=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)) Create Unique _usn4=Allshortestpaths(((`` {`1esn`:{@usn5}[1e1..][9e1..],`2esn`:$`7esn` Contains {`1esn`} Contains 9e12})<-[`3esn`? *0x0..{_usn3:0.0[9e1..][Null..],#usn7:{`3esn`} Is Not Null Is Not Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-(`3esn` :`6esn`:`8esn`{`8esn`:{``} Is Null Is Null,`3esn`:123456789 Is Not Null Is Not Null}))),``=Shortestpath((`7esn` :`5esn`:@usn5{`2esn`:12 Starts With $#usn7})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(`4esn` :_usn4{`2esn`:#usn7 =~00}))"),
    octest_legacy:ct_string("Using Periodic Commit 00 Load Csv With Headers From 7[123456789..$123456789][``..00] As #usn8 Fieldterminator \"d_str\" Foreach(usn2 In {`7esn`}[..9e12][..0.0]| Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As `1esn`  Delete {@usn5}[..@usn6],0e0 Contains `3esn` Contains `7esn`,1.e1 Ends With 0 Ends With $usn1) Foreach(`1esn` In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$@usn5 In $usn2 In {1000}) Is Not Null| With Distinct *,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Order By `6esn` Is Null Is Null Desc Where {@usn6}[$`7esn`..][False..])"),
    octest_legacy:ct_string("Create usn2=Allshortestpaths((({`1esn`:{123456789}[12..][$12..]})<-[``{_usn4:.e1[..\"d_str\"]}]-({@usn5:Count ( * ) Is Null})<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Merge Allshortestpaths(((`5esn` :`2esn`{#usn8:True[$`7esn`..{1000}]})<-[usn1?:`6esn` *12..{`6esn`:999 Starts With $123456789 Starts With {``}}]->({_usn4}))) On Create Set `4esn`+={usn2:{`1esn`} Is Not Null} In {`3esn`:$#usn7 =~{12} =~False,usn2:$@usn6[$`8esn`..][7..]} In Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) On Create Set ``+=(#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]})-[:`2esn` *1000{`4esn`:`2esn` Ends With 12.e12 Ends With `2esn`}]->(_usn3 :#usn8)-[:``]->({`2esn`:07[`8esn`],`8esn`:{1000} Ends With {`8esn`}}) Ends With 01234567,usn1().`6esn`! =Reduce(``={usn2} =~@usn6 =~{`4esn`},`` In {`1esn`} Starts With @usn6|0[{@usn5}..][7..]) Contains [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]] Contains [$999 Is Null,{``}[010]] Optional Match (#usn7 :`6esn`:`8esn`{``:@usn5 In 1e1})-[`3esn`:`` *123456789..0X7{#usn8:12 Starts With $#usn7}]-(`3esn` :`7esn`)<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}),`7esn`=Allshortestpaths(((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]->(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]}))) Where {`1esn`}[$`4esn`..][False..] Union Remove Single(_usn4 In `2esn` Where $`2esn`[123.654][1e1]).usn1?,[0.0 =~12.e12 =~1.0].`8esn`!,All(#usn7 In 0Xa[@usn5][{`7esn`}] Where 1e1[1.e1..][123.654..]).`6esn`! Union All Delete 12 Starts With {_usn4} Starts With $#usn8,.e12 Ends With 1000 Ends With 010,[#usn7 In 123.654 Starts With $`` Where `1esn` In 07|$`2esn`[12.e12][$@usn5]] Is Null Is Null"),
    octest_legacy:ct_string("Return Distinct *,`` Ends With $`4esn` Ends With 0X0123456789ABCDEF As #usn7,False Contains 0.e0 Contains Count(*) Order By Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) Is Null Is Null Desc,[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Ascending Skip $@usn5[`6esn`..] Limit $`4esn`[..7][..{12}] Union Unwind $usn1[..'s_str'][..$#usn8] As `3esn` Unwind True[..010] As usn1"),
    octest_legacy:ct_string("Load Csv With Headers From 0.12[999][$#usn8] As usn1  Load Csv From Case When 0.e0 Contains #usn7 Then $_usn4[{``}..][1e1..] When $`2esn`[12.e12][$@usn5] Then $usn1[0X7] End Ends With Extract(`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]) Ends With Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End As _usn3 "),
    octest_legacy:ct_string("Start `6esn`=Rel:`2esn`({_usn3}) ,`2esn`=Rel:usn2(`2esn`={`7esn`})Where False Starts With 010"),
    octest_legacy:ct_string("Merge (usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]})-[`1esn`:`1esn`|:`3esn` *01..07{`3esn`:123456789 Is Not Null Is Not Null}]-(`1esn` {@usn5:$usn1 In 0.12 In $``})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789}) On Match Set Reduce(`4esn`=1000,`5esn` In $`2esn`[12.e12][$@usn5]|True Starts With $`2esn` Starts With {@usn6}).`6esn`! =All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,All(`` In {`1esn`} Starts With @usn6 Where #usn7[$`5esn`..])._usn3? ={999} In 0.0 In {0},@usn5+=[12e12 Starts With `1esn` Starts With usn2,Count ( * ) Is Null][(#usn8 {``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))] On Match Set @usn6+={7}[$123456789..{1000}][$`3esn`..`7esn`],Extract(#usn7 In 0Xa[@usn5][{`7esn`}] Where $@usn5 In $usn2 In {1000}|{`2esn`}[..{@usn6}][..1.e1]).`3esn`! =$@usn6[$0..usn1][0X0123456789ABCDEF..$999] Load Csv With Headers From 999 As usn2 Fieldterminator \"d_str\" Union All Create Unique ``=(:_usn3{`8esn`:9e1 =~999}),``=Shortestpath((:_usn4{`4esn`:#usn7 Starts With 1000 Starts With .e1})) Load Csv From Shortestpath((usn2 :_usn3)-[{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}]-(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]}))[Shortestpath((_usn3 :@usn5))..] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove [{`2esn`} In $123456789 In True,{1000}[{usn1}][Null]].`2esn`?,{`5esn`:$7 Ends With $`8esn`,`3esn`:`4esn` Contains #usn8 Contains 7}.`3esn`!,None(`1esn` In $12 Is Not Null Where {``} Is Null Is Null).`7esn` Load Csv From `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] As `7esn`  Union All Create Unique `8esn`=Allshortestpaths((((:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1})-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})))),`5esn`=(_usn3 :`6esn`:`8esn`{`4esn`:$usn1 Starts With $999 Starts With {@usn5},`7esn`:``[..$#usn7]}) Start #usn7=Node:_usn4(``=\"d_str\") ,`4esn`=Node:_usn3({123456789}) Delete $_usn4[{``}..][1e1..],[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1|{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]] =~Extract(`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]|$usn1 In 0.12 In $``) =~Single(_usn3 In {@usn5}[..#usn7] Where {`4esn`}[..07][..$`6esn`])"),
    octest_legacy:ct_string("Remove All(_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]).`5esn`,Reduce(usn1=Count(*) Starts With $usn1 Starts With {usn2},`6esn` In Count(*) Ends With $`` Ends With {7}|`1esn`[..01]).@usn6!,usn1().`6esn`! Load Csv From \"d_str\" Is Null Is Null As @usn6 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create _usn4=(((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[`8esn`?]->({@usn6:$`` Starts With 12 Starts With $usn2}))),`4esn`=Allshortestpaths((`5esn` )<-[`3esn` *..010]-(:@usn5{`2esn`:True[$123456789][`8esn`]})) Union Return [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]],$1000[..12.0][..0e0] Order By Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..] Descending,0.12 In 0X7 Descending Limit Count ( * )[9e1..{@usn5}] Union With  .e0 =~{`8esn`} =~$999 As #usn7,$12 Is Not Null As `7esn`,{``} Is Null Is Null Limit All(_usn3 In {@usn5}[..#usn7] Where $`2esn` Starts With {`8esn`} Starts With {usn1}) Starts With {usn2:{`1esn`} Is Not Null}"),
    octest_legacy:ct_string("Foreach(`` In Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0])| Remove Reduce(#usn8=$@usn6[$0..usn1][0X0123456789ABCDEF..$999],`1esn` In 0.e0 =~`1esn` =~`6esn`|999[12.0..][#usn7..]).`4esn`?,(:_usn3)<-[usn2 *..01234567{`1esn`:@usn5 =~'s_str',`8esn`:{999} Starts With {_usn4} Starts With 00}]->(usn1 {`5esn`})-[:`5esn`]->(:@usn6{`2esn`:$999 In 999}).#usn7!,_usn4:_usn4 Create Unique ((@usn6 {@usn5:0X0123456789ABCDEF[$999..][@usn5..]})<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`` {`4esn`:0X0123456789ABCDEF[0X7..],#usn7:{1000} Ends With {`8esn`}})),#usn7=(`3esn` :`8esn`:@usn5{@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})) Start _usn4=Node:`6esn`({_usn3})  Create (({`1esn`:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("Remove {`1esn`:9e12 Is Not Null Is Not Null}._usn3!,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]).#usn8,Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str'|{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]).@usn6 Create Unique Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})),`7esn`=((_usn3 :@usn5{`2esn`:@usn5[$12..\"d_str\"]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[_usn3?:``]-(@usn5 {_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})) Union Unwind $123456789 Is Not Null As `3esn` Delete {`3esn`} Ends With `1esn` Ends With $@usn6,{usn2}[`6esn`..01234567] Create Unique #usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}),`6esn`=(({@usn6:Null =~12e12}))"),
    octest_legacy:ct_string("Return Distinct *,{`7esn`}[9e1..][@usn6..],Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}) As `8esn` Union All Return Distinct Single(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12)[(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[*{`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}]->(:`2esn`{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]})<-[`5esn`?:usn2|#usn7 *..01234567]-(`4esn` :`8esn`:@usn5)] As `5esn`,$@usn6[$`8esn`..][7..] As `4esn`,[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999] In Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3} Contains 9e0 Contains $999) As _usn4 Order By {999} Starts With {_usn4} Starts With 00 Asc,{0}[False..@usn5] Desc,1e1[..`1esn`][..0e0] Asc Skip 's_str'[_usn4..0x0] Union Unwind 0xabc =~12 =~0x0 As @usn5 Match ``=(({`4esn`:1000 Is Null Is Null})),Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))) Using Join On _usn3,`1esn`,`2esn` Using Join On `6esn`,_usn4 Foreach(@usn5 In {1000}[{#usn8}]| Create Unique `7esn`=((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})),Shortestpath((usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)) Unwind Case {1000}[{#usn8}] When `7esn` Contains `5esn` Contains 0X7 Then True[..010] When {#usn8} =~{999} =~{#usn7} Then `1esn`[..\"d_str\"][..$`5esn`] Else `6esn`[..{999}] End In Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}]) As `8esn`)"),
    octest_legacy:ct_string("Start `4esn`=Rel:`8esn`(@usn6='s_str') Where #usn7 Starts With 1000 Starts With .e1"),
    octest_legacy:ct_string("Foreach(`6esn` In {@usn5}[{`5esn`}][$12]| Load Csv From {1000}[01234567..$_usn4][{@usn6}..$_usn3] As usn2  Delete All(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[Reduce(`2esn`=$@usn6[$0..usn1][0X0123456789ABCDEF..$999],`6esn` In 00|$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF)..],{`1esn`} Is Not Null,Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123456789 Is Not Null Is Not Null) Starts With Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999) Starts With Reduce(usn2=1.e1 =~`2esn`,@usn5 In Null =~12e12|Count(*)[..``][..#usn8])) Unwind 999 Starts With $123456789 Starts With {``} As `8esn` Merge Shortestpath(({usn2:#usn8 =~{_usn3} =~``})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})-[?:`1esn`|:`3esn` *999]-(:_usn4{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}))"),
    octest_legacy:ct_string("Create Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]})))"),
    octest_legacy:ct_string("Optional Match @usn6=(_usn3 {`4esn`:`8esn` Contains 1e1,#usn7:{`2esn`}[..{@usn6}][..1.e1]})-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]->({`6esn`:0X0123456789ABCDEF[`5esn`..][$#usn8..]}) Using Index `7esn`:`1esn`(`2esn`) Using Index `8esn`:`6esn`(@usn5)"),
    octest_legacy:ct_string("Start `3esn`=Rel:`6esn`(usn2={`8esn`}) ,usn1=Node:`6esn`({`8esn`})Where usn2 Ends With Count ( * ) Ends With $@usn6 Create Unique Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths(({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}))"),
    octest_legacy:ct_string("Load Csv From 1000[$7..$123456789] As `3esn`  Union Load Csv From (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Is Null As usn1 Fieldterminator 's_str' Union All Unwind 1.e1[0xabc..] As usn1 Match Shortestpath(((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]}))),usn1=((`2esn` {@usn5:{7} Contains $123456789,@usn5:Count(*) Starts With $usn1 Starts With {usn2}})) Using Scan `3esn`:`3esn` Unwind [{999} Starts With {12},9e1 Ends With Count(*) Ends With False,0X0123456789ABCDEF[`5esn`..][$#usn8..]] In Single(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null) As @usn6"),
    octest_legacy:ct_string("Create Unique @usn6=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))),`5esn`=Shortestpath((((:`7esn`{``:.e1 Contains $`3esn`})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`)<-[`2esn`:#usn8|`2esn` *0xabc..7]-(usn1 :#usn8)))) With  [usn1 In 12.e12 In {0} In 9e1 Where {usn1} In Count ( * )][{_usn3:.e1 Ends With 0Xa Ends With .e1,`2esn`:12e12 Starts With `1esn` Starts With usn2}..] As @usn5,Count ( * ) Is Null As usn2,({`6esn`:1.e1[12e12..{`6esn`}]})-[`7esn`?:_usn3|`8esn`*..]-(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})-[:#usn7|`2esn` *01..07]->(_usn4 :`7esn`)[..`2esn`(Distinct #usn8[`7esn`..])][..[.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]]] As `4esn` Skip $12 Starts With $`8esn` Where $_usn4 Contains {#usn7} Contains `1esn` Unwind 0Xa[1000.._usn4] As `8esn` Union All Create `6esn`=Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]->(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}))),`4esn`=Allshortestpaths((((@usn6 {_usn3:{`8esn`}[0X7][$`3esn`],_usn4:$_usn4[9e0..]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-({`6esn`:1000,#usn8:$`5esn`[$#usn7..][0xabc..]})-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}))))"),
    octest_legacy:ct_string("Unwind 9e12[$`5esn`] As #usn7 Create Unique @usn6=Shortestpath(((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}))),(`6esn` :#usn8) With Distinct {`5esn`}['s_str'..] As ``,Extract(_usn4 In `2esn` Where $999 Is Null) Starts With Reduce(`5esn`=00,`2esn` In {999} Is Not Null|{`4esn`}[..07][..$`6esn`]) Starts With [`8esn`[..`4esn`][..$usn1],{#usn8}[2.12]] As usn2,{#usn8} Is Null Is Null As `1esn` Order By 12 In 999 Descending,[{0}[False..@usn5]] Starts With {`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]} Starts With Shortestpath((:_usn3{0})-[usn2 *12..]->(:``)) Desc,[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] Asc Skip 0Xa Contains #usn8 Contains 1000 Where {`4esn`} Starts With $7 Starts With $``"),
    octest_legacy:ct_string("Merge `4esn`=((`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(:`7esn`{``:.e1 Contains $`3esn`})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)) On Create Set `6esn` =`6esn` In Null,_usn3 =$`6esn`[`8esn`][0.0] Create (@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}),_usn4=(@usn6 :@usn6{`5esn`:@usn5[$12..\"d_str\"],usn2:1.e1[0X0123456789ABCDEF..]}) Union All Create (((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`}))),#usn7=(($`5esn`)) Union Merge ((`3esn` :usn2:`2esn`{@usn6:9e12 Is Not Null Is Not Null,`4esn`:0Xa Contains {`7esn`} Contains $999})) On Match Set usn2+=$1000 =~{1000} =~`5esn`,Case #usn7 =~{`4esn`} =~123456789 When 1.e1 =~`2esn` Then 0Xa[$1000..$123456789] When $123456789 Starts With $123456789 Starts With Count ( * ) Then 07 Is Null Else $`6esn`[`8esn`][0.0] End.`8esn` =(`` {@usn5:0[Count(*)][0e0]})-[`5esn` *0x0..]->(usn1 :usn1:_usn4)<-[`7esn`?:#usn7|`2esn` *01..07]-(`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})[Allshortestpaths(((:`7esn`{999})<-[`6esn`?:_usn3|`8esn`]->(`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})))..{`1esn`:$999 Ends With {0}}] Create Unique _usn4=(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))"),
    octest_legacy:ct_string("Load Csv With Headers From $`6esn`[..1.e1][..1e1] As `5esn`  Merge `8esn`=Shortestpath((:`2esn`{`4esn`:`3esn` Is Not Null Is Not Null})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]})) On Create Set `8esn` =usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]],@usn6+=$@usn5[..usn2][..$#usn7] Foreach(`1esn` In All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Contains `4esn`(999 Starts With 's_str') Contains (`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})-[usn2?:`2esn`]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})| Create (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]})) Detach Delete Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null,``[..0X0123456789ABCDEF],{`1esn`}[$`4esn`..][False..]) Union Remove {`1esn`:9e12 Is Not Null Is Not Null}._usn3!,Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]).#usn8,Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str'|{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]).@usn6 Create Unique Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})),`7esn`=((_usn3 :@usn5{`2esn`:@usn5[$12..\"d_str\"]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[_usn3?:``]-(@usn5 {_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})) Union All Start _usn4=Node:`7esn`(@usn5={`4esn`})  Load Csv With Headers From 9e12 In 1e1 In .e12 As `5esn`  Foreach(_usn3 In {#usn7} In Count ( * ) In $#usn8| Match usn1=Shortestpath((:_usn3{@usn5:.e1[..\"d_str\"],#usn8:{`1esn`}[`6esn`..12e12]})<-[`7esn`?*..]-(usn1 :`1esn`{#usn7:$`` Is Null,`6esn`:01[..{`7esn`}][..01234567]})),`5esn`=Shortestpath((((:`7esn`{``:.e1 Contains $`3esn`})-[:_usn4|:usn1{`6esn`}]->(`8esn` :`7esn`)<-[`2esn`:#usn8|`2esn` *0xabc..7]-(usn1 :#usn8)))) Using Join On `5esn`,``,usn1 Where .e1 Ends With {7} Ends With $usn1)"),
    octest_legacy:ct_string("Optional Match (usn1 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`) Where $`7esn`[$``..][999..] Union All Detach Delete {`4esn`}[..07][..$`6esn`],12 In 0e0,$999[07..{#usn7}][1e1..0xabc] Optional Match Allshortestpaths(((`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})<-[usn1?:usn2|#usn7 *01..07]-(@usn6 {`5esn`:\"d_str\" =~`1esn` =~{`5esn`}})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]}))) Using Index usn2:usn1(`1esn`) Where 0.12[..$`6esn`][..$1000] Union Return {#usn8} Is Null Is Null As `1esn` Create Unique `1esn`=Shortestpath((({@usn5:``[{123456789}..]})-[`3esn`:`6esn`{`3esn`}]-({`1esn`:$123456789[..$7][..$`6esn`]})<-[#usn8{usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1}]-(:usn2:`2esn`))) Merge ((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]}))"),
    octest_legacy:ct_string("Detach Delete $123456789[{_usn4}],{usn2} Contains .e0 Union All Detach Delete Null[{_usn4}..],``[{#usn8}..9e0][12.e12..0xabc] Create Unique (((`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})-[]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )})<-[@usn6?]->(`8esn` :``))),usn2=Allshortestpaths(((({`7esn`:0.12 Starts With 9e12 Starts With $`1esn`})<-[?:``]-(`1esn` :#usn7)-[?:`4esn`|:#usn7]->(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]}))))"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath(((@usn6 :usn1:_usn4)-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)<-[``?:`4esn`|:#usn7{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]}]->({`1esn`:$123456789[..$7][..$`6esn`]}))) Union All Delete `2esn`[Null] Foreach(`2esn` In Case `3esn` Is Not Null Is Not Null When _usn3 Contains .e0 Contains {usn2} Then 0.0 Contains $_usn4 Contains {`2esn`} When $@usn6 =~#usn8 Then $999 Contains {7} End Is Not Null| Return Distinct *,$usn1 =~010 =~07 As usn2,[1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] Limit (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))]) Create _usn4=(({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((((`3esn` :``)<-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]->(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(#usn8 {usn1:$123456789 Starts With `5esn`})))) Merge (:usn2:`2esn`{_usn4:0Xa Contains $``,@usn6:@usn6[$_usn4]})<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->({`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}) Union All Unwind 1.e1 Ends With 0 Ends With $usn1 As `1esn` Remove exists(Distinct 12.e12 In $0 In $0).usn2,Reduce(usn1=1.e1 Starts With $`2esn` Starts With $0,`3esn` In 123.654[1e1..][{#usn8}..]|{`3esn`} Is Not Null Is Not Null).`1esn`?,07.`2esn`! Return *,(_usn4 {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[#usn7?:@usn6|``{123456789}]->(usn1 :`8esn`:@usn5)<-[?:_usn3|`8esn`*{@usn6:{#usn8}[2.12],`4esn`:123.654[{@usn5}..123.654][1.0..$12]}]->(`3esn` {@usn5:{`8esn`}[0X7][$`3esn`],_usn4:.e12 Contains $`1esn` Contains $@usn6})[..[12.e12 In {0} In 9e1,9e1 =~`` =~{`7esn`},0X0123456789ABCDEF[0X7..]]][..All(`1esn` In `3esn`[07..] Where `7esn`[0..$usn2][{usn2}..0.e0])] As usn1,@usn5 Is Not Null Is Not Null Order By 1000 Starts With `7esn` Descending Limit @usn5 Contains {0} Contains 9e12"),
    octest_legacy:ct_string("Unwind `2esn`({999} Is Null,{``} Is Null Is Null) In `5esn`(0Xa Contains $``,$123456789 Starts With .e12) In {_usn4:.e1[..\"d_str\"]} As #usn7 Delete {12} Contains `7esn` Contains $_usn3,{_usn3} Starts With $12 Starts With {`8esn`} Union All Return $7 Ends With $`8esn` As `4esn` Skip {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) Create #usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`)) With Distinct 0xabc[$_usn3..],[$_usn4[9e0..]][`8esn`(Distinct {7} Starts With $usn1 Starts With 1.0)..Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {@usn5} Starts With 1.0 Starts With 00|$#usn7[..@usn6][..$0])][Any(`1esn` In $12 Is Not Null Where $@usn6[01..@usn5][0x0..`4esn`])..{#usn8:{`7esn`} Is Not Null Is Not Null,`4esn`:12 Starts With 0x0}] As `1esn` Order By 1.0 Ends With 1000 Descending,Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))) Asc Skip {usn2}[$`4esn`] Limit {123456789} =~{@usn6} Union With Distinct {`5esn`} Starts With 12.0,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,0.e0 Contains .e0 Contains $@usn6 Order By $#usn7 Is Null Is Null Descending,Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(_usn3 In True[7][$999] Where {usn2})][Any(_usn4 In 0.0[..{999}][..0.0] Where {`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`)] Ascending Limit {usn2:_usn4 Is Null}[[True =~_usn3 =~123456789,0Xa[@usn5][{`7esn`}],{`1esn`} Starts With `4esn` Starts With {0}]..] Where {_usn3}[..$`8esn`] Load Csv With Headers From {usn2}[$`4esn`] As usn2 Fieldterminator \"d_str\" Create (((:`4esn`:@usn6{@usn6:_usn4 In $usn1,`8esn`:07 Is Null})<-[:``]-(_usn3 :`7esn`)<-[ *0xabc..7]->({#usn7:123456789[0..]}))),``=(`3esn` :usn2:`2esn`{``:{_usn3} Contains $`1esn` Contains 12.0})"),
    octest_legacy:ct_string("Load Csv With Headers From Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) As usn2  Load Csv From {#usn8}[usn2][{0}] As `2esn` Fieldterminator \"d_str\" Merge `7esn`=Shortestpath((((`6esn` {``:`4esn`[usn1]})<-[:`6esn`{`2esn`:0.0 Contains $_usn4 Contains {`2esn`},`6esn`:``[..$#usn7]}]->({_usn4:False[0Xa..$usn1]})-[`8esn`?{`3esn`:'s_str'[..0X7]}]-(`7esn` {`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]})))) On Match Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5"),
    octest_legacy:ct_string("Detach Delete {@usn5}[..{12}][..0x0],{#usn8}[#usn7..{`2esn`}] Start _usn3=Relationship:#usn7({`4esn`}) "),
    octest_legacy:ct_string("Match (_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}),Shortestpath(((`1esn` :`4esn`:@usn6))) Optional Match usn1=(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[``:usn2|#usn7 *..0Xa]->(#usn8 {@usn5:_usn4 Is Null})<-[`1esn`?:`3esn`|:@usn5{usn2:Count ( * )[..12][..{@usn6}]}]-(@usn5 {``:`3esn` =~9e0 =~@usn6}),((`2esn` :@usn6)-[_usn3?:@usn6|``]-(usn2 )<-[?:_usn3|`8esn` *1000]-({`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) Using Index `6esn`:`2esn`(`1esn`) Start @usn6=Node:@usn6(_usn4={_usn4}) ,_usn4=Node:usn2(usn2='s_str')Where .e1[0.12] Union All Load Csv From _usn4[Count(*)] As _usn3 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv With Headers From 0.12[999][$#usn8] As #usn7  Merge @usn5=Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))) On Create Set Filter(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]).`2esn`! =123456789 Starts With {999} Union Foreach(_usn4 In {usn2} Starts With $`5esn` Starts With {@usn6}| Unwind $`1esn`[#usn8][$@usn5] As _usn4 Start #usn7=Node:_usn4(``=\"d_str\") ,`4esn`=Node:_usn3({123456789}))"),
    octest_legacy:ct_string("Remove {``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}.`7esn`,(:usn2:`2esn`)<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]}).`7esn`!,{`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}}.`3esn`?"),
    octest_legacy:ct_string("Start usn1=Rel:_usn4({@usn6}) ,_usn4=Node:@usn5({`3esn`})Where True =~_usn3 =~123456789 Detach Delete 1e1[..$1000][..999],Count(*)[.e12..] Union Match `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))) Using Scan `8esn`:`8esn`"),
    octest_legacy:ct_string("Detach Delete $1000[_usn4..$0][9e12..`3esn`] Return Distinct .e1[0.12] As @usn6 Order By {usn2} Contains .e0 Desc Limit 1e1 Contains usn2 Union All Create Unique `6esn`=((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[:`2esn` *07]-(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]->({``:.e1 Contains $`3esn`})) Load Csv With Headers From @usn5 Contains {0} Contains 9e12 As ``  Remove [`3esn` In 123.654[1e1..][{#usn8}..] Where {@usn6} In {#usn7} In 12.e12|123.654 Contains $_usn3 Contains 0X0123456789ABCDEF].usn2?,None(`5esn` In $`2esn`[12.e12][$@usn5] Where 12.e12[``..usn2][{#usn7}..@usn5])._usn3? Union Detach Delete {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])],{#usn8}[$#usn7..],0xabc[$_usn3..]"),
    octest_legacy:ct_string("With  *,{999}[9e1] As usn1,{`6esn`} Is Null As `2esn` Skip Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Limit $`3esn` Ends With $999 Ends With 0X0123456789ABCDEF Create (@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}),_usn4=(@usn6 :@usn6{`5esn`:@usn5[$12..\"d_str\"],usn2:1.e1[0X0123456789ABCDEF..]}) Union All Create usn2=Allshortestpaths((({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]}))),(((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[`8esn`?]->({@usn6:$`` Starts With 12 Starts With $usn2}))) Union Merge _usn3=((_usn3 :`1esn`)) Delete 12e12 Ends With `6esn` Ends With {`3esn`} Load Csv From $@usn6[$0..usn1][0X0123456789ABCDEF..$999] As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return Distinct {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) As @usn6,{`3esn`}[{123456789}..][{usn1}..],1.e1[12e12..{`6esn`}] As `1esn` Order By 1000 Is Not Null Desc,Allshortestpaths(((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})<-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]->(`5esn` {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))) Starts With (`1esn` :_usn3{`5esn`:{`8esn`}[..$`6esn`][..123.654],`1esn`:1000 Starts With `7esn`})-[?{#usn8:00[..$123456789][..$`5esn`],``:Count(*) Starts With $usn1 Starts With {usn2}}]-(`3esn` {usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}) Starts With Extract(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Descending,`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) In Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`}))) In All(`1esn` In $12 Is Not Null Where 12.e12[{@usn5}..][9e1..]) Ascending Limit Extract(usn1 In 12.e12 In {0} In 9e1 Where {_usn4} Is Null|{@usn5}[..{12}][..0x0]) Starts With (@usn6 )<-[?:`6esn`$usn1]->(_usn4 )<-[`2esn`{#usn7:7 In 1.e1 In $usn1,_usn4:0X0123456789ABCDEF[`5esn`..][$#usn8..]}]-(`4esn` :_usn4{`2esn`:#usn7 =~00}) Detach Delete [$`1esn`[$12][Count ( * )],9e1 Ends With $@usn5 Ends With $123456789] Is Not Null Is Not Null,$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],$usn1 Is Not Null Is Not Null Union Delete $usn1[0X7] Union Foreach(#usn8 In Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where {@usn6} Is Not Null)[[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]..]| Remove Filter(`1esn` In 0.e0 =~`1esn` =~`6esn` Where True[True..]).@usn6,Shortestpath(((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` ))).`2esn`,[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789].#usn8 Create Unique `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))),usn2=Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))))"),
    octest_legacy:ct_string("Using Periodic Commit 7 Load Csv From 0.12[010..][{0}..] As _usn4  Unwind True[..010] As usn1 Create Unique (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),_usn4=Allshortestpaths((usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}))"),
    octest_legacy:ct_string("Create Allshortestpaths((:`8esn`:@usn5{usn2:{1000} Ends With {`8esn`}})<-[#usn7?:usn1 *01..07{`7esn`:0.12 Starts With 9e12 Starts With $`1esn`}]-(:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})),_usn3=Shortestpath((@usn5 {#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null})<-[:_usn4|:usn1{_usn3:01234567[..9e1]}]-(`2esn` :#usn8{#usn7:$1000 Starts With $`8esn` Starts With {`5esn`}}))"),
    octest_legacy:ct_string("With Distinct {`4esn`:#usn7 =~00,@usn5:usn2[True]} =~`6esn`(Distinct #usn7 =~{`4esn`} =~123456789,1e1[1.e1..][123.654..]) =~Allshortestpaths(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}}))) As @usn6,{`3esn`}[{123456789}..][{usn1}..],1.e1[12e12..{`6esn`}] As `1esn` Skip (#usn7 {`1esn`:$123456789 Starts With $123456789 Starts With Count ( * )})-[?:`4esn`|:#usn7 *..0]-(_usn3 :@usn5) Starts With (`5esn` {`3esn`:9e1 =~999})-[`1esn`?:`4esn`|:#usn7 *..01234567]->(`3esn` :#usn7) Starts With Extract(`3esn` In 123.654[1e1..][{#usn8}..] Where 's_str' Starts With 12e12 Starts With $_usn4|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]) Limit 0Xa Contains Count ( * ) Where {`2esn`} Starts With @usn6 With  0.12 Starts With 9e12 Starts With $`1esn`,{`2esn`} Starts With @usn6 As `3esn` Order By $999 Contains {7} Desc,Shortestpath(((usn1 {``:.e12 =~$_usn4})))[`6esn`(_usn3 Contains .e0 Contains {usn2},`3esn`[07..])][[.e12 Ends With 1000 Ends With 010,Count(*)]] Asc Skip `7esn` Contains {@usn5} Contains $123456789 Union Merge _usn3=((`5esn` :`3esn`:`6esn`)) On Create Set `4esn`+=$`8esn`[0xabc][Null],@usn5+=0.0 In `6esn` In $@usn5 On Create Set #usn7 =`4esn`[usn1],{`2esn`:9e12 Is Not Null Is Not Null}.usn2? =Single(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * ))[Any(`6esn` In 00)..Allshortestpaths((((:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]})<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`))))],``(True[True..],$_usn4).`5esn`? =`4esn` =~12.0 =~{`3esn`} Return Distinct .e1 Starts With {`1esn`} Starts With $_usn3,`2esn` Ends With 12.e12 Ends With `2esn`,@usn6[2.12..$#usn8][`3esn`..{`5esn`}] As `8esn` Skip 07[..`6esn`][..'s_str'] Limit {@usn5}[..{12}][..0x0] Load Csv With Headers From {`2esn`:`8esn`[..`4esn`][..$usn1],@usn6:{123456789}[12..][$12..]} In [$0 Is Not Null,#usn7 Starts With $999,$`6esn`[`8esn`][0.0]] In [$999 Is Null,{``}[010]] As `3esn`  Union Load Csv From 0Xa In {usn1} In Null As `3esn` Fieldterminator 's_str' Load Csv With Headers From {7}[$_usn4..Count ( * )] As `7esn` Fieldterminator \"d_str\" Merge @usn5=Allshortestpaths(((:`2esn`)))"),
    octest_legacy:ct_string("Foreach(`5esn` In $usn1[False][999]| Detach Delete Single(`1esn` In $12 Is Not Null Where 0Xa Contains Count ( * ))[Any(`6esn` In 00)..Allshortestpaths((((:`4esn`:@usn6{@usn6:Count(*)[..``][..#usn8]})<-[``:usn2|#usn7 *..0Xa]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[:#usn8|`2esn`]->(`` :usn2:`2esn`))))],@usn6[2.12..$#usn8][`3esn`..{`5esn`}] Optional Match @usn6=((`4esn` :usn2:`2esn`)) Using Join On @usn5,`3esn` Using Scan `8esn`:#usn8 Where 9e12 Is Not Null) Union All Load Csv With Headers From _usn4[Count(*)] As _usn3 Fieldterminator \"d_str\" With  0Xa Contains #usn8 Contains 1000 Order By 2.12[..$_usn4] Desc,{usn2:$#usn7 Starts With 9e0 Starts With 2.12}[Single(#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1)..][[.e0[True..Count ( * )][#usn7..0X7],$`` Is Null]..] Descending,{1000} Ends With 0.12 Ascending Skip 1.e1 Ends With 0 Ends With $usn1 Limit $`3esn`[1.0..] Union All Create Unique Shortestpath(((:#usn8{`2esn`:12e12 Is Not Null,_usn3:12.e12[2.12..][0xabc..]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(`` {#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})<-[@usn5:`3esn`|:@usn5 *01..07{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}]->(usn1 :``{_usn3:``[{#usn8}],`3esn`:{`3esn`} Is Null}))) Delete Case When 0.e0 Contains #usn7 Then $_usn4[{``}..][1e1..] When $`2esn`[12.e12][$@usn5] Then $usn1[0X7] End Ends With Extract(`1esn` In $12 Is Not Null Where {`3esn`}[{`5esn`}]) Ends With Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End,[`8esn` In $12[{7}..0X0123456789ABCDEF] Where 2.12 In $`8esn` In {`7esn`}|12e12 Starts With `1esn` Starts With usn2] Contains Any(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e0[#usn8]) Contains #usn7({`7esn`}[9e1..][@usn6..],{usn2}[$`4esn`]) Create (({`1esn`:{123456789}[12..][$12..]}))"),
    octest_legacy:ct_string("Create Unique `8esn`=Allshortestpaths(((`1esn` :usn2:`2esn`{@usn5:.e12 =~.e0})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(`1esn` :@usn6))),(:usn2:`2esn`{`5esn`:1.e1 Starts With $`2esn` Starts With $0})-[:_usn3|`8esn` *..00{#usn7:Count(*)[010..][#usn7..],`3esn`:01234567[$7..{12}]}]-(#usn8 :usn2:`2esn`{`6esn`:0x0 =~123.654 =~{999},`1esn`:1.e1[{#usn8}]}) Return Distinct $`2esn`[{usn2}],$`5esn`[$#usn7..][0xabc..] Order By [0.12[..$`6esn`][..$1000],0.12 Starts With 9e12 Starts With $`1esn`,\"d_str\" Contains @usn6 Contains 12.e12] Is Null Ascending,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..])[..{usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}][..Filter(`2esn` In {999} Is Not Null Where 010 In `1esn`)] Desc,{999} Ends With 123456789 Ends With {@usn5} Descending Limit $usn1 Contains {`8esn`} Contains $123456789"),
    octest_legacy:ct_string("Remove [@usn5 In Null =~12e12 Where _usn4 In $usn1].`6esn`?,Reduce(`4esn`=`3esn`[..{_usn4}][..{@usn5}],`2esn` In {999} Is Not Null|123456789 Starts With {@usn6} Starts With $12).usn2,Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3).`3esn` Foreach(`3esn` In 01234567[$7..{12}]| Create Shortestpath((_usn3 {_usn4:{_usn3} Is Not Null})<-[`6esn`:_usn3|`8esn`{`5esn`:$usn2 Is Null Is Null,``:123.654 Starts With $``}]-(`` )) Return Distinct *,`` Ends With $`4esn` Ends With 0X0123456789ABCDEF As #usn7,False Contains 0.e0 Contains Count(*) Order By Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) Is Null Is Null Desc,[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 Starts With {_usn3}|@usn6[$12]] Ends With [_usn4 In 0.0[..{999}][..0.0] Where usn1 Contains $7 Contains $``|9e12 Is Not Null Is Not Null] Ends With Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) Ascending Skip $@usn5[`6esn`..] Limit $`4esn`[..7][..{12}]) Start #usn7=Node(999)  Union Delete `3esn`(Distinct 12.e12[``..usn2][{#usn7}..@usn5],1000 Is Not Null) In {`1esn`:@usn6[$usn2..#usn7]},0.12[..$`6esn`][..$1000],0X7[{``}..][usn1..] Remove @usn5:``,(`6esn` :_usn3)<-[`1esn`? *0X0123456789ABCDEF{`5esn`:1.e1 Starts With $`2esn` Starts With $0}]->({_usn4:{usn1} =~123.654 =~\"d_str\"}).`2esn` Remove (`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]}).`1esn`?,[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where `1esn` =~1000 =~1000].usn1?,{`4esn`:0.12 In 0X7}._usn4!"),
    octest_legacy:ct_string("Merge _usn3=Shortestpath((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})) On Match Set [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[$`8esn`.._usn3]|{#usn8}[usn1][1.0]]._usn3 ={`1esn`} =~{_usn4},#usn8+=$`5esn`[@usn5..][$``..],Case 12 Starts With $#usn7 When {`4esn`}[{`4esn`}..999] Then 1.e1[12e12..{`6esn`}] When {#usn7} Contains 0.0 Contains $0 Then `3esn` =~9e0 =~@usn6 End.`7esn`? =[$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]] On Create Set #usn7+={`3esn`} Is Null Load Csv With Headers From 0.0 Is Not Null As `6esn`  Unwind Extract(@usn5 In Null =~12e12 Where #usn7[$`5esn`..]) Contains {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1} Contains [_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]] As @usn6 Union Delete 00 =~0.e0 =~$`8esn`,0[{@usn5}..][7..],$`8esn` =~0x0 =~usn2"),
    octest_legacy:ct_string("Optional Match `5esn`=Allshortestpaths(((`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[_usn3?:@usn6|``{`4esn`:#usn8 Is Null}]-({#usn7:123456789[0..]}))) Using Index usn1:`3esn`(`3esn`) Using Scan `2esn`:`2esn` Where Count(*) Is Not Null"),
    octest_legacy:ct_string("Unwind Null[010..][{``}..] As `3esn` Remove Case #usn8[`7esn`..] When 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] Then {0}[False..@usn5] End.usn1,None(_usn3 In {@usn5}[..#usn7] Where {@usn6} In {#usn7} In 12.e12).`8esn`,({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})<-[?:@usn6|`` *1000]->(:_usn4{`8esn`:12e12 Starts With `1esn` Starts With usn2})-[`2esn`:`2esn`{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(:usn1:_usn4{#usn8:$7 Ends With 0X7,`5esn`:12 Is Not Null})._usn3! Remove Extract(_usn4 In `2esn` Where 123.654 Starts With $``).usn2 Union Optional Match `7esn`=Shortestpath((((`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})-[_usn3?*..{#usn7:#usn8 =~{999},`8esn`:{_usn3}[`3esn`..$#usn8]}]->({`5esn`:$_usn4 Contains {#usn7} Contains `1esn`,@usn6:0[Count(*)][0e0]})-[@usn6 *07{`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1}]->({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})))),`6esn`=Shortestpath(((:#usn8{#usn8:`3esn` Is Not Null Is Not Null}))) Where {0} =~12.0 Start usn1=Relationship:`8esn`(`8esn`={12})  Load Csv From `1esn` In 07 As `8esn` "),
    octest_legacy:ct_string("Using Periodic Commit 0Xa Load Csv From `7esn` Contains {@usn5} Contains $123456789 As `6esn` "),
    octest_legacy:ct_string("Create _usn4=((`8esn` :@usn6))"),
    octest_legacy:ct_string("Load Csv From {#usn8} Ends With 1.0 Ends With 12.0 As `2esn` Fieldterminator 's_str' Unwind 9e0 Contains @usn6 Contains {#usn7} As `` Match ((()-[?:`3esn`|:@usn5 *0x0..{`3esn`:.e1[0.12],`7esn`:$123456789 Starts With .e12}]-(:`6esn`:`8esn`{@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]})-[?:usn2|#usn7]-(`1esn` {#usn7:Count ( * )[$12..]}))),((`4esn` {`1esn`:9e12 Is Not Null Is Not Null})-[?:`7esn` *999{@usn6:{``} Ends With .e12 Ends With 0.e0,`5esn`:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF}]-(_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})) Using Scan #usn7:`3esn` Union All Create `3esn`=Allshortestpaths((`7esn` :@usn6)-[?:``]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]})) Union All Remove `5esn`($`7esn` Contains {`1esn`} Contains 9e12).`7esn`!,({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]-(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})._usn3"),
    octest_legacy:ct_string("Merge `2esn`=((`1esn` :@usn5{_usn3:Null Is Null Is Null,``:True[True..]})<-[`3esn`?:`3esn`|:@usn5 *0x0..]->(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})) On Match Set `5esn` =123456789 Is Not Null Is Not Null,`6esn` ={@usn5}[{`5esn`}][$12] Load Csv From $1000 Starts With $`8esn` Starts With {`5esn`} As `` Fieldterminator \"d_str\" Return 010 In $`5esn` In 0 As `6esn` Limit 9e12[$`5esn`]"),
    octest_legacy:ct_string("With Distinct (`3esn` :`7esn`)-[*]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})[Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]})))] As usn2 Order By All(`6esn` In Count(*) Ends With $`` Ends With {7}) In (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}) Desc Skip `7esn` =~.e12 =~$#usn7 Optional Match @usn6=({`1esn`:$123456789[..$7][..$`6esn`]})-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}),`7esn`=(((`8esn` {@usn6:12 Starts With {_usn4} Starts With $#usn8,`3esn`:.e1[@usn5]['s_str']})-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(:`2esn`{`6esn`:@usn6[{0}..]})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:``{`2esn`:Null In .e0,usn1:01234567[..9e1]}))) Where $7[{`1esn`}] Foreach(`` In 9e0 In .e1 In 1.e1| With  _usn4 Is Null Is Null,$`5esn` Is Not Null As _usn4 Limit 00 Contains #usn8 Unwind $``[..1.e1][..12] As @usn5) Union Detach Delete {_usn4}[{``}..],All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,9e1[123456789..] Match #usn7=Allshortestpaths(((:`6esn`:`8esn`))),usn1=Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Using Index @usn5:usn2(`2esn`) Where $0[$1000..00][{0}..{usn1}] Create (:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}),`4esn`=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})<-[?:@usn5|:`7esn`]->({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})"),
    octest_legacy:ct_string("Load Csv From `4esn` Starts With $#usn7 As #usn7  Start usn1=Relationship:`8esn`(`8esn`={12}) Where {@usn5}[..#usn7] Union All Create Unique @usn5=Shortestpath(((_usn3 {#usn7:1.e1 =~`2esn`,@usn6:$`5esn`[`1esn`][0X0123456789ABCDEF]}))),Allshortestpaths(((`4esn` :_usn4{`2esn`:#usn7 =~00})<-[usn2 *07{usn1:07 =~@usn5}]->(_usn4 {`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]})-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}))) Unwind {`8esn`:`2esn` Starts With `` Starts With 1e1} In [usn1 In 00 In {_usn3}] In Allshortestpaths((_usn3 :_usn3{_usn4:$_usn4[9e0..]})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]})) As usn2"),
    octest_legacy:ct_string("Match ((:#usn8{`3esn`:`2esn` Starts With `` Starts With 1e1,`8esn`:0Xa[..{1000}][..$#usn7]})-[:`5esn`]-({`7esn`:@usn5[..$@usn5][..0Xa]})-[@usn5? *0x0..{`7esn`:Count ( * )[Count ( * )][12],@usn5:{`7esn`}[``..]}]-(_usn3 {`1esn`:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:\"d_str\" Is Null Is Null})) Where $1000 =~{1000} =~`5esn` Create #usn8=(@usn6 {``:.e12[\"d_str\"..][.e1..]}) Union All Start `4esn`=Rel:`7esn`(usn2='s_str')  Load Csv With Headers From `` Starts With $@usn5 As _usn3  Load Csv From {7}[$_usn3] As _usn3 "),
    octest_legacy:ct_string("Merge ((`5esn` )) On Create Set usn2 =_usn4 Contains 0X0123456789ABCDEF Contains {_usn4},Shortestpath((({_usn4:0.12 Starts With 9e12 Starts With $`1esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})<-[@usn6?:#usn7|`2esn` *12..{#usn8:12 Starts With 7 Starts With $`5esn`}]->(usn2 {_usn3:$0 In _usn4}))).@usn5? ={123456789}[{12}..],`2esn` =[`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*)][Extract(`` In {`1esn`} Starts With @usn6 Where $`7esn`[$``..][999..]|.e1 Contains $`3esn`)..Case When 's_str'[.._usn4][..``] Then 123.654 Starts With $`` Else 0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`] End] On Match Set ({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]-(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``}).`8esn`? =Allshortestpaths(((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8?:``]-(`1esn` :`1esn`{`7esn`:{1000}[{usn1}][Null],`3esn`:7[$0..][{_usn4}..]})<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(usn1 {`4esn`:1.0[{999}][$999],``:9e1[9e1...e0]}))) Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null}),`5esn`+=``[..$#usn7] Union All Create (((#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0})-[`4esn`?:``{usn2:12e12 Ends With `4esn` Ends With 123456789}]->(:`7esn`{usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}))),(((#usn8 )-[usn2? *12..{usn1:$`6esn`[`8esn`][0.0],`8esn`:2.12 In $`8esn` In {`7esn`}}]->(_usn4 :#usn7{`8esn`:$999 Contains {7}})-[`1esn`?:_usn4|:usn1*]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]})))"),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths((({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))) Create (`6esn` :#usn8),Shortestpath(((({`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})))) Union Start _usn4=Rel:_usn4({`2esn`}) ,`5esn`=Node:_usn3(`1esn`='s_str') With  {`5esn`:2.12 =~0x0 =~_usn4,`3esn`:$@usn6 Contains `7esn`}[..(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]})<-[`7esn`?:`7esn` *..7{`3esn`:0X0123456789ABCDEF[7...e0][`1esn`..usn2],#usn7:$`4esn`[..'s_str'][..`8esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})][..Any(_usn3 In {`2esn`} Ends With {12} Ends With 7)] As #usn8,{`1esn`:{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`],`5esn`:0.12 Contains 12.0} Ends With [{usn2},0.12[Count(*)..][$#usn7..]] Ends With {0} As #usn8 Limit All(usn1 In 12.e12 In {0} In 9e1 Where {12}[usn2])[Reduce(``=$@usn5[..usn2][..$#usn7],`6esn` In Count(*) Ends With $`` Ends With {7}|{`4esn`}[$123456789..])..][{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}..] Union Unwind $`3esn`[1.0..] As _usn4 Merge ((`5esn` :@usn6)<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}})) On Create Set _usn4+=Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where 12e12 Is Not Null)[..Reduce(`1esn`=$`3esn` In 9e12 In ``,`2esn` In {999} Is Not Null|$@usn5[..usn2][..$#usn7])],Shortestpath(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))).`7esn`! =1e1[{_usn4}..123.654] On Match Set `1esn`+=`2esn` Starts With `` Starts With 1e1,Case When 0X0123456789ABCDEF[$`5esn`..] Then ``[$0..][`1esn`..] When {``} Ends With .e12 Ends With 0.e0 Then {_usn3} Is Not Null End.`3esn` =$0 Ends With False Ends With $_usn4 Create Unique ((#usn8 :@usn5)<-[_usn3{@usn6:{7} Contains $123456789}]->(:`2esn`{``:1.e1 =~`2esn`,`3esn`:$`6esn`[`8esn`][0.0]})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1}))"),
    octest_legacy:ct_string("Foreach(`3esn` In [12e12,123.654 Starts With $``,`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]][Single(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where `3esn`[..{_usn4}][..{@usn5}])..]| Match @usn5=((({`6esn`:$``['s_str'..][0x0..]})-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-({``:.e1 Contains $`3esn`})-[`2esn`?:`6esn`]-(:`3esn`:`6esn`{999}))),Shortestpath(((`6esn` {``:`4esn`[usn1]}))) Using Scan _usn4:#usn8 Using Index @usn5:usn1(_usn3) Create (:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}),`4esn`=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})<-[?:@usn5|:`7esn`]->({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1})) Union With  *,2.12[`8esn`][1e1],$usn1 Starts With {_usn3} As _usn4 Limit {`2esn`} In 0Xa In {_usn3} Delete 01234567[..$`5esn`],{`8esn`}[True..][.e1..],(`8esn` {@usn5:$@usn6 Starts With $@usn5,`6esn`:@usn5[..$@usn5][..0Xa]})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]-(`5esn` :@usn6)<-[`7esn`?:@usn5|:`7esn`{`1esn`:{`6esn`} Contains {usn2} Contains $1000}]->(_usn3 :_usn4{`7esn`:00 Starts With $`6esn`,`6esn`:{12}[999][{_usn3}]}) Ends With [_usn4 In `2esn` Where {`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]|00[Count(*)...e0][$#usn7..0X0123456789ABCDEF]] Ends With Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $7 In 1.0 In 1e1) Remove (`1esn` :usn2:`2esn`{`1esn`:{_usn3}[$usn2..],_usn3:$@usn6 Starts With $@usn5})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->({@usn6:{`1esn`} Is Not Null,`2esn`:00 =~0.e0 =~$`8esn`})<-[`5esn`?:`5esn`{_usn4:@usn5 Is Not Null Is Not Null}]-(:_usn4{``:$`2esn`[12.e12][$@usn5],``:`8esn` Contains 1e1})._usn3? Union All With  {`3esn`} =~[1.e1 =~$usn2] =~Filter(`6esn` In 00 Where `5esn`[..9e0][..01234567]) Limit {#usn8} =~{999} =~{#usn7} Where $_usn3[010..False]"),
    octest_legacy:ct_string("Load Csv With Headers From $`8esn`[0xabc][Null] As @usn5  Delete {_usn3} Contains $`1esn` Contains 12.0 Union Unwind {`3esn`} Ends With `1esn` Ends With $@usn6 As `2esn` Optional Match Shortestpath((({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))),`6esn`=(`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}) Using Scan `2esn`:@usn6 Using Join On _usn3,`1esn`,`2esn` Where 0X0123456789ABCDEF[0X7..] Union Remove Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999).usn1?,`5esn`($`7esn` Contains {`1esn`} Contains 9e12).`7esn`!,#usn7(Distinct 12[..$@usn6],{0}[False..@usn5]).`1esn` Create (`6esn` :#usn8),Shortestpath(((({`5esn`:12.e12[{7}..7],_usn4:`2esn` Starts With `` Starts With 1e1})-[`3esn`:`6esn`{`3esn`}]-(#usn8 :`6esn`:`8esn`{`1esn`:9e12 Is Not Null,_usn4:0X0123456789ABCDEF[$`2esn`..][`2esn`..]})<-[?:``]-(:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]})))) Foreach(_usn3 In {`3esn`} =~$7| Delete {1000}[{``}][999],`4esn`[{1000}][{`5esn`}])"),
    octest_legacy:ct_string("Start #usn7=Node:#usn7('s_str') ,`6esn`=Node:@usn6({999})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) Ends With Case When 0x0[{999}..][{_usn4}..] Then Count(*)[.e12] When {_usn4}[...e12][..0xabc] Then Count(*) Ends With $`` Ends With {7} Else ``[{#usn8}] End Ends With Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where 's_str' Starts With 12e12 Starts With $_usn4|True Starts With $`4esn` Starts With 12e12) As usn1  With  *,$1000[..{`7esn`}][..#usn7] Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Asc,`3esn`[$@usn5..@usn5][9e1..$``] Desc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `2esn`[$1000..9e12][{#usn8}..{7}] Limit [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]][Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..])..][None(`6esn` In 00 Where {@usn5} Starts With 1.0 Starts With 00)..] Start @usn6=Relationship:`1esn`({@usn5}) "),
    octest_legacy:ct_string("Delete 7[1000.._usn3][9e0..\"d_str\"],$`8esn` Is Null Is Null Unwind 12e12 Starts With `1esn` Starts With usn2 As `4esn` Foreach(_usn4 In Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`4esn`} Starts With $7 Starts With $``|0Xa Contains {`7esn`} Contains $999) Contains {`4esn`:0X0123456789ABCDEF[$999..][@usn5..],@usn5:{_usn3}[{0}]}| Create usn1=((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]})),#usn8=Allshortestpaths((:`5esn`:@usn5{usn1:$#usn7[`5esn`]})<-[?:`4esn`|:#usn7]->(_usn4 :#usn8{`5esn`})-[`4esn`?:_usn4|:usn1{@usn6:$#usn7 Ends With 0.12 Ends With {@usn6}}]->(#usn8 {usn1:$123456789 Starts With `5esn`})) With Distinct *,$1000[..{`7esn`}][..#usn7] Order By [1.e1 =~$usn2,1000][[_usn4 In 0.0[..{999}][..0.0] Where 12.e12[{7}..7]]..][All(_usn4 In `2esn` Where $0[`7esn`])..] Asc,`3esn`[$@usn5..@usn5][9e1..$``] Desc,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Descending Skip `2esn`[$1000..9e12][{#usn8}..{7}] Limit [`2esn` In {999} Is Not Null Where 's_str'[.._usn4][..``]][Reduce(_usn4=$0 Is Not Null,`2esn` In {999} Is Not Null|12.e12[2.12..][0xabc..])..][None(`6esn` In 00 Where {@usn5} Starts With 1.0 Starts With 00)..]) Union All With Distinct *,$`1esn` Ends With {`7esn`} Ends With $_usn3 As `7esn`,{1000} As `` Load Csv With Headers From 01234567[{`7esn`}..] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct *,@usn5 Contains {0} Contains 9e12 Order By {usn1:`` Ends With $`4esn` Ends With 0X0123456789ABCDEF}[Reduce(`1esn`={usn1} In Count ( * ),`` In {usn1} Ends With {`6esn`} Ends With 123456789|0[{usn2}..][usn1..])][[`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12]|{``} Starts With 123456789 Starts With usn2]] Ascending,Reduce(usn1=1e1 Contains usn2,`8esn` In $12[{7}..0X0123456789ABCDEF]|#usn7 =~{`4esn`} =~123456789) Contains `3esn`(Distinct 1.e1[0xabc..],$@usn5[`1esn`..]) Asc,[False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null] Asc Limit All(#usn7 In 123.654 Starts With $`` Where 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF) =~[`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]|{#usn8}[2.12]] =~Reduce(usn1=12.0[2.12..][{`5esn`}..],_usn3 In {@usn5}[..#usn7]|1000[$7..$123456789]) Where 1.e1 =~$usn2 Union Match ((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )),#usn7=((`4esn` :`1esn`)-[usn1:@usn5|:`7esn` *..00{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}]-(`2esn` :#usn8{_usn3:usn2 Ends With Count ( * ) Ends With $@usn6})) Using Index _usn3:_usn3(`6esn`) Load Csv With Headers From 0.12[999][$#usn8] As usn1  Union All Merge `2esn`=((`4esn` :`2esn`)) On Create Set `6esn`({`6esn`}[..{`2esn`}]).`7esn` =`4esn` Is Not Null Is Not Null,`6esn` ={_usn3}[usn1][0],Single(`2esn` In {999} Is Not Null Where $7[{`1esn`}]).usn2? ={@usn6}[0Xa..$@usn6][0..`5esn`] Create `6esn`=Allshortestpaths((((@usn6 {usn1:$#usn7 =~{12} =~False})<-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`` :_usn4{@usn6:$`1esn` Is Not Null Is Not Null,usn2:{1000}})<-[#usn7? *..0{_usn3:`3esn` =~9e0 =~@usn6,usn1:0.e0 =~`1esn` =~`6esn`}]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`})))),#usn7=Allshortestpaths((:`5esn`:@usn5{#usn8:123.654[$`1esn`..Null][1000..{_usn3}],`6esn`:12.0 =~$#usn7 =~9e12})-[`1esn`:usn2|#usn7{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]}]->(usn1 :_usn3{#usn7:$_usn3 Is Null Is Null,@usn5:{@usn6}[0Xa..$@usn6][0..`5esn`]}))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((:@usn6{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})),#usn8=Allshortestpaths((({`4esn`:$`1esn` Is Not Null Is Not Null,`2esn`:$7 Is Null}))) Union Foreach(`8esn` In {7} Starts With $usn1 Starts With 1.0| Unwind Case When 0X0123456789ABCDEF[7...e0][`1esn`..usn2] Then $1000 Starts With $`8esn` Starts With {`5esn`} When usn2 =~0X7 =~{#usn7} Then {`2esn`} In $123456789 In True End[Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where $usn2 Ends With $`5esn`)] As `8esn`) With Distinct Extract(`` In {`1esn`} Starts With @usn6 Where $usn1[@usn6][#usn7]) Contains [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07] Order By 01234567['s_str'] Descending,{#usn8} Is Null Is Null Ascending Skip Reduce(`5esn`=#usn7 Starts With $999,`3esn` In 123.654[1e1..][{#usn8}..]|12 Is Not Null Is Not Null) =~{@usn6:`8esn` Contains 1e1} =~(_usn4 :`5esn`:@usn5)<-[:_usn4|:usn1 *..7{`1esn`:@usn6[$usn2..#usn7]}]-(:`4esn`:@usn6{usn1:$7[{`1esn`}],#usn8:\"d_str\"[..0.e0]})<-[#usn8?{`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00}) Where 12.e12[{@usn5}..][9e1..] Start `2esn`=Relationship:usn1(@usn5={1000}) ,@usn5=Node:_usn3({123456789})Where $0 Starts With `2esn` Union All Load Csv From {_usn3}[`3esn`..$#usn8] As `4esn` Fieldterminator 's_str' Remove Single(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $@usn6[01..@usn5][0x0..`4esn`]).#usn7 Load Csv From {_usn4}[{``}..] As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match ((usn2 :_usn3)<-[?:_usn4|:usn1 *..00{`1esn`:{#usn8}[2.12]}]->(:@usn5{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})-[#usn8:#usn7|`2esn`]->(_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})),((`8esn` :`8esn`:@usn5)<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})) Where {`3esn`} Is Null Union All Optional Match #usn7=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}),`6esn`=(({@usn6:Null =~12e12})) Using Index `8esn`:``(@usn5) Using Scan `6esn`:#usn8 Where 00 Union Remove Extract(_usn3 In True[7][$999] Where $usn1[$123456789..0][{`1esn`}..12.0]).`1esn`,(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]})<-[`1esn`?]->({usn1:0e0[..$@usn5][..$`8esn`],usn1:01[..{`7esn`}][..01234567]})-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-(@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]}).`8esn`! Unwind Extract(@usn5 In Null =~12e12 Where #usn7[$`5esn`..]) Contains {usn2:$`2esn` In {123456789},`6esn`:12.e12 In {0} In 9e1} Contains [_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]] As @usn6 Create ((:`8esn`:@usn5{usn2:$1000 Starts With $`8esn` Starts With {`5esn`},`7esn`:{@usn6} Contains 123.654 Contains 01})<-[`8esn`? *..7{`8esn`:{7}[{`4esn`}][`6esn`]}]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->(:`6esn`:`8esn`$usn2)),_usn3=Shortestpath((`6esn` {``:`4esn`[usn1]})<-[`5esn`?:@usn5|:`7esn`]-(usn2 :#usn8{usn1:010 In `1esn`,`5esn`:{`4esn`}[$123456789]})-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]-(#usn8 :`6esn`:`8esn`{_usn3:$@usn5[`1esn`..]}))"),
    octest_legacy:ct_string("With Distinct Count ( * ) =~{`5esn`} =~{_usn4} As _usn3,Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999)[..Reduce(``={`8esn`}[True..][.e1..],#usn7 In 123.654 Starts With $``|{usn1}[$`8esn`..0.0])][..Any(`1esn` In $12 Is Not Null Where $12 Is Not Null Is Not Null)] As #usn8 Where {`3esn`} Ends With `1esn` Ends With $@usn6 Union All Return Distinct 12.e12[$`8esn`..{`8esn`}] As `7esn`,{`6esn`}[..{`2esn`}],{123456789}[{12}..] As @usn6 With  *,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..] As `3esn`,123456789[12..$`4esn`] As `7esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Where $`3esn` Ends With $999 Ends With 0X0123456789ABCDEF Merge `6esn`=Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))) On Create Set `7esn`+=Reduce(@usn5=True =~{`1esn`},_usn4 In 0.0[..{999}][..0.0]|7[$0..][{_usn4}..]) In Single(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`) In All(_usn4 In 0.0[..{999}][..0.0] Where $usn1[$123456789..0][{`1esn`}..12.0]) On Create Set _usn3 ={`1esn`}[$`4esn`..][False..],``+=True =~_usn3 =~123456789 Union Create Unique Allshortestpaths(({`4esn`:#usn8 Is Null})) Return {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}[Any(`3esn` In 123.654[1e1..][{#usn8}..] Where {_usn3}[..$`8esn`])] As #usn7,(:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})<-[`7esn`?:`6esn`]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})<-[``? *1000]-(:`3esn`:`6esn`{`4esn`:{`6esn`} Contains {usn2} Contains $1000,usn2:{#usn8}[12.0][$@usn6]}) In [_usn4 In 0.0[..{999}][..0.0] Where False[999]],{`4esn`:0.e0 =~`1esn` =~`6esn`,`7esn`:$`3esn`[{``}..]} Ends With {#usn7:$`5esn`[..{`2esn`}][..{0}],@usn6:123.654[1e1..][{#usn8}..]} Ends With Any(_usn4 In `2esn` Where $`2esn`[123.654][1e1]) Order By {123456789}[..'s_str'][..$@usn6] Asc Skip {999} Is Null"),
    octest_legacy:ct_string("Foreach(#usn7 In 0Xa Contains {7} Contains {0}| Return 2.12 =~0x0 =~_usn4,.e12 Contains $`1esn` Contains $@usn6) Foreach(_usn3 In Count(*)[.e12..]| Match `8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0})),`4esn`=Allshortestpaths(((`4esn` :`1esn`)-[`6esn`?*..{`6esn`:$0[$1000..00][{0}..{usn1}],_usn4:{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]}]->({#usn7:12 Starts With $#usn7,#usn7:`6esn` Ends With 2.12 Ends With @usn6}))) Where 0X0123456789ABCDEF[{_usn4}..9e12][$`6esn`..1.0]) Union All Delete .e1[..\"d_str\"],[0X0123456789ABCDEF[$999..][@usn5..]] Contains Reduce(#usn7={12}[999][{_usn3}],`2esn` In {999} Is Not Null|$usn1 =~010 =~07) Contains None(`1esn` In `3esn`[07..])"),
    octest_legacy:ct_string("With  *,None(`1esn` In `3esn`[07..] Where $`1esn`[..{_usn3}])[[123.654[1e1..][{#usn8}..],$#usn7[123.654]]] As `1esn` Order By None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])] Desc,Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 9e12 Is Not Null Is Not Null) Is Null Is Null Descending Skip Single(_usn3 In True[7][$999]) Is Not Null Is Not Null Limit $1000[..12.0][..0e0]"),
    octest_legacy:ct_string("Remove usn2(Distinct 1e1[..01],$123456789 Is Not Null).@usn6 Union Create ((usn1 :usn1:_usn4)-[`6esn`?:@usn5|:`7esn`]->(`2esn` :@usn5{@usn5:{`2esn`} Is Not Null Is Not Null})<-[?:`1esn`|:`3esn`{`2esn`:12 Starts With $#usn7}]-(:`2esn`{`2esn`:123456789[0..]})),usn1=((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7))"),
    octest_legacy:ct_string("Detach Delete $`5esn` Is Not Null Delete 0Xa[..07] Union Foreach(`7esn` In Reduce(@usn5={`1esn`} In 12.e12 In 9e1,`5esn` In $`2esn`[12.e12][$@usn5]|$`6esn` Ends With {0} Ends With {`7esn`}) Is Null| Delete Count(*)[.e12],All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,#usn7(01 =~$`1esn`) =~{@usn6:12.e12[$`8esn`..{`8esn`}],#usn8:#usn7 =~00} Load Csv With Headers From \"d_str\" Ends With False Ends With {@usn6} As usn1 Fieldterminator 's_str') Load Csv From 0e0[..{999}] As _usn4  Return 0.e0 Ends With False As `` Skip Extract(`8esn` In $12[{7}..0X0123456789ABCDEF] Where False Contains 0.e0 Contains Count(*))[Single(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12.0 =~$#usn7 =~9e12)..]"),
    octest_legacy:ct_string("Merge `4esn`=(((#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})<-[`2esn`?{`3esn`:$7 In 1.0 In 1e1,@usn5:{@usn6} Contains 123.654 Contains 01}]->(:`1esn`{_usn4:{`6esn`} Ends With 0e0 Ends With {``}})-[`8esn`?{@usn5:Null Is Null Is Null}]->({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null}))) With Distinct 1.e1[12e12..{`6esn`}] As @usn5,12[12e12] Order By {`4esn`} In _usn4 Desc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending,999 Starts With 's_str' Desc Skip {@usn6} Contains 123.654 Contains 01 Where {#usn8}[usn1][1.0] Detach Delete {12}[00..{@usn6}][1.e1..0],`1esn`(Distinct $usn1 Starts With {_usn3},{#usn8}[$#usn7..]) Starts With [$_usn4[$`4esn`..$12]] Starts With [`6esn` In 00 Where 0.12 In 0X7|{999} Is Null] Union All Remove Reduce(`4esn`=_usn4 Is Null Is Null,_usn3 In {@usn5}[..#usn7]|$@usn6[$`8esn`..][7..])._usn4? Optional Match (usn2 :`5esn`:@usn5)-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})"),
    octest_legacy:ct_string("Load Csv From 12 In 999 As `8esn` Fieldterminator \"d_str\" Match Shortestpath((({`2esn`:{7}[$7..],#usn7:`1esn` In 07})-[? *01..07]->({_usn4:{usn1} =~123.654 =~\"d_str\"}))),usn1=Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Where .e12 =~$_usn4"),
    octest_legacy:ct_string("Merge (({`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]})) On Match Set ({``:$7[{`1esn`}]})-[ *0x0..{@usn5:0e0[..$@usn5][..$`8esn`]}]-(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]}).`3esn` ={7} Starts With $usn1 Starts With 1.0,(`` :_usn4{`8esn`:{7}[{`4esn`}][`6esn`]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}).#usn8? =`3esn`[..{_usn4}][..{@usn5}],Case When #usn8 Is Not Null Then 12.e12 In $0 In $0 Else $`8esn`[..$999][..0] End.`5esn`? =Any(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}])[count(Distinct $`1esn`[07..][9e12..])..] Union All Merge `2esn`=Shortestpath((((usn2 :``)-[@usn5?:#usn7|`2esn`{`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]}]->(`2esn` :@usn6{7})<-[:@usn5|:`7esn`{`6esn`:$`1esn`[#usn8][$@usn5],@usn6:123.654[1e1..][{#usn8}..]}]-(`4esn` :`2esn`)))) On Create Set [`` In {`1esn`} Starts With @usn6 Where {`1esn`} Starts With `4esn` Starts With {0}|#usn8 In `8esn` In 07].`6esn`? ={#usn8} Ends With 1.0 Ends With 12.0,`4esn` =Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) On Match Set `2esn`+=Allshortestpaths((((`6esn` :`7esn`{``:1000 Is Null,`4esn`:#usn7[$`5esn`..]})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]-(:`5esn`:@usn5{`5esn`:`7esn` Contains `5esn` Contains 0X7})<-[:`6esn`{@usn5:$7[$`3esn`],`2esn`:0Xa[0e0..{#usn7}]}]->(`5esn` :``{@usn6:123.654[$`1esn`..Null][1000..{_usn3}]}))))[All(_usn4 In `2esn` Where 1.e1[0xabc..])..All(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789})][All(`6esn` In Count(*) Ends With $`` Ends With {7} Where .e1 Contains $`3esn`)..Single(#usn7 In 123.654 Starts With $`` Where 9e1 =~`` =~{`7esn`})],`3esn` =$12 Starts With $`8esn`,@usn5 =Reduce(#usn8={`8esn`}[..$`6esn`][..123.654],usn1 In 12.e12 In {0} In 9e1|\"d_str\" =~`1esn` =~{`5esn`}) Return *,$7 In 1.0 In 1e1,0X7 Starts With {999} Starts With 12e12 As @usn5 Skip `6esn` Ends With 2.12 Ends With @usn6 Create `5esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),#usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`))"),
    octest_legacy:ct_string("Create `5esn`=(usn2 {#usn8:123456789 Starts With {@usn6} Starts With $12,_usn3:07[..`6esn`][..'s_str']})-[?:@usn6|``]-(:_usn4{`1esn`:{123456789}[12..][$12..]}) Return Distinct ``[$0..][`1esn`..] As `4esn`,Allshortestpaths((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))[..[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8]][..(:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})] Order By {12} Starts With #usn8 Starts With 0e0 Descending,0.0 Is Null Asc Skip All(`5esn` In $`2esn`[12.e12][$@usn5] Where 12[..$@usn6]) =~(_usn4 :`7esn`)<-[{`2esn`:1000 Is Null Is Null}]->({`6esn`:7[010][00],#usn8:$usn1 =~010 =~07}) Limit [_usn3 In {`2esn`} Ends With {12} Ends With 7 Where 0[$`6esn`...e1][`1esn`..$`7esn`]|0[Count(*)][0e0]] Contains Extract(`` In {`1esn`} Starts With @usn6 Where .e0[..{`5esn`}][..999]|$`3esn`[..$`2esn`][..123.654]) Contains Reduce(`2esn`=$usn1[0X7],@usn5 In Null =~12e12|#usn7 =~{`4esn`} =~123456789)"),
    octest_legacy:ct_string("Merge _usn4=Allshortestpaths(((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}})-[?:#usn8|`2esn` *999{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({@usn6:#usn8[$0..False][$`1esn`..$#usn7]})<-[`8esn`?*{`8esn`:{#usn7} Contains @usn5 Contains Count ( * )}]-({`4esn`:1000 Is Null Is Null}))) On Create Set `5esn` =@usn5 In 1e1 Create Allshortestpaths(((`4esn` {`6esn`:True =~{`1esn`},`7esn`:0Xa[$1000..$123456789]})<-[:@usn5|:`7esn`{_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}]->({#usn7:123456789[0..]}))),_usn3=(:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]})"),
    octest_legacy:ct_string("Merge `2esn`=Shortestpath(((({`7esn`:{@usn5}[..#usn7],@usn6:{_usn3}[`3esn`..$#usn8]})-[?:#usn7|`2esn` *0x0..]->(usn1 :#usn8{``:$7[{`1esn`}]})-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})))) On Create Set @usn5+=$@usn6 Ends With 01 Ends With 999,`3esn` =0.e0 =~`1esn` =~`6esn` On Create Set usn1+=[`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]][Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))..],Case {@usn6}[$`7esn`..][False..] When {_usn3} Contains True Contains 0X7 Then $#usn7 =~{12} =~False When $123456789 Is Not Null Then #usn8 =~{999} End.`6esn` =07 Starts With True Starts With 's_str' Delete 0x0 =~123.654 =~{999} Detach Delete $``[01],{999} In 0.0 In {0} Union Start `5esn`=Node:``({`8esn`}) Where {@usn6}[0Xa..$@usn6][0..`5esn`] Return `7esn` Ends With $_usn3 Ends With usn2 As _usn4,1000 Is Null Is Null Order By @usn6[$usn2..#usn7] Ascending,{`3esn`} Ends With 0 Ends With 9e1 Desc Limit {usn2:{`6esn`} Contains 07,`2esn`:{7} Is Null}[..({``:.e1 Contains $`3esn`})<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})] Foreach(#usn8 In {123456789}[12..][$12..]| Remove Case When $`3esn` In 9e12 In `` Then 9e0[#usn8] When {999} Starts With {12} Then 7 Is Null Is Null End._usn4!,{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}.#usn8 Remove {@usn5:_usn4 Is Null Is Null,`6esn`:`1esn`[..01]}.`2esn`!)"),
    octest_legacy:ct_string("Merge ({usn1:0[{@usn5}..][7..],`7esn`:{``}[_usn4..$`1esn`]})-[_usn4? *07{1000}]-(`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]}) On Match Set [`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 07[..`6esn`][..'s_str']|\"d_str\"[{999}..]].@usn6? =Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) On Match Set _usn3+=_usn4[Count(*)],usn1 =010 Ends With 01 Ends With {_usn3},@usn6+=\"d_str\"[{`8esn`}..] Start usn1=Node:_usn4({`8esn`}) ,_usn3=Relationship:#usn8('s_str')"),
    octest_legacy:ct_string("Unwind $@usn5[$`4esn`][$@usn6] As usn2 Unwind [1.e1 =~$usn2,@usn6[{0}..],@usn5[12.0][{1000}]][@usn6()..Case {@usn5}[..@usn6] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null Else 123456789 Ends With usn1 Ends With usn2 End] As `3esn` Create `4esn`=((:#usn8{#usn8:`3esn` Is Not Null Is Not Null})),``=Shortestpath((((`4esn` {`4esn`:_usn4[Count(*)],`8esn`:{_usn3} Contains $`1esn` Contains 12.0})<-[usn1? *..0Xa{`2esn`:\"d_str\" Is Null Is Null}]-(`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-({`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})))) Union All Optional Match (:``{_usn3:12e12 Is Not Null,`8esn`:1.e1[_usn4..][07..]})-[?{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6}]-(:`7esn`{``:123456789 Ends With usn1 Ends With usn2})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]->(usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}),((`` {`5esn`:0[`4esn`][12.e12],_usn4:00})-[`5esn`?]-(#usn8 :@usn6)<-[@usn6?:usn2|#usn7]->(`1esn` )) Merge `3esn`=Allshortestpaths((usn1 :usn1:_usn4)) On Create Set Single(_usn4 In `2esn` Where 9e12 Is Not Null Is Not Null).@usn5 =Allshortestpaths(((`6esn` :`8esn`:@usn5)<-[`2esn`?:#usn7|`2esn` *..01234567{``:{usn1} Ends With {`6esn`} Ends With 123456789,`5esn`:{999} Is Null}]-(:`4esn`:@usn6{`7esn`:Count(*)[.e12..]})<-[usn1:usn1{`3esn`:\"d_str\" Ends With False Ends With {@usn6},`5esn`:`4esn` Contains #usn8 Contains 7}]->(`6esn` {`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})))[{`2esn`:`5esn` Is Null Is Null}] Unwind Reduce(`8esn`={`2esn`} Starts With @usn6,`3esn` In 123.654[1e1..][{#usn8}..]|0X0123456789ABCDEF[$999..][@usn5..]) Is Null Is Null As _usn4"),
    octest_legacy:ct_string("Foreach(`5esn` In 0Xa[0e0..{#usn7}]| Optional Match Allshortestpaths(((`5esn` :@usn6)<-[`2esn`?:@usn6|``]->(`1esn` {_usn4:{1000} Ends With {`8esn`}})<-[`3esn`:_usn3|`8esn`]->(:`8esn`:@usn5{`7esn`:7 Contains $`` Contains {`6esn`}}))),@usn6=Allshortestpaths((`4esn` :`3esn`:`6esn`{usn1:Count ( * ) Is Null,`5esn`:1e1[1.e1..][123.654..]})-[#usn7?:usn1{usn2:{1000}[01234567..$_usn4][{@usn6}..$_usn3],`1esn`:$#usn7[..@usn6][..$0]}]->(@usn5 :`8esn`:@usn5)<-[?{``:{#usn8} =~{999} =~{#usn7},``:usn1 Is Null Is Null}]-(:`6esn`:`8esn`{_usn4:Count ( * ) Starts With 010 Starts With 0x0,_usn3:0x0 Ends With {``}}))) Union All Merge usn1=((:`2esn`$1000)-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-(@usn6 {`8esn`:123456789 Ends With usn1 Ends With usn2,`6esn`:0[{usn2}..][usn1..]})) On Match Set `8esn` =[`` In {`1esn`} Starts With @usn6 Where 0Xa[$1000..$123456789]] Starts With (`7esn` )-[:_usn4|:usn1 *0X7..0Xa{`8esn`:{`4esn`}[$123456789..],_usn4:{`8esn`}[True..][.e1..]}]-({#usn8:`1esn`[..01],``:$1000 Is Not Null Is Not Null}) Starts With Allshortestpaths((`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})),[$0[`7esn`],0.12 Contains 12.0,True Is Null Is Null].`3esn`? =`2esn` Ends With $`4esn` Ends With {#usn7} Create ((`3esn` :`6esn`:`8esn`{`7esn`:{0}[..{`7esn`}],@usn6:_usn4 In $usn1})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})) With Distinct *,{`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `8esn` Order By $999 Contains {7} Ascending,None(`6esn` In 00 Where 0.12[..$`6esn`][..$1000])[Case _usn4 Is Null Is Null When 07 Is Null Then False Contains $#usn8 Contains 9e1 End..`2esn`(Distinct #usn8[`7esn`..])][[_usn4 In 0.0[..{999}][..0.0] Where 12 Ends With 01|0.0 Is Not Null Is Not Null]..[Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null]] Desc Limit usn1 In 00 In {_usn3} Union Delete {`4esn`:#usn7 Starts With 1000 Starts With .e1}[Reduce(`4esn`=Count(*) In 0e0 In 9e1,`1esn` In 0.e0 =~`1esn` =~`6esn`|#usn8 In `8esn` In 07)..(@usn5 {`2esn`:1.e1 =~9e12 =~`4esn`})<-[@usn5?:usn1 *..010{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}]->(`8esn` :`1esn`{usn2:0.0 Is Not Null,usn2:0.12[Count(*)..][$#usn7..]})-[`5esn`{`7esn`:@usn5[..$@usn5][..0Xa]}]->(#usn7 :#usn8{_usn3:`1esn`[..00][..{7}]})][Shortestpath((({`7esn`:{`1esn`} =~{_usn4}})-[_usn3?:usn1 *12..{#usn7:0e0 Contains `3esn` Contains `7esn`}]-(`5esn` $`8esn`)))..[`2esn`,{`2esn`} Starts With @usn6,9e1 =~999]],$`8esn` In 0.0 In `1esn`,{usn1} =~123.654 =~\"d_str\" Foreach(`8esn` In Shortestpath(((:@usn6{usn2:{#usn8}[12.0][$@usn6]})<-[{_usn4:{1000} Ends With {`8esn`}}]-(@usn5 :`7esn`{_usn3:{``}[_usn4..$`1esn`]})<-[#usn8? *..0Xa{`4esn`:$`2esn` Ends With 0.12 Ends With .e1,`4esn`:07 =~@usn5}]-(:`3esn`:`6esn`{999})))[..Extract(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where Count(*) Ends With 123.654 Ends With $12|0Xa[$1000..$123456789])][..{@usn6:12 Starts With {_usn4} Starts With $#usn8}]| Match _usn3=(@usn6 :@usn6),usn2=((_usn4 :#usn7{`8esn`:$999 Contains {7}})<-[`4esn`:`4esn`|:#usn7{`2esn`:{`4esn`}[$_usn4..][9e0..]}]-(`6esn` )) Using Index `3esn`:#usn7(usn2)) Foreach(@usn5 In [`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]][..Reduce(`4esn`=@usn5[12.0][{1000}],_usn4 In `2esn`|0[$`6esn`...e1][`1esn`..$`7esn`])][..[7[010][00],$7[$`3esn`],#usn7 =~{`4esn`} =~123456789]]| Match @usn6=Allshortestpaths(((:#usn8{#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}}))))"),
    octest_legacy:ct_string("With  Allshortestpaths((`8esn` :#usn8{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[_usn4:`3esn`|:@usn5 *0x0..]->(`7esn` :usn2:`2esn`))[All(`2esn` In {999} Is Not Null Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF)][Shortestpath((:_usn3{_usn3:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF,`5esn`:1.0 Is Null Is Null})<-[`3esn`:`6esn`{`3esn`}]-(_usn4 :#usn7{_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})<-[ *123456789..0X7]-(`2esn` :`2esn`{`3esn`:#usn8 =~{999}}))] As `4esn`,$7 In 1.0 In 1e1,12.0[010] Where 0.0 Contains $_usn4 Contains {`2esn`} Foreach(#usn8 In 010 Is Not Null Is Not Null| Start usn1=Node:_usn3(_usn3='s_str') ,`3esn`=Node:``(_usn3={0})) Return Distinct 123456789[12..$`4esn`] As `7esn` Order By 9e1 Contains .e1 Contains $`2esn` Ascending,$`5esn`[`1esn`..$123456789] Desc Skip $0[..{usn2}][..$usn1] Limit 9e1[$_usn4..0xabc] Union Remove Shortestpath(({`4esn`:12 Starts With {_usn4} Starts With $#usn8})<-[`1esn`?:usn1{@usn6:{`1esn`} Starts With @usn6,usn2:1e1 Contains usn2}]-({``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`})-[_usn3?:`8esn`|:_usn4{@usn6:{`1esn`}[`6esn`..12e12]}]-(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})).`6esn`,Case `6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}] When 1.e1[..12.e12][..$usn2] Then $_usn3[{999}] When $7 Is Null Then `1esn` =~1000 =~1000 Else 9e12[$`5esn`] End.`3esn`?"),
    octest_legacy:ct_string("Remove `4esn`:`6esn`:`8esn`,(`6esn` {`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null})<-[@usn5:`8esn`|:_usn4]->(:`8esn`:@usn5{#usn7:'s_str'[_usn4..0x0]})-[`6esn`?]->(:usn2:`2esn`{@usn5:{`3esn`}[{`5esn`}],_usn3:7 Is Not Null}).``?,{`2esn`:{#usn8} =~{999} =~{#usn7}}._usn4? Start `3esn`=Node:`2esn`(@usn6={`4esn`}) Where False[999] Union All Remove [0X0123456789ABCDEF[$`5esn`..],$999 Is Null,{`4esn`}[{`4esn`}..999]].`2esn`!,Reduce(usn1=$@usn5[`1esn`..],`8esn` In $12[{7}..0X0123456789ABCDEF]|9e12[..0X7]).`6esn`?,({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[:`1esn`|:`3esn` *..010{#usn7:$`1esn`[#usn8][$@usn5],usn1:{`2esn`}[Count(*)]}]-(#usn7 :`8esn`:@usn5{`8esn`:False Ends With $``})._usn3 Start _usn3=Node:`7esn`({#usn8}) Where {999} Is Null Create Unique ((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0})),(((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4}))) Union Foreach(`5esn` In 9e1['s_str'..0xabc]| Detach Delete $@usn5 In 's_str' In $12,Shortestpath(((`5esn` :``{`3esn`:.e1 Ends With 0Xa Ends With .e1,`3esn`:`3esn`[_usn4..{0}][`5esn`..usn2]}))) Ends With Case When $``['s_str'..][0x0..] Then 9e12[..0X7] Else $1000[..$999] End,{`7esn`} Ends With `` Ends With {`8esn`} Create `5esn`=Allshortestpaths(((({@usn6:07 =~@usn5,_usn4:12e12 Starts With `1esn` Starts With usn2})<-[:_usn4|:usn1 *07]-(#usn8 :#usn8{`1esn`:{`2esn`} In 0Xa In {_usn3},`8esn`:9e0 Starts With .e0 Starts With \"d_str\"})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})))),`8esn`=(({`1esn`:12 Starts With 0x0})<-[`5esn`{`6esn`:12 Is Not Null Is Not Null,`8esn`:`3esn` Is Not Null Is Not Null}]->(_usn3 {@usn5:.e12 =~.e0}))) Return Distinct 12.e12[``..usn2][{#usn7}..@usn5] As #usn7,$`1esn`[#usn8][$@usn5] Skip 0.0[..{999}][..0.0] Limit [.e12 Ends With 1000 Ends With 010,{7}[{`4esn`}][`6esn`],{7}[{`4esn`}][`6esn`]] Is Not Null Create Unique (({@usn5:$@usn6 Starts With {`1esn`} Starts With 12,`8esn`:{1000}[\"d_str\"..{@usn5}][$1000..$#usn8]})),Allshortestpaths((((#usn8 :usn2:`2esn`)<-[`8esn`:`6esn`{`5esn`:True Is Not Null,`4esn`:#usn7 Starts With $999}]-(:`5esn`:@usn5{#usn8:$12 Contains 0Xa})-[?:`3esn`|:@usn5 *0X7..0Xa{`5esn`:$`2esn`[$usn2..][{``}..]}]->({#usn7:0.12 Contains 12.0,`6esn`:\"d_str\" Is Null Is Null}))))"),
    octest_legacy:ct_string("Load Csv From Shortestpath((_usn3 :#usn7{`7esn`:123.654 Ends With usn2 Ends With 0})-[`6esn`:#usn8|`2esn`{#usn7:$#usn7 Starts With False Starts With {`6esn`},#usn8:`1esn`[..00][..{7}]}]->(:`3esn`:`6esn`{#usn7:'s_str'[_usn4..0x0]})<-[@usn5:@usn5|:`7esn` *..010{`3esn`:#usn8 =~{999}}]-(`5esn` :`5esn`:@usn5{`5esn`:0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`],#usn7:{`2esn`} Starts With @usn6})) In Extract(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2]) In Shortestpath(((`` :_usn4{`6esn`:0.0 Contains $_usn4 Contains {`2esn`},`3esn`:.e1[..{`7esn`}][..{_usn3}]}))) As #usn7 "),
    octest_legacy:ct_string("Create Unique Shortestpath((((:`8esn`:@usn5)-[`5esn`? *..010{`7esn`:$_usn3 =~{_usn4} =~$`6esn`}]-(:``$_usn4)<-[`3esn`?:_usn3|`8esn` *0xabc..7{`3esn`:`7esn`[0..$usn2][{usn2}..0.e0],`7esn`:0.0[9e1..][Null..]}]-(usn2 {_usn3:$0 In _usn4})))) Union Unwind [@usn5[..$@usn5][..0Xa],{`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`]] In Filter(_usn4 In 0.0[..{999}][..0.0] Where True Starts With $`4esn` Starts With 12e12) As `6esn` Unwind 0X7 Is Null As `2esn` Unwind {`7esn`}[..9e12][..0.0] As #usn7 Union Remove None(#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}).`6esn`,{`1esn`}.`6esn`? Merge `1esn`=({`4esn`:#usn8 Is Null}) On Match Set @usn5+=usn2 =~0X7 =~{#usn7},usn1 =[False Starts With 010] Contains Extract(_usn3 In True[7][$999] Where 0e0[$#usn8...e12]|12 Is Not Null Is Not Null) Contains [`1esn` In $12 Is Not Null],usn2 =$`4esn` Starts With 9e12 On Match Set [$1000 Is Not Null Is Not Null].``? =7 In 1.e1 In $usn1,`4esn`(Distinct 00[Count(*)...e0][$#usn7..0X0123456789ABCDEF],`3esn`[..{_usn4}][..{@usn5}]).`8esn` =$`6esn`[`8esn`][$`5esn`],Any(_usn3 In {`2esn`} Ends With {12} Ends With 7 Where $7[{`1esn`}]).usn2! =Null[010..][{``}..] Remove `7esn`(Distinct {999} Starts With {12},999 Ends With .e12 Ends With .e1).@usn5"),
    octest_legacy:ct_string("Using Periodic Commit 999 Load Csv From `8esn` Contains 1e1 As `4esn` "),
    octest_legacy:ct_string("Return *,{@usn6}[True..{_usn3}] As `2esn`,1.e1 In 0Xa In $#usn8 As usn2 Order By @usn6[{0}..] Ascending Skip {#usn7:12.e12[{@usn5}..][9e1..]} Is Null Is Null Limit $1000 Is Null Is Null Match Allshortestpaths(((_usn4 :@usn6)-[`5esn`?:@usn5|:`7esn`]-(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]}))),Shortestpath(((`` {``:0x0 =~123.654 =~{999}})-[{`2esn`:``[{123456789}..]}]->(#usn8 {`3esn`:{`8esn`}[0X7][$`3esn`],usn2:True[True..]}))) Where Count ( * )[Count ( * )][12] Merge Shortestpath((((usn1 :@usn5)-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})))) On Create Set Filter(`1esn` In `3esn`[07..] Where 9e12 Is Not Null).@usn5! =07 =~$`8esn` =~9e1,`4esn` =Reduce(usn1=$#usn7 Ends With 0.12 Ends With {@usn6},_usn3 In {`2esn`} Ends With {12} Ends With 7|{0} Is Null) Is Not Null Is Not Null On Create Set `8esn` =(`4esn` :_usn4{`2esn`:#usn7 =~00})<-[``?:#usn8|`2esn`]->(:`8esn`:@usn5)<-[`2esn`?:@usn6|`` *..00]->({_usn3}) Starts With Case {`4esn`}[$123456789..] When $`2esn` Starts With {`8esn`} Starts With {usn1} Then {``} Is Null Is Null When #usn7 Contains {`3esn`} Contains $`6esn` Then $123456789 =~`4esn` End Starts With [123.654 Ends With usn2 Ends With 0],`1esn` =None(`6esn` In 00 Where 0.12 In 0X7)[Filter(_usn4 In `2esn` Where {@usn6} Contains 123.654 Contains 01)..Filter(_usn4 In `2esn` Where #usn8[`7esn`..])],Case When 0X0123456789ABCDEF[0X7..] Then 01234567[..9e1] Else {999}[$123456789..][12..] End.``! =12.e12[$`8esn`..{`8esn`}]"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str'[$usn2][Count(*)] As @usn5 Fieldterminator 's_str' Union Start `7esn`=Rel:_usn4({`2esn`}) "),
    octest_legacy:ct_string("Merge usn1=Shortestpath((((usn1 :@usn5)-[`5esn`?:usn1]->(:@usn5{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``})<-[#usn7? *999{usn2:{1000}[{``}][999]}]-({`2esn`:$#usn7[`5esn`],``:{`2esn`} In $123456789 In True})))) On Match Set None(`8esn` In $12[{7}..0X0123456789ABCDEF] Where `7esn` Starts With 0X7 Starts With $`7esn`).`7esn`! =$_usn3 In 0X7 In $`1esn` On Match Set #usn7 =0.0[..{999}][..0.0],{`3esn`:$#usn7 =~{12} =~False,usn2:$@usn6[$`8esn`..][7..]}.@usn5? ={@usn6} Contains 0e0,Case When $1000[..12.0][..0e0] Then $_usn3 Is Null Is Null When `3esn` Is Not Null Is Not Null Then 7 Contains `2esn` Contains $`8esn` Else {`4esn`}[..{`4esn`}] End.usn2! ={`8esn`:{#usn8}[$#usn7..]}[Case 12.e12[``..usn2][{#usn7}..@usn5] When `3esn` Is Not Null Is Not Null Then 7 Contains `2esn` Contains $`8esn` Else $``[..1.e1][..12] End..] Union All Load Csv From _usn4[['s_str'[..0X7],False Contains 0.e0 Contains Count(*)]..] As ``  Remove {_usn4:True[7][$999],`8esn`:12.e12[2.12..][0xabc..]}.#usn7!,Extract(_usn3 In {@usn5}[..#usn7]).`4esn`? Remove `1esn`:_usn4,[_usn4 Is Null Is Null].usn1,{@usn6:True =~_usn3 =~123456789}._usn4"),
    octest_legacy:ct_string("Unwind `7esn` Is Not Null Is Not Null As `6esn` Delete [`1esn` In $12 Is Not Null Where {1000}[{usn1}][Null]][{#usn8:`6esn` Ends With 2.12 Ends With @usn6,`1esn`:{`8esn`}[True..][.e1..]}..All(`6esn` In 00 Where 0X0123456789ABCDEF Is Null Is Null)] Foreach(@usn6 In count(Distinct 999[12.0..][#usn7..]) =~Allshortestpaths(((usn1 :`2esn`{usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF}))) =~@usn6(`8esn` Starts With {123456789},$`` Starts With 12 Starts With $usn2)| Create Unique (#usn8 :`7esn`),`3esn`=Shortestpath((:_usn4)-[`6esn`?{#usn7:`5esn`[..9e0][..01234567],#usn7:1e1[..$1000][..999]}]-({`3esn`:9e1 =~999})-[`3esn`? *01..07]->({`7esn`:@usn5[..$@usn5][..0Xa]}))) Union Detach Delete @usn5 =~Reduce(_usn3=$@usn5[`6esn`..],`6esn` In Count(*) Ends With $`` Ends With {7}|123456789 Ends With usn1 Ends With usn2) Start `2esn`=Relationship:#usn7('s_str')  Merge `8esn`=Shortestpath((:`8esn`:@usn5{`6esn`:_usn3 Contains .e0 Contains {usn2}}))"),
    octest_legacy:ct_string("Detach Delete 12.e12[{@usn5}..][9e1..] Union All Remove [_usn3 In True[7][$999] Where Count(*) Is Not Null].`7esn`,Reduce(`1esn`=0.12 Contains 12.0,`` In {`1esn`} Starts With @usn6|`5esn`[0xabc..])._usn4?,All(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0.12[..$`6esn`][..$1000]).@usn6? Union Foreach(usn1 In {`4esn`:12 Starts With {_usn4} Starts With $#usn8} =~Reduce(@usn5=$@usn6 =~#usn8,`5esn` In $`2esn`[12.e12][$@usn5]|{`1esn`} In 12.e12 In 9e1)| Start `3esn`=Relationship:`2esn`(#usn7={usn1}) ,`5esn`=Relationship:`7esn`({#usn8})) Merge (((`2esn` :@usn5{`2esn`:{`6esn`}[..{`2esn`}],#usn7:@usn5 Is Not Null Is Not Null})-[@usn6?:`1esn`|:`3esn`{``:$@usn5[..usn2][..$#usn7],_usn4:.e1 Contains $`3esn`}]-(:usn1:_usn4{`4esn`:01234567 In $123456789})-[`8esn`?]->({@usn6:$`` Starts With 12 Starts With $usn2}))) On Match Set `6esn`($usn1 Starts With $999 Starts With {@usn5},#usn7 =~00).usn2! =Case 0Xa[.._usn3][..$`6esn`] When {`4esn`}[$123456789..] Then {`2esn`}[$_usn3..{_usn4}][$`1esn`..`2esn`] When {usn2}[$`4esn`] Then $1000 Starts With $`8esn` Starts With {`5esn`} Else @usn6[$_usn4] End[(`8esn` :`2esn`)-[`8esn`]->(`8esn` :`8esn`:@usn5)..],`7esn`+='s_str' Starts With 12e12 Starts With $_usn4,(#usn7 {`7esn`:12e12 Ends With `4esn` Ends With 123456789})<-[``{`3esn`:{`3esn`}[{`5esn`}]}]-({@usn5:``[{123456789}..]}).`8esn`? =Reduce(`4esn`=@usn6[$_usn4],`8esn` In $12[{7}..0X0123456789ABCDEF]|0.12 Starts With 9e12 Starts With $`1esn`)[Reduce(usn2={`7esn`}[0X7..][0x0..],_usn3 In {`2esn`} Ends With {12} Ends With 7|01[..{`7esn`}][..01234567])][(:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})-[_usn4 *0x0..]-(:#usn7{``:`6esn` Ends With 2.12 Ends With @usn6,`5esn`:$`6esn` Ends With {0} Ends With {`7esn`}})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})] Create @usn6=((:`7esn`{``:.e1 Contains $`3esn`})<-[:`3esn`|:@usn5*..]-(`3esn` :`6esn`:`8esn`)<-[ *..010{#usn7:{`2esn`} Starts With @usn6,`8esn`:{`1esn`}[`6esn`..12e12]}]->(:_usn3$usn1))"),
    octest_legacy:ct_string("Return Filter(`1esn` In `3esn`[07..] Where 12 Ends With 01)[..All(`3esn` In 123.654[1e1..][{#usn8}..] Where 0Xa Contains Count ( * ))] As usn2,Allshortestpaths((usn2 {_usn3:$0 In _usn4})<-[#usn7?:`4esn`|:#usn7 *..0{`5esn`:@usn5 =~'s_str'}]-(_usn4 :usn1:_usn4{`7esn`:{usn2} =~`7esn` =~07})<-[{`2esn`:1000 Is Null Is Null}]->(:_usn4{`4esn`:`8esn` Contains $`3esn` Contains {`4esn`},_usn3:$12[{7}..0X0123456789ABCDEF]}))[..[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 12 Starts With {_usn4} Starts With $#usn8]][..(:``{`1esn`:#usn8 Is Not Null,`5esn`:$@usn6[$0..usn1][0X0123456789ABCDEF..$999]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-(:_usn3{#usn8:\"d_str\" Ends With False Ends With {@usn6}})-[?:_usn3|`8esn` *12..{`8esn`:$999 Ends With {0},`2esn`:`1esn`[Null..]}]-(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})],00 Ends With `8esn` As #usn7 Skip Single(`5esn` In $`2esn`[12.e12][$@usn5] Where $1000[..$999])[[`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where $usn2 =~\"d_str\" =~_usn3]..`1esn`(Distinct $@usn5[`6esn`..],9e12[..0X7])][Allshortestpaths((:`1esn`{_usn4:.e1 Ends With {7} Ends With $usn1})<-[#usn8:_usn4|:usn1 *0X0123456789ABCDEF{`2esn`:$7 Is Null}]-(`3esn` :``)<-[@usn6?:@usn5|:`7esn` *1000{`2esn`:$0[{`2esn`}..{`1esn`}][{@usn5}..$`7esn`],_usn4:#usn8 Is Null}]->(:`8esn`:@usn5{`5esn`:$`3esn`[..$`2esn`][..123.654]}))..(`4esn` :`1esn`{@usn5:{1000} Ends With {`8esn`},`2esn`:$`5esn`[..{`2esn`}][..{0}]})-[?:`7esn`*{`6esn`:{0} =~12.0,usn2:9e12 Ends With 123456789}]->(@usn6 :`1esn`{`5esn`:$`2esn`[$usn2..][{``}..]})] Limit `4esn`[usn1] Union All Merge `6esn`=Shortestpath(((#usn7 :_usn3{`2esn`})<-[@usn6?:`1esn`|:`3esn` *..0Xa{`1esn`:12 Starts With 0x0}]->(#usn7 :_usn3{`2esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0}))) On Match Set Case When .e1 Contains $`3esn` Then `7esn` Ends With $_usn3 Ends With usn2 When 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Then 2.12 =~0x0 =~_usn4 Else 9e1 =~999 End.`3esn`! =$`2esn` In .e1 In .e0,`5esn` ={12}[usn2],usn2+=usn2[999..] On Create Set `4esn`+={usn2:{`1esn`} Is Not Null} In {`3esn`:$#usn7 =~{12} =~False,usn2:$@usn6[$`8esn`..][7..]} In Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Load Csv From 999 Ends With {`2esn`} As `1esn` "),
    octest_legacy:ct_string("Merge ((:`8esn`:@usn5{`5esn`:$`8esn`[..$999][..0],#usn7:$1000 =~{1000} =~`5esn`})) Union Merge `1esn`=((`5esn` :_usn3)-[`1esn`?:usn2|#usn7]->(`4esn` :`4esn`:@usn6)-[ *..0Xa{`1esn`:1e1[..01],`7esn`:12.e12[`7esn`]}]-({`1esn`:12 Starts With 0x0}))"),
    octest_legacy:ct_string("Detach Delete Single(`1esn` In $12 Is Not Null Where 0X0123456789ABCDEF[7...e0][`1esn`..usn2])[(_usn3 {usn1:0Xa[0e0..{#usn7}],`1esn`:.e0[True..Count ( * )][#usn7..0X7]})<-[:@usn6|`` *12..{`3esn`:#usn8 =~{999}}]-({`2esn`:{7}[$7..],#usn7:`1esn` In 07})<-[_usn3:`4esn`|:#usn7{@usn5:12 Is Not Null,`2esn`:$999 In 999}]->({``:False Contains $#usn8 Contains 9e1})..],`6esn`[00..][$123456789..],$usn2 Ends With $`5esn`"),
    octest_legacy:ct_string("With Distinct *,12e12[{usn2}..][`8esn`..] As `7esn` Order By usn2(0.0 Is Not Null Is Not Null,{123456789} Is Not Null)[None(`2esn` In {999} Is Not Null Where {`5esn`}[$`8esn`..$`1esn`][0.12..0.12])..[_usn4 In `2esn` Where False Ends With $``|9e0[#usn8]]][(`3esn` :`3esn`:`6esn`)-[]->(`7esn` :#usn8)..[0X0123456789ABCDEF Contains $`1esn` Contains 1000,0e0[$#usn8...e12],.e12 Is Null Is Null]] Desc,$`2esn`[{usn1}..] Descending Where 12.e12[..1e1] Foreach(`` In Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..]| With Distinct *,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,12 Is Not Null Is Not Null As #usn8 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending) Union Foreach(#usn8 In $usn1 =~010 =~07| Optional Match Shortestpath(({``:.e1 Contains $`3esn`})-[`5esn`?:`3esn`|:@usn5 *999]-({`8esn`:0e0[$#usn8...e12],usn2:{``}[_usn4..$`1esn`]})),Allshortestpaths((:usn1:_usn4{``:@usn5[$12..\"d_str\"],`4esn`:'s_str'[.._usn4][..``]})<-[@usn6:#usn8|`2esn`{_usn4:$_usn4[9e0..]}]-(:_usn3{#usn8:$`` Starts With 12 Starts With $usn2,`1esn`:00})<-[`8esn`? *999]->(:`1esn`{`6esn`:$_usn3[010..False],_usn4:$123456789 Starts With $123456789 Starts With Count ( * )})) Using Scan `2esn`:@usn6)"),
    octest_legacy:ct_string("Using Periodic Commit 123456789 Load Csv With Headers From 0.12 Is Not Null Is Not Null As `` Fieldterminator \"d_str\" Optional Match `5esn`=((#usn7 :_usn3{`2esn`})<-[@usn6?:`1esn`|:`3esn` *..0Xa{`1esn`:12 Starts With 0x0}]->(#usn7 :_usn3{`2esn`})<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})),Shortestpath((:`8esn`:@usn5)<-[?:`1esn`|:`3esn`{#usn8:$0 Is Not Null,``:True Is Null Is Null}]->(`4esn` {`7esn`:{``} Ends With .e12 Ends With 0.e0})) With Distinct *,Single(`1esn` In `3esn`[07..] Where `` Ends With $`4esn` Ends With 0X0123456789ABCDEF) Ends With Case {`2esn`}[..{@usn6}][..1.e1] When Null Is Null Is Null Then #usn7 Contains {`3esn`} Contains $`6esn` When 0X0123456789ABCDEF[$`2esn`..][`2esn`..] Then $usn1[..'s_str'][..$#usn8] End Ends With Filter(`6esn` In Count(*) Ends With $`` Ends With {7} Where {1000} In {123456789}) As `8esn` Skip {`5esn`} Contains 's_str' Contains 9e1 Limit Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(:#usn8)<-[`3esn`?:`3esn`|:@usn5 *0x0..]-(:`1esn`{`5esn`:False Ends With $``,_usn4:0.e0[{999}][{`1esn`}]})))[False..][({`1esn`:{123456789}[12..][$12..]})-[?:`1esn`|:`3esn`{@usn5:{`6esn`} Ends With 0e0 Ends With {``},@usn5:{`1esn`} Starts With `4esn` Starts With {0}}]->(:`6esn`:`8esn`{`5esn`:$12 Is Not Null Is Not Null,`4esn`:{@usn5}[..@usn6]})<-[`5esn`?:`7esn`]->({@usn5:Count ( * ) Is Null})..]"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]->(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}))) On Create Set Extract(`1esn` In $12 Is Not Null Where 1e1[..$1000][..999]|True Starts With $`2esn` Starts With {@usn6}).``? =[$7 In 1.0 In 1e1,$12 Is Not Null Is Not Null,True Is Not Null Is Not Null][(`1esn` :#usn7)<-[? *0X0123456789ABCDEF]->(@usn6 :`8esn`:@usn5{`6esn`:{`6esn`}[..{`2esn`}],`5esn`:_usn4[Count(*)]})..[{_usn3}[$usn2..],$`3esn`[..$`2esn`][..123.654],12.e12[`7esn`]]],usn1 ={usn2} =~`7esn` =~07,usn1+=usn2[999..] Unwind Shortestpath((:_usn4{_usn4:#usn7 =~{`4esn`} =~123456789})-[`7esn`?:`6esn`]->(`1esn` :_usn4)-[#usn8:_usn3|`8esn`{`6esn`:`5esn` Is Null Is Null}]->(:`3esn`:`6esn`{`1esn`:$123456789[..$7][..$`6esn`]}))[Extract(`1esn` In `3esn`[07..] Where 999 Starts With 's_str')][Case `8esn` Contains $`3esn` Contains {`4esn`} When 9e1 Ends With $@usn5 Ends With $123456789 Then usn2[True] When 0.e0 =~`1esn` =~`6esn` Then usn2 =~0X7 =~{#usn7} Else 1.e1[..12.e12][..$usn2] End] As #usn7 Return $1000 =~{1000} =~`5esn`,12e12 Is Not Null Is Not Null As `5esn` Order By {#usn8}[Null] Descending,{`4esn`} In _usn4 Asc Limit [Null Is Null Is Null,12e12 Ends With `4esn` Ends With 123456789,{@usn6} Is Not Null][Any(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 0x0[{999}..][{_usn4}..])..] Union Optional Match `4esn`=((`2esn` :`3esn`:`6esn`)-[?:`7esn`*..{`6esn`:Count(*)[..``][..#usn8],``:{@usn6}[True..{_usn3}]}]-(:`7esn`{``:.e1 Contains $`3esn`})-[_usn3?:`8esn`|:_usn4 *12..{`5esn`:{#usn7} In Count ( * ) In $#usn8}]-(:`8esn`:@usn5)),_usn3=Allshortestpaths(((@usn6 :`2esn`)))"),
    octest_legacy:ct_string("Optional Match @usn6=Shortestpath(((`6esn` {@usn5:0x0[{7}..]})-[``?]->(usn1 :`6esn`:`8esn`{`5esn`:{#usn7} In Count ( * ) In $#usn8})<-[?{usn1:07 Is Null,@usn6:{_usn3}[$usn2..]}]-(`8esn` :#usn7{``:False Contains $#usn8 Contains 9e1}))) Using Index `7esn`:`6esn`(`3esn`) Using Scan usn1:usn2 Where 12.e12[``..usn2][{#usn7}..@usn5] Union Optional Match `6esn`=(`4esn` {`2esn`:@usn5[$12..\"d_str\"]})<-[? *01..07{`1esn`:$``[..1.e1][..12],`7esn`:{1000}[1000][$usn1]}]-({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000})<-[`6esn` *..7$0]->({#usn7:12 Starts With 7 Starts With $`5esn`,`3esn`:1000}) Where 999 Starts With 's_str' Union Create Unique ($`5esn`)-[?:`3esn`|:@usn5]-(#usn7 :@usn6{`3esn`:1000 Starts With `7esn`,`7esn`:True Is Not Null Is Not Null}),usn1=Allshortestpaths((:_usn3{#usn8:$7 Ends With $`8esn`,`7esn`:Count(*) Ends With $`` Ends With {7}}))"),
    octest_legacy:ct_string("Start usn2=Rel:#usn8(#usn7='s_str') ,`8esn`=Rel:_usn3(`2esn`={`2esn`})Where @usn5 In 1e1"),
    octest_legacy:ct_string("Start ``=Node:#usn8({`1esn`}) ,@usn5=Node:``(#usn7=\"d_str\") Return Distinct $@usn6 Ends With 01 Ends With 999 Skip {_usn3} Contains 9e0 Contains $999 Limit Allshortestpaths(((:`5esn`:@usn5{`7esn`:0x0[{999}..][{_usn4}..],_usn4:0[`4esn`][12.e12]})<-[`7esn`?:`6esn`]-(usn2 {#usn8:@usn5[$12..\"d_str\"]})<-[? *01..07]-(`2esn` :`4esn`:@usn6{_usn4:$@usn5 In $usn2 In {1000},@usn6:Count(*) Starts With $usn1 Starts With {usn2}}))) Starts With All(`5esn` In $`2esn`[12.e12][$@usn5] Where $7 Ends With $`8esn`) Create #usn8=(@usn6 {`5esn`:\"d_str\" =~`1esn` =~{`5esn`}}),`5esn`=Shortestpath((`7esn` {`5esn`:1.e1[..12.e12][..$usn2]})<-[@usn5?:`5esn`]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}))"),
    octest_legacy:ct_string("Detach Delete {_usn4}[{``}..],All(`6esn` In 00 Where {usn1} Ends With {`6esn`} Ends With 123456789) Starts With Case {123456789} Is Not Null When {usn2} =~`7esn` =~07 Then 0.0 Contains $_usn4 Contains {`2esn`} When $`` Starts With 12 Starts With $usn2 Then {`3esn`} Ends With `1esn` Ends With $@usn6 Else True[..010] End,9e1[123456789..] Match #usn7=Allshortestpaths(((:`6esn`:`8esn`))),usn1=Allshortestpaths(((:`7esn`{#usn8:1000 Is Not Null})-[? *999{@usn6:{7}[$123456789..{1000}][$`3esn`..`7esn`],@usn6:$@usn5 In $usn2 In {1000}}]->(:#usn8{#usn7:{usn1} In Count ( * ),``:$`5esn`[..{`2esn`}][..{0}]}))) Using Index @usn5:usn2(`2esn`) Where $0[$1000..00][{0}..{usn1}] Create (:`8esn`:@usn5{`7esn`:$_usn4[$`4esn`..$12],`3esn`:{`5esn`}[#usn8..0x0][\"d_str\"..{`4esn`}]}),`4esn`=(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`})<-[?:@usn5|:`7esn`]->({`4esn`:_usn4 Is Null Is Null,@usn6:{`5esn`} Contains 's_str' Contains 9e1}) Union All Start `8esn`=Relationship:`7esn`({usn1}) ,@usn6=Node:`1esn`(\"d_str\")Where @usn6[$_usn4]"),
    octest_legacy:ct_string("Load Csv From #usn7(Distinct)[usn2(Distinct)..{#usn7:0.0 Contains $_usn4 Contains {`2esn`},`4esn`:#usn8[$0..False][$`1esn`..$#usn7]}][Case When {`4esn`}[..{`4esn`}] Then {`7esn`}[0X7..][0x0..] When {@usn6} Contains 123.654 Contains 01 Then #usn8 Is Not Null End..[9e12 Ends With 123456789]] As #usn7 Fieldterminator 's_str' Detach Delete `7esn` Is Not Null Is Not Null Union Create Unique Shortestpath((`7esn` {`3esn`:0.0 =~12.e12 =~1.0,`1esn`:$usn1 Starts With {_usn3}})<-[?:`3esn`|:@usn5*..{usn2:{`8esn`}[0X7][$`3esn`]}]-({`7esn`:123.654 Ends With usn2 Ends With 0})<-[?{@usn6:@usn6[{0}..],``:$usn1[0X7]}]->(#usn7 :`1esn`{usn1:{`6esn`}[..{`2esn`}]})),`7esn`=((_usn3 :@usn5{`2esn`:@usn5[$12..\"d_str\"]})-[`3esn`?:`5esn`]->({`5esn`:$``['s_str'..][0x0..],`1esn`:{@usn5}[Count(*)..]})-[_usn3?:``]-(@usn5 {_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})) With Distinct *,(:`7esn`{``:.e1 Contains $`3esn`})<-[?:usn2|#usn7]->(#usn8 :#usn7) As #usn8 Order By `6esn` Is Null Is Null Desc Where {@usn6}[$`7esn`..][False..] Unwind @usn5 =~`` As `2esn` Union Merge #usn8=Allshortestpaths(({`3esn`:0.e0[{999}][{`1esn`}],`1esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]})-[:usn2|#usn7 *0X7..0Xa]->(#usn7 :@usn5)) On Create Set `6esn`+=$7 In #usn8"),
    octest_legacy:ct_string("Create (((:_usn4{`1esn`:{123456789}[12..][$12..]})<-[ *12..]-(_usn3 :#usn8{`6esn`:{`3esn`}[$``..#usn7][0X0123456789ABCDEF..`2esn`]})<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))),`7esn`=(({`3esn`:{7} Starts With $usn1 Starts With 1.0,usn2:{@usn5}[..{12}][..0x0]})) Remove {@usn6:12 Starts With {_usn4} Starts With $#usn8,`2esn`:{@usn6}[$`7esn`..][False..]}.`1esn` Merge `2esn`=((_usn3 :`5esn`:@usn5)<-[`7esn`? *0xabc..7]->(:`6esn`:`8esn`{`3esn`:$`6esn`[{`3esn`}..12],_usn3:0[{@usn5}..][7..]})) On Create Set _usn4 =Filter(`1esn` In $12 Is Not Null Where {@usn5}[1e1..][9e1..]) In [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 12 Starts With {_usn4} Starts With $#usn8] In Filter(`2esn` In {999} Is Not Null Where $7 Ends With 0X7),#usn8 =0Xa[@usn5][{`7esn`}] Union All Load Csv From `5esn`(0X0123456789ABCDEF[9e12])[[`8esn` In $12[{7}..0X0123456789ABCDEF] Where $``['s_str'..][0x0..]]..None(`1esn` In 0.e0 =~`1esn` =~`6esn` Where {`8esn`}[0X7][$`3esn`])][Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000})..Case 7 Is Null Is Null When usn1 Contains $7 Contains $`` Then 12e12 Is Not Null End] As _usn3 Fieldterminator 's_str' Create _usn4=((`8esn` :`5esn`:@usn5)-[_usn3:#usn7|`2esn`]-(`4esn` :`4esn`:@usn6{`8esn`:{usn1}[$`8esn`..0.0],_usn4:{123456789}[12..][$12..]})) Load Csv From Extract(`2esn` In {999} Is Not Null Where `1esn` Is Null Is Null) Is Not Null As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind {1000}[{usn1}][Null] As @usn6 Union All Create (`3esn` :`1esn`)-[{``:\"d_str\"[{`8esn`}..]}]-({`3esn`:{`2esn`} In 0Xa In {_usn3},`2esn`:$``['s_str'..][0x0..]}),`1esn`=Allshortestpaths((usn2 :`5esn`:@usn5)) With  's_str'[_usn3..] As `5esn`,{0}[False..@usn5] As `1esn` Skip 123.654 Contains $_usn3 Contains 0X0123456789ABCDEF Return Distinct *,`1esn`[Null..] As `2esn` Order By $7 Is Not Null Descending,Single(`8esn` In $12[{7}..0X0123456789ABCDEF])[Case 9e1[123456789..] When 12 Starts With 7 Starts With $`5esn` Then {_usn3} Contains True Contains 0X7 When `1esn`[..00][..{7}] Then 1.e1[12e12..{`6esn`}] End..] Descending Limit Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6})"),
    octest_legacy:ct_string("Create Unique #usn7=Allshortestpaths(((`5esn` :`2esn`{#usn8:True[$`7esn`..{1000}]})<-[usn1?:`6esn` *12..{`6esn`:999 Starts With $123456789 Starts With {``}}]->({_usn4}))),((:#usn7{#usn7:$`8esn` In $`2esn` In {7}})) Return 9e1 Ends With Count(*) Ends With False As `6esn` Order By {0} Is Null Ascending Skip .e12[$7..][{`6esn`}..] Limit {`3esn`} Is Not Null Is Not Null Start usn1=Node:_usn3(_usn3='s_str') ,`8esn`=Node(07,123456789,123456789)Where $`4esn`[..'s_str'][..`8esn`]"),
    octest_legacy:ct_string("Load Csv From `3esn`[_usn4..{0}][`5esn`..usn2] As usn1 Fieldterminator 's_str' Merge `2esn`=((`7esn` {`4esn`:#usn8 =~{999},`2esn`:9e1 =~`` =~{`7esn`}})) On Create Set _usn4:usn1:_usn4,`7esn` =#usn7[00],``:@usn6 On Match Set `5esn`+=$`3esn` Contains 0 Contains 07,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $#usn7[..@usn6][..$0]).`1esn`? =$1000[0.12..0.12] Start #usn7=Node:#usn7('s_str') Where {12}[00..{@usn6}][1.e1..0]"),
    octest_legacy:ct_string("With Distinct [`1esn` In `3esn`[07..] Where @usn6[{0}..]|0.e0[12.e12]] Contains {usn2:{`4esn`}[{`1esn`}][{1000}],#usn8:123.654 Contains $_usn3 Contains 0X0123456789ABCDEF} As @usn6,All(`8esn` In $12[{7}..0X0123456789ABCDEF] Where $`5esn`[$#usn7..][0xabc..]) Contains All(#usn7 In 0Xa[@usn5][{`7esn`}] Where @usn5[12.0][{1000}]) As #usn8 Order By {#usn8} Contains 1000 Contains $`4esn` Ascending,Filter(@usn5 In Null =~12e12 Where #usn8[`7esn`..]) Ends With Reduce(`5esn`=9e12 Is Not Null,_usn4 In `2esn`|#usn8 Is Not Null) Ends With (_usn4 :``{usn2:`3esn`[..{_usn4}][..{@usn5}],usn1:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`})<-[:#usn8|`2esn` *12..{`5esn`:.e12 =~$_usn4}]->(`` {`5esn`:0[`4esn`][12.e12],_usn4:00})<-[ *123456789..0X7]-({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Ascending Create #usn8=(`7esn` :#usn8{`6esn`:$``['s_str'..][0x0..]})<-[? *0X7..0Xa]->({`6esn`:`2esn` Ends With 12.e12 Ends With `2esn`}) Union Remove Case When $0 Is Not Null Then #usn8 Is Not Null Else 01234567[..9e1] End.@usn6,{_usn4:0Xa Contains $``,@usn6:@usn6[$_usn4]}.@usn5 Return Distinct *,{`7esn`:{999} Starts With {12},`3esn`:00} =~[0X0123456789ABCDEF[$`5esn`..],#usn7 Ends With $#usn7 Ends With {`8esn`}] =~[{12} =~0.e0 =~{_usn3},$#usn7 =~{12} =~False,1000 Is Null] As `8esn` Union Optional Match `5esn`=(`8esn` :`5esn`:@usn5)-[`5esn`?:usn2|#usn7]->(_usn3 :`4esn`:@usn6{`3esn`:0e0[$#usn8...e12],`2esn`:{usn1} In Count ( * )}) Using Join On `4esn` Using Join On `1esn`,`7esn`,usn2 Where 00 With  `7esn`[{usn1}][999] As `7esn`,Extract(_usn4 In 0.0[..{999}][..0.0] Where False[999]|`5esn`[0xabc..]) Starts With [`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123.654[$`1esn`..Null][1000..{_usn3}]|Count ( * )[..12][..{@usn6}]] Starts With Extract(`6esn` In Count(*) Ends With $`` Ends With {7} Where True Starts With $`2esn` Starts With {@usn6}) Order By @usn5 =~$`3esn` =~0X7 Descending Skip {usn1}[01..7][{`3esn`}..`6esn`] Start `2esn`=Rel:usn2(`2esn`={`7esn`}) ,`1esn`=Relationship( {@usn6})Where {`7esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create `5esn`=Shortestpath(((_usn4 :#usn7{`3esn`:7[010][00],#usn8:False Contains 0.e0 Contains Count(*)})-[``? *01..07{`1esn`:usn2 Ends With Count ( * ) Ends With $@usn6,`1esn`:1.e1[{#usn8}]}]->(`` {``:0x0 =~123.654 =~{999}})-[`4esn` *..010{``:123.654 Ends With usn2 Ends With 0,#usn7:{`3esn`} Starts With 0X0123456789ABCDEF Starts With `5esn`}]->(:`3esn`:`6esn`{@usn5:.e12 =~.e0}))),#usn8=Allshortestpaths((_usn4 {`3esn`:\"d_str\"[..0.e0],usn1:$`` In 0 In {1000}})-[`1esn`?:_usn3|`8esn` *0xabc..7]->(@usn5 :`6esn`:`8esn`))"),
    octest_legacy:ct_string("Remove {#usn7:0e0 Contains `3esn` Contains `7esn`}.usn1,Case When $7 Ends With 0X7 Then $1000[..$999] Else $`2esn` In {123456789} End.`6esn`! Start `8esn`=Relationship:`8esn`({`1esn`})  Union All Load Csv With Headers From 0[{usn2}..][usn1..] As #usn7  Union All Foreach(`` In {`1esn`:{123456789}[12..][$12..]} =~{`3esn`:9e1 =~`` =~{`7esn`},usn2:$`3esn` Ends With $999 Ends With 0X0123456789ABCDEF} =~[`1esn` In $12 Is Not Null Where 0e0 Contains `3esn` Contains `7esn`|_usn3[\"d_str\"]]| Create Shortestpath((:_usn4{_usn3:{`2esn`} Ends With {12} Ends With 7,usn2:0.e0[{999}][{`1esn`}]})<-[:@usn5|:`7esn`{`8esn`:12e12 Starts With `1esn` Starts With usn2}]->({_usn3:.e0[True..Count ( * )][#usn7..0X7],`5esn`:12.e12[{7}..7]})),Allshortestpaths((#usn7 {``:0x0 =~123.654 =~{999}})) Create _usn3=Shortestpath(((`2esn` )<-[usn1{`8esn`:`2esn` Starts With `` Starts With 1e1}]->(`3esn` :#usn7)))) Create ``=({#usn7:#usn8 =~{999}})-[{`7esn`:01234567 In $123456789}]->(:@usn5{`6esn`:{12} Contains `7esn` Contains $_usn3,@usn6:`2esn`[$1000..9e12][{#usn8}..{7}]}) Load Csv From $`5esn`[`1esn`..$123456789] As #usn7 "),
    octest_legacy:ct_string("Using Periodic Commit 07 Load Csv From $0[..{usn2}][..$usn1] As _usn4 Fieldterminator 's_str' Return Distinct .e1 Ends With {7} Ends With $usn1 As `` Skip Extract(_usn3 In {@usn5}[..#usn7] Where 0X0123456789ABCDEF Contains $`1esn` Contains 1000|$`1esn`[#usn8][$@usn5]) Is Not Null Limit `8esn` Contains 1e1"),
    octest_legacy:ct_string("Foreach(usn2 In [{@usn5}[..@usn6],$7[{`1esn`}]] Is Null Is Null| Match `5esn`=Allshortestpaths((((:#usn8{_usn4:{`6esn`} Contains 07,_usn3:{`6esn`} Contains {usn2} Contains $1000})-[?:`` *..00{``:`3esn` =~9e0 =~@usn6}]-(:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[:_usn4|:usn1 *07]->({`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]})))),Allshortestpaths(((:`5esn`:@usn5{`3esn`:{usn1}[$7..0x0]})-[usn1{`2esn`:1.e1 =~9e12 =~`4esn`}]-(`7esn` :`3esn`:`6esn`)-[:`5esn`]-(:@usn6{`4esn`:1.e1[{#usn8}]}))) Using Index usn1:`7esn`(_usn3) Using Join On `4esn`,`2esn` Where 0xabc[$@usn5] Match `2esn`=Allshortestpaths((({`6esn`:1.e1[12e12..{`6esn`}]})-[#usn7? *999{`4esn`:#usn8 Is Null}]-(:_usn4{`1esn`:$_usn4 Starts With 's_str' Starts With {7},usn1:#usn8 =~{_usn3} =~``}))),usn2=Shortestpath(((usn1 :#usn8)<-[`4esn` *..010]->(usn1 :`6esn`:`8esn`))) Using Scan ``:`4esn` Using Index `7esn`:`1esn`(`2esn`)) Foreach(`8esn` In 1.0 Is Null| Unwind Reduce(_usn4={123456789} =~01234567 =~`3esn`,_usn3 In True[7][$999]|0X0123456789ABCDEF[9e1..{12}][{0}..$`6esn`]) Ends With @usn5(Distinct {0} Is Null) Ends With {`6esn`:`3esn`[..{_usn4}][..{@usn5}],`2esn`:$`5esn`[`1esn`][0X0123456789ABCDEF]} As _usn4 With Distinct _usn4 Is Null Is Null,$`5esn` Is Not Null As _usn4 Order By Shortestpath((`6esn` :`7esn`)-[:_usn3|`8esn` *12..{`8esn`:Count(*)[.e12..],`5esn`:{#usn8}[12.0][$@usn6]}]-(`1esn` {_usn4:`3esn`[_usn4..{0}][`5esn`..usn2]})-[@usn5?:_usn4|:usn1]->(:usn2:`2esn`)) Contains Reduce(`2esn`=`5esn`[..9e0][..01234567],`1esn` In `3esn`[07..]|{1000}) Ascending,({`8esn`:Null In .e0})-[`2esn`:usn2|#usn7 *0X7..0Xa]->(`5esn` :@usn5{`8esn`:Count ( * ) =~{`5esn`} =~{_usn4},#usn7:$`1esn`[..{_usn3}]})<-[usn1:#usn7|`2esn`{#usn7:\"d_str\"[..0.e0],`7esn`:{``} Ends With .e12 Ends With 0.e0}]->(#usn8 :`8esn`:@usn5{`7esn`:1.e1 =~$usn2,`7esn`:$usn1[$123456789..0][{`1esn`}..12.0]}) =~None(`` In {`1esn`} Starts With @usn6 Where $`1esn`[$12][Count ( * )]) =~(`6esn` :`2esn`{`7esn`:#usn8 =~{999}})<-[:#usn7|`2esn`]->(:#usn7{usn2:{`8esn`}[0X7][$`3esn`]}) Ascending Skip {`4esn`}[$123456789] Limit Single(`6esn` In 00 Where 0.12 In 0X7)[..{`8esn`:.e1 Ends With {7} Ends With $usn1,@usn6:7[$0..][{_usn4}..]}] Where 0.12 Ends With {1000} Ends With `6esn`) Union Remove Extract(`1esn` In 0.e0 =~`1esn` =~`6esn` Where $usn1 In 0.12 In $``|Null =~12e12).`7esn`!,{#usn8:12.0 =~$#usn7 =~9e12}.@usn6!,Reduce(_usn3=12 Starts With 0x0,_usn4 In 0.0[..{999}][..0.0]|$usn1[..'s_str'][..$#usn8]).`6esn`! Delete `4esn` =~12.0 =~{`3esn`},Filter(`8esn` In $12[{7}..0X0123456789ABCDEF] Where 123456789 Is Not Null Is Not Null) Starts With Filter(`` In {usn1} Ends With {`6esn`} Ends With 123456789 Where 9e1 =~999) Starts With Reduce(usn2=1.e1 =~`2esn`,@usn5 In Null =~12e12|Count(*)[..``][..#usn8]),[#usn7 In 0Xa[@usn5][{`7esn`}] Where $usn1 In 01234567 In .e1|{`5esn`}[$`8esn`..$`1esn`][0.12..0.12]] =~Extract(`2esn` In {999} Is Not Null Where $``['s_str'..][0x0..]|$usn1 In 0.12 In $``) =~Single(_usn3 In {@usn5}[..#usn7] Where {`4esn`}[..07][..$`6esn`]) Union With Distinct *,Case {`4esn`}[$123456789] When $999 Is Null Then 9e0 Starts With .e0 Starts With \"d_str\" Else {`7esn`}[9e1..][@usn6..] End[None(_usn4 In `2esn` Where {`8esn`}[0X7][$`3esn`])][count(Distinct $`5esn`[$#usn7..][0xabc..])] As `2esn`,12 Is Not Null Is Not Null As #usn8 Order By `2esn` Ends With $`4esn` Ends With {#usn7} Asc,Extract(usn1 In 12.e12 In {0} In 9e1 Where usn1 Contains $7 Contains $``|$`5esn`[..{`2esn`}][..{0}])[[#usn7 In 123.654 Starts With $`` Where {12} =~0.e0 =~{_usn3}]..{`3esn`:0e0 Contains 9e12,@usn6:`6esn`[{@usn5}..Count ( * )][{`6esn`}..{@usn6}]}][Case When 2.12 =~0x0 =~_usn4 Then .e1[@usn5]['s_str'] When $@usn5 In $usn2 In {1000} Then {0}[False..@usn5] Else {@usn6}[True..{_usn3}] End..`1esn`()] Ascending Remove [01 =~$`1esn`,1.e1[12e12..{`6esn`}],`8esn`].`1esn` Create `6esn`=Shortestpath(((:@usn5{#usn7:{``}[_usn4..$`1esn`],_usn4:$`6esn` Ends With {0} Ends With {`7esn`}})-[?:`8esn`|:_usn4{usn1:999[12.0..][#usn7..],@usn5:123.654[$`1esn`..Null][1000..{_usn3}]}]->(usn1 {`2esn`:0.0 Contains $_usn4 Contains {`2esn`},_usn4:0e0 Contains `3esn` Contains `7esn`}))),`4esn`=Allshortestpaths((((@usn6 {_usn3:{`8esn`}[0X7][$`3esn`],_usn4:$_usn4[9e0..]})-[`5esn`?:`2esn`{`2esn`:$7[$`3esn`]}]-({`6esn`:1000,#usn8:$`5esn`[$#usn7..][0xabc..]})-[?:`8esn`|:_usn4 *12..]->(@usn6 {`2esn`:.e1[0.12],`6esn`:0.0[..{999}][..0.0]}))))").
