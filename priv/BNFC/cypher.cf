-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Grammar rules.
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Cypher01.                                        Cypher ::= Statement     ;
Cypher02.                                        Cypher ::= Statement ";" ;

Statement01.                                     Statement ::= Query ;

Query01.                                         Query ::= RegularQuery   ;
Query02.                                         Query ::= StandaloneCall ;

RegularQuery01.                                  RegularQuery ::= SingleQuery           ;
RegularQuery02.                                  RegularQuery ::= SingleQuery UnionList ;

UnionList01.                                     UnionList ::= Union           ;
UnionList02.                                     UnionList ::= Union UnionList ;

SingleQuery01.                                   SingleQuery ::= ClauseList ;

ClauseList01.                                    ClauseList ::= Clause            ;
ClauseList02.                                    ClauseList ::= Clause ClauseList ;

Union01.                                         Union ::= "UNION"       SingleQuery ;
Union02.                                         Union ::= "UNION" "ALL" SingleQuery ;

Clause01.                                        Clause ::= Match       ;
Clause02.                                        Clause ::= Unwind      ;
Clause03.                                        Clause ::= Merge       ;
Clause04.                                        Clause ::= Create      ;
Clause05.                                        Clause ::= Set         ;
Clause06.                                        Clause ::= Delete      ;
Clause07.                                        Clause ::= Remove      ;
Clause08.                                        Clause ::= InQueryCall ;
Clause09.                                        Clause ::= With        ;
Clause10.                                        Clause ::= Return      ;

Match01.                                         Match ::=            "MATCH" Pattern       ;
Match02.                                         Match ::= "OPTIONAL" "MATCH" Pattern Where ;

Unwind01.                                        Unwind ::= "UNWIND" Expression "AS" Variable ;

Merge01.                                         Merge ::= "MERGE" PatternPart                 ;
Merge02.                                         Merge ::= "MERGE" PatternPart MergeActionList ;

MergeActionList01.                               MergeActionList ::= MergeAction                  ;
MergeActionList02.                               MergeActionList ::= MergeAction  MergeActionList ;

MergeAction01.                                   MergeAction ::= "ON" "MATCH"  Set ;
MergeAction02.                                   MergeAction ::= "ON" "CREATE" Set ;

Create01.                                        Create ::= "CREATE" Pattern ;

Set01.                                           Set ::= "SET" SetItemCommalist ;

SetItemCommalist01.                              SetItemCommalist ::= SetItem                      ;
SetItemCommalist02.                              SetItemCommalist ::= SetItem "," SetItemCommalist ;

SetItem01.                                       SetItem ::= PropertyExpression "="  Expression ;
SetItem02.                                       SetItem ::= Variable           "="  Expression ;
SetItem03.                                       SetItem ::= Variable           "+=" Expression ;
SetItem04.                                       SetItem ::= Variable                NodeLabels ;

Delete01.                                        Delete ::=          "DELETE" ExpressionCommalist ;
Delete02.                                        Delete ::= "DETACH" "DELETE" ExpressionCommalist ;

ExpressionCommalist01.                           ExpressionCommalist ::= Expression                         ;
ExpressionCommalist02.                           ExpressionCommalist ::= Expression "," ExpressionCommalist ;

Remove01.                                        Remove ::= "REMOVE" RemoveItemCommalist ;

RemoveItemCommalist01.                           RemoveItemCommalist ::= RemoveItem                         ;
RemoveItemCommalist02.                           RemoveItemCommalist ::= RemoveItem "," RemoveItemCommalist ;

RemoveItem01.                                    RemoveItem ::= Variable NodeLabels ;
RemoveItem02.                                    RemoveItem ::= PropertyExpression  ;

InQueryCall01.                                   InQueryCall ::= "CALL" ExplicitProcedureInvocation                    ;
InQueryCall02.                                   InQueryCall ::= "CALL" ExplicitProcedureInvocation "YIELD" YieldItems ;

-- wwe StandaloneCall01.                                StandaloneCall ::= "CALL" ExplicitProcedureInvocation                    ;
-- wwe StandaloneCall02.                                StandaloneCall ::= "CALL" ExplicitProcedureInvocation "YIELD" YieldItems ;
StandaloneCall01.                                StandaloneCall ::= InQueryCall                                           ;
StandaloneCall03.                                StandaloneCall ::= "CALL" ImplicitProcedureInvocation                    ;
StandaloneCall04.                                StandaloneCall ::= "CALL" ImplicitProcedureInvocation "YIELD" YieldItems ;

YieldItems01.                                    YieldItems ::= YieldItemCommalist ;
YieldItems02.                                    YieldItems ::= "-"                ;

YieldItemCommalist01.                            YieldItemCommalist ::= YieldItem                        ;
YieldItemCommalist02.                            YieldItemCommalist ::= YieldItem "," YieldItemCommalist ;

YieldItem01.                                     YieldItem ::=                           Variable ;
YieldItem02.                                     YieldItem ::= ProcedureResultField "AS" Variable ;

With01.                                          With ::= "WITH"            ReturnBody       ;
With02.                                          With ::= "WITH"            ReturnBody Where ;
With03.                                          With ::= "WITH" "DISTINCT" ReturnBody       ;
With04.                                          With ::= "WITH" "DISTINCT" ReturnBody Where ;

Return01.                                        Return ::= "RETURN"            ReturnBody ;
Return02.                                        Return ::= "RETURN" "DISTINCT" ReturnBody ;

ReturnBody01.                                    ReturnBody ::= ReturnItems                  ;
ReturnBody02.                                    ReturnBody ::= ReturnItems            Limit ;
ReturnBody03.                                    ReturnBody ::= ReturnItems       Skip       ;
ReturnBody04.                                    ReturnBody ::= ReturnItems       Skip Limit ;
ReturnBody05.                                    ReturnBody ::= ReturnItems Order            ;
ReturnBody06.                                    ReturnBody ::= ReturnItems Order      Limit ;
ReturnBody07.                                    ReturnBody ::= ReturnItems Order Skip       ;
ReturnBody08.                                    ReturnBody ::= ReturnItems Order Skip Limit ;

ReturnItems01.                                   ReturnItems ::= "*"                         ;
ReturnItems02.                                   ReturnItems ::= "*" "," ReturnItemCommalist ;
ReturnItems03.                                   ReturnItems ::=         ReturnItemCommalist ;

ReturnItemCommalist01.                           ReturnItemCommalist ::= ReturnItem                         ;
ReturnItemCommalist02.                           ReturnItemCommalist ::= ReturnItem "," ReturnItemCommalist ;

ReturnItem01.                                    ReturnItem ::= Expression               ;
ReturnItem02.                                    ReturnItem ::= Expression "AS" Variable ;

Order01.                                         Order ::= "ORDER" "BY" SortItemCommalist ;

SortItemCommalist01.                             SortItemCommalist ::= SortItem                       ;
SortItemCommalist02.                             SortItemCommalist ::= SortItem "," SortItemCommalist ;

Skip01.                                          Skip ::= "SKIP" Expression ;

Limit01.                                         Limit ::= "LIMIT" Expression ;

SortItem01.                                      SortItem ::= Expression              ;
SortItem02.                                      SortItem ::= Expression "ASCENDING"  ;
SortItem03.                                      SortItem ::= Expression "ASC"        ;
SortItem04.                                      SortItem ::= Expression "DESCENDING" ;
SortItem05.                                      SortItem ::= Expression "DESC"       ;

Where01.                                         Where ::= "WHERE" Expression ;

Pattern01.                                       Pattern ::= PatternPartCommalist ;

PatternPartCommalist01.                          PatternPartCommalist ::= PatternPart                          ;
PatternPartCommalist02.                          PatternPartCommalist ::= PatternPart "," PatternPartCommalist ;

PatternPart01.                                   PatternPart ::= Variable "=" AnonymousPatternPart ;
PatternPart02.                                   PatternPart ::=              AnonymousPatternPart ;

AnonymousPatternPart01.                          AnonymousPatternPart ::= PatternElement ;

-- wwe PatternElement01.                                PatternElement ::= NodePattern                         ;
-- wwe PatternElement01.                                PatternElement ::= NodePattern PatternElementChainList ;
PatternElement01.                                PatternElement ::= RelationshipsPattern                ;
PatternElement02.                                PatternElement ::= "(" PatternElement ")"              ;

PatternElementChainList01.                       PatternElementChainList ::= PatternElementChain                         ;
PatternElementChainList02.                       PatternElementChainList ::= PatternElementChain PatternElementChainList ;

NodePattern01.                                   NodePattern ::= "("                                ")" ;
NodePattern02.                                   NodePattern ::= "("                     Properties ")" ;
NodePattern03.                                   NodePattern ::= "("          NodeLabels            ")" ;
NodePattern04.                                   NodePattern ::= "("          NodeLabels Properties ")" ;
NodePattern05.                                   NodePattern ::= "(" Variable                       ")" ;
NodePattern06.                                   NodePattern ::= "(" Variable            Properties ")" ;
NodePattern07.                                   NodePattern ::= "(" Variable NodeLabels            ")" ;
NodePattern08.                                   NodePattern ::= "(" Variable NodeLabels Properties ")" ;

PatternElementChain01.                           PatternElementChain ::= RelationshipPattern NodePattern ;

RelationshipPattern01.                           RelationshipPattern ::= LeftArrowHead Dash                    Dash RightArrowHead ;
RelationshipPattern02.                           RelationshipPattern ::= LeftArrowHead Dash RelationshipDetail Dash RightArrowHead ;
RelationshipPattern03.                           RelationshipPattern ::= LeftArrowHead Dash                    Dash                ;
RelationshipPattern04.                           RelationshipPattern ::= LeftArrowHead Dash RelationshipDetail Dash                ;
RelationshipPattern05.                           RelationshipPattern ::=               Dash                    Dash RightArrowHead ;
RelationshipPattern06.                           RelationshipPattern ::=               Dash RelationshipDetail Dash RightArrowHead ;
RelationshipPattern07.                           RelationshipPattern ::=               Dash                    Dash                ;
RelationshipPattern08.                           RelationshipPattern ::=               Dash RelationshipDetail Dash                ;

RelationshipDetail01.                            RelationshipDetail ::= "["                                                    "]" ;
RelationshipDetail02.                            RelationshipDetail ::= "["                                         Properties "]" ;
RelationshipDetail03.                            RelationshipDetail ::= "["                            RangeLiteral            "]" ;
RelationshipDetail04.                            RelationshipDetail ::= "["                            RangeLiteral Properties "]" ;
RelationshipDetail05.                            RelationshipDetail ::= "["          RelationshipTypes                         "]" ;
RelationshipDetail06.                            RelationshipDetail ::= "["          RelationshipTypes              Properties "]" ;
RelationshipDetail07.                            RelationshipDetail ::= "["          RelationshipTypes RangeLiteral            "]" ;
RelationshipDetail08.                            RelationshipDetail ::= "["          RelationshipTypes RangeLiteral Properties "]" ;
RelationshipDetail09.                            RelationshipDetail ::= "[" Variable                                           "]" ;
RelationshipDetail10.                            RelationshipDetail ::= "[" Variable                                Properties "]" ;
RelationshipDetail11.                            RelationshipDetail ::= "[" Variable                   RangeLiteral            "]" ;
RelationshipDetail12.                            RelationshipDetail ::= "[" Variable                   RangeLiteral Properties "]" ;
RelationshipDetail13.                            RelationshipDetail ::= "[" Variable RelationshipTypes                         "]" ;
RelationshipDetail14.                            RelationshipDetail ::= "[" Variable RelationshipTypes              Properties "]" ;
RelationshipDetail15.                            RelationshipDetail ::= "[" Variable RelationshipTypes RangeLiteral            "]" ;
RelationshipDetail16.                            RelationshipDetail ::= "[" Variable RelationshipTypes RangeLiteral Properties "]" ;

Properties01.                                    Properties ::= MapLiteral ;
Properties02.                                    Properties ::= Parameter  ;

RelationshipTypes01.                             RelationshipTypes ::= ":" RelTypeNameVerticalbarlist ;

RelTypeNameVerticalbarlist01.                    RelTypeNameVerticalbarlist ::= RelTypeName                                    ;
RelTypeNameVerticalbarlist02.                    RelTypeNameVerticalbarlist ::= RelTypeName "|"     RelTypeNameVerticalbarlist ;
RelTypeNameVerticalbarlist03.                    RelTypeNameVerticalbarlist ::= RelTypeName "|" ":" RelTypeNameVerticalbarlist ;

NodeLabels01.                                    NodeLabels ::= NodeLabelList ;

NodeLabelList01.                                 NodeLabelList ::= NodeLabel            ;
NodeLabelList02.                                 NodeLabelList ::= NodeLabel NodeLabelList ;

NodeLabel01.                                     NodeLabel ::= ":" LabelName ;

RangeLiteral01.                                  RangeLiteral ::= "*"                                     ;
RangeLiteral02.                                  RangeLiteral ::= "*"                 ".." IntegerLiteral ;
RangeLiteral03.                                  RangeLiteral ::= "*"  IntegerLiteral                     ;
RangeLiteral04.                                  RangeLiteral ::= "*"  IntegerLiteral ".." IntegerLiteral ;

LabelName01.                                     LabelName ::= SchemaName ;

RelTypeName01.                                   RelTypeName ::= SchemaName ;

Expression01.                                    Expression ::= OrExpression ;

OrExpression01.                                  OrExpression ::= XorExpressionList ;

XorExpressionList01.                             XorExpressionList ::= XorExpression                        ;
XorExpressionList02.                             XorExpressionList ::= XorExpression "OR" XorExpressionList ;

XorExpression01.                                 XorExpression ::= AndExpressionList ;

AndExpressionList01.                             AndExpressionList ::= AndExpression                         ;
AndExpressionList02.                             AndExpressionList ::= AndExpression "XOR" AndExpressionList ;

AndExpression01.                                 AndExpression ::= NotExpressionList ;

NotExpressionList01.                             NotExpressionList ::= NotExpression                         ;
NotExpressionList02.                             NotExpressionList ::= NotExpression "AND" NotExpressionList ;

NotExpression01.                                 NotExpression ::=         ComparisonExpression ;
NotExpression02.                                 NotExpression ::= NotList ComparisonExpression ;

NotList02.                                       NotList ::= "NOT"         ;
NotList03.                                       NotList ::= "NOT" NotList ;

ComparisonExpression01.                          ComparisonExpression ::= AddOrSubtractExpression                                 ;
ComparisonExpression02.                          ComparisonExpression ::= AddOrSubtractExpression PartialComparisonExpressionList ;

PartialComparisonExpressionList02.               PartialComparisonExpressionList ::= PartialComparisonExpression                                 ;
PartialComparisonExpressionList03.               PartialComparisonExpressionList ::= PartialComparisonExpression PartialComparisonExpressionList ;

AddOrSubtractExpression01.                       AddOrSubtractExpression ::= MultiplyDivideModuloExpressionList ;

MultiplyDivideModuloExpressionList01.            MultiplyDivideModuloExpressionList ::= MultiplyDivideModuloExpression                                        ;
MultiplyDivideModuloExpressionList02.            MultiplyDivideModuloExpressionList ::= MultiplyDivideModuloExpression "+" MultiplyDivideModuloExpressionList ;
MultiplyDivideModuloExpressionList02.            MultiplyDivideModuloExpressionList ::= MultiplyDivideModuloExpression "-" MultiplyDivideModuloExpressionList ;

MultiplyDivideModuloExpression01.                MultiplyDivideModuloExpression ::= PowerOfExpressionList ;

PowerOfExpressionList01.                         PowerOfExpressionList ::= PowerOfExpression                           ;
PowerOfExpressionList02.                         PowerOfExpressionList ::= PowerOfExpression "*" PowerOfExpressionList ;
PowerOfExpressionList02.                         PowerOfExpressionList ::= PowerOfExpression "/" PowerOfExpressionList ;
PowerOfExpressionList02.                         PowerOfExpressionList ::= PowerOfExpression "%" PowerOfExpressionList ;

PowerOfExpression01.                             PowerOfExpression ::= UnaryAddOrSubtractExpressionList ;

UnaryAddOrSubtractExpressionList01.              UnaryAddOrSubtractExpressionList ::= UnaryAddOrSubtractExpression                                      ;
UnaryAddOrSubtractExpressionList02.              UnaryAddOrSubtractExpressionList ::= UnaryAddOrSubtractExpression "^" UnaryAddOrSubtractExpressionList ;

UnaryAddOrSubtractExpression01.                  UnaryAddOrSubtractExpression ::=                   StringListNullOperatorExpression ;
UnaryAddOrSubtractExpression02.                  UnaryAddOrSubtractExpression ::= UnaryOperatorList StringListNullOperatorExpression ;

UnaryOperatorList01.                             UnaryOperatorList ::= "+"                   ;
UnaryOperatorList02.                             UnaryOperatorList ::= "-"                   ;
UnaryOperatorList03.                             UnaryOperatorList ::= "+" UnaryOperatorList ;
UnaryOperatorList04.                             UnaryOperatorList ::= "-" UnaryOperatorList ;

StringListNullOperatorExpression01.              StringListNullOperatorExpression ::= PropertyOrLabelsExpression                            ;
StringListNullOperatorExpression02.              StringListNullOperatorExpression ::= PropertyOrLabelsExpression StringListNullOperatorList ;

StringListNullOperatorList01.                    StringListNullOperatorList ::= "[" Expression                 "]"                                      ;
StringListNullOperatorList02.                    StringListNullOperatorList ::= "["            ".."            "]"                                      ;
StringListNullOperatorList03.                    StringListNullOperatorList ::= "["            ".." Expression "]"                                      ;
StringListNullOperatorList04.                    StringListNullOperatorList ::= "[" Expression ".."            "]"                                      ;
StringListNullOperatorList05.                    StringListNullOperatorList ::= "[" Expression ".." Expression "]"                                      ;
StringListNullOperatorList06.                    StringListNullOperatorList ::= "=~"              PropertyOrLabelsExpression                            ;
StringListNullOperatorList07.                    StringListNullOperatorList ::= "IN"              PropertyOrLabelsExpression                            ;
StringListNullOperatorList08.                    StringListNullOperatorList ::= "STARTS" "WITH"   PropertyOrLabelsExpression                            ;
StringListNullOperatorList09.                    StringListNullOperatorList ::= "ENDS"   "WITH"   PropertyOrLabelsExpression                            ;
StringListNullOperatorList10.                    StringListNullOperatorList ::= "CONTAINS"        PropertyOrLabelsExpression                            ;
StringListNullOperatorList11.                    StringListNullOperatorList ::= "IS"       "NULL"                                                       ;
StringListNullOperatorList12.                    StringListNullOperatorList ::= "IS" "NOT" "NULL"                                                       ;
StringListNullOperatorList13.                    StringListNullOperatorList ::= "[" Expression                 "]"           StringListNullOperatorList ;
StringListNullOperatorList14.                    StringListNullOperatorList ::= "["            ".."            "]"           StringListNullOperatorList ;
StringListNullOperatorList15.                    StringListNullOperatorList ::= "["            ".." Expression "]"           StringListNullOperatorList ;
StringListNullOperatorList16.                    StringListNullOperatorList ::= "[" Expression ".."            "]"           StringListNullOperatorList ;
StringListNullOperatorList17.                    StringListNullOperatorList ::= "[" Expression ".." Expression "]"           StringListNullOperatorList ;
StringListNullOperatorList18.                    StringListNullOperatorList ::= "=~"              PropertyOrLabelsExpression StringListNullOperatorList ;
StringListNullOperatorList19.                    StringListNullOperatorList ::= "IN"              PropertyOrLabelsExpression StringListNullOperatorList ;
StringListNullOperatorList20.                    StringListNullOperatorList ::= "STARTS" "WITH"   PropertyOrLabelsExpression StringListNullOperatorList ;
StringListNullOperatorList21.                    StringListNullOperatorList ::= "ENDS"   "WITH"   PropertyOrLabelsExpression StringListNullOperatorList ;
StringListNullOperatorList22.                    StringListNullOperatorList ::= "CONTAINS"        PropertyOrLabelsExpression StringListNullOperatorList ;
StringListNullOperatorList23.                    StringListNullOperatorList ::= "IS"       "NULL"                            StringListNullOperatorList ;
StringListNullOperatorList24.                    StringListNullOperatorList ::= "IS" "NOT" "NULL"                            StringListNullOperatorList ;

PropertyOrLabelsExpression01.                    PropertyOrLabelsExpression ::= Atom                              ;
PropertyOrLabelsExpression02.                    PropertyOrLabelsExpression ::= Atom PropertyLookupNodeLabelsList ;

PropertyLookupNodeLabelsList01.                  PropertyLookupNodeLabelsList ::= PropertyLookup                              ;
PropertyLookupNodeLabelsList02.                  PropertyLookupNodeLabelsList ::= NodeLabels                                  ;
PropertyLookupNodeLabelsList03.                  PropertyLookupNodeLabelsList ::= PropertyLookup PropertyLookupNodeLabelsList ;
PropertyLookupNodeLabelsList04.                  PropertyLookupNodeLabelsList ::= NodeLabels     PropertyLookupNodeLabelsList ;

Atom01.                                          Atom ::= Literal                                           ;
Atom02.                                          Atom ::= Parameter                                         ;
Atom03.                                          Atom ::= CaseExpression                                    ;
Atom04.                                          Atom ::= "COUNT" "(" "*" ")"                               ;
Atom05.                                          Atom ::= ListComprehension                                 ;
Atom06.                                          Atom ::= PatternComprehension                              ;
Atom07.                                          Atom ::= "FILTER"  "(" FilterExpression                ")" ;
Atom08.                                          Atom ::= "EXTRACT" "(" FilterExpression                ")" ;
Atom09.                                          Atom ::= "EXTRACT" "(" FilterExpression "|" Expression ")" ;
Atom10.                                          Atom ::= "ALL"     "(" FilterExpression                ")" ;
Atom11.                                          Atom ::= "ANY"     "(" FilterExpression                ")" ;
Atom12.                                          Atom ::= "NONE"    "(" FilterExpression                ")" ;
Atom13.                                          Atom ::= "SINGLE"  "(" FilterExpression                ")" ;
Atom14.                                          Atom ::= RelationshipsPattern                              ;
Atom15.                                          Atom ::= ParenthesizedExpression                           ;
Atom16.                                          Atom ::= FunctionInvocation                                ;
Atom17.                                          Atom ::= Variable                                          ;

Literal01.                                       Literal ::= NumberLiteral    ;
Literal02.                                       Literal ::= "STRING_LITERAL" ;
Literal03.                                       Literal ::= BooleanLiteral   ;
Literal04.                                       Literal ::= "NULL"           ;
Literal05.                                       Literal ::= MapLiteral       ;
Literal06.                                       Literal ::= ListLiteral      ;

BooleanLiteral01.                                BooleanLiteral ::= "TRUE"  ;
BooleanLiteral02.                                BooleanLiteral ::= "FALSE" ;

ListLiteral01.                                   ListLiteral ::= "["                      "]" ;
ListLiteral02.                                   ListLiteral ::= "["  ExpressionCommalist "]" ;

PartialComparisonExpression01.                   PartialComparisonExpression ::= "="  AddOrSubtractExpression ;
PartialComparisonExpression02.                   PartialComparisonExpression ::= "<>" AddOrSubtractExpression ;
PartialComparisonExpression03.                   PartialComparisonExpression ::= "<"  AddOrSubtractExpression ;
PartialComparisonExpression04.                   PartialComparisonExpression ::= ">"  AddOrSubtractExpression ;
PartialComparisonExpression05.                   PartialComparisonExpression ::= "<=" AddOrSubtractExpression ;
PartialComparisonExpression06.                   PartialComparisonExpression ::= ">=" AddOrSubtractExpression ;

ParenthesizedExpression01.                       ParenthesizedExpression ::= "(" Expression ")" ;

RelationshipsPattern01.                          RelationshipsPattern ::= NodePattern                         ;
RelationshipsPattern02.                          RelationshipsPattern ::= NodePattern PatternElementChainList ;

FilterExpression01.                              FilterExpression ::= IdInColl       ;
FilterExpression02.                              FilterExpression ::= IdInColl Where ;

IdInColl01.                                      IdInColl ::= Variable "IN" Expression ;

FunctionInvocation01.                            FunctionInvocation ::= FunctionName "("                                ")" ;
FunctionInvocation02.                            FunctionInvocation ::= FunctionName "("            ExpressionCommalist ")" ;
FunctionInvocation03.                            FunctionInvocation ::= FunctionName "(" "DISTINCT"                     ")" ;
FunctionInvocation04.                            FunctionInvocation ::= FunctionName "(" "DISTINCT" ExpressionCommalist ")" ;

FunctionName01.                                  FunctionName ::= SymbolicName ;
FunctionName02.                                  FunctionName ::= "EXISTS"     ;

ExplicitProcedureInvocation01.                   ExplicitProcedureInvocation ::= ProcedureName "("                     ")" ;
ExplicitProcedureInvocation02.                   ExplicitProcedureInvocation ::= ProcedureName "(" ExpressionCommalist ")" ;

ImplicitProcedureInvocation01.                   ImplicitProcedureInvocation ::= ProcedureName ;

ProcedureResultField01.                          ProcedureResultField ::= SymbolicName ;

ProcedureName01.                                 ProcedureName ::= SymbolicName ;

ListComprehension01.                             ListComprehension ::= "[" FilterExpression                "]" ;
ListComprehension02.                             ListComprehension ::= "[" FilterExpression "|" Expression "]" ;

PatternComprehension01.                          PatternComprehension ::= "["              RelationshipsPattern                    "|" Expression "]" ;
PatternComprehension02.                          PatternComprehension ::= "[" Variable "=" RelationshipsPattern                    "|" Expression "]" ;
PatternComprehension03.                          PatternComprehension ::= "["              RelationshipsPattern "WHERE" Expression "|" Expression "]" ;
PatternComprehension04.                          PatternComprehension ::= "[" Variable "=" RelationshipsPattern "WHERE" Expression "|" Expression "]" ;

PropertyLookup01.                                PropertyLookup ::= "." PropertyKeyName ;

CaseExpression01.                                CaseExpression ::= "CASE"            CaseAlternativesList                   "END" ;
CaseExpression02.                                CaseExpression ::= "CASE"            CaseAlternativesList "ELSE" Expression "END" ;
CaseExpression03.                                CaseExpression ::= "CASE" Expression CaseAlternativesList                   "END" ;
CaseExpression04.                                CaseExpression ::= "CASE" Expression CaseAlternativesList "ELSE" Expression "END" ;

CaseAlternativesList01.                          CaseAlternativesList ::= CaseAlternatives                      ;
CaseAlternativesList02.                          CaseAlternativesList ::= CaseAlternatives CaseAlternativesList ;

CaseAlternatives01.                              CaseAlternatives ::= "WHEN" Expression "THEN" Expression ;

Variable01.                                      Variable ::= SymbolicName ;

NumberLiteral01.                                 NumberLiteral ::= "DOUBLE_LITERAL" ;
NumberLiteral02.                                 NumberLiteral ::= IntegerLiteral   ;

MapLiteral01.                                    MapLiteral ::= "{"                                    "}" ;
MapLiteral02.                                    MapLiteral ::= "{" PropertyKeyNameExpressionCommalist "}" ;

PropertyKeyNameExpressionCommalist01.            PropertyKeyNameExpressionCommalist ::= PropertyKeyName ":" Expression                                        ;
PropertyKeyNameExpressionCommalist02.            PropertyKeyNameExpressionCommalist ::= PropertyKeyName ":" Expression "," PropertyKeyNameExpressionCommalist ;

Parameter01.                                     Parameter ::= "$" SymbolicName   ;
Parameter02.                                     Parameter ::= "$" DecimalInteger ;

PropertyExpression01.                            PropertyExpression ::= Atom                    ;
PropertyExpression02.                            PropertyExpression ::= Atom PropertyLookupList ;

PropertyLookupList01.                            PropertyLookupList ::= PropertyLookup                    ;
PropertyLookupList02.                            PropertyLookupList ::= PropertyLookup PropertyLookupList ;

PropertyKeyName01.                               PropertyKeyName ::= SchemaName ;

IntegerLiteral01.                                IntegerLiteral ::= HexInteger     ;
IntegerLiteral02.                                IntegerLiteral ::= OctalInteger   ;
IntegerLiteral03.                                IntegerLiteral ::= DecimalInteger ;

HexInteger01.                                    HexInteger ::= "0x" HexDigitList ;

HexDigitList01.                                  HexDigitList ::= HexDigit              ;
HexDigitList02.                                  HexDigitList ::= HexDigit HexDigitList ;

DecimalInteger01.                                DecimalInteger ::= "0"                        ;
DecimalInteger02.                                DecimalInteger ::= "NON_ZERO_DIGIT"           ;
DecimalInteger03.                                DecimalInteger ::= "NON_ZERO_DIGIT" DigitList ;

DigitList01.                                     DigitList ::= Digit           ;
DigitList02.                                     DigitList ::= Digit DigitList ;

OctalInteger01.                                  OctalInteger ::= "0" OctDigitList ;

OctDigitList01.                                  OctDigitList ::= OctDigit              ;
OctDigitList02.                                  OctDigitList ::= OctDigit OctDigitList ;

HexDigit01.                                      HexDigit ::= Digit        ;
HexDigit02.                                      HexDigit ::= "HEX_LETTER" ;

Digit01.                                         Digit ::= "0"              ;
Digit02.                                         Digit ::= "NON_ZERO_DIGIT" ;

OctDigit01.                                      OctDigit ::= "0"                  ;
OctDigit02.                                      OctDigit ::= "NON_ZERO_OCT_DIGIT" ;

SchemaName01.                                    SchemaName ::= SymbolicName ;
SchemaName02.                                    SchemaName ::= ReservedWord ;

-- wwe ReservedWord01.                                  ReservedWord ::= "ALL"        ;
ReservedWord02.                                  ReservedWord ::= "ASC"        ;
ReservedWord03.                                  ReservedWord ::= "ASCENDING"  ;
ReservedWord04.                                  ReservedWord ::= "BY"         ;
ReservedWord05.                                  ReservedWord ::= "CREATE"     ;
ReservedWord06.                                  ReservedWord ::= "DELETE"     ;
ReservedWord07.                                  ReservedWord ::= "DESC"       ;
ReservedWord08.                                  ReservedWord ::= "DESCENDING" ;
ReservedWord09.                                  ReservedWord ::= "DETACH"     ;
ReservedWord10.                                  ReservedWord ::= "EXISTS"     ;
ReservedWord11.                                  ReservedWord ::= "LIMIT"      ;
ReservedWord12.                                  ReservedWord ::= "MATCH"      ;
ReservedWord13.                                  ReservedWord ::= "MERGE"      ;
ReservedWord14.                                  ReservedWord ::= "ON"         ;
ReservedWord15.                                  ReservedWord ::= "OPTIONAL"   ;
ReservedWord16.                                  ReservedWord ::= "ORDER"      ;
ReservedWord17.                                  ReservedWord ::= "REMOVE"     ;
ReservedWord18.                                  ReservedWord ::= "RETURN"     ;
ReservedWord19.                                  ReservedWord ::= "SET"        ;
ReservedWord20.                                  ReservedWord ::= "SKIP"       ;
ReservedWord21.                                  ReservedWord ::= "WHERE"      ;
ReservedWord22.                                  ReservedWord ::= "WITH"       ;
ReservedWord23.                                  ReservedWord ::= "UNION"      ;
ReservedWord24.                                  ReservedWord ::= "UNWIND"     ;
ReservedWord25.                                  ReservedWord ::= "AND"        ;
ReservedWord26.                                  ReservedWord ::= "AS"         ;
ReservedWord27.                                  ReservedWord ::= "CONTAINS"   ;
ReservedWord28.                                  ReservedWord ::= "DISTINCT"   ;
ReservedWord29.                                  ReservedWord ::= "ENDS"       ;
ReservedWord30.                                  ReservedWord ::= "IN"         ;
ReservedWord31.                                  ReservedWord ::= "IS"         ;
ReservedWord32.                                  ReservedWord ::= "NOT"        ;
ReservedWord33.                                  ReservedWord ::= "OR"         ;
ReservedWord34.                                  ReservedWord ::= "STARTS"     ;
ReservedWord35.                                  ReservedWord ::= "XOR"        ;
ReservedWord36.                                  ReservedWord ::= "FALSE"      ;
ReservedWord37.                                  ReservedWord ::= "TRUE"       ;
ReservedWord38.                                  ReservedWord ::= "NULL"       ;
ReservedWord39.                                  ReservedWord ::= "CONSTRAINT" ;
ReservedWord40.                                  ReservedWord ::= "DO"         ;
ReservedWord41.                                  ReservedWord ::= "FOR"        ;
ReservedWord42.                                  ReservedWord ::= "REQUIRE"    ;
ReservedWord43.                                  ReservedWord ::= "UNIQUE"     ;
ReservedWord44.                                  ReservedWord ::= "CASE"       ;
ReservedWord45.                                  ReservedWord ::= "WHEN"       ;
ReservedWord46.                                  ReservedWord ::= "THEN"       ;
ReservedWord47.                                  ReservedWord ::= "ELSE"       ;
ReservedWord48.                                  ReservedWord ::= "END"        ;

SymbolicName01.                                  SymbolicName ::= "UNESCAPED_SYMBOLIC_NAME" ;
SymbolicName02.                                  SymbolicName ::= "ESCAPED_SYMBOLIC_NAME"   ;
SymbolicName03.                                  SymbolicName ::= "HEX_LETTER"              ;
SymbolicName04.                                  SymbolicName ::= "COUNT"                   ;
SymbolicName05.                                  SymbolicName ::= "FILTER"                  ;
SymbolicName06.                                  SymbolicName ::= "EXTRACT"                 ;
SymbolicName07.                                  SymbolicName ::= "ANY"                     ;
SymbolicName08.                                  SymbolicName ::= "ALL"                     ;
SymbolicName09.                                  SymbolicName ::= "NONE"                    ;
SymbolicName10.                                  SymbolicName ::= "SINGLE"                  ;

LeftArrowHead01.                                 LeftArrowHead ::= "<" ;

RightArrowHead01.                                RightArrowHead ::= ">" ;

Dash01.                                          Dash ::= "-" ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- LBNF specifica
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

entrypoints Cypher ;
