%token ALL, AND, ANY, AS, ASC, ASCENDING, BY, CALL, CASE, CONSTRAINT, CONTAINS, COUNT, CREATE, DECIMAL_INTEGER, DELETE, DESC, DESCENDING, DETACH, DISTINCT, DO, ELSE, END, ENDS, ESCAPED_SYMBOLIC_NAME, EXISTS, EXPONENT_DECIMAL_REAL, EXTRACT, FALSE, FILTER, FOR, HEX_INTEGER, HEX_LETTER, IN, IS, LIMIT, MATCH, MERGE, NONE, NOT, NULL, OCTAL_INTEGER, ON, OPTIONAL, OR, ORDER, REGULAR_DECIMAL_REAL, REMOVE, REQUIRE, RETURN, SET, SINGLE, SKIP, STARTS, STRING_LITERAL, THEN, TRUE, UNESCAPED_SYMBOLIC_NAME, UNION, UNIQUE, UNWIND, WHEN, WHERE, WITH, XOR, YIELD ;

Cypher : Statement ( ';' )? ;

Statement : Query ;

Query : RegularQuery
      | StandaloneCall
      ;

RegularQuery : SingleQuery ( Union )* ;

SingleQuery : Clause ( Clause )* ;

Union : ( UNION ALL SingleQuery )
      | ( UNION SingleQuery )
      ;

Clause : Match
       | Unwind
       | Merge
       | Create
       | Set
       | Delete
       | Remove
       | InQueryCall
       | With
       | Return
       ;

Match : ( OPTIONAL )? MATCH Pattern (( )? Where )? ;

Unwind : UNWIND Expression AS Variable ;

Merge : MERGE PatternPart ( MergeAction )* ;

MergeAction : ( ON MATCH Set )
            | ( ON CREATE Set )
            ;

Create : CREATE Pattern ;

Set : SET SetItem ( ',' SetItem )* ;

SetItem : ( PropertyExpression '=' Expression )
        | ( Variable '=' Expression )
        | ( Variable '+' '=' Expression )
        | ( Variable NodeLabels )
        ;

Delete : ( DETACH )? DELETE Expression ( ',' Expression )* ;

Remove : REMOVE RemoveItem ( ',' RemoveItem )* ;

RemoveItem : ( Variable NodeLabels )
           | PropertyExpression
           ;

InQueryCall : CALL ExplicitProcedureInvocation ( YIELD YieldItems )? ;

StandaloneCall : CALL ( ExplicitProcedureInvocation | ImplicitProcedureInvocation ) ( YIELD YieldItems )? ;

YieldItems : ( YieldItem ( ',' YieldItem )* )
           | '-'
          ;

YieldItem : ( ProcedureResultField AS )? Variable ;

With : WITH ( DISTINCT )? ReturnBody ( Where )? ;

Return : RETURN ( DISTINCT )? ReturnBody ;

ReturnBody : ReturnItems ( Order )? ( Skip )? ( Limit )? ;

ReturnItems : ( '*' ( ',' ReturnItem )* )
            | ( ReturnItem ( ',' ReturnItem )* )
            ;

ReturnItem : ( Expression AS Variable )
           | Expression
           ;

Order : ORDER BY SortItem ( ',' SortItem )* ;

Skip : SKIP Expression ;

Limit : LIMIT Expression ;

SortItem : Expression ( ( ASCENDING | ASC | DESCENDING | DESC ) )? ;

Where : WHERE Expression ;

Pattern : PatternPart ( ',' PatternPart )* ;

PatternPart : ( Variable '=' AnonymousPatternPart )
            | AnonymousPatternPart
            ;

AnonymousPatternPart : PatternElement ;

PatternElement : (NodePattern ( PatternElementChain )* )
               | ( '(' PatternElement ')' )
               ;

NodePattern : '(' ( Variable )? ( NodeLabels )? ( Properties )? ')' ;

PatternElementChain : RelationshipPattern NodePattern ;

RelationshipPattern : ( LeftArrowHead Dash ( RelationshipDetail )? Dash RightArrowHead )
                    | ( LeftArrowHead Dash ( RelationshipDetail )? Dash )
                    | ( Dash ( RelationshipDetail )? Dash RightArrowHead )
                    | ( Dash ( RelationshipDetail )? Dash )
                    ;

RelationshipDetail : '[' ( Variable )? ( RelationshipTypes )? ( RangeLiteral )? ( Properties )? ']' ;

Properties : MapLiteral
           | Parameter
           ;

RelationshipTypes : ':' RelTypeName ( '|' ( ':' )? RelTypeName )* ;

NodeLabels : NodeLabel ( NodeLabel )* ;

NodeLabel : ':' LabelName ;

RangeLiteral : '*' ( IntegerLiteral )? ('.' '.' ( IntegerLiteral )? )? ;

LabelName : SchemaName ;

RelTypeName : SchemaName ;

Expression : OrExpression ;

OrExpression : XorExpression ( OR XorExpression )* ;

XorExpression : AndExpression ( XOR AndExpression )* ;

AndExpression : NotExpression ( AND NotExpression )* ;

NotExpression : ( NOT )* ComparisonExpression ;

ComparisonExpression : AddOrSubtractExpression ( PartialComparisonExpression )* ;

AddOrSubtractExpression : MultiplyDivideModuloExpression ( ( '+' MultiplyDivideModuloExpression ) | ( '-' MultiplyDivideModuloExpression ) )* ;

MultiplyDivideModuloExpression : PowerOfExpression ( ( '*' PowerOfExpression ) | ( '/' PowerOfExpression  ) | (( )? '%' PowerOfExpression ) )* ;

PowerOfExpression : UnaryAddOrSubtractExpression ( '^' UnaryAddOrSubtractExpression )* ;

UnaryAddOrSubtractExpression : ( ('+' | '-') )* StringListNullOperatorExpression ;

StringListNullOperatorExpression : PropertyOrLabelsExpression ( ( '[' Expression ']' ) | ( '[' ( Expression )? '.' '.' ( Expression )? ']') | ( ( ( '=' '~') | ( IN ) | ( STARTS WITH ) | ( ENDS WITH ) | ( CONTAINS ) ) PropertyOrLabelsExpression ) | ( IS NULL ) |  ( IS NOT NULL ) )* ;

PropertyOrLabelsExpression : Atom ( ( PropertyLookup | NodeLabels ) )* ;

Atom : Literal
     | Parameter
     | CaseExpression
     | ( COUNT '(' '*' ')' )
     | ListComprehension
     | PatternComprehension
     | ( FILTER '(' FilterExpression ')')
     | ( EXTRACT '(' FilterExpression ( '|' Expression )? ')' )
     | ( ALL '(' FilterExpression ')' )
     | ( ANY '(' FilterExpression ')' )
     | ( NONE '(' FilterExpression ')' )
     | ( SINGLE '(' FilterExpression ')' )
     | RelationshipsPattern
     | ParenthesizedExpression
     | FunctionInvocation
     | Variable
     ;

Literal : NumberLiteral
        | STRING_LITERAL
        | BooleanLiteral
        | NULL
        | MapLiteral
        | ListLiteral
        ;

BooleanLiteral : TRUE
               | FALSE
               ;

ListLiteral : '[' ( Expression ( ',' Expression  )* )? ']' ;

PartialComparisonExpression : ('=' AddOrSubtractExpression)
                            | ('<' '>' AddOrSubtractExpression)
                            | ('<' AddOrSubtractExpression)
                            | ('>' AddOrSubtractExpression)
                            | ('<' '=' AddOrSubtractExpression)
                            | ('>' '=' AddOrSubtractExpression)
                            ;

ParenthesizedExpression : '(' Expression ')' ;

RelationshipsPattern : NodePattern PatternElementChain ( PatternElementChain )* ;

FilterExpression : IdInColl ( Where )? ;

IdInColl : Variable IN Expression ;

FunctionInvocation : FunctionName '(' ( DISTINCT )? ( Expression ( ',' Expression )* )? ')' ;

FunctionName : SymbolicName
             | EXISTS
             ;

ExplicitProcedureInvocation : ProcedureName '(' ( Expression ( ',' Expression  )* )? ')' ;

ImplicitProcedureInvocation : ProcedureName ;

ProcedureResultField : SymbolicName ;

ProcedureName : SymbolicName ;

ListComprehension : '[' FilterExpression ( '|' Expression )? ']' ;

PatternComprehension : '[' ( Variable '=' )? RelationshipsPattern ( WHERE Expression )? '|' Expression ']' ;

PropertyLookup : '.' (PropertyKeyName) ;

CaseExpression : ( ( CASE CaseAlternatives ( CaseAlternatives )* ) | ( CASE Expression CaseAlternatives ) ( CaseAlternatives )* ) ( ELSE Expression )? END ;

CaseAlternatives : WHEN Expression THEN Expression ;

Variable : SymbolicName ;

NumberLiteral : DoubleLiteral
              | IntegerLiteral
              ;

MapLiteral : '{' ( PropertyKeyName ':' Expression ( ',' PropertyKeyName ':' Expression  )* )? '}' ;

Parameter : '$' (SymbolicName | DECIMAL_INTEGER) ;

PropertyExpression : Atom PropertyLookup ( PropertyLookup )* ;

PropertyKeyName : SchemaName ;

IntegerLiteral : HEX_INTEGER
               | OCTAL_INTEGER
               | DECIMAL_INTEGER
               ;

DoubleLiteral : EXPONENT_DECIMAL_REAL
              | REGULAR_DECIMAL_REAL
              ;

SchemaName : SymbolicName
           | ReservedWord
           ;

ReservedWord : ALL
             | ASC
             | ASCENDING
             | BY
             | CREATE
             | DELETE
             | DESC
             | DESCENDING
             | DETACH
             | EXISTS
             | LIMIT
             | MATCH
             | MERGE
             | ON
             | OPTIONAL
             | ORDER
             | REMOVE
             | RETURN
             | SET
             | SKIP
             | WHERE
             | WITH
             | UNION
             | UNWIND
             | AND
             | AS
             | CONTAINS
             | DISTINCT
             | ENDS
             | IN
             | IS
             | NOT
             | OR
             | STARTS
             | XOR
             | FALSE
             | TRUE
             | NULL
             | CONSTRAINT
             | DO
             | FOR
             | REQUIRE
             | UNIQUE
             | CASE
             | WHEN
             | THEN
             | ELSE
             | END
             ;

SymbolicName : UNESCAPED_SYMBOLIC_NAME
             | ESCAPED_SYMBOLIC_NAME
             | HEX_LETTER
             | COUNT
             | FILTER
             | EXTRACT
             | ANY
             | ALL
             | NONE
             | SINGLE
             ;

LeftArrowHead : '<'
              ;

RightArrowHead : '>'
               ;

Dash : '-'
     ;

