%%%-------------------------------------------------------------------
%%% File        : performance_query_legacy_SUITE.erl
%%% Description : Test Suite for rule: query.
%%%
%%% Created     : 26.08.2016
%%%-------------------------------------------------------------------
-module(performance_query_legacy_SUITE).

-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - SUITE
%%--------------------------------------------------------------------

suite() ->
    [
        {timetrap, {minutes, 10}}
    ].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - ALL
%%--------------------------------------------------------------------

all() ->
    [test_query].

%%--------------------------------------------------------------------
%% TEST CASES
%%--------------------------------------------------------------------

test_query(_Config) ->
    octest_legacy:ct_string("Match Shortestpath((#usn7 :``)) Using Index ``:`1esn`(_usn4) Using Join On `6esn`,`6esn` Union Create Unique Allshortestpaths(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))) Union All Unwind 07[..0Xa] As `3esn` Create Unique (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}}))"),
    octest_legacy:ct_string("Return Distinct $7 In `2esn` As `4esn`,{@usn6} Ends With `5esn` Ends With 00,0X7 =~$`7esn` =~$_usn3 Order By $usn2[{_usn3}..] Ascending,{_usn4} Ends With {`3esn`} Ends With 07 Descending Skip 2.12 =~{`4esn`} =~01234567 With  $`8esn`[{usn1}..] Skip Extract(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}|{#usn8}[$`6esn`..12e12])[`1esn`(Distinct {``}[$@usn5])..Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*))] Where `4esn`[\"d_str\"..][123.654..]"),
    octest_legacy:ct_string("Foreach(_usn4 In {@usn5}[9e1..][1e1..]| Load Csv With Headers From 2.12 Ends With {@usn5} Ends With `2esn` As usn2 Fieldterminator \"d_str\") Detach Delete $`3esn` Ends With {_usn3} Ends With 9e1 Match (#usn7 :``),(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}) Using Index `5esn`:`7esn`(@usn6) Using Join On usn1 Where {@usn5} In `6esn` In .e0 Union Match _usn4=Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),Shortestpath(((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[:_usn3|:@usn5 *999]-(_usn4 :`8esn`{`8esn`:`1esn` Is Null,#usn7:07[$_usn3..][$``..]}))) Using Scan usn1:#usn7 Where $`7esn` Ends With @usn5 Ends With .e1"),
    octest_legacy:ct_string("Delete Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})]"),
    octest_legacy:ct_string("Merge _usn4=(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[`6esn`?:`5esn` *01]->(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]}) On Create Set @usn6+=07 In `2esn` In {`3esn`},Any(`` In 9e0 Is Not Null Where Null =~$`8esn` =~{`4esn`}).usn2 =010[``..123456789][@usn6..{12}],@usn6+=usn1 Starts With _usn4 Starts With `` Union All Unwind `4esn`[\"d_str\"..][123.654..] As @usn6"),
    octest_legacy:ct_string("With  $`5esn`[$#usn7],01234567[..0X7][..0X7] As @usn6,$`8esn`[{``}..] As `4esn` Order By {1000}[$_usn3...e1] Asc,$`4esn` In $@usn5 Desc,$`4esn`[$999..][{`3esn`}..] Descending Skip $@usn5[0.12..] Limit Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where `4esn`[$`4esn`]) =~Case 12[1e1] When 07 Starts With 123.654 Starts With 1.0 Then {usn2} Ends With _usn3 When `` Ends With $usn1 Ends With $`2esn` Then 9e12 Is Null Is Null End =~(`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]-(`2esn` :`5esn`{``:`1esn`[``..$``]})<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789}) Where 0.0 Ends With {_usn4} Ends With $1000 Unwind {`2esn`} =~{@usn6} As `1esn` Union All Return (:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]}) As `1esn`,$@usn5[$`6esn`] As usn1 Order By usn2[9e12..$`3esn`] Desc Skip Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} Union All Create Allshortestpaths((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})),usn2=Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Foreach(_usn4 In Reduce(`7esn`='s_str' Contains {_usn4},`1esn` In $`7esn` Contains `1esn` Contains {usn1}|$@usn5[0.12..])[[$1000[$`7esn`..1e1],False Starts With #usn7 Starts With 12e12,12e12[@usn5..][01..]]][Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)]| Start _usn4=Rel:`3esn`(`1esn`={@usn5}) ,`6esn`=Rel:@usn6(`5esn`={1000}) Remove [`` In `1esn` In `2esn` In $@usn6].#usn8,usn2(0.12[..$`4esn`][..$`7esn`]).#usn8?) Start usn1=Relationship( {1000}) "),
    octest_legacy:ct_string("Detach Delete Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}],{usn1} Contains $`` Contains {`8esn`},{@usn6}[{`2esn`}][Count(*)] Match #usn8=((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})),_usn3=Shortestpath(({`8esn`:$@usn5[0.12..]})) Using Join On #usn7 Create (((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Union Merge `4esn`=(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *0X0123456789ABCDEF..]->(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`2esn`:@usn5{usn1:1e1[..1e1]}) On Create Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Merge `2esn`=Allshortestpaths(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) On Create Set _usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],`3esn`+=False Starts With #usn7 Starts With 12e12 Foreach(usn1 In {`5esn`} In @usn6 In 2.12| Unwind 999[0.0..][$_usn4..] As #usn8)"),
    octest_legacy:ct_string("Load Csv With Headers From 0[9e0][1.0] As `1esn`  Union All Unwind All(_usn3 In 010 Contains $`2esn` Contains 01 Where #usn7 Is Null) Is Not Null As #usn7 Load Csv With Headers From True[..{_usn4}][..0.0] As `4esn`  Foreach(@usn5 In {0} Starts With {usn1}| Unwind @usn5 Is Null As #usn8) Union All Merge Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) On Match Set `5esn` =9e0[.e12..][$`3esn`..],`8esn`+={1000}[`1esn`][$`6esn`]"),
    octest_legacy:ct_string("Return {usn1} Contains 0xabc Optional Match usn1=Shortestpath((`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),(:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)"),
    octest_legacy:ct_string("Match ((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})) Where \"d_str\" Contains `6esn` Contains $12"),
    octest_legacy:ct_string("Create @usn6=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]-({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}}))),`7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}))) Load Csv With Headers From 0x0 Is Null Is Null As `8esn` Fieldterminator \"d_str\" Create @usn6=Shortestpath((:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)) Union All Create Unique @usn6=({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}) Match @usn6=((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]->(:`5esn`{``:$`6esn` Is Not Null})-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`})),Allshortestpaths((({`2esn`:9e1[{`5esn`}]}))) Using Scan ``:@usn5 Foreach(@usn5 In $usn2[12e12..]| Match `2esn`=(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2),`5esn`=Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan #usn7:`` Where {1000}[..$`3esn`][..2.12]) Union Return Distinct *,123456789 In usn2 As `2esn`"),
    octest_legacy:ct_string("Remove count(Distinct).`8esn`,usn2($12[..$`6esn`][..$`1esn`],{`8esn`} =~usn1 =~12.e12).`4esn` Unwind 12e12 Starts With 00 Starts With {0} As usn2 Return *,$#usn8[{7}..{`6esn`}],(:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5) Starts With [`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Order By @usn5[Count(*)][07] Desc,{123456789}[01234567..Null] Desc,Extract(`5esn` In 9e1 In 0.0 In {999}|0e0[..$`2esn`][..Count(*)]) Contains #usn8(Distinct $1000 Contains $12) Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}|$`2esn`[..$#usn8]) Asc Limit [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Union All Remove `5esn`(Distinct {`1esn`} Starts With 9e12 Starts With $`2esn`).usn2?,None(#usn7 In 0e0 Is Not Null Is Not Null Where $`3esn` In $#usn8 In {_usn3}).@usn5?,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null).usn1 Create Unique `5esn`=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[``?:usn2 *..1000{usn1:{usn1} Is Null}]-(:`2esn`:@usn5{@usn6:12 =~0xabc,#usn7:{`7esn`} Starts With {0} Starts With {1000}})<-[?:`2esn`|_usn3]-())),(:`1esn`{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null}) Remove Reduce(`2esn`=1.e1 Is Null Is Null,`` In {`7esn`} Starts With {0} Starts With {1000}|`8esn`[`1esn`..{7}][{_usn4}..$_usn4]).`7esn`?,[#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]|_usn3 Starts With 0X7].#usn7 Union All Return {#usn8} In {#usn8} Return Distinct {@usn5} Contains {_usn4},@usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])] As #usn7,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Starts With @usn6({`4esn`}[$`8esn`..'s_str']) Order By `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Descending,12.e12[2.12..] Descending,{`1esn`} In `` In {12} Desc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)] As @usn5  Create Unique ((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})),Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))) Create Unique `5esn`=(((`3esn` :`7esn`:#usn8{#usn7:$7 Is Not Null Is Not Null,usn2:{``} Starts With 12.e12 Starts With .e12})<-[:`8esn`|:#usn8 *0]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[`` *..123456789$#usn8]-(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {``}[...e1] As `4esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From usn2 Ends With 0.e0 As _usn4 Fieldterminator \"d_str\" Create Unique (`7esn` :@usn5:`7esn`{usn1:0.12 Ends With #usn8 Ends With $1000,`4esn`:{`8esn`} In {`6esn`} In .e12})<-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]->(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}),Shortestpath((usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[#usn7{``:9e1[..`4esn`]}]-(usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]})) Merge @usn5=Allshortestpaths((`7esn` :`6esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[usn2:@usn6]->(:`4esn`{`3esn`:True[$7..]}))"),
    octest_legacy:ct_string("With  $0 Starts With $1000 Starts With False,All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)],``[{123456789}..True] Limit Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)[Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]|0.12 In 123456789]][`7esn`..Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1)] Union All Load Csv From {@usn6} In $`5esn` In {7} As usn2  Merge Shortestpath((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})) Union Remove All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2]).``!,@usn6(0e0[..$`2esn`][..Count(*)]).@usn5 Merge Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) On Match Set `5esn` =9e0[.e12..][$`3esn`..],`8esn`+={1000}[`1esn`][$`6esn`] Delete 0xabc Is Not Null"),
    octest_legacy:ct_string("Return Distinct *,{usn1}[0..{@usn6}][True..usn2] Limit Reduce(`3esn`=$@usn6[{`8esn`}..9e0][0..$`4esn`],@usn5 In {#usn8} Contains 7|{usn1} Contains 0xabc) Ends With Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]) Ends With Case $`6esn` =~$_usn3 =~.e1 When {12} Ends With $`6esn` Ends With {#usn7} Then {`6esn`} Is Null When 9e1[$@usn5..] Then 0[9e1..][0x0..] End With Distinct {`6esn`} Contains {`1esn`} Contains Null,$#usn7[1.0..01][0x0..123.654] Order By 1.e1 Is Not Null Asc,{`5esn`}[{_usn3}..][.e0..] Desc Skip 2.12 In $123456789 In 00 Limit {1000}[{@usn5}..][1.e1..]"),
    octest_legacy:ct_string("Merge Shortestpath((`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[@usn5?:usn2 *..1000{`2esn`:9e1[{`5esn`}]}]-(:`5esn`{`5esn`:7 In {7}})-[@usn6?:`2esn`|_usn3 *0x0{`2esn`:0.12 Ends With #usn8 Ends With $1000}]-(:`5esn`{``:$`6esn` Is Not Null})) On Create Set _usn3 ={#usn7} In {`6esn`},`3esn`:@usn5:`7esn` On Create Set _usn3 =None(#usn7 In `7esn` In $`1esn` In $999 Where 0X0123456789ABCDEF[{`5esn`}..])[{``:`8esn` Contains 123.654 Contains {`7esn`},#usn8:{7}[..123456789][..$#usn8]}..Reduce(usn2=Count(*)[.e12..],#usn8 In $`8esn`[{``}..]|{0} Is Not Null Is Not Null)],[`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]|{@usn5}[`4esn`][12.0]].@usn5 =[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,None(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}).`4esn` =$#usn7 In `4esn` In 1.0 Create #usn7=Allshortestpaths(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))),Shortestpath((($#usn8))) Unwind {#usn8:0Xa Contains 0X7 Contains {``}} Starts With `1esn`() Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) As _usn3"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Load Csv With Headers From `4esn`(Distinct {`1esn`} Starts With usn2) Is Not Null Is Not Null As usn1  Union Merge _usn4=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) On Create Set Case $@usn5 Ends With 00 Ends With 12.e12 When 0.12 In 123456789 Then True[$7..] When $123456789 Is Null Is Null Then $999 Contains 0e0 End.`2esn` =({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],`3esn`+=010 Is Not Null Is Not Null On Match Set (`7esn` :``{@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`` :#usn8:_usn3{#usn8:True[{1000}][1000],`6esn`:$`7esn` Is Null Is Null})<-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]}).@usn5? =0X0123456789ABCDEF,`2esn` =#usn7[`4esn`..$`8esn`],`1esn`+=0xabc =~@usn6 =~{`2esn`}"),
    octest_legacy:ct_string("Start `6esn`=Node:_usn3('s_str') ,`4esn`=Relationship:_usn3({7})Where True Ends With {`7esn`} Ends With @usn5 With Distinct $`4esn`[00..$`8esn`][Null..$@usn5] Skip {usn2}[{999}..][0Xa..] Limit 's_str' Contains 0xabc Where {0} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Match @usn5=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Using Index `5esn`:`7esn`(@usn6) Using Join On `4esn`,`1esn` Where 00 Return Distinct *,1000 Starts With {@usn5} Starts With 123.654 Skip @usn6[2.12..][`5esn`..] Limit {999}[$7..]"),
    octest_legacy:ct_string("Unwind `1esn` Is Not Null As `2esn` Create _usn4=Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]}))))"),
    octest_legacy:ct_string("Load Csv From False In 0.0 In 0X7 As usn1 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $@usn5 Starts With usn2 Starts With $`6esn` As usn1  Return Distinct *,12.e12 In {@usn6},\"d_str\"[..$usn1][..$`5esn`] Limit Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} With  $`` Ends With usn1 As `3esn`,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)],Null Ends With {`5esn`} As `4esn` Order By Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]] Asc,1.0 Is Not Null Is Not Null Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`}) Where 07[{12}..]"),
    octest_legacy:ct_string("Return Distinct {@usn5} Contains {_usn4},@usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])] As #usn7,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Starts With @usn6({`4esn`}[$`8esn`..'s_str']) Order By `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Descending,12.e12[2.12..] Descending,{`1esn`} In `` In {12} Desc Union Foreach(#usn7 In 9e12 =~01 =~$_usn3| Start usn2=Rel:`5esn`({`7esn`}) Where 2.12 =~1.0 =~{`4esn`}) Union All Remove Reduce(@usn6=$`4esn` Starts With #usn8 Starts With 2.12,_usn4 In $`` =~$1000 =~7|$_usn3 Is Not Null).`7esn`?,{usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}.@usn5?"),
    octest_legacy:ct_string("With  0x0 Contains 0x0 Contains {`1esn`} Order By 1e1 In #usn8 Ascending,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] Asc Limit (:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) With  *,(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]})[[#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null]..] As `8esn` Order By {0} Ends With $@usn5 Ends With 010 Asc,$12 In $`3esn` In 07 Asc Skip Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7}) Starts With [{1000} In $`2esn` In $_usn3] Limit 0X7 In 0xabc Where Count(*) Starts With $7 Return *,{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5}[usn2(Distinct 1.e1[$_usn4..999])..[`5esn` In 9e1 In 0.0 In {999}|#usn8[_usn4]]][[1e1 In False,_usn3[..1000]]..Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)] Order By {`2esn`}[`3esn`][{#usn7}] Asc,Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Ends With [#usn7 In 0e0 Is Not Null Is Not Null Where {`3esn`}[{`8esn`}..$7][0e0..0x0]] Ends With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1) Desc Skip None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {7}[{#usn7}..{`5esn`}][123.654..{@usn6}]) =~{`3esn`:$`8esn`[...e1]} =~{``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]}"),
    octest_legacy:ct_string("Detach Delete False Ends With 0.e0 Start usn1=Node:``(#usn8={`8esn`}) ,`5esn`=Node:`7esn`(`3esn`=\"d_str\") Unwind $0[{#usn8}][\"d_str\"] As usn2"),
    octest_legacy:ct_string("Merge ``=((:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})<-[`4esn`? *07..07{_usn4:$`4esn` Contains {7} Contains 999}]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})) On Create Set `6esn`+=7 In {7},`2esn` ={999} Is Null Is Null,`8esn` =$usn1[{``}..usn2][`3esn`..$1000] On Create Set [`` In {`7esn`} Starts With {0} Starts With {1000}|$`5esn` Contains 123456789 Contains $`1esn`].`8esn` ={`1esn`}[$`4esn`..@usn5][\"d_str\"..{123456789}],None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}).`1esn`? ='s_str'[`4esn`..] Start `3esn`=Node:@usn6(``=\"d_str\") ,`6esn`=Rel:`2esn`(\"d_str\")Where 1000 Starts With $123456789 Union Unwind Reduce(``=$`7esn` Contains `1esn` Contains {usn1},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|0[9e12..{usn1}]) =~[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12] =~[`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]] As `5esn` With Distinct *,2.12[True],{`8esn`:0X7 Ends With {@usn5} Ends With {_usn3},`6esn`:1000[..$12][..$usn2]} Ends With Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Ends With Extract(@usn5 In {#usn8} Contains 7 Where @usn5 Is Null Is Null) As `4esn` Order By Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc Detach Delete Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null,_usn3 Starts With 0X7 Union All Load Csv From {#usn7} Contains {`8esn`} Contains usn2 As `` Fieldterminator \"d_str\" With  $`` Ends With usn1 As `3esn`,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)],Null Ends With {`5esn`} As `4esn` Order By Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]] Asc,1.0 Is Not Null Is Not Null Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`}) Where False Starts With 's_str' Starts With $`6esn`"),
    octest_legacy:ct_string("Start @usn6=Relationship:`1esn`(@usn5='s_str')  Delete Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]],$999 Starts With {@usn6},`1esn`[True..1000][`4esn`..{`3esn`}] With Distinct *,$``[0e0][{`6esn`}] As `8esn`,Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]) As `4esn` Skip _usn4 Starts With $`3esn` Starts With {#usn8} Limit {#usn7}[$`5esn`..][{usn1}..] Where $`` =~_usn4 =~_usn4 Union Detach Delete Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)],$`4esn` Contains {7} Contains 999 Merge `1esn`=(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) On Match Set `2esn` ={`1esn`} Starts With usn2,`8esn` =Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]).`6esn`! ={``}[...e1] Union Load Csv With Headers From $#usn8 Ends With #usn8 Ends With 12 As _usn3 Fieldterminator \"d_str\" Start @usn6=Relationship:usn2({`5esn`}) ,`2esn`=Node:`6esn`(`7esn`={12})"),
    octest_legacy:ct_string("Return {123456789} Contains `7esn` Contains 010,$`5esn`[{usn2}..][Null..],Reduce(_usn4='s_str' Contains 01 Contains $``,`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn5[Count(*)][07]) Contains Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Contains Filter(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null) As usn2 Order By Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)] Desc,12e12[1000..] Descending,(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Starts With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|{@usn6}[..1000]) Starts With Reduce(#usn8={@usn5}[$usn2..],`` In {0} Is Not Null Is Not Null|$12[..$`6esn`][..$`1esn`]) Desc Skip (:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)[..Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)][..{`1esn`:{_usn4}[$#usn7..],`2esn`:1.e1 Ends With {`8esn`} Ends With 00}] Load Csv From $@usn6[{`8esn`}..9e0][0..$`4esn`] As @usn6 Fieldterminator 's_str' Union Return Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] Asc,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Desc Skip 12.0[{999}..$`5esn`][0xabc..$_usn3] With Distinct *,$@usn5 Starts With usn2 Starts With $`6esn` As @usn5,0.e0 Is Not Null Is Not Null Order By [07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Desc,0.e0[False] Descending Where {1000} Is Null Is Null"),
    octest_legacy:ct_string("Foreach(#usn8 In @usn6[..0X0123456789ABCDEF][..{`6esn`}]| Optional Match (_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`8esn` *010..]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Where `5esn` Is Null Is Null Detach Delete False[{`5esn`}..{`8esn`}],Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`)))) Union Unwind 7[0e0..][$`1esn`..] As @usn6 Union Start _usn4=Node:`6esn`(`6esn`='s_str') Where {``} =~.e12 =~{0}"),
    octest_legacy:ct_string("With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Order By [{@usn6}[#usn8..][999..],010 Ends With {999},{`8esn`}[`3esn`..999]] Is Not Null Is Not Null Descending,$@usn5 Ascending Skip 0.0[$`6esn`..][{999}..] Load Csv With Headers From 's_str' =~\"d_str\" As `5esn` Fieldterminator \"d_str\" With Distinct *,{_usn4}[$`3esn`][$`3esn`] Order By _usn4 Starts With $`3esn` Starts With {#usn8} Descending,Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End Starts With [`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]] Starts With Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``}) Ascending Union All Load Csv With Headers From {@usn5}[..$12] As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(@usn6 In $@usn6[`4esn`..][0X7..]| Create Unique `8esn`=Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))) With Distinct Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) Order By True Contains {12} Contains 0Xa Ascending Skip `7esn`[1.e1..#usn8] Limit $12) Union All Foreach(`1esn` In #usn7 Ends With $@usn5 Ends With usn1| Load Csv With Headers From 0X7 As `7esn`  Create `1esn`=({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}),@usn6=(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})) Unwind {`5esn`} In {#usn7} In $7 As _usn4 Union All Remove All(`5esn` In usn2 Ends With 0.e0 Where $12 Starts With {#usn8} Starts With {999}).``,{_usn3:{#usn7}[..12e12][..{1000}],usn2:Count(*) In ``}.#usn7?"),
    octest_legacy:ct_string("Remove Reduce(`2esn`=1.e1 Is Null Is Null,`` In {`7esn`} Starts With {0} Starts With {1000}|`8esn`[`1esn`..{7}][{_usn4}..$_usn4]).`7esn`?,[#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]|_usn3 Starts With 0X7].#usn7 Union Start @usn5=Relationship:#usn8({12}) Where {0}[1.e1] Remove None(#usn8 In $`8esn`[{``}..] Where 0Xa[..07][..`2esn`]).usn1! Union All Remove [`5esn` In usn2 Ends With 0.e0 Where 9e1[{usn2}..$1000]].`1esn`? With Distinct *,{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] As _usn4 Where {999}[{`1esn`}..``][{12}..$123456789]"),
    octest_legacy:ct_string("Unwind 07[$_usn3..][$``..] As `2esn` Match Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),(((:`5esn`{`5esn`:7 In {7}})-[?:`5esn` *..7]->(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[:`4esn` *0{@usn5:{@usn6} Ends With `5esn` Ends With 00}]-(_usn3 :`1esn`))) Where $#usn8 Ends With #usn8 Ends With 12 Delete {1000} In $`2esn` In $_usn3,$#usn7 =~$`1esn`"),
    octest_legacy:ct_string("Remove (:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}).`6esn`!,None(#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`)._usn3! Remove All(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]).`4esn`,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..]].`8esn`?,Extract(usn2 In 1000 Starts With $123456789 Where usn1[12e12..]|12.e12).`6esn`? Union All Detach Delete $999 Is Not Null Is Not Null Unwind \"d_str\"[..$usn1][..$`5esn`] As `3esn`"),
    octest_legacy:ct_string("Unwind [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As `8esn` Union Load Csv From {@usn5}[{0}..0X0123456789ABCDEF] As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv With Headers From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}]|$`2esn`[Null][{usn2}]) As ``  Detach Delete $0 Starts With {`2esn`},{_usn4}[@usn5],$`1esn` =~$`6esn` =~9e1 Create `8esn`=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))),((`4esn` $`6esn`)) Union All Start `1esn`=Relationship( {1000}) Where {`8esn`}[Count(*)..] Delete $7 In 0.0,{_usn4}[$#usn7..] Remove All(`5esn` In usn2 Ends With 0.e0 Where $12 Starts With {#usn8} Starts With {999}).``,{_usn3:{#usn7}[..12e12][..{1000}],usn2:Count(*) In ``}.#usn7?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `6esn` Contains 01234567 Contains $12 As `6esn` Fieldterminator 's_str' Load Csv With Headers From {#usn7}[..$_usn4][..$`4esn`] As _usn3  With Distinct $123456789 =~$`7esn` Limit 9e1[{`1esn`}][{`3esn`}]"),
    octest_legacy:ct_string("Foreach(usn1 In @usn5[01234567..$`8esn`][``..`5esn`]| Unwind Filter(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}) Ends With Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End Ends With {`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}} As #usn7) Load Csv With Headers From True[..{_usn4}][..0.0] As `4esn` Fieldterminator \"d_str\" Union Unwind False Starts With {``} Starts With 07 As #usn7 Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6}) Start `6esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {usn2})"),
    octest_legacy:ct_string("Start `4esn`=Rel:`5esn`({`2esn`}) ,@usn5=Node:`5esn`(`6esn`='s_str')Where $usn1[{``}..usn2][`3esn`..$1000] Create Allshortestpaths(((_usn4 :usn2:_usn4))) Union All Remove @usn5:@usn5:`7esn` Detach Delete [{7} In `1esn` In 123456789,9e0 =~.e12,9e12[`6esn`..{12}]] =~12.e12 =~Shortestpath(((@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(:`7esn`:#usn8))),{`6esn`} Is Not Null Is Not Null,Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End Starts With Case #usn7 =~#usn8 =~{`6esn`} When `6esn` Contains 01234567 Contains $12 Then #usn7 Is Null When $#usn7[$123456789..][{0}..] Then 0X7 =~{_usn3} =~0x0 End Union All With Distinct *,1.0 Contains #usn8 Contains $usn1 Order By {`5esn`}[{_usn3}..False] Desc,#usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$12[..$`6esn`][..$`1esn`] Descending Limit False Starts With 's_str' Starts With $`6esn`"),
    octest_legacy:ct_string("Merge `4esn`=Shortestpath((($#usn8))) On Match Set #usn8+=Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1),`2esn` =Count(*) In ``,_usn3 =Reduce(`4esn`=`2esn` Starts With $0 Starts With 12.0,#usn8 In $`8esn`[{``}..]|$`6esn` =~$_usn3 =~.e1)[Allshortestpaths(((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})))] On Create Set `4esn`+=123456789 In usn2,`6esn` =`7esn` Contains 01234567 Contains `1esn` Delete (:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]),0.0 =~$usn1 =~$_usn3,usn2[_usn3..{usn1}][@usn6..{`4esn`}] Union Start _usn4=Node:`5esn`(`1esn`={@usn6}) ,usn1=Relationship( {1000})Where $`5esn` =~`7esn` =~usn2 Start ``=Node:usn2({`5esn`}) Where Null[$`1esn`..][7..] With Distinct Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|{#usn7} In {`6esn`}) Is Null Is Null,{#usn7} Contains {`8esn`} Contains usn2,07[$_usn3..][$``..] Order By {1000}[..$@usn6][..$`6esn`] Ascending,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))[..$#usn7][..Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))] Desc Skip Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null Union All Load Csv From None(`` In 9e0 Is Not Null Where 07[{12}..])[{`2esn`:{`6esn`}[..$12][..0.e0]}..Any(#usn7 In `7esn` In $`1esn` In $999 Where $_usn4[1.0..@usn6])] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create `5esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) Optional Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Start `6esn`=Node:@usn5({#usn7}) ,@usn5=Node( {1000})Where `7esn`[1.e1..#usn8] Union All Foreach(#usn8 In [0Xa,0e0 In `7esn` In $`8esn`,123456789 Is Null] In (`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null})| Create `4esn`=({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})) Delete 1e1[{`6esn`}..{1000}][07..123456789],`3esn`[..$#usn7][..{`8esn`}],{``}[12e12..`6esn`] Union With Distinct *,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4,{#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `` Skip 7 In {7} Limit 07 Starts With 0.e0 Starts With $`3esn` Remove [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|00[``..usn2][01..$999]].@usn6?,{_usn4:010 Is Not Null Is Not Null}.`3esn`? With  01[$#usn8..][7..] As `` Skip 0xabc In $`5esn` In @usn5"),
    octest_legacy:ct_string("Create Unique #usn7=((@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]})<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})) Union Create Unique _usn3=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3))"),
    octest_legacy:ct_string("With  `4esn`[$`4esn`],{_usn4} =~`7esn` As `6esn` Order By {0} Starts With usn2 Ascending,{`3esn`} Is Null Is Null Desc Limit Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] Where {`8esn`} In {`6esn`} In .e12"),
    octest_legacy:ct_string("With  {999} In Count(*) In `6esn` As `1esn`,$0 Starts With {`2esn`} As `4esn`,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} As @usn6 Skip Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)] Where {@usn5}[{0}..0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Optional Match @usn6=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),(((#usn7 :`5esn`)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))) Using Index @usn5:@usn5(`7esn`) Where `1esn`[0X7..][#usn7..]"),
    octest_legacy:ct_string("Load Csv From @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null As usn1 Fieldterminator 's_str' Start `1esn`=Relationship:usn2(\"d_str\") ,@usn6=Relationship:``('s_str')Where {123456789} Starts With {`5esn`} Merge `3esn`=(`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`) Union Remove {`3esn`:2.12 =~.e12 =~#usn8}.`3esn`!,_usn4:`4esn`,exists()._usn4? Delete 12e12 =~{usn1} =~1.e1,0e0 Is Null Is Null Unwind @usn5 Is Null As #usn8 Union All With Distinct 12[{#usn8}],{`6esn`}[..$`8esn`] Order By Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999})))[Case {1000} In $`2esn` In $_usn3 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 When {0} Ends With $@usn5 Ends With 010 Then 's_str'[12..$`5esn`] Else usn1 Starts With Count(*) Starts With @usn6 End][Filter(#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null)] Asc,`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Descending Limit (:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[ *12..00{`6esn`:$7[..{`8esn`}][..{999}]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})[Reduce(_usn3=`1esn` Is Null,`` In 9e0 Is Not Null|'s_str'[12..$`5esn`])..{`2esn`:9e0 Is Not Null,@usn6:7 In {7}}] Unwind $`7esn` Ends With @usn5 Ends With .e1 As _usn4"),
    octest_legacy:ct_string("Unwind {`1esn`}[`8esn`][{usn2}] As #usn7"),
    octest_legacy:ct_string("Foreach(@usn5 In 0x0[$123456789..$usn1]| Create Unique Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))),Allshortestpaths((({`3esn`:12 Ends With {999} Ends With 's_str'})<-[:`7esn`|:`2esn` *0xabc..]-(`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})<-[usn2? *0x0{usn2:`8esn` Contains 123.654 Contains {`7esn`},`5esn`:9e0 Is Not Null}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}}))) Create `8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]})) Start `4esn`=Node:`6esn`(_usn3={`1esn`}) ,`2esn`=Node:usn2({usn2})Where `2esn` Ends With $0 Ends With {7} Start ``=Node(*)  Union Detach Delete Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 2.12 =~.e12 =~#usn8) Contains `1esn`(Distinct Count(*) Contains ``) Contains {``:{123456789} Starts With {`5esn`}},#usn8[{#usn7}..12.e12][7..`8esn`] Union All Match `8esn`=(((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[`8esn` *12..00]->({`5esn`:{usn2}[..12.0]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Using Join On usn2,@usn6,`7esn` Where 9e0 =~.e12 Return Distinct *,Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] As ``,1.0[$`5esn`..{``}] Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})"),
    octest_legacy:ct_string("Create `4esn`=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))) Union Create Unique `6esn`=(:`3esn`:usn2{_usn4:_usn4 Starts With $`3esn` Starts With {#usn8}}),`5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Return Distinct *,1000 Starts With {@usn5} Starts With 123.654 Union All Detach Delete 2.12 In $123456789 In 00,.e0[$`8esn`..12e12][usn1..999],[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Ends With (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Remove {``:01[$#usn8..][7..]}.`7esn`? Optional Match ((`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)),``=(@usn5 :`7esn`:#usn8)<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}) Using Scan #usn7:@usn6 Using Join On `1esn`,`8esn`"),
    octest_legacy:ct_string("Return Distinct *,Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As ``,_usn3[Count(*)] Order By Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` ) Desc,0Xa[..`6esn`] Descending,{@usn6}[..1000] Desc Skip usn1 Is Null Limit {usn2}[010..][$123456789..] Optional Match _usn4=((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})) Using Index usn2:`3esn`(_usn3) Using Scan `5esn`:_usn3 Where $7 In 0.0"),
    octest_legacy:ct_string("Unwind $12[{``}] As #usn7 Load Csv From {@usn5}[`4esn`][12.0] As `1esn`  Union All Merge `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) On Create Set `6esn` =Reduce(`6esn`=$999[0.12][0xabc],`5esn` In usn2 Ends With 0.e0|{_usn4} Starts With 01234567 Starts With $#usn7) =~`6esn`(`1esn`[$`4esn`..]) =~`3esn`(0.0,$usn1 =~{_usn3}),[01 Is Null Is Null,$`8esn`[{``}..]]._usn3! =[$@usn6 Contains {@usn6},False[{`5esn`}..{`8esn`}]][Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7})..],@usn6+=`8esn` Contains 123.654 Contains {`7esn`} On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Foreach(`7esn` In `1esn` Starts With $`7esn` Starts With `8esn`| Return *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Limit $`8esn` Is Not Null Is Not Null Delete {`6esn`}[`6esn`..{`5esn`}],{#usn8}[True][{`7esn`}],Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) Is Not Null Is Not Null)"),
    octest_legacy:ct_string("With Distinct (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As #usn8,`6esn` =~{usn2} As ``,Reduce(`7esn`=usn1[..$usn2][..0],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn6[..0X0123456789ABCDEF][..{`6esn`}])[{`5esn`:0Xa[..07][..`2esn`]}..Any(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`)][None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])..{``:01234567 Is Not Null}] Order By $1000[01][$123456789] Ascending Return Distinct {_usn4} Contains {999} Contains 2.12 Remove Case When $`5esn` Is Null Then 0X0123456789ABCDEF End.`1esn`,{`3esn`:12.e12,`2esn`:12.e12}.@usn5 Union Start @usn6=Node:@usn6(@usn5={usn2}) ,_usn4=Node( {1000}) Unwind 07[.._usn4][..$@usn5] As `5esn` Union All With  *,Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As ``,$7 Is Not Null Is Not Null Order By [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] Asc,{usn2}[010..][$123456789..] Descending Skip [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] Where $`4esn` Starts With #usn8 Starts With 2.12"),
    octest_legacy:ct_string("Start `7esn`=Node:_usn3({`2esn`}) ,``=Rel:usn1(`5esn`='s_str')Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3} Union All Remove Allshortestpaths((((#usn8 :`6esn`)-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})-[@usn6?:`2esn`|_usn3 *0x0{`2esn`:0.12 Ends With #usn8 Ends With $1000}]-(:`5esn`{``:$`6esn` Is Not Null})))).usn1!,_usn4(Distinct $7 Is Not Null Is Not Null).usn2?,(`5esn` {@usn6:0.12 Ends With #usn8 Ends With $1000})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`).`2esn`? Union Load Csv With Headers From True Ends With {`7esn`} Ends With @usn5 As `5esn` Fieldterminator 's_str' Foreach(`8esn` In [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}][Reduce(`8esn`={@usn5} In `6esn` In .e0,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|$@usn5 Ends With 00 Ends With 12.e12)]| With  Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,{#usn7} Contains {`8esn`} Contains usn2 As _usn4 Order By $999 Asc Limit exists(Distinct {12}[..9e1],{``}[...e1]) Is Not Null Is Not Null Where {1000}[..$`3esn`][..2.12] Return Distinct Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As usn1,Reduce(usn1=`8esn` Contains 123.654 Contains {`7esn`},`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|1e1[{`6esn`}..{1000}][07..123456789])[(:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[?:usn2{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})] Order By $usn1 Ends With $`3esn` Ends With 0x0 Descending,.e1[@usn5][0X0123456789ABCDEF] Ascending,07 Starts With $#usn8 Starts With usn2 Descending Limit 1.0[{0}..])"),
    octest_legacy:ct_string("Start `4esn`=Relationship:_usn3({7})  Union Foreach(`` In `3esn` =~usn2 =~7| Remove Case $_usn3 Starts With 0.0 Starts With {#usn7} When $@usn6 Is Not Null Then True[$7..] End.@usn5! Remove Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where $`2esn`[..$#usn8]).#usn8!,None(#usn7 In 0e0 Is Not Null Is Not Null Where False Is Null Is Null).#usn7!,Single(#usn7 In 0e0 Is Not Null Is Not Null Where $usn1 Is Null Is Null).usn1) With  ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}) Order By $123456789 Contains {`2esn`} Contains 's_str' Ascending Skip $usn2 Ends With $@usn6 Ends With $_usn3 Limit All(`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null)[Allshortestpaths(((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})-[?:`8esn`|:#usn8]-(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[?:@usn5|:`1esn`{usn2:$12[$`3esn`][9e12]}]->(:@usn5:`7esn`{``:123.654[0xabc][1.e1]})))..Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|#usn7[0.12..12.e12])][Extract(`` In {0} Is Not Null Is Not Null Where True[#usn8..][$123456789..]|1.e1 Ends With {`8esn`} Ends With 00)..Case 12e12 Starts With $`7esn` When 2.12[True] Then `2esn` Ends With {#usn8} Else $#usn7 In `4esn` In 1.0 End] Remove Case False Ends With #usn7 Ends With 1.e1 When #usn8[{#usn7}][12e12] Then {`8esn`} Is Not Null End.`2esn`! Union All Merge (`4esn` :`3esn`:usn2) On Create Set Case When 07[..0Xa] Then 0xabc In $`5esn` In @usn5 Else Count(*) In `` End.usn2? =$999[0.12][0xabc],`5esn`+=0.e0 Ends With Count(*) Ends With `8esn`"),
    octest_legacy:ct_string("Return Distinct $#usn8 As _usn4 Order By `5esn`(Distinct $`8esn`[{``}..],12.e12) Contains Reduce(`6esn`=1.e1[$_usn4..999],`5esn` In 9e1 In 0.0 In {999}|999 In 0X0123456789ABCDEF In 9e0) Contains (@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"}) Asc Skip Shortestpath((((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4)))) In All(usn2 In 1000 Starts With $123456789 Where False =~$`8esn`) In Reduce(#usn7={`6esn`} =~{`4esn`} =~0x0,#usn7 In 0e0 Is Not Null Is Not Null|$usn1 Starts With {`5esn`}) Union All With  $`8esn`[{usn1}..] Skip Extract(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}|{#usn8}[$`6esn`..12e12])[`1esn`(Distinct {``}[$@usn5])..Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*))] Where `4esn`[\"d_str\"..][123.654..] Foreach(usn1 In $0 Starts With {`2esn`}| Unwind {usn1} Contains 0xabc As `2esn`) Merge (((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`))) On Create Set `8esn`+=usn1 Starts With Count(*) Starts With @usn6,`7esn`+=[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] On Match Set [_usn4 In $`` =~$1000 =~7 Where {_usn4} Ends With .e1 Ends With 0x0|$#usn7 =~$`1esn`].`8esn` =Case 12.0 Contains {`3esn`} When 01234567[True] Then 0Xa Starts With .e12 When True Ends With Count(*) Ends With 1.0 Then {`8esn`} End Ends With {`7esn`:{``}[12e12..`6esn`]}"),
    octest_legacy:ct_string("Return {_usn3}[07..] As `7esn` Order By .e0 Contains $`6esn` Contains $usn2 Ascending,True[False..] Asc,9e12 In $_usn3 Desc Limit {usn2} =~{1000} Detach Delete 0.0 Is Null Is Null,12 =~0xabc,{`6esn`}[0x0..{1000}] Union All Start `3esn`=Node:`7esn`(`7esn`={`1esn`}) ,`8esn`=Node:`1esn`(`7esn`=\"d_str\") Remove [12 Ends With 0X7 Ends With 12.0,0.0].usn1?,[9e12 In 0Xa In $#usn7,0Xa,$`1esn` Contains {`4esn`} Contains 0.12].`5esn`,Allshortestpaths(((`1esn` {#usn8:True[..$7][..$`4esn`]})))._usn3? Detach Delete Case 010[123456789] When {_usn4}[$`3esn`][$`3esn`] Then $`1esn` Contains {`4esn`} Contains 0.12 When {`1esn`}[`8esn`][{usn2}] Then 0.0[$`1esn`..$`5esn`][usn2..$``] Else 0.12 Ends With #usn8 Ends With $1000 End Is Not Null,$123456789[12e12]"),
    octest_legacy:ct_string("Foreach(`6esn` In Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]]| Unwind `7esn` Contains $`1esn` Contains 0X7 As #usn7 Remove Single(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0).`6esn`?,Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When $7 In 00 Then $`` Ends With 9e0 Else {`8esn`} End.`6esn`,Single(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)._usn4) Delete 0Xa[..`6esn`],{1000} In 7 In $_usn4,{#usn7} In `` In @usn6 Load Csv From None(`` In 9e0 Is Not Null Where 07[{12}..])[{`2esn`:{`6esn`}[..$12][..0.e0]}..Any(#usn7 In `7esn` In $`1esn` In $999 Where $_usn4[1.0..@usn6])] As `3esn` Fieldterminator 's_str' Union Load Csv From Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} As usn2  Start usn1=Rel:`4esn`({``}) ,`6esn`=Node:`5esn`({`7esn`}) Foreach(`8esn` In $@usn6[{`8esn`}..9e0][0..$`4esn`]| Start @usn5=Rel:`7esn`(`8esn`={`2esn`}) Where {_usn4} =~`7esn`) Union Foreach(usn2 In 12 Ends With {999} Ends With 's_str'| Start `6esn`=Rel:_usn4({usn2}) ,@usn6=Relationship:#usn8(@usn5='s_str'))"),
    octest_legacy:ct_string("With  *,(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]})[[#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null]..] As `8esn` Order By {0} Ends With $@usn5 Ends With 010 Asc,$12 In $`3esn` In 07 Asc Skip Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7}) Starts With [{1000} In $`2esn` In $_usn3] Limit 0X7 In 0xabc Where Count(*) Starts With $7 Return 0X0123456789ABCDEF[...e12][..0.12] As `8esn`,#usn7[`4esn`..$`8esn`] As @usn5 Limit {`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0,_usn3:$@usn5[$`6esn`]}[..All(`5esn` In 9e1 In 0.0 In {999} Where {7} Contains {#usn8} Contains {7})][..(_usn4 :`4esn`{_usn4:1000 =~{`1esn`}})<-[`7esn`?:#usn8|`1esn` *..7]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})] Unwind {``:$1000[$`7esn`..1e1],``:#usn8[Null]} =~Allshortestpaths(({_usn3:{#usn8}[`7esn`..][_usn3..],`2esn`:123.654[..$`7esn`][...e0]})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})<-[usn1?:`8esn`|:#usn8 *0X0123456789ABCDEF..]->({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) As _usn4"),
    octest_legacy:ct_string("Return Distinct (@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1) Is Not Null Is Not Null,$`4esn`[00..$`8esn`][Null..$@usn5] Limit 0x0 Starts With usn1 Starts With 01 Start usn1=Node:`7esn`(`7esn`={`7esn`})  Union Create `5esn`=Shortestpath((`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})) Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc"),
    octest_legacy:ct_string("Optional Match @usn5=(`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]}),`4esn`=(`4esn` :`3esn`:usn2{@usn6:True[#usn8..][$123456789..]}) Using Join On usn2 Where {`4esn`}[$`8esn`..'s_str'] Unwind [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As `8esn` Union All Match Shortestpath((`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)) Using Scan usn2:#usn7 Start ``=Rel:`2esn`(`1esn`='s_str') ,`8esn`=Node:usn2(\"d_str\") Foreach(`3esn` In $#usn8| Optional Match Shortestpath((`4esn` )),(#usn7 :``) Using Index `7esn`:usn2(usn2)) Union All Start @usn6=Node:`8esn`(`5esn`=\"d_str\") ,`8esn`=Rel:_usn3(``={12}) Create _usn3=Shortestpath(((({`3esn`:$_usn4 =~$12 =~`3esn`,#usn7:12.e12[2.12..]})-[`8esn`?]->(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)))),(`7esn` :`5esn`{#usn7:{@usn5}[123.654]})"),
    octest_legacy:ct_string("Start `7esn`=Node:``({``})  Merge `7esn`=Shortestpath(((@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(:`7esn`:#usn8))) On Create Set @usn5+={`2esn`} Starts With 00,Filter(`5esn` In usn2 Ends With 0.e0 Where $`6esn` =~$_usn3 =~.e1).`8esn` =$1000[01][$123456789] On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} Union Create Shortestpath((`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})-[?:`2esn`|_usn3 *01234567..]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(`7esn` {`6esn`:{#usn7} In {`6esn`},`2esn`:$12 In {`8esn`}})),usn2=Shortestpath((_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})) Return 1000[..$12][..$usn2] As #usn8 Limit $@usn5[$`6esn`] Union Remove Case 0e0 Is Null Is Null When 0[9e12..{usn1}] Then 0 Is Null Is Null End.`3esn`,[$`6esn` =~$_usn3 =~.e1].`5esn`!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] As usn1  With  1000 Contains {999} Contains 9e12,{``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6),{usn1}[...e1][..{_usn4}] Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} Ascending,`3esn`[{``}..$#usn8] Descending,$1000 Contains $12 Descending Skip 0e0 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind $`6esn` In $`2esn` As _usn3 Unwind `7esn` Contains $`1esn` Contains 0X7 As #usn7 Unwind `5esn` In $_usn3 In 0Xa As `3esn`"),
    octest_legacy:ct_string("Create Shortestpath(((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(`8esn` :_usn3:`5esn`{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True})-[:_usn4{#usn7:{7} Contains {#usn8} Contains {7},`6esn`:Count(*) Starts With $7}]-(`5esn` :@usn5:`7esn`))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0X0123456789ABCDEF[...e12][..0.12] As #usn7  Create Unique `8esn`=(usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})-[`6esn`?]-($1000),_usn3=(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(_usn4 :_usn3:`5esn`{usn2:$999[0.12][0xabc]})"),
    octest_legacy:ct_string("Unwind Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] As `3esn` Delete _usn3 Starts With 0X7,{1000}[..$`3esn`][..2.12],None(#usn7 In `7esn` In $`1esn` In $999 Where `5esn` Is Null) Ends With [#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`|True[#usn8..][$123456789..]] Ends With Extract(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]|123456789 In usn2)"),
    octest_legacy:ct_string("Unwind {_usn4} Starts With 01234567 Starts With $#usn7 As #usn8 Merge ((:`1esn`)) On Match Set `8esn` ='s_str' Is Not Null Is Not Null Union All Match (`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}),Allshortestpaths(((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]}))) Where True Ends With {`7esn`} Ends With @usn5"),
    octest_legacy:ct_string("Foreach(`4esn` In {`2esn`} Ends With {`2esn`} Ends With _usn4| Remove Case {usn2}[07] When `1esn`[0X7..][#usn7..] Then {12}[..9e1] Else @usn6[2.12..][`5esn`..] End.`2esn`!,(`1esn` {#usn8:9e12 Starts With $_usn3})<-[:`4esn` *01{`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})<-[`6esn`$`6esn`]-({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}).`8esn`!) Delete 0e0 In `7esn` In $`8esn` Unwind $`5esn` Is Null As `7esn` Union Detach Delete $`2esn` Ends With 9e0 Ends With True Load Csv With Headers From 123456789 Is Not Null Is Not Null As @usn6 Fieldterminator \"d_str\" Union Start `4esn`=Rel( {`6esn`})  Unwind 7[0e0..][$`1esn`..] As @usn6"),
    octest_legacy:ct_string("With  0.e0[1e1..9e1],$`1esn`[``][\"d_str\"] Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} Ascending,`3esn`[{``}..$#usn8] Descending,$1000 Contains $12 Descending Skip {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] Where 0X7 Contains usn2 Contains $`1esn` Return Distinct Any(_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null) Is Null Is Null As `6esn`,{#usn8}[$999..010],(:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Order By $`` Contains 123.654 Contains $#usn7 Desc,$`5esn` Contains 123456789 Contains $`1esn` Descending,$`5esn`[{usn2}..][Null..] Descending Limit {#usn7} In `` In @usn6 Foreach(_usn4 In {@usn5}[9e1..][1e1..]| Load Csv With Headers From 2.12 Ends With {@usn5} Ends With `2esn` As usn2 Fieldterminator \"d_str\") Union All Foreach(`4esn` In .e12 Contains 00 Contains usn2| Match `6esn`=({``:{999} Ends With 1e1})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})<-[:`3esn` *01]->(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]}) Using Index `8esn`:#usn7(@usn6) Using Index usn2:`1esn`(_usn3) Where $_usn4 Contains 0 Contains False) Remove Reduce(`8esn`=`5esn` Is Null Is Null,`5esn` In usn2 Ends With 0.e0|01 Contains {0} Contains $`5esn`)._usn4! Create Unique (`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(_usn3 ),(({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 ))"),
    octest_legacy:ct_string("Create (((`7esn` :@usn6{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[``? *0]-(`7esn` :`8esn`)<-[`8esn`?:`5esn` *0X0123456789ABCDEF..{`8esn`:$@usn5[0.12..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}))) Union All Remove Allshortestpaths((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})).`8esn` Load Csv From {1000} Is Null As _usn4 Fieldterminator 's_str' Merge _usn3=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3)) On Create Set #usn7 =12.0[{999}..$`5esn`][0xabc..$_usn3],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),#usn7 ={`3esn`}[$`4esn`..]"),
    octest_legacy:ct_string("Foreach(`2esn` In $`4esn`[{`5esn`}..]| Unwind usn2 Is Null Is Null As _usn4) With  $0 In 999,@usn5 =~$123456789,0Xa[..07][..`2esn`] As @usn5 Order By {1000}[True] Asc Skip 0e0[..$`2esn`][..Count(*)] Where 0.0 =~$usn1 =~$_usn3 Union All Foreach(_usn3 In `3esn`(Distinct $`8esn`[..$usn2][..12]) Ends With None(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Ends With Extract(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]|010 Is Null Is Null)| With Distinct False Ends With #usn7 Ends With 1.e1 As _usn4,123.654 =~010 =~`6esn`,{@usn5}[$usn2..] Order By 0.12 =~True =~`3esn` Desc Skip 12.0[12..9e1] Where 0 Is Null Is Null Unwind $_usn4 Contains 0 Contains False As _usn3) Union Start #usn7=Node( {1000}) ,_usn3=Node:@usn6(_usn3={``})Where {@usn5} In {_usn3} In 0e0"),
    octest_legacy:ct_string("Foreach(`3esn` In [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)]| Delete 7[0e0..][$`1esn`..] Optional Match ((usn2 :usn2:_usn4{@usn6})<-[?:`7esn`|:`2esn` *0X0123456789ABCDEF..]->(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})),(`5esn` :usn1)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]->(#usn8 :`1esn`)<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) Using Index `7esn`:`2esn`(`7esn`) Using Index `6esn`:`7esn`(`5esn`) Where `7esn`[$`6esn`][$`8esn`]) Merge ((_usn4 )<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})) Unwind @usn6[..$usn2][..0X0123456789ABCDEF] As _usn4 Union Optional Match Shortestpath((#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)})-[`1esn`?:@usn5|:`1esn` *010..]-(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})) Using Index `2esn`:@usn5(@usn6) Using Join On `7esn`,``,#usn7 Where {`8esn`} Is Not Null"),
    octest_legacy:ct_string("With  01 Is Null Is Null,0xabc In $`5esn` In @usn5 As #usn8,$`1esn` =~$`6esn` =~9e1 Union Foreach(_usn4 In [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)]| Match `7esn`=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})) Start #usn7=Node( {1000}) ,``=Node(*)Where $999[...e1][..{`3esn`}]) Create `2esn`=Shortestpath((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(:usn1{usn2:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})),`7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}) Load Csv From 1e1 In #usn8 As `8esn` Fieldterminator 's_str' Union All Remove Allshortestpaths((`5esn` :usn2:_usn4)-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})).#usn7!"),
    octest_legacy:ct_string("Remove Reduce(`8esn`=@usn5 Starts With 0xabc,#usn8 In $`8esn`[{``}..]|$`8esn` Ends With {`5esn`} Ends With $`4esn`).@usn5! Create ((`1esn` {#usn8:True[..$7][..$`4esn`]})),#usn8=((_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) Load Csv With Headers From 0[9e0][1.0] As `1esn` "),
    octest_legacy:ct_string("Foreach(`7esn` In All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``) Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12) Starts With Case $_usn3[123456789][0X7] When `4esn` Ends With $#usn8 Ends With {12} Then usn2 Ends With 0.e0 Else $`6esn` Ends With $`3esn` Ends With 07 End| Load Csv From 01[$#usn8..][7..] As `1esn`  Start #usn7=Node( {`3esn`}) ,`5esn`=Rel:_usn3(`2esn`={0}))"),
    octest_legacy:ct_string("Start `5esn`=Rel( {`1esn`}) ,``=Rel:#usn8(\"d_str\") Create Shortestpath(((:`6esn`{_usn4:07 =~usn2}))),Shortestpath(((#usn8 {`6esn`:$usn1 Is Null Is Null})))"),
    octest_legacy:ct_string("Unwind ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}) As `4esn` Union Merge `1esn`=Shortestpath(((@usn5 :`1esn`))) On Create Set {@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}.#usn7! ={`1esn`} Is Null Start _usn4=Rel:@usn6(`5esn`={1000}) ,``=Node:`1esn`(`3esn`={12})Where $`3esn` In $#usn8 In {_usn3}"),
    octest_legacy:ct_string("Merge (({`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) On Match Set {_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}.`4esn`! =`3esn` =~usn2 =~7,Shortestpath(((({usn1:1e1[..1e1]})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null})<-[?:#usn7|:`` *010..]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})))).`5esn`? =Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) On Match Set Case `3esn`[{``}..$#usn8] When 12 =~0xabc Then {`1esn`}[`8esn`][{usn2}] End.`4esn`? =0xabc Is Not Null,#usn7:`6esn`,Reduce(_usn3=Null[$`1esn`..][7..],`` In {0} Is Not Null Is Not Null|9e12[`6esn`..{12}]).`1esn` ={0} Starts With usn2 Union Create Unique `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})) Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Order By 07[{12}..] Ascending Skip None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Return Distinct None(`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12])[Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4)..][Case {1000} Is Not Null Is Not Null When 0Xa Starts With .e12 Then #usn8[Null] When 1000 Starts With {@usn5} Starts With 123.654 Then .e12[..010][..{0}] Else {#usn8}[`7esn`..][_usn3..] End..] As `2esn` Limit $`5esn` Contains `3esn` Contains {usn2} Union Foreach(_usn3 In 1.e1 Starts With {`3esn`} Starts With #usn8| Unwind {`4esn`}[9e1..{`6esn`}][9e0..1.0] As `4esn` With Distinct Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End =~[usn2[_usn3..{usn1}][@usn6..{`4esn`}],12 Starts With $_usn4 Starts With $`6esn`,9e0[.e12..][$`3esn`..]] =~Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*)),$usn2 Ends With $_usn3,01234567[`1esn`] As `3esn` Skip Case When {usn2} Ends With _usn3 Then $`5esn`[1e1..] Else 123.654[Null..12.e12] End[[01[..$usn1],$_usn4 Contains 0 Contains False,9e1 Is Null Is Null]..{`2esn`:$_usn3 In $`5esn`}] Where 9e12 Starts With $_usn3) Create ((usn1 :@usn5:`7esn`)),usn1=Shortestpath((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)))"),
    octest_legacy:ct_string("Load Csv From `` Is Null As @usn6  Union All Foreach(`7esn` In {`8esn`}[@usn5][0]| Create `7esn`=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})) With Distinct 0Xa =~{0} =~0x0 As _usn4,$7 Contains {1000} Contains 0X7 Order By $`1esn` Asc,Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) Ascending,.e12 Contains 00 Contains usn2 Descending Skip 0.0 Ends With 1000 Ends With 12e12 Limit {`8esn`}[0xabc..][`4esn`..]) Union Foreach(@usn5 In 9e12 In {`6esn`} In 0X7| Return Distinct [{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Skip Any(`5esn` In usn2 Ends With 0.e0 Where usn1[12e12..]) Is Null Is Null Limit .e12[$@usn5..]) Unwind {usn2}[01] As `8esn`"),
    octest_legacy:ct_string("Load Csv From (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As usn1  Load Csv With Headers From 1.e1 Ends With {`8esn`} Ends With 00 As `7esn` Fieldterminator \"d_str\" Create Unique Allshortestpaths(((`` :usn1))) Union All Delete Count(*)[.e12..]"),
    octest_legacy:ct_string("Create Unique (@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}),Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))) With  *,{`7esn`:{``} Starts With \"d_str\",#usn7:0.0[$`1esn`..$`5esn`][usn2..$``]} Is Null Is Null As `7esn`,usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`} As _usn4 Union Remove _usn4(@usn6[$`2esn`..],1e1[{`6esn`}..{1000}][07..123456789]).`8esn` Remove {_usn3:'s_str' Contains {_usn4}}._usn3?,Single(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).`1esn`?"),
    octest_legacy:ct_string("Match #usn8=((#usn8 :`4esn`)) Where $`2esn` Ends With 9e0 Ends With True Delete _usn3 Starts With 0X7,{1000}[..$`3esn`][..2.12],None(#usn7 In `7esn` In $`1esn` In $999 Where `5esn` Is Null) Ends With [#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`|True[#usn8..][$123456789..]] Ends With Extract(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]|123456789 In usn2) Union All Foreach(`` In [`` In {`7esn`} Starts With {0} Starts With {1000} Where `3esn` =~usn2 =~7|$``[$@usn6..usn1][usn1..7]] Contains {`2esn`:0.12 Ends With #usn8 Ends With $1000}| Optional Match `3esn`=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),usn2=Allshortestpaths((((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})))) Using Index `1esn`:usn1(`8esn`) Using Index `2esn`:@usn5(@usn6) Where 01 Contains _usn3 Contains .e12 Optional Match Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Using Index _usn4:_usn3(`4esn`) Where 0X7 =~{_usn3} =~0x0) Remove [`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000].`4esn` Match ((usn1 :`3esn`:usn2)),usn2=((`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})-[_usn4?:_usn3|:@usn5]-(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)) Using Index #usn7:usn1(`4esn`) Where $`7esn` Contains `1esn` Contains {usn1} Union All Merge #usn8=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))) Merge ((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0})) On Match Set All(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1]).usn2 ={0}[{@usn6}..$_usn3] On Match Set `6esn` =[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`).``? =9e0,.e1.`7esn`! =Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))[Case When False[{`5esn`}..{`8esn`}] Then 2.12 =~{``} =~0X7 When 0e0 =~{usn2} Then $_usn4 =~$12 =~`3esn` Else 999[0.0..][$_usn4..] End][[#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]]]"),
    octest_legacy:ct_string("Return Distinct [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,{`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] As `5esn` Skip {usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}[Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])][Reduce(#usn7={`6esn`}[..$12][..0.e0],#usn8 In $`8esn`[{``}..]|$0 Starts With True Starts With $_usn4)] Union All Optional Match _usn4=(_usn4 {`5esn`:0X0123456789ABCDEF[...e12][..0.12]})-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}),((`8esn` {#usn8:9e0 Is Not Null})) Using Index `6esn`:`7esn`(`5esn`) Using Index `7esn`:`2esn`(`7esn`)"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath(((:#usn8:_usn3{`3esn`:`2esn`[#usn8]})<-[{`8esn`:{_usn3} Starts With $`4esn` Starts With {_usn4},`3esn`:$_usn3[123456789][0X7]}]->(:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]}))) Foreach(`8esn` In 12.e12 Is Null Is Null| Create Unique `2esn`=((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[?*..$`4esn`]->(#usn8 :#usn7:`3esn`)) Start `8esn`=Node:`1esn`(@usn5='s_str') )"),
    octest_legacy:ct_string("Start usn1=Node:`4esn`({`6esn`})  Load Csv From 01[$#usn8..][7..] As `1esn`  Create _usn3=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})) Union Load Csv From {`1esn`}[$12..usn1][$``..@usn5] As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove `3esn`:@usn5:`7esn` Merge `6esn`=(`4esn` :#usn7:`3esn`{usn1:$`4esn` Contains {7} Contains 999})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(_usn4 :usn1) On Match Set `1esn` =(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null).usn2 =Count(*)[.e12..],_usn4+=$`5esn`[{usn2}..][Null..] On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} Union Return *,`2esn` Ends With {#usn8} As usn2,{1000}[..$@usn6][..$`6esn`] Skip 0x0 =~$usn2 Limit {`6esn`}[..$12][..0.e0] Start #usn8=Relationship:_usn3(`5esn`={_usn4}) ,#usn8=Relationship:``({`5esn`})Where {1000} Contains 12.0 Contains @usn5 Create @usn6=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]-({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}}))),`7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8})))"),
    octest_legacy:ct_string("Delete 7 Is Null,{`4esn`},$`2esn`[Null][{usn2}] Load Csv With Headers From 123456789 Is Not Null Is Not Null As @usn6 Fieldterminator \"d_str\" Match (({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})),@usn6=Shortestpath((`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`)) Using Join On `1esn`,`4esn`,usn2"),
    octest_legacy:ct_string("Start `5esn`=Rel:`5esn`({`7esn`}) ,_usn4=Node( {1000}) Load Csv From 1e1[{`3esn`}..] As _usn4 "),
    octest_legacy:ct_string("Start `5esn`=Node:`4esn`(`2esn`={1000}) ,``=Rel:#usn8(\"d_str\")Where `4esn`[\"d_str\"..][123.654..] Merge `7esn`=Allshortestpaths(((`5esn` :`6esn`{@usn6:_usn3 Starts With 0X7,`6esn`:$`5esn` Is Null}))) Create (`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}),Shortestpath((@usn6 :`2esn`:@usn5)<-[@usn5?]-(:_usn3:`5esn`)) Union Match `7esn`=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})) Create ``=Shortestpath(((#usn8 :`4esn`)-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})-[`8esn`:@usn6 *12..00{@usn5:$`8esn` Is Not Null Is Not Null,`3esn`:0e0 Is Not Null Is Not Null}]-(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))),@usn5=Shortestpath(((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[? *010..]->(@usn5 {`3esn`:`2esn`[#usn8]}))) With  *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Order By {`2esn`} =~12e12 =~1.0 Descending,$`8esn` Ends With {`5esn`} Ends With $`4esn` Desc,`8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Descending Skip $@usn5 Contains 1.0 Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] Union Create `7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}),((_usn3 {usn1:{`8esn`} Is Not Null})) Load Csv From Case When `4esn` Ends With $#usn8 Ends With {12} Then 01 Contains _usn3 Contains .e12 End Ends With Allshortestpaths(((`2esn` :`1esn`$1000)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[#usn7 *01{@usn5:{#usn8} In $7}]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF}))) Ends With {@usn6:12 Ends With {999} Ends With 's_str',#usn7:1000[01234567]} As @usn5  Start @usn5=Rel:`2esn`(@usn5={1000}) ,usn2=Relationship:_usn3({@usn5})"),
    octest_legacy:ct_string("Detach Delete Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)[{@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}..][Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))..] Union Unwind 1000[..$12][..$usn2] As `4esn` Unwind [{@usn6}[#usn8..][999..],010 Ends With {999},{`8esn`}[`3esn`..999]] Is Not Null Is Not Null As `4esn` Union All Start usn2=Rel:usn2(`7esn`=\"d_str\") Where 0.e0 Ends With Count(*) Ends With `8esn` Return Distinct Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] Asc,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Desc Skip 12.0[{999}..$`5esn`][0xabc..$_usn3]"),
    octest_legacy:ct_string("Start `8esn`=Rel:`6esn`(`3esn`=\"d_str\") ,@usn6=Relationship:`4esn`(`2esn`={1000}) Create (#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})<-[@usn6?:`6esn`*..]-({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),((`` :@usn5:`7esn`)<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Union All Remove Case 2.12 =~.e12 =~#usn8 When 12 In {#usn7} Then 12 Ends With _usn4 End.@usn5! Merge ((`` {`1esn`:$@usn6 Is Not Null})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})) On Create Set Reduce(usn2=`1esn` Is Null,`` In {`7esn`} Starts With {0} Starts With {1000}|.e1[..12e12][..Count(*)]).`7esn` =usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`},`3esn`+=Extract(`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]|$`2esn` In $999 In 0.12)[Case `6esn` =~{usn2} When $`5esn`[$7] Then $#usn7 =~$123456789 =~12 When $@usn5[0.12..] Then 9e12[`6esn`..{12}] End..][Shortestpath(((usn1 :@usn5:`7esn`)))..],@usn5+=Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) On Match Set `5esn`({`8esn`} =~usn1 =~12.e12).#usn7? =(:_usn3:`5esn`{`1esn`:0xabc[{`7esn`}..][{`8esn`}..],`1esn`:0x0[$123456789..$usn1]})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`1esn`?:`7esn`|:`2esn`]->(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})[(@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"})..[`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7|{`1esn`}[`8esn`][{usn2}]]][usn2(Distinct $`` Ends With 9e0,{12}[..9e1])..Extract(`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`])],#usn7 =(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) Delete {#usn8}[[`2esn` Starts With `` Starts With .e12,010[``..123456789][@usn6..{12}],$123456789 =~$`7esn`]][Allshortestpaths((#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}))],$_usn3[..@usn6][..{999}],{usn2}[07] Union With Distinct 0Xa[..`6esn`],Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Order By {_usn4}[{usn1}..][`8esn`..] Descending,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Desc Limit Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc Is Null) In {usn1:``[..`2esn`][..@usn5]} In (:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}}) Where 1e1 Contains $`` Contains 12.0"),
    octest_legacy:ct_string("Merge _usn3=((@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]})<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})) On Create Set `7esn`+=``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] On Match Set (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})<-[#usn7?{`7esn`:12.0 Is Not Null Is Not Null,`6esn`:.e12[..010][..{0}]}]-({@usn6:0e0 =~{usn2}}).usn1! =$`8esn`[{``}..] Merge ((@usn5 :usn1)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(`1esn` :#usn7:`3esn`)) Union All Load Csv From $1000[`6esn`..][Count(*)..] As usn2 "),
    octest_legacy:ct_string("Start `4esn`=Node:`1esn`({123456789}) ,`7esn`=Node:#usn7({@usn5})Where $usn1 Starts With {`5esn`} Merge ``=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))) On Create Set usn1 =.e12[$@usn5..] On Create Set `7esn`+=0.e0 Ends With Count(*) Ends With `8esn`,#usn8 =9e12 In {@usn6} Optional Match usn1=((:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})) Where @usn5[`5esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From `4esn`(Distinct {`1esn`} Starts With usn2) Is Not Null Is Not Null As usn1  With Distinct {`6esn`} Contains {`1esn`} Contains Null Limit {usn2} Ends With $`7esn` Ends With {`1esn`} Remove Reduce(`8esn`=`5esn` Is Null Is Null,`5esn` In usn2 Ends With 0.e0|01 Contains {0} Contains $`5esn`)._usn4! Union With Distinct *,2.12[True],{`8esn`:0X7 Ends With {@usn5} Ends With {_usn3},`6esn`:1000[..$12][..$usn2]} Ends With Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Ends With Extract(@usn5 In {#usn8} Contains 7 Where @usn5 Is Null Is Null) As `4esn` Order By Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc"),
    octest_legacy:ct_string("Optional Match Shortestpath((`4esn` )),(#usn7 :``) Using Index `7esn`:usn2(usn2) Remove [$1000 Starts With 12.e12 Starts With {#usn7},`6esn` =~{usn2},{usn1}[0..{@usn6}][True..usn2]].#usn8!,Filter(`` In {0} Is Not Null Is Not Null Where $#usn8[@usn5..9e0][2.12...e1]).`4esn`! Load Csv With Headers From None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As @usn5 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0e0[..$123456789] As #usn8 "),
    octest_legacy:ct_string("Foreach(`1esn` In {@usn5} Ends With {usn1} Ends With @usn5| Start @usn6=Relationship:`1esn`(@usn5='s_str') ,`4esn`=Node:`3esn`('s_str') Create #usn7=Allshortestpaths((`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null}))) Load Csv From $usn1 Is Null Is Null As @usn6 Fieldterminator \"d_str\" Create #usn8=((`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})<-[`8esn`?:`5esn` *0X0123456789ABCDEF..{`8esn`:$@usn5[0.12..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})<-[`8esn`?:`5esn`]-(:`7esn`:#usn8{`1esn`:0.12[.e12..0][1.0..{_usn4}]})),#usn8=Allshortestpaths((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Union Start ``=Node(*)  Union All Load Csv With Headers From .e0[$`8esn`..12e12][usn1..999] As @usn5 Fieldterminator 's_str' Detach Delete @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null,00[12.e12..0Xa][_usn4..@usn5] Create Unique (`7esn` :`6esn`)-[?{`2esn`:9e1 Is Null Is Null}]-(@usn5 {`3esn`:`2esn`[#usn8]})"),
    octest_legacy:ct_string("With  *,Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)] Skip #usn8[Null] Where `2esn`[#usn8] Union Merge (#usn8 :`7esn`:#usn8) Union All Foreach(@usn5 In Null[$`1esn`..][7..]| Remove Shortestpath((`1esn` :`8esn`{``:{999} Ends With 1e1})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})).`8esn`? Load Csv With Headers From `1esn` Is Null As #usn8 Fieldterminator 's_str')"),
    octest_legacy:ct_string("Foreach(usn2 In [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1)| Return Null Ends With {`5esn`} As `4esn` Order By 1.e1 Is Not Null Descending,{``}[...e1] Desc Limit `6esn`[$`1esn`..Null] Start `4esn`=Relationship:_usn3({7}) ) Union All Load Csv From {_usn4}[`3esn`(Distinct {@usn6}[..$7][..{`6esn`}],01 Is Null Is Null)][{`3esn`:`1esn` In `2esn` In $@usn6}] As usn1 Fieldterminator \"d_str\" Remove `5esn`({`8esn`} =~usn1 =~12.e12).#usn7?,None(usn2 In 1000 Starts With $123456789 Where {@usn5}[`4esn`][12.0])._usn4? Load Csv With Headers From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As @usn6  Union All Detach Delete {`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],$123456789 Contains {`2esn`} Contains 's_str',$`5esn`[1e1..] Return Distinct *,Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) Order By 9e0 Desc,2.12 In $123456789 In 00 Descending,Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End] Ascending Limit `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Delete (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) In Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]),None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]),_usn4 Is Not Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`3esn`}[$`4esn`..] As `2esn`  Merge ((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})) On Match Set _usn4+={usn1} Is Null,`7esn` =01 Contains _usn3 Contains .e12 On Create Set @usn5 =$`1esn` Ends With $`7esn` Ends With `2esn` Delete 999 Is Null"),
    octest_legacy:ct_string("Remove (`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}).`4esn`?,None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12])._usn4! Unwind 1e1 In False As @usn5 Union All Merge `2esn`=(`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) On Create Set usn2 =(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Starts With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|{@usn6}[..1000]) Starts With Reduce(#usn8={@usn5}[$usn2..],`` In {0} Is Not Null Is Not Null|$12[..$`6esn`][..$`1esn`]) Union All Optional Match (@usn5 )-[@usn6 *0{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]}]-(_usn4 {``:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}),((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)) Using Index usn2:_usn3(@usn5) Using Index `1esn`:usn1(`8esn`)"),
    octest_legacy:ct_string("Remove [#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa Contains 0X7 Contains {``}|$_usn4 Contains {1000}]._usn4?,Shortestpath((#usn8 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})).`7esn`!,(`4esn` {`3esn`:#usn8 Ends With $usn1})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010}).`4esn`?"),
    octest_legacy:ct_string("Start ``=Rel:`2esn`(`1esn`='s_str') ,`8esn`=Node:usn2(\"d_str\") Foreach(`1esn` In _usn3 Ends With {`2esn`}| With Distinct *,1.0[$`5esn`..{``}] As `2esn` Order By {`5esn`} Starts With {12} Starts With 07 Ascending,_usn4[01234567.._usn4][False..12] Ascending,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] Descending Skip 12.e12[`6esn`][1.e1] Where 9e1 In 0.0 In {999} Load Csv From {12}[..9e1] As @usn6 ) Union All Remove Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 0Xa|{12} Starts With 00 Starts With 12).@usn5?,(:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` ).usn1"),
    octest_legacy:ct_string("Start `3esn`=Node:``({`5esn`}) ,_usn3=Node:@usn5({#usn7})Where 010[``..123456789][@usn6..{12}] Optional Match ((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),((:`2esn`:@usn5{usn1:1e1[..1e1]})) Where 0x0 Is Null Union Return *,{999} Starts With {`3esn`} As #usn8 Order By {1000}[True] Asc Skip 1.e1 Ends With {`8esn`} Ends With 00 Limit Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..]"),
    octest_legacy:ct_string("Load Csv From $`8esn`[..$usn2][..12] As `6esn` Fieldterminator 's_str' Load Csv From Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where 123456789 Contains $@usn6 Contains Count(*)) Contains Reduce(`2esn`=`1esn` In `2esn` In $@usn6,`` In `1esn` In `2esn` In $@usn6|$1000[`6esn`..][Count(*)..]) Contains Allshortestpaths(((({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:`2esn`|_usn3]-({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})-[`7esn`?:`8esn`|:#usn8 *0xabc..]->(`2esn` :usn2:_usn4)))) As #usn7  Merge (`2esn` :_usn4:`4esn`) Union Load Csv From $usn1 =~{_usn3} As @usn5  Return *,`2esn`[..$@usn5] As _usn3,$0 Starts With $1000 Starts With False Order By $`6esn` Is Not Null Descending,{123456789}[..010][..#usn8] Ascending Limit Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {_usn3:{#usn8}[`7esn`..][_usn3..],`2esn`:123.654[..$`7esn`][...e0]} Ends With None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn1 =~{_usn3}) As #usn8  Return Distinct .e12 Contains 00 Contains usn2 As #usn8,Allshortestpaths(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn3 :`8esn`)) Starts With {``:9e1[$`5esn`..0xabc]} Starts With 123.654 Order By Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])] Ascending,$_usn3[`7esn`..][{usn1}..] Asc Skip `3esn` Ends With usn1 Return {`7esn`:$12 In {`8esn`}}[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]..][[010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]..] Skip $usn2[$`5esn`..] Limit usn1 Starts With Count(*) Starts With @usn6"),
    octest_legacy:ct_string("Unwind {7}[..{@usn5}] As `1esn` Foreach(#usn8 In `3esn`[..$#usn7][..{`8esn`}]| Remove Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))).`2esn` Start `7esn`=Node:``({``}) Where 12.e12[2.12..]) Detach Delete 0.e0[1e1..9e1] Union Load Csv From Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End Starts With Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As usn1  Union Foreach(`2esn` In `1esn`[$`4esn`..]| Remove {usn2:{`8esn`} Is Not Null}.#usn8!,Allshortestpaths(((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]}))).#usn7?,{#usn7:usn2[_usn3..{usn1}][@usn6..{`4esn`}],usn1:1.e1[$_usn4..999]}.`3esn`?) Create Unique `2esn`=((`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})-[_usn4?:_usn3|:@usn5]-(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)),((`5esn` :`1esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(#usn8 :`5esn`)) Load Csv From {`7esn`:$12 In {`8esn`}}[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]..][[010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]..] As #usn7 "),
    octest_legacy:ct_string("Foreach(@usn5 In $usn2[12e12..]| Match `2esn`=(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2),`5esn`=Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan #usn7:`` Where {1000}[..$`3esn`][..2.12]) Return *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `1esn`,{0} Is Not Null Is Not Null As `8esn` Order By {`6esn`} =~{`4esn`} =~0x0 Desc,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} Desc Skip Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]) Limit All(@usn5 In {#usn8} Contains 7 Where $#usn7 =~$123456789 =~12)[Extract(_usn4 In $`` =~$1000 =~7 Where $@usn6[{`8esn`}..9e0][0..$`4esn`])..][Extract(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]|Null Contains \"d_str\" Contains {@usn6})..] Match (((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Using Scan #usn7:@usn6 Using Scan #usn8:`6esn` Where {1000}[$_usn3...e1] Union With Distinct $0 Starts With $1000 Starts With False,All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)],``[{123456789}..True] Limit Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)[Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]|0.12 In 123456789]][`7esn`..Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1)]"),
    octest_legacy:ct_string("Return Distinct *,2.12 In $123456789 In 00 As `2esn`,$1000[$`7esn`..1e1] As `` Order By $usn2[$`5esn`..] Desc Skip {`4esn`}[$`8esn`..'s_str'] Limit usn2[`3esn`]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0e0 Is Not Null Is Not Null As `3esn` Fieldterminator 's_str' Foreach(#usn7 In {_usn3} Starts With $`4esn` Starts With {_usn4}| Create Unique Allshortestpaths((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})-[`4esn` *..1000{`3esn`:$`8esn`[...e1]}]-(:`8esn`)<-[:#usn7|:`` *..0X7]->(:`1esn`{`7esn`:9e0 Is Not Null})),Allshortestpaths(((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))))"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) On Match Set `8esn` ={123456789}[01234567..Null],Case 0e0 Is Null Is Null When 0[9e12..{usn1}] Then 0 Is Null Is Null End.`3esn` =Reduce(``=1.e1 Is Not Null,`` In {0} Is Not Null Is Not Null|$@usn6[`4esn`..{999}][$``..{@usn6}])[[$`3esn`[..True][..12.e12],1.0[..`3esn`][...e0]]][`8esn`(Distinct `1esn` In `` In {`6esn`})],`7esn`+=Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) In None(`` In `1esn` In `2esn` In $@usn6 Where {``}[12e12..`6esn`]) Create Unique Shortestpath(((`8esn` :`6esn`))) Load Csv With Headers From $#usn7[$@usn6..] As `3esn` "),
    octest_legacy:ct_string("Remove Case {@usn5} Is Not Null Is Not Null When {`5esn`} In {#usn7} In $7 Then {_usn4} Contains {999} Contains 2.12 When 0X0123456789ABCDEF Then $usn1[010..][{@usn6}..] Else $`` Contains 123.654 Contains $#usn7 End.`4esn` Match `7esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),Shortestpath(({_usn3:999[0.0..$`6esn`]})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]})) Using Index @usn5:`4esn`(_usn4) Where 9e12[_usn4..1.e1][{`3esn`}...e1] Create Unique `5esn`=Shortestpath(((usn1 :@usn5:`7esn`))),(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00})-[_usn4?:_usn3|:@usn5]-(usn1 :``{@usn5:$#usn7 =~$`1esn`}) Union Create #usn7=(`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}}) Start `8esn`=Node:@usn5({999}) ,`3esn`=Relationship:`6esn`({@usn6}) Remove Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0xabc[$#usn7][0Xa]).`2esn`!,usn1(Distinct $`6esn` =~$_usn3 =~.e1).`6esn`!"),
    octest_legacy:ct_string("Create Unique `2esn`=((`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})-[_usn4?:_usn3|:@usn5]-(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)),((`5esn` :`1esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(#usn8 :`5esn`)) Create `8esn`=((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})) Detach Delete 1000 Starts With {@usn5} Starts With 123.654 Union Start _usn4=Node:`5esn`(`1esn`={@usn6}) ,usn1=Relationship( {1000})Where $`5esn` =~`7esn` =~usn2 Start ``=Node:usn2({`5esn`}) Where Null[$`1esn`..][7..] With Distinct Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|{#usn7} In {`6esn`}) Is Null Is Null,{#usn7} Contains {`8esn`} Contains usn2,07[$_usn3..][$``..] Order By {1000}[..$@usn6][..$`6esn`] Ascending,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))[..$#usn7][..Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))] Desc Skip Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null Union Foreach(`6esn` In Reduce(_usn4='s_str' Contains 01 Contains $``,`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn5[Count(*)][07]) Contains Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Contains Filter(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)| Delete $1000 Starts With 12.e12 Starts With {#usn7} Start @usn5=Node( {`1esn`}) Where _usn3 Starts With 0X7) Create Unique @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})))"),
    octest_legacy:ct_string("Start `6esn`=Node:@usn5({#usn7})  Optional Match Allshortestpaths(((`3esn` :`2esn`:@usn5{`3esn`:`2esn` Starts With $0 Starts With 12.0,`8esn`:{usn2} Ends With _usn3}))),(`8esn` :`1esn`)<-[`4esn`:``]->(@usn6 :#usn7:`3esn`)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(:`1esn`{_usn4:_usn4 Contains {123456789} Contains $`5esn`}) Using Scan _usn4:_usn3 Using Join On #usn8,`1esn` Union All Load Csv From 12.e12 As `2esn` Fieldterminator 's_str' Merge ``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) On Match Set usn2+=Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]],_usn4+=.e0 Ends With $0 Ends With ``,[`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|{`6esn`} Is Not Null Is Not Null].`` =0xabc[False..#usn7][$`1esn`..'s_str'] On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Union All Unwind $usn2[{_usn3}..] As usn1 Create Unique (`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(_usn3 ),(({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 ))"),
    octest_legacy:ct_string("Create Unique #usn8=Allshortestpaths(((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``))),_usn3=((`2esn` :``{_usn4:{#usn7} In {`6esn`}})-[`3esn`?]->(:@usn6{@usn6:01234567[True]})) Merge usn2=((#usn8 :_usn4:`4esn`)<-[:`1esn`|`6esn` *0]->(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})) On Match Set {usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}._usn3? ={``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],@usn5 =$`6esn` With Distinct *,[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Order By `5esn` In $_usn3 In 0Xa Asc,{`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Desc,Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12) Is Null Is Null Ascending Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where {`1esn`} Starts With usn2)[..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``)][..Case When $@usn6 Is Null Is Null Then \"d_str\" Is Null Is Null When {usn2} =~{1000} Then `2esn` Ends With {#usn8} End] Limit $`4esn`[00..$`8esn`][Null..$@usn5] Where #usn8[..0Xa] Union All Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6}) Unwind 01234567[True] As usn2 Detach Delete #usn7[$@usn6][$`8esn`]"),
    octest_legacy:ct_string("Merge (({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 )) On Create Set {`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}.`1esn` =[{`8esn`} In {`6esn`} In .e12][2.12..][(usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})..],usn1+=$12[$`4esn`] Union Start `3esn`=Node:_usn4({12}) Where 123456789 Contains $@usn6 Contains Count(*) Unwind 9e0 Ends With {12} Ends With False As `6esn` Remove Case $_usn3 Starts With 0.0 Starts With {#usn7} When $@usn6 Is Not Null Then True[$7..] End.@usn5!"),
    octest_legacy:ct_string("Delete {`3esn`}[`1esn`],12 In {#usn7} Union Remove `8esn`:#usn7:`3esn` Return Distinct Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) As `5esn`,{usn2} Is Not Null Is Not Null As _usn4 Skip 12.e12[2.12..]"),
    octest_legacy:ct_string("Load Csv With Headers From `4esn` Ends With $#usn8 Ends With {12} As usn1 Fieldterminator 's_str' Foreach(usn1 In {1000} In 7 In $_usn4| Unwind 0 In $`2esn` In {123456789} As usn2 Load Csv With Headers From 0x0 Ends With False Ends With 1000 As `2esn` ) Union All Foreach(_usn3 In usn1[12e12..]| Create _usn3=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]}))) With  {`1esn`}[..\"d_str\"],$0[{#usn8}][\"d_str\"] As _usn4,0X0123456789ABCDEF[{`4esn`}][$_usn4] As _usn4 Order By Case When $`5esn` Is Null Then 0X0123456789ABCDEF End Is Not Null Is Not Null Desc Limit [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Create Unique usn1=((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})),Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`)))) Union All Load Csv With Headers From {`1esn`}[`8esn`][{usn2}] As `8esn` "),
    octest_legacy:ct_string("Unwind _usn3 Starts With 0X7 As `5esn` Union All Return 0.12[..$`4esn`][..$`7esn`] As `5esn` Order By {``} =~.e12 =~{0} Desc,Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]) Ascending Union All With Distinct *,Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} As `6esn` Order By $`8esn`[..$usn2][..12] Asc Limit Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Count(*)[.e12..])[Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End] Where 12.e12 Merge ``=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))) On Create Set usn1 =.e12[$@usn5..] On Create Set `7esn`+=0.e0 Ends With Count(*) Ends With `8esn`,#usn8 =9e12 In {@usn6} With  *,Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null Order By All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``) Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12) Starts With Case $_usn3[123456789][0X7] When `4esn` Ends With $#usn8 Ends With {12} Then usn2 Ends With 0.e0 Else $`6esn` Ends With $`3esn` Ends With 07 End Ascending,$#usn8 Descending,{`6esn`} Contains {`1esn`} Contains Null Desc Where $#usn7 In `4esn` In 1.0"),
    octest_legacy:ct_string("Delete (:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})<-[#usn7?{@usn5:`7esn`[{`7esn`}..$1000]}]-({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}) =~Reduce(`5esn`=`4esn` Contains {`7esn`},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|7 Is Null Is Null) =~exists(Distinct $12 In {`8esn`},$`` Contains 123.654 Contains $#usn7),$999[Case {#usn7} In `` In @usn6 When `5esn`[12.0..] Then $#usn8 Ends With #usn8 Ends With 12 When #usn8[{#usn7}..12.e12][7..`8esn`] Then #usn8[{#usn7}..12.e12][7..`8esn`] Else $`1esn` =~$`6esn` =~9e1 End..],@usn6[$`2esn`..] Union All Foreach(usn1 In @usn6| Return #usn8[..0Xa] As usn2 Limit {@usn5} =~Null =~$`4esn`) Union Load Csv From Case When {1000} Contains 12.0 Contains @usn5 Then {`8esn`}[@usn5][0] End Contains [#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null|{`8esn`}] Contains @usn5(usn2 Ends With usn2 Ends With 1.e1) As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(`5esn` In {`7esn`}[$usn2]| Create (_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) With  9e12[`6esn`..{12}] As _usn4 Order By @usn5 Contains 7 Contains 999 Descending Skip [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Where `6esn` =~{usn2} Union Unwind {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `1esn` Unwind Allshortestpaths((usn1 :usn1{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))[Case When 1.e1[$_usn4..999] Then 01234567[`1esn`] When 0Xa Then {`2esn`} =~{@usn6} End..Filter(`` In 9e0 Is Not Null Where `1esn`[$`4esn`..])] As #usn8 Union All Load Csv From {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match ((({`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null}))) Using Join On _usn3,`2esn`,`6esn` Using Join On `4esn`,usn1,#usn7 Where #usn7[0.12..12.e12] Load Csv With Headers From 123456789[..$#usn7] As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Delete {_usn4}[$#usn7..] Load Csv From {12}[..9e1] As usn1 Fieldterminator 's_str' Union All Remove `4esn`(0.12[..$`4esn`][..$`7esn`],Count(*)[.e12..]).`1esn`!,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {#usn8} In $7)._usn4? Optional Match ((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)),`7esn`=Allshortestpaths((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)) Using Join On `4esn` Where 123456789 In usn2 Match Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))),Shortestpath((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})-[#usn8:_usn4{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}]->({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(:`4esn`{_usn3:usn1[..$usn2][..0]})) Using Scan ``:`1esn` Where $`` Ends With 9e0"),
    octest_legacy:ct_string("With Distinct [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As @usn6,(:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) As `` Order By {0} Starts With {usn1} Asc,$`2esn`[..00][..{`7esn`}] Descending,.e0[@usn6..] Asc Skip {`1esn`}[0e0..][True..] Where _usn3 Starts With 0X7"),
    octest_legacy:ct_string("Remove `5esn`(Distinct $`4esn` Contains {7} Contains 999).@usn5?,[`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {#usn8} In $7|{999} Starts With {`3esn`}].`3esn`!,[`5esn` In 9e1 In 0.0 In {999} Where 0e0[..$`2esn`][..Count(*)]|$0 In 999].`6esn`? Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] Match `7esn`=((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})),`4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`)) Using Index _usn4:_usn3(`4esn`) Using Scan @usn6:#usn7 Union All Foreach(`2esn` In Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End| With  Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where $usn1[{``}..usn2][`3esn`..$1000]|0.e0[\"d_str\"][.e12]) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} =~Case When 1000 Starts With {@usn5} Starts With 123.654 Then {#usn7} In `` In @usn6 End As `2esn`,0Xa As #usn8,{1000}[{@usn5}..][1.e1..] As `8esn` Order By $@usn6 =~{usn1} =~$@usn5 Ascending,[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Ends With (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Ascending,$`5esn` Contains 123456789 Contains $`1esn` Descending Skip usn1 In {usn1} In 0e0 Remove Allshortestpaths((`5esn` :usn2:_usn4)-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})).#usn7!) Load Csv From {`8esn`}[`3esn`..999] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})),#usn8=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) Union Remove All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {999} In Count(*) In `6esn`).`1esn`!,(`6esn` {``:$#usn8[..9e1]})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}})<-[`1esn`? *0x0{#usn8:$`5esn`[$#usn7]}]-(`` :`4esn`).`7esn`?,Any(_usn3 In 010 Contains $`2esn` Contains 01).#usn7? Remove All(`5esn` In usn2 Ends With 0.e0 Where $12 Starts With {#usn8} Starts With {999}).``,{_usn3:{#usn7}[..12e12][..{1000}],usn2:Count(*) In ``}.#usn7? Create Unique usn2=(`1esn` :`6esn`{#usn7})-[:`3esn`]->({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}),(((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Union Unwind $1000[01][$123456789] As `6esn` Unwind {`5esn`} =~.e0 =~0X7 As `1esn` Foreach(usn1 In {`5esn`} In @usn6 In 2.12| Unwind 999[0.0..][$_usn4..] As #usn8)"),
    octest_legacy:ct_string("Merge `5esn`=(@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}) On Match Set `2esn`+=12.e12 In {@usn6}"),
    octest_legacy:ct_string("Foreach(`8esn` In (:@usn6{@usn6:01234567[True]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[:@usn6{``:123456789 Contains $@usn6 Contains Count(*)}]-({usn1:$_usn4 Contains {1000}}) Ends With Single(`5esn` In usn2 Ends With 0.e0 Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF)| Unwind 0X7 As `8esn`) Create Unique _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Start @usn6=Node:_usn3({7}) Where `4esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(_usn3 In $123456789[#usn7..][0X7..]| Optional Match Shortestpath(((`8esn` :`6esn`))) Using Scan ``:`1esn` Using Index ``:`1esn`(_usn4) Where 7[0e0..][$`1esn`..] Load Csv With Headers From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}]|$`2esn`[Null][{usn2}]) As `` ) Foreach(`7esn` In 12e12 Starts With $`7esn`| Create Unique Allshortestpaths((`5esn` :usn1)-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->({@usn5:`6esn` =~{usn2},`1esn`:010}))) With  *,{@usn5}[$usn2..],Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) Order By Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Ascending,$`8esn`[{usn1}..] Asc,{`6esn`}[..$12][..0.e0] Asc Skip {7} Contains {#usn8} Contains {7} Limit 9e12 =~$usn2 =~9e1 Where $#usn7[$123456789..][{0}..]"),
    octest_legacy:ct_string("Remove All(@usn5 In {#usn8} Contains 7 Where .e0 Is Not Null Is Not Null).`4esn` Foreach(`1esn` In 0e0[..$123456789]| Detach Delete 12e12 Starts With $`7esn`) Create @usn5=(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(_usn3 :_usn3:`5esn`{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})"),
    octest_legacy:ct_string("Return *,[`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1][Extract(usn2 In 1000 Starts With $123456789|{7} =~$usn1 =~{_usn4})..] Order By $`5esn`[{usn2}..][Null..] Descending,{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] Asc Limit 0e0 In `7esn` In $`8esn` Load Csv With Headers From 123456789 Is Not Null Is Not Null As @usn6 Fieldterminator \"d_str\" Create `2esn`=((`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})) Union All Create Unique ((:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4})<-[`3esn`?:`5esn`]-(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[_usn3 *..1000]->()),`6esn`=Allshortestpaths((((usn2 :_usn3:`5esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})))) Union Detach Delete [2.12 =~{``} =~0X7,{#usn7} In `` In @usn6],$_usn3[..@usn6][..{999}],({#usn8:{12}[..9e1],`6esn`:12 Ends With 0X7 Ends With 12.0})-[`6esn`?]-($1000) =~{`6esn`:123456789[{`7esn`}..][{@usn6}..],`1esn`:{@usn6}[..$7][..{`6esn`}]} =~Extract(@usn5 In {#usn8} Contains 7 Where 010[123456789])"),
    octest_legacy:ct_string("Remove None(#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]).@usn6,Single(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010).usn1! Detach Delete Extract(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}|{#usn8}[$`6esn`..12e12])[`1esn`(Distinct {``}[$@usn5])..Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*))],[$`5esn` =~`7esn` =~usn2,Count(*)[`8esn`..$`7esn`]][{usn2:{`8esn`} Is Not Null}..][Allshortestpaths((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}}))..],{`1esn`}[{`2esn`}..{_usn4}][{`8esn`}..$_usn3] Optional Match Shortestpath((`7esn` :_usn4:`4esn`)<-[`8esn`{@usn5:$`` Ends With 9e0}]->(:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4})),Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))) Union All Load Csv From $`8esn`[..$usn2][..12] As `6esn` Fieldterminator \"d_str\" Remove None(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]).`3esn`! Union Create Unique @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),(#usn8 :`7esn`:#usn8) Load Csv From @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove `3esn`(Distinct $usn1 Starts With {`5esn`},12.0[{999}..$`5esn`][0xabc..$_usn3]).`4esn`!,Filter(_usn4 In $`` =~$1000 =~7).#usn8!,[`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where $#usn8[..#usn8][..{`5esn`}]].`5esn` Start `7esn`=Rel:`3esn`(`1esn`={@usn5})  Remove exists({@usn6}[..1000],False Contains _usn4 Contains 2.12).`3esn`!,Reduce(usn2={123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3],`` In {`7esn`} Starts With {0} Starts With {1000}|{#usn8} In $7).#usn8!,All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 010[123456789]).usn1? Union Delete usn1[..$usn2][..0],Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5})"),
    octest_legacy:ct_string("Unwind 's_str' Contains {_usn4} As `5esn` Return Distinct *,(:#usn8:_usn3{#usn8:_usn4 Contains {123456789} Contains $`5esn`,#usn7:$`6esn`})<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[#usn8?:`5esn`]->(`8esn` :`2esn`:@usn5)[..Single(`` In `1esn` In `2esn` In $@usn6 Where {_usn4} Contains {999} Contains 2.12)],{`3esn`} Contains 12.0 Contains {`8esn`} As usn1 Order By Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Ends With [`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]|{@usn6} Contains {`1esn`}] Ends With All(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0) Desc,({#usn8:00})-[:`3esn` *01]-(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}) Starts With Any(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]) Asc Skip {12}[..9e1] Limit 12 Starts With $_usn4 Starts With $`6esn` Union Unwind `6esn` Contains .e12 As _usn3 Detach Delete ({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],01[..$usn1],12.e12 In {@usn6}"),
    octest_legacy:ct_string("Remove None(`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]).usn1? Unwind Extract(#usn8 In $`8esn`[{``}..] Where @usn6|False =~$`8esn`)[Shortestpath((:usn1$`1esn`))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa[_usn4..]|`` Starts With 0.0 Starts With $`1esn`)..] As `1esn` With  00 Contains 9e0 Contains {7},[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Order By 0 Contains 010 Contains 0.12 Ascending,Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00])[``..][(`1esn` {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[``?:#usn7|:``{``:0X0123456789ABCDEF[{`5esn`}..]}]->(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})<-[? *010..{`5esn`:0Xa[_usn4..],``:$@usn6 Is Null Is Null}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})..] Asc Union Merge `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} On Create Set `5esn`:`8esn` Detach Delete $_usn3[`7esn`..][{usn1}..]"),
    octest_legacy:ct_string("Foreach(_usn3 In $`4esn`[00..$`8esn`][Null..$@usn5]| Start usn1=Node( {`8esn`}) Where {`8esn`}[@usn5][0]) Load Csv With Headers From 7[0e0..][$`1esn`..] As usn1  Create (({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})),`1esn`=Allshortestpaths((((#usn8 :`8esn`{`5esn`:$999 Contains 0e0})<-[`1esn`?:@usn5|:`1esn` *010..]->(@usn6 :`3esn`:usn2)-[`8esn`:`1esn`|`6esn`]-(usn1 )))) Union Remove Reduce(`8esn`=$#usn8 Ends With $_usn4,`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|{``}[True][00]).usn1? Return *,#usn8 Ends With $usn1,{999} Starts With {`3esn`} As #usn7 Order By {`3esn`} Contains 12.0 Contains {`8esn`} Desc,{@usn5}[123.654] Descending Limit 123456789[..01234567][..$usn1] Detach Delete $@usn5[..{`8esn`}][..010],[True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null,Shortestpath(((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`))) =~(:`4esn`{`8esn`:{#usn8} Ends With $999})<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}) Union Create Unique `2esn`=Shortestpath((:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`)),Shortestpath(((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}))) Foreach(_usn4 In Reduce(``=0e0 =~{usn2},`4esn` In `4esn`[\"d_str\"..][123.654..]|1e1 In False) Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5})| Start `8esn`=Rel:`3esn`(_usn3='s_str') Where {#usn8}[True][{`7esn`}]) Remove [`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1|_usn4 Starts With $`3esn` Starts With {#usn8}]._usn4,Reduce(usn2=$#usn8 Ends With #usn8 Ends With 12,_usn4 In $`` =~$1000 =~7|999 In 0X0123456789ABCDEF In 9e0).`4esn`!,{usn1:12.e12}.@usn5?"),
    octest_legacy:ct_string("Delete (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) In Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]),None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]),_usn4 Is Not Null"),
    octest_legacy:ct_string("Remove Any(#usn7 In 0e0 Is Not Null Is Not Null).usn1!,Case 010 Contains $`2esn` Contains 01 When 123456789 Is Null Then 0xabc[{`7esn`}..][{`8esn`}..] End.`6esn`!,Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null}))._usn3 Create Unique @usn5=(`1esn` {`5esn`:12 In {#usn7}}),`7esn`=Shortestpath((`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})) Union All Create #usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))),_usn4=(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[`6esn`?:`5esn` *01]->(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]}) Optional Match _usn3=Shortestpath((((#usn7 :`5esn`)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})))),`2esn`=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})) Using Scan #usn8:_usn4"),
    octest_legacy:ct_string("Match Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan ``:`1esn` Using Index @usn5:@usn5(`7esn`) Unwind {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As `2esn` Union Optional Match usn2=Allshortestpaths(()),#usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`) Using Join On `8esn`,`3esn`,#usn7 Using Index ``:``(`8esn`) Where {1000} Contains 12.0 Contains @usn5 Load Csv From Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) As `8esn`  Create Unique `7esn`=(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})"),
    octest_legacy:ct_string("Match Shortestpath((`4esn` )),(#usn7 :``) Using Index #usn7:`6esn`(@usn6) Where 0xabc[{@usn5}..][Count(*)..] Merge _usn4=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Create Set Case 123.654[0xabc][1.e1] When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 Else $usn1 =~{_usn3} End.`2esn`! =12.e12[`6esn`][1.e1],#usn7 =All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] On Create Set Extract(`` In {0} Is Not Null Is Not Null Where 010[123456789])._usn4? =$#usn8[..01],[`5esn` In usn2 Ends With 0.e0 Where #usn7[$@usn6][$`8esn`]].@usn5? =$#usn7[..0e0][..$12],@usn6 =$0[{7}..][123.654..] Union Remove {#usn7:$`4esn` Contains {7} Contains 999,`1esn`:0.12 In 123456789}._usn3? Foreach(`3esn` In `8esn`[`1esn`..{7}][{_usn4}..$_usn4]| Create `8esn`=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))),((`4esn` $`6esn`)) Remove (`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}).`4esn`?,None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12])._usn4!) Load Csv With Headers From 's_str' =~\"d_str\" As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove [{`8esn`}[.e12][01],`1esn` In `` In {`6esn`}].`5esn`? Foreach(`8esn` In $#usn7[$@usn6..]| Create ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` )))"),
    octest_legacy:ct_string("Delete Case $@usn6 Is Not Null When {``}[True][00] Then 0x0[$123456789..$usn1] When .e12[..010][..{0}] Then 01[.._usn4][..$_usn4] End[None(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999)..Reduce(`5esn`=07 =~usn2,`4esn` In `4esn`[\"d_str\"..][123.654..]|0X7 =~{_usn3} =~0x0)],{@usn5} Contains $999 Contains 0.12,'s_str' Is Null Is Null"),
    octest_legacy:ct_string("Match @usn6=((`2esn` :`1esn`$1000)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[#usn7 *01{@usn5:{#usn8} In $7}]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})),`2esn`=($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}}) Using Index usn2:_usn3(@usn5) Using Index `5esn`:`7esn`(@usn6) Where {0}[{`4esn`}..] Union All Return Distinct *,{#usn7:$#usn8[@usn5..9e0][2.12...e1]}[Reduce(`5esn`=`4esn` Contains {`7esn`},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|7 Is Null Is Null)..None(usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`})][[#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}]]..Shortestpath(((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`)))] Order By {999} Is Null Is Null Desc,[07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Desc Limit 9e0 =~.e12 Start _usn4=Relationship:`6esn`(_usn3={`1esn`})  Union With  0Xa Starts With .e12 As ``,usn2 Ends With 0.e0 Order By {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Ascending,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc,@usn5 Starts With 0xabc Asc Where 0xabc[..``]"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath((:`6esn`{_usn4:07 =~usn2})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)),(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Optional Match Allshortestpaths((((:`7esn`:#usn8{#usn8:$7 In 00,_usn4:{123456789} Is Null Is Null})<-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]->(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})<-[@usn5?]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})))),#usn7=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})) Using Index @usn5:@usn5(`7esn`) Where 123456789 Is Null Union Merge usn1=(_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}) On Match Set ``+={7} =~$usn1 =~{_usn4},#usn7+=$`5esn`[$#usn7] Merge usn2=Shortestpath((`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})) On Match Set _usn4 =999[$_usn3..][$``..],Extract(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]|#usn8[\"d_str\"..999]).`8esn`? =12 =~0xabc Create Unique _usn4=Allshortestpaths(((:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]}))),(({`5esn`:{@usn5}[...e1][..01]}))"),
    octest_legacy:ct_string("With Distinct *,{@usn5}[$usn2..],Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) Order By Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Ascending,$`8esn`[{usn1}..] Asc,{`6esn`}[..$12][..0.e0] Asc Skip {7} Contains {#usn8} Contains {7} Limit 9e12 =~$usn2 =~9e1 Delete {1000}[$_usn3...e1],Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}),(:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]}) Union Detach Delete {0} Starts With {usn1} Create Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))) Load Csv From ``[``] As `7esn`  Union Create ((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),((:`2esn`:@usn5{usn1:1e1[..1e1]})) Return *,Allshortestpaths(((@usn5 ))) =~All(@usn5 In {#usn8} Contains 7 Where 9e0[.e12..][$`3esn`..]),All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End Order By Single(`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null) Starts With {#usn7:{`2esn`} =~12e12 =~1.0} Starts With _usn4(@usn5[01234567..$`8esn`][``..`5esn`],usn1 Is Null) Descending Limit $999 Start usn2=Rel:`6esn`(`7esn`='s_str') Where `5esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(`7esn` In Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}])| Unwind 0.0 =~$usn1 =~$_usn3 As usn1) Union Create Unique `2esn`=Allshortestpaths(((:#usn7:`3esn`))),``=Shortestpath(((:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))) Foreach(`1esn` In 9e0[.e12..][$`3esn`..]| Create `7esn`=Shortestpath((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[:@usn6{``:123456789 Contains $@usn6 Contains Count(*)}]-({usn1:$_usn4 Contains {1000}}))) Union Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}) On Match Set (@usn6 :_usn3:`5esn`)-[usn1:`8esn`|:#usn8]-(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}).``? =0X0123456789ABCDEF[{`4esn`}][$_usn4],#usn8 ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],_usn3+={7}[..{@usn5}] On Match Set Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $usn1[$0..Count(*)][@usn6..$12]).`8esn` ={#usn7} In `` In @usn6,#usn8 ={`1esn`}[..\"d_str\"],`2esn`+=Single(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}) Is Null Is Null With Distinct *,Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} As `6esn` Order By $`8esn`[..$usn2][..12] Asc Limit Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Count(*)[.e12..])[Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End] Where 12.e12 Optional Match Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` )) Using Index #usn8:usn1(`2esn`) Using Scan `1esn`:`7esn` Where 07[..0Xa]"),
    octest_legacy:ct_string("Return [07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] As `6esn`,2.12[..01234567][..{usn2}] As `8esn` Order By All(`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null) In (:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[`1esn`?:`7esn`|:`2esn`]->(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`4esn` {@usn5:False =~$`8esn`}) Asc,{1000}[`1esn`][$`6esn`] Desc Limit `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF Create Unique `7esn`=((`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})-[`7esn`:`1esn`|`6esn` *0xabc..]->(`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})) Union Create Unique `3esn`=Shortestpath(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))),((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3))"),
    octest_legacy:ct_string("Create Unique Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]})) Union All Create (:#usn8:_usn3{usn1:{`8esn`}[.e12][01]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`),Allshortestpaths((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`?{`1esn`:{``}[...e1]}]-(_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`1esn`{usn1:0.12 In 123456789}))"),
    octest_legacy:ct_string("Unwind Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) Ends With All(`` In {0} Is Not Null Is Not Null Where \"d_str\" Ends With `7esn` Ends With 12.0) Ends With All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) As _usn4 Return Distinct *,\"d_str\"[..$usn1][..$`5esn`] Skip True Is Null Is Null Limit 07 =~usn2 Start _usn3=Node:#usn8(`6esn`={123456789}) ,`4esn`=Node:#usn7(`5esn`=\"d_str\")"),
    octest_legacy:ct_string("Remove [#usn7[0.12..12.e12],0xabc[$#usn7][0Xa]].`5esn`,Extract(`` In {0} Is Not Null Is Not Null Where 010[123456789])._usn4?,Reduce(`5esn`=$usn2 Ends With `5esn` Ends With 0Xa,`5esn` In usn2 Ends With 0.e0|$12 In $`3esn` In 07).#usn7? With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Where `6esn` Contains 01234567 Contains $12 Union All Delete Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`},{`3esn`}[{`8esn`}..$7][0e0..0x0] Union Create _usn3=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`4esn`=Allshortestpaths(((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})))"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00]) Is Not Null As `8esn`  Load Csv From {`8esn`}[`3esn`..999] As `3esn` Fieldterminator 's_str' Start @usn6=Rel:`3esn`(_usn3='s_str') ,usn2=Node:`8esn`(`2esn`='s_str')Where Count(*)[`8esn`..$`7esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From `2esn` Ends With $0 Ends With {7} As `5esn` Fieldterminator 's_str' Return Distinct Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where Null Contains \"d_str\" Contains {@usn6})[[usn2 In 1000 Starts With $123456789 Where 0[9e12..{usn1}]]][Reduce(`8esn`=`5esn` Is Null,`5esn` In 9e1 In 0.0 In {999}|{usn1} Is Null)],'s_str'[`4esn`..] As `3esn` Skip (`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}) Limit 0X7 =~{_usn3} =~0x0 Create usn2=((@usn6 :#usn7:`3esn`)-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) Union All Unwind 0 In Null In 00 As usn1 Remove Allshortestpaths(((`` :@usn5:`7esn`)<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`))).@usn6"),
    octest_legacy:ct_string("Delete Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`},{`3esn`}[{`8esn`}..$7][0e0..0x0] Union All Delete $usn1 Is Null Is Null"),
    octest_legacy:ct_string("Start ``=Rel:`5esn`(@usn5={usn2}) "),
    octest_legacy:ct_string("Merge `7esn`=Allshortestpaths(((#usn8 :`6esn`))) On Match Set Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]).#usn8 =Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Ends With [#usn7 In 0e0 Is Not Null Is Not Null Where {`3esn`}[{`8esn`}..$7][0e0..0x0]] Ends With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1),Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `3esn`[{``}..$#usn8]|$_usn4[1.0..@usn6]).usn1 =$999[...e1][..{`3esn`}],#usn7+=Case When {1000} Contains 12.0 Contains @usn5 Then {`8esn`}[@usn5][0] End Contains [#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null|{`8esn`}] Contains @usn5(usn2 Ends With usn2 Ends With 1.e1) On Match Set None(`7esn` In Null =~$`8esn` =~{`4esn`} Where {_usn4}[$#usn7..]).@usn5 =(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Starts With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|{@usn6}[..1000]) Starts With Reduce(#usn8={@usn5}[$usn2..],`` In {0} Is Not Null Is Not Null|$12[..$`6esn`][..$`1esn`])"),
    octest_legacy:ct_string("Start @usn6=Node:`3esn`(usn1='s_str') ,`8esn`=Node:`2esn`(@usn6={`5esn`})Where 1e1 Contains $`` Contains 12.0"),
    octest_legacy:ct_string("Remove Reduce(#usn7={usn2}[{999}..][0Xa..],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|{_usn4} =~`7esn`).`2esn`?,Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))._usn3,Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 's_str'[`4esn`..]).usn1! Unwind 12e12[{#usn7}] As `8esn` Union Load Csv With Headers From {`2esn`} =~{@usn6} As `1esn` Fieldterminator 's_str' Match (:`6esn`) Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF"),
    octest_legacy:ct_string("Delete {usn2}[07],{`3esn`}[$`4esn`..],exists() Is Null With Distinct (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As #usn8,`6esn` =~{usn2} As ``,Reduce(`7esn`=usn1[..$usn2][..0],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn6[..0X0123456789ABCDEF][..{`6esn`}])[{`5esn`:0Xa[..07][..`2esn`]}..Any(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`)][None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])..{``:01234567 Is Not Null}] Order By $1000[01][$123456789] Ascending Union Unwind $7 Is Not Null Is Not Null As `3esn` Remove None(`` In 9e0 Is Not Null Where $_usn3[..@usn6][..{999}])._usn3"),
    octest_legacy:ct_string("Delete Filter(`` In {0} Is Not Null Is Not Null Where 123456789 In usn2)[Shortestpath(((:`4esn`$999)-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})))..] Detach Delete $@usn5[..{`8esn`}][..010],[True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null,Shortestpath(((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`))) =~(:`4esn`{`8esn`:{#usn8} Ends With $999})<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}) Union All Start `1esn`=Relationship( {1000}) Where {`8esn`}[Count(*)..] Delete $7 In 0.0,{_usn4}[$#usn7..] Remove All(`5esn` In usn2 Ends With 0.e0 Where $12 Starts With {#usn8} Starts With {999}).``,{_usn3:{#usn7}[..12e12][..{1000}],usn2:Count(*) In ``}.#usn7? Union Return Distinct $`5esn`[1e1..] As @usn5 Order By (`5esn` {@usn6:0.12 Ends With #usn8 Ends With $1000})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`) Ends With Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End Ascending,{@usn6}[..1000] Desc,Case {`2esn`} =~Count(*) =~{#usn8} When {_usn3} =~`6esn` =~$`8esn` Then `1esn` Is Null When $123456789 =~$`7esn` Then 9e12[_usn4..1.e1][{`3esn`}...e1] End[(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[:`4esn` *01{`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)..] Asc Limit $`2esn` Is Null Foreach(_usn3 In 123.654[..$`7esn`][...e0]| With  None(#usn7 In `7esn` In $`1esn` In $999 Where `5esn` Is Null) Ends With [#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`|True[#usn8..][$123456789..]] Ends With Extract(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]|123456789 In usn2) As #usn8,123.654[0xabc][1.e1] Order By {`8esn`}[@usn5][0] Ascending,None(#usn8 In $`8esn`[{``}..] Where 0x0[$123456789..$usn1])[(:``{`5esn`:12e12[12.0][{usn2}],`1esn`:$`5esn` Is Null})-[#usn7?:`8esn`|:#usn8]->({#usn8:00})] Desc,True Ends With Count(*) Ends With 1.0 Desc Skip Single(`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7) In `6esn` In {`2esn`:$@usn6[`4esn`..{999}][$``..{@usn6}],``:{usn2}[..12.0]} Where {`6esn`}[..$`8esn`] Load Csv With Headers From #usn8['s_str'][$`2esn`] As `7esn` Fieldterminator \"d_str\") Foreach(_usn3 In $1000[$`7esn`..1e1]| Load Csv From 12 In {#usn7} As `2esn`  Start usn1=Node( {`8esn`}) Where {`8esn`}[@usn5][0])"),
    octest_legacy:ct_string("Delete None(#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0])[Case 0.e0 =~0.e0 =~12.e12 When 010 Contains $`2esn` Contains 01 Then {7}[..{@usn5}] When {`1esn`} Is Null Then 010 Is Not Null Is Not Null End..],Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Foreach(_usn4 In 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7})| Match @usn6=((`4esn` $`6esn`)) Using Scan usn1:`3esn` Where `2esn` Ends With $0 Ends With {7} With  $usn2 Ends With $_usn3 Skip {_usn4}[`3esn`(Distinct {@usn6}[..$7][..{`6esn`}],01 Is Null Is Null)][{`3esn`:`1esn` In `2esn` In $@usn6}] Limit {usn1} Contains {@usn6} Contains $0 Where \"d_str\" Ends With `7esn` Ends With 12.0) With Distinct 9e12 Starts With Count(*) Starts With {`4esn`},$`6esn` Ends With 1000 Ends With False As _usn4,#usn7 Ends With $@usn5 Ends With usn1 As `7esn` Limit Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{`7esn`} =~{7})[{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}..][Shortestpath((((:#usn8:_usn3)<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})<-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(`4esn` :`8esn`))))..] Where {usn2}[{999}..][0Xa..] Union All Load Csv With Headers From Case {`2esn`} =~Count(*) =~{#usn8} When {_usn3} =~`6esn` =~$`8esn` Then `1esn` Is Null When $123456789 =~$`7esn` Then 9e12[_usn4..1.e1][{`3esn`}...e1] End[(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[:`4esn` *01{`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)..] As usn2  Load Csv With Headers From 0Xa[..07][..`2esn`] As `4esn` "),
    octest_legacy:ct_string("Remove Case $_usn3 Starts With 0.0 Starts With {#usn7} When $@usn6 Is Not Null Then True[$7..] End.@usn5! Return Distinct 0x0 Contains 0x0 Contains {`1esn`} Order By [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Asc,{`1esn`} =~{usn2} =~$`` Ascending,$`1esn` Contains {`4esn`} Contains 0.12 Desc Limit {`3esn`}[`8esn`][$#usn7] Union All Merge `8esn`=(((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[`8esn` *12..00]->({`5esn`:{usn2}[..12.0]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Union All Return {usn1} Contains 0xabc,7 Is Null Is Null,Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Using Join On #usn7 Return *,Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As usn1,1.0 =~$_usn4 Order By None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[12e12..`6esn`])[Case 1.e1[{``}] When Null =~$`8esn` =~{`4esn`} Then `3esn` In .e1 In 0X0123456789ABCDEF When usn1 Starts With Count(*) Starts With @usn6 Then $usn1 =~{_usn3} Else {7}[..{@usn5}] End..Single(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Is Null Is Null)] Ascending,$0 In 999 Descending,{`8esn`}[{_usn4}] Ascending Skip 1000 Starts With $123456789 Limit Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..]"),
    octest_legacy:ct_string("Unwind False Contains .e0 Contains usn1 As `1esn` Optional Match `5esn`=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),Allshortestpaths((((`3esn` :usn1)<-[usn1 *010..]->(usn2 :@usn6)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->(_usn4 )))) Where {usn2} Ends With $`7esn` Ends With {`1esn`} Union Merge (#usn8 :`8esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}}) On Create Set Case When `3esn` =~usn2 =~7 Then 12 In $_usn4 In $123456789 Else 0xabc[{`7esn`}..][{`8esn`}..] End.`7esn`? =`6esn`[$`1esn`..Null] Start usn1=Node:`4esn`({`6esn`}) ,@usn6=Rel:`3esn`(_usn3='s_str') Union Load Csv With Headers From {`2esn`} =~{@usn6} As `1esn` Fieldterminator 's_str' Match (:`6esn`) Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF"),
    octest_legacy:ct_string("Create Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))),usn1=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))) Load Csv From 999 In 0X0123456789ABCDEF In 9e0 As `` Fieldterminator \"d_str\" Detach Delete 0X0123456789ABCDEF[{`5esn`}..],0x0 Starts With usn1 Starts With 01,{`1esn`}[0e0..][True..] Union All Foreach(`` In Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))[..$#usn7][..Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))]| Create Unique @usn6=Shortestpath((@usn6 :`8esn`)),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}}))) Remove Extract(`` In 9e0 Is Not Null Where @usn5 Is Null Is Null|$999 Is Not Null Is Not Null).usn1 Match Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))),`7esn`=(`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`) Using Index `5esn`:`7esn`(#usn7) Union All Create `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})),@usn6=Shortestpath((_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3}))"),
    octest_legacy:ct_string("Remove {_usn3:{7} Contains {#usn8} Contains {7}}.usn2? With Distinct *,[.e0 Is Not Null Is Not Null][(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})-[_usn3{@usn5:{_usn4} Ends With {`3esn`} Ends With 07,`8esn`:12[0X7..]}]->(_usn4 )..][Case When 1.e1 Ends With $12 Ends With #usn8 Then `7esn` Starts With `4esn` Else {#usn8} Ends With `7esn` End..],Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`)))"),
    octest_legacy:ct_string("Delete 12e12[{#usn7}] Optional Match `1esn`=((({`3esn`:$_usn4 =~$12 =~`3esn`,#usn7:12.e12[2.12..]})-[`8esn`?]->(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8))),``=Shortestpath((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Using Join On `6esn`,`6esn` Using Index `6esn`:`1esn`(_usn4) Where 1e1[{`6esn`}..{1000}][07..123456789] Start `8esn`=Rel:`4esn`({``}) ,@usn5=Relationship:_usn4('s_str') Union Load Csv From {#usn8:0Xa Contains 0X7 Contains {``}} Starts With `1esn`() Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) As #usn8 Fieldterminator \"d_str\" Unwind {#usn8}[True][{`7esn`}] As #usn7 Return `1esn` Contains False Contains True As ``,{_usn4}[0X0123456789ABCDEF][{123456789}] As @usn5,0xabc Starts With 0.0 As `3esn` Skip 999 In {_usn3} In 07 Limit `1esn` Contains False Contains True"),
    octest_legacy:ct_string("Remove Allshortestpaths((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)).`6esn`!,(`1esn` :`3esn`:usn2)<-[#usn7{``:9e1[..`4esn`]}]-(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}).@usn6?,All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {999} In Count(*) In `6esn`).`1esn`! Optional Match #usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`),(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Scan #usn7:usn1 Using Index _usn4:_usn3(`4esn`) Where 0X0123456789ABCDEF =~123.654 =~{_usn4} Union All Merge `7esn`=Shortestpath(((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0}))) On Create Set `1esn` =(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null).usn2 =Count(*)[.e12..],_usn4+=$`5esn`[{usn2}..][Null..] On Match Set `8esn` =$0 Contains 2.12,`8esn`:#usn8:_usn3 Remove (usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}).@usn6,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Start `5esn`=Node:_usn3(usn2={12}) ,`6esn`=Node:_usn3(usn2={12}) Union All Foreach(#usn7 In $usn2 Ends With $@usn6 Ends With $_usn3| Return *,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) As `8esn` Order By ``[``] Asc,#usn7 Starts With 12 Starts With `4esn` Asc,12.e12 In {@usn6} Ascending Load Csv With Headers From 0.0[$`4esn`] As `7esn` Fieldterminator \"d_str\") Start @usn5=Node:`8esn`(`5esn`=\"d_str\") ,`6esn`=Rel:_usn4({usn2}) Load Csv With Headers From $0[{7}..][123.654..] As `1esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}[Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])][Reduce(#usn7={`6esn`}[..$12][..0.e0],#usn8 In $`8esn`[{``}..]|$0 Starts With True Starts With $_usn4)] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return Distinct *,`` Starts With 0.0 Starts With $`1esn` As @usn5 Limit Reduce(`4esn`={@usn6}[#usn8..][999..],#usn8 In $`8esn`[{``}..]|0X0123456789ABCDEF[{`5esn`}..]) Is Not Null Is Not Null Load Csv From {999} As @usn5 Fieldterminator \"d_str\" Detach Delete 0X0123456789ABCDEF Starts With {`2esn`} Starts With Null,[{12}[..9e1]] Contains None(usn2 In 1000 Starts With $123456789 Where {123456789} Is Null Is Null) Contains Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``) Union All Create usn1=Allshortestpaths(((`2esn` :`5esn`{``:`1esn`[``..$``]}))),(:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) With Distinct Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null,$0 In 999 As `6esn`,{`1esn`}[..\"d_str\"] Delete $@usn5 Ends With `5esn` Ends With Null Union All Delete {`5esn`:`4esn` Ends With $#usn8 Ends With {12}}[#usn8(_usn4 In False In {usn1})..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]|2.12 =~{``} =~0X7)..],9e1 Is Null Is Null"),
    octest_legacy:ct_string("Remove {`2esn`:\"d_str\" Contains `6esn` Contains $12}.#usn8?,usn2:@usn5:`7esn`"),
    octest_legacy:ct_string("With Distinct *,$`4esn`[$999..][{`3esn`}..] Order By {@usn5} In {_usn3} In 0e0 Asc Remove `5esn`(Distinct {`1esn`} Starts With 9e12 Starts With $`2esn`).usn2?,None(#usn7 In 0e0 Is Not Null Is Not Null Where $`3esn` In $#usn8 In {_usn3}).@usn5?,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null).usn1"),
    octest_legacy:ct_string("Return Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] Asc,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Desc Skip 12.0[{999}..$`5esn`][0xabc..$_usn3] With Distinct *,$@usn5 Starts With usn2 Starts With $`6esn` As @usn5,0.e0 Is Not Null Is Not Null Order By [07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Desc,0.e0[False] Descending Where {1000} Is Null Is Null Union Create Shortestpath(()) Union All Create usn1=Allshortestpaths((@usn5 :`5esn`)<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})),(({`1esn`:{_usn4} =~`7esn`})) Create #usn7=Allshortestpaths((`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})),(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[#usn8?:@usn5|:`1esn` *0Xa..{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` {usn1:{`8esn`} Is Not Null}) Detach Delete `3esn` In .e1 In 0X0123456789ABCDEF,2.12[..01234567][..{usn2}],$7 In 00"),
    octest_legacy:ct_string("Merge ((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1})) On Create Set (#usn8 {`1esn`:{_usn4} =~`7esn`})-[#usn7?:usn1|usn2 *01{``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"}).#usn7! =(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}),Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End.`5esn`? =9e12 In {`6esn`} In 0X7 Remove [12e12[12..`8esn`][0.e0..9e1],{999} Starts With {`3esn`},$_usn3[..@usn6][..{999}]].#usn8!"),
    octest_legacy:ct_string("Create Unique `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),`6esn`=Shortestpath(((`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]}))) Merge `7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}))) On Create Set `1esn`+=Reduce(#usn7=$`3esn` Ends With {_usn3} Ends With 9e1,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{usn1} Contains 0xabc) =~_usn4(Distinct 0X7 Contains usn2 Contains $`1esn`,$`5esn`[$7]) Union All Create Unique Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))),(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null}) With Distinct `2esn`[#usn8],{`1esn`:Count(*) Contains ``,`7esn`:{7} =~$usn1 =~{_usn4}} In {`4esn`},Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End =~[usn2[_usn3..{usn1}][@usn6..{`4esn`}],12 Starts With $_usn4 Starts With $`6esn`,9e0[.e12..][$`3esn`..]] =~Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*)) As `8esn` Order By 12 Ends With {999} Ends With 's_str' Asc,[{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] Asc,9e1[01..] Asc Skip {@usn6}[..$7][..{`6esn`}] Return *,9e12 =~01 =~$_usn3 As usn2,0.12[..$`4esn`][..$`7esn`] As `5esn` Limit 01234567[..0X7][..0X7] Union All Match `5esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`))) Unwind (:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)[..Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)][..{`1esn`:{_usn4}[$#usn7..],`2esn`:1.e1 Ends With {`8esn`} Ends With 00}] As @usn6 Start `7esn`=Node:``({``}) ,`6esn`=Node:`4esn`({7})"),
    octest_legacy:ct_string("Detach Delete 1e1 In $`5esn` In {7},0X7 Foreach(`6esn` In `3esn`(Distinct $`8esn`[..$usn2][..12]) Ends With None(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Ends With Extract(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]|010 Is Null Is Null)| Load Csv With Headers From 123456789[{1000}..] As @usn5 Fieldterminator \"d_str\" Unwind False Contains .e0 Contains usn1 As `1esn`) Return 1000 Contains {999} Contains 9e12,{``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6),{usn1}[...e1][..{_usn4}] Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} Ascending,`3esn`[{``}..$#usn8] Descending,$1000 Contains $12 Descending Skip 0e0 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Merge `4esn`=((:_usn3:`5esn`{usn2:_usn3 Starts With 0X7,@usn5:01 Starts With 12e12})-[`4esn`? *0{`1esn`}]-(`4esn` $`6esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})) Detach Delete 12.e12 Is Not Null Is Not Null Remove Case When 999[$_usn3..][$``..] Then {`2esn`}[`3esn`][{#usn7}] When _usn4 Contains {123456789} Contains $`5esn` Then {`3esn`}[$_usn3...e0] Else 1.e1 Starts With {`3esn`} Starts With #usn8 End.`5esn`! Union Create Unique Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})),Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) Start `5esn`=Rel:usn1(`5esn`='s_str')  Optional Match (((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]}))),`2esn`=(`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Join On `5esn` Using Join On `7esn`,`3esn`"),
    octest_legacy:ct_string("Start #usn7=Node( {1000}) ,``=Node(*)Where $999[...e1][..{`3esn`}] Union All Create Unique `7esn`=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[`3esn`?:@usn6*]-(_usn3 {_usn3:$1000[$`7esn`..1e1],`1esn`:$#usn7[..0e0][..$12]}),Allshortestpaths(((`7esn` :`2esn`:@usn5)-[?:_usn4{`2esn`:$_usn3 In $`5esn`}]-(@usn6 :#usn7:`3esn`{@usn5:00[``..usn2][01..$999],`4esn`:{`3esn`}[$_usn3...e0]})))"),
    octest_legacy:ct_string("Match `2esn`=((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})<-[`7esn` *..00]->(`7esn` {`6esn`:{#usn7} In {`6esn`},`2esn`:$12 In {`8esn`}})<-[`4esn`?:_usn3|:@usn5]-(:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})) Using Join On usn1,#usn7 Using Join On _usn3,`5esn`,#usn8"),
    octest_legacy:ct_string("Foreach(`1esn` In 01[$_usn4..][0..]| Match @usn6=((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]->(:`5esn`{``:$`6esn` Is Not Null})-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`})),Allshortestpaths((({`2esn`:9e1[{`5esn`}]}))) Using Scan ``:@usn5 Start `5esn`=Node:`7esn`(`4esn`=\"d_str\") ,``=Rel:usn1(`5esn`='s_str'))"),
    octest_legacy:ct_string("Return $`6esn` Is Not Null As `7esn`,Count(*)[.e12..] As @usn6 Order By {`8esn`} In {`6esn`} In .e12 Descending,$`1esn` Contains {`4esn`} Contains 0.12 Desc,$@usn6[`4esn`..][0X7..] Desc Skip `1esn` Starts With $`7esn` Starts With `8esn` Limit ({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]]"),
    octest_legacy:ct_string("Create Allshortestpaths((`5esn` :usn2:_usn4)-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})),(`3esn` {usn2:@usn6}) Union Optional Match #usn8=Shortestpath(((`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]}))) Using Index _usn3:_usn3(@usn5) Using Join On `` Optional Match `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Delete 2.12 Ends With {@usn5} Ends With `2esn`,[2.12 =~{``} =~0X7,{#usn7} In `` In @usn6],{@usn6} In $`5esn` In {7} With Distinct *,{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] As _usn4 Where {999}[{`1esn`}..``][{12}..$123456789]"),
    octest_legacy:ct_string("Create Unique @usn6=((:`5esn`{_usn4:#usn8[{#usn7}][12e12]})-[?:`3esn`*]-(`2esn` :#usn8:_usn3)<-[?:``{`3esn`:'s_str' Contains 0xabc,`4esn`:$999 Contains 0e0}]-(@usn5 :`3esn`:usn2{`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})) Remove Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `3esn`[{``}..$#usn8]|$_usn4[1.0..@usn6]).usn1,Filter(@usn5 In {#usn8} Contains 7 Where #usn8[_usn4]).@usn6?,[`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa|$999 Contains 0e0].`6esn` Create (({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})),Shortestpath(((:#usn8:_usn3{`3esn`:`2esn`[#usn8]})<-[{`8esn`:{_usn3} Starts With $`4esn` Starts With {_usn4},`3esn`:$_usn3[123456789][0X7]}]->(:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]}))) Union Load Csv From {@usn6:{#usn7} In `` In @usn6,_usn3:{`1esn`} In `` In {12}} Ends With [Count(*)[`8esn`..$`7esn`],#usn8[Null]] Ends With [`` In {0} Is Not Null Is Not Null Where 12.e12|9e12[`6esn`..{12}]] As usn1 Fieldterminator \"d_str\" Start _usn3=Relationship:`2esn`(usn1='s_str') ,`7esn`=Node:_usn3({`2esn`})Where $_usn3 Is Not Null Start ``=Rel:usn1(`5esn`='s_str') "),
    octest_legacy:ct_string("Unwind 2.12[12][$`7esn`] As `1esn` Foreach(#usn8 In @usn6[..0X0123456789ABCDEF][..{`6esn`}]| Optional Match (_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`8esn` *010..]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Where `5esn` Is Null Is Null Detach Delete False[{`5esn`}..{`8esn`}],Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))))"),
    octest_legacy:ct_string("Unwind 0Xa[..07][..`2esn`] As @usn6 Start usn1=Relationship( {1000})  Union With Distinct 1.e1 Starts With {`3esn`} Starts With #usn8 As `5esn` Order By 0X7 Asc,usn1 Contains 9e1 Contains 0X0123456789ABCDEF Descending Skip 12e12 Starts With $`7esn` Union All With Distinct {`3esn`} Contains 12.0 Contains {`8esn`} As usn1 Order By .e0[@usn6..] Asc,2.12 In $123456789 In 00 Descending Create `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Remove Case 12.0[12..9e1] When 0.12 In 123456789 Then 9e12[$#usn7..01234567] When 0X7 Then $`2esn` Ends With 9e0 Ends With True End.`1esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 1.0[{0}..] As `5esn` Fieldterminator \"d_str\" Merge `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} On Create Set `5esn`:`8esn` Union All Delete Single(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12}) Starts With Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 1.e1 Is Not Null) Starts With Allshortestpaths((:`7esn`:#usn8{#usn8:$7 In 00,_usn4:{123456789} Is Null Is Null})<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(usn1 :@usn5:`7esn`)),$_usn4 Contains {1000},True Is Null Remove [_usn3 In 010 Contains $`2esn` Contains 01 Where 1.e1 Is Null Is Null|1e1 Contains $`` Contains 12.0].`4esn`!,(_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)<-[`2esn`:`` *..123456789]->(@usn5 :usn1).`5esn`"),
    octest_legacy:ct_string("With  *,_usn3[Count(*)],`` Is Null Skip $#usn7 Ends With `6esn` Ends With {`3esn`} Limit {`8esn`} Is Not Null Where {`8esn`} In {`6esn`} In .e12"),
    octest_legacy:ct_string("Delete _usn3[..1000] Create ``=Shortestpath(((:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))),#usn8=Shortestpath((:usn2:_usn4)-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})) With Distinct *,{`7esn`} Ends With 999 As _usn3 Order By $@usn5 Ends With `5esn` Ends With Null Desc,$`4esn` In $@usn5 Desc Skip `7esn`[`7esn`..`5esn`] Limit (usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End Union Unwind `7esn` In $`1esn` In $999 As usn2 Union All Match Allshortestpaths((((`5esn` {#usn7:{@usn5}[123.654]})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-(:_usn3:`5esn`{`2esn`:0.12[..$`4esn`][..$`7esn`]})))) Using Index _usn4:`7esn`(usn2) Start `5esn`=Node:@usn6({1000}) Where $999[0.12][0xabc] Unwind #usn7 In 2.12 In $_usn3 As _usn3"),
    octest_legacy:ct_string("Remove [0x0 Is Null,{`6esn`} Contains {`1esn`} Contains Null].`4esn`?,Case {usn2} =~{1000} When 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3} Then `1esn`[$`4esn`..] When _usn4 Starts With $`3esn` Starts With {#usn8} Then {`7esn`} Starts With {0} Starts With {1000} Else {`5esn`} Starts With {12} Starts With 07 End._usn4! Load Csv From {_usn4:0xabc =~@usn6 =~{`2esn`}} In [{`6esn`} Contains {`1esn`} Contains Null] In [{``} Starts With 12.e12 Starts With .e12] As `2esn` Fieldterminator 's_str' Start `2esn`=Rel:`2esn`(`1esn`='s_str') Where $usn1[{`5esn`}][0Xa] Union Optional Match _usn4=Shortestpath((@usn5 :`7esn`:#usn8)<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})) Return *,`1esn` Is Null As @usn6,{`7esn`:$`6esn`} As `6esn` Skip {`4esn`}[{``}..] Limit ``[..`2esn`][..@usn5] Merge `6esn`=(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})"),
    octest_legacy:ct_string("Optional Match ``=Allshortestpaths(({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[`2esn`:`` *..123456789]->(@usn5 :usn1)) Using Scan `5esn`:`3esn` Using Index `1esn`:@usn5(usn1) Where $#usn7[..0e0][..$12] Start `7esn`=Rel:``(`6esn`={7}) ,_usn4=Relationship:_usn3(usn2={12}) Merge Shortestpath((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4}))) On Match Set `2esn`+=$`5esn` Is Null On Create Set usn2(#usn8[{#usn7}..12.e12][7..`8esn`],{7} Contains {#usn8} Contains {7}).`1esn`? =Reduce(``=$`7esn` Contains `1esn` Contains {usn1},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|0[9e12..{usn1}]) =~[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12] =~[`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]]"),
    octest_legacy:ct_string("Load Csv From ``(Distinct 's_str' Contains 01 Contains $``,`6esn` =~{usn2}) Is Not Null Is Not Null As #usn7  Remove Reduce(_usn3=Null[$`1esn`..][7..],`` In {0} Is Not Null Is Not Null|9e12[`6esn`..{12}]).`2esn`?,`5esn`({`8esn`} =~usn1 =~12.e12).#usn7? Load Csv With Headers From None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null) Is Null Is Null As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match _usn4=((`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})-[?:`8esn`|:#usn8]-(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`7esn`?:`8esn`|:#usn8 *999{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(`1esn` {`5esn`:12 In {#usn7}})) Union Unwind {usn1} Contains $`` Contains {`8esn`} As _usn3 Create (`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]}),`2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))"),
    octest_legacy:ct_string("Start @usn5=Node:@usn6(_usn3={``})  Delete 0Xa,010[00] Return (:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]}) As `1esn`,$@usn5[$`6esn`] As usn1 Order By usn2[9e12..$`3esn`] Desc Skip Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} Union Foreach(`2esn` In ``[{123456789}..True]| Remove Reduce(@usn5=$1000[`6esn`..][Count(*)..],`` In 9e0 Is Not Null|'s_str' Is Null).`4esn`,Case 0xabc[$#usn7][0Xa] When {`6esn`} Is Null Then {999} Ends With 1e1 When 123.654 Is Null Then {0}[1.e1] End.`` Return *,0X7 Ends With {0} Ends With $12 As `7esn`,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `1esn` Order By {#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5}[usn2(Distinct 1.e1[$_usn4..999])..[`5esn` In 9e1 In 0.0 In {999}|#usn8[_usn4]]][[1e1 In False,_usn3[..1000]]..Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)] Descending) Foreach(_usn4 In 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7})| Match @usn6=((`4esn` $`6esn`)) Using Scan usn1:`3esn` Where `2esn` Ends With $0 Ends With {7} With  $usn2 Ends With $_usn3 Skip {_usn4}[`3esn`(Distinct {@usn6}[..$7][..{`6esn`}],01 Is Null Is Null)][{`3esn`:`1esn` In `2esn` In $@usn6}] Limit {usn1} Contains {@usn6} Contains $0 Where \"d_str\" Ends With `7esn` Ends With 12.0)"),
    octest_legacy:ct_string("Merge `6esn`=({``:{999} Ends With 1e1})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})<-[:`3esn` *01]->(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]}) On Create Set @usn6 ={7}[..123456789][..$#usn8],_usn3+={`5esn`}[{_usn3}..False],#usn8 =$_usn4[1.0..@usn6] On Match Set `2esn` =1000 Starts With {@usn5} Starts With 123.654,#usn8 ={`4esn`}[{``}..],#usn8+=$`4esn` Contains {7} Contains 999 Start @usn6=Rel:`3esn`(_usn3='s_str') ,usn1=Relationship:``(`4esn`=\"d_str\")Where usn1 Is Null"),
    octest_legacy:ct_string("Create Unique ((`2esn` :#usn8:_usn3)) Create Unique `6esn`=(((usn2 :_usn3:`5esn`)-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`5esn` :_usn4:`4esn`)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Detach Delete {_usn4}[..'s_str'][..$`7esn`],#usn8['s_str'][$`2esn`],[`7esn` In Null =~$`8esn` =~{`4esn`} Where 0.e0 =~0.e0 =~12.e12|`6esn` In _usn4 In {_usn4}] =~(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[_usn4 *..00]-(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}) =~[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Union All With Distinct $`4esn`[00..$`8esn`][Null..$@usn5] Skip {usn2}[{999}..][0Xa..] Limit 's_str' Contains 0xabc Where {0} Is Not Null Is Not Null Remove Case 0e0 Is Null Is Null When 0[9e12..{usn1}] Then 0 Is Null Is Null End.`3esn`,[$`6esn` =~$_usn3 =~.e1].`5esn`! Create Unique (@usn5 )-[@usn6 *0{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]}]-(_usn4 {``:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}),((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)) Union With Distinct {@usn6}[..1000] Skip Shortestpath((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}})) In All(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) In Allshortestpaths(((_usn4 :``)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]}))) Where 12[{usn2}]"),
    octest_legacy:ct_string("Start `5esn`=Rel:`3esn`(@usn5={12}) Where $_usn4 Contains {1000} Foreach(`8esn` In Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999)| Return Distinct Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null),`6esn`[$`1esn`..Null],{#usn7} In {`6esn`} As usn2 Order By `7esn`[1.e1..#usn8] Asc,07 In `2esn` In {`3esn`} Desc) Union Load Csv With Headers From 1000 Starts With {@usn5} Starts With 123.654 As ``  Merge `6esn`=(:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}) With  {`6esn`} Contains 01 Contains {#usn8} As `2esn`,Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) In None(`` In `1esn` In `2esn` In $@usn6 Where {``}[12e12..`6esn`]) As #usn7,Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where `5esn` Is Null Is Null|{`5esn`} Starts With {12} Starts With 07) In Filter(_usn4 In $`` =~$1000 =~7 Where {0} Is Not Null Is Not Null) In [`2esn`[#usn8],{``}[$@usn5]] Skip {``}[...e1] Limit Case `3esn` In .e1 In 0X0123456789ABCDEF When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then $usn1[$0..Count(*)][@usn6..$12] When {`4esn`}[..0Xa] Then #usn7[`4esn`..$`8esn`] Else 0X0123456789ABCDEF[..0.12] End[Extract(@usn5 In {#usn8} Contains 7 Where 0X7)..] Where 9e12 In 0Xa In $#usn7 Union Start @usn6=Node:_usn3({7}) ,``=Relationship:`2esn`({#usn7})Where {`8esn`} =~usn1 =~12.e12 Merge `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) On Create Set `6esn` =Reduce(`6esn`=$999[0.12][0xabc],`5esn` In usn2 Ends With 0.e0|{_usn4} Starts With 01234567 Starts With $#usn7) =~`6esn`(`1esn`[$`4esn`..]) =~`3esn`(0.0,$usn1 =~{_usn3}),[01 Is Null Is Null,$`8esn`[{``}..]]._usn3! =[$@usn6 Contains {@usn6},False[{`5esn`}..{`8esn`}]][Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7})..],@usn6+=`8esn` Contains 123.654 Contains {`7esn`} On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])]"),
    octest_legacy:ct_string("Start `8esn`=Rel:_usn4(_usn4=\"d_str\") Where $`2esn`[Null][{usn2}] Return $7 In `2esn` As `4esn`,{@usn6} Ends With `5esn` Ends With 00,0X7 =~$`7esn` =~$_usn3 Order By [{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Asc,0X7 Ends With {0} Ends With $12 Descending Limit `7esn` Starts With `4esn` Union All Load Csv With Headers From {@usn5} Is Not Null Is Not Null As _usn3 Fieldterminator \"d_str\" Foreach(`8esn` In (:@usn6{@usn6:01234567[True]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[:@usn6{``:123456789 Contains $@usn6 Contains Count(*)}]-({usn1:$_usn4 Contains {1000}}) Ends With Single(`5esn` In usn2 Ends With 0.e0 Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF)| Unwind 0X7 As `8esn`)"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)) Load Csv From {``:.e1[..12e12][..Count(*)],_usn4:{7} =~$usn1 =~{_usn4}}[..Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})][..Case When `4esn`[$`4esn`] Then 1.e1 Starts With {`3esn`} Starts With #usn8 Else $`4esn` Contains {7} Contains 999 End] As #usn8 Fieldterminator 's_str' Create `5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})),`2esn`=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3)) Union All Load Csv From 123456789[7..$#usn8] As `4esn`  Union All Merge (`7esn` :_usn4:`4esn`)<-[?{`6esn`:True Ends With Count(*) Ends With 1.0}]->(@usn6 :`6esn`{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]}) On Match Set [$7 In 0.0,010 Ends With {999},$`3esn`[..{`4esn`}][..12.e12]].`6esn`! ={#usn7}[..$_usn4][..$`4esn`],`1esn`:`5esn`,_usn4(Distinct 0xabc[$#usn7][0Xa],12 Starts With $_usn4 Starts With $`6esn`).usn2 ={@usn6}[..1000] On Match Set Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 End.`4esn`! ={#usn7}[..$_usn4][..$`4esn`],Reduce(`5esn`=$#usn7[$@usn6..],`4esn` In `4esn`[\"d_str\"..][123.654..]|{7} In `1esn` In 123456789).`3esn` =2.12[True] Return {@usn5} In `6esn` In .e0 As #usn7,Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null Skip $_usn3 In $`5esn`"),
    octest_legacy:ct_string("Detach Delete $123456789[#usn7..][0X7..],{#usn8}[0X7][0X0123456789ABCDEF],{#usn7}[0.12][{usn1}] Union All Return Distinct 0Xa[..07][..`2esn`] As #usn8,{@usn6} Is Null As `7esn`,1000 Contains {999} Contains 9e12 Order By {@usn5}[..$12] Desc,{@usn6} Contains {`1esn`} Descending Union Unwind $``[$@usn6..usn1][usn1..7] As #usn7 Start `6esn`=Rel:@usn6(`5esn`={1000}) Where {_usn3} Starts With $`4esn` Starts With {_usn4} Return Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc Is Null) In {usn1:``[..`2esn`][..@usn5]} In (:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}}) Order By 1.e1[$_usn4..999] Descending,{@usn6}[..$7][..{`6esn`}] Descending,{`1esn`} =~{usn2} =~$`` Ascending Limit 123456789[{`7esn`}..][{@usn6}..]"),
    octest_legacy:ct_string("Delete usn1 Starts With Count(*) Starts With @usn6,0xabc =~@usn6 =~{`2esn`},Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) Create Shortestpath((@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[`6esn`?:`5esn` *01]->(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Remove None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]).`7esn`?,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}|{12}[..9e1])._usn3,Filter(`` In `1esn` In `2esn` In $@usn6 Where {`8esn`}[0xabc..][`4esn`..]).`1esn`? Union All Create ``=(((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]}))) Union Foreach(`1esn` In 9e0[.e12..][$`3esn`..]| Create `7esn`=Shortestpath((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[:@usn6{``:123456789 Contains $@usn6 Contains Count(*)}]-({usn1:$_usn4 Contains {1000}}))) With Distinct ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}) Order By Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] Ascending,Reduce(`4esn`=$999[...e1][..{`3esn`}],_usn4 In $`` =~$1000 =~7|False Starts With #usn7 Starts With 12e12) In Any(#usn7 In `7esn` In $`1esn` In $999 Where False Is Null Is Null) Desc,@usn5 =~$123456789 Asc Merge Shortestpath((`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)) On Create Set `5esn` =[`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)],_usn4+=12.0[12..9e1],Reduce(#usn7=0X7 In 0xabc,#usn8 In $`8esn`[{``}..]|0[9e12..{usn1}]).#usn8 =#usn7 Starts With 12 Starts With `4esn` On Create Set `2esn` =$`2esn` Ends With {1000} Ends With `7esn`,usn2+=12[1e1],_usn3+=12e12[{#usn7}]"),
    octest_legacy:ct_string("Merge `1esn`=(({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[usn2 *..7{`6esn`:{usn2} Contains 0e0 Contains 1.e1}]->(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})) On Match Set `1esn` =01 Contains @usn6 Contains {@usn5} On Create Set `8esn`+=12e12 =~{usn1} =~1.e1,`5esn`+=Null Contains \"d_str\" Contains {@usn6},`3esn`+=[`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]][@usn6(Distinct {`1esn`} In 0.e0 In $1000)..][Shortestpath((_usn4 :usn2:_usn4)-[#usn8:usn2*{`3esn`:0[9e12..{usn1}]}]-({`3esn`:0.12 In 123456789})<-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(:`8esn`{0}))..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $#usn8 Ends With #usn8 Ends With 12 As _usn3 Fieldterminator \"d_str\" Detach Delete 1.0[..`3esn`][...e0],#usn7 Starts With 12 Starts With `4esn`,{`3esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`],usn2:`1esn` Starts With $`7esn` Starts With `8esn`}[[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 010[123456789]|Null Contains \"d_str\" Contains {@usn6}]..[{`4esn`}[..0Xa]]] Return Any(_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null) Is Null Is Null As `6esn`,{#usn8}[$999..010],(:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Order By $`` Contains 123.654 Contains $#usn7 Desc,$`5esn` Contains 123456789 Contains $`1esn` Descending,$`5esn`[{usn2}..][Null..] Descending Limit {#usn7} In `` In @usn6"),
    octest_legacy:ct_string("Detach Delete True Is Null,$usn2[{_usn3}..],Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`]"),
    octest_legacy:ct_string("Detach Delete 01234567[``..],$`7esn`[..True] Foreach(`1esn` In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] In Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) In Single(`` In 9e0 Is Not Null Where {1000} Is Not Null Is Not Null)| Detach Delete $1000[$`7esn`..1e1],`2esn` Starts With `` Starts With .e12 Start `7esn`=Node:usn2({0}) ,`1esn`=Node:`4esn`({@usn6})) Return Distinct Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}],0Xa As #usn8 Union With  0X0123456789ABCDEF[{`4esn`}][$_usn4],{#usn8}[$`6esn`..12e12] As #usn8 Order By Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0xabc[$#usn7][0Xa]) Is Null Is Null Desc,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Descending,07 =~usn2 Desc Return Distinct *,1.0[$`5esn`..{``}] As _usn4,$0 In 999 As `6esn` Skip usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`} Limit All(@usn5 In {#usn8} Contains 7 Where $#usn7 =~$123456789 =~12)[Extract(_usn4 In $`` =~$1000 =~7 Where $@usn6[{`8esn`}..9e0][0..$`4esn`])..][Extract(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]|Null Contains \"d_str\" Contains {@usn6})..] Union Match Allshortestpaths(((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``))),((({`3esn`:9e0 =~.e12})-[`8esn`?]->(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`))) Foreach(#usn8 In 123.654 Is Null| Return Distinct *,{_usn4}[$`3esn`][$`3esn`],`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Skip {@usn6} In $`5esn` In {7} Limit `5esn` Is Not Null Is Not Null Unwind $`2esn` Ends With {1000} Ends With `7esn` As `1esn`)"),
    octest_legacy:ct_string("Delete {`7esn`} =~{7},`4esn` Starts With 01234567,{_usn4:{123456789} Is Null Is Null}[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{1000} Contains 12.0 Contains @usn5]] Create `7esn`=((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),`3esn`=(`4esn` :`5esn`) Union All Optional Match `2esn`=Allshortestpaths(((:#usn7:`3esn`))),``=Shortestpath(((:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))) Using Index _usn3:`4esn`(`5esn`) Where 2.12 Ends With {@usn5} Ends With `2esn` Unwind 0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn`"),
    octest_legacy:ct_string("Match Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),(((:`5esn`{`5esn`:7 In {7}})-[?:`5esn` *..7]->(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[:`4esn` *0{@usn5:{@usn6} Ends With `5esn` Ends With 00}]-(_usn3 :`1esn`))) Where $#usn8 Ends With #usn8 Ends With 12 Union All Load Csv With Headers From #usn7[$@usn6][$`8esn`] As _usn3 Fieldterminator 's_str' Create #usn8=((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})-[?:`8esn`|:#usn8]-(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[?:@usn5|:`1esn`{usn2:$12[$`3esn`][9e12]}]->(:@usn5:`7esn`{``:123.654[0xabc][1.e1]}))"),
    octest_legacy:ct_string("Unwind 0.0[$`1esn`..$`5esn`][usn2..$``] As usn1 Delete (:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)[..Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)][..{`1esn`:{_usn4}[$#usn7..],`2esn`:1.e1 Ends With {`8esn`} Ends With 00}],Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Starts With Single(#usn8 In $`8esn`[{``}..] Where 12[{usn2}]),$0[{7}..][123.654..] Union Merge `7esn`=((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) On Create Set exists(Distinct `` Starts With 0.0 Starts With $`1esn`,12.0 Contains {`3esn`}).`1esn`? =$`7esn` Ends With @usn5 Ends With .e1,(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 :`5esn`{`3esn`:{0} Ends With $@usn5 Ends With 010})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})._usn4! =`7esn`[1.e1..#usn8] On Match Set `5esn`+=0X0123456789ABCDEF[{`5esn`}..]"),
    octest_legacy:ct_string("Merge (({@usn5:`6esn` =~{usn2},`1esn`:010})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(`7esn` :`6esn`{_usn4:#usn8[{#usn7}][12e12]})-[`6esn`$`6esn`]->(:#usn8:_usn3{`3esn`:`2esn`[#usn8]})) On Match Set `2esn`+=$`5esn` Is Null Union All Optional Match usn2=(:``),Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Using Join On `5esn`,_usn4,`6esn` Using Scan _usn3:usn1 Where 123456789 Is Null Foreach(@usn6 In 12e12[@usn5..][01..]| Remove [`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4]._usn3! Remove Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`3esn`}[`1esn`]).usn2,`4esn`(False Starts With #usn7 Starts With 12e12).`5esn`!,{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}.`2esn`!) Remove Filter(@usn5 In {#usn8} Contains 7 Where #usn8[_usn4])._usn4!,[$12[$`3esn`][9e12],$`7esn`[..True]].@usn6?,Reduce(_usn3=`4esn` Contains {`7esn`},`5esn` In 9e1 In 0.0 In {999}|1e1 In #usn8).`6esn`?"),
    octest_legacy:ct_string("Unwind Single(`5esn` In usn2 Ends With 0.e0 Where $`6esn` =~$_usn3 =~.e1) Ends With Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $#usn8 Ends With #usn8 Ends With 12) Ends With count(Distinct 07 Ends With $0 Ends With \"d_str\",{`2esn`} =~Count(*) =~{#usn8}) As `3esn` Optional Match `1esn`=(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) Where {123456789}[01234567..Null] Foreach(usn1 In #usn8[Null]| Detach Delete #usn8 Ends With $usn1,`1esn`(Distinct 01[.._usn4][..$_usn4]) Is Null,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)]) Union Foreach(#usn8 In 123456789 In usn2| Match ``=Shortestpath(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))),`7esn`=Allshortestpaths((((`3esn` {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})<-[_usn3?:@usn5|:`1esn`]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})-[`2esn`?:_usn4 *01]-(`2esn` :`5esn`{@usn5:123456789 Contains $@usn6 Contains Count(*)})))) Using Scan `5esn`:@usn5 Using Join On @usn5 Where {usn2}[01] Optional Match ((({`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null}))) Using Join On _usn3,`2esn`,`6esn` Using Join On `4esn`,usn1,#usn7 Where #usn7[0.12..12.e12]) Match ``=Shortestpath(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Union With Distinct *,Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]) Skip All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1]) Where $usn1 Starts With {`5esn`} Unwind $#usn8[..01] As `2esn`"),
    octest_legacy:ct_string("Delete {@usn5}[9e1..][1e1..] Create Unique Shortestpath((@usn6 :`2esn`:@usn5)<-[@usn5?]-(:_usn3:`5esn`))"),
    octest_legacy:ct_string("Match Shortestpath(((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})))"),
    octest_legacy:ct_string("Optional Match @usn6=Shortestpath((((`2esn` :#usn8:_usn3)<-[`1esn`? *..123456789{``:_usn4 Starts With $`3esn` Starts With {#usn8}}]->(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`7esn`?{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}]->(`7esn` :#usn8:_usn3{_usn4:1.0[..`3esn`][...e0]})))) Using Index _usn4:_usn3(_usn3) Using Index _usn4:`7esn`(usn2) Optional Match Shortestpath((`4esn` )),(#usn7 :``) Using Index `7esn`:usn2(usn2) Union All Return Distinct *,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] As usn2,01[..$usn1] As `3esn` Order By 0X7 Contains #usn8 Ascending Skip $`5esn` In $_usn4 In $`2esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From #usn7[$@usn6][$`8esn`] As _usn3 Fieldterminator 's_str' Return $`6esn` Is Not Null As `7esn`,Count(*)[.e12..] As @usn6 Order By {`8esn`} In {`6esn`} In .e12 Descending,$`1esn` Contains {`4esn`} Contains 0.12 Desc,$@usn6[`4esn`..][0X7..] Desc Skip `1esn` Starts With $`7esn` Starts With `8esn` Limit ({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]] Start @usn6=Relationship:#usn8(@usn5='s_str') Where {123456789}[..010][..#usn8]"),
    octest_legacy:ct_string("Remove None(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}).`3esn`!,Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|$_usn4 Contains 0 Contains False).@usn6!,Any(`` In 9e0 Is Not Null Where $`7esn` Contains `1esn` Contains {usn1}).@usn5 Create @usn5=((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})-[#usn7?:_usn4 *12..00]-(`6esn` )) Foreach(usn1 In True[#usn8..][$123456789..]| Detach Delete {`6esn`}[..01234567][..$_usn4],None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))],{`2esn`} =~{@usn6} Unwind $`5esn`[`4esn`][{`3esn`}] As _usn4)"),
    octest_legacy:ct_string("Load Csv From {`6esn`} Is Null As usn2 Fieldterminator \"d_str\" Delete {`8esn`}[@usn5][0] Merge Allshortestpaths((`8esn` :`1esn`)<-[`4esn`:``]->(@usn6 :#usn7:`3esn`)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(:`1esn`{_usn4:_usn4 Contains {123456789} Contains $`5esn`})) Union Load Csv From $0[{#usn8}][\"d_str\"] As usn2 Fieldterminator 's_str' Merge `6esn`=(`4esn` :#usn7:`3esn`{usn1:$`4esn` Contains {7} Contains 999})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(_usn4 :usn1) On Match Set `1esn` =(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null).usn2 =Count(*)[.e12..],_usn4+=$`5esn`[{usn2}..][Null..] On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} Union Load Csv From None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]) Starts With None(usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}) Starts With {#usn7:$#usn8[@usn5..9e0][2.12...e1]} As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Detach Delete Single(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) In Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2]) In {`5esn`},12 Ends With 0X7 Ends With 12.0"),
    octest_legacy:ct_string("Start usn1=Relationship( {1000}) ,`7esn`=Node:_usn4('s_str') Create Unique `8esn`=(((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[`8esn` *12..00]->({`5esn`:{usn2}[..12.0]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Union Create ({`6esn`:True Ends With Count(*) Ends With 1.0})-[#usn7? *0xabc..]-(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]}) Union All Unwind [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] As #usn7 Merge _usn4=Shortestpath(({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) On Match Set `2esn`:``,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`? =$usn1 Starts With {`5esn`} On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`}"),
    octest_legacy:ct_string("Match ((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)),Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))) Using Join On `6esn`,`6esn` Using Index ``:`1esn`(_usn4) Union Unwind {#usn7} Contains {`8esn`} Contains usn2 As @usn6 Create Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})),Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) Union Create Unique #usn7=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`)),@usn5=Shortestpath((`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]}))"),
    octest_legacy:ct_string("With Distinct $#usn8[..01] Skip Extract(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}|0x0 =~$usn2) Ends With [False Is Null Is Null,$_usn4 Contains 0 Contains False,{#usn7}[{12}..usn1]] Ends With Case {@usn6}[#usn8..][999..] When 1000 =~{`1esn`} Then usn1 Contains 9e1 Contains 0X0123456789ABCDEF When {`8esn`}[.e12][01] Then $`6esn` Is Not Null End Limit usn1[1000][`7esn`] Detach Delete {0}[{@usn6}..$_usn3],@usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])],$123456789[#usn7..][0X7..] Union Return Distinct $`7esn` In `6esn` In 01234567,Reduce(#usn7=#usn7[$@usn6][$`8esn`],`` In {0} Is Not Null Is Not Null|1e1[{`6esn`}..{1000}][07..123456789])[{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789}..] As `6esn` Order By 00 Contains 9e0 Contains {7} Descending Load Csv With Headers From $`2esn` Ends With {1000} Ends With `7esn` As `7esn`  With Distinct *,{#usn7} Contains {`8esn`} Contains usn2 As `3esn`,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `8esn` Order By [$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null Asc Limit [$_usn4 Contains {1000},{`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0],$`4esn` In $@usn5][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..Reduce(#usn7={0} Ends With $@usn5 Ends With 010,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{999} Is Null Is Null)][{@usn5}..[`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12}|`2esn` Ends With $`6esn` Ends With `2esn`]] Where $`` Ends With 9e0 Union Create Unique `5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Load Csv With Headers From {1000} =~$7 =~{``} As `8esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $`8esn`[{``}..] As #usn7 Fieldterminator \"d_str\" Match ((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})) Where 010[``..123456789][@usn6..{12}] With Distinct All(`5esn` In 9e1 In 0.0 In {999} Where 12[{usn2}])[Case When `7esn` Starts With `4esn` Then {1000}[$_usn3...e1] When 0X0123456789ABCDEF =~123.654 =~{_usn4} Then 01[.._usn4][..$_usn4] End..Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {`8esn`}[0xabc..][`4esn`..])][Case 010[123456789] When {_usn4}[$`3esn`][$`3esn`] Then $`1esn` Contains {`4esn`} Contains 0.12 When {`1esn`}[`8esn`][{usn2}] Then 0.0[$`1esn`..$`5esn`][usn2..$``] Else 0.12 Ends With #usn8 Ends With $1000 End..(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})<-[{_usn3:2.12[True]}]->(`1esn` {`6esn`:{`8esn`}})] Skip None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}) Contains (usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}) Contains Extract(usn2 In 1000 Starts With $123456789|{7} =~$usn1 =~{_usn4})"),
    octest_legacy:ct_string("Remove {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]}.`5esn`!,Case When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 End.#usn7?,[#usn8[Null],.e0 Is Not Null Is Not Null].`5esn`?"),
    octest_legacy:ct_string("With  *,`2esn`[..$@usn5] As _usn3,.e0[$`8esn`..12e12][usn1..999] As `1esn` Order By {`4esn`:{`4esn`}[..0Xa],_usn3:@usn6} =~Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) =~`1esn`(Distinct 0.e0[1e1..9e1]) Desc Union All Foreach(`4esn` In {usn1}[`6esn`..@usn5][$usn1..0.0]| Start usn2=Node( {`6esn`})  Create Unique #usn8=({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})) Start `8esn`=Node:@usn5({999}) ,`7esn`=Relationship:`6esn`({@usn6})Where 12[`3esn`..{usn1}]"),
    octest_legacy:ct_string("Create Unique @usn6=(`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Foreach(`6esn` In ({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End]| Return Distinct {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] As `2esn` Order By #usn8[{#usn7}..12.e12][7..`8esn`] Asc,9e12 Starts With $_usn3 Asc,_usn4[01234567.._usn4][False..12] Ascending Skip Any(`5esn` In usn2 Ends With 0.e0 Where usn1[12e12..]) Is Null Is Null) Start `7esn`=Node:_usn3({`2esn`}) Where $`7esn`[..True]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 1000[{@usn5:{999} In `3esn`}] As @usn5 Fieldterminator 's_str' With  *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Order By {`2esn`} =~12e12 =~1.0 Descending,$`8esn` Ends With {`5esn`} Ends With $`4esn` Desc,`8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Descending Skip $@usn5 Contains 1.0 Where `6esn` Contains 01234567 Contains $12"),
    octest_legacy:ct_string("Optional Match (({`3esn`:0.12 In 123456789})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(`3esn` :_usn4:`4esn`)<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})) Remove Case 0.12[.e12..0][1.0..{_usn4}] When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 End.usn1 Start @usn5=Node:`5esn`(`6esn`='s_str') "),
    octest_legacy:ct_string("Load Csv From $`6esn`[$`1esn`..] As usn2 Fieldterminator 's_str' With Distinct $`4esn`[00..$`8esn`][Null..$@usn5] Skip {usn2}[{999}..][0Xa..] Limit 's_str' Contains 0xabc Where {0} Is Not Null Is Not Null Create `4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`))"),
    octest_legacy:ct_string("Load Csv From [$`8esn`[..$usn2][..12],$usn1[010..][{@usn6}..],$`5esn`[1e1..]] =~Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0X0123456789ABCDEF[{`5esn`}..]) =~Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where 0xabc[{@usn5}..][Count(*)..]) As usn1  Foreach(`7esn` In Extract(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}|{#usn8}[$`6esn`..12e12])[`1esn`(Distinct {``}[$@usn5])..Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*))]| Create Unique `7esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),Shortestpath(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]})))) Union Remove (`3esn` {@usn5:$`` Ends With 9e0})<-[?*..$`4esn`]->(`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[{_usn3:$@usn5 Contains 12e12 Contains {`6esn`}}]->(`7esn` {`6esn`:{#usn7} In {`6esn`},`2esn`:$12 In {`8esn`}}).`8esn`?,_usn4(`` Ends With $usn1 Ends With $`2esn`).`3esn`,Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0])._usn3? Start `5esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {`8esn`}) Create Unique `8esn`=((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})) Union All Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Where $#usn8[..9e1]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0x0 Ends With False Ends With 1000 As `7esn` "),
    octest_legacy:ct_string("With  {`6esn`} Contains 01 Contains {#usn8} As `2esn`,Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) In None(`` In `1esn` In `2esn` In $@usn6 Where {``}[12e12..`6esn`]) As #usn7,Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where `5esn` Is Null Is Null|{`5esn`} Starts With {12} Starts With 07) In Filter(_usn4 In $`` =~$1000 =~7 Where {0} Is Not Null Is Not Null) In [`2esn`[#usn8],{``}[$@usn5]] Skip {``}[...e1] Limit Case `3esn` In .e1 In 0X0123456789ABCDEF When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then $usn1[$0..Count(*)][@usn6..$12] When {`4esn`}[..0Xa] Then #usn7[`4esn`..$`8esn`] Else 0X0123456789ABCDEF[..0.12] End[Extract(@usn5 In {#usn8} Contains 7 Where 0X7)..] Where 9e12 In 0Xa In $#usn7 Match ((`7esn` :`6esn`{_usn4:#usn8[{#usn7}][12e12]})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})),#usn7=Allshortestpaths((`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})) Where 12[`3esn`..{usn1}] Union All Start `4esn`=Node:`6esn`(_usn3={`1esn`}) ,`2esn`=Node:usn2({usn2})Where `2esn` Ends With $0 Ends With {7} Return Distinct *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End,{@usn5} In `6esn` In .e0 Limit {@usn5:{usn1}[...e1][..{_usn4}]} Is Not Null Load Csv With Headers From {_usn3}[07..] As `1esn` Fieldterminator 's_str' Union Remove Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..]).`7esn`!"),
    octest_legacy:ct_string("Start #usn7=Rel:`3esn`(@usn5={12}) Where {@usn6}[..$7][..{`6esn`}] Unwind 12 Ends With _usn4 As `3esn` Load Csv With Headers From 1.e1 Ends With {`8esn`} Ends With 00 As `` Fieldterminator \"d_str\" Union Detach Delete 07 Starts With 123.654 Starts With 1.0,$@usn5[..{`8esn`}][..010],0e0[{@usn6}..999] With Distinct *,False Ends With #usn7 Ends With 1.e1 As _usn4 Order By {#usn7}[0.12][{usn1}] Asc,`7esn`[1.e1..#usn8] Ascending,{@usn5}[..$12] Desc Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Limit 1e1 In #usn8 Where 1e1[..1e1] Delete {@usn5} Ends With {usn1} Ends With @usn5,{`5esn`:$12[$`3esn`][9e12]}[Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null|0.0 Ends With {_usn4} Ends With $1000)] Union With Distinct *,[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,$`1esn` Contains {`4esn`} Contains 0.12 As `8esn` Order By ``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] Descending,12.0[..123456789][..{usn2}] Ascending Skip {#usn7}[0.12..][$_usn3..] Limit 1.e1 Is Not Null Where `7esn`[1.e1..#usn8] Load Csv With Headers From Reduce(``=0e0 =~{usn2},`4esn` In `4esn`[\"d_str\"..][123.654..]|1e1 In False) Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) As ``  Detach Delete $_usn3[`7esn`..][{usn1}..]"),
    octest_legacy:ct_string("Merge (#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) On Create Set `` =#usn8[{#usn7}][12e12],`4esn`+=$_usn4 =~{#usn8} =~$`5esn`,usn1 =$`1esn` Ends With $`7esn` Ends With `2esn` On Create Set Case 123.654[0xabc][1.e1] When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 Else $usn1 =~{_usn3} End.`2esn`! =12.e12[`6esn`][1.e1],#usn7 =All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] Union All Start _usn3=Node:`4esn`({@usn6}) ,`1esn`=Rel:`2esn`(`2esn`=\"d_str\") Remove [{1000}[True],$@usn6 Is Null Is Null].`5esn`?,Reduce(`8esn`=12 Ends With {0} Ends With _usn4,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|{`8esn`}[@usn5][0]).@usn5!,`4esn`(Distinct $#usn7 Ends With `6esn` Ends With {`3esn`},01[.._usn4][..$_usn4])._usn4 Union All Merge (usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]}) On Match Set usn2 ={usn2} =~{1000} On Match Set Case When {_usn3} =~`6esn` =~$`8esn` Then 1e1 In #usn8 End.usn1 =.e12[$`2esn`..][{`3esn`}..],Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]),#usn8+=$`3esn` In $#usn8 In {_usn3} Unwind _usn3 Contains $@usn5 Contains 01 As `` Load Csv From Filter(@usn5 In {#usn8} Contains 7) Ends With Reduce(`1esn`=$`` Contains 123.654 Contains $#usn7,`` In {`7esn`} Starts With {0} Starts With {1000}|{`6esn`}[07..][{@usn5}..]) Ends With [12 Ends With {0} Ends With _usn4] As #usn7 "),
    octest_legacy:ct_string("Create @usn6=Shortestpath((:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)) Load Csv With Headers From `3esn`[@usn6..][7..] As `6esn` Fieldterminator 's_str' Union Return Distinct 1000 Contains {999} Contains 9e12,{``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6),{usn1}[...e1][..{_usn4}] Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} Ascending,`3esn`[{``}..$#usn8] Descending,$1000 Contains $12 Descending Skip 0e0 Is Not Null Is Not Null Foreach(`5esn` In `7esn` In $`1esn` In $999| Detach Delete False Starts With #usn7 Starts With 12e12,'s_str'[`4esn`..],Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null)"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))) On Create Set [{`6esn`}[False..$`3esn`],0X7].`2esn` =Extract(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{@usn6} Starts With 9e1 Starts With usn1) Is Not Null Is Not Null On Match Set `4esn`+=[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6} Remove Case $_usn3 Is Not Null When $@usn5 Contains 12e12 Contains {`6esn`} Then {@usn5}[{0}..0X0123456789ABCDEF] When 9e12[_usn4..1.e1][{`3esn`}...e1] Then 0.12 In 123456789 End.`6esn`"),
    octest_legacy:ct_string("Foreach(`2esn` In $`` Contains 123.654 Contains $#usn7| Start `2esn`=Rel:`2esn`(`1esn`='s_str') ,`8esn`=Rel:_usn4(_usn4=\"d_str\")Where $`8esn`[{usn1}..] Optional Match usn1=Allshortestpaths(((`2esn` :`5esn`{``:`1esn`[``..$``]}))),`6esn`=(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}) Using Scan _usn4:_usn3 Where {999} Starts With {`3esn`})"),
    octest_legacy:ct_string("Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`]"),
    octest_legacy:ct_string("Foreach(`4esn` In None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))]| Return Distinct {usn1} Contains 0xabc,7 Is Null Is Null,Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) With  *,010 Contains $`2esn` Contains 01,$0 In 999 As `6esn`) Detach Delete {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Union All Foreach(`8esn` In $`6esn`[..``][..{@usn5}]| Create _usn3=Shortestpath((((#usn7 :`5esn`)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})))),`2esn`=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})) Unwind {#usn8}[True][{`7esn`}] As #usn7)"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath(((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0}))) On Create Set `1esn` =(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null).usn2 =Count(*)[.e12..],_usn4+=$`5esn`[{usn2}..][Null..] On Match Set `8esn` =$0 Contains 2.12,`8esn`:#usn8:_usn3 Remove (usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}).@usn6,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Start `5esn`=Node:_usn3(usn2={12}) ,`6esn`=Node:_usn3(usn2={12}) Union All Create Allshortestpaths(((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`))) Union All Return Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}],0Xa As #usn8 Start _usn4=Relationship:_usn3(usn2={12})  Create Unique #usn8=Shortestpath((`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]})),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5}))"),
    octest_legacy:ct_string("Remove [$`8esn` Ends With {`5esn`} Ends With $`4esn`,{#usn8} In $7,{``}[True][00]]._usn4?,Extract(`` In 9e0 Is Not Null|$`8esn` Ends With {`5esn`} Ends With $`4esn`).`6esn`? With  Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null) Skip All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})] Create `6esn`=({``:{999} Ends With 1e1})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})<-[:`3esn` *01]->(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]}),(((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?:`8esn`|:#usn8 *0xabc..]->(`7esn` :`5esn`{#usn7:{@usn5}[123.654]})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))) Union Load Csv With Headers From usn1[..$usn2][..0] As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge ((usn2 :usn2:_usn4{@usn6})<-[?:`7esn`|:`2esn` *0X0123456789ABCDEF..]->(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})) Create #usn8=((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})),_usn3=Shortestpath(({`8esn`:$@usn5[0.12..]})) Union Create Unique ``=Allshortestpaths(({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})),((`8esn` {#usn8:9e0 Is Not Null}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0X7 As _usn3  Optional Match Allshortestpaths((((:`7esn`:#usn8{#usn8:$7 In 00,_usn4:{123456789} Is Null Is Null})<-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]->(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})<-[@usn5?]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})))),#usn7=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})) Using Index @usn5:@usn5(`7esn`) Where 123456789 Is Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Reduce(``=07[$_usn3..][$``..],`7esn` In Null =~$`8esn` =~{`4esn`}|12e12[12.0][{usn2}]) Is Not Null Is Not Null As #usn8  Merge usn1=Shortestpath((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))) Match `3esn`=Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})),Allshortestpaths((({`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]}))) Where $``[..999][..{`1esn`}]"),
    octest_legacy:ct_string("Match `5esn`=Shortestpath((:`6esn`{_usn4:07 =~usn2})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)),(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Using Scan @usn6:#usn7 Using Join On `1esn`,`8esn` Where $_usn4 Contains {1000} Union Start `6esn`=Node:@usn5({#usn7}) ,@usn5=Node( {1000})Where `7esn`[1.e1..#usn8] Detach Delete 1.0 Contains #usn8 Contains $usn1,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999),$999 Is Not Null Is Not Null Create Unique `8esn`=Shortestpath(({@usn5:$#usn7 =~$`1esn`})) Union Create @usn5=Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})),`3esn`=(`3esn` :usn1)<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})-[`7esn`?:#usn8|`1esn` *..7]->(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]}) Return Distinct *,`5esn` In $_usn3 In 0Xa As `8esn` Order By {usn2} Is Not Null Is Not Null Asc,0e0 =~{usn2} Ascending Skip $@usn5 =~$@usn6 =~{@usn5} With Distinct 9e1 Is Null Is Null As `4esn` Order By Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 2.12 =~.e12 =~#usn8) Contains `1esn`(Distinct Count(*) Contains ``) Contains {``:{123456789} Starts With {`5esn`}} Asc"),
    octest_legacy:ct_string("Start #usn7=Rel:`3esn`(@usn5={12}) ,`7esn`=Rel:usn2({#usn8}) Unwind Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null As `2esn` Detach Delete 1000 Starts With $123456789"),
    octest_legacy:ct_string("Remove `6esn`:_usn3:`5esn` Union Unwind [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]|{#usn8}[$`6esn`..12e12]][{`8esn`:$`` Ends With 9e0,`2esn`:010 Ends With {999}}] As `1esn` Delete 7 Is Null,{`4esn`},$`2esn`[Null][{usn2}] Start #usn7=Rel:`3esn`(@usn5={12}) Where {@usn6}[..$7][..{`6esn`}] Union All Return *,{@usn5}['s_str'..]"),
    octest_legacy:ct_string("Foreach(#usn7 In {`2esn`:1e1 In $`5esn` In {7}}[`5esn`({`8esn`} =~usn1 =~12.e12)..[{999} Ends With 1e1,$7[..{`8esn`}][..{999}]]][[{@usn6} Contains 's_str',{``} Starts With 12.e12 Starts With .e12,$usn1 =~{_usn3}]..{``:{123456789} Starts With {`5esn`}}]| Start ``=Relationship:#usn7({@usn5})  Start `1esn`=Relationship( {1000}) ,`4esn`=Rel( {@usn6})Where `7esn` In $`1esn` In $999) Return 1000[..$12][..$usn2] As #usn8 Limit $@usn5[$`6esn`] Union All Start `6esn`=Rel:`3esn`(@usn5={12})  Return Distinct *,Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) Order By 9e0 Desc,2.12 In $123456789 In 00 Descending,Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End] Ascending Limit `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Union Match @usn6=Allshortestpaths((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))),((_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})) Remove usn2:`2esn`:@usn5,`5esn`($0 Starts With {`2esn`}).`8esn`?,Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}])._usn3"),
    octest_legacy:ct_string("Create Unique usn1=((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})),Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`)))) Return Distinct $usn2 Ends With $_usn3 Order By @usn5[Count(*)][07] Desc,{123456789}[01234567..Null] Desc,Extract(`5esn` In 9e1 In 0.0 In {999}|0e0[..$`2esn`][..Count(*)]) Contains #usn8(Distinct $1000 Contains $12) Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}|$`2esn`[..$#usn8]) Asc Skip 0e0 Is Null Is Null Limit 's_str' Is Null Is Null Union All Merge `7esn`=Allshortestpaths(((#usn8 :`6esn`))) On Match Set All(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]).`6esn` =0X7 Is Null On Create Set Case When {_usn3} =~`6esn` =~$`8esn` Then 1e1 In #usn8 End.usn1 =.e12[$`2esn`..][{`3esn`}..],Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]),#usn8+=$`3esn` In $#usn8 In {_usn3}"),
    octest_legacy:ct_string("Load Csv From [9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End As #usn8  Union All Create Unique Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]}))),@usn5=(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(_usn3 :_usn3:`5esn`{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}) Create Shortestpath(((:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})<-[`1esn`:`3esn`]-(`1esn` :#usn8:_usn3{`2esn`:{`1esn`} In $999 In {#usn8},_usn4:07 In `2esn` In {`3esn`}}))),(`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`}) Detach Delete {@usn5} Is Null,9e1[..`4esn`],{`5esn`} =~9e0 =~{`2esn`}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|0Xa[..`6esn`]) =~[$@usn5 Ends With 00 Ends With 12.e12,$_usn3 Starts With 0.0 Starts With {#usn7}] =~Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When 0.12 Ends With #usn8 Ends With $1000 Then {`1esn`} In 0.e0 In $1000 End As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv With Headers From usn2 Ends With 0.e0 As _usn4 Fieldterminator \"d_str\" Return *,[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,$`1esn` Contains {`4esn`} Contains 0.12 As `8esn` Order By {1000}[{@usn5}..][1.e1..] Ascending,0.e0[False] Asc,Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc Limit 1000 Contains {999} Contains 9e12 Load Csv From {``}[...e1] As `4esn` "),
    octest_legacy:ct_string("Load Csv From Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End Starts With Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As usn1 "),
    octest_legacy:ct_string("With  (_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])],{_usn4}[$`3esn`][$`3esn`] Where Null[#usn7][07] Create Unique Shortestpath((`7esn` :_usn4:`4esn`)<-[`8esn`{@usn5:$`` Ends With 9e0}]->(:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4})),Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]})))"),
    octest_legacy:ct_string("Unwind [9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End As `1esn` Remove [#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}].`8esn`?,[$7 In 0.0].`4esn`"),
    octest_legacy:ct_string("Unwind 123.654 Starts With .e1 Starts With $999 As `5esn` Unwind Reduce(@usn5=0X7 Is Null,_usn4 In $`` =~$1000 =~7|@usn6[..0X0123456789ABCDEF][..{`6esn`}]) Is Not Null Is Not Null As usn1"),
    octest_legacy:ct_string("Merge ((:#usn8:_usn3{usn1:{`8esn`}[.e12][01]})-[:usn2{#usn8:1e1[{`6esn`}..{1000}][07..123456789]}]->(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]})) On Create Set [$`5esn` Is Null]._usn4! =$`6esn` Is Not Null On Match Set Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X0123456789ABCDEF|$7 In 0.0)._usn3 =`2esn` Ends With $`6esn` Ends With `2esn`,`7esn` =Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]],`6esn`+=010 Ends With `8esn` Ends With $_usn4"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`))) Match (`8esn` :`1esn`)<-[`4esn`:``]->(@usn6 :#usn7:`3esn`)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(:`1esn`{_usn4:_usn4 Contains {123456789} Contains $`5esn`}),Shortestpath(((#usn8 {`6esn`:$usn1 Is Null Is Null}))) Using Index @usn5:@usn5(`7esn`) Using Scan `5esn`:@usn5 Return $`6esn`[$`1esn`..] As #usn7 Skip $7 In 00"),
    octest_legacy:ct_string("Merge `3esn`=Shortestpath(((:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}))) On Match Set (@usn6 :_usn3:`5esn`)-[usn1:`8esn`|:#usn8]-(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}).``? =0X0123456789ABCDEF[{`4esn`}][$_usn4],#usn8 ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],_usn3+={7}[..{@usn5}] Create ``=(((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))"),
    octest_legacy:ct_string("Unwind {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `1esn` Unwind Allshortestpaths((usn1 :usn1{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))[Case When 1.e1[$_usn4..999] Then 01234567[`1esn`] When 0Xa Then {`2esn`} =~{@usn6} End..Filter(`` In 9e0 Is Not Null Where `1esn`[$`4esn`..])] As #usn8"),
    octest_legacy:ct_string("With  *,(:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Skip `6esn` Contains 01234567 Contains $12 Load Csv From [{#usn7}[..12e12][..{1000}],123456789[{`7esn`}..][{@usn6}..],{`3esn`} Contains 12.0 Contains {`8esn`}][(`1esn` {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[``?:#usn7|:``{``:0X0123456789ABCDEF[{`5esn`}..]}]->(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})<-[? *010..{`5esn`:0Xa[_usn4..],``:$@usn6 Is Null Is Null}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})..] As `8esn`  Detach Delete Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))],9e12 In {`6esn`} In 0X7"),
    octest_legacy:ct_string("Unwind $`4esn` In $@usn5 As #usn8 Foreach(`7esn` In Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc Is Null) In {usn1:``[..`2esn`][..@usn5]} In (:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})| Load Csv With Headers From $`2esn`[..$#usn8] As `5esn` Fieldterminator \"d_str\") Merge `3esn`=(`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`) Union All Merge _usn4=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) Union Delete All(usn2 In 1000 Starts With $123456789 Where 0[9e12..{usn1}])[Case {usn1}[0..{@usn6}][True..usn2] When {@usn6}[..$7][..{`6esn`}] Then $7 Starts With $12 Starts With 12e12 Else 01234567 Starts With {`2esn`} Starts With {``} End..(usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})][@usn6(Distinct {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`])..{`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}],$usn2 Contains Allshortestpaths((({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 ))) Contains Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})) Detach Delete [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1),010 Starts With 0X7,{usn2} In 010"),
    octest_legacy:ct_string("With Distinct *,[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Order By `5esn` In $_usn3 In 0Xa Asc,{`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Desc,Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12) Is Null Is Null Ascending Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where {`1esn`} Starts With usn2)[..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``)][..Case When $@usn6 Is Null Is Null Then \"d_str\" Is Null Is Null When {usn2} =~{1000} Then `2esn` Ends With {#usn8} End] Limit $`4esn`[00..$`8esn`][Null..$@usn5] Where #usn8[..0Xa] Unwind [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As `7esn`"),
    octest_legacy:ct_string("Foreach(`3esn` In 07[.._usn4][..$@usn5]| Match ((`5esn` :usn2:_usn4)<-[@usn6?:`2esn`|_usn3{usn1:0.0 =~$usn1 =~$_usn3,`2esn`:$`7esn`[..True]}]-(`7esn` :#usn8:_usn3{`4esn`:$999[0.12][0xabc]})) Where `7esn` In $`1esn` In $999 Detach Delete 0e0[{@usn6}..999],{`7esn`:$12 In {`8esn`}}[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]..][[010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]..],None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`})) Create Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))),((_usn3 )) Union All Return 0Xa[_usn4..] As `6esn`,1000[All(`5esn` In usn2 Ends With 0.e0 Where 12[0X7..])..],Case $@usn6 Is Not Null When {``}[True][00] Then 0x0[$123456789..$usn1] When .e12[..010][..{0}] Then 01[.._usn4][..$_usn4] End[None(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999)..Reduce(`5esn`=07 =~usn2,`4esn` In `4esn`[\"d_str\"..][123.654..]|0X7 =~{_usn3} =~0x0)] As @usn5 Order By {``} Starts With 12.e12 Starts With .e12 Asc,$`7esn` Starts With _usn3 Starts With 2.12 Ascending Skip 010 Starts With 0X7 Union Unwind {`6esn`}[`6esn`..{`5esn`}] As `7esn`"),
    octest_legacy:ct_string("Foreach(`3esn` In $`5esn`[$`4esn`][$_usn4]| Unwind {_usn4}[..'s_str'][..$`7esn`] As @usn6 Create _usn4=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})),#usn7=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Union Return *,'s_str' Is Not Null Is Not Null As `6esn` Order By [`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]] Ascending,{`5esn`} In {#usn7} In $7 Desc,{`7esn`:$`6esn`} Desc Optional Match _usn3=(((usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}))) Using Scan `3esn`:`1esn` Where {@usn5}[$usn2..] Optional Match Allshortestpaths((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`?{`1esn`:{``}[...e1]}]-(_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`1esn`{usn1:0.12 In 123456789})) Using Join On usn1,#usn7"),
    octest_legacy:ct_string("Detach Delete (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)],.e0[@usn6..] With Distinct *,{_usn4}[$`3esn`][$`3esn`] Order By _usn4 Starts With $`3esn` Starts With {#usn8} Descending,Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End Starts With [`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]] Starts With Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``}) Ascending"),
    octest_legacy:ct_string("Match (#usn7 :``),(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}) Using Index `5esn`:`7esn`(@usn6) Using Join On usn1 Where {@usn5} In `6esn` In .e0 Union All Create `8esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5})) Load Csv From 0X0123456789ABCDEF =~123.654 =~{_usn4} As @usn5  Optional Match ((_usn3 :`1esn`)),_usn3=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) Using Scan `4esn`:`8esn` Where `7esn`[1.e1..#usn8]"),
    octest_legacy:ct_string("Match Shortestpath(((#usn7 :`2esn`:@usn5))),(`5esn` :`6esn`{@usn6:_usn3 Starts With 0X7,`6esn`:$`5esn` Is Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]-(:usn1$`1esn`) Using Join On usn2,`1esn` Using Scan `4esn`:@usn5 Union Match `8esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5})) Using Scan #usn7:#usn7 Using Index ``:``(`8esn`) Where {1000} Contains 12.0 Contains @usn5 Detach Delete Case `5esn`[12.0..] When $12 In $`3esn` In 07 Then $12 Starts With {#usn8} Starts With {999} End[Case When $7 In 00 Then $`` Ends With 9e0 End]"),
    octest_legacy:ct_string("Unwind `3esn` Ends With usn1 As `8esn` Load Csv From 0xabc[False..#usn7][$`1esn`..'s_str'] As usn1  Merge `4esn`=(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *0X0123456789ABCDEF..]->(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`2esn`:@usn5{usn1:1e1[..1e1]}) On Create Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Union Delete @usn5 Starts With $_usn4 Starts With 12.e12,[$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null With  Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Where `4esn`[\"d_str\"..][123.654..] Union All Remove Filter(#usn7 In `7esn` In $`1esn` In $999 Where 's_str' Contains 0xabc).#usn8! Return Distinct *,1e1[{7}..{`5esn`}] As `2esn`,123.654 =~010 =~`6esn` As `5esn` Order By {usn2}[{999}..][0Xa..] Descending,[{`6esn`}[07..][{@usn5}..]][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{usn2} Is Not Null Is Not Null]..][$``..] Asc Limit .e12 Contains 00 Contains usn2 Create #usn8=Allshortestpaths(((`5esn` :@usn5:`7esn`)-[usn1? *..0X7{`2esn`:010}]-(`3esn` :usn1)))"),
    octest_legacy:ct_string("Load Csv From Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])] As _usn4 Fieldterminator 's_str' Remove Case 123.654[0xabc][1.e1] When {`1esn`} =~{usn2} =~$`` Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] End.`1esn`,Extract(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).@usn6?"),
    octest_legacy:ct_string("Optional Match _usn4=(:#usn8:_usn3{usn1:{`8esn`}[.e12][01]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`) Using Scan #usn8:_usn4 Where 0X0123456789ABCDEF Union Delete .e12[$@usn5..] Union Load Csv With Headers From 0[9e0][1.0] As `1esn` "),
    octest_legacy:ct_string("With Distinct Case 010[123456789] When {_usn4}[$`3esn`][$`3esn`] Then $`1esn` Contains {`4esn`} Contains 0.12 When {`1esn`}[`8esn`][{usn2}] Then 0.0[$`1esn`..$`5esn`][usn2..$``] Else 0.12 Ends With #usn8 Ends With $1000 End Is Not Null As @usn5,$#usn8 As _usn4,True[$7..] Limit Case {`6esn`}[0x0..{1000}] When 1000 Starts With $123456789 Then `1esn`[True..1000][`4esn`..{`3esn`}] Else `8esn` Contains 123.654 Contains {`7esn`} End[{`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF}] Where {`5esn`} Starts With {12} Starts With 07 With Distinct *,1.0 Contains #usn8 Contains $usn1 Order By {`5esn`}[{_usn3}..False] Desc,#usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$12[..$`6esn`][..$`1esn`] Descending Limit False Starts With 's_str' Starts With $`6esn` Union All Optional Match ((`` :_usn4:`4esn`)-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)),Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))) Using Join On `6esn` Using Index _usn3:@usn6(`2esn`) Where 0.e0 Ends With Count(*) Ends With `8esn`"),
    octest_legacy:ct_string("Delete {`8esn`} In 123.654 In usn2,[`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]],{@usn5} Contains $999 Contains 0.12 Create (`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[? *010..]->(`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]}),_usn3=Allshortestpaths((`6esn` :`1esn`)<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})) Create Unique Shortestpath(((:`1esn`{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789})<-[:#usn7|:`` *..0X7]->(`8esn` )<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-({usn2:{`8esn`} Is Not Null}))) Union All Merge Shortestpath((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})) Return Distinct *,01[..$usn1],count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)] Limit $usn2 Contains 2.12"),
    octest_legacy:ct_string("Create Unique usn2=(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))),#usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))) Detach Delete 0x0[$123456789..$usn1],True Contains {12} Contains 0Xa,[`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1) Unwind (:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null As usn1"),
    octest_legacy:ct_string("Detach Delete Extract(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}|{#usn8}[$`6esn`..12e12])[`1esn`(Distinct {``}[$@usn5])..Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*))],[$`5esn` =~`7esn` =~usn2,Count(*)[`8esn`..$`7esn`]][{usn2:{`8esn`} Is Not Null}..][Allshortestpaths((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}}))..],{`1esn`}[{`2esn`}..{_usn4}][{`8esn`}..$_usn3] Foreach(`8esn` In \"d_str\"[..`6esn`][..$`8esn`]| Load Csv From 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3} As usn2  Start @usn5=Relationship:`4esn`({`6esn`}) ,`7esn`=Relationship( {1000})Where $@usn5 Is Not Null Is Not Null) Match _usn3=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`4esn`=Allshortestpaths(((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]}))) Using Index `2esn`:#usn8(`8esn`)"),
    octest_legacy:ct_string("Delete `8esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(usn2 In $999 Contains 0e0| Start `7esn`=Node:_usn3({`2esn`}) Where $`7esn`[..True]) Foreach(usn2 In {_usn4}[0X0123456789ABCDEF][{123456789}]| Create (`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})<-[`6esn`? *..1000{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True}]->(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}),``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) With  $0 In 999,0.0[$`1esn`..$`5esn`][usn2..$``] As #usn8,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..] As _usn4 Skip [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] Limit {`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7} Contains None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654) Contains Allshortestpaths((:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})) Where $12[$`3esn`][9e12]) Merge _usn4=Shortestpath(({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) On Match Set `2esn`:``,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`? =$usn1 Starts With {`5esn`} On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} Union All Return *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Limit $`8esn` Is Not Null Is Not Null Create Unique (@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}),Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))) Match `8esn`=((:`1esn`{usn1:0.12 In 123456789})-[?{@usn6:{@usn5}[...e1][..01]}]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})) Using Join On `2esn`,usn1 Union Start `8esn`=Node:usn2(\"d_str\") ,``=Relationship:#usn7({@usn5})Where 1.e1 Is Null Is Null Merge _usn3=((:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})) On Match Set `5esn`+=$usn1[{`5esn`}][0Xa] On Create Set usn2+=Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]],_usn4+=.e0 Ends With $0 Ends With ``,[`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|{`6esn`} Is Not Null Is Not Null].`` =0xabc[False..#usn7][$`1esn`..'s_str']"),
    octest_legacy:ct_string("Remove [{`7esn`} Starts With {0} Starts With {1000},0X0123456789ABCDEF =~123.654 =~{_usn4},usn2[999..][{`1esn`}..]].`3esn`?,Case {`5esn`} Starts With {12} Starts With 07 When 12e12 Starts With $`7esn` Then {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] Else $#usn8[@usn5..9e0][2.12...e1] End.#usn7? Match ((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]})) Where {`1esn`} Contains {`5esn`} Contains 0e0 Create Unique `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})) Union Return Distinct [$usn1[{``}..usn2][`3esn`..$1000]][Single(_usn4 In $`` =~$1000 =~7 Where {0} Is Not Null Is Not Null)..][Reduce(_usn3=$#usn8 Ends With $_usn4,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|#usn7[$@usn6][$`8esn`])..] As `4esn`,$`2esn`[..$#usn8] As @usn5 Skip Reduce(`4esn`=`2esn` Starts With $0 Starts With 12.0,#usn8 In $`8esn`[{``}..]|$`6esn` =~$_usn3 =~.e1)[Allshortestpaths(((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})))] Create `4esn`=((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})) Start `5esn`=Rel:`3esn`(@usn5={12}) Where $_usn4 Contains {1000} Union All Foreach(`4esn` In .e0 Contains $`6esn` Contains $usn2| Create Unique Shortestpath((@usn6 :`2esn`:@usn5)<-[@usn5?]-(:_usn3:`5esn`)))"),
    octest_legacy:ct_string("Optional Match (((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),`8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}) Using Scan _usn3:usn1 Using Join On `7esn`,``,#usn7 Where {#usn8} Ends With `7esn` With Distinct *,(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) =~Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $0 Starts With {`2esn`}|`2esn` Ends With $0 Ends With {7}) =~Case $7 Contains {1000} Contains 0X7 When {_usn4} =~`7esn` Then 0.e0 =~0.e0 =~12.e12 When @usn5[`5esn`] Then 01[$_usn4..][0..] Else 0e0 In `7esn` In $`8esn` End As _usn3,True[..{_usn4}][..0.0] As `5esn` Skip 12.0 Is Not Null Is Not Null Limit [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1][Extract(usn2 In 1000 Starts With $123456789|{7} =~$usn1 =~{_usn4})..] Where $_usn4 Is Null Is Null Start `1esn`=Relationship( {1000}) Where {`8esn`}[Count(*)..] Union All Unwind {`1esn`} Ends With 12 Ends With {1000} As usn1 Start `8esn`=Rel:_usn4(_usn4=\"d_str\") Where 12.0[12..9e1]"),
    octest_legacy:ct_string("Return Distinct *,Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] As ``,1.0[$`5esn`..{``}]"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]] As `3esn` "),
    octest_legacy:ct_string("Delete {_usn4:0Xa[..07][..`2esn`]} Ends With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where 0xabc[{@usn5}..][Count(*)..]) Unwind {`6esn`}[`6esn`..{`5esn`}] As `7esn` Load Csv With Headers From {usn2:$999 Is Not Null Is Not Null}[Shortestpath((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4}))..] As #usn7 Fieldterminator 's_str' Union All Load Csv From Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As _usn3 Fieldterminator 's_str' Union All Detach Delete {`3esn`} Contains {`7esn`} Contains $`8esn`,7 =~$`6esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) Start usn2=Node:``({0}) Where .e12 Contains 00 Contains usn2 Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Return 01 Contains _usn3 Contains .e12,{@usn5}['s_str'..] As `1esn` Order By Case When 07 Ends With `1esn` Ends With {@usn5} Then {``}[12e12..`6esn`] When usn2[_usn3..{usn1}][@usn6..{`4esn`}] Then `5esn` Is Not Null Is Not Null Else $`5esn`[$7] End[..Single(#usn8 In $`8esn`[{``}..] Where `1esn`[True..1000][`4esn`..{`3esn`}])][..[_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null]] Ascending,(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Asc,(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`) Asc Limit Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) Union Return Distinct *,{#usn8} Starts With 123456789 Starts With $`1esn` Order By {usn2} Is Not Null Is Not Null Asc,0e0 =~{usn2} Ascending Skip `1esn` In 0 In $#usn7 Limit {#usn7} In {`6esn`} With  *,`2esn`[..$@usn5] As _usn3,$0 Starts With $1000 Starts With False Order By 9e1[$`5esn`..0xabc] Descending Skip {#usn7}[12.e12]"),
    octest_legacy:ct_string("With Distinct All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})],{`2esn`} =~{@usn6} As `6esn`,{1000} In $`2esn` In $_usn3 As `6esn` Skip $`6esn` Limit {usn1} Contains {@usn6} Contains $0 Where 0X7 Contains usn2 Contains $`1esn` Create Unique `3esn`=Allshortestpaths(((`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})<-[@usn5:usn1|usn2]->(:`6esn`{_usn4:12.0 Is Not Null Is Not Null,@usn5:#usn8[..0Xa]})<-[@usn5?*..]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),Shortestpath((`1esn` {`5esn`:12 In {#usn7}}))"),
    octest_legacy:ct_string("Create `3esn`=((:@usn5:`7esn`{`7esn`})),`5esn`=Allshortestpaths((_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Match Shortestpath((@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null})) Create Shortestpath(((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(`8esn` :_usn3:`5esn`{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True})-[:_usn4{#usn7:{7} Contains {#usn8} Contains {7},`6esn`:Count(*) Starts With $7}]-(`5esn` :@usn5:`7esn`)))) Union All With  *,{#usn7}[0.12][{usn1}] As usn2 Order By [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Desc,Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] Descending,Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) Ascending Skip {@usn6}[..$7][..{`6esn`}] Limit Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where `4esn`[$`4esn`]) =~Case 12[1e1] When 07 Starts With 123.654 Starts With 1.0 Then {usn2} Ends With _usn3 When `` Ends With $usn1 Ends With $`2esn` Then 9e12 Is Null Is Null End =~(`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]-(`2esn` :`5esn`{``:`1esn`[``..$``]})<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789}) Foreach(`6esn` In $@usn5 Ends With 00 Ends With 12.e12| Optional Match `3esn`=Allshortestpaths(((`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})<-[@usn5:usn1|usn2]->(:`6esn`{_usn4:12.0 Is Not Null Is Not Null,@usn5:#usn8[..0Xa]})<-[@usn5?*..]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),Shortestpath((`1esn` {`5esn`:12 In {#usn7}})) Using Scan _usn4:#usn8 Using Index `7esn`:usn2(usn2) Where `1esn`[``..$``] Start `3esn`=Node:@usn6(``=\"d_str\") ) Union Start @usn6=Node:@usn6(@usn5={usn2}) ,_usn4=Node( {1000}) Unwind 07[.._usn4][..$@usn5] As `5esn`"),
    octest_legacy:ct_string("Return *,$@usn6[`4esn`..{999}][$``..{@usn6}] As `6esn`,$`8esn`[{``}..] As `4esn` Order By 9e12 =~01 =~$_usn3 Descending,.e12[_usn4..][{`5esn`}..] Asc Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] Limit $usn2 Contains $usn1 Create usn2=(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),`2esn`=((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})<-[`7esn` *..00]->(`7esn` {`6esn`:{#usn7} In {`6esn`},`2esn`:$12 In {`8esn`}})<-[`4esn`?:_usn3|:@usn5]-(:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})) Unwind #usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] As `2esn` Union All Merge `8esn`=(usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})-[`6esn`?]-($1000) Return Distinct 1.e1 Is Null Is Null As `1esn`,[True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null,2.12[12][$`7esn`] As `` Union All Return Distinct Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}],0Xa As #usn8 Optional Match Shortestpath(((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(`8esn` :_usn3:`5esn`{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True})-[:_usn4{#usn7:{7} Contains {#usn8} Contains {7},`6esn`:Count(*) Starts With $7}]-(`5esn` :@usn5:`7esn`)))) Using Index _usn4:`7esn`(usn2) Using Scan _usn3:usn1 Where {1000} Is Not Null Is Not Null Create Unique `7esn`=Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`)))),(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})"),
    octest_legacy:ct_string("Create `8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}),((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`})) Remove Any(@usn5 In {#usn8} Contains 7 Where 2.12 Ends With usn1 Ends With $`2esn`).``?,Case 1e1 In $`5esn` In {7} When 0X0123456789ABCDEF[...e12][..0.12] Then $usn1[$0..Count(*)][@usn6..$12] When $`1esn` Ends With $`7esn` Ends With `2esn` Then 010[123456789] Else 12 Ends With 0X7 Ends With 12.0 End.usn1!,Shortestpath(((:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]}))).`2esn` Create _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})) Union Unwind False Starts With {``} Starts With 07 As #usn7 Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6}) Start `6esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {usn2}) Union All Remove Reduce(#usn8=.e0[$`8esn`..12e12][usn1..999],`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|{usn1} Contains 0xabc).`3esn` Return *,Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Is Null Is Null As @usn5,`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Order By {`5esn`}[{_usn3}..][.e0..] Desc Skip {`1esn`}[`8esn`][{usn2}] Limit 0X7"),
    octest_legacy:ct_string("Remove None(usn2 In 1000 Starts With $123456789 Where 01 Contains _usn3 Contains .e12).`4esn` Union Merge Shortestpath((((:@usn5:`7esn`{`3esn`:0X0123456789ABCDEF Starts With {`2esn`} Starts With Null})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))) On Create Set Case When `2esn` Ends With $0 Ends With {7} Then $999[0.12][0xabc] End.`1esn`! =Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Is Null Is Null,Shortestpath(((@usn6 :#usn7:`3esn`)-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}))).`1esn`? =0.0 On Create Set usn2+=Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]],_usn4+=.e0 Ends With $0 Ends With ``,[`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|{`6esn`} Is Not Null Is Not Null].`` =0xabc[False..#usn7][$`1esn`..'s_str'] Foreach(`2esn` In 12[1e1]| Load Csv From False Contains _usn4 Contains 2.12 As _usn3 Fieldterminator 's_str' Start usn1=Relationship( {1000}) ,usn1=Node:_usn3(`3esn`={`7esn`})Where 1e1 Contains $`` Contains 12.0)"),
    octest_legacy:ct_string("With Distinct *,{`7esn`:$12 In {`8esn`}}[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]..][[010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]..],None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] As _usn4 Order By [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] Descending,{`1esn`}[{`2esn`}..{_usn4}][{`8esn`}..$_usn3] Descending,#usn8[$usn1..$`3esn`] Desc Limit {`8esn`}[0xabc..][`4esn`..] Merge Allshortestpaths((@usn5 :`6esn`)<-[`1esn`? *..0X7]->({#usn8:00})) Optional Match (`3esn` :usn1)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`7esn`?:`8esn`|:#usn8 *0Xa..]-(_usn3 {usn1:{`8esn`} Is Not Null}) Using Scan `4esn`:`7esn` Using Scan `3esn`:`1esn` Where $`8esn` Ends With {`5esn`} Ends With $`4esn` Union All Create _usn3=(`4esn` :usn1{`3esn`:12 Ends With {999} Ends With 's_str'})-[`1esn`? *0x0{#usn8:$`5esn`[$#usn7]}]->(#usn8 :_usn4:`4esn`)<-[@usn5?*..]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}),usn1=Shortestpath((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))) Foreach(#usn8 In `3esn`[..$#usn7][..{`8esn`}]| Remove Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))).`2esn` Start `7esn`=Node:``({``}) Where 12.e12[2.12..]) Return Distinct {`1esn`}[..\"d_str\"],$0[{#usn8}][\"d_str\"] As _usn4,0X0123456789ABCDEF[{`4esn`}][$_usn4] As _usn4 Order By 999 Ends With {#usn8} Descending,$#usn7[$123456789..][{0}..] Asc"),
    octest_legacy:ct_string("Foreach(_usn3 In `2esn`[999..`4esn`][{`7esn`}..`6esn`]| Create Unique `3esn`=((:@usn5:`7esn`{`7esn`})) Create Unique (`7esn` :`6esn`)-[?{`2esn`:9e1 Is Null Is Null}]-(@usn5 {`3esn`:`2esn`[#usn8]})) Merge usn2=((#usn8 :_usn4:`4esn`)<-[:`1esn`|`6esn` *0]->(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})) On Match Set {usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}._usn3? ={``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],@usn5 =$`6esn` Union All Match `3esn`=((:@usn5:`7esn`{`7esn`})) Unwind [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As `2esn` Return (#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4,{`8esn`} Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc Limit Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null Union Start _usn4=Node:_usn3({_usn3}) ,usn2=Rel:``(#usn8={`8esn`})Where 0x0 Starts With usn1 Starts With 01"),
    octest_legacy:ct_string("Return Distinct {usn1} Contains 0xabc,7 Is Null Is Null,Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) Limit Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] Union Create `6esn`=(:`3esn`:usn2{_usn4:_usn4 Starts With $`3esn` Starts With {#usn8}}),`5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Merge _usn4=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) On Create Set Case $@usn5 Ends With 00 Ends With 12.e12 When 0.12 In 123456789 Then True[$7..] When $123456789 Is Null Is Null Then $999 Contains 0e0 End.`2esn` =({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],`3esn`+=010 Is Not Null Is Not Null On Match Set (`7esn` :``{@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`` :#usn8:_usn3{#usn8:True[{1000}][1000],`6esn`:$`7esn` Is Null Is Null})<-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]}).@usn5? =0X0123456789ABCDEF,`2esn` =#usn7[`4esn`..$`8esn`],`1esn`+=0xabc =~@usn6 =~{`2esn`} Union Merge #usn7=Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))"),
    octest_legacy:ct_string("Unwind 0 In $`2esn` In {123456789} As usn2 Foreach(@usn5 In Null[$`1esn`..][7..]| Remove Shortestpath((`1esn` :`8esn`{``:{999} Ends With 1e1})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})).`8esn`? Load Csv With Headers From `1esn` Is Null As #usn8 Fieldterminator 's_str') Merge (:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) Union All Merge Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))) Start #usn8=Node:`3esn`(`1esn`={@usn5}) Where $999 Is Not Null Is Not Null Union All Create usn2=Shortestpath((((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})<-[`8esn`? *0X0123456789ABCDEF..{`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})))),_usn4=(_usn4 {`5esn`:0X0123456789ABCDEF[...e12][..0.12]})-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})"),
    octest_legacy:ct_string("Optional Match _usn3=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Using Scan @usn6:@usn5 Using Scan `4esn`:@usn5 Where {`5esn`} In {#usn7} In $7 Delete {1000}[True] Start ``=Relationship:_usn3(usn2={12}) ,`3esn`=Node:@usn5(usn1='s_str')Where `2esn` Starts With $0 Starts With 12.0 Union Load Csv With Headers From $#usn7[$@usn6..] As `3esn` "),
    octest_legacy:ct_string("Return *,Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}]) Is Not Null Is Not Null Order By 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7}) Ascending Skip {`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0,_usn3:$@usn5[$`6esn`]}[..All(`5esn` In 9e1 In 0.0 In {999} Where {7} Contains {#usn8} Contains {7})][..(_usn4 :`4esn`{_usn4:1000 =~{`1esn`}})<-[`7esn`?:#usn8|`1esn` *..7]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})] Limit @usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])] Union All Load Csv With Headers From {`1esn`} Ends With 12 Ends With {1000} As `3esn`  Union Start `3esn`=Node:`7esn`(`7esn`={`1esn`})  Remove [`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Null Contains \"d_str\" Contains {@usn6}|{123456789}[..010][..#usn8]].@usn5!,(`1esn` {#usn8:9e12 Starts With $_usn3})<-[:`4esn` *01{`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})<-[`6esn`$`6esn`]-({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}).#usn7!,_usn4:_usn4:`4esn` Foreach(@usn5 In 0x0[$123456789..$usn1]| Create Unique Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))),Allshortestpaths((({`3esn`:12 Ends With {999} Ends With 's_str'})<-[:`7esn`|:`2esn` *0xabc..]-(`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})<-[usn2? *0x0{usn2:`8esn` Contains 123.654 Contains {`7esn`},`5esn`:9e0 Is Not Null}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}}))) Create `8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}))"),
    octest_legacy:ct_string("Load Csv With Headers From 0x0 Ends With False Ends With 1000 As `4esn`  Union All Foreach(#usn8 In Reduce(_usn4={`7esn`} =~{7},`` In {`7esn`} Starts With {0} Starts With {1000}|_usn4 Is Not Null) Contains Case {#usn8} Ends With $999 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 Else 999[0.0..][$_usn4..] End Contains Case $0[{7}..][123.654..] When $#usn7 In `4esn` In 1.0 Then 's_str' Is Null Is Null When $`5esn` In $_usn4 In $`2esn` Then 2.12 =~1.0 =~{`4esn`} End| Create Unique Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))) Merge _usn3=((:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})) Unwind [$7 Is Not Null Is Not Null,9e1[{`5esn`}],$`2esn` In $999 In 0.12] =~Extract(`5esn` In usn2 Ends With 0.e0 Where 0x0 =~$usn2|`2esn` Starts With `` Starts With .e12) =~Any(`5esn` In usn2 Ends With 0.e0 Where $12 Starts With {#usn8} Starts With {999}) As `3esn`"),
    octest_legacy:ct_string("Optional Match Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` )) Using Index #usn8:usn1(`2esn`) Using Scan `1esn`:`7esn` Where 07[..0Xa] With  *,{#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `6esn`,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `8esn` Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc Skip Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} Limit `5esn` Contains 0xabc Where Count(*)[.e12..] Union Remove `7esn`.`8esn`! Delete {#usn8}[`7esn`..][_usn3..] Merge (#usn7 :``) On Match Set Reduce(#usn8=$0 In 999,`5esn` In usn2 Ends With 0.e0|#usn7 =~#usn8 =~{`6esn`}).`4esn`? =[123456789 Starts With 0e0,0.0 =~$usn1 =~$_usn3,@usn5 Starts With 0xabc][All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 01 Is Null Is Null)],`3esn` =12 Ends With {0} Ends With _usn4,_usn4+=12.0[12..9e1] Union Start `1esn`=Relationship:usn2(\"d_str\") "),
    octest_legacy:ct_string("Start `2esn`=Rel( {7}) ,`4esn`=Relationship:``({`5esn`})Where {`3esn`}[{`8esn`}..$7][0e0..0x0] Return `6esn`[$123456789..0xabc][``..$`4esn`] As @usn6 Order By 0Xa[..07][..`2esn`] Descending,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) Desc,Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Is Null Is Null Descending Skip {#usn7} In `` In @usn6 Union Optional Match `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Unwind None(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) Is Null Is Null As #usn7 Match Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))),`7esn`=(`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`) Using Index `5esn`:`7esn`(#usn7)"),
    octest_legacy:ct_string("Match Shortestpath(((#usn7 :`2esn`:@usn5))),(`5esn` :`6esn`{@usn6:_usn3 Starts With 0X7,`6esn`:$`5esn` Is Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]-(:usn1$`1esn`) Where $1000 Contains $12"),
    octest_legacy:ct_string("With  [010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End Skip 1.e1 Is Not Null Where {7} In `1esn` In 123456789 Create `6esn`=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))),Allshortestpaths((((`5esn` {#usn7:{@usn5}[123.654]})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-(:_usn3:`5esn`{`2esn`:0.12[..$`4esn`][..$`7esn`]})))) Merge Shortestpath((@usn6 :#usn7:`3esn`)<-[?:`4esn`]->(usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-(#usn7 :`2esn`:@usn5)) Union All Match (((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Using Scan #usn7:@usn6 Using Scan #usn8:`6esn` Where {1000}[$_usn3...e1] Foreach(_usn3 In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] Is Null Is Null| Delete 0x0 Is Null Is Null,False Starts With {``} Starts With 07,.e12[$@usn5..] Match Allshortestpaths(((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))),Shortestpath(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[``?:usn2 *..1000{usn1:{usn1} Is Null}]-(:`2esn`:@usn5{@usn6:12 =~0xabc,#usn7:{`7esn`} Starts With {0} Starts With {1000}})<-[?:`2esn`|_usn3]-())) Using Index `8esn`:#usn7(@usn6) Using Scan `3esn`:`1esn` Where {999}[{`7esn`}]) Merge ((usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})) On Create Set `8esn`+=`1esn` Is Not Null,``:`4esn` On Create Set usn1+=$`3esn` =~$`5esn`,Reduce(#usn7={@usn6}[#usn8..][999..],#usn7 In 0e0 Is Not Null Is Not Null|$`5esn`[`4esn`][{`3esn`}]).`8esn` =01[.._usn4][..$_usn4],@usn5+=#usn7 In 2.12 In $_usn3"),
    octest_legacy:ct_string("Unwind `7esn`(Distinct $999[0.12][0xabc]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) In [{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa] As @usn6 Load Csv From Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])] As _usn4 Fieldterminator 's_str' Start @usn6=Relationship:`1esn`(@usn5='s_str') Where {usn1}[`6esn`..@usn5][$usn1..0.0] Union All With  *,{`7esn`:{``} Starts With \"d_str\",#usn7:0.0[$`1esn`..$`5esn`][usn2..$``]} Is Null Is Null As `7esn`,usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`} As _usn4 Where {_usn4} Contains {999} Contains 2.12 Optional Match _usn4=(usn1 :usn1{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}),`8esn`=(((`2esn` :`8esn`{`3esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`],usn2:`1esn` Starts With $`7esn` Starts With `8esn`})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`))) Using Scan `5esn`:`` Where {7}[..{@usn5}]"),
    octest_legacy:ct_string("Delete 0.e0[\"d_str\"][.e12],`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End,usn1(Distinct `1esn`[``..$``]) Starts With None(#usn8 In $`8esn`[{``}..] Where #usn7 In 2.12 In $_usn3)"),
    octest_legacy:ct_string("Start `8esn`=Rel:`4esn`({``}) ,@usn5=Relationship:_usn4('s_str') Start @usn5=Node:@usn6({1000})  Foreach(usn1 In .e0[@usn6..]| Optional Match Shortestpath((`` :_usn4:`4esn`{_usn4:0Xa[..07][..`2esn`]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[_usn3?:`7esn`|:`2esn` *..00]->(:usn2:_usn4)),`4esn`=(`4esn` :`3esn`:usn2{@usn6:True[#usn8..][$123456789..]}) Using Scan `2esn`:`3esn` Where {1000} In $`2esn` In $_usn3) Union Load Csv With Headers From {#usn7}[..$_usn4][..$`4esn`] As _usn3 "),
    octest_legacy:ct_string("Merge usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})) On Match Set `4esn`:`3esn`:usn2,usn2:#usn8:_usn3 Remove `7esn`:_usn3:`5esn`,Shortestpath((((usn1 )-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}))))._usn3!,#usn7:@usn6 Optional Match @usn5=(`1esn` {`5esn`:12 In {#usn7}}),`7esn`=Shortestpath((`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})) Using Index ``:``(`8esn`) Where $#usn7 =~$`1esn` Union All Merge `2esn`=((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) On Create Set `1esn` =$7 In 0.0 On Create Set `5esn`:@usn5:`7esn`,_usn4 =1.e1[..[`` In {`7esn`} Starts With {0} Starts With {1000} Where `3esn` =~usn2 =~7|$``[$@usn6..usn1][usn1..7]]][..(`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`7esn`?*..{`1esn`:999[0.0..][$_usn4..]}]->(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}})],`4esn`.`3esn`? =$@usn6 Contains {@usn6} Foreach(usn2 In ``[``]| Remove Case When 0.12[.e12..0][1.0..{_usn4}] Then 0.0 Ends With {_usn4} Ends With $1000 When $123456789 =~00 =~0X0123456789ABCDEF Then .e1 In {`6esn`} In \"d_str\" End.`3esn` Start @usn6=Relationship:`4esn`(`2esn`={1000}) ,usn2=Node( {`6esn`})Where 9e12 Starts With Count(*) Starts With {`4esn`}) Delete 123456789 In usn2,[_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] Is Null Is Null,12[{#usn8}] Union All Merge `3esn`=Allshortestpaths((#usn8 :`6esn`)-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})) On Create Set `2esn`+=12.e12 In {@usn6} On Match Set `2esn` =1000 Starts With {@usn5} Starts With 123.654,#usn8 ={`4esn`}[{``}..],#usn8+=$`4esn` Contains {7} Contains 999 Create Unique `6esn`=((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})) Load Csv From $`3esn` In $#usn8 In {_usn3} As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With  *,01234567[``..] As `5esn` Skip 07 Starts With $#usn8 Starts With usn2 Limit {`4esn`:`2esn` Starts With $0 Starts With 12.0} Contains Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where {_usn4}[$#usn7..]) Contains {usn1:12e12[@usn5..][01..],#usn7:True[$7..]} Where {999} In Count(*) In `6esn` Union Detach Delete {_usn3}[12.e12][{`8esn`}]"),
    octest_legacy:ct_string("Optional Match #usn8=({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]}) Using Index _usn3:@usn6(`2esn`) Foreach(`8esn` In $@usn6[{`8esn`}..9e0][0..$`4esn`]| Start @usn5=Rel:`7esn`(`8esn`={`2esn`}) Where {_usn4} =~`7esn`) With Distinct All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})],{`2esn`} =~{@usn6} As `6esn`,{1000} In $`2esn` In $_usn3 As `6esn` Skip $`6esn` Limit {usn1} Contains {@usn6} Contains $0"),
    octest_legacy:ct_string("Start `4esn`=Node:`3esn`(_usn3='s_str') ,#usn8=Relationship:_usn3(`5esn`={_usn4}) Optional Match usn2=((@usn6 :#usn7:`3esn`)-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) Using Index _usn4:_usn3(`4esn`) Using Index `5esn`:`7esn`(@usn6) Return (@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1) Is Not Null Is Not Null,$`4esn`[00..$`8esn`][Null..$@usn5] Limit 0x0 Starts With usn1 Starts With 01"),
    octest_legacy:ct_string("Remove [True[#usn8..][$123456789..],{`8esn`} =~usn1 =~12.e12,@usn6[$`2esn`..]].usn2!,Extract(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`).@usn6? Match #usn7=(((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999}))) Using Scan `4esn`:`2esn` Using Index `5esn`:`7esn`(@usn6) Create Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Union All Match `3esn`=((#usn8 :`5esn`)),`3esn`=((#usn8 :`5esn`)) Using Scan #usn7:`3esn` Where 0X0123456789ABCDEF Union All Return Distinct *,{@usn6} Ends With `5esn` Ends With 00 Order By {`4esn`:{`4esn`}[..0Xa],_usn3:@usn6} =~Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) =~`1esn`(Distinct 0.e0[1e1..9e1]) Desc,07 In `2esn` In {`3esn`} Desc,$12 Desc Return *,\"d_str\"[..$usn1][..$`5esn`] Skip True Is Null Is Null Limit 07 =~usn2"),
    octest_legacy:ct_string("Return Distinct 1.0[$`5esn`..{``}] As _usn4 Limit 12[0X7..] With Distinct *,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4,{#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `` Skip 7 In {7} Limit 07 Starts With 0.e0 Starts With $`3esn`"),
    octest_legacy:ct_string("Delete 1e1 In False Return Distinct [010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End,usn2[9e12..$`3esn`] As _usn3,`5esn`['s_str'..][{0}..] Order By {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Ascending,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc,@usn5 Starts With 0xabc Asc Limit Single(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 2.12 =~.e12 =~#usn8)[..[{`7esn`} Starts With {0} Starts With {1000},{usn2}[{999}..][0Xa..]]][..Reduce(`1esn`=$`6esn` Ends With $`3esn` Ends With 07,#usn7 In `7esn` In $`1esn` In $999|`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF)] Return Distinct Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where Null Contains \"d_str\" Contains {@usn6})[[usn2 In 1000 Starts With $123456789 Where 0[9e12..{usn1}]]][Reduce(`8esn`=`5esn` Is Null,`5esn` In 9e1 In 0.0 In {999}|{usn1} Is Null)],'s_str'[`4esn`..] As `3esn` Skip (`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}) Limit 0X7 =~{_usn3} =~0x0 Union All Unwind [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] As #usn7 Merge _usn4=Shortestpath(({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) On Match Set `2esn`:``,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`? =$usn1 Starts With {`5esn`} On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`}"),
    octest_legacy:ct_string("Start @usn5=Relationship:_usn4('s_str')  Union All Merge `2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) On Create Set {`3esn`:0[9e12..{usn1}]}.@usn5! ={`8esn`} In {`6esn`} In .e12,`` =usn2 Ends With 0.e0,`1esn`+=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) On Create Set _usn3+={`3esn`} Contains 12.0 Contains {`8esn`},`6esn` =$@usn5 Contains 12e12 Contains {`6esn`},Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7|12 Ends With {0} Ends With _usn4).`6esn`! =123.654[..$`7esn`][...e0] Union Load Csv With Headers From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As @usn6  Unwind True[..{_usn4}][..0.0] As `5esn`"),
    octest_legacy:ct_string("Match `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))) Using Join On `8esn`,`3esn`,#usn7 Using Scan @usn6:#usn7 Foreach(usn2 In {`1esn`} In `` In {12}| Unwind Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) As `` Remove Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where .e12[..010][..{0}]|07 Starts With 123.654 Starts With 1.0).`8esn`!,Case When 2.12[True] Then `2esn` Ends With {#usn8} When $`8esn` Is Not Null Is Not Null Then 12[1e1] Else {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] End.`8esn`,None(#usn7 In 0e0 Is Not Null Is Not Null Where 01[..$usn1]).`7esn`?)"),
    octest_legacy:ct_string("Load Csv With Headers From 0x0 Contains 0x0 Contains {`1esn`} As `` Fieldterminator 's_str' Detach Delete $#usn7[1.0..01][0x0..123.654],$#usn8 Ends With $_usn4,999 In 0X0123456789ABCDEF In 9e0 Unwind {`8esn`} In {`6esn`} In .e12 As _usn4"),
    octest_legacy:ct_string("Create Unique `6esn`=(((usn2 :_usn3:`5esn`)-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`5esn` :_usn4:`4esn`)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Create #usn7=(((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999}))) Return Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]),$7 Is Not Null Is Not Null Skip [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))"),
    octest_legacy:ct_string("Merge _usn3=((:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})) Union All Foreach(`3esn` In {`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}))))| Unwind 0 In Null In 00 As usn1) Unwind 12 Ends With _usn4 As `3esn` Remove `6esn`:`` Union All Create Unique (#usn8 :`7esn`:#usn8) Unwind $usn2 Ends With $@usn6 Ends With $_usn3 As `1esn` Merge `7esn`=((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) On Create Set exists(Distinct `` Starts With 0.0 Starts With $`1esn`,12.0 Contains {`3esn`}).`1esn`? =$`7esn` Ends With @usn5 Ends With .e1,(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 :`5esn`{`3esn`:{0} Ends With $@usn5 Ends With 010})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})._usn4! =`7esn`[1.e1..#usn8] On Match Set `5esn`+=0X0123456789ABCDEF[{`5esn`}..]"),
    octest_legacy:ct_string("Unwind ``[..`2esn`][..@usn5] As _usn3 Create `4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`)) Union Return Distinct 0.0 Ends With {_usn4} Ends With $1000 As usn1,Case When 07 Ends With `1esn` Ends With {@usn5} Then {``}[12e12..`6esn`] When usn2[_usn3..{usn1}][@usn6..{`4esn`}] Then `5esn` Is Not Null Is Not Null Else $`5esn`[$7] End Contains Case When `6esn` Contains 01234567 Contains $12 Then {0}[{`4esn`}..] When .e1 In {`6esn`} In \"d_str\" Then 12e12['s_str'..`8esn`][usn2..$_usn4] Else $_usn4 =~$12 =~`3esn` End Contains Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {_usn4} Ends With .e1 Ends With 0x0) Order By [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] Descending,Filter(@usn5 In {#usn8} Contains 7) Ends With Reduce(`1esn`=$`` Contains 123.654 Contains $#usn7,`` In {`7esn`} Starts With {0} Starts With {1000}|{`6esn`}[07..][{@usn5}..]) Ends With [12 Ends With {0} Ends With _usn4] Asc,9e0 Is Not Null Asc Limit 0e0[{@usn6}..999] Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Using Join On #usn7 Unwind Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)] As #usn7 Union Start `2esn`=Rel:``(`6esn`={7}) ,`7esn`=Node:_usn3({`2esn`})Where True[$7..]"),
    octest_legacy:ct_string("Return Distinct *,{999} Starts With {`3esn`} As #usn8 Order By {`6esn`} Contains 01 Contains {#usn8} Descending,{#usn8:0Xa Contains 0X7 Contains {``}} Starts With `1esn`() Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Desc,1.e1 Ends With $12 Ends With #usn8 Ascending Union All Return {usn1} Contains 0xabc Optional Match usn1=Shortestpath((`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),(:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)"),
    octest_legacy:ct_string("Create `5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Unwind Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null As @usn5 Merge `2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) On Create Set {`3esn`:0[9e12..{usn1}]}.@usn5! ={`8esn`} In {`6esn`} In .e12,`` =usn2 Ends With 0.e0,`1esn`+=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) On Create Set _usn3+={`3esn`} Contains 12.0 Contains {`8esn`},`6esn` =$@usn5 Contains 12e12 Contains {`6esn`},Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7|12 Ends With {0} Ends With _usn4).`6esn`! =123.654[..$`7esn`][...e0] Union Merge (usn2 :@usn6)-[{_usn3:2.12[True]}]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}) On Create Set @usn6 =Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]],_usn3+=#usn7 =~#usn8 =~{`6esn`},usn2 =Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] On Create Set `` =Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End Starts With Case #usn7 =~#usn8 =~{`6esn`} When `6esn` Contains 01234567 Contains $12 Then #usn7 Is Null When $#usn7[$123456789..][{0}..] Then 0X7 =~{_usn3} =~0x0 End,{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}.#usn8? =0xabc[..``] Create Unique `8esn`=Shortestpath(({@usn5:$#usn7 =~$`1esn`})) Load Csv From {12}[..9e1] As @usn6 "),
    octest_legacy:ct_string("Start `6esn`=Node:#usn7({_usn3}) ,``=Rel:usn1(`5esn`='s_str')Where \"d_str\" Ends With `7esn` Ends With 12.0 Union All Merge usn1=Allshortestpaths((:#usn8:_usn3)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})) On Match Set _usn3:@usn5:`7esn` Union Unwind $`5esn`[..$_usn3][..True] As #usn8"),
    octest_legacy:ct_string("Start `5esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {`8esn`}) Union All Load Csv With Headers From 0.0[``] As usn2  With Distinct 12[{#usn8}],{`6esn`}[..$`8esn`] Order By Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999})))[Case {1000} In $`2esn` In $_usn3 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 When {0} Ends With $@usn5 Ends With 010 Then 's_str'[12..$`5esn`] Else usn1 Starts With Count(*) Starts With @usn6 End][Filter(#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null)] Asc,`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Descending Limit (:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[ *12..00{`6esn`:$7[..{`8esn`}][..{999}]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})[Reduce(_usn3=`1esn` Is Null,`` In 9e0 Is Not Null|'s_str'[12..$`5esn`])..{`2esn`:9e0 Is Not Null,@usn6:7 In {7}}]"),
    octest_legacy:ct_string("Load Csv With Headers From `5esn` Contains 0xabc As `7esn`  Union All Create usn1=Allshortestpaths((:#usn8:_usn3)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})) Remove None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}).`4esn`!,Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]).`2esn`,{_usn3:#usn7[0.12..12.e12],`7esn`:`8esn` Contains 123.654 Contains {`7esn`}}.`1esn`! Union Merge `2esn`=Allshortestpaths(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) On Create Set _usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],`3esn`+=False Starts With #usn7 Starts With 12e12 Create usn2=Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Start @usn6=Node:_usn3({_usn3}) ,`5esn`=Relationship:usn2(`6esn`=\"d_str\")"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) Starts With {#usn7:12.0 Is Not Null Is Not Null} Starts With None(@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}) As _usn4 Fieldterminator \"d_str\" Create Allshortestpaths(((`` :usn1))),((#usn8 :`7esn`:#usn8)) Match Shortestpath(((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})))"),
    octest_legacy:ct_string("Start ``=Rel:usn1(`5esn`='s_str')  Remove @usn5:_usn3:`5esn`"),
    octest_legacy:ct_string("Match #usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`),(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Index `3esn`:#usn7(usn2) Where 0 In Null In 00 Create Unique `6esn`=Shortestpath(({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})),`3esn`=((:@usn5:`7esn`{`7esn`}))"),
    octest_legacy:ct_string("Detach Delete $`6esn` =~$_usn3 =~.e1,$usn1[2.12..] Union All With Distinct *,0X0123456789ABCDEF[..0.12],{999} Ends With 1e1 As `2esn` Order By {`7esn`} =~{7} Asc,Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc Limit @usn5 =~$123456789 Merge ((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})) Union All Foreach(_usn3 In 123456789[..12.0][..0e0]| Start `6esn`=Rel:`3esn`(@usn5={12}) )"),
    octest_legacy:ct_string("Unwind {`5esn`} Starts With {12} Starts With 07 As `` Union Merge @usn6=((_usn4 :`6esn`)<-[:`7esn`|:`2esn` *0xabc..]-({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})) On Create Set `6esn`+=00[$usn1..][0xabc..] On Match Set `4esn`+=[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6} Load Csv From @usn5 Starts With $_usn4 Starts With 12.e12 As `2esn` Fieldterminator \"d_str\" Union All Merge ((@usn5 :usn1)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(`1esn` :#usn7:`3esn`)) Load Csv With Headers From False Starts With 's_str' Starts With $`6esn` As `4esn`  Create Unique `8esn`=Shortestpath(({@usn5:$#usn7 =~$`1esn`}))"),
    octest_legacy:ct_string("Foreach(@usn6 In $123456789[12e12]| Create Unique Shortestpath((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)),Allshortestpaths((((`8esn` $#usn8)-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]-(:`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[`4esn`:``]->(@usn6 :#usn7:`3esn`))))) Load Csv From 0.e0[False] As _usn3 Fieldterminator \"d_str\" Create Unique `7esn`=Shortestpath(((`5esn` {``:#usn7 =~#usn8 =~{`6esn`}})-[usn2*..]->(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})))"),
    octest_legacy:ct_string("Return Distinct *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End,{@usn5} In `6esn` In .e0 Order By {`4esn`}[$`8esn`..'s_str'] Desc Skip {#usn7}[12.e12] Limit {1000}[..$@usn6][..$`6esn`] Union All Return Distinct (:#usn8:_usn3{#usn8:_usn4 Contains {123456789} Contains $`5esn`,#usn7:$`6esn`})<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[#usn8?:`5esn`]->(`8esn` :`2esn`:@usn5)[..Single(`` In `1esn` In `2esn` In $@usn6 Where {_usn4} Contains {999} Contains 2.12)] As `6esn`,Shortestpath(((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`))) =~(:`4esn`{`8esn`:{#usn8} Ends With $999})<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}) Order By $123456789 Contains {`2esn`} Contains 's_str' Ascending,{``} Is Null Is Null Ascending,$#usn8[..#usn8][..{`5esn`}] Ascending Skip $@usn6 Contains $`6esn` Contains usn1 Return Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,[`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)],(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[_usn4 *..00]->(#usn7 {usn1:7[0e0..][$`1esn`..]}) Order By $`8esn`[..$usn2][..12] Asc Skip usn2[_usn3..{usn1}][@usn6..{`4esn`}] Limit Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))[None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {7}[{#usn7}..{`5esn`}][123.654..{@usn6}])..Shortestpath((`1esn` :`8esn`{``:{999} Ends With 1e1})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}))] Union Create Unique `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),`6esn`=Shortestpath(((`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]}))) Merge `7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}))) On Create Set `1esn`+=Reduce(#usn7=$`3esn` Ends With {_usn3} Ends With 9e1,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{usn1} Contains 0xabc) =~_usn4(Distinct 0X7 Contains usn2 Contains $`1esn`,$`5esn`[$7])"),
    octest_legacy:ct_string("Create Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})),Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) Unwind 's_str' Is Null As `4esn` Union All Optional Match (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}}),Shortestpath((@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[`6esn`?:`5esn` *01]->(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Using Index _usn4:_usn3(`4esn`) Using Index `8esn`:#usn7(@usn6) Unwind $@usn5[0.12..] As `4esn` Start `6esn`=Node:usn2(_usn4=\"d_str\") Where `7esn`[1.e1..#usn8] Union Remove All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {@usn5}[`4esn`][12.0]).usn1!,(#usn8 :`8esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2}).`1esn`?"),
    octest_legacy:ct_string("Foreach(`8esn` In 07 In `2esn` In {`3esn`}| Delete $`4esn`[00..$`8esn`][Null..$@usn5] Start _usn4=Rel:`3esn`(`1esn`={@usn5}) ,`6esn`=Rel:@usn6(`5esn`={1000})) Detach Delete 00,$123456789[#usn7..][0X7..] Remove [`4esn` In `4esn`[\"d_str\"..][123.654..] Where `1esn`[$`4esn`..]].@usn6!,All(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)._usn4,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Union Match `1esn`=(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[`3esn`?:`7esn`|:`2esn`{`6esn`:{``} Ends With 0Xa Ends With $999}]-({`1esn`:{_usn4} =~`7esn`}) Where 9e1[{usn2}..$1000] Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))) Union All Merge Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))) On Match Set _usn3+=Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] On Create Set `2esn`:``,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`? =$usn1 Starts With {`5esn`} Union All Return Distinct Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) As `4esn`,{usn2:{`6esn`}[..$`8esn`],#usn7:`8esn`[`1esn`..{7}][{_usn4}..$_usn4]}[..[@usn5 In {#usn8} Contains 7 Where $999 Contains 0e0|{``} Starts With \"d_str\"]][..(`4esn` :`1esn`)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})] As @usn5,All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End As @usn5 Limit Reduce(`4esn`=`2esn` Starts With $0 Starts With 12.0,#usn8 In $`8esn`[{``}..]|$`6esn` =~$_usn3 =~.e1)[Allshortestpaths(((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})))] Remove count(Distinct).`8esn`,usn2($12[..$`6esn`][..$`1esn`],{`8esn`} =~usn1 =~12.e12).`4esn`"),
    octest_legacy:ct_string("Unwind {usn1} Contains 0xabc As `2esn` Union Merge `7esn`=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})) On Match Set Extract(#usn7 In `7esn` In $`1esn` In $999 Where 's_str' Contains 0xabc|123456789 Is Not Null Is Not Null).@usn6 =0 Contains 010 Contains 0.12,usn2+=12[1e1] With  *,Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null Order By All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``) Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12) Starts With Case $_usn3[123456789][0X7] When `4esn` Ends With $#usn8 Ends With {12} Then usn2 Ends With 0.e0 Else $`6esn` Ends With $`3esn` Ends With 07 End Ascending,$#usn8 Descending,{`6esn`} Contains {`1esn`} Contains Null Desc Where `5esn`[12.0..] Create Unique @usn5=((:`6esn`)<-[:`3esn` *01]-(`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`))"),
    octest_legacy:ct_string("Remove Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12 Ends With _usn4|#usn8[{#usn7}][12e12]).#usn8!,`3esn`(07 Ends With `1esn` Ends With {@usn5}).`5esn` Union All Start #usn8=Node:`3esn`(`1esn`={@usn5}) ,`5esn`=Rel:usn1(`5esn`='s_str') Union All Return Distinct *,{usn1}[0..{@usn6}][True..usn2] Limit Reduce(`3esn`=$@usn6[{`8esn`}..9e0][0..$`4esn`],@usn5 In {#usn8} Contains 7|{usn1} Contains 0xabc) Ends With Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]) Ends With Case $`6esn` =~$_usn3 =~.e1 When {12} Ends With $`6esn` Ends With {#usn7} Then {`6esn`} Is Null When 9e1[$@usn5..] Then 0[9e1..][0x0..] End With Distinct {`6esn`} Contains {`1esn`} Contains Null,$#usn7[1.0..01][0x0..123.654] Order By 1.e1 Is Not Null Asc,{`5esn`}[{_usn3}..][.e0..] Desc Skip 2.12 In $123456789 In 00 Limit {1000}[{@usn5}..][1.e1..]"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath(((@usn5 :`1esn`))) Merge (({`8esn`:{7} In `1esn` In 123456789})) Union All Return Distinct *,None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e0 Is Not Null) Contains Any(`5esn` In 9e1 In 0.0 In {999} Where {1000} Contains 12.0 Contains @usn5) Contains {#usn7:$#usn8[@usn5..9e0][2.12...e1]} As #usn8 Order By 010[$_usn4..][{`3esn`}..] Ascending,{`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Descending,'s_str' Is Not Null Is Not Null Desc Union All Start usn1=Node( {`8esn`})  Delete $1000 Starts With 12.e12 Starts With {#usn7} Unwind True Ends With {`7esn`} Ends With @usn5 As `3esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0]) Is Not Null As _usn4 Fieldterminator 's_str' With Distinct Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|{#usn7} In {`6esn`}) Is Null Is Null,{#usn7} Contains {`8esn`} Contains usn2,07[$_usn3..][$``..] Order By {1000}[..$@usn6][..$`6esn`] Ascending,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))[..$#usn7][..Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))] Desc Skip Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null"),
    octest_legacy:ct_string("Create Allshortestpaths((((@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)))),`5esn`=Allshortestpaths((usn2 :`5esn`)-[:`1esn`|`6esn`{@usn6:12 =~0xabc,#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(:``{`3esn`:2.12 =~1.0 =~{`4esn`}})-[ *..0X7]->(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})) Merge (`2esn` :_usn4:`4esn`) Union All Delete {usn1}[`6esn`..@usn5][$usn1..0.0],Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]) Unwind ({`1esn`:{_usn4} =~`7esn`})<-[{_usn3:2.12[True]}]->(`1esn` {`6esn`:{`8esn`}})[(_usn4 :`6esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)][(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})] As `4esn` Foreach(usn1 In @usn6| Return #usn8[..0Xa] As usn2 Limit {@usn5} =~Null =~$`4esn`) Union Start usn1=Rel:`6esn`('s_str') ,`7esn`=Rel:`6esn`(\"d_str\") With  *,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],'s_str' Is Not Null Is Not Null Skip Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)[{@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}..][Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))..] Limit {0} Ends With $@usn5 Ends With 010"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $`7esn` Contains `1esn` Contains {usn1} As `4esn` "),
    octest_legacy:ct_string("Load Csv With Headers From $`8esn`[{``}..] As #usn7 Fieldterminator \"d_str\" Return Distinct *,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{`7esn`} =~{7})[{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}..][Shortestpath((((:#usn8:_usn3)<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})<-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(`4esn` :`8esn`))))..] As `8esn` Order By Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999})))[Case {1000} In $`2esn` In $_usn3 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 When {0} Ends With $@usn5 Ends With 010 Then 's_str'[12..$`5esn`] Else usn1 Starts With Count(*) Starts With @usn6 End][Filter(#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null)] Asc,`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Descending Skip Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) Union Merge Allshortestpaths(((usn2 :usn2:_usn4{@usn6}))) On Match Set {usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}._usn3? ={``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],@usn5 =$`6esn` Foreach(`4esn` In Case `5esn`[12.0..] When $12 In $`3esn` In 07 Then $12 Starts With {#usn8} Starts With {999} End[Case When $7 In 00 Then $`` Ends With 9e0 End]| Detach Delete $`7esn` Contains `1esn` Contains {usn1},$`8esn` Is Not Null Is Not Null,{`5esn`} Starts With $`4esn`)"),
    octest_legacy:ct_string("Start _usn3=Node:`2esn`(`5esn`=\"d_str\") Where {#usn7} In {`6esn`} Union All Match ((_usn4 :``)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})),``=(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}) Using Scan ``:@usn5 With  *,(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]})[[#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null]..] As `8esn` Order By {0} Ends With $@usn5 Ends With 010 Asc,$12 In $`3esn` In 07 Asc Skip Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7}) Starts With [{1000} In $`2esn` In $_usn3] Limit 0X7 In 0xabc Where Count(*) Starts With $7 Create Unique @usn6=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})),Allshortestpaths((((_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(_usn4 :usn1)))) Union Foreach(_usn4 In $#usn7 In `4esn` In 1.0| Remove `7esn`.`8esn`! Start `2esn`=Node:_usn3(`5esn`={_usn4}) ,#usn8=Relationship:`4esn`(`2esn`={1000})Where {123456789} Is Null Is Null)"),
    octest_legacy:ct_string("Start #usn8=Rel:`4esn`({7}) ,`6esn`=Node:_usn3(usn2={12}) Union All Load Csv With Headers From {999}[$7..] As usn2 Fieldterminator \"d_str\" Load Csv From Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))] As `5esn` Fieldterminator 's_str' Remove [True[#usn8..][$123456789..],{`8esn`} =~usn1 =~12.e12,@usn6[$`2esn`..]].usn2!,Extract(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`).@usn6?"),
    octest_legacy:ct_string("Return *,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) As `8esn` Order By ``[``] Asc,#usn7 Starts With 12 Starts With `4esn` Asc,12.e12 In {@usn6} Ascending Foreach(`4esn` In All(`` In {0} Is Not Null Is Not Null Where 999[$_usn3..][$``..]) Contains [`1esn` Starts With $`7esn` Starts With `8esn`,1.e1 Ends With $12 Ends With #usn8]| Create Shortestpath(((usn2 :@usn6))) Remove `1esn`(Distinct {999} Starts With {`3esn`},{`1esn`} Contains {`5esn`} Contains 0e0).#usn7?) Union With  (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As #usn8,`6esn` =~{usn2} As ``,Reduce(`7esn`=usn1[..$usn2][..0],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn6[..0X0123456789ABCDEF][..{`6esn`}])[{`5esn`:0Xa[..07][..`2esn`]}..Any(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`)][None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])..{``:01234567 Is Not Null}] Order By $1000[01][$123456789] Ascending Create Unique _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Unwind Case When {1000} Contains 12.0 Contains @usn5 Then {`8esn`}[@usn5][0] End Contains [#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null|{`8esn`}] Contains @usn5(usn2 Ends With usn2 Ends With 1.e1) As #usn7 Union Start ``=Relationship:_usn3(usn2={12}) ,`3esn`=Node:@usn5(usn1='s_str')Where `2esn` Starts With $0 Starts With 12.0 Remove Reduce(@usn5=$`5esn`[$#usn7],`5esn` In 9e1 In 0.0 In {999}|9e1 Is Null Is Null).`4esn`! With  9e12[`6esn`..{12}] As _usn4 Order By @usn5 Contains 7 Contains 999 Descending Skip [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Where 0e0[..$`2esn`][..Count(*)]"),
    octest_legacy:ct_string("Unwind 07 Ends With `1esn` Ends With {@usn5} As `5esn` Merge ``=(`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) On Create Set `` =Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End Starts With Case #usn7 =~#usn8 =~{`6esn`} When `6esn` Contains 01234567 Contains $12 Then #usn7 Is Null When $#usn7[$123456789..][{0}..] Then 0X7 =~{_usn3} =~0x0 End,{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}.#usn8? =0xabc[..``] Foreach(`8esn` In Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}]) Is Not Null Is Not Null| Remove `8esn`:`7esn`:#usn8 Load Csv From $usn1 =~{_usn3} As @usn5 ) Union All Foreach(usn1 In Extract(#usn8 In $`8esn`[{``}..] Where @usn6|False =~$`8esn`)[Shortestpath((:usn1$`1esn`))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa[_usn4..]|`` Starts With 0.0 Starts With $`1esn`)..]| Match Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))) Using Scan `8esn`:usn2 Return 0.e0[1e1..9e1],$`1esn`[``][\"d_str\"] Order By Reduce(usn1=`8esn` Contains 123.654 Contains {`7esn`},`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|1e1[{`6esn`}..{1000}][07..123456789])[(:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[?:usn2{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})] Desc,`5esn` In $_usn3 In 0Xa Descending)"),
    octest_legacy:ct_string("Foreach(`6esn` In Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)[Shortestpath((((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))))]| Remove [`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]].`7esn`,usn2(Distinct #usn7[0.12..12.e12]).`5esn`) Return $`6esn`[$`1esn`..] As #usn7 Skip $7 In 00 Union Create @usn5=Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})),`3esn`=(`3esn` :usn1)<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})-[`7esn`?:#usn8|`1esn` *..7]->(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]}) Return Distinct *,`5esn` In $_usn3 In 0Xa As `8esn` Order By {usn2} Is Not Null Is Not Null Asc,0e0 =~{usn2} Ascending Skip $@usn5 =~$@usn6 =~{@usn5} With Distinct 9e1 Is Null Is Null As `4esn` Order By Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 2.12 =~.e12 =~#usn8) Contains `1esn`(Distinct Count(*) Contains ``) Contains {``:{123456789} Starts With {`5esn`}} Asc"),
    octest_legacy:ct_string("Load Csv With Headers From {999}[$7..] As usn2 Fieldterminator \"d_str\" Load Csv From Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))] As `5esn` Fieldterminator 's_str' Remove [True[#usn8..][$123456789..],{`8esn`} =~usn1 =~12.e12,@usn6[$`2esn`..]].usn2!,Extract(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`).@usn6? Union All Load Csv From count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0]) Is Not Null As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With  Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Union Load Csv With Headers From {#usn7}[..$_usn4][..$`4esn`] As #usn8 Fieldterminator \"d_str\" Return (:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Starts With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|{@usn6}[..1000]) Starts With Reduce(#usn8={@usn5}[$usn2..],`` In {0} Is Not Null Is Not Null|$12[..$`6esn`][..$`1esn`]) As #usn8 Load Csv With Headers From {usn1}[`6esn`..@usn5][$usn1..0.0] As @usn6 Fieldterminator \"d_str\" Union Remove None(`7esn` In Null =~$`8esn` =~{`4esn`} Where 0.0).`4esn`?,None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}).`4esn`!,{`5esn`:{`1esn`} =~{usn2} =~$``}._usn3"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`7esn`} =~{7} As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Optional Match (#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})<-[@usn6?:`6esn`*..]-({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),((`` :@usn5:`7esn`)<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Using Index `3esn`:``(`1esn`) Create ((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})),#usn8=((:`1esn`{_usn4:_usn4 Contains {123456789} Contains $`5esn`})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]-({#usn7:{`8esn`}[Count(*)..]})) Merge Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))"),
    octest_legacy:ct_string("Create Unique `4esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),`1esn`=Allshortestpaths(((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0}))) Return Distinct `1esn` Starts With $`7esn` Starts With `8esn` As `3esn`,[010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End As usn2,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)) Contains Any(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]) Contains [010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]] Return (`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] As usn2,usn1 Is Null Order By _usn4 Starts With $`3esn` Starts With {#usn8} Descending,Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End Starts With [`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]] Starts With Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``}) Ascending Limit {_usn4}[..'s_str'][..$`7esn`] Union All Remove Reduce(`1esn`={usn2} =~{1000},#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|1.e1[{``}]).`6esn`?,`3esn`(0.0,$usn1 =~{_usn3}).``!,(`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})-[ *..0X7]->(#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]->(`2esn` {usn1:@usn5 Contains 7 Contains 999}).``! Unwind None(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) Is Null Is Null As #usn7 Union All With Distinct 0xabc In $`5esn` In @usn5 As @usn5 Skip All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] Limit {`7esn`}[$usn2] Where 9e12 In 0Xa In $#usn7 Remove `8esn`:`7esn`:#usn8"),
    octest_legacy:ct_string("Foreach(`7esn` In {#usn8}[$999..010]| Create Unique #usn7=((usn2 :usn2:_usn4{@usn6})),((usn1 :@usn5:`7esn`)) Detach Delete {0} Starts With {usn1})"),
    octest_legacy:ct_string("Load Csv With Headers From _usn4 Is Not Null As `8esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End As `8esn` Fieldterminator \"d_str\" Load Csv From {`6esn`}[..01234567][..$_usn4] As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match ((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})),Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))) Using Join On `6esn`"),
    octest_legacy:ct_string("Unwind 010 Is Not Null Is Not Null As `7esn` Union Delete {`7esn`} Ends With 999,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)) Contains Any(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]) Contains [010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]],$_usn3[123456789][0X7] Union All With  {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,7[{_usn4}..{usn2}][9e0..0X7] As _usn4 Order By {`5esn`}[{_usn3}..False] Asc,12e12['s_str'..`8esn`][usn2..$_usn4] Asc,{#usn8} In {#usn8} Asc Where $_usn3[..@usn6][..{999}]"),
    octest_legacy:ct_string("Create Unique `5esn`=((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))),(:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}) Create ``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),(((`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[#usn8:_usn3|:@usn5{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}))) Foreach(`8esn` In Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` )| Unwind 0xabc[..``] As `3esn` Delete .e12[{`3esn`}..True]) Union All Merge ((`6esn` :`4esn`)-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`)<-[_usn3?:@usn5|:`1esn`]-(:#usn8:_usn3{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})) On Create Set (`6esn` {``:$#usn8[..9e1]})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}})<-[`1esn`? *0x0{#usn8:$`5esn`[$#usn7]}]-(`` :`4esn`).`7esn`? =$`2esn` Starts With 0xabc Starts With 1000,`1esn`(Distinct 12.e12[2.12..]).#usn8? =Filter(`` In 9e0 Is Not Null Where `1esn`[$`4esn`..])[[9e0[{@usn5}..],{#usn7} In {`6esn`},1e1[{`6esn`}..{1000}][07..123456789]]][{`2esn`}] On Match Set `8esn` =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}]|$`2esn`[Null][{usn2}]),Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4).usn1! =$`3esn` In $#usn8 In {_usn3},Allshortestpaths(({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})).`8esn`? ={0} Is Not Null Is Not Null Match _usn4=Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),Shortestpath(((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[:_usn3|:@usn5 *999]-(_usn4 :`8esn`{`8esn`:`1esn` Is Null,#usn7:07[$_usn3..][$``..]}))) Using Scan usn1:#usn7 Where $`7esn` Ends With @usn5 Ends With .e1 Optional Match #usn7=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})),usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}) Using Scan `1esn`:#usn7 Using Join On _usn4,`2esn` Union All Optional Match `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) Using Scan `5esn`:usn1 Using Scan `4esn`:`8esn` Where $#usn7 =~$123456789 =~12 Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] With Distinct Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] As usn2,$#usn8 Ends With #usn8 Ends With 12 Skip `7esn` Is Null"),
    octest_legacy:ct_string("Return Distinct Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) As `5esn`,{usn2} Is Not Null Is Not Null As _usn4 Skip 12.e12[2.12..] Load Csv From (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) Contains Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where usn2[_usn3..{usn1}][@usn6..{`4esn`}]) As `4esn`  Return *,.e12[$`2esn`..][{`3esn`}..] As `3esn`,{usn1} Contains 0xabc Order By $`7esn` Starts With _usn3 Starts With 2.12 Asc Skip [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}] In Allshortestpaths(((`3esn` :usn1)-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[?$`7esn`]->(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) Union Remove Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8]).#usn7 Union Create Unique Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Create Unique `4esn`=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`7esn`=Shortestpath((@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}))"),
    octest_legacy:ct_string("Create Unique _usn4=Allshortestpaths(((:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]}))),(({`5esn`:{@usn5}[...e1][..01]}))"),
    octest_legacy:ct_string("Create `4esn`=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)}),Shortestpath(((`5esn` :`1esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(#usn8 :`5esn`))) Return *,$@usn6[`4esn`..{999}][$``..{@usn6}] As `6esn`,$`8esn`[{``}..] As `4esn` Order By 9e12 =~01 =~$_usn3 Descending,.e12[_usn4..][{`5esn`}..] Asc Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] Limit $usn2 Contains $usn1"),
    octest_legacy:ct_string("Start `2esn`=Node:#usn8({1000}) Where 0x0 =~$usn2 Union Detach Delete $@usn5[..{`8esn`}][..010],[True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null,Shortestpath(((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`))) =~(:`4esn`{`8esn`:{#usn8} Ends With $999})<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`})"),
    octest_legacy:ct_string("Create (((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Union Match #usn7=(((`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]}))),`2esn`=((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[?*..$`4esn`]->(#usn8 :#usn7:`3esn`)) Using Index usn2:`3esn`(_usn3) Where 123.654[_usn3..Null][{@usn6}..0x0] Detach Delete {`3esn`} Contains 12.0 Contains {`8esn`}"),
    octest_legacy:ct_string("Optional Match _usn3=((:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})) Where 0Xa[..07][..`2esn`] Match (`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(_usn3 ),(({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 )) Where `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF Create Allshortestpaths((:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}}))"),
    octest_legacy:ct_string("Start usn2=Node( {`6esn`}) ,`5esn`=Relationship:`8esn`(`2esn`='s_str')Where {`8esn`}[`3esn`..999] Remove {@usn5:{999} In `3esn`}.`6esn`? Union Return Distinct *,$#usn8 =~{usn1} =~1e1,{#usn7}[0.12][{usn1}] As usn2 Limit 's_str'[.e12] Unwind [{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null As `6esn` Unwind 's_str'[.e12] As `1esn` Union With  {`1esn`}[..\"d_str\"],$0[{#usn8}][\"d_str\"] As _usn4,0X0123456789ABCDEF[{`4esn`}][$_usn4] As _usn4 Order By Case When $`5esn` Is Null Then 0X0123456789ABCDEF End Is Not Null Is Not Null Desc Limit [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Match Shortestpath((`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)) Using Scan usn2:#usn7 Detach Delete Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..]"),
    octest_legacy:ct_string("Detach Delete $`7esn` Contains `1esn` Contains {usn1},$`8esn` Is Not Null Is Not Null,{`5esn`} Starts With $`4esn` Remove Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`3esn`}[`1esn`]).usn2,`4esn`(False Starts With #usn7 Starts With 12e12).`5esn`!,{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}.`2esn`! Create Unique ``=Allshortestpaths((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1))),#usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))) Union All Create `2esn`=(`2esn` {`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`{@usn5:$`` Ends With 9e0}]-(@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]}) Union All Foreach(#usn7 In 010 Is Null Is Null| Create Allshortestpaths(((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5}))),((_usn3 :``)<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))) Foreach(#usn7 In {#usn8}[`7esn`..][_usn3..]| Load Csv From {``:.e1[..12e12][..Count(*)],_usn4:{7} =~$usn1 =~{_usn4}}[..Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})][..Case When `4esn`[$`4esn`] Then 1.e1 Starts With {`3esn`} Starts With #usn8 Else $`4esn` Contains {7} Contains 999 End] As #usn8 Fieldterminator 's_str' Start #usn7=Relationship:usn2(`6esn`=\"d_str\") ) With Distinct 2.12[..01234567][..{usn2}],#usn8[..0Xa],010[123456789] Limit 12e12 Starts With 00 Starts With {0} Where {`3esn`}[{`8esn`}..$7][0e0..0x0]"),
    octest_legacy:ct_string("Load Csv From .e12 Contains 00 Contains usn2 As `` "),
    octest_legacy:ct_string("Return {_usn3} Ends With $usn2 As #usn7,@usn5 Starts With $_usn4 Starts With 12.e12 As `5esn`,usn1 In True In 12.e12 Skip {`4esn`}[$`8esn`..'s_str'] Limit $`3esn` In {`3esn`} In $`4esn` Optional Match Allshortestpaths((`7esn` :_usn4:`4esn`)<-[`8esn`{@usn5:$`` Ends With 9e0}]->(:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4})) Using Join On `6esn` Using Index `2esn`:#usn8(`8esn`) With  {`3esn`} Is Null Is Null As `3esn`,$12[$`4esn`] As `7esn`,(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]})[[#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null]..] As `8esn` Skip $`7esn` Contains 01 Contains @usn6 Limit Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}))[Extract(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999|12 Starts With $_usn4 Starts With $`6esn`)][{`8esn`:0e0 In `7esn` In $`8esn`,usn1:{usn1} Contains 0xabc}] Union Create `2esn`=((`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})) Delete Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Create Unique (`7esn` :``{@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->({usn1:12 Ends With {0} Ends With _usn4}),Allshortestpaths((`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[@usn5?:usn2 *..1000{`2esn`:9e1[{`5esn`}]}]-(:`5esn`{`5esn`:7 In {7}})-[@usn6?:`2esn`|_usn3 *0x0{`2esn`:0.12 Ends With #usn8 Ends With $1000}]-(:`5esn`{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Match ((usn1 :`3esn`:usn2)),usn2=((`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})-[_usn4?:_usn3|:@usn5]-(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)) Using Index #usn7:usn1(`4esn`) Where $`7esn` Contains `1esn` Contains {usn1} With  {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Return Distinct [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,{`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] As `5esn` Skip {usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}[Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])][Reduce(#usn7={`6esn`}[..$12][..0.e0],#usn8 In $`8esn`[{``}..]|$0 Starts With True Starts With $_usn4)] Union Merge Allshortestpaths(({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) On Create Set Any(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`).#usn8 ={999} Is Null Is Null,`1esn` =\"d_str\"[..$usn1][..$`5esn`] On Create Set _usn4+=0e0[..$`2esn`][..Count(*)] Union All Optional Match #usn7=((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)),Allshortestpaths(((({`3esn`:9e0 =~.e12})-[`8esn`?]->(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`)))) Using Join On @usn5 Unwind 0xabc[..``] As `3esn`"),
    octest_legacy:ct_string("Detach Delete {`3esn`} Contains {`7esn`} Contains $`8esn`,7 =~$`6esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) Start usn2=Node:``({0}) Where .e12 Contains 00 Contains usn2 Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Foreach(`4esn` In Case `5esn`[12.0..] When $12 In $`3esn` In 07 Then $12 Starts With {#usn8} Starts With {999} End[Case When $7 In 00 Then $`` Ends With 9e0 End]| Detach Delete $`7esn` Contains `1esn` Contains {usn1},$`8esn` Is Not Null Is Not Null,{`5esn`} Starts With $`4esn`) Remove [$123456789 Is Null Is Null,1000 Starts With $123456789,usn2 Ends With usn2 Ends With 1.e1]._usn4 Unwind 0X7 Ends With {0} Ends With $12 As `4esn` Union Detach Delete {`1esn`} In `` In {12},False In 0.0 In 0X7 Remove [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0|$`2esn`[Null][{usn2}]].`8esn`?"),
    octest_legacy:ct_string("Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}) Create Unique Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),`5esn`=((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}})) Return Distinct (@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1) Is Not Null Is Not Null,$`4esn`[00..$`8esn`][Null..$@usn5] Limit 0x0 Starts With usn1 Starts With 01"),
    octest_legacy:ct_string("Load Csv From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From (:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[ *12..00{`6esn`:$7[..{`8esn`}][..{999}]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})[Reduce(_usn3=`1esn` Is Null,`` In 9e0 Is Not Null|'s_str'[12..$`5esn`])..{`2esn`:9e0 Is Not Null,@usn6:7 In {7}}] As `4esn` "),
    octest_legacy:ct_string("Merge (usn2 :@usn6)-[{_usn3:2.12[True]}]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}) On Create Set @usn6 =Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]],_usn3+=#usn7 =~#usn8 =~{`6esn`},usn2 =Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] On Create Set `` =Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End Starts With Case #usn7 =~#usn8 =~{`6esn`} When `6esn` Contains 01234567 Contains $12 Then #usn7 Is Null When $#usn7[$123456789..][{0}..] Then 0X7 =~{_usn3} =~0x0 End,{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}.#usn8? =0xabc[..``] Create Unique `8esn`=Shortestpath(({@usn5:$#usn7 =~$`1esn`})) Load Csv From {12}[..9e1] As @usn6 "),
    octest_legacy:ct_string("With  123456789[7..$#usn8] As _usn4 Merge _usn4=Allshortestpaths((((usn2 :_usn3:`5esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})))) On Create Set Case 123.654[0xabc][1.e1] When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 Else $usn1 =~{_usn3} End.`2esn`! =12.e12[`6esn`][1.e1],#usn7 =All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] Union All Optional Match Shortestpath(((({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})<-[? *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:`1esn`{usn1:0.12 In 123456789})))),#usn8=(`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(`2esn` :usn2:_usn4) Using Scan `5esn`:``"),
    octest_legacy:ct_string("Detach Delete 9e12 In {`6esn`} In 0X7 Union All Unwind None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) As `4esn` Union All Delete $`` Ends With usn1"),
    octest_legacy:ct_string("With Distinct $@usn5,1.e1 Ends With {`8esn`} Ends With 00 As _usn4 Unwind ({`1esn`:{_usn4} =~`7esn`})<-[{_usn3:2.12[True]}]->(`1esn` {`6esn`:{`8esn`}})[(_usn4 :`6esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)][(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})] As `4esn` Union Create (((`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[#usn7:usn2 *01234567..]->(:`1esn`)<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(#usn7 :``))) Detach Delete {`6esn`}[..01234567][..$_usn4],None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))],{`2esn`} =~{@usn6} Union All With Distinct `6esn`[$123456789..0xabc][``..$`4esn`] As @usn6 Order By 0Xa[..07][..`2esn`] Descending,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) Desc,Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Is Null Is Null Descending Skip {#usn7} In `` In @usn6 Optional Match #usn8=({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]}) Using Index _usn3:@usn6(`2esn`)"),
    octest_legacy:ct_string("Remove Reduce(@usn5=$1000[`6esn`..][Count(*)..],`` In 9e0 Is Not Null|'s_str' Is Null).`4esn`,Case 0xabc[$#usn7][0Xa] When {`6esn`} Is Null Then {999} Ends With 1e1 When 123.654 Is Null Then {0}[1.e1] End.`` Union All Detach Delete #usn8 Ends With $usn1,`1esn`(Distinct 01[.._usn4][..$_usn4]) Is Null,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)] Start `6esn`=Node:#usn7({_usn3})  Union All Remove [`5esn` In usn2 Ends With 0.e0 Where 9e1[{usn2}..$1000]].`1esn`? With Distinct *,{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] As _usn4 Where {999}[{`1esn`}..``][{12}..$123456789]"),
    octest_legacy:ct_string("Foreach(`6esn` In `3esn`(Distinct $`8esn`[..$usn2][..12]) Ends With None(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Ends With Extract(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]|010 Is Null Is Null)| Load Csv With Headers From 123456789[{1000}..] As @usn5 Fieldterminator \"d_str\" Unwind False Contains .e0 Contains usn1 As `1esn`) Detach Delete 1000[01234567],[9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End Union Delete Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)],$@usn5 Ends With 00 Ends With 12.e12,[07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Delete {`5esn`:`4esn` Ends With $#usn8 Ends With {12}}[#usn8(_usn4 In False In {usn1})..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]|2.12 =~{``} =~0X7)..],9e1 Is Null Is Null With  Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12]"),
    octest_legacy:ct_string("Return [$`8esn`[..$usn2][..12],$usn1[010..][{@usn6}..],$`5esn`[1e1..]] =~Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0X0123456789ABCDEF[{`5esn`}..]) =~Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where 0xabc[{@usn5}..][Count(*)..]) As usn1,$usn2 Ends With $#usn8 As usn1,Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} As `6esn` Order By `7esn` Contains 01234567 Contains `1esn` Desc,{999} In {`4esn`} In $`1esn` Desc,usn2 Ends With usn2 Ends With 1.e1 Descending Remove [`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)].@usn5,{`2esn`:{`1esn`} In $999 In {#usn8},_usn4:07 In `2esn` In {`3esn`}}._usn4,Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7).`7esn` Start usn2=Rel:usn2(`7esn`=\"d_str\") ,usn2=Relationship:_usn3({7})Where 0x0[$123456789..$usn1]"),
    octest_legacy:ct_string("Load Csv From 9e12[0Xa][0x0] As `5esn` Fieldterminator \"d_str\" Remove [{`8esn`},9e0 Is Not Null,123456789 In usn2].`6esn`!,None(`` In 9e0 Is Not Null Where 0X0123456789ABCDEF).usn1!,{#usn7:{#usn7} In {`6esn`},`6esn`:$`8esn` Is Not Null Is Not Null}.#usn8! Create (((_usn3 {usn2:12[0X7..],`4esn`:{1000}[{@usn5}..][1.e1..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}))),`8esn`=(((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(`4esn` :@usn6{`7esn`:{#usn8} In $7})<-[_usn3?:@usn5|:`1esn`]->(:`7esn`:#usn8))) Union Load Csv With Headers From 12.e12 In _usn4 As `7esn` Fieldterminator \"d_str\" Remove Case $#usn7 Ends With `6esn` Ends With {`3esn`} When {0} Is Not Null Is Not Null Then 1e1[{7}..{`5esn`}] When $#usn8[@usn5..9e0][2.12...e1] Then 999[0.0..][$_usn4..] Else 12e12[12.0][{usn2}] End.`5esn`,Reduce(_usn3=$7 Starts With $12 Starts With 12e12,@usn5 In {#usn8} Contains 7|$1000[`6esn`..][Count(*)..]).#usn7! With  $`` Ends With usn1 As `3esn`,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)],Null Ends With {`5esn`} As `4esn` Order By Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]] Asc,1.0 Is Not Null Is Not Null Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`}) Where 07[{12}..] Union All Unwind {`8esn`} As `4esn` Merge ((#usn8 :`7esn`:#usn8)) On Create Set ``+=Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]),`` =#usn8[..0Xa],Case {usn2} =~{1000} When `1esn` In `2esn` In $@usn6 Then {0}[{`4esn`}..] When $0 In 999 Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] Else 0Xa[..`6esn`] End.usn2! =12 Ends With {999} Ends With 's_str' On Create Set `1esn` =$`7esn` Contains 01 Contains @usn6,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)).`2esn` ={7}[..{@usn5}],[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12e12 Starts With $`7esn`|$`8esn` Is Not Null Is Not Null].usn1! =Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Create Unique (`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1)<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`3esn` {usn2:$@usn5[0.12..]})"),
    octest_legacy:ct_string("Start _usn4=Relationship:`5esn`(`6esn`='s_str') Where 7 Is Null Remove Shortestpath(()).`2esn`! Delete @usn5"),
    octest_legacy:ct_string("Merge `5esn`=((:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-({#usn8:{@usn5} In `6esn` In .e0})<-[`3esn`?]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})) On Match Set `2esn` ={`1esn`} Starts With usn2,`8esn` =Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]).`6esn`! ={``}[...e1]"),
    octest_legacy:ct_string("Remove [`4esn` In `4esn`[\"d_str\"..][123.654..] Where `1esn`[$`4esn`..]].@usn6!,All(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)._usn4,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Union All Unwind Shortestpath(((:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010}))) Contains [@usn5 In {#usn8} Contains 7 Where 1000 =~{`1esn`}|$`8esn`[..$usn2][..12]] As `1esn` Unwind False Contains .e0 Contains usn1 As `1esn` Return *,$0[{#usn8}][\"d_str\"],{1000}[..$`3esn`][..2.12] As @usn5 Skip {#usn8}[[`2esn` Starts With `` Starts With .e12,010[``..123456789][@usn6..{12}],$123456789 =~$`7esn`]][Allshortestpaths((#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}))] Limit Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) Union All Foreach(`6esn` In 0x0 Contains 0x0 Contains {`1esn`}| Remove `3esn`:`1esn`,Shortestpath(((`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`` *..7]->(:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8))).usn1?)"),
    octest_legacy:ct_string("Foreach(usn2 In {`1esn`} In `` In {12}| Unwind Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) As `` Remove Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where .e12[..010][..{0}]|07 Starts With 123.654 Starts With 1.0).`8esn`!,Case When 2.12[True] Then `2esn` Ends With {#usn8} When $`8esn` Is Not Null Is Not Null Then 12[1e1] Else {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] End.`8esn`,None(#usn7 In 0e0 Is Not Null Is Not Null Where 01[..$usn1]).`7esn`?) Union Load Csv With Headers From Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Starts With Single(#usn8 In $`8esn`[{``}..] Where 12[{usn2}]) As `7esn` Fieldterminator 's_str' Unwind {_usn4} Starts With 01234567 Starts With $#usn7 As `4esn`"),
    octest_legacy:ct_string("Delete 0xabc[..``] Remove [{`6esn`}[..$12][..0.e0],{`1esn`} Contains {`5esn`} Contains 0e0,{#usn8}[True][{`7esn`}]].usn2?,All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12 Ends With 0X7 Ends With 12.0).#usn8! Load Csv With Headers From 2.12 Ends With usn1 Ends With $`2esn` As #usn8  Union With Distinct ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}) Order By Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] Ascending,Reduce(`4esn`=$999[...e1][..{`3esn`}],_usn4 In $`` =~$1000 =~7|False Starts With #usn7 Starts With 12e12) In Any(#usn7 In `7esn` In $`1esn` In $999 Where False Is Null Is Null) Desc,@usn5 =~$123456789 Asc Merge ((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0})) On Match Set All(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1]).usn2 ={0}[{@usn6}..$_usn3] On Match Set `6esn` =[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`).``? =9e0,.e1.`7esn`! =Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))[Case When False[{`5esn`}..{`8esn`}] Then 2.12 =~{``} =~0X7 When 0e0 =~{usn2} Then $_usn4 =~$12 =~`3esn` Else 999[0.0..][$_usn4..] End][[#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]]] Union Foreach(`8esn` In `6esn` =~{usn2}| Return *,[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6},$`7esn` Contains 01 Contains @usn6 As `4esn` Skip Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null Create Unique _usn3=(((usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}))))"),
    octest_legacy:ct_string("Unwind {usn1} Contains $`` Contains {`8esn`} As _usn3 Create (`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]}),`2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))"),
    octest_legacy:ct_string("Unwind {`4esn`}[9e1..{`6esn`}][9e0..1.0] As `4esn` Create Shortestpath((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})) Delete 12.e12[2.12..] Union Foreach(#usn8 In {123456789}[01234567..Null]| Create ((`` :`5esn`{#usn8:$7 In 00})) Load Csv With Headers From #usn8[{#usn7}..12.e12][7..`8esn`] As `1esn` Fieldterminator \"d_str\") Union Optional Match Shortestpath(({_usn3:999[0.0..$`6esn`]})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]})) Where 7 Is Null Create #usn8=(((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->({@usn6:0e0 =~{usn2}})))"),
    octest_legacy:ct_string("Unwind 0 In Null In 00 As `5esn` Union All Detach Delete .e0 Ends With $0 Ends With ``,[$`5esn` =~`7esn` =~usn2,Count(*)[`8esn`..$`7esn`]][{usn2:{`8esn`} Is Not Null}..][Allshortestpaths((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}}))..],$`7esn` Contains 01 Contains @usn6"),
    octest_legacy:ct_string("Return Distinct *,None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e0 Is Not Null) Contains Any(`5esn` In 9e1 In 0.0 In {999} Where {1000} Contains 12.0 Contains @usn5) Contains {#usn7:$#usn8[@usn5..9e0][2.12...e1]} As #usn8 Order By 010[$_usn4..][{`3esn`}..] Ascending,{`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Descending,'s_str' Is Not Null Is Not Null Desc Union All Foreach(@usn6 In $123456789[12e12]| Create Unique Shortestpath((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)),Allshortestpaths((((`8esn` $#usn8)-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]-(:`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[`4esn`:``]->(@usn6 :#usn7:`3esn`))))) Load Csv From 0.e0[False] As _usn3 Fieldterminator \"d_str\" Create Unique `7esn`=Shortestpath(((`5esn` {``:#usn7 =~#usn8 =~{`6esn`}})-[usn2*..]->(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})))"),
    octest_legacy:ct_string("Remove Reduce(#usn7={usn2} =~{1000},`` In `1esn` In `2esn` In $@usn6|$#usn7 Ends With `6esn` Ends With {`3esn`}).`6esn`?,Extract(`5esn` In usn2 Ends With 0.e0 Where 9e1[{usn2}..$1000]|{#usn7} In `` In @usn6).@usn5! Start `7esn`=Node:#usn7({999}) ,`5esn`=Rel:_usn3(`2esn`={0})Where $@usn5[0.12..] Union Remove Case When True Ends With Count(*) Ends With 1.0 Then `5esn` Is Null Else {1000}[True] End.#usn7?,Reduce(`2esn`=False Starts With 's_str' Starts With $`6esn`,`` In {0} Is Not Null Is Not Null|Count(*) Starts With $7).#usn8?,None(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]).#usn7 Union All Foreach(`4esn` In `8esn`({1000} Is Null)[Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0 In Null In 00)]| Create Unique Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),`5esn`=((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}}))) Merge `4esn`=(`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[usn2? *..00{#usn7:{`2esn`} =~12e12 =~1.0}]-(usn2 :usn2:_usn4{@usn6})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(#usn7 :``) Detach Delete {_usn4}[..'s_str'][..$`7esn`],#usn8['s_str'][$`2esn`],[`7esn` In Null =~$`8esn` =~{`4esn`} Where 0.e0 =~0.e0 =~12.e12|`6esn` In _usn4 In {_usn4}] =~(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[_usn4 *..00]-(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}) =~[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null]"),
    octest_legacy:ct_string("Start usn1=Rel:`6esn`('s_str') ,`7esn`=Rel:`6esn`(\"d_str\") With  *,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],'s_str' Is Not Null Is Not Null Skip Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)[{@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}..][Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))..] Limit {0} Ends With $@usn5 Ends With 010"),
    octest_legacy:ct_string("Unwind [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|$`7esn` Ends With @usn5 Ends With .e1][Shortestpath((((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))))..Any(`` In {0} Is Not Null Is Not Null Where 0xabc =~@usn6 =~{`2esn`})][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1 =~{_usn3})..Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))] As @usn5"),
    octest_legacy:ct_string("Unwind #usn8 =~Null As `` Union With Distinct $`4esn`[0xabc..][.e12..] As #usn7,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`3esn`} Starts With 1.e1 Starts With $#usn7 As `2esn` Order By {``:123456789 Contains $@usn6 Contains Count(*)} Asc Skip {`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}[[{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]]..12][Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `3esn`[{``}..$#usn8])..[usn1[..$usn2][..0],$`4esn` In $@usn5,$123456789 =~00 =~0X0123456789ABCDEF]] Limit $#usn7 In `4esn` In 1.0"),
    octest_legacy:ct_string("Load Csv From Case When $`5esn` Is Null Then 0X0123456789ABCDEF End Is Not Null Is Not Null As `3esn`  Union All Remove Extract(_usn4 In $`` =~$1000 =~7 Where 01[$_usn4..][0..]).`2esn` Merge Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))) On Create Set _usn4 =12[{usn2}],[$`3esn`[..{`4esn`}][..12.e12],`7esn`[1.e1..#usn8],{@usn6}[..1000]]._usn3! ={@usn5} Contains {_usn4}"),
    octest_legacy:ct_string("Return Count(*) In ``,12.0[{999}..`7esn`][$`8esn`..False] As @usn6 Skip {`7esn`:{``} Starts With \"d_str\",#usn7:0.0[$`1esn`..$`5esn`][usn2..$``]} Is Null Is Null Limit $_usn4 =~1000 Load Csv From False Contains _usn4 Contains 2.12 As _usn3 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With  Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,$`6esn` In $`2esn`,{#usn8}[$`6esn`..12e12] As #usn8 Order By 1e1 In #usn8 Ascending,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] Asc Where $`2esn` In $999 In 0.12"),
    octest_legacy:ct_string("Merge (({`5esn`:{@usn5}[...e1][..01]})) On Create Set `7esn`+={@usn6} In $`5esn` In {7} Union Unwind {`1esn`} In $999 In {#usn8} As `1esn` Match `2esn`=(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2),`5esn`=Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan #usn7:`` Where {1000}[..$`3esn`][..2.12] Remove (_usn4 :`8esn`{`8esn`:`1esn` Is Null,#usn7:07[$_usn3..][$``..]})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]->(:@usn6{@usn6:01234567[True]})<-[`6esn`$`6esn`]-(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0}).`3esn`? Union All Foreach(usn1 In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] In Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) In Single(`` In 9e0 Is Not Null Where {1000} Is Not Null Is Not Null)| Delete {`1esn`} =~{usn2} =~$``,usn1(Distinct `1esn`[``..$``]) Starts With None(#usn8 In $`8esn`[{``}..] Where #usn7 In 2.12 In $_usn3),{`7esn`} =~{7}) Optional Match `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))) Using Join On `7esn`,usn1"),
    octest_legacy:ct_string("Create `2esn`=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[@usn5:usn1|usn2]->(_usn4 :``)),``=((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})) Start `3esn`=Node:`7esn`(`7esn`={`1esn`})  Return $1000 In 7 In `1esn` As #usn7 Skip {999} In {`4esn`} In $`1esn` Limit 2.12 =~{``} =~0X7 Union Create `5esn`=Shortestpath((`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})) Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc"),
    octest_legacy:ct_string("Remove ({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`}).@usn5?,Reduce(usn2={`6esn`}[..$`8esn`],`5esn` In 9e1 In 0.0 In {999}|$#usn8[@usn5..9e0][2.12...e1])._usn3?,Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])._usn4! Union With Distinct *,`6esn`[$123456789..0xabc][``..$`4esn`],$`1esn` Contains {`4esn`} Contains 0.12 As `8esn` Order By $`3esn` In {`3esn`} In $`4esn` Asc Skip Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]) Where 1000 Starts With {@usn5} Starts With 123.654"),
    octest_legacy:ct_string("Remove exists(1000 =~{`1esn`}).usn2,{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}.#usn8? Create `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}),usn1=(:`5esn`) Union With Distinct *,$usn2 In {`5esn`} In 12.0 As _usn4 Order By `3esn`[..$#usn7][..{`8esn`}] Descending,$`4esn`[0xabc..][.e12..] Ascending,Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Asc Where 07 In `2esn` In {`3esn`} Union All Start `6esn`=Node:usn2(_usn4=\"d_str\") ,@usn6=Relationship:``('s_str')Where Null =~$`8esn` =~{`4esn`} Start `2esn`=Node:#usn7({_usn3}) ,``=Node:`1esn`(`3esn`={12})"),
    octest_legacy:ct_string("Merge `7esn`=(((#usn8 {usn2:`8esn` Contains 123.654 Contains {`7esn`},`5esn`:9e0 Is Not Null})-[#usn7?:_usn4 *12..00]-(`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(_usn3 :``))) On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] On Match Set `4esn` ={7} In `1esn` In 123456789,[{`5esn`} Starts With {12} Starts With 07,{#usn8}[True][{`7esn`}]]._usn3 =0xabc[..``],`1esn`+=$`5esn` Contains `3esn` Contains {usn2} Union All With Distinct {999} In Count(*) In `6esn` As `4esn`,Case When {1000} Contains 12.0 Contains @usn5 Then {`8esn`}[@usn5][0] End Contains [#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null|{`8esn`}] Contains @usn5(usn2 Ends With usn2 Ends With 1.e1) As `4esn`,1.e1 Starts With {`3esn`} Starts With #usn8 As `5esn` Order By {`7esn`:$`6esn`} Desc Skip {#usn8}[$999..010] Limit Shortestpath(((:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})<-[{usn2:$`` =~_usn4 =~_usn4,#usn8:{1000}[{@usn5}..][1.e1..]}]-(:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[`6esn`?:_usn3|:@usn5 *..0X7]->(#usn8 {`1esn`:{_usn4} =~`7esn`}))) Ends With (`4esn` :#usn7:`3esn`{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:`3esn`]-(`5esn` :`1esn`)-[`7esn`?:`7esn`|:`2esn`{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}]->({`1esn`:`7esn` Contains 01234567 Contains `1esn`}) Ends With [@usn5 In {#usn8} Contains 7 Where 0X7] Where $`2esn` Starts With 0xabc Starts With 1000 Union All Create Unique `6esn`=(:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}) Load Csv With Headers From $1000 Contains $12 As @usn5 "),
    octest_legacy:ct_string("Optional Match ((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]})) With Distinct *,(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])] As `5esn`,$`6esn` Order By {`1esn`} Contains {`5esn`} Contains 0e0 Asc,@usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])] Desc,Reduce(usn1=`8esn` Contains 123.654 Contains {`7esn`},`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|1e1[{`6esn`}..{1000}][07..123456789])[(:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[?:usn2{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})] Desc Where `2esn` Ends With {#usn8} Foreach(`2esn` In $usn1 Is Null Is Null| With Distinct *,$`6esn` Contains 12 As @usn5,`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF Order By {``} Is Null Is Null Ascending,{_usn4} =~`7esn` Descending,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) Ends With All(`` In {0} Is Not Null Is Not Null Where \"d_str\" Ends With `7esn` Ends With 12.0) Ends With All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) Asc With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Order By [{@usn6}[#usn8..][999..],010 Ends With {999},{`8esn`}[`3esn`..999]] Is Not Null Is Not Null Descending,$@usn5 Ascending Skip 0.0[$`6esn`..][{999}..]) Union With Distinct $`4esn`[0xabc..][.e12..] As #usn7,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`3esn`} Starts With 1.e1 Starts With $#usn7 As `2esn` Order By Null[$`1esn`..][7..] Descending,usn1 In True In 12.e12 Descending,{1000} Contains 12.0 Contains @usn5 Asc Where `6esn` In _usn4 In {_usn4} Union Start `5esn`=Relationship:`4esn`({`6esn`}) Where {``}[True][00] With Distinct $123456789 =~$`7esn` Limit 9e1[{`1esn`}][{`3esn`}]"),
    octest_legacy:ct_string("Start `2esn`=Rel:`2esn`(`1esn`='s_str') Where `5esn` Is Not Null Is Not Null Match Allshortestpaths(((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}}))),Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Using Join On `8esn`,`3esn`,#usn7 Using Index usn2:``(@usn6) Unwind 12 In {999} In 999 As #usn7"),
    octest_legacy:ct_string("Unwind 01 Contains @usn6 Contains {@usn5} As `2esn` Merge `6esn`=Allshortestpaths(((`` {`1esn`:$@usn6 Is Not Null})-[@usn5? *07..07{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[#usn7:usn2 *01234567..]->(:`1esn`))) Union All Merge usn2=Allshortestpaths((((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})))) On Match Set Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End.`1esn` =``[..`2esn`][..@usn5],_usn4+={`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0,_usn3:$@usn5[$`6esn`]}[..All(`5esn` In 9e1 In 0.0 In {999} Where {7} Contains {#usn8} Contains {7})][..(_usn4 :`4esn`{_usn4:1000 =~{`1esn`}})<-[`7esn`?:#usn8|`1esn` *..7]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})],usn1+={#usn8} Ends With `7esn` Return `2esn` Starts With `` Starts With .e12 Skip Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]) Limit {`5esn`}[{_usn3}..False] Create Unique `5esn`=Shortestpath(((usn1 :@usn5:`7esn`))),(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00})-[_usn4?:_usn3|:@usn5]-(usn1 :``{@usn5:$#usn7 =~$`1esn`}) Union Return *,Allshortestpaths(((@usn5 ))) =~All(@usn5 In {#usn8} Contains 7 Where 9e0[.e12..][$`3esn`..]),All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End Order By Single(`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null) Starts With {#usn7:{`2esn`} =~12e12 =~1.0} Starts With _usn4(@usn5[01234567..$`8esn`][``..`5esn`],usn1 Is Null) Descending Limit $999 Load Csv With Headers From (:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8) Is Not Null Is Not Null As #usn7 Fieldterminator \"d_str\" With  *,Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)] Skip #usn8[Null] Where `2esn`[#usn8]"),
    octest_legacy:ct_string("Create Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))) Start `4esn`=Rel:`5esn`({`2esn`}) Where 7 Is Null Is Null Start `5esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {`8esn`})"),
    octest_legacy:ct_string("Create `6esn`=(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0}) Start #usn8=Relationship:_usn4('s_str')  Return Distinct *,None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As usn2,usn2[9e12..$`3esn`] As _usn3 Order By 1.e1 Ends With $12 Ends With #usn8 Ascending,1.0[..`3esn`][...e0] Desc Skip 12 In {999} In 999 Limit [`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null] Contains Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where Count(*)[.e12..]) Contains {`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}"),
    octest_legacy:ct_string("Foreach(`` In @usn6(0e0 Is Not Null Is Not Null) Is Null| Delete {`7esn`} Ends With 999,{`5esn`} Starts With $`4esn`,{`2esn`} Starts With 1e1)"),
    octest_legacy:ct_string("Delete $7 In 0.0,{_usn4}[$#usn7..] Return $1000 In 7 In `1esn` As #usn7 Skip {999} In {`4esn`} In $`1esn` Limit 2.12 =~{``} =~0X7 Optional Match `5esn`=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})) Using Index @usn5:#usn8(``) Using Index _usn3:_usn3(@usn5)"),
    octest_legacy:ct_string("Create Unique (((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Remove Extract(usn2 In 1000 Starts With $123456789 Where $`5esn` Is Null|{@usn5}[123.654]).`3esn`?,(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! Delete $1000 Starts With 12.e12 Starts With {#usn7} Union All Return *,_usn4 Contains {123456789} Contains $`5esn` Skip Single(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])[..Reduce(`6esn`={7}[{#usn7}..{`5esn`}][123.654..{@usn6}],`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|0.12 In 123456789)][..Allshortestpaths((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1)<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`3esn` {usn2:$@usn5[0.12..]}))] Limit [_usn3 In 010 Contains $`2esn` Contains 01 Where {_usn4} Ends With .e1 Ends With 0x0|{#usn8} Ends With $999][Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`|123456789 Is Null)..] Union All Merge (`4esn` :`3esn`:usn2) On Create Set usn1+=$#usn7 Ends With `6esn` Ends With {`3esn`} Start ``=Rel:#usn8(\"d_str\") ,`8esn`=Node:`2esn`(@usn6={`5esn`})Where #usn8[\"d_str\"..999]"),
    octest_legacy:ct_string("Optional Match _usn3=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Using Index @usn5:`4esn`(_usn4)"),
    octest_legacy:ct_string("Foreach(usn2 In $usn2 In {`5esn`} In 12.0| With Distinct Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) As `5esn`,{usn2} Is Not Null Is Not Null As _usn4 Limit {`3esn`}[.._usn3][..{#usn7}] Load Csv From None(#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0])[Case 0.e0 =~0.e0 =~12.e12 When 010 Contains $`2esn` Contains 01 Then {7}[..{@usn5}] When {`1esn`} Is Null Then 010 Is Not Null Is Not Null End..] As `7esn` Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Create `4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`)) Union Start #usn8=Node:``(@usn5='s_str') ,@usn6=Rel:`3esn`(_usn3='s_str')Where 0xabc Is Null Foreach(@usn5 In Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` )| Remove Allshortestpaths(((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12}))).`1esn`,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}).``,Shortestpath(({@usn5:$#usn7 =~$`1esn`})).`3esn`) Union Return Distinct 0xabc In $`5esn` In @usn5 As @usn5 Order By 01[$_usn4..][0..] Asc,$`7esn` Contains `1esn` Contains {usn1} Desc,`7esn`[`7esn`..`5esn`] Asc Skip {999} In `3esn` Limit 0.0 =~$usn1 =~$_usn3 Create Allshortestpaths(((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}))),`7esn`=(`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`) Remove (`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`)._usn4?,Any(`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7).`5esn`?,[#usn7 In `7esn` In $`1esn` In $999 Where $_usn3 Is Not Null].`7esn`?"),
    octest_legacy:ct_string("Match @usn6=Allshortestpaths((`4esn` {`3esn`:#usn8 Ends With $usn1})-[`7esn`?{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})) Using Join On _usn4,`2esn` Using Join On usn2,@usn6,`7esn` With Distinct `7esn`[{`7esn`}..$1000] As `4esn`,{usn2} In 010 Skip #usn7 Is Null Limit {`8esn`}[Count(*)..] Where $`5esn`[1e1..] Detach Delete $123456789[#usn7..][0X7..],{#usn8}[0X7][0X0123456789ABCDEF],{#usn7}[0.12][{usn1}]"),
    octest_legacy:ct_string("Start `8esn`=Node:`8esn`(`4esn`=\"d_str\")  Remove Allshortestpaths(((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12}))).`1esn`,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}).``,Shortestpath(({@usn5:$#usn7 =~$`1esn`})).`3esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From @usn5 Contains 7 Contains 999 As #usn8  Foreach(`7esn` In [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)]| Optional Match Shortestpath((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})-[#usn8:_usn4{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}]->({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(:`4esn`{_usn3:usn1[..$usn2][..0]})),`5esn`=((_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})) Using Index ``:`7esn`(`8esn`))"),
    octest_legacy:ct_string("Optional Match @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))) Using Scan `4esn`:`8esn` Create Unique (`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]}) Create Unique `7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}),((_usn3 {usn1:{`8esn`} Is Not Null})) Union Foreach(`6esn` In 0e0[Case {@usn5}[9e1..][1e1..] When {@usn5}[9e1..][1e1..] Then $12 Starts With {#usn8} Starts With {999} When 1.e1[{``}] Then $0 In 999 Else $@usn6 Is Not Null End..Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null}))][Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..])..All(`` In {0} Is Not Null Is Not Null Where 12.e12)]| Start `4esn`=Relationship:``({`5esn`}) ,`6esn`=Rel:@usn6(`5esn`={1000})Where 07[..0Xa] With Distinct (_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])] As `5esn` Order By 0X7[True..{0}][Count(*)..@usn5] Descending,$`5esn` Is Null Ascending,1.0[..`3esn`][...e0] Ascending)"),
    octest_legacy:ct_string("Load Csv From `7esn`[$`6esn`][$`8esn`] As #usn7 Fieldterminator 's_str' Union Load Csv With Headers From #usn8['s_str'][$`2esn`] As `7esn` Fieldterminator \"d_str\" Return *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `1esn`,{0} Is Not Null Is Not Null As `8esn` Order By {`6esn`} =~{`4esn`} =~0x0 Desc,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} Desc Skip Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]) Limit All(@usn5 In {#usn8} Contains 7 Where $#usn7 =~$123456789 =~12)[Extract(_usn4 In $`` =~$1000 =~7 Where $@usn6[{`8esn`}..9e0][0..$`4esn`])..][Extract(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]|Null Contains \"d_str\" Contains {@usn6})..] Delete {999}[$7..],Case 010[123456789] When {_usn4}[$`3esn`][$`3esn`] Then $`1esn` Contains {`4esn`} Contains 0.12 When {`1esn`}[`8esn`][{usn2}] Then 0.0[$`1esn`..$`5esn`][usn2..$``] Else 0.12 Ends With #usn8 Ends With $1000 End Is Not Null,{123456789}[01234567..Null] Union All Foreach(`6esn` In $123456789 =~usn1 =~01| With Distinct $`4esn`[0xabc..][.e12..] As #usn7,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`3esn`} Starts With 1.e1 Starts With $#usn7 As `2esn` Order By Null[$`1esn`..][7..] Descending,usn1 In True In 12.e12 Descending,{1000} Contains 12.0 Contains @usn5 Asc Where `6esn` In _usn4 In {_usn4}) Create (`7esn` :``{@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->({usn1:12 Ends With {0} Ends With _usn4}),Allshortestpaths((`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[@usn5?:usn2 *..1000{`2esn`:9e1[{`5esn`}]}]-(:`5esn`{`5esn`:7 In {7}})-[@usn6?:`2esn`|_usn3 *0x0{`2esn`:0.12 Ends With #usn8 Ends With $1000}]-(:`5esn`{``:$`6esn` Is Not Null})) Start `6esn`=Node:@usn5({#usn7}) ,`2esn`=Node:`2esn`(usn1='s_str')Where 9e12 Starts With Count(*) Starts With {`4esn`}"),
    octest_legacy:ct_string("Remove Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1).usn1"),
    octest_legacy:ct_string("Unwind 123456789[7..$#usn8] As usn1 Union Match usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}),`4esn`=Allshortestpaths(((:`4esn`{`3esn`:True[$7..]})<-[`7esn`?:`7esn`|:`2esn`]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))) Using Index `2esn`:``(_usn3)"),
    octest_legacy:ct_string("Remove All(@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}).`4esn`,Any(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]).usn1!,Reduce(_usn3=`4esn` Contains {`7esn`},`5esn` In 9e1 In 0.0 In {999}|1e1 In #usn8).`6esn`? Optional Match (_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0}),@usn5=Shortestpath(((({`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})))) Union Remove [#usn8 In $`8esn`[{``}..] Where 0Xa[..07][..`2esn`]].`` Union Foreach(`2esn` In [{`8esn`}][..`1esn`(usn2[999..][{`1esn`}..])][..Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..])]| Match @usn5=(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *0X0123456789ABCDEF..]->(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`2esn`:@usn5{usn1:1e1[..1e1]}),`6esn`=(`4esn` :#usn7:`3esn`{usn1:$`4esn` Contains {7} Contains 999})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(_usn4 :usn1) Using Join On usn2,@usn6,`7esn`) Detach Delete $1000 Contains {@usn6} Contains 1.0 Remove All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0.0 =~$usn1 =~$_usn3)._usn4"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Extract(`` In 9e0 Is Not Null Where {_usn4}[$`3esn`][$`3esn`]|07 In `2esn` In {`3esn`}) Is Null As `1esn`  Create Unique @usn5=(`7esn` :_usn4:`4esn`)<-[`8esn`{@usn5:$`` Ends With 9e0}]->(:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4}),#usn8=((:``{`3esn`:2.12 =~1.0 =~{`4esn`}})-[#usn8?]->(`4esn` :usn2:_usn4{usn2:@usn6})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8))"),
    octest_legacy:ct_string("Return *,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `2esn`,[`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1) Order By (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Descending,$`1esn` Contains {`4esn`} Contains 0.12 Descending Limit Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654])[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})][[1e1 In False]] Union Optional Match `3esn`=(`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]}),Allshortestpaths(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Foreach(#usn7 In [12 Starts With $_usn4 Starts With $`6esn`][{`7esn`:123.654[..$`7esn`][...e0]}]| Load Csv With Headers From $#usn8[..#usn8][..{`5esn`}] As `5esn` Fieldterminator \"d_str\") Foreach(#usn8 In @usn6[..0X0123456789ABCDEF][..{`6esn`}]| Optional Match (_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`8esn` *010..]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Where `5esn` Is Null Is Null Detach Delete False[{`5esn`}..{`8esn`}],Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`)))) Union All Remove Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where $`2esn`[..$#usn8]).#usn8!,None(#usn7 In 0e0 Is Not Null Is Not Null Where False Is Null Is Null).#usn7!,Single(#usn7 In 0e0 Is Not Null Is Not Null Where $usn1 Is Null Is Null).usn1 Load Csv From $usn2 Is Not Null Is Not Null As #usn7 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create ((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)),_usn3=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})) Optional Match ((usn2 :usn2:_usn4{@usn6})<-[?:`7esn`|:`2esn` *0X0123456789ABCDEF..]->(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})),_usn3=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Create (#usn8 :`7esn`:#usn8)"),
    octest_legacy:ct_string("Start `6esn`=Node:usn2(_usn4=\"d_str\") Where `7esn`[1.e1..#usn8] Match (_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Union All Return Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null,#usn7 Ends With $@usn5 Ends With usn1 As `7esn` Order By Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}))[Extract(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999|12 Starts With $_usn4 Starts With $`6esn`)][{`8esn`:0e0 In `7esn` In $`8esn`,usn1:{usn1} Contains 0xabc}] Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit `7esn` Contains 01234567 Contains `1esn` Create Unique #usn7=(((:`2esn`:@usn5{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})))"),
    octest_legacy:ct_string("Create Unique (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]}),(`3esn` :usn1)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`7esn`?:`8esn`|:#usn8 *0Xa..]-(_usn3 {usn1:{`8esn`} Is Not Null}) Remove `4esn`(0.12[..$`4esn`][..$`7esn`],Count(*)[.e12..]).`1esn`!,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {#usn8} In $7)._usn4? Union All Start `6esn`=Relationship:`3esn`(usn1='s_str') ,_usn4=Node:`6esn`('s_str')Where {123456789}[01234567..Null] Union Unwind 0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn`"),
    octest_legacy:ct_string("Match `4esn`=((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})) Using Join On _usn3,`2esn`,`3esn` Where 0e0 Is Not Null Is Not Null Union Detach Delete {`4esn`}[$`8esn`..'s_str'],Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12 Ends With _usn4|`7esn` In $`1esn` In $999) Is Not Null Is Not Null Return Distinct $usn2[_usn4][0.e0] As _usn3,@usn5[`5esn`] As `4esn` Order By {999} In {`4esn`} In $`1esn` Desc,$@usn5 Starts With usn2 Starts With $`6esn` Asc,$``[$@usn6..usn1][usn1..7] Ascending Skip Count(*)[`8esn`..$`7esn`] Limit False =~$`8esn` Union All Return Distinct *,2.12 In $123456789 In 00 As `2esn`,$1000[$`7esn`..1e1] As `` Skip [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] Return Distinct `2esn`[#usn8],{`1esn`:Count(*) Contains ``,`7esn`:{7} =~$usn1 =~{_usn4}} In {`4esn`},Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End =~[usn2[_usn3..{usn1}][@usn6..{`4esn`}],12 Starts With $_usn4 Starts With $`6esn`,9e0[.e12..][$`3esn`..]] =~Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*)) As `8esn` Order By 12 Ends With {999} Ends With 's_str' Asc,[{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] Asc,9e1[01..] Asc Skip {@usn6}[..$7][..{`6esn`}] Foreach(`5esn` In All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1])| Create Unique ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),@usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF})) Match ((`3esn` :`2esn`:@usn5{`3esn`:`2esn` Starts With $0 Starts With 12.0,`8esn`:{usn2} Ends With _usn3})) Using Index `8esn`:usn1(_usn4) Using Scan usn2:#usn7)"),
    octest_legacy:ct_string("Load Csv From {usn2} In 010 As `4esn` Fieldterminator 's_str' Union Optional Match _usn4=Allshortestpaths(((:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]}))),(({`5esn`:{@usn5}[...e1][..01]})) Using Index `6esn`:`1esn`(_usn4) Using Join On _usn4 Where 0x0[$123456789..$usn1] Create (_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`8esn` *010..]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Union Optional Match usn2=(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),`2esn`=((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})<-[`7esn` *..00]->(`7esn` {`6esn`:{#usn7} In {`6esn`},`2esn`:$12 In {`8esn`}})<-[`4esn`?:_usn3|:@usn5]-(:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})) Using Scan usn1:#usn7 Create `6esn`=(:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})"),
    octest_legacy:ct_string("Create usn2=Shortestpath((((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})<-[`8esn`? *0X0123456789ABCDEF..{`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})))),_usn4=(_usn4 {`5esn`:0X0123456789ABCDEF[...e12][..0.12]})-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}) Union All Merge ``=(`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) On Match Set #usn8+=[010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End,`3esn` =$123456789 =~usn1 =~01,`5esn` =Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} On Create Set `8esn`+=`1esn` Is Not Null,``:`4esn` Start `3esn`=Relationship:`6esn`({@usn6}) ,`7esn`=Relationship:#usn8(@usn5='s_str') Union Delete 0x0 Is Null Is Null,False Starts With {``} Starts With 07,.e12[$@usn5..] Create Unique `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}),_usn3=(@usn5 :@usn5:`7esn`)<-[`4esn`?:`8esn`|:#usn8 *01{usn2:`2esn` Starts With `` Starts With .e12,`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null}) Delete {1000} In $`2esn` In $_usn3,$#usn7 =~$`1esn`"),
    octest_legacy:ct_string("Foreach(`1esn` In `8esn`[`1esn`..{7}][{_usn4}..$_usn4]| Unwind {@usn6}[{`2esn`}][Count(*)] As `7esn` Optional Match `5esn`=Shortestpath(((`1esn` {#usn8:9e12 Starts With $_usn3})<-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-({usn2:{`8esn`} Is Not Null}))) Using Scan `5esn`:`` Where $`7esn` Ends With @usn5 Ends With .e1) Merge `5esn`=Shortestpath(((`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})-[ *..1000]->(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(_usn4 :`5esn`))) Remove Case 2.12 =~.e12 =~#usn8 When 12 In {#usn7} Then 12 Ends With _usn4 End.@usn5! Union Optional Match `7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}))) Where {`6esn`}[..$12][..0.e0] Union All Remove {`3esn`:$`4esn` Starts With #usn8 Starts With 2.12}.`3esn`,Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`))))._usn4!,All(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]).`6esn` Return *,{@usn6} Is Null,{0}[{@usn6}..$_usn3] As `6esn` Order By {123456789} Starts With {`5esn`} Desc,`8esn` Is Not Null Is Not Null Descending Limit 7 In {7} With Distinct 1000 =~{`1esn`} Order By Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null) Ascending Limit $`7esn` Is Null Is Null Where {`8esn`}[0xabc..][`4esn`..]"),
    octest_legacy:ct_string("Optional Match #usn8=Allshortestpaths(((`5esn` :@usn5:`7esn`)-[usn1? *..0X7{`2esn`:010}]-(`3esn` :usn1))) Match (#usn8 :`7esn`:#usn8) Using Scan `5esn`:_usn3 Union Optional Match ``=Shortestpath(((#usn8 :`4esn`)-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})-[`8esn`:@usn6 *12..00{@usn5:$`8esn` Is Not Null Is Not Null,`3esn`:0e0 Is Not Null Is Not Null}]-(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))),@usn5=Shortestpath(((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[? *010..]->(@usn5 {`3esn`:`2esn`[#usn8]}))) Using Index _usn3:@usn6(`2esn`) Using Join On `` Create Unique ((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})),Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]}))))"),
    octest_legacy:ct_string("Unwind 07[..0Xa] As `3esn` Create Unique (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}}))"),
    octest_legacy:ct_string("Start `4esn`=Rel:`5esn`({`2esn`}) Where 7 Is Null Is Null Remove All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]).`1esn` Union All Match _usn4=Allshortestpaths((((usn2 :_usn3:`5esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})))),#usn8=Allshortestpaths(((@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null})<-[`5esn`]->(usn1 :`3esn`:usn2))) Using Index `3esn`:#usn7(usn2) Using Index `6esn`:usn1(#usn7) Where 1e1 In #usn8 Match (usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2) Using Scan #usn8:_usn4 Using Index #usn7:usn1(`4esn`) Where {999} Starts With {`3esn`}"),
    octest_legacy:ct_string("Start usn2=Rel:`8esn`(`4esn`=\"d_str\") ,`8esn`=Rel:`6esn`(`3esn`=\"d_str\") Remove Case $0 Starts With {`2esn`} When 0X0123456789ABCDEF =~123.654 =~{_usn4} Then 01[.._usn4][..$_usn4] End.#usn8 Delete `2esn` Starts With $0 Starts With 12.0,$usn2[12e12..] Union Create `1esn`=((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),@usn6=Shortestpath((((`2esn` :#usn8:_usn3)<-[`1esn`? *..123456789{``:_usn4 Starts With $`3esn` Starts With {#usn8}}]->(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`7esn`?{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}]->(`7esn` :#usn8:_usn3{_usn4:1.0[..`3esn`][...e0]})))) Create @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))),@usn5=Shortestpath(((`` :`2esn`:@usn5)-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]})-[`1esn`?:`7esn`|:`2esn`]->(`7esn` :`6esn`))) Return Distinct *,[`` In `1esn` In `2esn` In $@usn6 Where Count(*) In ``|{`5esn`} Starts With {12} Starts With 07][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..])][Reduce(`2esn`=12[1e1],`` In 9e0 Is Not Null|0.0[$`1esn`..$`5esn`][usn2..$``])] As #usn7 Order By 12 Ends With {0} Ends With _usn4 Desc"),
    octest_legacy:ct_string("Create Unique `6esn`=(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),Allshortestpaths(((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))) Union Merge ((:@usn6{`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[#usn8:_usn3|:@usn5{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`6esn`$`6esn`]->(:#usn8:_usn3{`3esn`:`2esn`[#usn8]})) On Match Set usn2 ={usn2} =~{1000} Return Distinct *,[_usn3 In 010 Contains $`2esn` Contains 01 Where {`5esn`} In {#usn7} In $7|{``} Starts With \"d_str\"] Contains Reduce(_usn3=010 Contains $`2esn` Contains 01,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|{#usn8}[$`6esn`..12e12]) Contains Case When True Ends With Count(*) Ends With 1.0 Then {`8esn`} Else 0X0123456789ABCDEF[...e12][..0.12] End As @usn6 Order By `6esn` =~{usn2} Descending Merge `4esn`=((:_usn3:`5esn`{usn2:_usn3 Starts With 0X7,@usn5:01 Starts With 12e12})-[`4esn`? *0{`1esn`}]-(`4esn` $`6esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}))"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths(((`4esn` :`8esn`)-[`7esn`:`1esn`|`6esn` *0xabc..]->(`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2}))) Foreach(`1esn` In (`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}}) In Case When @usn5[01234567..$`8esn`][``..`5esn`] Then `5esn` Is Not Null Is Not Null When {usn1} Is Null Then 7[0e0..][$`1esn`..] Else False Starts With {``} Starts With 07 End In Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {7} In `1esn` In 123456789)| Create Unique Allshortestpaths((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})),#usn8=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) With Distinct *,0X0123456789ABCDEF[..0.12],{999} Ends With 1e1 As `2esn` Order By {`7esn`} =~{7} Asc,Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc Limit @usn5 =~$123456789) With  0.12[$123456789..] As usn1,Any(`5esn` In 9e1 In 0.0 In {999})[#usn8(#usn7[0.12..12.e12])],Count(*) In `` Where $`5esn`[$`4esn`][$_usn4] Union All Delete True[#usn8..][$123456789..],{usn2:{`6esn`}[..$`8esn`],#usn7:`8esn`[`1esn`..{7}][{_usn4}..$_usn4]}[..[@usn5 In {#usn8} Contains 7 Where $999 Contains 0e0|{``} Starts With \"d_str\"]][..(`4esn` :`1esn`)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})] Create Allshortestpaths((({`5esn`:{@usn5}[...e1][..01]})-[``? *..00]-(_usn3 :`8esn`))) Foreach(#usn7 In .e0[010..][1.e1..]| With Distinct *,0X0123456789ABCDEF[..0.12],{999} Ends With 1e1 As `2esn` Order By {`7esn`} =~{7} Asc,Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc Limit @usn5 =~$123456789)"),
    octest_legacy:ct_string("Unwind 010 Ends With {999} As @usn5 With  *,{@usn6} Is Null,{0}[{@usn6}..$_usn3] As `6esn` Order By Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc,#usn8[\"d_str\"..999] Descending Where $`3esn` Ends With {_usn3} Ends With 9e1 Union Create Unique ((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)) Return [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,{`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] As `5esn` Skip $`1esn` =~$`6esn` =~9e1 Limit 9e1[$@usn5..] Merge `2esn`=Allshortestpaths(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) On Create Set _usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],`3esn`+=False Starts With #usn7 Starts With 12e12"),
    octest_legacy:ct_string("Create _usn4=(:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null}),(((`8esn` :`7esn`:#usn8)<-[:`3esn`{`2esn`:010}]->(:@usn5:`7esn`)<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}))) Foreach(usn1 In @usn6| Return #usn8[..0Xa] As usn2 Limit {@usn5} =~Null =~$`4esn`) Union All Unwind `4esn`[\"d_str\"..][123.654..] As @usn6"),
    octest_legacy:ct_string("Merge ((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) On Create Set `8esn`+=12e12 =~{usn1} =~1.e1,`5esn`+=Null Contains \"d_str\" Contains {@usn6},`3esn`+=[`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]][@usn6(Distinct {`1esn`} In 0.e0 In $1000)..][Shortestpath((_usn4 :usn2:_usn4)-[#usn8:usn2*{`3esn`:0[9e12..{usn1}]}]-({`3esn`:0.12 In 123456789})<-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(:`8esn`{0}))..] Return Distinct *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Limit $`8esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(@usn5 In [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1)| Load Csv With Headers From {usn1}[`6esn`..@usn5][$usn1..0.0] As @usn6 Fieldterminator \"d_str\") Match @usn5=Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`)))),(usn2 :`2esn`:@usn5)-[_usn3:`5esn` *01{`8esn`:_usn4 Is Not Null,`6esn`:0xabc In $`5esn` In @usn5}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[@usn5?:_usn3|:@usn5]-(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)}) Using Index `7esn`:`2esn`(`7esn`) Using Scan `8esn`:usn2 Merge `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) On Create Set `6esn` =Reduce(`6esn`=$999[0.12][0xabc],`5esn` In usn2 Ends With 0.e0|{_usn4} Starts With 01234567 Starts With $#usn7) =~`6esn`(`1esn`[$`4esn`..]) =~`3esn`(0.0,$usn1 =~{_usn3}),[01 Is Null Is Null,$`8esn`[{``}..]]._usn3! =[$@usn6 Contains {@usn6},False[{`5esn`}..{`8esn`}]][Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7})..],@usn6+=`8esn` Contains 123.654 Contains {`7esn`} On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Union All Remove (`1esn` :#usn8:_usn3{`2esn`:{`1esn`} In $999 In {#usn8},_usn4:07 In `2esn` In {`3esn`}})-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2}).`3esn`,Case When $`6esn` Then {0} Is Not Null Is Not Null End.`5esn`? Delete Case 12.0 Contains {`3esn`} When 01234567[True] Then 0Xa Starts With .e12 When True Ends With Count(*) Ends With 1.0 Then {`8esn`} End Ends With {`7esn`:{``}[12e12..`6esn`]},{123456789}[..010][..#usn8],(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] Unwind @usn5 Is Null As #usn8 Union All Detach Delete Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))],9e12 In {`6esn`} In 0X7 Create Allshortestpaths(((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}}))),Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Create @usn6=Shortestpath((:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))"),
    octest_legacy:ct_string("Return $7 In `2esn` As `4esn`,{@usn6} Ends With `5esn` Ends With 00,0X7 =~$`7esn` =~$_usn3 Order By [{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Asc,0X7 Ends With {0} Ends With $12 Descending Limit `7esn` Starts With `4esn` Merge (@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`6esn`? *010..{usn2:$999 Is Not Null Is Not Null}]-(usn2 :`2esn`:@usn5{`6esn`:1.0 Is Not Null Is Not Null}) On Create Set `8esn`+=Extract(#usn8 In $`8esn`[{``}..] Where 01 Contains {0} Contains $`5esn`|0X0123456789ABCDEF =~123.654 =~{_usn4}) In Filter(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) In [123456789 Starts With 0e0,`3esn`[{``}..$#usn8]],Case When 9e1[$`5esn`..0xabc] Then \"d_str\" Contains `6esn` Contains $12 Else {#usn8} Starts With 123456789 Starts With $`1esn` End.#usn8 =0xabc[Count(*)..`6esn`][@usn5..$usn1]"),
    octest_legacy:ct_string("Delete $123456789[#usn7..][0X7..],`4esn`[$`4esn`],(`4esn` :``{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..None(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0})] Union All Create Unique (`7esn` :`5esn`{#usn7:{@usn5}[123.654]}) Return *,Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As usn1,1.0 =~$_usn4 Order By None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[12e12..`6esn`])[Case 1.e1[{``}] When Null =~$`8esn` =~{`4esn`} Then `3esn` In .e1 In 0X0123456789ABCDEF When usn1 Starts With Count(*) Starts With @usn6 Then $usn1 =~{_usn3} Else {7}[..{@usn5}] End..Single(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Is Null Is Null)] Ascending,$0 In 999 Descending,{`8esn`}[{_usn4}] Ascending Skip 1000 Starts With $123456789 Limit Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..]"),
    octest_legacy:ct_string("Remove {#usn7:$`4esn` Contains {7} Contains 999,`1esn`:0.12 In 123456789}._usn3? Foreach(`3esn` In `8esn`[`1esn`..{7}][{_usn4}..$_usn4]| Create `8esn`=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))),((`4esn` $`6esn`)) Remove (`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}).`4esn`?,None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12])._usn4!) Load Csv With Headers From 's_str' =~\"d_str\" As `5esn` Fieldterminator \"d_str\" Union Delete [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Merge usn2=(`4esn` :`3esn`:usn2{@usn6:True[#usn8..][$123456789..]}) On Create Set `7esn` =$`4esn` Is Not Null Is Not Null,`8esn` =Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Count(*)[.e12..])[Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End],`1esn`+=`4esn` Starts With 01234567 Foreach(`6esn` In ({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End]| Return Distinct {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] As `2esn` Order By #usn8[{#usn7}..12.e12][7..`8esn`] Asc,9e12 Starts With $_usn3 Asc,_usn4[01234567.._usn4][False..12] Ascending Skip Any(`5esn` In usn2 Ends With 0.e0 Where usn1[12e12..]) Is Null Is Null) Union All Remove Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0 In Null In 00).#usn8!,All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}).#usn7!,Reduce(usn2=`5esn`[12.0..],`` In `1esn` In `2esn` In $@usn6|`8esn` Contains 123.654 Contains {`7esn`}).@usn5"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]) Starts With None(usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}) Starts With {#usn7:$#usn8[@usn5..9e0][2.12...e1]} As `1esn` Fieldterminator 's_str' Load Csv From .e12[$`2esn`..][{`3esn`}..] As `2esn` "),
    octest_legacy:ct_string("Load Csv With Headers From 010 As `1esn`  Delete (:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)[..Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)][..{`1esn`:{_usn4}[$#usn7..],`2esn`:1.e1 Ends With {`8esn`} Ends With 00}],Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Starts With Single(#usn8 In $`8esn`[{``}..] Where 12[{usn2}]),$0[{7}..][123.654..] Match (usn2 )-[`1esn`?:@usn5|:`1esn` *010..]-({`5esn`:{@usn5}[...e1][..01]})-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]}),((:`4esn`$999)-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})) Using Scan `3esn`:#usn7 Using Scan _usn4:_usn3 Where {123456789} Starts With {`5esn`} Union Match _usn4=Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),Shortestpath(((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[:_usn3|:@usn5 *999]-(_usn4 :`8esn`{`8esn`:`1esn` Is Null,#usn7:07[$_usn3..][$``..]}))) Using Scan usn1:#usn7 Where $`7esn` Ends With @usn5 Ends With .e1 Union All Foreach(usn1 In 0Xa =~{0} =~0x0| Delete (`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}}) In Case When @usn5[01234567..$`8esn`][``..`5esn`] Then `5esn` Is Not Null Is Not Null When {usn1} Is Null Then 7[0e0..][$`1esn`..] Else False Starts With {``} Starts With 07 End In Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {7} In `1esn` In 123456789),0.12[..$`4esn`][..$`7esn`],Case `3esn` In .e1 In 0X0123456789ABCDEF When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then $usn1[$0..Count(*)][@usn6..$12] When {`4esn`}[..0Xa] Then #usn7[`4esn`..$`8esn`] Else 0X0123456789ABCDEF[..0.12] End[Extract(@usn5 In {#usn8} Contains 7 Where 0X7)..])"),
    octest_legacy:ct_string("Detach Delete #usn7[..12.e12] With  Count(*) In `` Union Create ((:usn2:_usn4{``:$`6esn` Is Not Null})),usn1=(_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}) Remove Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where $12[..$`6esn`][..$`1esn`])._usn4?,Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]).`6esn`? Unwind `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF As _usn3 Union All Remove Reduce(`1esn`={usn2} =~{1000},#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|1.e1[{``}]).`6esn`?,`3esn`(0.0,$usn1 =~{_usn3}).``!,(`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})-[ *..0X7]->(#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]->(`2esn` {usn1:@usn5 Contains 7 Contains 999}).``! Unwind None(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) Is Null Is Null As #usn7"),
    octest_legacy:ct_string("Create ((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})) Union All Match usn2=Allshortestpaths((((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})))) Using Join On @usn6,`2esn` Where $`5esn`[1e1..] Start @usn5=Node( {`1esn`}) Where _usn3 Starts With 0X7 Return 2.12[..01234567][..{usn2}],`1esn`[0X7..][#usn7..],0.12[.e12..0][1.0..{_usn4}] Order By Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] Ascending,{999} Ascending Skip {_usn4} Ends With .e1 Ends With 0x0 Limit 0xabc In $`5esn` In @usn5 Union Foreach(`6esn` In Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]]| Unwind `7esn` Contains $`1esn` Contains 0X7 As #usn7 Remove Single(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0).`6esn`?,Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When $7 In 00 Then $`` Ends With 9e0 Else {`8esn`} End.`6esn`,Single(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)._usn4) Delete 0Xa[..`6esn`],{1000} In 7 In $_usn4,{#usn7} In `` In @usn6 Load Csv From None(`` In 9e0 Is Not Null Where 07[{12}..])[{`2esn`:{`6esn`}[..$12][..0.e0]}..Any(#usn7 In `7esn` In $`1esn` In $999 Where $_usn4[1.0..@usn6])] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create #usn7=Allshortestpaths((`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})),(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[#usn8?:@usn5|:`1esn` *0Xa..{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` {usn1:{`8esn`} Is Not Null}) Delete `2esn` Ends With {#usn8} Return *,'s_str' Is Not Null Is Not Null As `6esn` Skip Single(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999) In [@usn5 In {#usn8} Contains 7 Where @usn5 Is Null Is Null|$123456789 =~$`7esn`] In [#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`|True[#usn8..][$123456789..]] Limit Reduce(`4esn`={999} In Count(*) In `6esn`,_usn4 In $`` =~$1000 =~7|{999} In Count(*) In `6esn`) In Case `5esn` Is Null Is Null When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 When .e1 In {`6esn`} In \"d_str\" Then $0 Starts With {`2esn`} End In Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))"),
    octest_legacy:ct_string("Create (usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]}),usn2=Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) Union All Create Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),(((:`5esn`{`5esn`:7 In {7}})-[?:`5esn` *..7]->(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[:`4esn` *0{@usn5:{@usn6} Ends With `5esn` Ends With 00}]-(_usn3 :`1esn`))) Union Load Csv From {usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}[Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])][Reduce(#usn7={`6esn`}[..$12][..0.e0],#usn8 In $`8esn`[{``}..]|$0 Starts With True Starts With $_usn4)] As _usn4  Create Allshortestpaths((({`5esn`:{@usn5}[...e1][..01]})-[``? *..00]-(_usn3 :`8esn`))) Create `4esn`=(#usn7 :`5esn`)<-[`7esn` *..00]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})"),
    octest_legacy:ct_string("Create Unique (({`8esn`:{7} In `1esn` In 123456789})) Foreach(@usn5 In $12[{``}]| With  *,None(`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12])[Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4)..][Case {1000} Is Not Null Is Not Null When 0Xa Starts With .e12 Then #usn8[Null] When 1000 Starts With {@usn5} Starts With 123.654 Then .e12[..010][..{0}] Else {#usn8}[`7esn`..][_usn3..] End..] As _usn4,None(`` In 9e0 Is Not Null Where 07[{12}..])[Case False[{`5esn`}..{`8esn`}] When {0} Starts With {usn1} Then {`8esn`}[0xabc..][`4esn`..] End..] As _usn4 Limit [1000[{7}..],$usn2 Ends With $@usn6 Ends With $_usn3][[#usn8 In $`8esn`[{``}..] Where $#usn7 =~$123456789 =~12]..][Reduce(`4esn`={999} In Count(*) In `6esn`,`` In {0} Is Not Null Is Not Null|#usn7 =~#usn8 =~{`6esn`})..] Where {`6esn`} Is Not Null Is Not Null Return Null =~$`8esn` =~{`4esn`} As #usn8 Order By .e0[@usn6..] Asc,.e1[@usn5][0X0123456789ABCDEF] Desc Limit {usn2} Is Not Null Is Not Null) Create Shortestpath(((usn2 :@usn6)))"),
    octest_legacy:ct_string("Start usn1=Node:@usn6(_usn3={``}) Where {`1esn`} Ends With 2.12 Ends With _usn4 Union All Load Csv With Headers From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] As `3esn` "),
    octest_legacy:ct_string("Create _usn4=(({`4esn`:$`2esn` In $999 In 0.12})<-[? *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})),_usn4=Allshortestpaths((((:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[`3esn`{`8esn`:`5esn` Is Null}]->(`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})))) Merge ((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1})) Delete (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)],{_usn4}[{usn1}..][`8esn`..] Union Load Csv From 12.e12 In {@usn6} As _usn4  Start `7esn`=Node:#usn8(\"d_str\")  Delete 0x0 Is Null Is Null,False Starts With {``} Starts With 07,.e12[$@usn5..]"),
    octest_legacy:ct_string("Start `2esn`=Node:usn2(_usn4=\"d_str\") ,`8esn`=Relationship:_usn3({`2esn`}) Return *,0.12 =~True =~`3esn` Order By {`1esn`} Contains {`5esn`} Contains 0e0 Asc,9e0[{@usn5}..] Desc Skip [12[`3esn`..{usn1}],9e12 In 0Xa In $#usn7,.e0[$`8esn`..12e12][usn1..999]][Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 01[$_usn4..][0..])][Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End] With  Case {``}[12e12..`6esn`] When 9e1[{usn2}..$1000] Then `2esn` Starts With `` Starts With .e12 When 01 Is Null Is Null Then {`4esn`}[$`8esn`..'s_str'] Else usn2[_usn3..{usn1}][@usn6..{`4esn`}] End[Reduce(`5esn`=0.12 Ends With #usn8 Ends With $1000,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|_usn3 Starts With 0X7)][Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End] As ``,1000 Starts With {@usn5} Starts With 123.654 Skip [{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Limit [{`2esn`} Starts With 1e1,$`2esn` In $999 In 0.12,True[#usn8..][$123456789..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null]] Where #usn8[1e1][$12]"),
    octest_legacy:ct_string("Start `2esn`=Node:#usn7({_usn3}) ,``=Node:`1esn`(`3esn`={12}) Start usn1=Node:_usn3(``={12}) ,usn1=Relationship:`4esn`({`6esn`})Where $@usn5[0.12..] Union All Match @usn6=Shortestpath((:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)) Using Scan `7esn`:`2esn` Where 0.0 Foreach(_usn3 In {`1esn`}[`8esn`][{usn2}]| Create `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})),@usn6=Shortestpath((_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})) Create `6esn`=(((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),Allshortestpaths(((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})))) Detach Delete 0X7,{`2esn`}[`3esn`][{#usn7}] Union Remove count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0]).usn1 Remove Case $@usn6[`4esn`..{999}][$``..{@usn6}] When 0xabc[$#usn7][0Xa] Then `4esn` Is Not Null Is Not Null When {`1esn`}[`8esn`][{usn2}] Then $_usn4 Contains 0 Contains False Else 123456789 Contains $@usn6 Contains Count(*) End.#usn7,All(`` In 9e0 Is Not Null Where $`` =~$1000 =~7).`3esn`,Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null|{`5esn`}[{_usn3}..][.e0..]).#usn7? Remove [$`8esn` Ends With {`5esn`} Ends With $`4esn`,{#usn8} In $7,{``}[True][00]]._usn4?,Extract(`` In 9e0 Is Not Null|$`8esn` Ends With {`5esn`} Ends With $`4esn`).`6esn`?"),
    octest_legacy:ct_string("Unwind .e0[$`8esn`..12e12][usn1..999] As _usn4 Load Csv From $`2esn` Starts With 0xabc Starts With 1000 As `7esn`  Union Create Shortestpath(((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]}))) Merge Allshortestpaths((((:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {`1esn`:{``}[...e1]})))) On Match Set `1esn`+=Reduce(#usn7=$`3esn` Ends With {_usn3} Ends With 9e1,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{usn1} Contains 0xabc) =~_usn4(Distinct 0X7 Contains usn2 Contains $`1esn`,$`5esn`[$7]) On Match Set `6esn` =[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`).``? =9e0,.e1.`7esn`! =Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))[Case When False[{`5esn`}..{`8esn`}] Then 2.12 =~{``} =~0X7 When 0e0 =~{usn2} Then $_usn4 =~$12 =~`3esn` Else 999[0.0..][$_usn4..] End][[#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]]] Load Csv With Headers From 's_str' In Single(`4esn` In `4esn`[\"d_str\"..][123.654..]) As `6esn`  Union All Merge `6esn`=(((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))) On Create Set `4esn` ={@usn5} Contains $999 Contains 0.12,usn1 ={`1esn`} Starts With usn2,`1esn`+=$@usn5 Is Not Null Is Not Null On Create Set Extract(`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]|{`8esn`} =~usn1 =~12.e12).`5esn`! =None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Load Csv From (:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})<-[#usn7?{@usn5:`7esn`[{`7esn`}..$1000]}]-({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}) =~Reduce(`5esn`=`4esn` Contains {`7esn`},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|7 Is Null Is Null) =~exists(Distinct $12 In {`8esn`},$`` Contains 123.654 Contains $#usn7) As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match (:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),`2esn`=(($#usn8)) Union Detach Delete usn1[12e12..],(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`) Return *,`2esn`[..$@usn5] As _usn3,$0 Starts With $1000 Starts With False Order By $123456789 Contains {`2esn`} Contains 's_str' Ascending Union Return Distinct *,All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End As @usn5 Skip [{`2esn`} Starts With 1e1,$`2esn` In $999 In 0.12,True[#usn8..][$123456789..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null]] Foreach(usn1 In Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Ends With [#usn7 In 0e0 Is Not Null Is Not Null Where {`3esn`}[{`8esn`}..$7][0e0..0x0]] Ends With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1)| Return Distinct (#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`1esn` :#usn7:`3esn`) Is Null As usn1 Order By Allshortestpaths(((_usn4 :``)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))[[`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|12.0 Contains {`3esn`}]..] Descending,#usn7[$@usn6][$`8esn`] Desc Skip `2esn`[999..`4esn`][{`7esn`}..`6esn`]) Start usn1=Node:usn1(`5esn`='s_str') "),
    octest_legacy:ct_string("Create Unique `4esn`=Shortestpath((($#usn8))),#usn7=(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]}) Union All Unwind $#usn7[..0e0][..$12] As @usn5 Delete Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)],$@usn5 Ends With 00 Ends With 12.e12,[07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))]"),
    octest_legacy:ct_string("Unwind ``[{@usn6}] As `2esn` Foreach(_usn3 In $`2esn`[[`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|12.0 Contains {`3esn`}]][`5esn`(``[..`2esn`][..@usn5],_usn3[..1000])]| Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc) Unwind {`2esn`} =~{@usn6} As @usn5 Union All Create Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Union Create Unique `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) Delete {1000}[True]"),
    octest_legacy:ct_string("Create Unique `3esn`=Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})),Allshortestpaths((({`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]}))) Create ((usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})<-[:_usn4{`6esn`:{`1esn`} In 0.e0 In $1000}]->({#usn7:{999} In Count(*) In `6esn`})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})) Delete 12 In {#usn7} Union Unwind True[..{_usn4}][..0.0] As `5esn` Remove Extract(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).`7esn` Union All Detach Delete 0X7 Ends With {@usn5} Ends With {_usn3} Load Csv With Headers From 0x0 Is Null Is Null As @usn5  Match _usn3=Allshortestpaths(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))),``=Allshortestpaths((:`2esn`:@usn5{`3esn`:{12} Contains $`4esn` Contains usn2})) Using Index `8esn`:usn1(_usn4)"),
    octest_legacy:ct_string("Merge (`3esn` {#usn8:0Xa Contains 0X7 Contains {``}})-[`7esn`:`7esn`|:`2esn` *12..00]-({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[`7esn`?:`2esn`|_usn3 *..123456789]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}) On Match Set Shortestpath(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[_usn4 *..00]-(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`8esn`{`3esn`:0xabc[$#usn7][0Xa],`2esn`:{@usn5}[123.654]}]-(`` ))).`6esn` =[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 9e12 Is Null Is Null|{#usn8} Starts With 123456789 Starts With $`1esn`] Is Null Is Null"),
    octest_legacy:ct_string("Merge ((#usn8 :`7esn`:#usn8)) On Create Set ``+=Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]),`` =#usn8[..0Xa],Case {usn2} =~{1000} When `1esn` In `2esn` In $@usn6 Then {0}[{`4esn`}..] When $0 In 999 Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] Else 0Xa[..`6esn`] End.usn2! =12 Ends With {999} Ends With 's_str' On Create Set `1esn` =$`7esn` Contains 01 Contains @usn6,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)).`2esn` ={7}[..{@usn5}],[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12e12 Starts With $`7esn`|$`8esn` Is Not Null Is Not Null].usn1! =Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Foreach(_usn3 In `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null)| Remove ({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`}).@usn5?) Remove Extract(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`3esn`} Starts With 1.e1 Starts With $#usn7).#usn8?,`5esn`(Distinct 12.0[12..9e1]).`6esn` Union Optional Match (((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]}))),`2esn`=(`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Join On `5esn` Using Join On `7esn`,`3esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 010 Ends With {999} As _usn3 Fieldterminator 's_str' Detach Delete 0.0 Is Null Is Null,12 =~0xabc,{`6esn`}[0x0..{1000}] Unwind [usn1[12e12..],9e12 In $_usn3] Is Null Is Null As `8esn`"),
    octest_legacy:ct_string("Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Skip usn1 Starts With _usn4 Starts With `` Limit .e12[$`2esn`..][{`3esn`}..] Unwind {7}[..123456789][..$#usn8] As usn1 Remove `5esn`(Distinct {`1esn`} Starts With 9e12 Starts With $`2esn`).usn2?,None(#usn7 In 0e0 Is Not Null Is Not Null Where $`3esn` In $#usn8 In {_usn3}).@usn5?,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where $7 Is Not Null Is Not Null).usn1 Union Foreach(#usn8 In {#usn8} In {#usn8}| Unwind $@usn5[0.12..] As `4esn`) Start usn1=Relationship:#usn8(@usn5='s_str') Where {``} Starts With \"d_str\""),
    octest_legacy:ct_string("Unwind $`` =~$1000 =~7 As #usn7 Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))) Using Scan #usn7:@usn6 Where 2.12[True] Foreach(`` In [`` In {`7esn`} Starts With {0} Starts With {1000} Where `3esn` =~usn2 =~7|$``[$@usn6..usn1][usn1..7]] Contains {`2esn`:0.12 Ends With #usn8 Ends With $1000}| Optional Match `3esn`=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),usn2=Allshortestpaths((((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})))) Using Index `1esn`:usn1(`8esn`) Using Index `2esn`:@usn5(@usn6) Where 01 Contains _usn3 Contains .e12 Optional Match Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Using Index _usn4:_usn3(`4esn`) Where 0X7 =~{_usn3} =~0x0) Union Start _usn3=Node:#usn8(`6esn`={123456789}) Where 12e12[12.0][{usn2}] Load Csv With Headers From 0X0123456789ABCDEF[..0.12] As @usn6 Fieldterminator 's_str' Create _usn4=((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})),`5esn`=({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[usn1 *010..]->(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}) Union All Remove Reduce(usn2=$#usn8 Ends With #usn8 Ends With 12,_usn4 In $`` =~$1000 =~7|999 In 0X0123456789ABCDEF In 9e0).`4esn`!,Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End.`3esn`?"),
    octest_legacy:ct_string("Match _usn4=Allshortestpaths(((`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null}))) Using Scan usn2:#usn7 Using Scan #usn8:`1esn` Where 07 In `2esn` In {`3esn`} Create Unique Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))) Merge (#usn7 :usn1) On Match Set `4esn`({123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]).`7esn` ={1000}[#usn7..{`8esn`}][{`4esn`}..'s_str'],_usn3+=`1esn` In 0 In $#usn7,`6esn`+={_usn4} =~$999 Union All Unwind 9e12[$#usn7..01234567] As @usn6"),
    octest_legacy:ct_string("Match `4esn`=Allshortestpaths(((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]}))) Using Scan usn1:#usn8"),
    octest_legacy:ct_string("Load Csv From `5esn` In $_usn3 In 0Xa As usn2 Fieldterminator \"d_str\" Merge Allshortestpaths((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})<-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})))) On Match Set #usn7 =0X7 =~{_usn3} =~0x0,`3esn`+={usn1}[`6esn`..@usn5][$usn1..0.0],@usn5 ={usn1} Contains $`` Contains {`8esn`} On Match Set `8esn`+=12e12 =~{usn1} =~1.e1,`5esn`+=Null Contains \"d_str\" Contains {@usn6},`3esn`+=[`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]][@usn6(Distinct {`1esn`} In 0.e0 In $1000)..][Shortestpath((_usn4 :usn2:_usn4)-[#usn8:usn2*{`3esn`:0[9e12..{usn1}]}]-({`3esn`:0.12 In 123456789})<-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(:`8esn`{0}))..] Union Merge (((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $#usn8 As `6esn`  Unwind {999}[{`1esn`}..``][{12}..$123456789] As `1esn`"),
    octest_legacy:ct_string("Unwind {_usn4:{123456789} Is Null Is Null}[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{1000} Contains 12.0 Contains @usn5]] As `7esn` Merge (({`8esn`:{7} In `1esn` In 123456789})) On Create Set `2esn`+=Filter(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}) Ends With Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End Ends With {`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}},#usn7+=`` Ends With $usn1 Ends With $`2esn`,Shortestpath((`4esn` :@usn6{`7esn`:{#usn8} In $7})<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`1esn`:_usn3|:@usn5*$1000]->({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})).@usn5! ={_usn4}[@usn5] Return Distinct `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF Order By 0Xa Starts With .e12 Desc,Reduce(`3esn`=$@usn6[{`8esn`}..9e0][0..$`4esn`],@usn5 In {#usn8} Contains 7|{usn1} Contains 0xabc) Ends With Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]) Ends With Case $`6esn` =~$_usn3 =~.e1 When {12} Ends With $`6esn` Ends With {#usn7} Then {`6esn`} Is Null When 9e1[$@usn5..] Then 0[9e1..][0x0..] End Descending,{_usn4}[@usn5] Asc Skip 010 Ends With {999} Limit usn1 In True In 12.e12"),
    octest_legacy:ct_string("Create `2esn`=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3)),`7esn`=((_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})-[_usn3?:@usn6*..{`8esn`:$@usn6 Contains {@usn6}}]->(@usn6 :`8esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})) Union With Distinct $@usn6 Is Null Is Null As `7esn`,2.12 Starts With {999} As `6esn` Skip $_usn4[..0X0123456789ABCDEF][..$@usn6] Limit [_usn3 In 010 Contains $`2esn` Contains 01 Where {_usn4} Ends With .e1 Ends With 0x0|{#usn8} Ends With $999][Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`|123456789 Is Null)..] Unwind {`1esn`} =~{usn2} =~$`` As _usn4 Load Csv With Headers From Reduce(_usn4={`7esn`} =~{7},`` In {`7esn`} Starts With {0} Starts With {1000}|_usn4 Is Not Null) Contains Case {#usn8} Ends With $999 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 Else 999[0.0..][$_usn4..] End Contains Case $0[{7}..][123.654..] When $#usn7 In `4esn` In 1.0 Then 's_str' Is Null Is Null When $`5esn` In $_usn4 In $`2esn` Then 2.12 =~1.0 =~{`4esn`} End As _usn3 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(_usn3 In @usn5 Contains 123.654| Create usn2=Allshortestpaths(((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[?*..$`4esn`]->(#usn8 :#usn7:`3esn`))),usn2=(:``) Load Csv From 9e0 Contains 7 Contains {usn2} As `8esn` ) Start ``=Relationship:_usn3(usn2={12}) ,`3esn`=Node:@usn5(usn1='s_str')Where `2esn` Starts With $0 Starts With 12.0 Union Optional Match Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))) Using Join On `2esn` Using Index _usn3:@usn6(`2esn`) Where 0x0[$123456789..$usn1] Load Csv With Headers From Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End Is Null As usn1  Union Optional Match Shortestpath(((`` {`1esn`:$@usn6 Is Not Null})-[@usn5? *07..07{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[#usn7:usn2 *01234567..]->(:`1esn`))) Using Scan #usn7:`3esn` Start #usn8=Rel:`4esn`({7}) ,`6esn`=Node:_usn3(usn2={12}) Merge _usn4=Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))) On Create Set `7esn`+=$`1esn`[``][\"d_str\"],{`7esn`:$999 Is Not Null Is Not Null}.usn2! =[12 Starts With $_usn4 Starts With $`6esn`][..Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null}))][..{@usn6:`2esn` Starts With `` Starts With .e12}]"),
    octest_legacy:ct_string("Create Unique `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})),((`3esn` :_usn3:`5esn`)<-[`` *..1000]->(:_usn3:`5esn`{`2esn`:0.12[..$`4esn`][..$`7esn`]})<-[:#usn7|:`` *..0X7]->(:`1esn`{`7esn`:9e0 Is Not Null})) Union All Remove count(Distinct).`8esn`,usn2($12[..$`6esn`][..$`1esn`],{`8esn`} =~usn1 =~12.e12).`4esn` Unwind 12e12 Starts With 00 Starts With {0} As usn2 Return *,$#usn8[{7}..{`6esn`}],(:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5) Starts With [`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Order By @usn5[Count(*)][07] Desc,{123456789}[01234567..Null] Desc,Extract(`5esn` In 9e1 In 0.0 In {999}|0e0[..$`2esn`][..Count(*)]) Contains #usn8(Distinct $1000 Contains $12) Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}|$`2esn`[..$#usn8]) Asc Limit [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Union All Detach Delete Reduce(_usn4='s_str' Contains 01 Contains $``,`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn5[Count(*)][07]) Contains Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Contains Filter(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)"),
    octest_legacy:ct_string("With Distinct 0xabc[..``],{#usn8} Ends With $999 As `8esn` Detach Delete Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]),123.654[..$`7esn`][...e0],0 In $`2esn` In {123456789}"),
    octest_legacy:ct_string("Optional Match usn2=Allshortestpaths(()),#usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`) Using Join On `8esn`,`3esn`,#usn7 Using Index ``:``(`8esn`) Where {1000} Contains 12.0 Contains @usn5 Load Csv From Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) As `8esn`  Create Unique `7esn`=(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5}) Union All Foreach(`3esn` In {usn1}[0..{@usn6}][True..usn2]| With  0.12[..$`4esn`][..$`7esn`] As `5esn` Order By {`6esn`}[0x0..{1000}] Descending,{999}[$7..] Desc Limit 00[$usn1..][0xabc..] Where 2.12 =~{``} =~0X7 With Distinct *,#usn8(`8esn`[`1esn`..{7}][{_usn4}..$_usn4],0xabc Is Null) Is Not Null,{999} Starts With {`3esn`} As #usn7 Order By {`1esn`} Contains {`5esn`} Contains 0e0 Asc,{12} Starts With 00 Starts With 12 Ascending,12e12[{#usn7}] Desc Skip {`3esn`}[.._usn3][..{#usn7}]) Create `3esn`=Shortestpath((((`7esn` :@usn6{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[ *..7]-(:`5esn`{`6esn`:$`6esn`,_usn4:12 Starts With $_usn4 Starts With $`6esn`})-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})))) Create Unique `6esn`=(((@usn6 :#usn7:`3esn`{@usn5:00[``..usn2][01..$999],`4esn`:{`3esn`}[$_usn3...e0]})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`` :#usn8:_usn3{#usn8:True[{1000}][1000],`6esn`:$`7esn` Is Null Is Null}))) Union Return Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..] Asc,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Desc Skip 12.0[{999}..$`5esn`][0xabc..$_usn3] With Distinct *,$@usn5 Starts With usn2 Starts With $`6esn` As @usn5,0.e0 Is Not Null Is Not Null Order By [07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Desc,0.e0[False] Descending Where {1000} Is Null Is Null"),
    octest_legacy:ct_string("With  00 Contains 9e0 Contains {7},[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Order By 0 Contains 010 Contains 0.12 Ascending,Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00])[``..][(`1esn` {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[``?:#usn7|:``{``:0X0123456789ABCDEF[{`5esn`}..]}]->(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})<-[? *010..{`5esn`:0Xa[_usn4..],``:$@usn6 Is Null Is Null}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})..] Asc"),
    octest_legacy:ct_string("Create `7esn`=Shortestpath((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)),`6esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})) Union Optional Match `3esn`=Shortestpath(((`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]}))) Using Scan `5esn`:`` Using Index @usn5:`4esn`(_usn4) Where {@usn5}[123.654] Union Remove Reduce(#usn8=0 In Null In 00,`4esn` In `4esn`[\"d_str\"..][123.654..]|{1000}[..$`3esn`][..2.12]).usn1,Reduce(`5esn`=@usn5 Starts With 0xabc,`7esn` In Null =~$`8esn` =~{`4esn`}|$@usn5[0.12..]).`6esn`?,None(#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]).`4esn`? Detach Delete [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]][@usn6(Distinct {`1esn`} In 0.e0 In $1000)..][Shortestpath((_usn4 :usn2:_usn4)-[#usn8:usn2*{`3esn`:0[9e12..{usn1}]}]-({`3esn`:0.12 In 123456789})<-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(:`8esn`{0}))..],Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Return Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null,#usn7 Ends With $@usn5 Ends With usn1 As `7esn` Order By Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}))[Extract(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999|12 Starts With $_usn4 Starts With $`6esn`)][{`8esn`:0e0 In `7esn` In $`8esn`,usn1:{usn1} Contains 0xabc}] Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit `7esn` Contains 01234567 Contains `1esn`"),
    octest_legacy:ct_string("Start usn2=Rel:usn2(`7esn`=\"d_str\") ,usn2=Relationship:_usn3({7})Where 0x0[$123456789..$usn1] Union Load Csv With Headers From {999}[{`1esn`}..``][{12}..$123456789] As usn2  Remove $usn2.`3esn`,[`` In {0} Is Not Null Is Not Null Where 0.12[..$`4esn`][..$`7esn`]|0X0123456789ABCDEF Starts With {`2esn`} Starts With Null].``,`8esn`(07 Starts With 123.654 Starts With 1.0).`5esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 7 Is Null As `1esn` Fieldterminator \"d_str\" Remove Reduce(#usn7=False Ends With #usn7 Ends With 1.e1,`` In 9e0 Is Not Null|True[..$7][..$`4esn`]).`2esn`,Reduce(#usn8=$`` =~_usn4 =~_usn4,_usn3 In 010 Contains $`2esn` Contains 01|`6esn` In _usn4 In {_usn4}).#usn8! Create Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`))))"),
    octest_legacy:ct_string("Detach Delete 0.e0 =~0.e0 =~12.e12 Delete [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]|{#usn8}[$`6esn`..12e12]][{`8esn`:$`` Ends With 9e0,`2esn`:010 Ends With {999}}] Create ``=Shortestpath(((#usn8 :`4esn`)-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})-[`8esn`:@usn6 *12..00{@usn5:$`8esn` Is Not Null Is Not Null,`3esn`:0e0 Is Not Null Is Not Null}]-(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))),@usn5=Shortestpath(((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[? *010..]->(@usn5 {`3esn`:`2esn`[#usn8]}))) Union All Remove Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]).#usn7,Reduce(`5esn`=$7 Starts With $12 Starts With 12e12,usn2 In 1000 Starts With $123456789|$`1esn` Ends With $`7esn` Ends With `2esn`).`2esn`,{``:{`1esn`} In $999 In {#usn8}}.#usn8? With Distinct $`4esn` Starts With #usn8 Starts With 2.12 As `8esn`,$`4esn`[0xabc..][.e12..],$_usn4 =~{#usn8} =~$`5esn` Skip [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn2 Ends With $@usn6 Ends With $_usn3|``[..`2esn`][..@usn5]][{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]}..] Where $`5esn`[$#usn7]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 12 In {#usn7} As `2esn`  Load Csv From Filter(@usn5 In {#usn8} Contains 7) Ends With Reduce(`1esn`=$`` Contains 123.654 Contains $#usn7,`` In {`7esn`} Starts With {0} Starts With {1000}|{`6esn`}[07..][{@usn5}..]) Ends With [12 Ends With {0} Ends With _usn4] As #usn7  Unwind $#usn7[$123456789..][{0}..] As usn1"),
    octest_legacy:ct_string("Create (`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})<-[`6esn`? *..1000{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True}]->(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}),``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) Union All Create `4esn`=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]})))"),
    octest_legacy:ct_string("With  *,$`4esn`[$999..][{`3esn`}..] Order By {@usn5} In {_usn3} In 0e0 Asc Union All Load Csv With Headers From (:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})[`1esn`()..][Single(`5esn` In 9e1 In 0.0 In {999} Where {`8esn`} In {`6esn`} In .e12)..] As @usn5  Union Detach Delete $``[0e0][{`6esn`}],Extract(`` In 9e0 Is Not Null Where {_usn4}[$`3esn`][$`3esn`]|07 In `2esn` In {`3esn`}) Is Null,(:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5) Starts With [`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Remove Case False Ends With #usn7 Ends With 1.e1 When #usn8[{#usn7}][12e12] Then {`8esn`} Is Not Null End.`2esn`!"),
    octest_legacy:ct_string("Unwind 12e12[12.0][{usn2}] As `7esn` Union Merge (#usn7 :``) On Match Set Reduce(#usn8=$0 In 999,`5esn` In usn2 Ends With 0.e0|#usn7 =~#usn8 =~{`6esn`}).`4esn`? =[123456789 Starts With 0e0,0.0 =~$usn1 =~$_usn3,@usn5 Starts With 0xabc][All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 01 Is Null Is Null)],`3esn` =12 Ends With {0} Ends With _usn4,_usn4+=12.0[12..9e1] Foreach(usn1 In _usn3 Contains $@usn5 Contains 01| Remove [01 Is Null Is Null,$`8esn`[{``}..]]._usn3!,None(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]).@usn6,`2esn`(Distinct {@usn5} In {_usn3} In 0e0,{`7esn`} Starts With {0} Starts With {1000}).@usn6)"),
    octest_legacy:ct_string("Unwind #usn7 In 2.12 In $_usn3 As _usn3 With  (_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])],{_usn4}[$`3esn`][$`3esn`] Where Null[#usn7][07]"),
    octest_legacy:ct_string("Load Csv With Headers From `1esn` Is Null As #usn8 Fieldterminator 's_str' Load Csv From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] As usn1  Optional Match ((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})),(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null}) Using Index @usn5:`4esn`(_usn4) Using Index _usn4:usn1(usn2)"),
    octest_legacy:ct_string("Unwind {#usn7} In {`6esn`} As `2esn` Remove Reduce(@usn6=$`4esn` Starts With #usn8 Starts With 2.12,_usn4 In $`` =~$1000 =~7|$_usn3 Is Not Null).`7esn`?,{usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}.@usn5? Union All Unwind Extract(#usn8 In $`8esn`[{``}..] Where @usn6|False =~$`8esn`)[Shortestpath((:usn1$`1esn`))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa[_usn4..]|`` Starts With 0.0 Starts With $`1esn`)..] As `1esn` Optional Match #usn7=(((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[?:`7esn`|:`2esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}}]->({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3))) Where {`8esn`} Is Not Null Union All Unwind 0[9e1..][0x0..] As #usn7"),
    octest_legacy:ct_string("Remove {_usn4:00[``..usn2][01..$999]}.`7esn`?,Case {``} =~.e12 =~{0} When $1000[$`7esn`..1e1] Then 01234567 Is Null Is Null End.`1esn`?,Reduce(`1esn`={`8esn`} Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|12e12['s_str'..`8esn`][usn2..$_usn4]).`4esn`? Union All Create (_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})"),
    octest_legacy:ct_string("Load Csv With Headers From _usn4 Is Not Null As _usn3 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique Shortestpath((((_usn3 {`4esn`:$999[0.12][0xabc],`8esn`:7 Is Null Is Null})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(usn2 :#usn7:`3esn`)<-[`8esn`:`1esn`|`6esn`]->(`1esn` $#usn8)))),(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[#usn8?:@usn5|:`1esn` *0Xa..{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` {usn1:{`8esn`} Is Not Null}) Optional Match (`5esn` :usn2:_usn4)-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}) Using Index @usn5:`4esn`(_usn4) Unwind $#usn8[..9e1] As _usn3"),
    octest_legacy:ct_string("Unwind {12}[..{usn1}][..`2esn`] As `3esn`"),
    octest_legacy:ct_string("Create Unique `1esn`=(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) Return Distinct [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As @usn6,(:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) As `` Order By {0} Starts With {usn1} Asc,$`2esn`[..00][..{`7esn`}] Descending,.e0[@usn6..] Asc Skip {`1esn`}[0e0..][True..] Union With Distinct {999}[{`7esn`}],Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{`7esn`} =~{7})[{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}..][Shortestpath((((:#usn8:_usn3)<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})<-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(`4esn` :`8esn`))))..] As `8esn` Order By {`3esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`],usn2:`1esn` Starts With $`7esn` Starts With `8esn`}[[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 010[123456789]|Null Contains \"d_str\" Contains {@usn6}]..[{`4esn`}[..0Xa]]] Asc"),
    octest_legacy:ct_string("With Distinct *,{#usn7} Contains {`8esn`} Contains usn2 As `3esn`,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `8esn` Order By [$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null Asc Limit [$_usn4 Contains {1000},{`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0],$`4esn` In $@usn5][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..Reduce(#usn7={0} Ends With $@usn5 Ends With 010,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{999} Is Null Is Null)][{@usn5}..[`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12}|`2esn` Ends With $`6esn` Ends With `2esn`]] Where $`` Ends With 9e0 Unwind 2.12[12][$`7esn`] As `1esn`"),
    octest_legacy:ct_string("Delete #usn8[$usn1..$`3esn`],12.0[{999}..$`5esn`][0xabc..$_usn3] Merge `5esn`=((:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-({#usn8:{@usn5} In `6esn` In .e0})<-[`3esn`?]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})) On Match Set `2esn`:``,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`? =$usn1 Starts With {`5esn`} On Create Set [{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1].#usn8? ={usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}[Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8])][Reduce(#usn7={`6esn`}[..$12][..0.e0],#usn8 In $`8esn`[{``}..]|$0 Starts With True Starts With $_usn4)]"),
    octest_legacy:ct_string("Foreach(_usn3 In usn1[12e12..]| Create _usn3=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]}))) With  {`1esn`}[..\"d_str\"],$0[{#usn8}][\"d_str\"] As _usn4,0X0123456789ABCDEF[{`4esn`}][$_usn4] As _usn4 Order By Case When $`5esn` Is Null Then 0X0123456789ABCDEF End Is Not Null Is Not Null Desc Limit [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null Create Unique usn1=((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})),Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`))))"),
    octest_legacy:ct_string("Load Csv From $usn1 Is Null Is Null As @usn6 Fieldterminator \"d_str\" Load Csv With Headers From Case {`2esn`} =~Count(*) =~{#usn8} When {_usn3} =~`6esn` =~$`8esn` Then `1esn` Is Null When $123456789 =~$`7esn` Then 9e12[_usn4..1.e1][{`3esn`}...e1] End[(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[:`4esn` *01{`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)..] As usn2  Detach Delete $`2esn` In $999 In 0.12,(:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5) Starts With [`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null],{`8esn`} Union All Merge Shortestpath((((@usn5 :`7esn`:#usn8)-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})))) On Create Set `8esn` =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}]|$`2esn`[Null][{usn2}]),Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4).usn1! =$`3esn` In $#usn8 In {_usn3},Allshortestpaths(({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})).`8esn`? ={0} Is Not Null Is Not Null Unwind {_usn4:{123456789} Is Null Is Null}[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{1000} Contains 12.0 Contains @usn5]] As `7esn`"),
    octest_legacy:ct_string("Load Csv From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] As usn1  Union All Create Unique ((`1esn` {#usn8:True[..$7][..$`4esn`]})),#usn8=((_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) Unwind {``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] As `2esn` Match `4esn`=Shortestpath((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)) Using Join On `7esn`,``,#usn7 Using Join On usn2,`1esn` Where {`6esn`}[07..][{@usn5}..] Union Delete $123456789 Contains {`2esn`} Contains 's_str',{12} Contains $`4esn` Contains usn2,Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})]"),
    octest_legacy:ct_string("Create `6esn`=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))),Allshortestpaths((((`5esn` {#usn7:{@usn5}[123.654]})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-(:_usn3:`5esn`{`2esn`:0.12[..$`4esn`][..$`7esn`]})))) Load Csv From count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0]) Is Not Null As _usn4 Fieldterminator 's_str' Union Create Shortestpath((`3esn` :usn1)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`7esn`?:`8esn`|:#usn8 *0Xa..]-(_usn3 {usn1:{`8esn`} Is Not Null})),usn2=Shortestpath(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7}))) With  *,$@usn6[`4esn`..{999}][$``..{@usn6}] As `6esn`,$`8esn`[{``}..] As `4esn` Order By 9e12 =~01 =~$_usn3 Descending,.e12[_usn4..][{`5esn`}..] Asc Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] Limit $usn2 Contains $usn1 Where 7 Is Null Union All Create `6esn`=(:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}) Start `3esn`=Relationship( {12}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 9e1 Starts With $123456789 Starts With {#usn7} As #usn7 Fieldterminator 's_str' Unwind ``[{@usn6}] As `2esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 12 =~@usn5 =~{#usn8} As `7esn` "),
    octest_legacy:ct_string("Delete 0[9e1..][0x0..] Union Unwind 's_str' Contains 0xabc As _usn3"),
    octest_legacy:ct_string("Delete True[#usn8..][$123456789..],{999} Contains {_usn4} Contains usn1 Union All Merge Shortestpath((((usn1 )-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})))) On Create Set `8esn`+=Extract(#usn8 In $`8esn`[{``}..] Where 01 Contains {0} Contains $`5esn`|0X0123456789ABCDEF =~123.654 =~{_usn4}) In Filter(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) In [123456789 Starts With 0e0,`3esn`[{``}..$#usn8]],Case When 9e1[$`5esn`..0xabc] Then \"d_str\" Contains `6esn` Contains $12 Else {#usn8} Starts With 123456789 Starts With $`1esn` End.#usn8 =0xabc[Count(*)..`6esn`][@usn5..$usn1] On Match Set `7esn` ={`3esn`} Is Null Is Null,(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8).`7esn`? =`8esn`[`1esn`..{7}][{_usn4}..$_usn4],_usn4+=07[.._usn4][..$@usn5]"),
    octest_legacy:ct_string("Return Distinct Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}],0Xa As #usn8 Optional Match Shortestpath(((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(`8esn` :_usn3:`5esn`{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True})-[:_usn4{#usn7:{7} Contains {#usn8} Contains {7},`6esn`:Count(*) Starts With $7}]-(`5esn` :@usn5:`7esn`)))) Using Index _usn4:`7esn`(usn2) Using Scan _usn3:usn1 Where {1000} Is Not Null Is Not Null Create Unique `7esn`=Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`)))),(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}) Union Create Unique `4esn`=Allshortestpaths(((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`5esn` :_usn4:`4esn`))) Return Distinct *,7[0e0..][$`1esn`..],({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End] Limit #usn7 =~#usn8 =~{`6esn`} Merge (`4esn` :`3esn`:usn2) On Create Set Case When 07[..0Xa] Then 0xabc In $`5esn` In @usn5 Else Count(*) In `` End.usn2? =$999[0.12][0xabc],`5esn`+=0.e0 Ends With Count(*) Ends With `8esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 12 =~`7esn` =~#usn8 As _usn4  Load Csv With Headers From 0e0[..$123456789] As @usn6 Fieldterminator 's_str' Union Delete ({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End],010 Ends With `8esn` Ends With $_usn4,{`3esn`}[{`8esn`}..$7][0e0..0x0] Create Unique #usn7=Shortestpath((((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[:#usn8|`1esn` *12..00]->(`7esn` :#usn8:_usn3)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))) Create Unique (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null}),((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`})) Union All Unwind {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As `2esn`"),
    octest_legacy:ct_string("Foreach(@usn5 In Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` )| Remove Allshortestpaths(((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12}))).`1esn`,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}).``,Shortestpath(({@usn5:$#usn7 =~$`1esn`})).`3esn`) Create Unique Allshortestpaths((usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Union All With  Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,{#usn7} Contains {`8esn`} Contains usn2 As _usn4 Order By $999 Asc Limit exists(Distinct {12}[..9e1],{``}[...e1]) Is Not Null Is Not Null Where {1000}[..$`3esn`][..2.12] Merge Allshortestpaths(({``:{999} Ends With 1e1})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})-[`4esn`{usn1:1e1[..1e1]}]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Return *,[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6},$`7esn` Contains 01 Contains @usn6 As `4esn` Skip Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null Union All Return #usn8[..0Xa] As usn2 Limit {@usn5} =~Null =~$`4esn` Load Csv From $usn1[$0..Count(*)][@usn6..$12] As #usn8  Unwind {@usn6}[..$7][..{`6esn`}] As ``"),
    octest_legacy:ct_string("Start `6esn`=Relationship:@usn6(usn2=\"d_str\") ,usn2=Rel:``(#usn8={`8esn`}) Create `4esn`=((:@usn5:`7esn`{usn2:9e12 In $_usn3})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})) Union All Foreach(`8esn` In [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}][Reduce(`8esn`={@usn5} In `6esn` In .e0,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|$@usn5 Ends With 00 Ends With 12.e12)]| With  Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,{#usn7} Contains {`8esn`} Contains usn2 As _usn4 Order By $999 Asc Limit exists(Distinct {12}[..9e1],{``}[...e1]) Is Not Null Is Not Null Where {1000}[..$`3esn`][..2.12] Return Distinct Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1)) Ends With Case When 0x0 Contains 0x0 Contains {`1esn`} Then {`5esn`}[{_usn3}..][.e0..] Else $7 Is Not Null Is Not Null End Ends With (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) As usn1,Reduce(usn1=`8esn` Contains 123.654 Contains {`7esn`},`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|1e1[{`6esn`}..{1000}][07..123456789])[(:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[?:usn2{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})] Order By $usn1 Ends With $`3esn` Ends With 0x0 Descending,.e1[@usn5][0X0123456789ABCDEF] Ascending,07 Starts With $#usn8 Starts With usn2 Descending Limit 1.0[{0}..]) Unwind {`8esn`} As `4esn`"),
    octest_legacy:ct_string("Return 0.12[..$`4esn`][..$`7esn`] As `5esn` Order By {`6esn`}[0x0..{1000}] Descending,{999}[$7..] Desc Limit 00[$usn1..][0xabc..] Merge @usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7} Contains None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654) Contains Allshortestpaths((:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})) As `1esn`  Merge `4esn`=((`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})-[?:`8esn`|:#usn8]-(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`7esn`?:`8esn`|:#usn8 *999{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(`1esn` {`5esn`:12 In {#usn7}}))"),
    octest_legacy:ct_string("Create Unique @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) Load Csv From 12.e12 In {@usn6} As _usn4  With Distinct *,$usn2 In {`5esn`} In 12.0 As _usn4 Order By `3esn`[..$#usn7][..{`8esn`}] Descending,$`4esn`[0xabc..][.e12..] Ascending,Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Asc Where 07 In `2esn` In {`3esn`} Union All Merge Allshortestpaths(((`6esn` {``:$#usn8[..9e1]})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))) On Create Set ``+=Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]),`` =#usn8[..0Xa],Case {usn2} =~{1000} When `1esn` In `2esn` In $@usn6 Then {0}[{`4esn`}..] When $0 In 999 Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] Else 0Xa[..`6esn`] End.usn2! =12 Ends With {999} Ends With 's_str' On Create Set [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {@usn5}[`4esn`][12.0]].`8esn` =Reduce(`7esn`=usn1[..$usn2][..0],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn6[..0X0123456789ABCDEF][..{`6esn`}])[{`5esn`:0Xa[..07][..`2esn`]}..Any(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`)][None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])..{``:01234567 Is Not Null}],[123.654 Is Null,$@usn5 Is Not Null Is Not Null,01 Is Null Is Null]._usn3? =$_usn3 Is Not Null,`2esn` =[`` In {`7esn`} Starts With {0} Starts With {1000} Where `3esn` =~usn2 =~7|$``[$@usn6..usn1][usn1..7]] Contains {`2esn`:0.12 Ends With #usn8 Ends With $1000} Create Unique (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Remove {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`}.#usn8!,[{`8esn`} In {`6esn`} In .e12]._usn3? Union Create `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Foreach(`5esn` In {``}[$@usn5]| Match ((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]})) Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF Remove Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12|{`1esn`} Is Null).usn2?) Optional Match @usn5=(`1esn` {`5esn`:12 In {#usn7}}),`7esn`=Shortestpath((`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})) Using Index ``:``(`8esn`) Where $#usn7 =~$`1esn` Union Remove Case When 010[``..123456789][@usn6..{12}] Then $#usn8[@usn5..9e0][2.12...e1] Else {#usn8} In $7 End.`6esn`,{`6esn`:{@usn5}[`4esn`][12.0]}.`1esn`?,All(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]).`4esn` Merge _usn3=((@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]})<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})) On Create Set `7esn`+=``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] On Match Set (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})<-[#usn7?{`7esn`:12.0 Is Not Null Is Not Null,`6esn`:.e12[..010][..{0}]}]-({@usn6:0e0 =~{usn2}}).usn1! =$`8esn`[{``}..] Create (((`8esn` $#usn8)-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]-(:`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[`4esn`:``]->(@usn6 :#usn7:`3esn`))) Union Unwind $_usn4 Contains 0 Contains False As _usn3"),
    octest_legacy:ct_string("Load Csv From (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) Contains Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where usn2[_usn3..{usn1}][@usn6..{`4esn`}]) As `3esn` "),
    octest_legacy:ct_string("Remove [`5esn` In usn2 Ends With 0.e0 Where $_usn3[..@usn6][..{999}]|usn1 Contains 9e1 Contains 0X0123456789ABCDEF].`5esn`!,_usn4:`1esn`,(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})-[ *..7]-(:`5esn`{`6esn`:$`6esn`,_usn4:12 Starts With $_usn4 Starts With $`6esn`}).#usn8! Remove {@usn5:1.0 Is Not Null Is Not Null,usn1:`1esn`[0X7..][#usn7..]}.`8esn`?,{_usn3:'s_str' Contains {_usn4}}.usn1! Union All Return *,(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As #usn8,`7esn`[1.e1..#usn8] Skip 010 Ends With {999} Limit {usn2} Ends With $`7esn` Ends With {`1esn`} Merge `7esn`=Shortestpath(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]}))) On Create Set `` =#usn8[{#usn7}][12e12],`4esn`+=$_usn4 =~{#usn8} =~$`5esn`,usn1 =$`1esn` Ends With $`7esn` Ends With `2esn`"),
    octest_legacy:ct_string("Create Unique `8esn`=Shortestpath((_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})) Unwind 's_str' Contains 0xabc As _usn3 Merge (({`8esn`:{7} In `1esn` In 123456789})) On Create Set `2esn`+=Filter(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}) Ends With Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End Ends With {`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}},#usn7+=`` Ends With $usn1 Ends With $`2esn`,Shortestpath((`4esn` :@usn6{`7esn`:{#usn8} In $7})<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`1esn`:_usn3|:@usn5*$1000]->({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})).@usn5! ={_usn4}[@usn5] Union Create Unique Shortestpath((`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})) Unwind 9e0[.e12..][$`3esn`..] As usn1 Unwind $@usn5 As `8esn`"),
    octest_legacy:ct_string("Match usn1=({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})<-[`7esn`?:#usn8|`1esn` *..7]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) Using Join On #usn7 Using Index `5esn`:`7esn`(@usn6) Match (:#usn7:`3esn`{`5esn`:$_usn4[1.0..@usn6]})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}) Using Scan #usn8:`1esn` Where $`5esn`[1e1..] Remove [#usn8 In $`8esn`[{``}..] Where {#usn8}[$`6esn`..12e12]].`5esn`! Union All Return Distinct Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where Null Contains \"d_str\" Contains {@usn6})[[usn2 In 1000 Starts With $123456789 Where 0[9e12..{usn1}]]][Reduce(`8esn`=`5esn` Is Null,`5esn` In 9e1 In 0.0 In {999}|{usn1} Is Null)],'s_str'[`4esn`..] As `3esn` Skip (`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5)-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}) Limit 0X7 =~{_usn3} =~0x0 Load Csv From 1.e1 Ends With $12 Ends With #usn8 As @usn6  Return Distinct {usn1} Contains 0xabc,7 Is Null Is Null,Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) Limit Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}]"),
    octest_legacy:ct_string("Match `4esn`=Shortestpath((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)) Using Join On `7esn`,``,#usn7 Using Join On usn2,`1esn` Where {`6esn`}[07..][{@usn5}..] Load Csv From 0Xa[..`6esn`] As `2esn`  Union All Optional Match `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) Using Scan `5esn`:usn1 Using Scan `4esn`:`8esn` Where $#usn7 =~$123456789 =~12 Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] With Distinct Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] As usn2,$#usn8 Ends With #usn8 Ends With 12 Skip `7esn` Is Null"),
    octest_legacy:ct_string("Unwind {`8esn`} In {`6esn`} In .e12 As _usn4 Load Csv From (:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) As `3esn` Fieldterminator 's_str' Union All Unwind 07[..0Xa] As `3esn` Create Unique (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Union All Remove exists(1000 =~{`1esn`}).usn2,All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2])._usn4!"),
    octest_legacy:ct_string("Foreach(@usn5 In Case `8esn` Contains 123.654 Contains {`7esn`} When 01[$#usn8..][7..] Then 010 When 01[$_usn4..][0..] Then True Ends With {`7esn`} Ends With @usn5 End| Load Csv With Headers From $0[{7}..][123.654..] As `1esn` Fieldterminator \"d_str\" With  01234567[`1esn`] As `3esn` Skip Allshortestpaths(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn3 :`8esn`)) Starts With {``:9e1[$`5esn`..0xabc]} Starts With 123.654 Limit 0xabc[..``]) Unwind Extract(`` In 9e0 Is Not Null Where {_usn4}[$`3esn`][$`3esn`]|07 In `2esn` In {`3esn`}) Is Null As @usn5 Union All Return Distinct *,.e12[$`2esn`..][{`3esn`}..] As `3esn`,{usn1} Contains 0xabc Skip #usn8[Null] Limit $`1esn` Ends With $`7esn` Ends With `2esn` Create _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})) Union Start _usn4=Node:_usn3({_usn3}) Where 123.654 Is Null Create #usn7=(((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})))"),
    octest_legacy:ct_string("Merge (:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) On Create Set @usn6 =Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]],_usn3+=#usn7 =~#usn8 =~{`6esn`},usn2 =Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] Union Remove Single(#usn7 In 0e0 Is Not Null Is Not Null Where 9e1[{usn2}..$1000]).#usn7!"),
    octest_legacy:ct_string("Merge `7esn`=(`8esn` :`6esn`)<-[`5esn`:`2esn`|_usn3{usn1:9e1[..`4esn`]}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})<-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(:#usn7:`3esn`{_usn4:{`3esn`}[`1esn`]}) On Match Set Case `3esn`[{``}..$#usn8] When 12 =~0xabc Then {`1esn`}[`8esn`][{usn2}] End.`4esn`? =0xabc Is Not Null,#usn7:`6esn`,Reduce(_usn3=Null[$`1esn`..][7..],`` In {0} Is Not Null Is Not Null|9e12[`6esn`..{12}]).`1esn` ={0} Starts With usn2 Union Create `7esn`=Shortestpath((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)),`6esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})) Union Unwind $@usn6[`4esn`..{999}][$``..{@usn6}] As `3esn`"),
    octest_legacy:ct_string("Foreach(`4esn` In .e0 Contains $`6esn` Contains $usn2| Create Unique Shortestpath((@usn6 :`2esn`:@usn5)<-[@usn5?]-(:_usn3:`5esn`))) Union With Distinct *,1e1[{7}..{`5esn`}] As `2esn`,123.654 =~010 =~`6esn` As `5esn` Order By {usn2}[{999}..][0Xa..] Descending,[{`6esn`}[07..][{@usn5}..]][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{usn2} Is Not Null Is Not Null]..][$``..] Asc Limit .e12 Contains 00 Contains usn2 Where .e1 In {`6esn`} In \"d_str\" Foreach(`5esn` In {usn1} Contains 0xabc| With Distinct *,$_usn4 Is Null Limit usn1 In {usn1} In 0e0 Where 0Xa Contains 0X7 Contains {``} Detach Delete $1000 In 7 In `1esn`,`7esn`[{`7esn`}..$1000],{`6esn`} Is Null) Union With  01 Is Null Is Null,0xabc In $`5esn` In @usn5 As #usn8,$`1esn` =~$`6esn` =~9e1"),
    octest_legacy:ct_string("Unwind Extract(#usn7 In 0e0 Is Not Null Is Not Null Where {`1esn`} Starts With usn2)[..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``)][..Case When $@usn6 Is Null Is Null Then \"d_str\" Is Null Is Null When {usn2} =~{1000} Then `2esn` Ends With {#usn8} End] As `2esn` Create Unique (`7esn` :@usn5:`7esn`{usn1:0.12 Ends With #usn8 Ends With $1000,`4esn`:{`8esn`} In {`6esn`} In .e12})<-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]->(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0}),Shortestpath((usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[#usn7{``:9e1[..`4esn`]}]-(usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]}))"),
    octest_legacy:ct_string("Optional Match usn1=((:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})) Where @usn5[`5esn`] Union Unwind {``}[12e12..`6esn`] As `3esn`"),
    octest_legacy:ct_string("Return Distinct *,0xabc[{@usn5}..][Count(*)..] Order By `5esn` In $_usn3 In 0Xa Asc,{`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Desc,Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12) Is Null Is Null Ascending Limit {``} Ends With 0Xa Ends With $999 Merge (#usn8 :`6esn`)-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`})<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]}) On Match Set @usn6+=Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]) Is Null Is Null,@usn5+={`6esn`}[..01234567][..$_usn4] On Create Set [`` In {`7esn`} Starts With {0} Starts With {1000}|$`5esn` Contains 123456789 Contains $`1esn`].`8esn` ={`1esn`}[$`4esn`..@usn5][\"d_str\"..{123456789}],None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}).`1esn`? ='s_str'[`4esn`..] Merge Shortestpath((((usn1 )-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})))) On Create Set `8esn`+=Extract(#usn8 In $`8esn`[{``}..] Where 01 Contains {0} Contains $`5esn`|0X0123456789ABCDEF =~123.654 =~{_usn4}) In Filter(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) In [123456789 Starts With 0e0,`3esn`[{``}..$#usn8]],Case When 9e1[$`5esn`..0xabc] Then \"d_str\" Contains `6esn` Contains $12 Else {#usn8} Starts With 123456789 Starts With $`1esn` End.#usn8 =0xabc[Count(*)..`6esn`][@usn5..$usn1] On Match Set `7esn` ={`3esn`} Is Null Is Null,(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8).`7esn`? =`8esn`[`1esn`..{7}][{_usn4}..$_usn4],_usn4+=07[.._usn4][..$@usn5] Union Foreach(@usn5 In 2.12[True]| Remove @usn6(Distinct {`1esn`} Ends With 2.12 Ends With _usn4).@usn5? Create `3esn`=((:@usn5:`7esn`{`7esn`})),`5esn`=Allshortestpaths((_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}))) Optional Match @usn5=((`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]}))"),
    octest_legacy:ct_string("Foreach(`3esn` In {`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}))))| Unwind 0 In Null In 00 As usn1) Unwind 12 Ends With _usn4 As `3esn` Remove `6esn`:`` Union Delete {_usn4}[$#usn7..] Load Csv From {12}[..9e1] As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv From {123456789}[..010][..#usn8] As _usn3  Union All With  01234567 Is Not Null As usn2,12 =~@usn5 =~{#usn8} As usn2 Limit True Is Null Is Null Unwind $0[{#usn8}][\"d_str\"] As `` Remove Single(_usn4 In $`` =~$1000 =~7 Where 01[$_usn4..][0..]).#usn7,Allshortestpaths((`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})).`4esn`?,{`3esn`:2.12 =~.e12 =~#usn8}.`3esn`! Union Merge `6esn`=(#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}) Create ``=Shortestpath(((:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))),#usn8=Shortestpath((:usn2:_usn4)-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3}))"),
    octest_legacy:ct_string("With Distinct All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})],{`2esn`} =~{@usn6} As `6esn`,{1000} In $`2esn` In $_usn3 As `6esn` Skip $`6esn` Limit {usn1} Contains {@usn6} Contains $0 Union All Remove Extract(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`|'s_str' Is Null Is Null).`7esn`"),
    octest_legacy:ct_string("Detach Delete 0x0 Contains 0x0 Contains {`1esn`},$`6esn`[..``][..{@usn5}],$usn2 Contains Allshortestpaths((({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 ))) Contains Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})) Union All Foreach(`3esn` In 12.0[{999}..`7esn`][$`8esn`..False]| Create Allshortestpaths(((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})))) Return *,9e12 =~01 =~$_usn3,$`8esn`[...e1] Order By Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])] Ascending,$_usn3 Ends With $999 Ends With 01 Desc,07 Is Not Null Is Not Null Ascending Skip $`7esn` Contains 01 Contains @usn6 With  {@usn5} Contains $999 Contains 0.12 As @usn5 Where `5esn` Is Null Is Null Union All Optional Match usn2=Shortestpath((((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})<-[`8esn`? *0X0123456789ABCDEF..{`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})))),Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))) Match usn1=Allshortestpaths(((`2esn` :`5esn`{``:`1esn`[``..$``]}))),(:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) Where #usn8[Null] Match usn1=Shortestpath(((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})))"),
    octest_legacy:ct_string("Create usn2=(@usn5 :`4esn`)-[? *..123456789{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]->(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00}),`3esn`=Allshortestpaths(((`4esn` :`8esn`)-[`7esn`:`1esn`|`6esn` *0xabc..]->(`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})))"),
    octest_legacy:ct_string("Match Allshortestpaths(((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}))) Where 9e12[_usn4..1.e1][{`3esn`}...e1] Optional Match `6esn`=(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0}) Using Scan `4esn`:`7esn` Union All Create Unique `7esn`=(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5}) Merge usn1=Allshortestpaths((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))) On Match Set #usn8 =``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] On Match Set @usn6 =[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]],usn1+=$`6esn` Ends With 1000 Ends With False,@usn6 =All(usn2 In 1000 Starts With $123456789 Where 12 Starts With $_usn4 Starts With $`6esn`) Contains {@usn5:0X0123456789ABCDEF[...e12][..0.12],`8esn`:{123456789} Starts With {`5esn`}} Contains Case {@usn6} Ends With `5esn` Ends With 00 When $`8esn` Is Not Null Is Not Null Then 12[1e1] When {`8esn`} Is Not Null Then 9e1[{usn2}..$1000] Else 1.e1[$_usn4..999] End Foreach(`2esn` In .e12 Contains 00 Contains usn2| Remove Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}]).`6esn`?,[{_usn3}[{``}..]].`4esn`!,(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[ *0Xa..{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}]-(`1esn` :#usn7:`3esn`)<-[@usn6 *12..00]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}).`3esn`?) Union All Detach Delete $`7esn` Contains `1esn` Contains {usn1},$`8esn` Is Not Null Is Not Null,{`5esn`} Starts With $`4esn` Remove Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`3esn`}[`1esn`]).usn2,`4esn`(False Starts With #usn7 Starts With 12e12).`5esn`!,{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}.`2esn`! Create Unique ``=Allshortestpaths((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1))),#usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]})))"),
    octest_legacy:ct_string("Merge (((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))) On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Create #usn8=((:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})) Create (({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})),Shortestpath(((:#usn8:_usn3{`3esn`:`2esn`[#usn8]})<-[{`8esn`:{_usn3} Starts With $`4esn` Starts With {_usn4},`3esn`:$_usn3[123456789][0X7]}]->(:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]}))) Union Start `3esn`=Relationship:#usn7('s_str')  Union All Foreach(`3esn` In 123456789[..12.0][..0e0]| Load Csv With Headers From None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As _usn3 Fieldterminator \"d_str\" Unwind $#usn7[1.0..01][0x0..123.654] As `1esn`) Load Csv With Headers From 9e1[..`4esn`] As @usn6 Fieldterminator \"d_str\" Delete (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) In Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]),None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]),_usn4 Is Not Null"),
    octest_legacy:ct_string("Remove Extract(`` In 9e0 Is Not Null Where 2.12 =~.e12 =~#usn8).#usn8? Load Csv With Headers From $`2esn` Ends With {1000} Ends With `7esn` As `7esn`  Unwind {1000}[..$@usn6][..$`6esn`] As @usn6"),
    octest_legacy:ct_string("Remove Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 0Xa|{12} Starts With 00 Starts With 12).@usn5?,(:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` ).usn1"),
    octest_legacy:ct_string("Return Distinct `7esn` Is Null As usn1,$`6esn` Ends With $`3esn` Ends With 07 As #usn8,1e1 In #usn8 As `8esn` Order By $`` Ends With usn1 Descending,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] Asc,Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}] Descending Foreach(`3esn` In 0 Is Null Is Null| Delete 0e0 =~{usn2},#usn8[1e1][$12]) Merge (({`8esn`:{7} In `1esn` In 123456789}))"),
    octest_legacy:ct_string("Start `2esn`=Node:usn1(`5esn`='s_str') ,`5esn`=Node:_usn3(usn2={12})Where {`1esn`} In $999 In {#usn8}"),
    octest_legacy:ct_string("Remove Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|$7 Contains {1000} Contains 0X7).#usn8!,Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {_usn4} Ends With .e1 Ends With 0x0|0Xa).`2esn` Union Return Distinct *,Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] As ``,1.0[$`5esn`..{``}] Union All Foreach(`` In #usn8[{#usn7}..12.e12][7..`8esn`]| Optional Match Shortestpath((`2esn` )),Allshortestpaths(((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))) Unwind {#usn7} Contains {`8esn`} Contains usn2 As @usn6) With  *,010 Contains $`2esn` Contains 01,$0 In 999 As `6esn`"),
    octest_legacy:ct_string("Unwind {`8esn`:@usn6[2.12..][`5esn`..]} Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]|{`2esn`} Starts With 1e1) As `1esn` Optional Match (({`5esn`:{@usn5}[...e1][..01]})-[``? *..00]-(_usn3 :`8esn`)) Using Join On usn1,#usn7 Using Index #usn8:usn1(`2esn`) Create Unique (`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}),Allshortestpaths(((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]}))) Union Remove Filter(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]).`6esn`?,Case {123456789} Contains `7esn` Contains 010 When 0xabc Is Not Null Then 2.12 Ends With {@usn5} Ends With `2esn` End._usn4!,`8esn`:_usn4:`4esn` Unwind Reduce(``=$`7esn` Contains `1esn` Contains {usn1},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|0[9e12..{usn1}]) =~[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12] =~[`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]] As `5esn` Load Csv From [`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 07 Ends With `1esn` Ends With {@usn5}] Contains All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) Contains (`7esn` :@usn5:`7esn`{usn1:0.12 Ends With #usn8 Ends With $1000,`4esn`:{`8esn`} In {`6esn`} In .e12})-[?:#usn7|:`` *010..]-(#usn8 :`1esn`)-[? *..123456789{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]->(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00}) As `1esn` "),
    octest_legacy:ct_string("Start `6esn`=Node:_usn3('s_str') ,`8esn`=Node:#usn8(\"d_str\") Load Csv With Headers From [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}] In Allshortestpaths(((`3esn` :usn1)-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[?$`7esn`]->(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) As usn2 "),
    octest_legacy:ct_string("Foreach(usn2 In 12 Ends With {999} Ends With 's_str'| Start `6esn`=Rel:_usn4({usn2}) ,@usn6=Relationship:#usn8(@usn5='s_str')) Union All Foreach(`3esn` In 9e12 =~$usn2 =~9e1| Delete {`1esn`}[..\"d_str\"],$`5esn`[{usn2}..][Null..] Create Unique ``=Allshortestpaths(((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[ *12..00{`6esn`:$7[..{`8esn`}][..{999}]}]->(:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`4esn`{usn1:1e1[..1e1]}]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))),((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF}))) Optional Match (((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) Using Scan #usn7:`8esn` Using Index `2esn`:`6esn`(#usn7) Where 0.0 Union Foreach(`4esn` In {usn1:usn2[_usn3..{usn1}][@usn6..{`4esn`}],usn1:$7[..{`8esn`}][..{999}]}[..All(`` In {0} Is Not Null Is Not Null Where $#usn8[@usn5..9e0][2.12...e1])][..Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(_usn4 :_usn3:`5esn`{usn2:$999[0.12][0xabc]}))]| Load Csv From `7esn` Contains $`1esn` Contains 0X7 As `7esn` Fieldterminator 's_str') Foreach(#usn7 In $@usn5 Starts With usn2 Starts With $`6esn`| Start `6esn`=Rel( {`1esn`}) Where $`` =~$1000 =~7 Load Csv From {@usn6}[#usn8..][999..] As `3esn` )"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0X0123456789ABCDEF =~123.654 =~{_usn4} As @usn5  Optional Match `5esn`=((`2esn` :`5esn`{``:`1esn`[``..$``]})),(({`3esn`:0.12 In 123456789})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(`3esn` :_usn4:`4esn`)<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})) Where {@usn6} Ends With `5esn` Ends With 00 With Distinct *,[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] As `3esn`,$`1esn` Contains {`4esn`} Contains 0.12 As `8esn` Order By {1000}[{@usn5}..][1.e1..] Ascending,0.e0[False] Asc,Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc Limit 1000 Contains {999} Contains 9e12 Where `1esn` Is Null"),
    octest_legacy:ct_string("Detach Delete 0X7,{`2esn`}[`3esn`][{#usn7}] Union Optional Match usn1=(_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Using Join On @usn5 Using Index @usn6:`2esn`(`5esn`) Where {@usn6} Contains {`1esn`} Detach Delete {@usn5} Contains $999 Contains 0.12,Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}],Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|0Xa[..`6esn`]) =~[$@usn5 Ends With 00 Ends With 12.e12,$_usn3 Starts With 0.0 Starts With {#usn7}] =~Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When 0.12 Ends With #usn8 Ends With $1000 Then {`1esn`} In 0.e0 In $1000 End Return Distinct Single(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})][..@usn6(Count(*)[`8esn`..$`7esn`])] Skip 2.12 =~.e12 =~#usn8 Limit Extract(`5esn` In 9e1 In 0.0 In {999} Where {`1esn`} In $999 In {#usn8}|{usn2}[07])[[{999} Ends With 1e1,$7[..{`8esn`}][..{999}]]..][`4esn`(Distinct {usn2}[{999}..][0Xa..],`5esn`[12.0..])..]"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str' Is Not Null Is Not Null As `8esn`  Start `4esn`=Relationship:``({`5esn`}) ,`6esn`=Rel:@usn6(`5esn`={1000})Where 07[..0Xa]"),
    octest_legacy:ct_string("Start @usn5=Relationship:`3esn`(usn1='s_str') ,`4esn`=Relationship:_usn3({7}) Match _usn4=(({`6esn`:{12} Starts With 00 Starts With 12}))"),
    octest_legacy:ct_string("Create Unique (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}),Shortestpath(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7}))) Union Detach Delete True Is Null,$usn2[{_usn3}..],Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] Union Remove (:#usn8:_usn3{#usn8:_usn4 Contains {123456789} Contains $`5esn`,#usn7:$`6esn`})-[`3esn`?*{@usn6}]-(:_usn4:`4esn`{`6esn`:$`8esn`[...e1],@usn5:{@usn5} Is Not Null Is Not Null}).``,usn1:`3esn`:usn2 Optional Match ((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) Using Join On `7esn`,`3esn` Where {#usn8} Starts With 123456789 Starts With $`1esn`"),
    octest_legacy:ct_string("Match usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})) Where $`7esn` Contains `1esn` Contains {usn1} Union Foreach(`3esn` In [9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End| Create Unique _usn4=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) Load Csv From Null Ends With {`5esn`} As #usn8 Fieldterminator \"d_str\") With  *,{`7esn`:{``} Starts With \"d_str\",#usn7:0.0[$`1esn`..$`5esn`][usn2..$``]} Is Null Is Null As `7esn`,usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`} As _usn4 Where {_usn4} Contains {999} Contains 2.12 Start usn1=Rel:@usn5(`7esn`={#usn8}) ,usn1=Relationship:``(`4esn`=\"d_str\")Where 's_str'[`4esn`..] Union Optional Match (`3esn` :usn1)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`7esn`?:`8esn`|:#usn8 *0Xa..]-(_usn3 {usn1:{`8esn`} Is Not Null}) Using Scan `4esn`:`7esn` Using Scan `3esn`:`1esn` Where $`8esn` Ends With {`5esn`} Ends With $`4esn` Remove [`4esn` In `4esn`[\"d_str\"..][123.654..] Where `1esn`[$`4esn`..]].@usn6!,All(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)._usn4,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Remove Case {`8esn`} In 123.654 In usn2 When `7esn` In $`1esn` In $999 Then {@usn5} Is Not Null Is Not Null Else 1e1 Contains $`` Contains 12.0 End.#usn8!,Any(@usn5 In {#usn8} Contains 7 Where 0X7)._usn4,usn2:`1esn`"),
    octest_legacy:ct_string("Return Distinct {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`5esn`} =~9e0 =~{`2esn`} As `7esn`,$`7esn` Starts With 01 Starts With $7 Order By .e12 Contains 00 Contains usn2 Asc,Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Asc,1.0 =~$_usn4 Desc Foreach(usn2 In {0}[{`4esn`}..]| With  Case {``}[12e12..`6esn`] When 9e1[{usn2}..$1000] Then `2esn` Starts With `` Starts With .e12 When 01 Is Null Is Null Then {`4esn`}[$`8esn`..'s_str'] Else usn2[_usn3..{usn1}][@usn6..{`4esn`}] End[Reduce(`5esn`=0.12 Ends With #usn8 Ends With $1000,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|_usn3 Starts With 0X7)][Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End] As ``,1000 Starts With {@usn5} Starts With 123.654 Skip [{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Limit [{`2esn`} Starts With 1e1,$`2esn` In $999 In 0.12,True[#usn8..][$123456789..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null]] Where #usn8[1e1][$12] Delete Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]],$999 Starts With {@usn6},`1esn`[True..1000][`4esn`..{`3esn`}]) Optional Match Shortestpath((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))),`7esn`=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Using Index `1esn`:@usn5(usn1) Union All Create @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))),@usn5=Shortestpath(((`` :`2esn`:@usn5)-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]})-[`1esn`?:`7esn`|:`2esn`]->(`7esn` :`6esn`))) Detach Delete 010[123456789],{usn2} Contains 0e0 Contains 1.e1,Case When $7 In 00 Then $`` Ends With 9e0 End[[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0]][Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1)] Union Remove Case 9e12[`6esn`..{12}] When 9e0 Is Not Null Then `1esn` Starts With $`7esn` Starts With `8esn` When usn1 Contains 9e1 Contains 0X0123456789ABCDEF Then 00[``..usn2][01..$999] Else 01 Starts With 12e12 End.`1esn`,Reduce(usn2=9e0[..usn2][..0],_usn4 In $`` =~$1000 =~7|0X7)._usn3!,None(`5esn` In usn2 Ends With 0.e0 Where $`6esn` =~$_usn3 =~.e1).`2esn`! Match (_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0}),@usn5=Shortestpath(((({`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})))) Using Index #usn7:usn1(`4esn`) Using Index @usn6:`1esn`(@usn6) Where .e1[..12e12][..Count(*)]"),
    octest_legacy:ct_string("Start @usn5=Node( {1000}) ,@usn6=Node:`2esn`(_usn3={`3esn`}) Foreach(`2esn` In .e0[@usn6..]| Load Csv From {1000}[#usn7..{`8esn`}][{`4esn`}..'s_str'] As #usn7 )"),
    octest_legacy:ct_string("Create Shortestpath((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})-[#usn8:_usn4{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}]->({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(:`4esn`{_usn3:usn1[..$usn2][..0]})) Remove [01 Contains {0} Contains $`5esn`,{@usn6} Contains 's_str',$123456789 Is Not Null Is Not Null].`7esn`? Start @usn6=Node:#usn8({12}) "),
    octest_legacy:ct_string("Return Distinct *,{_usn4}[$`3esn`][$`3esn`],`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Skip {@usn6} In $`5esn` In {7} Limit `5esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind $1000 Contains {@usn6} Contains 1.0 As `` Optional Match `5esn`=Allshortestpaths((_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Using Join On _usn3 Using Scan `5esn`:`3esn` Where $`8esn`[{``}..]"),
    octest_legacy:ct_string("Return {`1esn`}[$`4esn`..@usn5][\"d_str\"..{123456789}] As `2esn`,Case When $0[{7}..][123.654..] Then $999 Contains 0e0 When $`4esn` Contains {7} Contains 999 Then usn2[`3esn`] Else {@usn6}[#usn8..][999..] End =~[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {7}[{#usn7}..{`5esn`}][123.654..{@usn6}]] As `5esn` Skip {`2esn`:`6esn` Contains 01234567 Contains $12} Is Not Null Limit $@usn5 Is Null Is Null Create Unique `4esn`=({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}),`8esn`=((:`6esn`{_usn4:07 =~usn2})) Remove {_usn3:{7} Contains {#usn8} Contains {7}}.usn2? Union Return [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)] As _usn3,(:_usn3:`5esn`{`1esn`:0xabc[{`7esn`}..][{`8esn`}..],`1esn`:0x0[$123456789..$usn1]})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`1esn`?:`7esn`|:`2esn`]->(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})[(@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"})..[`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7|{`1esn`}[`8esn`][{usn2}]]][usn2(Distinct $`` Ends With 9e0,{12}[..9e1])..Extract(`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`])] As `6esn` Skip $usn1 Starts With {`5esn`} Limit Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Ends With [`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]|{@usn6} Contains {`1esn`}] Ends With All(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0) Optional Match usn2=Shortestpath((((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})<-[`8esn`? *0X0123456789ABCDEF..{`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})))),Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000})))"),
    octest_legacy:ct_string("Optional Match `7esn`=((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})) Using Index #usn7:`6esn`(@usn6) Load Csv From {@usn6:{#usn7} In `` In @usn6,_usn3:{`1esn`} In `` In {12}} Ends With [Count(*)[`8esn`..$`7esn`],#usn8[Null]] Ends With [`` In {0} Is Not Null Is Not Null Where 12.e12|9e12[`6esn`..{12}]] As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge ``=(`7esn` :`5esn`{#usn7:{@usn5}[123.654]}) Union Return *,$`8esn` Is Not Null Is Not Null As `4esn`,01[..$usn1] As `3esn` Order By Shortestpath((((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4)))) In All(usn2 In 1000 Starts With $123456789 Where False =~$`8esn`) In Reduce(#usn7={`6esn`} =~{`4esn`} =~0x0,#usn7 In 0e0 Is Not Null Is Not Null|$usn1 Starts With {`5esn`}) Desc Optional Match ((`5esn` :`1esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(#usn8 :`5esn`)),(:`5esn`) Using Index _usn4:usn1(usn2)"),
    octest_legacy:ct_string("Load Csv With Headers From {usn1}[0..{@usn6}][True..usn2] As `7esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {@usn5}[$usn2..] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind 9e12 Starts With $_usn3 As @usn5 Union Foreach(`7esn` In Allshortestpaths((:#usn8:_usn3{usn1:{`8esn`}[.e12][01]}))[Single(`5esn` In usn2 Ends With 0.e0 Where 9e1[{usn2}..$1000])]| With Distinct *,2.12[True],{`8esn`:0X7 Ends With {@usn5} Ends With {_usn3},`6esn`:1000[..$12][..$usn2]} Ends With Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Ends With Extract(@usn5 In {#usn8} Contains 7 Where @usn5 Is Null Is Null) As `4esn` Order By Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc Where {`6esn`}[07..][{@usn5}..]) Detach Delete $`` Ends With usn1,9e1[0xabc..][``..] Delete Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]})<-[`3esn`{`8esn`:`5esn` Is Null}]->(`8esn` :`1esn`)<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}))[..`6esn`(`1esn`[$`4esn`..])],``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))],Count(*)[.e12..]"),
    octest_legacy:ct_string("Load Csv With Headers From Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) Starts With {#usn7:12.0 Is Not Null Is Not Null} Starts With None(@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}) As _usn4 Fieldterminator \"d_str\" Unwind 0Xa Contains 0X7 Contains {``} As `5esn`"),
    octest_legacy:ct_string("Create Unique `6esn`=((:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})<-[`3esn`{`8esn`:`5esn` Is Null}]-({#usn8:00})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})),Allshortestpaths(((`4esn` :`3esn`:usn2)-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})<-[`1esn`? *..123456789{``:_usn4 Starts With $`3esn` Starts With {#usn8}}]->(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}))) Return Distinct {999} Starts With {`3esn`} As `8esn`,@usn5 Contains 123.654 As `` Order By Null Is Not Null Desc,{123456789} In 1.e1 Descending Limit exists() Is Null Union All Return Distinct *,None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As usn2,usn2[9e12..$`3esn`] As _usn3 Order By 1.e1 Ends With $12 Ends With #usn8 Ascending,1.0[..`3esn`][...e0] Desc Skip 12 In {999} In 999 Limit [`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null] Contains Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where Count(*)[.e12..]) Contains {`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1} Match ``=((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`})),`5esn`=(((@usn5 :@usn6)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-(usn1 :#usn8:_usn3)<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Where #usn7 Starts With 12 Starts With `4esn` Foreach(_usn4 In {`5esn`} In $`2esn`| Create #usn8=Allshortestpaths(((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``))),_usn3=((`2esn` :``{_usn4:{#usn7} In {`6esn`}})-[`3esn`?]->(:@usn6{@usn6:01234567[True]}))) Union All Create Unique Allshortestpaths(({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[`2esn`:`` *..123456789]->(@usn5 :usn1)),Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})))"),
    octest_legacy:ct_string("Load Csv From 9e0 Contains 7 Contains {usn2} As `8esn`  Foreach(_usn3 In 010[00]| Create Unique (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})) Union With  9e12[`6esn`..{12}] As _usn4 Order By @usn5 Contains 7 Contains 999 Descending Skip [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Where 0e0[..$`2esn`][..Count(*)]"),
    octest_legacy:ct_string("Detach Delete {@usn5} Ends With {usn1} Ends With @usn5,{1000} In $`2esn` In $_usn3 Load Csv With Headers From None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] As `3esn` Fieldterminator 's_str' Match (`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[? *010..]->(`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]}) Using Join On `3esn`,#usn8 Union Merge `6esn`=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[`3esn`?:@usn6*]-(_usn3 {_usn3:$1000[$`7esn`..1e1],`1esn`:$#usn7[..0e0][..$12]}) On Create Set Case When 12e12[@usn5..][01..] Then {123456789}[01234567..Null] End.@usn6? ={`8esn`:@usn6[2.12..][`5esn`..]} Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]|{`2esn`} Starts With 1e1),`6esn`+=Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] On Create Set #usn8+=Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1),`2esn`+={`2esn`} Starts With 00,`3esn` =12.e12 In {@usn6} Union All Load Csv With Headers From {999}[$7..] As usn2 Fieldterminator \"d_str\" Load Csv From Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))] As `5esn` Fieldterminator 's_str' Remove [True[#usn8..][$123456789..],{`8esn`} =~usn1 =~12.e12,@usn6[$`2esn`..]].usn2!,Extract(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`).@usn6?"),
    octest_legacy:ct_string("Foreach(_usn4 In {#usn8}[[`2esn` Starts With `` Starts With .e12,010[``..123456789][@usn6..{12}],$123456789 =~$`7esn`]][Allshortestpaths((#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}))]| Create Unique Allshortestpaths(((@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))) Load Csv From usn2 Is Null Is Null As `4esn` Fieldterminator \"d_str\") Load Csv From {`6esn`}[..01234567][..$_usn4] As @usn6 Fieldterminator 's_str' Union All With Distinct *,{`7esn`} Ends With 999 As _usn3 Skip [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null Where {@usn5}[$usn2..] Foreach(_usn3 In $1000[$`7esn`..1e1]| Load Csv From 12 In {#usn7} As `2esn`  Start usn1=Node( {`8esn`}) Where {`8esn`}[@usn5][0]) Return *,{usn2}[010..][$123456789..] Order By 0.0 In Count(*) In 1000 Descending,Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Descending Limit $``[$@usn6..usn1][usn1..7] Union Unwind 9e12 In {@usn6} As `5esn` Create `8esn`=Allshortestpaths((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1))),`5esn`=((@usn5 :@usn6)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)) Remove {`3esn`:$`4esn` Starts With #usn8 Starts With 2.12}.`3esn`,Extract(`` In 9e0 Is Not Null Where @usn5 Is Null Is Null|$999 Is Not Null Is Not Null).@usn5?,None(_usn3 In 010 Contains $`2esn` Contains 01 Where $`5esn` =~`7esn` =~usn2).`2esn`?"),
    octest_legacy:ct_string("Unwind \"d_str\"[..$usn1][..$`5esn`] As `2esn` Union All Match @usn6=Shortestpath((:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)) Using Scan `7esn`:`2esn` Where 0.0 Foreach(_usn3 In {`1esn`}[`8esn`][{usn2}]| Create `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})),@usn6=Shortestpath((_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})) Create `6esn`=(((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),Allshortestpaths(((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})))) Detach Delete 0X7,{`2esn`}[`3esn`][{#usn7}] Union All Unwind _usn3 Starts With 0X7 As `5esn`"),
    octest_legacy:ct_string("Optional Match (_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0}),@usn5=Shortestpath(((({`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})))) Union Remove Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null|_usn4 In False In {usn1}).`3esn`!"),
    octest_legacy:ct_string("Unwind Reduce(#usn8={`8esn`}[.e12][01],`5esn` In usn2 Ends With 0.e0|True[{1000}][1000]) In None(#usn7 In 0e0 Is Not Null Is Not Null) As usn2 Return Distinct 0xabc[..``],{#usn8} Ends With $999 As `8esn` Skip 1000 Contains {999} Contains 9e12 Limit $`6esn` In $`2esn` Optional Match Allshortestpaths(((`8esn` :`7esn`:#usn8)<-[ *12..00{`6esn`:$7[..{`8esn`}][..{999}]}]->(:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[`2esn`? *0Xa..{#usn7:_usn3 Starts With 0X7,`1esn`:123456789[{`7esn`}..][{@usn6}..]}]->(:`5esn`{`4esn`:{usn1}[0..{@usn6}][True..usn2]}))),((:`4esn`$999)-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})) Using Join On `5esn` Using Scan _usn4:usn2 Where 123456789 In usn2 Union With Distinct *,{_usn4}[1000][{123456789}] Skip {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] Limit 123.654 Starts With [#usn7 In `7esn` In $`1esn` In $999 Where @usn5 Is Null Is Null|@usn6] Starts With {0} Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF Return True[..{_usn4}][..0.0] As `5esn`,[{#usn7}[..12e12][..{1000}],123456789[{`7esn`}..][{@usn6}..],{`3esn`} Contains 12.0 Contains {`8esn`}][(`1esn` {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[``?:#usn7|:``{``:0X0123456789ABCDEF[{`5esn`}..]}]->(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})<-[? *010..{`5esn`:0Xa[_usn4..],``:$@usn6 Is Null Is Null}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})..],[{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Order By [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Asc,`3esn` Ends With usn1 Ascending,Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` ) Desc Remove `3esn`:`1esn`"),
    octest_legacy:ct_string("Delete Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Union Load Csv From 2.12 =~{``} =~0X7 As `5esn`  Load Csv From False In 0.0 In 0X7 As usn1  Match (_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}}),``=Allshortestpaths((((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )<-[usn2 *07..07{_usn4:\"d_str\" Contains `6esn` Contains $12}]-({#usn7:{`8esn`}[Count(*)..]}))))"),
    octest_legacy:ct_string("Match ``=Shortestpath((((:@usn5:`7esn`{`3esn`:0X0123456789ABCDEF Starts With {`2esn`} Starts With Null})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})))) Using Join On `3esn`,#usn8 Return Distinct Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) As @usn5,{usn1}[0..{@usn6}][True..usn2] As usn1 Order By Case When {usn2} Ends With _usn3 Then $`5esn`[1e1..] Else 123.654[Null..12.e12] End[[01[..$usn1],$_usn4 Contains 0 Contains False,9e1 Is Null Is Null]..{`2esn`:$_usn3 In $`5esn`}] Ascending,`7esn` In $_usn3 Asc,`6esn` Contains .e12 Descending Union Detach Delete 07 Starts With 0.e0 Starts With $`3esn`,$#usn8 Ends With $_usn4,{`3esn`} Contains 12.0 Contains {`8esn`}"),
    octest_legacy:ct_string("Unwind 999 Ends With 999 Ends With .e12 As usn1 Union All Unwind $12[$`3esn`][9e12] As @usn6 Unwind `4esn`[\"d_str\"..][123.654..] As @usn6 Union Start _usn4=Node:_usn3({_usn3}) Where 123.654 Is Null Create #usn7=(((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})))"),
    octest_legacy:ct_string("Load Csv With Headers From True[..{_usn4}][..0.0] As `4esn`  Delete #usn7[$@usn6][$`8esn`]"),
    octest_legacy:ct_string("Merge ((`8esn` :`6esn`)-[_usn4? *0xabc..{#usn8:Count(*) In ``}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})-[``?:#usn7|:`` *..7]-(_usn4 :usn2:_usn4)) On Create Set Allshortestpaths(((:`5esn`{`6esn`:{@usn5}[`4esn`][12.0]}))).`3esn` =(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) On Match Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Detach Delete {`3esn`} Contains 12.0 Contains {`8esn`} Union Create Unique (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}),(((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))) Union All Start @usn5=Rel:`7esn`(`8esn`={`2esn`}) ,``=Rel:#usn8(\"d_str\")Where {`3esn`} Contains 12.0 Contains {`8esn`} Start @usn5=Node( {1000}) ,`6esn`=Relationship:@usn6(usn2=\"d_str\")Where {usn1}[`6esn`..@usn5][$usn1..0.0]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 7 =~$`6esn` As _usn4 "),
    octest_legacy:ct_string("Merge usn2=Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(_usn4 :_usn3:`5esn`{usn2:$999[0.12][0xabc]})) On Create Set (`3esn` {usn2:@usn6})<-[`2esn`? *0Xa..{#usn7:_usn3 Starts With 0X7,`1esn`:123456789[{`7esn`}..][{@usn6}..]}]->(:`5esn`{`4esn`:{usn1}[0..{@usn6}][True..usn2]})<-[?:@usn5|:`1esn` *..7{@usn6:12.e12[2.12..]}]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}).`5esn` ={_usn4}[{usn1}..][`8esn`..],`1esn` ={`6esn`}[False..$`3esn`] On Create Set (@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}).@usn6? ={usn1:1.e1 Is Not Null} Is Null,#usn8 =0Xa Is Not Null Is Not Null With  *,0e0 In 07 As usn1 Order By Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Ascending,0x0 Is Null Descending Skip 01234567 Is Not Null Limit {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] Where #usn8[1e1][$12] Union Remove Reduce(#usn7=9e0[.e12..][$`3esn`..],#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|1000 Starts With {@usn5} Starts With 123.654).`2esn`,{`6esn`:{`6esn`} =~{`4esn`} =~0x0}.@usn5?,Reduce(#usn7=0.12[.e12..0][1.0..{_usn4}],`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|12 Starts With $_usn4 Starts With $`6esn`).`6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 's_str' Is Not Null Is Not Null As `8esn` "),
    octest_legacy:ct_string("Foreach(#usn7 In `7esn` Is Null| Remove Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12|{`1esn`} Is Null).usn2?) Detach Delete [{`8esn`}][..`1esn`(usn2[999..][{`1esn`}..])][..Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..])],1.e1 Is Null Is Null,Extract(`5esn` In 9e1 In 0.0 In {999} Where {`1esn`} In $999 In {#usn8}|{usn2}[07])[[{999} Ends With 1e1,$7[..{`8esn`}][..{999}]]..][`4esn`(Distinct {usn2}[{999}..][0Xa..],`5esn`[12.0..])..] Union All With  None(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999) =~[9e0[..usn2][..0]] =~``(Distinct Null[$`1esn`..][7..]) As `3esn`,[_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As _usn4 Order By {`8esn`}[@usn5][0] Ascending,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654])[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})][[1e1 In False]] Ascending Skip 0xabc Is Not Null Union Delete $#usn7[$123456789..][{0}..] Detach Delete 1000 Starts With {@usn5} Starts With 123.654 Unwind [`` In {`7esn`} Starts With {0} Starts With {1000} Where `3esn` =~usn2 =~7|$``[$@usn6..usn1][usn1..7]] Contains {`2esn`:0.12 Ends With #usn8 Ends With $1000} As `8esn`"),
    octest_legacy:ct_string("Start `6esn`=Node:usn2(`6esn`=\"d_str\") Where 12.0 Is Not Null Is Not Null With  {123456789} Is Null Is Null Order By False Contains _usn4 Contains 2.12 Ascending,`7esn`(Distinct $999[0.12][0xabc]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) In [{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa] Asc Skip False Contains _usn4 Contains 2.12 Limit {`3esn`} Is Null Is Null Where 0e0 Is Null Is Null"),
    octest_legacy:ct_string("Create Unique (((`7esn` :_usn3:`5esn`)-[`5esn`:@usn6]-({`3esn`:9e0 =~.e12})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}))) Unwind $``[0e0][{`6esn`}] As `6esn` Start `7esn`=Relationship:#usn8(@usn5='s_str') ,`7esn`=Node:``(`2esn`='s_str') Union All Optional Match #usn8=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}),(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]}) Where {``}[$@usn5] Unwind $12[{``}] As #usn7"),
    octest_legacy:ct_string("Foreach(`5esn` In `7esn`(Distinct $999[0.12][0xabc]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) In [{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa]| Start `8esn`=Node:`1esn`(@usn5='s_str') ,`8esn`=Rel:`8esn`(`5esn`=\"d_str\")Where usn2[_usn3..{usn1}][@usn6..{`4esn`}]) With  *,0X7 Ends With {0} Ends With $12 As `7esn`,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `1esn` Order By Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True]) Descending Skip #usn7 =~#usn8 =~{`6esn`} Where {_usn4}[$#usn7..] Remove @usn6(Distinct {`1esn`} Ends With 2.12 Ends With _usn4,{#usn8}[`7esn`..][_usn3..])._usn3?"),
    octest_legacy:ct_string("With  2.12[..01234567][..{usn2}],#usn8[..0Xa],010[123456789] Limit 12e12 Starts With 00 Starts With {0} Merge Allshortestpaths(((_usn3 :`1esn`))) On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] On Match Set (`2esn` :`5esn`{``:`1esn`[``..$``]})<-[`3esn`?:_usn4*..]-(_usn4 :_usn4:`4esn`)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(`1esn` :#usn7:`3esn`).`2esn` =$`5esn` Contains 123456789 Contains $`1esn`,`1esn`+=12 Ends With 0X7 Ends With 12.0 Union All Start `2esn`=Node:#usn7({_usn3}) ,``=Node:`1esn`(`3esn`={12}) Start usn1=Node:_usn3(``={12}) ,usn1=Relationship:`4esn`({`6esn`})Where $@usn5[0.12..] Union All Detach Delete @usn5 =~$123456789 Create Unique @usn5=(`1esn` {`5esn`:12 In {#usn7}}),`7esn`=Shortestpath((`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})) Match usn1=Shortestpath(((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})))"),
    octest_legacy:ct_string("Start `6esn`=Node:_usn3(usn2={12}) ,`8esn`=Node:@usn5({999})Where 1.0[..`3esn`][...e0]"),
    octest_legacy:ct_string("Return *,{#usn8} Ends With $999 As `6esn` Create usn1=Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999}))) Union All Return Distinct {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`5esn`} =~9e0 =~{`2esn`} As `7esn`,$`7esn` Starts With 01 Starts With $7 Order By .e12 Contains 00 Contains usn2 Asc,Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Asc,1.0 =~$_usn4 Desc Foreach(usn2 In {0}[{`4esn`}..]| With  Case {``}[12e12..`6esn`] When 9e1[{usn2}..$1000] Then `2esn` Starts With `` Starts With .e12 When 01 Is Null Is Null Then {`4esn`}[$`8esn`..'s_str'] Else usn2[_usn3..{usn1}][@usn6..{`4esn`}] End[Reduce(`5esn`=0.12 Ends With #usn8 Ends With $1000,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|_usn3 Starts With 0X7)][Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End] As ``,1000 Starts With {@usn5} Starts With 123.654 Skip [{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Limit [{`2esn`} Starts With 1e1,$`2esn` In $999 In 0.12,True[#usn8..][$123456789..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where `1esn` Is Null]] Where #usn8[1e1][$12] Delete Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]],$999 Starts With {@usn6},`1esn`[True..1000][`4esn`..{`3esn`}]) Optional Match Shortestpath((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))),`7esn`=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Using Index `1esn`:@usn5(usn1)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 123456789[{1000}..] As @usn5 Fieldterminator \"d_str\" Create Unique (({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})-[#usn8?:`5esn`]->(`8esn` :`2esn`:@usn5)<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(`8esn` :`2esn`:@usn5$``)),`4esn`=(#usn7 :`5esn`)<-[`7esn` *..00]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {`6esn`} Is Null As usn2 Fieldterminator \"d_str\" With  *,[9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End As _usn4,{123456789} Is Null Is Null Skip $usn2 Ends With $#usn8 Where 1e1 In #usn8"),
    octest_legacy:ct_string("Start @usn5=Node:`5esn`(`6esn`='s_str')  Union All Load Csv With Headers From 12[0X7..] As `6esn`  Foreach(`8esn` In Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))[Case When False[{`5esn`}..{`8esn`}] Then 2.12 =~{``} =~0X7 When 0e0 =~{usn2} Then $_usn4 =~$12 =~`3esn` Else 999[0.0..][$_usn4..] End][[#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]]]| Optional Match `2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),`8esn`=(`7esn` :`6esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}) Using Index `6esn`:`1esn`(_usn4) Using Index `7esn`:`2esn`(`7esn`) Where $#usn8[..9e1] Start `5esn`=Relationship:`4esn`({`6esn`}) Where {``}[True][00])"),
    octest_legacy:ct_string("Return {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,[`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)],(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[_usn4 *..00]->(#usn7 {usn1:7[0e0..][$`1esn`..]}) Order By $`8esn`[..$usn2][..12] Asc Skip usn2[_usn3..{usn1}][@usn6..{`4esn`}] Limit Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))[None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {7}[{#usn7}..{`5esn`}][123.654..{@usn6}])..Shortestpath((`1esn` :`8esn`{``:{999} Ends With 1e1})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}))] Load Csv With Headers From `4esn` Ends With $#usn8 Ends With {12} As usn1 Fieldterminator 's_str' Merge (usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]}) On Match Set usn2 ={usn2} =~{1000} On Match Set Case When {_usn3} =~`6esn` =~$`8esn` Then 1e1 In #usn8 End.usn1 =.e12[$`2esn`..][{`3esn`}..],Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]),#usn8+=$`3esn` In $#usn8 In {_usn3} Union All Detach Delete [9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End,usn1 Starts With Count(*) Starts With @usn6 Foreach(usn1 In [usn1[12e12..],9e12 In $_usn3] Is Null Is Null| Return Distinct 0Xa[..07][..`2esn`] As #usn8,{@usn6} Is Null As `7esn`,1000 Contains {999} Contains 9e12 Order By {@usn5}[..$12] Desc,{@usn6} Contains {`1esn`} Descending)"),
    octest_legacy:ct_string("Merge `7esn`=(`4esn` {@usn6:0X0123456789ABCDEF[..0.12],`6esn`:{`8esn`}[`3esn`..999]})<-[?{`6esn`:2.12 =~.e12 =~#usn8,``:$`5esn` In $_usn4 In $`2esn`}]->(:`4esn`)-[ *0]-(`6esn` {@usn5:9e12[$#usn7..01234567]})"),
    octest_legacy:ct_string("Load Csv From $@usn5[..{`8esn`}][..010] As `3esn`  With  *,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{`7esn`} =~{7})[{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}..][Shortestpath((((:#usn8:_usn3)<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})<-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(`4esn` :`8esn`))))..] As `8esn` Order By Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999})))[Case {1000} In $`2esn` In $_usn3 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 When {0} Ends With $@usn5 Ends With 010 Then 's_str'[12..$`5esn`] Else usn1 Starts With Count(*) Starts With @usn6 End][Filter(#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null)] Asc,`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Descending Skip Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) Union With  *,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],'s_str' Is Not Null Is Not Null Skip Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)[{@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}..][Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))..] Limit {0} Ends With $@usn5 Ends With 010 Union Optional Match `1esn`=({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}),@usn6=(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]}) Using Join On @usn6,`2esn` Using Scan usn2:#usn7 Where {#usn8} In $7"),
    octest_legacy:ct_string("Load Csv From `1esn` Is Null As `6esn`  Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6}) Union All Match Shortestpath((((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]})-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})-[@usn5?:`6esn`*$`3esn`]->({#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null})))) Return *,{usn2} =~{1000},`7esn` Contains 01234567 Contains `1esn` Order By 0Xa[..`6esn`] Descending,0X7 Asc Limit 010[``..123456789][@usn6..{12}]"),
    octest_legacy:ct_string("Return Distinct $`8esn`[{``}..] As `` Order By Shortestpath((((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4)))) In All(usn2 In 1000 Starts With $123456789 Where False =~$`8esn`) In Reduce(#usn7={`6esn`} =~{`4esn`} =~0x0,#usn7 In 0e0 Is Not Null Is Not Null|$usn1 Starts With {`5esn`}) Desc Skip {`8esn`}[.e12][01] Foreach(@usn6 In 9e1[{`5esn`}]| Load Csv With Headers From $#usn7[$@usn6..] As `3esn` )"),
    octest_legacy:ct_string("Start usn1=Rel:@usn5(`7esn`={#usn8}) ,usn1=Relationship:``(`4esn`=\"d_str\")Where 's_str'[`4esn`..] Create ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),@usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF})) Union All Merge _usn3=Allshortestpaths((`6esn` :`1esn`)<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})) On Match Set #usn8 =``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] On Create Set `6esn`+=Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End Starts With Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]),`8esn` =[_usn3 In 010 Contains $`2esn` Contains 01 Where {`5esn`} In {#usn7} In $7|{``} Starts With \"d_str\"] Contains Reduce(_usn3=010 Contains $`2esn` Contains 01,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|{#usn8}[$`6esn`..12e12]) Contains Case When True Ends With Count(*) Ends With 1.0 Then {`8esn`} Else 0X0123456789ABCDEF[...e12][..0.12] End Remove Case 00 When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End.@usn5!,[#usn8[_usn4],usn1 Is Null,$999[0.12][0xabc]].usn1? Union All Remove {_usn3:'s_str' Contains {_usn4}}._usn3?,Single(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).`1esn`?"),
    octest_legacy:ct_string("Detach Delete `8esn` Contains 123.654 Contains {`7esn`} Union Unwind {1000}[..$@usn6][..$`6esn`] As @usn6 Union All Create Unique `5esn`=Shortestpath(((`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}))),`5esn`=(@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})"),
    octest_legacy:ct_string("Merge `3esn`=(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})-[?:`3esn`*]-(`2esn` :#usn8:_usn3) On Match Set `2esn` ={`1esn`} Starts With usn2,`8esn` =Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]).`6esn`! ={``}[...e1] Optional Match usn2=(:``),Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Using Join On `5esn`,_usn4,`6esn` Using Scan _usn3:usn1 Where 123456789 Is Null"),
    octest_legacy:ct_string("Unwind (:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null As usn1 Union All Unwind \"d_str\"[..$usn1][..$`5esn`] As `2esn`"),
    octest_legacy:ct_string("Remove [{`6esn`}[..$12][..0.e0],{`1esn`} Contains {`5esn`} Contains 0e0,{#usn8}[True][{`7esn`}]].usn2?,All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12 Ends With 0X7 Ends With 12.0).#usn8! Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] Match Shortestpath((`4esn` )),(#usn7 :``) Using Index #usn7:`6esn`(@usn6) Where 0xabc[{@usn5}..][Count(*)..] Union Create #usn7=(`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}}) Start `8esn`=Node:@usn5({999}) ,`3esn`=Relationship:`6esn`({@usn6}) Remove Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0xabc[$#usn7][0Xa]).`2esn`!,usn1(Distinct $`6esn` =~$_usn3 =~.e1).`6esn`!"),
    octest_legacy:ct_string("Detach Delete $`4esn`[0xabc..][.e12..] With  *,9e12 =~01 =~$_usn3 As usn2,0.12[..$`4esn`][..$`7esn`] As `5esn` Skip True Ends With Count(*) Ends With 1.0 Union All Optional Match Allshortestpaths(((:`6esn`)<-[:`3esn` *01]-(`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`))) Where {@usn5}[{0}..0X0123456789ABCDEF] Optional Match Shortestpath((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})-[#usn8:_usn4{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}]->({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(:`4esn`{_usn3:usn1[..$usn2][..0]})),`5esn`=((_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})) Using Index ``:`7esn`(`8esn`) Create Unique #usn7=((@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]})<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})),`5esn`=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`)) Union All Remove Reduce(usn1=$`4esn` In $@usn5,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|010[00])._usn3!"),
    octest_legacy:ct_string("Optional Match (`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Scan `5esn`:@usn5 Union All Foreach(@usn6 In [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)]| Return *,Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}),Shortestpath((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}})) In All(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) In Allshortestpaths(((_usn4 :``)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]}))) As usn2 Order By $`6esn` Is Not Null Descending Skip 0.12[$123456789..]) Create (`7esn` :`5esn`{#usn7:{@usn5}[123.654]})"),
    octest_legacy:ct_string("With Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,7[{_usn4}..{usn2}][9e0..0X7] As _usn4 Order By {`5esn`}[{_usn3}..False] Asc,12e12['s_str'..`8esn`][usn2..$_usn4] Asc,{#usn8} In {#usn8} Asc Union All Remove exists(Distinct `5esn` Is Not Null Is Not Null,{12} Starts With 00 Starts With 12).#usn8,Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null)._usn3! Merge (({`8esn`:{7} In `1esn` In 123456789})) Merge `2esn`=Allshortestpaths((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)) On Match Set _usn3+=Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] Union With Distinct $`6esn` Ends With 1000 Ends With False As _usn3,False Ends With {@usn6} Ends With $0,{``}[...e1] Skip Reduce(#usn7=$`3esn` Ends With {_usn3} Ends With 9e1,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{usn1} Contains 0xabc) =~_usn4(Distinct 0X7 Contains usn2 Contains $`1esn`,$`5esn`[$7])"),
    octest_legacy:ct_string("Delete {`1esn`} Is Null,0X7 Ends With {0} Ends With $12 Create Shortestpath(((usn2 :@usn6))),_usn4=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) Union All Foreach(@usn6 In 12e12[@usn5..][01..]| Remove [`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4]._usn3! Remove Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`3esn`}[`1esn`]).usn2,`4esn`(False Starts With #usn7 Starts With 12e12).`5esn`!,{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}.`2esn`!) Create Allshortestpaths((`4esn` :usn1{`3esn`:12 Ends With {999} Ends With 's_str'})) Unwind {999}[{`1esn`}..``][{12}..$123456789] As `1esn` Union All Create `3esn`=(((`3esn` {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})<-[_usn3?:@usn5|:`1esn`]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})-[`2esn`?:_usn4 *01]-(`2esn` :`5esn`{@usn5:123456789 Contains $@usn6 Contains Count(*)}))),#usn8=Allshortestpaths(((`5esn` :@usn5:`7esn`)-[usn1? *..0X7{`2esn`:010}]-(`3esn` :usn1))) Match _usn4=((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)) Using Join On @usn5 Using Join On usn1,`5esn` With  Null =~$`8esn` =~{`4esn`} As #usn8 Skip Any(usn2 In 1000 Starts With $123456789 Where 0e0[..$`2esn`][..Count(*)])[{#usn8:0Xa Contains 0X7 Contains {``}}][(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})] Limit All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})]"),
    octest_legacy:ct_string("Detach Delete 2.12 In $123456789 In 00,.e0[$`8esn`..12e12][usn1..999],[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Ends With (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Remove {``:01[$#usn8..][7..]}.`7esn`? Optional Match ((`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)),``=(@usn5 :`7esn`:#usn8)<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7}) Using Scan #usn7:@usn6 Using Join On `1esn`,`8esn` Union All Match `3esn`=((:@usn5:`7esn`{`7esn`})) Unwind [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As `2esn` Return (#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4,{`8esn`} Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc Limit Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Delete $7 Is Not Null Is Not Null,{_usn4} Ends With .e1 Ends With 0x0 With  0Xa[..07][..`2esn`] As @usn5,Extract(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}|0x0 =~$usn2) Ends With [False Is Null Is Null,$_usn4 Contains 0 Contains False,{#usn7}[{12}..usn1]] Ends With Case {@usn6}[#usn8..][999..] When 1000 =~{`1esn`} Then usn1 Contains 9e1 Contains 0X0123456789ABCDEF When {`8esn`}[.e12][01] Then $`6esn` Is Not Null End Order By 0X7[True..{0}][Count(*)..@usn5] Descending,$`5esn` Is Null Ascending,1.0[..`3esn`][...e0] Ascending Where 9e0[..usn2][..0] With  *,None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As usn2,usn2[9e12..$`3esn`] As _usn3 Order By 1.e1 Ends With $12 Ends With #usn8 Ascending,1.0[..`3esn`][...e0] Desc Skip 12 In {999} In 999 Limit [`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null] Contains Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where Count(*)[.e12..]) Contains {`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1} Union All Delete $#usn7 =~$123456789 =~12,12.e12 Is Not Null Is Not Null,0.e0[False] Optional Match `5esn`=(({`6esn`:{`3esn`} Contains 12.0 Contains {`8esn`},#usn7:12e12[@usn5..][01..]})) Using Scan ``:`1esn` Where `7esn`[{`7esn`}..$1000] Merge Allshortestpaths(((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`)))"),
    octest_legacy:ct_string("Create `6esn`=Allshortestpaths(((_usn4 :usn2:_usn4)<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`)<-[`1esn`?:_usn4 *..00]-(:``)))"),
    octest_legacy:ct_string("Start `4esn`=Rel:`6esn`(`7esn`='s_str')  Union Create (_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`8esn` *010..]-(`2esn` :``{_usn4:{#usn7} In {`6esn`}}),Shortestpath(({usn1:$_usn4 Contains {1000}})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})) Union All Delete {_usn3}[{``}..]"),
    octest_legacy:ct_string("Match `7esn`=(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[#usn8?:@usn5|:`1esn` *0Xa..{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` {usn1:{`8esn`} Is Not Null}) Using Index #usn7:`6esn`(@usn6) Where 0Xa[..`6esn`] Create (`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}),Shortestpath((@usn6 :`2esn`:@usn5)<-[@usn5?]-(:_usn3:`5esn`)) Union With  Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00]) Is Not Null As usn2,$usn2 Ends With $#usn8 As usn1 Where {#usn8}[`7esn`..][_usn3..] Create usn2=(@usn5 :`4esn`)-[? *..123456789{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]->(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00}) Remove None(`` In 9e0 Is Not Null Where $_usn3[..@usn6][..{999}])._usn3"),
    octest_legacy:ct_string("With Distinct Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Where {_usn3}[..1.0]"),
    octest_legacy:ct_string("Match `8esn`=(((usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[`8esn` *12..00]->({`5esn`:{usn2}[..12.0]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Using Join On usn2,@usn6,`7esn` Where 9e0 =~.e12 Return Distinct *,Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] As ``,1.0[$`5esn`..{``}] Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})"),
    octest_legacy:ct_string("Match @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),(#usn8 :`7esn`:#usn8) Using Join On usn2,@usn6,`7esn` Using Join On _usn3,`5esn`,#usn8 Where $`2esn` In $999 In 0.12 Union Merge @usn5=Allshortestpaths((`2esn` {usn1:@usn5 Contains 7 Contains 999})<-[?{#usn7:{999} Ends With 1e1,#usn7:{1000} Is Null}]->(:_usn3:`5esn`{`7esn`:`1esn`[0X7..][#usn7..]})) On Match Set Case 1.0 =~$_usn4 When @usn5 Is Null Is Null Then 01234567 Is Null Is Null End.@usn5? =[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),Reduce(`8esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`7esn` In Null =~$`8esn` =~{`4esn`}|12.0[12..9e1]).@usn5? =Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))]"),
    octest_legacy:ct_string("With  Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00]) Is Not Null As usn2,$usn2 Ends With $#usn8 As usn1 Where {#usn8}[`7esn`..][_usn3..] Create usn2=(@usn5 :`4esn`)-[? *..123456789{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]->(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00}) Remove None(`` In 9e0 Is Not Null Where $_usn3[..@usn6][..{999}])._usn3"),
    octest_legacy:ct_string("Unwind 1000[{@usn5:{999} In `3esn`}] As #usn7"),
    octest_legacy:ct_string("Remove None(#usn7 In `7esn` In $`1esn` In $999 Where False Is Null Is Null).#usn8,010.`1esn`?,Filter(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where ``[..`2esn`][..@usn5]).`4esn` Union Start _usn4=Node:`6esn`(`6esn`='s_str') Where {``} =~.e12 =~{0}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From True[..{_usn4}][..0.0] As `4esn` Fieldterminator \"d_str\" Remove Single(_usn4 In $`` =~$1000 =~7 Where 01[$_usn4..][0..]).#usn7,Allshortestpaths((`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})).`4esn`?,{`3esn`:2.12 =~.e12 =~#usn8}.`3esn`! Delete Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`},{`3esn`}[{`8esn`}..$7][0e0..0x0]"),
    octest_legacy:ct_string("Start `8esn`=Node:`1esn`(@usn5='s_str')  Remove `4esn`:_usn3:`5esn`,[usn2 In 1000 Starts With $123456789 Where `8esn` Starts With {_usn4} Starts With $#usn8|00].@usn6 Unwind $usn2 Ends With `5esn` Ends With 0Xa As #usn8 Union All Delete $`4esn`[00..$`8esn`][Null..$@usn5] Unwind 0xabc[..``] As `3esn` Union Foreach(`5esn` In {usn1} Contains 0xabc| With Distinct *,$_usn4 Is Null Limit usn1 In {usn1} In 0e0 Where 0Xa Contains 0X7 Contains {``} Detach Delete $1000 In 7 In `1esn`,`7esn`[{`7esn`}..$1000],{`6esn`} Is Null) Start _usn3=Node:`3esn`(usn1='s_str') ,`4esn`=Node:`2esn`(usn1='s_str')Where 0x0 Is Null"),
    octest_legacy:ct_string("With Distinct *,False Ends With #usn7 Ends With 1.e1 As _usn4 Order By {#usn7}[0.12][{usn1}] Asc,`7esn`[1.e1..#usn8] Ascending,{@usn5}[..$12] Desc Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Limit 1e1 In #usn8 Where 1e1[..1e1]"),
    octest_legacy:ct_string("Merge ``=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})) On Match Set Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]).#usn8 =`4esn` Contains {`7esn`},All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {`3esn`}[`1esn`]).`4esn`? =$`6esn`[..``][..{@usn5}] On Create Set [{`6esn`}[False..$`3esn`],0X7].`2esn` =Extract(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{@usn6} Starts With 9e1 Starts With usn1) Is Not Null Is Not Null Create Unique `5esn`=Shortestpath((:`6esn`{_usn4:07 =~usn2})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)),(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789}))"),
    octest_legacy:ct_string("Create Unique _usn4=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}),usn2=Allshortestpaths(((`` :`2esn`:@usn5)-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2})-[:`7esn`|:`2esn` *0xabc..]-(:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]}))) Detach Delete $`` Ends With usn1,9e1[0xabc..][``..] Detach Delete Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)],$`4esn` Contains {7} Contains 999"),
    octest_legacy:ct_string("Unwind Count(*) Starts With $7 As `6esn`"),
    octest_legacy:ct_string("Merge Allshortestpaths((`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null})-[_usn3:`5esn` *01{`8esn`:_usn4 Is Not Null,`6esn`:0xabc In $`5esn` In @usn5}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[`7esn`?:_usn3|:@usn5{#usn7:False Starts With {``} Starts With 07,_usn3:$`5esn` Is Null}]-({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})) On Create Set Filter(#usn7 In `7esn` In $`1esn` In $999 Where 0x0 Contains 0x0 Contains {`1esn`})._usn4! =00[12.e12..0Xa][_usn4..@usn5] Match `8esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5})) Using Index @usn5:#usn8(``) Using Index `7esn`:`2esn`(#usn8) Where 12 Ends With 0X7 Ends With 12.0 Union All Detach Delete True[{1000}][1000],({``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]})<-[? *0]->(@usn5 :`1esn`)-[`6esn`?]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})[..{#usn8:07 Starts With 123.654 Starts With 1.0}] Create Unique usn2=(`1esn` :`6esn`{#usn7})-[:`3esn`]->({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}),(((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})))"),
    octest_legacy:ct_string("Return Distinct Reduce(`6esn`=$`6esn` Ends With $`3esn` Ends With 07,usn2 In 1000 Starts With $123456789|{``}[True][00]) Is Not Null As usn2,$usn2 Ends With $#usn8 As usn1 Remove [#usn7 In `7esn` In $`1esn` In $999 Where {7} In `1esn` In 123456789|`2esn` Is Not Null].#usn8?,All(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`6esn` =~$_usn3 =~.e1).#usn8?,Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where {`5esn`} In {#usn7} In $7).`3esn`? With  1.0[$`5esn`..{``}] As _usn4,Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))],(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Union Create Unique Allshortestpaths((((@usn5 {`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(`4esn` :@usn6{`7esn`:{#usn8} In $7})-[`` *..1000]-(`` )))) Foreach(@usn6 In [`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6}| Create Unique ``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),`5esn`=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`)) Start usn2=Node:`8esn`(`2esn`='s_str') ,``=Node:#usn8({1000})Where {`4esn`}[$`8esn`..'s_str']) Unwind {usn2}[01] As `8esn` Union Create usn2=((@usn6 :#usn7:`3esn`)-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}))"),
    octest_legacy:ct_string("Start `5esn`=Node:_usn3(usn2={12})  Union All Start #usn8=Relationship:`4esn`(`2esn`={1000}) ,``=Node:@usn5('s_str') Create _usn4=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) Create Shortestpath((`5esn` )<-[@usn5:usn1|usn2]->(_usn4 :``)) Union Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Using Join On #usn7 Detach Delete $@usn5[0.12..] Create @usn6=(({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})),usn1=((`2esn` {usn1:@usn5 Contains 7 Contains 999}))"),
    octest_legacy:ct_string("Create Unique ((:`1esn`{usn1:0.12 In 123456789})-[?{@usn6:{@usn5}[...e1][..01]}]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})),usn2=((@usn5 :usn1)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(`1esn` :#usn7:`3esn`)) Unwind $`4esn` Is Not Null Is Not Null As `2esn` Create ((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]})),`8esn`=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5}))"),
    octest_legacy:ct_string("Remove [{`8esn`},9e0 Is Not Null,123456789 In usn2].`6esn`!,None(`` In 9e0 Is Not Null Where 0X0123456789ABCDEF).usn1!,{#usn7:{#usn7} In {`6esn`},`6esn`:$`8esn` Is Not Null Is Not Null}.#usn8! Union Merge `1esn`=Shortestpath(((@usn5 :`1esn`))) On Create Set {@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}.#usn7! ={`1esn`} Is Null Start _usn4=Rel:@usn6(`5esn`={1000}) ,``=Node:`1esn`(`3esn`={12})Where $`3esn` In $#usn8 In {_usn3}"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str' In Single(`4esn` In `4esn`[\"d_str\"..][123.654..]) As `6esn`  Return Distinct *,1000 Starts With {@usn5} Starts With 123.654 Skip @usn6[2.12..][`5esn`..] Limit {999}[$7..] With  *,`7esn` Starts With `4esn` Union All Foreach(`1esn` In (`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}}) In Case When @usn5[01234567..$`8esn`][``..`5esn`] Then `5esn` Is Not Null Is Not Null When {usn1} Is Null Then 7[0e0..][$`1esn`..] Else False Starts With {``} Starts With 07 End In Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {7} In `1esn` In 123456789)| Create Unique Allshortestpaths((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})),#usn8=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) With Distinct *,0X0123456789ABCDEF[..0.12],{999} Ends With 1e1 As `2esn` Order By {`7esn`} =~{7} Asc,Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc Limit @usn5 =~$123456789)"),
    octest_legacy:ct_string("Start usn1=Node( {`8esn`}) Where {`8esn`}[@usn5][0] Union All Optional Match `2esn`=((@usn5 :`7esn`:#usn8)) Where $12 In {`8esn`} Create usn1=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),`2esn`=(`7esn` :_usn4:`4esn`) Load Csv From (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) Contains Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where usn2[_usn3..{usn1}][@usn6..{`4esn`}]) As `4esn`  Union All Load Csv From Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))] As `5esn`  Delete $`6esn` In $`2esn`,{`7esn`:$12 In {`8esn`}}[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]..][[010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]..],1.e1 Is Not Null With Distinct `2esn`[#usn8],{`1esn`:Count(*) Contains ``,`7esn`:{7} =~$usn1 =~{_usn4}} In {`4esn`},Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End =~[usn2[_usn3..{usn1}][@usn6..{`4esn`}],12 Starts With $_usn4 Starts With $`6esn`,9e0[.e12..][$`3esn`..]] =~Extract(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]|123456789 Contains $@usn6 Contains Count(*)) As `8esn` Order By 12 Ends With {999} Ends With 's_str' Asc,[{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] Asc,9e1[01..] Asc Skip {@usn6}[..$7][..{`6esn`}]"),
    octest_legacy:ct_string("Load Csv From Reduce(#usn8={`8esn`}[.e12][01],`5esn` In usn2 Ends With 0.e0|True[{1000}][1000]) In None(#usn7 In 0e0 Is Not Null Is Not Null) As _usn3 Fieldterminator \"d_str\" Delete 999 Is Null Create _usn3=Shortestpath((((#usn7 :`5esn`)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})))),`2esn`=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}))"),
    octest_legacy:ct_string("Create (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]}) Union Foreach(@usn5 In $usn2[12e12..]| Match `2esn`=(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2),`5esn`=Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan #usn7:`` Where {1000}[..$`3esn`][..2.12]) Return *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `1esn`,{0} Is Not Null Is Not Null As `8esn` Order By {`6esn`} =~{`4esn`} =~0x0 Desc,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} Desc Skip Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]) Limit All(@usn5 In {#usn8} Contains 7 Where $#usn7 =~$123456789 =~12)[Extract(_usn4 In $`` =~$1000 =~7 Where $@usn6[{`8esn`}..9e0][0..$`4esn`])..][Extract(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]|Null Contains \"d_str\" Contains {@usn6})..] Match (((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Using Scan #usn7:@usn6 Using Scan #usn8:`6esn` Where {1000}[$_usn3...e1]"),
    octest_legacy:ct_string("Unwind #usn7 =~#usn8 =~{`6esn`} As _usn4 Create Unique `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})) Union Unwind 0Xa[..07][..`2esn`] As @usn6 Start usn1=Relationship( {1000}) "),
    octest_legacy:ct_string("Unwind 12e12 Starts With 00 Starts With {0} As usn2 Start @usn6=Rel:`3esn`(_usn3='s_str') ,usn2=Node:`8esn`(`2esn`='s_str')Where Count(*)[`8esn`..$`7esn`] Create Unique `7esn`=((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})) Union Create _usn3=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})),usn2=Allshortestpaths((#usn7 :`5esn`)<-[`7esn` *..00]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})) Return Distinct *,#usn8['s_str'][$`2esn`] As #usn7,999 Is Null Order By (`5esn` {@usn6:0.12 Ends With #usn8 Ends With $1000})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`) Ends With Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End Descending,Extract(#usn7 In 0e0 Is Not Null Is Not Null Where {`1esn`} Starts With usn2)[..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``)][..Case When $@usn6 Is Null Is Null Then \"d_str\" Is Null Is Null When {usn2} =~{1000} Then `2esn` Ends With {#usn8} End] Asc Skip 0xabc Is Not Null Limit `7esn` In $`1esn` In $999 Union All Create (:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ) Start `2esn`=Relationship( {`4esn`}) ,_usn3=Node:@usn6(_usn3={``}) Unwind $@usn6[`4esn`..][0X7..] As `7esn`"),
    octest_legacy:ct_string("Unwind Reduce(@usn5=0X7 Is Null,_usn4 In $`` =~$1000 =~7|@usn6[..0X0123456789ABCDEF][..{`6esn`}]) Is Not Null Is Not Null As usn2"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Filter(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}) Ends With Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End Ends With {`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}} As `2esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge `8esn`=((:`1esn`{usn1:0.12 In 123456789})-[?{@usn6:{@usn5}[...e1][..01]}]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})) On Create Set {``:9e12 =~$usn2 =~9e1,usn1:$`5esn`[.e0..][0.0..]}.@usn6! =Single(@usn5 In {#usn8} Contains 7 Where $0 Starts With True Starts With $_usn4) In Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where `3esn`[{``}..$#usn8]),Extract(`` In `1esn` In `2esn` In $@usn6 Where 0[9e1..][0x0..])._usn3 =@usn6,_usn4+=[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] On Match Set #usn8 =``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] Return Distinct *,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] As usn2,01[..$usn1] As `3esn` Skip [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|$`7esn` Ends With @usn5 Ends With .e1][Shortestpath((((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))))..Any(`` In {0} Is Not Null Is Not Null Where 0xabc =~@usn6 =~{`2esn`})][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1 =~{_usn3})..Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))] Foreach(usn2 In $@usn5 Is Null Is Null| Load Csv With Headers From Single(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) In Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2]) In {`5esn`} As `5esn` Fieldterminator 's_str' Match `1esn`=((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)),_usn3=Allshortestpaths((`4esn` :usn1{`3esn`:12 Ends With {999} Ends With 's_str'})-[:`3esn` *01]-(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})-[`7esn`?:_usn4 *0xabc..]->(`4esn` :usn2:_usn4{usn2:@usn6})) Using Join On `6esn` Using Join On `7esn`,usn1)"),
    octest_legacy:ct_string("Return Distinct 12.0[..123456789][..{usn2}],{@usn5} Contains $999 Contains 0.12 Order By {`3esn`} =~$999 Descending,{`3esn`} Contains 12.0 Contains {`8esn`} Asc Skip `5esn`(Distinct $`8esn`[{``}..],12.e12) Contains Reduce(`6esn`=1.e1[$_usn4..999],`5esn` In 9e1 In 0.0 In {999}|999 In 0X0123456789ABCDEF In 9e0) Contains (@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"}) Limit $`5esn`[$7] Union All Return Distinct `` Is Null Order By #usn8[{#usn7}][12e12] Desc,$`6esn` Is Not Null Ascending,9e1 In 0.0 In {999} Descending"),
    octest_legacy:ct_string("Detach Delete ``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))],00[$usn1..][0xabc..],0X7[True..{0}][Count(*)..@usn5] Load Csv From $usn2 In {`5esn`} In 12.0 As `3esn`  Union Remove [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0|$`2esn`[Null][{usn2}]].`8esn`? Foreach(`8esn` In $#usn7[$@usn6..]| Create ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` ))) Detach Delete {`3esn`} Contains {`7esn`} Contains $`8esn`,7 =~$`6esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) Union All Create Unique `3esn`=(`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]}),_usn3=({_usn3:999[0.0..$`6esn`]})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]}) Return 1e1[{7}..{`5esn`}] As `2esn`,Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]),2.12 =~{``} =~0X7 Order By $`6esn`[..``][..{@usn5}] Ascending Start `6esn`=Rel( {`1esn`}) Where $`` =~$1000 =~7"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(``=0e0 =~{usn2},`4esn` In `4esn`[\"d_str\"..][123.654..]|1e1 In False) Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) As ``  Unwind Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} As `6esn` Union All Start #usn7=Node:`8esn`(`2esn`='s_str') Where {999}[{`1esn`}..``][{12}..$123456789] With  7[0e0..][$`1esn`..],True[{1000}][1000] As #usn8 Limit {999}[$7..] Where @usn5 Is Null Is Null"),
    octest_legacy:ct_string("Foreach(usn1 In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] In Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) In Single(`` In 9e0 Is Not Null Where {1000} Is Not Null Is Not Null)| Delete {`1esn`} =~{usn2} =~$``,usn1(Distinct `1esn`[``..$``]) Starts With None(#usn8 In $`8esn`[{``}..] Where #usn7 In 2.12 In $_usn3),{`7esn`} =~{7}) Optional Match `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))) Using Join On `7esn`,usn1 Union Foreach(`6esn` In {usn2} Contains `4esn` Contains @usn5| Match #usn7=((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)),((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)) Using Index usn2:_usn3(@usn5)) Union Unwind $7 Is Not Null Is Not Null As `3esn` Remove None(`` In 9e0 Is Not Null Where $_usn3[..@usn6][..{999}])._usn3"),
    octest_legacy:ct_string("Remove Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {`8esn`}[@usn5][0]).usn2 Union All Detach Delete Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]] Remove ({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`}).@usn5? Start `6esn`=Rel:_usn4({usn2}) ,@usn6=Node:#usn8({12}) Union Optional Match #usn7=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})),usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}) Using Scan `1esn`:#usn7 Using Join On _usn4,`2esn` Create Unique (`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12}),usn1=Shortestpath((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))) Start `1esn`=Rel:`3esn`(@usn5={12}) ,`6esn`=Node:usn2(_usn4=\"d_str\")"),
    octest_legacy:ct_string("Foreach(#usn8 In None(`` In 9e0 Is Not Null Where 07[{12}..])[Case False[{`5esn`}..{`8esn`}] When {0} Starts With {usn1} Then {`8esn`}[0xabc..][`4esn`..] End..]| Remove Shortestpath(((({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})<-[? *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:`1esn`{usn1:0.12 In 123456789})))).usn2,Allshortestpaths(((:`5esn`{`6esn`:{@usn5}[`4esn`][12.0]})))._usn3?) Remove {``:123456789[{`7esn`}..][{@usn6}..]}.#usn7? Create (`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]}),@usn6=(((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))) Union All Foreach(usn1 In {1000} In 7 In $_usn4| Unwind 0 In $`2esn` In {123456789} As usn2 Load Csv With Headers From 0x0 Ends With False Ends With 1000 As `2esn` ) Detach Delete (@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),False Ends With 0.e0 Remove Case False Ends With #usn7 Ends With 1.e1 When #usn8[{#usn7}][12e12] Then {`8esn`} Is Not Null End.`2esn`!"),
    octest_legacy:ct_string("Remove (:#usn8:_usn3{#usn8:_usn4 Contains {123456789} Contains $`5esn`,#usn7:$`6esn`})-[`3esn`?*{@usn6}]-(:_usn4:`4esn`{`6esn`:$`8esn`[...e1],@usn5:{@usn5} Is Not Null Is Not Null}).``,usn1:`3esn`:usn2 Optional Match ((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) Using Join On `7esn`,`3esn` Where {#usn8} Starts With 123456789 Starts With $`1esn` Union Load Csv From (:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) As `3esn` Fieldterminator 's_str' Start @usn6=Node:_usn3({7})  Match ((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`)) Using Join On `6esn`,`6esn` Using Scan `5esn`:@usn5 Where 0x0 Starts With usn1 Starts With 01 Union All Remove Reduce(`8esn`=`5esn` Is Null Is Null,`5esn` In usn2 Ends With 0.e0|01 Contains {0} Contains $`5esn`)._usn4! Unwind {`6esn`} Contains 01 Contains {#usn8} As @usn5"),
    octest_legacy:ct_string("Match ((`4esn` )-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})),Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`})) Using Scan `7esn`:`6esn` Where True Ends With {`7esn`} Ends With @usn5 Remove `6esn`(Distinct usn1 Starts With Count(*) Starts With @usn6).`3esn`!,None(_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1])._usn3,Extract(`` In `1esn` In `2esn` In $@usn6 Where {@usn5}[..$12]|$@usn6 Ends With Count(*)).`6esn`?"),
    octest_legacy:ct_string("Return 12 =~`7esn` =~#usn8,$0 Starts With {`2esn`} As `4esn`,Count(*) In `` Order By #usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$`6esn` Is Not Null Descending,{#usn7}[12.e12] Ascending Limit $1000[$`7esn`..1e1] Union All Unwind Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)] As #usn7 Start #usn8=Relationship:_usn3(`5esn`={_usn4}) ,``=Rel:`5esn`({`7esn`})Where #usn7[`4esn`..$`8esn`] Load Csv With Headers From @usn5 Contains 7 Contains 999 As usn2 Fieldterminator \"d_str\" Union All Load Csv From {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete Filter(`` In `1esn` In `2esn` In $@usn6 Where $_usn3[..@usn6][..{999}]) Ends With (_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) With Distinct {999} Starts With {`3esn`} As `8esn`,@usn5 Contains 123.654 As `` Order By Null Is Not Null Desc,{123456789} In 1.e1 Descending Limit exists() Is Null Where 12 Ends With {999} Ends With 's_str' Optional Match `2esn`=((@usn5 :`7esn`:#usn8)) Where $12 In {`8esn`}"),
    octest_legacy:ct_string("Create Unique `6esn`=(:`3esn`:usn2{_usn4:_usn4 Starts With $`3esn` Starts With {#usn8}}),`5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Return Distinct *,1000 Starts With {@usn5} Starts With 123.654 Union Match `1esn`=((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),@usn6=Shortestpath((((`2esn` :#usn8:_usn3)<-[`1esn`? *..123456789{``:_usn4 Starts With $`3esn` Starts With {#usn8}}]->(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`7esn`?{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}]->(`7esn` :#usn8:_usn3{_usn4:1.0[..`3esn`][...e0]})))) Using Join On _usn3,`8esn` Using Join On @usn5 Detach Delete 0X7 Ends With {@usn5} Ends With {_usn3},Reduce(_usn3=$#usn8 Ends With $_usn4,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|#usn7[$@usn6][$`8esn`])[Reduce(`8esn`={999} In Count(*) In `6esn`,usn2 In 1000 Starts With $123456789|#usn8 Ends With $usn1)..][(_usn3 :`8esn`)<-[usn2? *..00{#usn7:{`2esn`} =~12e12 =~1.0}]-(usn2 :usn2:_usn4{@usn6})..] Union All Foreach(`1esn` In $0 Contains 2.12| Start `5esn`=Rel:_usn3(`2esn`={0})  Return 123.654[0xabc][1.e1] Order By 0X7 Contains usn2 Contains $`1esn` Descending,{12} Is Not Null Is Not Null Descending Limit 010 Is Null Is Null)"),
    octest_legacy:ct_string("Load Csv With Headers From {0} Ends With $@usn5 Ends With 010 As _usn4 Fieldterminator \"d_str\" Unwind $usn1[$0..Count(*)][@usn6..$12] As `` Create Unique `1esn`=(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) Union All Unwind $`2esn` In $999 In 0.12 As _usn3 Load Csv From {_usn3} Starts With $`4esn` Starts With {_usn4} As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return Distinct {`4esn`}[9e1..{`6esn`}][9e0..1.0],0X7 Is Null As usn2,0Xa As #usn8 Order By 0xabc[$#usn7][0Xa] Desc,$@usn5[0.12..] Descending Skip {`6esn`} =~{`4esn`} =~0x0 Limit {_usn4}[@usn5] Union All Return Distinct .e1 In {`6esn`} In \"d_str\" As `2esn` Skip 0.e0 Ends With Count(*) Ends With `8esn` Limit Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) Load Csv With Headers From {usn2} =~{1000} As _usn4  Union Merge Shortestpath(((`` :_usn4:`4esn`)-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))) On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Unwind $`6esn` In $`2esn` As _usn3"),
    octest_legacy:ct_string("Foreach(_usn3 In ({#usn8:{12}[..9e1],`6esn`:12 Ends With 0X7 Ends With 12.0})-[`6esn`?]-($1000) =~{`6esn`:123456789[{`7esn`}..][{@usn6}..],`1esn`:{@usn6}[..$7][..{`6esn`}]} =~Extract(@usn5 In {#usn8} Contains 7 Where 010[123456789])| Create `4esn`=Allshortestpaths(((`1esn` {`7esn`:0.12[..$`4esn`][..$`7esn`],`5esn`:$7 Starts With $12 Starts With 12e12})<-[`3esn`?]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}))),@usn6=((`4esn` $`6esn`)) Start ``=Rel:usn1(`5esn`='s_str') ) With  *,$#usn8 =~{usn1} =~1e1,{#usn7}[0.12][{usn1}] As usn2 Skip Filter(@usn5 In {#usn8} Contains 7) Ends With Reduce(`1esn`=$`` Contains 123.654 Contains $#usn7,`` In {`7esn`} Starts With {0} Starts With {1000}|{`6esn`}[07..][{@usn5}..]) Ends With [12 Ends With {0} Ends With _usn4] Limit $usn2[$`5esn`..] Where {`1esn`}[`8esn`][{usn2}]"),
    octest_legacy:ct_string("Create ``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),(((`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[#usn8:_usn3|:@usn5{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}))) Union All Create #usn7=Shortestpath((({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3}))) Union All Merge `7esn`=Allshortestpaths(((#usn8 :`6esn`))) On Match Set All(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]).`6esn` =0X7 Is Null On Create Set Case When {_usn3} =~`6esn` =~$`8esn` Then 1e1 In #usn8 End.usn1 =.e12[$`2esn`..][{`3esn`}..],Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]),#usn8+=$`3esn` In $#usn8 In {_usn3}"),
    octest_legacy:ct_string("Detach Delete 0X0123456789ABCDEF[...e12][..0.12],9e12 =~$usn2 =~9e1 Load Csv With Headers From 's_str' =~\"d_str\" As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 123456789[..$#usn7] As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] As `4esn` Fieldterminator 's_str' Remove exists(1000 =~{`1esn`}).usn2,All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2])._usn4! Unwind $`4esn` Is Not Null Is Not Null As usn1 Union Detach Delete ({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],01[..$usn1],12.e12 In {@usn6} Merge `1esn`=((`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})) On Match Set @usn6 =Reduce(`7esn`='s_str' Contains {_usn4},`1esn` In $`7esn` Contains `1esn` Contains {usn1}|$@usn5[0.12..])[[$1000[$`7esn`..1e1],False Starts With #usn7 Starts With 12e12,12e12[@usn5..][01..]]][Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)],Reduce(usn2=.e1 In {`6esn`} In \"d_str\",`` In {`7esn`} Starts With {0} Starts With {1000}|{#usn8}[`7esn`..][_usn3..]).`4esn` =0Xa Contains 0X7 Contains {``} On Create Set `7esn` ={`3esn`} Is Null Is Null,(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8).`7esn`? =`8esn`[`1esn`..{7}][{_usn4}..$_usn4],_usn4+=07[.._usn4][..$@usn5] Remove [`` In `1esn` In `2esn` In $@usn6].#usn8,usn2(0.12[..$`4esn`][..$`7esn`]).#usn8? Union All Foreach(#usn7 In `8esn`[`1esn`..{7}][{_usn4}..$_usn4]| Load Csv From None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null) Is Null Is Null As #usn8 Fieldterminator \"d_str\" Remove Case 00 When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End.@usn5!,[#usn8[_usn4],usn1 Is Null,$999[0.12][0xabc]].usn1?) With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Where `6esn` Contains 01234567 Contains $12 Start `3esn`=Relationship( {12}) Where True Ends With Count(*) Ends With 1.0"),
    octest_legacy:ct_string("Load Csv With Headers From $123456789[#usn7..][0X7..] As _usn4 Fieldterminator \"d_str\" Load Csv From `2esn` Ends With {#usn8} As `1esn`  Union All Start usn1=Node:_usn3(``={12}) ,`7esn`=Node:``({``})Where $`5esn`[.e0..][0.0..] Merge ``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) On Match Set usn2+=Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]],_usn4+=.e0 Ends With $0 Ends With ``,[`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|{`6esn`} Is Not Null Is Not Null].`` =0xabc[False..#usn7][$`1esn`..'s_str'] On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Union Merge Allshortestpaths((_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))"),
    octest_legacy:ct_string("Remove Case $0[{7}..][123.654..] When $#usn7 In `4esn` In 1.0 Then 's_str' Is Null Is Null When $`5esn` In $_usn4 In $`2esn` Then 2.12 =~1.0 =~{`4esn`} End._usn3,[{`8esn`}[`3esn`..999],01234567[True],$7 Starts With $12 Starts With 12e12].``,(`1esn` :`5esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})<-[:usn2]-(`3esn` {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})<-[`1esn`:`3esn`]-({@usn6:01234567[True]}).`` Match @usn5=Allshortestpaths((usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Where $`2esn`[..$#usn8] Foreach(`6esn` In 0.0 Is Null Is Null| Load Csv With Headers From 0X7 Contains usn2 Contains $`1esn` As `4esn` Fieldterminator \"d_str\" With Distinct `2esn` Starts With `` Starts With .e12 Skip Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]) Limit {`5esn`}[{_usn3}..False])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Any(usn2 In 1000 Starts With $123456789 Where 0e0[..$`2esn`][..Count(*)])[{#usn8:0Xa Contains 0X7 Contains {``}}][(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})] As @usn5  Foreach(usn2 In Single(@usn5 In {#usn8} Contains 7 Where $0 Starts With True Starts With $_usn4) Starts With All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7})| Match `7esn`=((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})),`4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`)) Using Index _usn4:_usn3(`4esn`) Using Scan @usn6:#usn7 With Distinct {999} Starts With {`3esn`} As `8esn`,@usn5 Contains 123.654 As `` Order By Null Is Not Null Desc,{123456789} In 1.e1 Descending Limit exists() Is Null Where 12 Ends With {999} Ends With 's_str') With Distinct *,{`6esn`} Contains {`1esn`} Contains Null,$1000[`6esn`..][Count(*)..] As `3esn` Skip $usn2[_usn4][0.e0]"),
    octest_legacy:ct_string("Start `4esn`=Node:#usn7(`5esn`=\"d_str\") ,`5esn`=Rel:_usn3(`2esn`={0})Where $usn1[$0..Count(*)][@usn6..$12] Remove All(_usn4 In $`` =~$1000 =~7 Where {_usn4} Ends With .e1 Ends With 0x0).`6esn`! Foreach(usn1 In [usn1[12e12..],9e12 In $_usn3] Is Null Is Null| Return Distinct 0Xa[..07][..`2esn`] As #usn8,{@usn6} Is Null As `7esn`,1000 Contains {999} Contains 9e12 Order By {@usn5}[..$12] Desc,{@usn6} Contains {`1esn`} Descending)"),
    octest_legacy:ct_string("Return Distinct Case {``}[12e12..`6esn`] When 9e1[{usn2}..$1000] Then `2esn` Starts With `` Starts With .e12 When 01 Is Null Is Null Then {`4esn`}[$`8esn`..'s_str'] Else usn2[_usn3..{usn1}][@usn6..{`4esn`}] End[Reduce(`5esn`=0.12 Ends With #usn8 Ends With $1000,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|_usn3 Starts With 0X7)][Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End] As ``,({#usn8:00})-[:`3esn` *01]-(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}) Starts With Any(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]) As usn1,$usn2 Contains $usn1 Order By 999 Ends With 999 Ends With .e12 Descending,`1esn` Is Null Asc Limit $@usn5 Contains 1.0 Remove [12 Ends With {0} Ends With _usn4].@usn6?,None(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}).`3esn`! Union All Match `3esn`=Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})),Allshortestpaths((({`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]}))) Where $``[..999][..{`1esn`}] Union Start `6esn`=Rel:@usn6(`5esn`={1000}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null As usn1 "),
    octest_legacy:ct_string("Delete `7esn`[`7esn`..`5esn`] Union Merge #usn7=Allshortestpaths(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})) On Create Set @usn6 =[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]],usn1+=$`6esn` Ends With 1000 Ends With False,@usn6 =All(usn2 In 1000 Starts With $123456789 Where 12 Starts With $_usn4 Starts With $`6esn`) Contains {@usn5:0X0123456789ABCDEF[...e12][..0.12],`8esn`:{123456789} Starts With {`5esn`}} Contains Case {@usn6} Ends With `5esn` Ends With 00 When $`8esn` Is Not Null Is Not Null Then 12[1e1] When {`8esn`} Is Not Null Then 9e1[{usn2}..$1000] Else 1.e1[$_usn4..999] End"),
    octest_legacy:ct_string("Optional Match `3esn`=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),usn2=Allshortestpaths((((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})))) Using Index `1esn`:usn1(`8esn`) Using Index `2esn`:@usn5(@usn6) Where 01 Contains _usn3 Contains .e12"),
    octest_legacy:ct_string("Load Csv With Headers From $#usn8[..#usn8][..{`5esn`}] As `5esn` Fieldterminator \"d_str\" Optional Match ``=Allshortestpaths(({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[`2esn`:`` *..123456789]->(@usn5 :usn1)) Using Scan `5esn`:`3esn` Using Index `1esn`:@usn5(usn1) Where $#usn7[..0e0][..$12] Union All Foreach(_usn3 In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] Is Null Is Null| Delete 0x0 Is Null Is Null,False Starts With {``} Starts With 07,.e12[$@usn5..] Match Allshortestpaths(((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))),Shortestpath(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[``?:usn2 *..1000{usn1:{usn1} Is Null}]-(:`2esn`:@usn5{@usn6:12 =~0xabc,#usn7:{`7esn`} Starts With {0} Starts With {1000}})<-[?:`2esn`|_usn3]-())) Using Index `8esn`:#usn7(@usn6) Using Scan `3esn`:`1esn` Where {999}[{`7esn`}]) Load Csv From Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)[Shortestpath((((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))))] As usn1 Fieldterminator 's_str' Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Using Scan `7esn`:`6esn`"),
    octest_legacy:ct_string("Match usn1=Shortestpath(((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}}))) Create `4esn`=((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})) Load Csv With Headers From 0xabc Is Null As _usn3 "),
    octest_legacy:ct_string("Start `8esn`=Node:`1esn`(@usn5='s_str') Where {1000} Is Null Foreach(usn1 In 12e12[{#usn7}]| Match (((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Using Scan #usn7:@usn6 Using Scan #usn8:`6esn` Where {1000}[$_usn3...e1])"),
    octest_legacy:ct_string("Optional Match Shortestpath((:`4esn`)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})-[?{@usn5:0Xa Starts With .e12}]-(@usn5 :`6esn`)),Allshortestpaths(({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[usn1 *010..]->(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Using Join On ``,_usn4 Using Index _usn4:`2esn`(`8esn`) Load Csv From {#usn8:0Xa Contains 0X7 Contains {``}} Starts With `1esn`() Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) As #usn8 Fieldterminator \"d_str\" Load Csv From 7 =~$`6esn` As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique #usn8=Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),((_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) Union Merge #usn7=Shortestpath(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7}))) On Create Set `3esn` ={`3esn`}[$_usn3...e0],@usn6+=\"d_str\"[..`6esn`][..$`8esn`],Any(#usn8 In $`8esn`[{``}..] Where {@usn5}[9e1..][1e1..]).`5esn` ={0}[{@usn6}..$_usn3] On Create Set `2esn`+=12.e12 In {@usn6},None(`` In `1esn` In `2esn` In $@usn6).`1esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}|0x0 =~$usn2) Ends With [False Is Null Is Null,$_usn4 Contains 0 Contains False,{#usn7}[{12}..usn1]] Ends With Case {@usn6}[#usn8..][999..] When 1000 =~{`1esn`} Then usn1 Contains 9e1 Contains 0X0123456789ABCDEF When {`8esn`}[.e12][01] Then $`6esn` Is Not Null End Union Return $0 Starts With $1000 Starts With False,All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)],``[{123456789}..True] Order By Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])] Ascending,$_usn3 Ends With $999 Ends With 01 Desc,07 Is Not Null Is Not Null Ascending"),
    octest_legacy:ct_string("Detach Delete {123456789} Starts With {`5esn`},$`5esn` Contains `3esn` Contains {usn2} Union All Create _usn4=((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)) Optional Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Create #usn8=Allshortestpaths((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Union All Delete 0xabc[..``] Remove [{`6esn`}[..$12][..0.e0],{`1esn`} Contains {`5esn`} Contains 0e0,{#usn8}[True][{`7esn`}]].usn2?,All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12 Ends With 0X7 Ends With 12.0).#usn8! Load Csv With Headers From 2.12 Ends With usn1 Ends With $`2esn` As #usn8 "),
    octest_legacy:ct_string("Match _usn3=(_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}}) Union Start `3esn`=Relationship:#usn7('s_str')  Union Merge ((usn2 :usn2:_usn4{@usn6})<-[?:`7esn`|:`2esn` *0X0123456789ABCDEF..]->(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})) On Match Set @usn5 =$_usn3[`7esn`..][{usn1}..] On Create Set None(#usn7 In 0e0 Is Not Null Is Not Null Where `4esn` Ends With $#usn8 Ends With {12}).`3esn`? =Reduce(`4esn`={@usn6}[#usn8..][999..],#usn8 In $`8esn`[{``}..]|0X0123456789ABCDEF[{`5esn`}..]) Is Not Null Is Not Null,#usn7+=0.12 =~True =~`3esn`"),
    octest_legacy:ct_string("Remove None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]).`7esn`?,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}|{12}[..9e1])._usn3,Filter(`` In `1esn` In `2esn` In $@usn6 Where {`8esn`}[0xabc..][`4esn`..]).`1esn`? Merge @usn6=Allshortestpaths((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))) Union Delete 1000 Contains {999} Contains 9e12,0.0 Ends With {_usn4} Ends With $1000 Load Csv From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As `2esn` Fieldterminator \"d_str\" Start _usn4=Rel:`3esn`(`1esn`={@usn5}) "),
    octest_legacy:ct_string("With Distinct *,0.e0[1e1..9e1] Where {`1esn`} In `` In {12} Union All Start `2esn`=Node:usn2({usn2})  Create ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` )) With Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As `6esn`,{``:9e1[$`5esn`..0xabc]} Is Not Null As #usn8,{_usn4}[$`3esn`][$`3esn`] As `4esn` Order By 00[12.e12..0Xa][_usn4..@usn5] Descending Skip $0[{7}..][123.654..] Where 123456789 Is Null"),
    octest_legacy:ct_string("Start `5esn`=Rel:usn1(`5esn`='s_str')  Create (((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),`8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]})"),
    octest_legacy:ct_string("Merge (#usn7 :usn1) On Match Set `4esn`({123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]).`7esn` ={1000}[#usn7..{`8esn`}][{`4esn`}..'s_str'],_usn3+=`1esn` In 0 In $#usn7,`6esn`+={_usn4} =~$999 Unwind $usn2[_usn4][0.e0] As `6esn` Union All Load Csv From .e12[$`2esn`..][{`3esn`}..] As `2esn`  Match `7esn`=(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})<-[#usn8?:@usn5|:`1esn` *0Xa..{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]-(`` {usn1:{`8esn`} Is Not Null}) Using Index #usn7:`6esn`(@usn6) Where 0Xa[..`6esn`]"),
    octest_legacy:ct_string("Create Unique (:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}})"),
    octest_legacy:ct_string("Load Csv With Headers From 00 As `6esn`  Foreach(`4esn` In `2esn` Ends With $0 Ends With {7}| Unwind {`3esn`} Starts With 1.e1 Starts With $#usn7 As `7esn`) Optional Match (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Using Join On `2esn`,usn1 Using Index _usn4:_usn3(`4esn`) Where {7} Contains {#usn8} Contains {7} Union All Match usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Using Index `7esn`:#usn8(`5esn`) Where {``} Starts With 12.e12 Starts With .e12"),
    octest_legacy:ct_string("Return Distinct *,$usn2 In {`5esn`} In 12.0 As _usn4 Order By `3esn`[..$#usn7][..{`8esn`}] Descending,$`4esn`[0xabc..][.e12..] Ascending,Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Asc Optional Match `3esn`=Shortestpath(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) Using Join On _usn4,`6esn` Using Scan `4esn`:`7esn` Union All Remove [{`8esn`}[.e12][01],`1esn` In `` In {`6esn`}].`5esn`? Foreach(`8esn` In $#usn7[$@usn6..]| Create ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` ))) Union All Merge `1esn`=(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) On Create Set (usn1 :`5esn`{`6esn`:$#usn7 =~$`1esn`})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})-[_usn3?:_usn3|:@usn5]->(_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4}).`7esn` =Reduce(`4esn`={999} In Count(*) In `6esn`,`` In {0} Is Not Null Is Not Null|#usn7 =~#usn8 =~{`6esn`})[Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $_usn3[..@usn6][..{999}])][`3esn`(#usn8 Ends With $usn1)],_usn4+=1000 =~#usn8 =~$1000,Case {`5esn`} Starts With {12} Starts With 07 When 12e12 Starts With $`7esn` Then {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] Else $#usn8[@usn5..9e0][2.12...e1] End.#usn7? =[1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..]"),
    octest_legacy:ct_string("Return Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End],`5esn`['s_str'..][{0}..],Extract(`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]|$`2esn` In $999 In 0.12)[Case `6esn` =~{usn2} When $`5esn`[$7] Then $#usn7 =~$123456789 =~12 When $@usn5[0.12..] Then 9e12[`6esn`..{12}] End..][Shortestpath(((usn1 :@usn5:`7esn`)))..] As `1esn` Union All Detach Delete False Ends With 0.e0 Start usn1=Node:``(#usn8={`8esn`}) ,`5esn`=Node:`7esn`(`3esn`=\"d_str\") Unwind $0[{#usn8}][\"d_str\"] As usn2"),
    octest_legacy:ct_string("Return 0.e0[1e1..9e1],$`1esn`[``][\"d_str\"] Order By {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] Descending Limit {@usn5}[...e1][..01] With Distinct $`8esn`[{``}..] As `4esn`,0.e0[False] As `7esn`,1.0 Is Not Null Is Not Null As `6esn` Order By {123456789} Contains `7esn` Contains 010 Ascending,0x0[$123456789..$usn1] Descending,All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where `5esn` Is Null Is Null)[{usn1:`4esn` Ends With $#usn8 Ends With {12}}..][Single(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07])..] Ascending Skip 9e12 Is Null Is Null Where 010 Contains $`2esn` Contains 01 Union Create (`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[? *010..]->(`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]}),_usn3=Allshortestpaths((`6esn` :`1esn`)<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})) Create `6esn`=(:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}) Load Csv With Headers From 123456789[{1000}..] As @usn5 Fieldterminator \"d_str\" Union Unwind Shortestpath(((:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})<-[{usn2:$`` =~_usn4 =~_usn4,#usn8:{1000}[{@usn5}..][1.e1..]}]-(:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})<-[`6esn`?:_usn3|:@usn5 *..0X7]->(#usn8 {`1esn`:{_usn4} =~`7esn`}))) Ends With (`4esn` :#usn7:`3esn`{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:`3esn`]-(`5esn` :`1esn`)-[`7esn`?:`7esn`|:`2esn`{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}]->({`1esn`:`7esn` Contains 01234567 Contains `1esn`}) Ends With [@usn5 In {#usn8} Contains 7 Where 0X7] As #usn8 Remove [`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000].`4esn`"),
    octest_legacy:ct_string("Load Csv With Headers From {`7esn`} Starts With {0} Starts With {1000} As `1esn` Fieldterminator 's_str' Merge `1esn`=Shortestpath((((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4)))) On Create Set Case When 12e12[@usn5..][01..] Then {123456789}[01234567..Null] End._usn4! ={123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3],`4esn`+=usn1[@usn6][2.12] Remove `1esn`(Distinct {999} Starts With {`3esn`},{`1esn`} Contains {`5esn`} Contains 0e0).#usn7?"),
    octest_legacy:ct_string("Merge ``=(_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})-[`` *01{`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}) On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove Single(`` In {0} Is Not Null Is Not Null Where $`1esn` Ends With $`7esn` Ends With `2esn`).`8esn`!,`4esn`('s_str' Contains {_usn4},{`5esn`} In {#usn7} In $7).`3esn`! Load Csv With Headers From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] As `3esn` "),
    octest_legacy:ct_string("With  *,$@usn6[`4esn`..{999}][$``..{@usn6}] As `6esn`,$`8esn`[{``}..] As `4esn` Order By 9e12 =~01 =~$_usn3 Descending,.e12[_usn4..][{`5esn`}..] Asc Skip Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] Limit $usn2 Contains $usn1 Where 7 Is Null With Distinct *,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] As usn2,01[..$usn1] As `3esn` Order By 00[12.e12..0Xa][_usn4..@usn5] Descending,12e12[{#usn7}] Asc,2.12 In $123456789 In 00 Descending With  *,None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As usn2,usn2[9e12..$`3esn`] As _usn3 Order By 1.e1 Ends With $12 Ends With #usn8 Ascending,1.0[..`3esn`][...e0] Desc Skip 12 In {999} In 999 Limit [`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null] Contains Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where Count(*)[.e12..]) Contains {`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1} Union Detach Delete True Is Null,$usn2[{_usn3}..],Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] Union All Optional Match ((usn2 :usn2:_usn4{@usn6})<-[?:`7esn`|:`2esn` *0X0123456789ABCDEF..]->(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})),(`5esn` :usn1)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]->(#usn8 :`1esn`)<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) Using Index `7esn`:`2esn`(`7esn`) Using Index `6esn`:`7esn`(`5esn`) Where `7esn`[$`6esn`][$`8esn`] Create Unique Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))))"),
    octest_legacy:ct_string("Load Csv From {`1esn`} In 0.e0 In $1000 As ``  Merge (`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[_usn4?:_usn3|:@usn5]-(usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) On Match Set None(#usn7 In 0e0 Is Not Null Is Not Null Where `4esn` Ends With $#usn8 Ends With {12}).`3esn`? =Reduce(`4esn`={@usn6}[#usn8..][999..],#usn8 In $`8esn`[{``}..]|0X0123456789ABCDEF[{`5esn`}..]) Is Not Null Is Not Null,#usn7+=0.12 =~True =~`3esn` On Match Set @usn6 ={7}[..123456789][..$#usn8],_usn3+={`5esn`}[{_usn3}..False],#usn8 =$_usn4[1.0..@usn6]"),
    octest_legacy:ct_string("Optional Match Shortestpath(((({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})<-[? *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:`1esn`{usn1:0.12 In 123456789})))),#usn8=(`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(`2esn` :usn2:_usn4) Using Scan `5esn`:`` Union Create `4esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),`1esn`=Allshortestpaths(((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0}))) Create Allshortestpaths((`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`})),((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0})) Load Csv From {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] As `6esn` Fieldterminator \"d_str\" Union Load Csv With Headers From 1.e1 Ends With {`8esn`} Ends With 00 As `` Fieldterminator \"d_str\" Merge ((_usn4 )<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From ``(Distinct 01 Is Null Is Null)[[`5esn` In usn2 Ends With 0.e0 Where 07 Ends With `1esn` Ends With {@usn5}]..][[`` In {0} Is Not Null Is Not Null Where 01[..$usn1]|$#usn8 Ends With #usn8 Ends With 12]..] As `2esn` Fieldterminator 's_str' Foreach(#usn7 In Count(*)[.e12..]| Start usn1=Node:@usn6(_usn3={``}) Where {`1esn`} Ends With 2.12 Ends With _usn4) Return Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc Is Null) In {usn1:``[..`2esn`][..@usn5]} In (:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}}) Order By 1.e1[$_usn4..999] Descending,{@usn6}[..$7][..{`6esn`}] Descending,{`1esn`} =~{usn2} =~$`` Ascending Limit 123456789[{`7esn`}..][{@usn6}..]"),
    octest_legacy:ct_string("Load Csv From {usn2}[010..][$123456789..] As `` Fieldterminator 's_str' Return Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]),$7 Is Not Null Is Not Null Skip [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Detach Delete Reduce(`4esn`={999} In Count(*) In `6esn`,_usn4 In $`` =~$1000 =~7|{999} In Count(*) In `6esn`) In Case `5esn` Is Null Is Null When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 When .e1 In {`6esn`} In \"d_str\" Then $0 Starts With {`2esn`} End In Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Union All Load Csv With Headers From 7[0e0..][$`1esn`..] As `8esn`  Union All Return Distinct *,`7esn`[..#usn7] Skip {@usn5} In {_usn3} In 0e0 Limit None(#usn7 In `7esn` In $`1esn` In $999 Where `5esn` Is Null) Ends With [#usn7 In `7esn` In $`1esn` In $999 Where 0X7 Contains usn2 Contains $`1esn`|True[#usn8..][$123456789..]] Ends With Extract(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]|123456789 In usn2) Delete {#usn8}[`7esn`..][_usn3..],$0[{#usn8}][\"d_str\"],1000 Starts With $123456789"),
    octest_legacy:ct_string("Unwind $@usn5 Contains 12e12 Contains {`6esn`} As #usn8 Load Csv From {0} Starts With {usn1} As @usn5 Fieldterminator \"d_str\" Start usn1=Node:``(#usn8={`8esn`}) Where {`8esn`}[@usn5][0] Union All Unwind {`1esn`} Ends With 12 Ends With {1000} As usn1 Start `8esn`=Rel:_usn4(_usn4=\"d_str\") Where 12.0[12..9e1] Union All Remove (@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null})<-[?:`1esn`|`6esn`{`2esn`:False[{`5esn`}..{`8esn`}]}]-(`2esn` :usn2:_usn4).usn1,[@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|`7esn`[1.e1..#usn8]].`6esn`?,_usn3:`1esn`"),
    octest_legacy:ct_string("Unwind {@usn6}[..$7][..{`6esn`}] As ``"),
    octest_legacy:ct_string("Create `1esn`=Shortestpath((((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4)))),((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})) Match (({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})-[#usn8?:`5esn`]->(`8esn` :`2esn`:@usn5)<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(`8esn` :`2esn`:@usn5$``)),#usn8=Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Using Join On _usn3,`5esn`,#usn8 Using Index usn2:_usn3(@usn5) Union All Foreach(@usn5 In True Contains {12} Contains 0Xa| Create @usn6=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`5esn` :_usn4:`4esn`)) Load Csv From {@usn6}[#usn8..][999..] As `3esn` ) Optional Match #usn8=((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)) Where 0Xa[..`6esn`] Remove None(#usn8 In $`8esn`[{``}..] Where 0Xa[..07][..`2esn`]).usn1!"),
    octest_legacy:ct_string("Detach Delete 0x0 Contains 0x0 Contains {`1esn`},9e12[_usn4..1.e1][{`3esn`}...e1] Union Load Csv With Headers From {usn1}[0..{@usn6}][True..usn2] As `7esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create (`7esn` :_usn4:`4esn`)"),
    octest_legacy:ct_string("Unwind Reduce(``=$`7esn` Contains `1esn` Contains {usn1},`4esn` In 0.12[.e12..0][1.0..{_usn4}]|0[9e12..{usn1}]) =~[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12] =~[`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]] As usn1 Foreach(`4esn` In Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)]| Remove `6esn`(Distinct $`` Contains 123.654 Contains $#usn7).`4esn`!,Reduce(`4esn`=$999[0.12][0xabc],`` In `1esn` In `2esn` In $@usn6|{@usn6} Contains 's_str').usn2?,(_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)<-[`2esn`:`` *..123456789]->(@usn5 :usn1).`5esn`) Union All Foreach(`8esn` In $#usn7[$@usn6..]| Create ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` ))) Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Using Scan `7esn`:`6esn` Merge `1esn`=(`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`) On Create Set `3esn`+=$`7esn` Starts With 01 Starts With $7 Union Unwind `6esn` In _usn4 In {_usn4} As `2esn` Create (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}),Shortestpath(((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7}))) Merge _usn4=Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))) On Create Set (_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).@usn5 =(:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]}) On Create Set All(`` In {0} Is Not Null Is Not Null Where 01234567[`1esn`]).#usn7? =9e1[$@usn5..],`2esn` ={@usn6}"),
    octest_legacy:ct_string("Load Csv With Headers From {`7esn`} =~{7} As usn1 Fieldterminator 's_str' Foreach(`6esn` In 0.0 Is Null Is Null| Remove Case 123.654[0xabc][1.e1] When {`1esn`} =~{usn2} =~$`` Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] End.`1esn`,Extract(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).@usn6? Load Csv With Headers From 's_str' Is Not Null As `8esn` Fieldterminator \"d_str\") Load Csv From {`7esn`} =~0.12 =~01234567 As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique #usn8=Shortestpath((:usn2:_usn4)-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})),(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Optional Match ((`5esn` :`1esn`)<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(#usn8 :`5esn`)),(:`5esn`) Using Index _usn4:usn1(usn2) Return Distinct 1.0[$`5esn`..{``}] As _usn4 Limit 12[0X7..] Union All Create `2esn`=(`2esn` {`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`{@usn5:$`` Ends With 9e0}]-(@usn5 {`1esn`:$`5esn` =~`7esn` =~usn2,`8esn`:01234567[`1esn`]}) Union All Create Unique usn2=(:``)"),
    octest_legacy:ct_string("Remove [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {#usn8} In $7|{999} Starts With {`3esn`}].#usn8"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] As `2esn`  Foreach(`2esn` In .e0[@usn6..]| Load Csv From {1000}[#usn7..{`8esn`}][{`4esn`}..'s_str'] As #usn7 )"),
    octest_legacy:ct_string("Create #usn8=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))),`3esn`=Allshortestpaths(((`3esn` :usn1{`7esn`:$12 In {`8esn`}})-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]-(`2esn` :`5esn`{``:`1esn`[``..$``]}))) Union Foreach(usn2 In 12 Ends With {999} Ends With 's_str'| Start `6esn`=Rel:_usn4({usn2}) ,@usn6=Relationship:#usn8(@usn5='s_str'))"),
    octest_legacy:ct_string("Match Shortestpath(((`2esn` :``{_usn4:{#usn7} In {`6esn`}})-[`3esn`?]->(:@usn6{@usn6:01234567[True]}))),`5esn`=(:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) Using Join On _usn3,`2esn`,`6esn` Where 123456789[{`7esn`}..][{@usn6}..] Create Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))),usn1=((`4esn` :`5esn`)) Foreach(`5esn` In {_usn3}[{``}..]| Create `6esn`=Allshortestpaths(((`` :`5esn`{#usn8:$7 In 00})))) Union Return Distinct Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] As `8esn`,Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]) Is Null Is Null,{usn1} Contains {@usn6} Contains $0 As #usn7 Merge ``=(`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) On Create Set `` =Case {_usn4} Contains {999} Contains 2.12 When Null[#usn7][07] Then #usn8[Null] End Starts With Case #usn7 =~#usn8 =~{`6esn`} When `6esn` Contains 01234567 Contains $12 Then #usn7 Is Null When $#usn7[$123456789..][{0}..] Then 0X7 =~{_usn3} =~0x0 End,{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}.#usn8? =0xabc[..``] Union Merge `6esn`=(`4esn` :#usn7:`3esn`{usn1:$`4esn` Contains {7} Contains 999})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(_usn4 :usn1) On Match Set `1esn` =(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null).usn2 =Count(*)[.e12..],_usn4+=$`5esn`[{usn2}..][Null..] On Match Set @usn6+=9e1[01..],Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).@usn5? =[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])],@usn6+=Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`}"),
    octest_legacy:ct_string("Delete $`3esn` Ends With {_usn3} Ends With 9e1,1.e1[{``}],Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]) Union Remove {usn2:{`8esn`} Is Not Null}.#usn8!,Allshortestpaths(((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]}))).#usn7?,{#usn7:usn2[_usn3..{usn1}][@usn6..{`4esn`}],usn1:1.e1[$_usn4..999]}.`3esn`? Create Unique #usn7=((usn2 :usn2:_usn4{@usn6})),((usn1 :@usn5:`7esn`)) Merge ``=Allshortestpaths((((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )<-[usn2 *07..07{_usn4:\"d_str\" Contains `6esn` Contains $12}]-({#usn7:{`8esn`}[Count(*)..]})))) On Create Set Case $@usn5 Ends With 00 Ends With 12.e12 When 0.12 In 123456789 Then True[$7..] When $123456789 Is Null Is Null Then $999 Contains 0e0 End.`2esn` =({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],`3esn`+=010 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(@usn6 In {`3esn`}[`1esn`]| Load Csv From {@usn5}[`4esn`][12.0] As `1esn` ) Delete 0.12[.e12..0][1.0..{_usn4}],{_usn4}[@usn5],Reduce(_usn4=$usn1[{``}..usn2][`3esn`..$1000],usn2 In 1000 Starts With $123456789|01[..$usn1])[Case When $#usn7[..0e0][..$12] Then $`6esn` End][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``})] Foreach(`4esn` In _usn4[01234567.._usn4][False..12]| Optional Match `2esn`=(usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2),`5esn`=Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Index _usn3:@usn6(`2esn`) Where 0X7 Is Null) Union Create Unique usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}),`4esn`=Allshortestpaths(((:`4esn`{`3esn`:True[$7..]})<-[`7esn`?:`7esn`|:`2esn`]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)})))"),
    octest_legacy:ct_string("Load Csv With Headers From (:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8) Is Not Null Is Not Null As #usn7 Fieldterminator \"d_str\" Delete Any(usn2 In 1000 Starts With $123456789 Where 0e0[..$`2esn`][..Count(*)])[{#usn8:0Xa Contains 0X7 Contains {``}}][(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})],$1000 In 7 In `1esn` Union All Remove Case @usn5 Is Null Is Null When {0} Ends With $@usn5 Ends With 010 Then `1esn` In `` In {`6esn`} End.@usn6!,(`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}).`4esn`? Unwind `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF As _usn3 Create Unique Shortestpath((((`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})))),usn2=(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})<-[:`8esn`|:#usn8 *0]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]}) Union All Optional Match `2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),`8esn`=(`7esn` :`6esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}) Using Index `6esn`:`1esn`(_usn4) Using Index `7esn`:`2esn`(`7esn`) Where $#usn8[..9e1] With Distinct $`4esn` Starts With #usn8 Starts With 2.12 As `8esn`,$`4esn`[0xabc..][.e12..],$_usn4 =~{#usn8} =~$`5esn` Skip [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn2 Ends With $@usn6 Ends With $_usn3|``[..`2esn`][..@usn5]][{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]}..] Where $`5esn`[$#usn7] Create Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))))"),
    octest_legacy:ct_string("Foreach(#usn8 In usn2 Ends With 0.e0| Create Unique `3esn`=Shortestpath(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))),((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3))) Remove Case ``[..`2esn`][..@usn5] When `3esn` In .e1 In 0X0123456789ABCDEF Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF End.@usn5 Return *,{999} Starts With {`3esn`} As #usn8 Order By None(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) Is Null Is Null Desc,$1000[01][$123456789] Ascending Skip {`3esn`} =~$999 Limit {999} Contains {_usn4} Contains usn1 Union All Create Unique ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),``=(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})"),
    octest_legacy:ct_string("Load Csv With Headers From $`6esn` Ends With 1000 Ends With False As `8esn` Fieldterminator 's_str' Union All Optional Match ((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})) Using Index `7esn`:usn2(usn2) Where 9e12 Is Null Is Null Create `5esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath((#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[ *0]->(:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}})) Delete usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`},12e12 Starts With $`7esn`,0x0[0.0..]"),
    octest_legacy:ct_string("Foreach(usn2 In $`2esn` Starts With 0xabc Starts With 1000| Return 12 =~`7esn` =~#usn8,$0 Starts With {`2esn`} As `4esn`,Count(*) In `` Order By #usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$`6esn` Is Not Null Descending,{#usn7}[12.e12] Ascending Limit $1000[$`7esn`..1e1] Remove {#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]}.`4esn`,(`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *07..07{@usn6:0X0123456789ABCDEF[..0.12],`6esn`:{`8esn`}[`3esn`..999]}]-(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]->(#usn8 :`1esn`).`8esn`!) Start `7esn`=Rel:@usn5('s_str') Where {@usn5} Contains $999 Contains 0.12 Optional Match Allshortestpaths(((:`6esn`)<-[:`3esn` *01]-(`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`))) Where {@usn5}[{0}..0X0123456789ABCDEF] Union Return Distinct *,0.0[$`1esn`..$`5esn`][usn2..$``] Order By Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]] Asc,1.0 Is Not Null Is Not Null Desc Skip {@usn5}[...e1][..01] Limit {`8esn`}[Count(*)..] With Distinct *,1.0 Contains #usn8 Contains $usn1 Order By {`5esn`}[{_usn3}..False] Desc,#usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$12[..$`6esn`][..$`1esn`] Descending Limit False Starts With 's_str' Starts With $`6esn` Union All Create `6esn`=(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),Allshortestpaths(((#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]}))) Merge ((usn2 )<-[?:``{`3esn`:'s_str' Contains 0xabc,`4esn`:$999 Contains 0e0}]-(@usn5 :`3esn`:usn2{`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`)) On Match Set `5esn`+=$usn1[{`5esn`}][0Xa] Unwind 0.0[$`1esn`..$`5esn`][usn2..$``] As usn1"),
    octest_legacy:ct_string("Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Order By 07[{12}..] Ascending Skip None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Start usn1=Node:`4esn`({`6esn`})  Create Unique @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))"),
    octest_legacy:ct_string("Remove Shortestpath(((:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12}))).usn2? Union All Load Csv From Case `5esn`[12.0..] When $12 In $`3esn` In 07 Then $12 Starts With {#usn8} Starts With {999} End[Case When $7 In 00 Then $`` Ends With 9e0 End] As ``  Start `7esn`=Rel:@usn5('s_str')  Load Csv With Headers From Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End As `5esn`  Union All Return {`8esn`:@usn6[2.12..][`5esn`..]} Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]|{`2esn`} Starts With 1e1),{usn2} Ends With $`7esn` Ends With {`1esn`} As usn2 Skip {0} Is Not Null Is Not Null Limit (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)] Start @usn6=Rel:_usn3(``={999}) ,`8esn`=Rel:_usn4(_usn4=\"d_str\")Where {`8esn`}[Count(*)..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 9e0 As usn2 Fieldterminator 's_str' Merge _usn4=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Create Set Case 123.654[0xabc][1.e1] When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 Else $usn1 =~{_usn3} End.`2esn`! =12.e12[`6esn`][1.e1],#usn7 =All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] On Create Set Extract(`` In {0} Is Not Null Is Not Null Where 010[123456789])._usn4? =$#usn8[..01],[`5esn` In usn2 Ends With 0.e0 Where #usn7[$@usn6][$`8esn`]].@usn5? =$#usn7[..0e0][..$12],@usn6 =$0[{7}..][123.654..] Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Remove Filter(`5esn` In usn2 Ends With 0.e0 Where $@usn5[0.12..]).#usn7?,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]).`2esn`!,Reduce(`4esn`=01 Starts With 12e12,#usn8 In $`8esn`[{``}..]|_usn4 Contains {123456789} Contains $`5esn`).`5esn`? With Distinct Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As `4esn` Order By Case $0 Starts With {`2esn`} When $`2esn`[Null][{usn2}] Then 010 Ends With {999} When $7 Starts With $12 Starts With 12e12 Then False =~$`8esn` End[..Any(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][..Case $@usn6 Is Not Null When {``}[True][00] Then 0x0[$123456789..$usn1] When .e12[..010][..{0}] Then 01[.._usn4][..$_usn4] End] Descending,$@usn6 Is Not Null Asc Skip $#usn7 Ends With `6esn` Ends With {`3esn`} Limit Any(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Is Null Is Null)[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4|$7 In 00]][`6esn`] Delete .e0[$`8esn`..12e12][usn1..999],{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]} Ends With {#usn7:07 Ends With `1esn` Ends With {@usn5}} Ends With Single(`` In {`7esn`} Starts With {0} Starts With {1000}) Union Merge usn2=Shortestpath((`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})) On Match Set _usn4 =999[$_usn3..][$``..],Extract(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]|#usn8[\"d_str\"..999]).`8esn`? =12 =~0xabc Union All Foreach(#usn7 In _usn3 Ends With {`2esn`}| Remove [#usn7[0.12..12.e12],0xabc[$#usn7][0Xa]].`5esn`,Extract(`` In {0} Is Not Null Is Not Null Where 010[123456789])._usn4?,Reduce(`5esn`=$usn2 Ends With `5esn` Ends With 0Xa,`5esn` In usn2 Ends With 0.e0|$12 In $`3esn` In 07).#usn7? Delete {usn2} Ends With _usn3,0.e0 Is Not Null Is Not Null) Remove Reduce(`8esn`=@usn5 Starts With 0xabc,#usn8 In $`8esn`[{``}..]|$`8esn` Ends With {`5esn`} Ends With $`4esn`).@usn5!"),
    octest_legacy:ct_string("Load Csv From {``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6) As usn2  Remove [12 Ends With {0} Ends With _usn4].@usn6?,None(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}).`3esn`! Union All Remove {`3esn`:$`4esn` Starts With #usn8 Starts With 2.12}.`3esn`,Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`))))._usn4!,All(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]).`6esn` Return *,{@usn6} Is Null,{0}[{@usn6}..$_usn3] As `6esn` Order By {123456789} Starts With {`5esn`} Desc,`8esn` Is Not Null Is Not Null Descending Limit 7 In {7} With Distinct 1000 =~{`1esn`} Order By Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null) Ascending Limit $`7esn` Is Null Is Null Where {`8esn`}[0xabc..][`4esn`..] Union All Create ((`8esn` :`1esn`)<-[?{`6esn`:True Ends With Count(*) Ends With 1.0}]->(:_usn4:`4esn`{`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})-[``? *0]-(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]}))"),
    octest_legacy:ct_string("Merge `3esn`=(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}) Union Foreach(usn2 In $`6esn` =~$_usn3 =~.e1| Match #usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`),(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Index `3esn`:#usn7(usn2) Where 0 In Null In 00 Start ``=Relationship:`6esn`(usn1={#usn8}) ,`8esn`=Node:`6esn`(\"d_str\")) Union Unwind Case When $`5esn` Is Null Then 0X0123456789ABCDEF End Is Not Null Is Not Null As @usn6 Delete {`7esn`} Ends With 999,{`5esn`} Starts With $`4esn`,{`2esn`} Starts With 1e1 Remove [`5esn` In usn2 Ends With 0.e0 Where 9e1[{usn2}..$1000]].`1esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $1000[`6esn`..][Count(*)..] As usn2  Create @usn5=Shortestpath(((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]}))) Match `4esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`})) Using Scan `1esn`:usn2"),
    octest_legacy:ct_string("Match `5esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`))) Using Scan `3esn`:#usn7 Where $999 Is Not Null Is Not Null Union Detach Delete [`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]],0X7 Ends With {0} Ends With $12 Create _usn4=Shortestpath(({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),Allshortestpaths(((`` :`5esn`{#usn8:$7 In 00}))) With Distinct *,$12[$`3esn`][9e12] As #usn8 Order By Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Asc Skip $999 Contains 0e0 Limit $#usn8[{7}..{`6esn`}] Where $0 Starts With {`2esn`}"),
    octest_legacy:ct_string("Unwind Null[#usn7][07] As usn2 Union Unwind `5esn`(Distinct $`8esn`[{``}..],12.e12) Contains Reduce(`6esn`=1.e1[$_usn4..999],`5esn` In 9e1 In 0.0 In {999}|999 In 0X0123456789ABCDEF In 9e0) Contains (@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"}) As ``"),
    octest_legacy:ct_string("With  *,{@usn6} Is Null,{0}[{@usn6}..$_usn3] As `6esn` Order By Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc,#usn8[\"d_str\"..999] Descending Where $`3esn` Ends With {_usn3} Ends With 9e1 Match (({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})),@usn6=Shortestpath((`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`)) Using Join On `1esn`,`4esn`,usn2 Create Unique Allshortestpaths((@usn6 :#usn7:`3esn`)<-[?:`4esn`]->(usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-(#usn7 :`2esn`:@usn5)),@usn5=Allshortestpaths(((`4esn` :`8esn`)))"),
    octest_legacy:ct_string("Optional Match #usn7=((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[_usn4? *0xabc..{`3esn`:9e0 =~.e12}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})),usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}) Using Scan `1esn`:#usn7 Using Join On _usn4,`2esn` Create Unique (`4esn` :`5esn`)-[`1esn`?:_usn4 *..00]->(#usn7 :`2esn`:@usn5)-[`5esn`?{`1esn`:{``}[...e1]}]->(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12}),usn1=Shortestpath((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))) Start `1esn`=Rel:`3esn`(@usn5={12}) ,`6esn`=Node:usn2(_usn4=\"d_str\")"),
    octest_legacy:ct_string("Merge usn1=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))) Start @usn5=Rel:`2esn`(@usn5={1000}) ,@usn6=Node:_usn3({_usn3}) Union Remove [`` In `1esn` In `2esn` In $@usn6].#usn8,usn2(0.12[..$`4esn`][..$`7esn`]).#usn8? Union Load Csv With Headers From {999}[{`1esn`}..``][{12}..$123456789] As usn2  Remove $usn2.`3esn`,[`` In {0} Is Not Null Is Not Null Where 0.12[..$`4esn`][..$`7esn`]|0X0123456789ABCDEF Starts With {`2esn`} Starts With Null].``,`8esn`(07 Starts With 123.654 Starts With 1.0).`5esn`?"),
    octest_legacy:ct_string("Merge _usn4=Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))) On Create Set `7esn`+=$`1esn`[``][\"d_str\"],{`7esn`:$999 Is Not Null Is Not Null}.usn2! =[12 Starts With $_usn4 Starts With $`6esn`][..Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null}))][..{@usn6:`2esn` Starts With `` Starts With .e12}] Merge Shortestpath(((`` {`1esn`:$@usn6 Is Not Null})-[@usn5? *07..07{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[#usn7:usn2 *01234567..]->(:`1esn`))) On Create Set usn1 ='s_str' =~\"d_str\",`3esn` =None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null) Is Null Is Null Union Start `3esn`=Relationship:#usn7('s_str') ,`5esn`=Rel:`5esn`({`7esn`})Where 00 Union All Merge `8esn`=((@usn6 :_usn4:`4esn`)-[?:`3esn`*]-(`8esn` {#usn8:9e0 Is Not Null})-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 01[$#usn8..][7..] As #usn7 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge `7esn`=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})) On Create Set ``+=$_usn4 Is Null Is Null,`8esn` ={`2esn`:$_usn3 In $`5esn`} =~Case 12 Starts With $_usn4 Starts With $`6esn` When 123456789 Is Not Null Is Not Null Then 0xabc[{@usn5}..][Count(*)..] Else {#usn8}[0X7][0X0123456789ABCDEF] End,_usn3(Distinct {_usn4} Ends With .e1 Ends With 0x0,9e1[$@usn5..])._usn4! ={#usn7}[$`5esn`..][{usn1}..] On Match Set {``:`8esn` Contains 123.654 Contains {`7esn`},#usn8:{7}[..123456789][..$#usn8]}.`3esn` =usn1[12e12..],`3esn`+=`3esn` =~usn2 =~7,[.e0 Is Not Null Is Not Null,`2esn` Is Not Null].`6esn`? =010 Is Not Null Is Not Null Union Load Csv With Headers From $`6esn` =~$_usn3 =~.e1 As `2esn` Fieldterminator \"d_str\" With  Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999),Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) As `4esn`,12.0 Contains {`3esn`} Limit 1000 =~{`1esn`} Where {#usn8} In $7 Load Csv From 0X7 =~$`7esn` =~$_usn3 As _usn3 Fieldterminator \"d_str\" Union All Delete $_usn3,07 =~usn2 With  *,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `1esn`,{0} Is Not Null Is Not Null As `8esn` Limit 0X7[1.e1..$`1esn`][$@usn5..0.e0] Where `2esn` Ends With $`6esn` Ends With `2esn`"),
    octest_legacy:ct_string("Remove Shortestpath((((`4esn` :`2esn`:@usn5{#usn8:1e1[{`6esn`}..{1000}][07..123456789]})<-[`8esn`? *0X0123456789ABCDEF..{`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}]->(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(:#usn7:`3esn`{usn1:{`8esn`} Is Not Null})))).`3esn` Union All Foreach(`7esn` In 12e12 Starts With $`7esn`| Create Unique Allshortestpaths((`5esn` :usn1)-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->({@usn5:`6esn` =~{usn2},`1esn`:010}))) Foreach(usn1 In Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null| Match ((:usn1)<-[`5esn`:`2esn`|_usn3{usn1:9e1[..`4esn`]}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})),Allshortestpaths((((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})))) Where `1esn` In `` In {`6esn`}) Unwind 123.654 Starts With .e1 Starts With $999 As `5esn`"),
    octest_legacy:ct_string("Detach Delete $`3esn` Ends With {_usn3} Ends With 9e1 Delete $usn2 Ends With `5esn` Ends With 0Xa,9e12 Starts With Count(*) Starts With {`4esn`} Delete [010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End,{#usn7} Is Null,None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null) Is Null Is Null Union Unwind [usn1[12e12..],9e12 In $_usn3] Is Null Is Null As `8esn` Delete {`8esn`} In 123.654 In usn2,[`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]],{@usn5} Contains $999 Contains 0.12 Merge (:`3esn`:usn2{_usn4:_usn4 Starts With $`3esn` Starts With {#usn8}}) On Create Set `6esn`+=$`3esn`[..{`4esn`}][..12.e12],Any(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`6esn` =~$_usn3 =~.e1).@usn5? =01[$#usn8..][7..] On Create Set _usn3 =[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn2 Ends With $@usn6 Ends With $_usn3|``[..`2esn`][..@usn5]][{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]}..] Union All Load Csv With Headers From 123.654 Starts With .e1 Starts With $999 As @usn5  Create `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]}))"),
    octest_legacy:ct_string("Foreach(`1esn` In (:#usn8:_usn3{#usn8:_usn4 Contains {123456789} Contains $`5esn`,#usn7:$`6esn`})<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[#usn8?:`5esn`]->(`8esn` :`2esn`:@usn5)[..Single(`` In `1esn` In `2esn` In $@usn6 Where {_usn4} Contains {999} Contains 2.12)]| With  $0 Starts With $1000 Starts With False,All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)],``[{123456789}..True] Limit Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)[Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]|0.12 In 123456789]][`7esn`..Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1)]) Remove ``:`3esn`:usn2,[@usn5 In {#usn8} Contains 7 Where 010[123456789]].`6esn`!,None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 0xabc[{@usn5}..][Count(*)..]).``? Union All Detach Delete Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}],{usn1} Contains $`` Contains {`8esn`},{@usn6}[{`2esn`}][Count(*)] Match #usn8=((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})),_usn3=Shortestpath(({`8esn`:$@usn5[0.12..]})) Using Join On #usn7 Create (((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Union All Remove Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|{1000} In $`2esn` In $_usn3).`2esn`! Create Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))),usn1=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))) Foreach(`1esn` In usn2[_usn3..{usn1}][@usn6..{`4esn`}]| Remove {_usn4:9e12 Is Null Is Null}.#usn8?,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]|{1000}[..$`3esn`][..2.12]].`1esn`)"),
    octest_legacy:ct_string("With  *,Shortestpath(((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[:`8esn`|:#usn8{usn2:{`1esn`} Is Null,#usn7:{`8esn`}[@usn5][0]}]-({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`))) =~(:`4esn`{`8esn`:{#usn8} Ends With $999})<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}),$0 Starts With {`2esn`} Order By Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}) Ascending,{usn2} Contains 0e0 Contains 1.e1 Desc Where 9e0[.e12..][$`3esn`..] Foreach(usn1 In Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Starts With @usn6({`4esn`}[$`8esn`..'s_str'])| Remove Extract(@usn5 In {#usn8} Contains 7 Where 9e0[.e12..][$`3esn`..]|{`6esn`} Is Not Null Is Not Null).@usn5,[`` In {`7esn`} Starts With {0} Starts With {1000} Where {1000} Is Null].@usn5?)"),
    octest_legacy:ct_string("Unwind {``} Is Null Is Null As _usn3 Union All Detach Delete 0.e0 Is Null,(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}}) In Case When @usn5[01234567..$`8esn`][``..`5esn`] Then `5esn` Is Not Null Is Not Null When {usn1} Is Null Then 7[0e0..][$`1esn`..] Else False Starts With {``} Starts With 07 End In Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {7} In `1esn` In 123456789),{7}[..{@usn5}] Match ((:usn1)<-[`5esn`:`2esn`|_usn3{usn1:9e1[..`4esn`]}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})),Allshortestpaths((((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})))) Where `1esn` In `` In {`6esn`}"),
    octest_legacy:ct_string("Foreach(@usn6 In [12 Starts With $_usn4 Starts With $`6esn`][..Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null}))][..{@usn6:`2esn` Starts With `` Starts With .e12}]| Unwind Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) As @usn6 Delete 01234567 Starts With {`2esn`} Starts With {``}) Return {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] As `7esn` Order By $_usn4[1.0..@usn6] Asc,{usn2}[..12.0] Asc Return *,999 Is Null As #usn8,@usn5 Starts With $_usn4 Starts With 12.e12 As `5esn` Union All Load Csv From $`6esn`[$`1esn`..] As usn2 Fieldterminator 's_str' With Distinct $`4esn`[00..$`8esn`][Null..$@usn5] Skip {usn2}[{999}..][0Xa..] Limit 's_str' Contains 0xabc Where {0} Is Not Null Is Not Null Create `4esn`=((`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[`4esn`{usn1:1e1[..1e1]}]->(#usn8 :@usn5:`7esn`))"),
    octest_legacy:ct_string("Foreach(#usn8 In 9e1 In 0.0 In {999}| With  Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By $`3esn` In $#usn8 In {_usn3} Descending,Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Descending,[{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Descending Limit (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)]) Foreach(#usn7 In $`6esn` =~$_usn3 =~.e1| Match `6esn`=(((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))) Using Scan ``:`1esn` Using Index _usn3:_usn3(@usn5) Where True Ends With {`7esn`} Ends With @usn5 Create Unique #usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))),_usn4=(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[`6esn`?:`5esn` *01]->(`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Union All Start `7esn`=Node:_usn3({`2esn`}) Where $`7esn`[..True] Unwind `7esn`[..#usn7] As #usn7 Start `6esn`=Node:#usn7({_usn3}) "),
    octest_legacy:ct_string("Remove [$7 In 0.0].#usn8!,{`1esn`:'s_str' Contains {_usn4}}._usn4?,Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..]).`5esn`"),
    octest_legacy:ct_string("Delete usn1 Starts With _usn4 Starts With `` Merge usn1=Shortestpath((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})<-[usn2?:@usn5|:`1esn`]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``))) Load Csv From Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Count(*)[.e12..])[Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End] As `8esn` "),
    octest_legacy:ct_string("Merge (((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`))) On Create Set `8esn`+=usn1 Starts With Count(*) Starts With @usn6,`7esn`+=[usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] On Match Set [_usn4 In $`` =~$1000 =~7 Where {_usn4} Ends With .e1 Ends With 0x0|$#usn7 =~$`1esn`].`8esn` =Case 12.0 Contains {`3esn`} When 01234567[True] Then 0Xa Starts With .e12 When True Ends With Count(*) Ends With 1.0 Then {`8esn`} End Ends With {`7esn`:{``}[12e12..`6esn`]} Start @usn6=Node:@usn5({#usn7})  Unwind [{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]][Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])][Extract(#usn7 In `7esn` In $`1esn` In $999 Where 9e1[{`5esn`}]|$`1esn`[{1000}..{999}])] As `` Union Detach Delete {`8esn`},0X7 Ends With {0} Ends With $12,{usn2}[010..][$123456789..] Merge _usn3=(((#usn8 :`8esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}})<-[usn2? *..00{#usn7:{`2esn`} =~12e12 =~1.0}]-(usn2 :usn2:_usn4{@usn6})-[`3esn`?]->(:@usn6{@usn6:01234567[True]}))) On Create Set Case When 12e12[@usn5..][01..] Then {123456789}[01234567..Null] End._usn4! ={123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3],`4esn`+=usn1[@usn6][2.12] Union All Unwind ({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End] As @usn5 Create Unique _usn3=Shortestpath((((#usn7 :`5esn`)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})))),`2esn`=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})) Merge Shortestpath(((`` :_usn4:`4esn`)-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))) On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000]"),
    octest_legacy:ct_string("Remove Single(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).#usn7?,[`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{`6esn`} Is Not Null Is Not Null].`5esn`!,{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}.@usn6"),
    octest_legacy:ct_string("Foreach(`1esn` In 0e0[..$123456789]| Detach Delete 12e12 Starts With $`7esn`)"),
    octest_legacy:ct_string("Start _usn4=Relationship:_usn3(usn2={12})  Start #usn7=Rel:`3esn`(@usn5={12}) ,`7esn`=Rel:usn2({#usn8}) Merge usn2=Shortestpath((@usn6 :#usn7:`3esn`)<-[?:`4esn`]->(usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-(#usn7 :`2esn`:@usn5)) On Match Set `6esn`($`7esn` Ends With @usn5 Ends With .e1,{_usn4} Starts With 01234567 Starts With $#usn7).`8esn`? =$0 Starts With {`2esn`} On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Union All Create Unique Allshortestpaths(((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}))),@usn6=Shortestpath((({`3esn`:9e0 =~.e12})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})-[`` *01{`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}))) Create `7esn`=((`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})-[ *..1000]->(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(_usn4 :`5esn`)),`2esn`=(`7esn` :_usn4:`4esn`) Remove Reduce(`1esn`=Count(*) Starts With $7,`5esn` In usn2 Ends With 0.e0|9e12[`6esn`..{12}])._usn3?,Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where $`2esn`[..$#usn8]).`7esn`?,[`3esn`[{``}..$#usn8]].`7esn`"),
    octest_legacy:ct_string("Foreach(usn2 In 0X0123456789ABCDEF| Start `8esn`=Rel:`4esn`({``}) ,@usn5=Relationship:_usn4('s_str')) Foreach(`` In ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]})| Create Unique _usn4=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}),usn2=Allshortestpaths(((`` :`2esn`:@usn5)-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2})-[:`7esn`|:`2esn` *0xabc..]-(:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})))) Load Csv From 07 Ends With `1esn` Ends With {@usn5} As `1esn` "),
    octest_legacy:ct_string("Create Unique usn2=Allshortestpaths(((:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})<-[?*..$`4esn`]->(#usn8 :#usn7:`3esn`))),usn2=(:``)"),
    octest_legacy:ct_string("Remove (:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4}).usn2? Merge (((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) On Match Set Case 1.0 =~$_usn4 When @usn5 Is Null Is Null Then 01234567 Is Null Is Null End.@usn5? =[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),Reduce(`8esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`7esn` In Null =~$`8esn` =~{`4esn`}|12.0[12..9e1]).@usn5? =Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] On Create Set [{`6esn`}[..$12][..0.e0],{`1esn`} Contains {`5esn`} Contains 0e0,{#usn8}[True][{`7esn`}]].usn2? =$0[$123456789..][01234567..],`` ={#usn7} In {`6esn`} Union All Load Csv With Headers From $123456789 =~usn1 =~01 As `6esn` Fieldterminator 's_str' Foreach(`8esn` In Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999)| Return Distinct Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null),`6esn`[$`1esn`..Null],{#usn7} In {`6esn`} As usn2 Order By `7esn`[1.e1..#usn8] Asc,07 In `2esn` In {`3esn`} Desc)"),
    octest_legacy:ct_string("Create Allshortestpaths((:#usn8:_usn3)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})),Shortestpath((usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2)) Union All Merge Shortestpath(((:`6esn`{_usn4:07 =~usn2}))) On Match Set `1esn` =$`5esn` Contains `3esn` Contains {usn2},_usn4+={usn1} Is Null,None(`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]).#usn7! =Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] On Match Set `7esn`+=``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))] Return *,None(#usn8 In $`8esn`[{``}..] Where 0x0[$123456789..$usn1])[(:``{`5esn`:12e12[12.0][{usn2}],`1esn`:$`5esn` Is Null})-[#usn7?:`8esn`|:#usn8]->({#usn8:00})] Skip $`6esn` Ends With 1000 Ends With False Union All Foreach(@usn5 In All(`7esn` In Null =~$`8esn` =~{`4esn`}) Starts With [{7}[..123456789][..$#usn8],`3esn` =~usn2 =~7] Starts With Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0)| Remove Reduce(`4esn`=9e0[..usn2][..0],`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|{``}[$@usn5]).`5esn`!,`7esn`(Distinct {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]).#usn7? Load Csv With Headers From 12 Ends With {999} Ends With 's_str' As `5esn` Fieldterminator 's_str')"),
    octest_legacy:ct_string("Detach Delete 12.e12 Is Not Null Is Not Null Start `3esn`=Rel:_usn4(@usn5='s_str') ,`5esn`=Node:`7esn`(`3esn`=\"d_str\") Remove Reduce(_usn3=Null[$`1esn`..][7..],`` In {0} Is Not Null Is Not Null|9e12[`6esn`..{12}]).`2esn`?,`5esn`({`8esn`} =~usn1 =~12.e12).#usn7?"),
    octest_legacy:ct_string("Foreach(`5esn` In {usn1}[`6esn`..@usn5][$usn1..0.0]| Remove None(#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]).@usn6,[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]].`7esn`) Foreach(`5esn` In {`6esn`} Contains 01 Contains {#usn8}| Return {#usn8} In {#usn8} Return Distinct .e1 In {`6esn`} In \"d_str\" As `2esn` Skip 0.e0 Ends With Count(*) Ends With `8esn` Limit Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4)) Detach Delete Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Return 1000 Contains {999} Contains 9e12,{``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6),{usn1}[...e1][..{_usn4}] Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} Ascending,`3esn`[{``}..$#usn8] Descending,$1000 Contains $12 Descending Skip 0e0 Is Not Null Is Not Null Merge usn2=Shortestpath((@usn6 :#usn7:`3esn`)<-[?:`4esn`]->(usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-(#usn7 :`2esn`:@usn5)) On Match Set `6esn`($`7esn` Ends With @usn5 Ends With .e1,{_usn4} Starts With 01234567 Starts With $#usn7).`8esn`? =$0 Starts With {`2esn`} On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Merge `2esn`=Allshortestpaths(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) On Create Set _usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],`3esn`+=False Starts With #usn7 Starts With 12e12 Union Delete @usn5 Starts With $_usn4 Starts With 12.e12,[$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null With  Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Where `4esn`[\"d_str\"..][123.654..]"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[`2esn`:`` *..123456789]->(@usn5 :usn1)),Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`})))"),
    octest_legacy:ct_string("Create Unique Shortestpath(())"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As @usn6  Load Csv From All(@usn5 In {#usn8} Contains 7 Where 12e12 Starts With $`7esn`) Ends With Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Ends With Case {#usn8}[`7esn`..][_usn3..] When {`8esn`} In {`6esn`} In .e12 Then 1.e1[$_usn4..999] End As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete Reduce(_usn4='s_str' Contains 01 Contains $``,`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn5[Count(*)][07]) Contains Reduce(`5esn`='s_str'[`4esn`..],`` In 9e0 Is Not Null|Count(*)[`8esn`..$`7esn`]) Contains Filter(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)"),
    octest_legacy:ct_string("Load Csv With Headers From 9e12 In {`6esn`} In 0X7 As @usn6 Fieldterminator 's_str' Unwind True Is Null As @usn6"),
    octest_legacy:ct_string("Create ((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})),`4esn`=(`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[usn2? *..00{#usn7:{`2esn`} =~12e12 =~1.0}]-(usn2 :usn2:_usn4{@usn6})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(#usn7 :``)"),
    octest_legacy:ct_string("Start `1esn`=Node:`6esn`(_usn3={`1esn`}) ,`6esn`=Relationship:`3esn`(usn1='s_str')Where 1.0[..`3esn`][...e0] Remove [`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]].`4esn`! Create Unique `5esn`=Shortestpath((#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[ *0]->(:@usn5:`7esn`{_usn3:{7} Contains {#usn8} Contains {7}}))"),
    octest_legacy:ct_string("Remove (`4esn` :#usn8:_usn3{`2esn`:Null[#usn7][07]})<-[`6esn`:@usn6]->(`3esn` :_usn4:`4esn`)<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}}).#usn7?"),
    octest_legacy:ct_string("Foreach(`5esn` In 0Xa[_usn4..]| Create `5esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))))"),
    octest_legacy:ct_string("Merge `1esn`=(`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`) On Create Set `3esn`+=$`7esn` Starts With 01 Starts With $7 Merge Allshortestpaths((`7esn` :`6esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[usn2:@usn6]->(:`4esn`{`3esn`:True[$7..]})) On Match Set `3esn` =usn1 Contains 9e1 Contains 0X0123456789ABCDEF,_usn3 =Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12 Ends With _usn4|`7esn` In $`1esn` In $999) Is Not Null Is Not Null On Create Set `3esn`+=$`7esn` Starts With 01 Starts With $7 Union All Foreach(_usn3 In $`2esn`[[`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|12.0 Contains {`3esn`}]][`5esn`(``[..`2esn`][..@usn5],_usn3[..1000])]| Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc) Union All With Distinct Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] As usn2,$#usn8 Ends With #usn8 Ends With 12 Skip `7esn` Is Null Optional Match Shortestpath(((`8esn` :`6esn`))) Using Scan ``:`1esn` Using Index ``:`1esn`(_usn4) Where 7[0e0..][$`1esn`..] Create Unique `7esn`=((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]}))"),
    octest_legacy:ct_string("Foreach(`6esn` In ({_usn3:{7} Contains {#usn8} Contains {7}})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})[Case @usn5 Starts With 0xabc When .e0[$`8esn`..12e12][usn1..999] Then $usn1[{`5esn`}][0Xa] Else 12 In {#usn7} End]| Return Distinct {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] As `2esn` Order By #usn8[{#usn7}..12.e12][7..`8esn`] Asc,9e12 Starts With $_usn3 Asc,_usn4[01234567.._usn4][False..12] Ascending Skip Any(`5esn` In usn2 Ends With 0.e0 Where usn1[12e12..]) Is Null Is Null) Start `5esn`=Node:usn2(`6esn`=\"d_str\")  Return Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]),$7 Is Not Null Is Not Null Skip [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Union All Optional Match #usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})),_usn3=(usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Delete {0} =~Count(*) Match usn1=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),#usn8=((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})) Using Index @usn6:`2esn`(`5esn`) Where {#usn8} In $7"),
    octest_legacy:ct_string("Create Unique `5esn`=(((`3esn` :`7esn`:#usn8{#usn7:$7 Is Not Null Is Not Null,usn2:{``} Starts With 12.e12 Starts With .e12})<-[:`8esn`|:#usn8 *0]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[`` *..123456789$#usn8]-(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))) Unwind [`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null] Contains Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where Count(*)[.e12..]) Contains {`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1} As _usn3 Unwind Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] As `5esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From #usn8[$usn1..$`3esn`] As `7esn`  Match Shortestpath((((`7esn` {usn2:$usn1 =~{_usn3},`1esn`:0.e0 =~0.e0 =~12.e12})-[?:`8esn`|:#usn8]-(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})-[{`3esn`:#usn7[`4esn`..$`8esn`],`2esn`:$7[..{`8esn`}][..{999}]}]->(#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})))) Delete {`6esn`}[`6esn`..{`5esn`}],{#usn8}[True][{`7esn`}],Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Load Csv With Headers From 2.12 Ends With usn1 Ends With $`2esn` As #usn8 "),
    octest_legacy:ct_string("Create Unique _usn3=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`4esn`=Allshortestpaths(((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})))"),
    octest_legacy:ct_string("Foreach(#usn7 In Reduce(`4esn`={999} In Count(*) In `6esn`,_usn4 In $`` =~$1000 =~7|{999} In Count(*) In `6esn`) In Case `5esn` Is Null Is Null When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 When .e1 In {`6esn`} In \"d_str\" Then $0 Starts With {`2esn`} End In Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))| Start `3esn`=Node:@usn5(usn1='s_str') Where $12[..$`6esn`][..$`1esn`] Match _usn3=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`4esn`=Allshortestpaths(((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]}))) Using Index `2esn`:#usn8(`8esn`)) Union All Return Distinct * Order By `4esn` Contains $usn1 Contains @usn6 Asc,#usn8[1e1][$12] Ascending,Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1) Descending Limit {usn1:usn2[_usn3..{usn1}][@usn6..{`4esn`}],usn1:$7[..{`8esn`}][..{999}]}[..All(`` In {0} Is Not Null Is Not Null Where $#usn8[@usn5..9e0][2.12...e1])][..Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(_usn4 :_usn3:`5esn`{usn2:$999[0.12][0xabc]}))] Union All Remove Extract(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`|'s_str' Is Null Is Null).`7esn`"),
    octest_legacy:ct_string("Start `7esn`=Node:_usn3({`2esn`}) Where $`7esn`[..True] Unwind `7esn`[..#usn7] As #usn7 Start `6esn`=Node:#usn7({_usn3})  Union Start `6esn`=Rel( {`1esn`})  Remove `4esn`(Distinct 999[$_usn3..][$``..],Count(*)[.e12..]).`6esn`! Union All Delete .e0 Ends With $0 Ends With ``,usn2[`3esn`],0x0 Is Not Null Is Not Null Remove Reduce(``=0e0 =~{usn2},`4esn` In `4esn`[\"d_str\"..][123.654..]|1e1 In False).@usn6?,{`4esn`:\"d_str\" Contains `6esn` Contains $12,`1esn`:@usn5[`5esn`]}.`5esn`?,Extract(usn2 In 1000 Starts With $123456789 Where {``}[$@usn5]).`2esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 9e12[0Xa][0x0] As #usn8  Foreach(#usn8 In {_usn4} =~`7esn`| Remove @usn5:`2esn`:@usn5,Filter(`` In {0} Is Not Null Is Not Null Where 123456789 In usn2).@usn6) Merge `2esn`=((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) On Match Set `8esn` ='s_str' Is Not Null Is Not Null"),
    octest_legacy:ct_string("With Distinct 9e12 Starts With Count(*) Starts With {`4esn`},$`6esn` Ends With 1000 Ends With False As _usn4,#usn7 Ends With $@usn5 Ends With usn1 As `7esn` Limit Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{`7esn`} =~{7})[{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}..][Shortestpath((((:#usn8:_usn3)<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})<-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(`4esn` :`8esn`))))..] Where {usn2}[{999}..][0Xa..] Remove Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {@usn5}[`4esn`][12.0]|1.e1 Starts With {`3esn`} Starts With #usn8).#usn7! Unwind 010 Ends With {999} As @usn5"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {0} Starts With {usn1} As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return Distinct [_usn3 In 010 Contains $`2esn` Contains 01 Where {_usn4} Ends With .e1 Ends With 0x0|{#usn8} Ends With $999][Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`|123456789 Is Null)..] As `6esn`,{123456789} In 1.e1 Order By 9e12 Starts With Count(*) Starts With {`4esn`} Ascending,0X7 Ends With {0} Ends With $12 Ascending,(@usn6 )<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-(_usn3 {`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}) In (`8esn` :`2esn`:@usn5)-[`2esn`?:_usn4 *01]-(_usn4 :`5esn`) In None(#usn8 In $`8esn`[{``}..] Where $123456789 =~$`7esn`) Asc Skip [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}][Reduce(`8esn`={@usn5} In `6esn` In .e0,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|$@usn5 Ends With 00 Ends With 12.e12)] Limit {``} Is Null Is Null Match #usn8=((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})),_usn3=Shortestpath(({`8esn`:$@usn5[0.12..]})) Using Join On #usn7"),
    octest_legacy:ct_string("Optional Match (@usn5 :usn1)<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789}),(({`3esn`:0.12 In 123456789})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(`3esn` :_usn4:`4esn`)<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})) Using Scan `4esn`:`2esn` Using Scan `7esn`:`2esn` Where 010 Contains $`2esn` Contains 01 Union Load Csv With Headers From Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End As `5esn` "),
    octest_legacy:ct_string("Delete 0x0 Ends With False Ends With 1000 Load Csv From Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End Starts With Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As usn1  Optional Match `5esn`=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),Allshortestpaths((((`3esn` :usn1)<-[usn1 *010..]->(usn2 :@usn6)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->(_usn4 )))) Using Index usn2:`1esn`(_usn3) Where $#usn7 =~$123456789 =~12 Union Foreach(`8esn` In [{12}[..9e1]] Contains None(usn2 In 1000 Starts With $123456789 Where {123456789} Is Null Is Null) Contains Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)| Unwind 9e12[$#usn7..01234567] As @usn6 Create Unique (`7esn` :_usn4:`4esn`))"),
    octest_legacy:ct_string("Start _usn3=Node:`3esn`(usn1='s_str') "),
    octest_legacy:ct_string("Create Shortestpath(((:`6esn`{_usn4:07 =~usn2}))),Shortestpath(((#usn8 {`6esn`:$usn1 Is Null Is Null})))"),
    octest_legacy:ct_string("Unwind Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] As `6esn`"),
    octest_legacy:ct_string("Unwind Extract(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{@usn6} Starts With 9e1 Starts With usn1) Is Not Null Is Not Null As _usn3 Load Csv From 12.0[{999}..$`5esn`][0xabc..$_usn3] As @usn5  Unwind $7 Contains {1000} Contains 0X7 As @usn6 Union Load Csv With Headers From Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) Starts With {#usn7:12.0 Is Not Null Is Not Null} Starts With None(@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}) As _usn4 Fieldterminator \"d_str\" Unwind 0Xa Contains 0X7 Contains {``} As `5esn` Union Unwind Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null As `2esn` Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6})"),
    octest_legacy:ct_string("With Distinct *,07 =~usn2 As `` Remove [{usn2} Is Not Null Is Not Null,{0}[1.e1]].usn2,(:@usn5:`7esn`{`7esn`})<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}).#usn8,Allshortestpaths(((_usn4 :`6esn`)<-[:`7esn`|:`2esn` *0xabc..]-({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`}))).#usn7?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $#usn8[..#usn8][..{`5esn`}] As `5esn` Fieldterminator \"d_str\" Foreach(`3esn` In 0 Is Null Is Null| Delete 0e0 =~{usn2},#usn8[1e1][$12]) Unwind \"d_str\"[..$usn1][..$`5esn`] As `2esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 12.0[{999}..$`5esn`][0xabc..$_usn3] As @usn5  With Distinct *,01234567[``..] As `5esn` Skip 07 Starts With $#usn8 Starts With usn2 Limit {`4esn`:`2esn` Starts With $0 Starts With 12.0} Contains Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where {_usn4}[$#usn7..]) Contains {usn1:12e12[@usn5..][01..],#usn7:True[$7..]} Where $`5esn`[1e1..]"),
    octest_legacy:ct_string("Optional Match Shortestpath(((:`2esn`:@usn5)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(@usn6 :`2esn`:@usn5))) Using Scan _usn4:_usn3 Using Index usn2:`1esn`(_usn3) Create Unique `3esn`=((:@usn5:`7esn`{`7esn`})) Merge `6esn`=(({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})) On Create Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] On Match Set _usn4 =Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])]"),
    octest_legacy:ct_string("Start `6esn`=Rel:_usn4({usn2}) ,usn2=Relationship:`5esn`(\"d_str\")Where {123456789} Is Null Is Null Load Csv With Headers From 123.654 Is Not Null As `` Fieldterminator 's_str' Union All Load Csv With Headers From 010 As `1esn`  Delete (:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})<-[:`3esn`]->(@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1?:`3esn`]->(#usn7 :`2esn`:@usn5)[..Reduce(#usn8=0X7 Is Null,#usn7 In `7esn` In $`1esn` In $999|Count(*) Contains ``)][..{`1esn`:{_usn4}[$#usn7..],`2esn`:1.e1 Ends With {`8esn`} Ends With 00}],Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Starts With Single(#usn8 In $`8esn`[{``}..] Where 12[{usn2}]),$0[{7}..][123.654..] Match (usn2 )-[`1esn`?:@usn5|:`1esn` *010..]-({`5esn`:{@usn5}[...e1][..01]})-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]}),((:`4esn`$999)-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})) Using Scan `3esn`:#usn7 Using Scan _usn4:_usn3 Where {123456789} Starts With {`5esn`} Union All Foreach(`7esn` In 1.0[$`5esn`..{``}]| Start ``=Rel:`2esn`(`1esn`='s_str') ,`3esn`=Node:_usn4({12})Where 1.0 =~$_usn4 Load Csv With Headers From 's_str' Contains 01 Contains $`` As `8esn` Fieldterminator 's_str') Create Unique @usn6=((_usn4 :`6esn`)<-[:`7esn`|:`2esn` *0xabc..]-({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})) Delete 1000 Contains {999} Contains 9e12,0.0 Ends With {_usn4} Ends With $1000"),
    octest_legacy:ct_string("Detach Delete {`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],$123456789 Contains {`2esn`} Contains 's_str',$`5esn`[1e1..] Return Distinct *,Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) Order By 9e0 Desc,2.12 In $123456789 In 00 Descending,Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End] Ascending Limit `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Delete (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) In Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]),None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]),_usn4 Is Not Null"),
    octest_legacy:ct_string("Merge `8esn`=Shortestpath(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[?:``{`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]-(usn1 :@usn6{`7esn`:123.654[_usn3..Null][{@usn6}..0x0]})) Load Csv With Headers From {`1esn`} Is Not Null Is Not Null As @usn5  Merge `3esn`=(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})-[?:`3esn`*]-(`2esn` :#usn8:_usn3) On Match Set `2esn` ={`1esn`} Starts With usn2,`8esn` =Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]).`6esn`! ={``}[...e1] Union All Remove Shortestpath((`1esn` :`8esn`{``:{999} Ends With 1e1})<-[`7esn`:`7esn`|:`2esn` *12..00]-(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})).`8esn`? Union Load Csv From $`5esn` Starts With {_usn3} Starts With {`6esn`} As _usn4  Return $#usn8[@usn5..9e0][2.12...e1] Order By $`4esn`[$999..][{`3esn`}..] Descending,{#usn7}[..$_usn4][..$`4esn`] Ascending,_usn3 Ends With {`2esn`} Ascending Skip [$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null Limit `1esn` Starts With Null Starts With False"),
    octest_legacy:ct_string("Match @usn5=(:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}) Where .e12[..010][..{0}] Remove Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True])._usn3,Case When 0X7 In 0xabc Then 07 Starts With 123.654 Starts With 1.0 Else @usn6 End.`7esn`,None(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).#usn8! Match ((_usn3 :`1esn`)) Using Scan usn2:`8esn` Union Start `7esn`=Node:#usn8(\"d_str\") "),
    octest_legacy:ct_string("Create usn2=((@usn5 :usn1)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(`1esn` :#usn7:`3esn`)) Unwind {`1esn`} Starts With usn2 As `2esn` Create Unique ((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1})),_usn3=(`3esn` )-[_usn3{@usn5:{_usn4} Ends With {`3esn`} Ends With 07,`8esn`:12[0X7..]}]->(_usn4 )<-[:`2esn`|_usn3{#usn8:12.0[12..9e1]}]->(`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})"),
    octest_legacy:ct_string("Optional Match ((:`6esn`{usn2:010 Ends With `8esn` Ends With $_usn4})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)<-[`6esn`? *..0X7{usn1:.e1 In {`6esn`} In \"d_str\"}]-(_usn4 :`8esn`{`8esn`:`1esn` Is Null,#usn7:07[$_usn3..][$``..]})),`3esn`=(((`3esn` {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})<-[_usn3?:@usn5|:`1esn`]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF})-[`2esn`?:_usn4 *01]-(`2esn` :`5esn`{@usn5:123456789 Contains $@usn6 Contains Count(*)}))) Foreach(#usn7 In [12 Starts With $_usn4 Starts With $`6esn`][{`7esn`:123.654[..$`7esn`][...e0]}]| Load Csv With Headers From $#usn8[..#usn8][..{`5esn`}] As `5esn` Fieldterminator \"d_str\") Foreach(#usn7 In All(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where Null Contains \"d_str\" Contains {@usn6})[All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000])..][[`7esn` In Null =~$`8esn` =~{`4esn`} Where ``[``]|{``}[$@usn5]]..]| Remove Shortestpath(((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)))._usn4!,`2esn`:usn2:_usn4,`8esn`:@usn6) Union With  $1000 In 7 In `1esn` As #usn7,Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)[Shortestpath((((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))))] As `7esn`,'s_str' Contains 01 Contains $`` As `6esn` Skip $999 In $#usn7 In {`1esn`} Limit {`4esn`}[..0Xa]"),
    octest_legacy:ct_string("With Distinct $@usn5 Ends With `5esn` Ends With Null As @usn6,$`5esn` Starts With {_usn3} Starts With {`6esn`} Order By {`1esn`}[{`2esn`}..{_usn4}][{`8esn`}..$_usn3] Asc,9e12[`6esn`..{12}] Desc Skip {`5esn`}[{_usn3}..False] Load Csv With Headers From `8esn`[12.0..$`6esn`][0.0..$@usn5] As `7esn`  Unwind 07[..0Xa] As `3esn` Union All Detach Delete {`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],$123456789 Contains {`2esn`} Contains 's_str',$`5esn`[1e1..] Return Distinct *,Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) Order By 9e0 Desc,2.12 In $123456789 In 00 Descending,Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End] Ascending Limit `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Delete (@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}) In Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]),None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]),_usn4 Is Not Null Union All Foreach(#usn7 In {1000} Is Not Null Is Not Null| Load Csv With Headers From $123456789[#usn7..][0X7..] As _usn4 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)] As @usn6 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(#usn8 In {123456789}[01234567..Null]| Create ((`` :`5esn`{#usn8:$7 In 00})) Load Csv With Headers From #usn8[{#usn7}..12.e12][7..`8esn`] As `1esn` Fieldterminator \"d_str\") Union Start usn2=Rel:`6esn`(`7esn`='s_str') ,``=Rel:#usn8(\"d_str\") Unwind 0.e0 Ends With Count(*) Ends With `8esn` As `3esn` With Distinct [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As @usn6,(:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5) Contains {`8esn`:{#usn7} In `` In @usn6,`4esn`:`2esn` Is Not Null} Contains Reduce(usn1=$999[0.12][0xabc],usn2 In 1000 Starts With $123456789|$`8esn`[{usn1}..]) As `` Order By {0} Starts With {usn1} Asc,$`2esn`[..00][..{`7esn`}] Descending,.e0[@usn6..] Asc Skip {`1esn`}[0e0..][True..] Where {``}[$@usn5] Union All Create Shortestpath(((:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})<-[`1esn`:`3esn`]-(`1esn` :#usn8:_usn3{`2esn`:{`1esn`} In $999 In {#usn8},_usn4:07 In `2esn` In {`3esn`}}))),(`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`}) Remove {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]}.`3esn`,[$7 In 0.0].#usn8! Create Unique (`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[`8esn`?]->(usn1 :@usn6{`7esn`:123.654[_usn3..Null][{@usn6}..0x0]}),`3esn`=Shortestpath((((`7esn` :@usn6{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[ *..7]-(:`5esn`{`6esn`:$`6esn`,_usn4:12 Starts With $_usn4 Starts With $`6esn`})-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`}))))"),
    octest_legacy:ct_string("Return Distinct ['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']),07 =~{_usn3},@usn6(Distinct @usn5[01234567..$`8esn`][``..`5esn`],{@usn5}[...e1][..01]) Contains ({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]}) Contains None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1]) Skip [{#usn7} In `` In @usn6,{1000}[..$@usn6][..$`6esn`],0x0 Contains 0x0 Contains {`1esn`}] Is Null Is Null Optional Match usn1=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),@usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))) Using Scan usn2:`8esn` Using Scan `4esn`:@usn5 Return Single(`` In `1esn` In `2esn` In $@usn6 Where $7 In 0.0)[..[7[{_usn4}..{usn2}][9e0..0X7],@usn6[..0X0123456789ABCDEF][..{`6esn`}],$`5esn`[.e0..][0.0..]]][..Case When {123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3] Then {#usn7} In {`6esn`} End],`5esn`['s_str'..][{0}..],Extract(`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]|$`2esn` In $999 In 0.12)[Case `6esn` =~{usn2} When $`5esn`[$7] Then $#usn7 =~$123456789 =~12 When $@usn5[0.12..] Then 9e12[`6esn`..{12}] End..][Shortestpath(((usn1 :@usn5:`7esn`)))..] As `1esn` Union Foreach(`5esn` In {usn1}[`6esn`..@usn5][$usn1..0.0]| Remove None(#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]).@usn6,[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]].`7esn`) Foreach(`5esn` In {`6esn`} Contains 01 Contains {#usn8}| Return {#usn8} In {#usn8} Return Distinct .e1 In {`6esn`} In \"d_str\" As `2esn` Skip 0.e0 Ends With Count(*) Ends With `8esn` Limit Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4)) Detach Delete Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null) Union All Start `2esn`=Rel( {7}) ,`4esn`=Relationship:``({`5esn`})Where {`3esn`}[{`8esn`}..$7][0e0..0x0] Return `6esn`[$123456789..0xabc][``..$`4esn`] As @usn6 Order By 0Xa[..07][..`2esn`] Descending,Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) Desc,Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Is Null Is Null Descending Skip {#usn7} In `` In @usn6"),
    octest_legacy:ct_string("Unwind $@usn5 As `8esn` Foreach(_usn3 In usn1[12e12..]| Create _usn3=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]}))) Merge `6esn`=((:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})<-[`3esn`{`8esn`:`5esn` Is Null}]-({#usn8:00})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})) On Match Set Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 9e12 Is Null Is Null).usn2! =$_usn3 In $`5esn`,Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}])"),
    octest_legacy:ct_string("Start `5esn`=Relationship:`8esn`(`2esn`='s_str') Where 0X7 =~{_usn3} =~0x0 Merge `1esn`=Allshortestpaths(((`` :usn1))) On Match Set {``:`8esn` Contains 123.654 Contains {`7esn`},#usn8:{7}[..123456789][..$#usn8]}.`3esn` =usn1[12e12..],`3esn`+=`3esn` =~usn2 =~7,[.e0 Is Not Null Is Not Null,`2esn` Is Not Null].`6esn`? =010 Is Not Null Is Not Null On Create Set usn1+=12.e12[`6esn`][1.e1] Union All Remove None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]).`7esn`?,Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `6esn` =~{usn2}|{12}[..9e1])._usn3,Filter(`` In `1esn` In `2esn` In $@usn6 Where {`8esn`}[0xabc..][`4esn`..]).`1esn`? Merge @usn6=Allshortestpaths((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))) Union Return Distinct $`7esn` Contains 01 Contains @usn6 As `4esn`,{_usn3} Starts With $`4esn` Starts With {_usn4} As `6esn` Order By 1.0 Is Not Null Is Not Null Desc,Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Ends With [#usn7 In 0e0 Is Not Null Is Not Null Where {`3esn`}[{`8esn`}..$7][0e0..0x0]] Ends With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1) Desc Skip @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create (`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]}) Detach Delete {`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],$123456789 Contains {`2esn`} Contains 's_str',$`5esn`[1e1..] Remove `6esn`:`` Union Load Csv From {999} As @usn5 Fieldterminator \"d_str\" Start usn1=Node:@usn6(_usn3={``})  Remove [`` In `1esn` In `2esn` In $@usn6].#usn8 Union All Create Unique _usn4=Allshortestpaths(((:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]}))),(({`5esn`:{@usn5}[...e1][..01]}))"),
    octest_legacy:ct_string("Remove Reduce(@usn6=$`4esn` Starts With #usn8 Starts With 2.12,_usn4 In $`` =~$1000 =~7|$_usn3 Is Not Null).`7esn`?,{usn1:$123456789 =~$`7esn`,`1esn`:$`7esn` Ends With @usn5 Ends With .e1}.@usn5? Union All Foreach(`2esn` In .e12 Contains 00 Contains usn2| Remove Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}]).`6esn`?,[{_usn3}[{``}..]].`4esn`!,(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[ *0Xa..{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}]-(`1esn` :#usn7:`3esn`)<-[@usn6 *12..00]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}).`3esn`?) Create Unique `3esn`=Allshortestpaths(((:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})<-[`3esn`{`8esn`:`5esn` Is Null}]-({#usn8:00})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),`4esn`=Allshortestpaths(((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`5esn` :_usn4:`4esn`))) Return $7 In `2esn` As `4esn`,{@usn6} Ends With `5esn` Ends With 00,0X7 =~$`7esn` =~$_usn3 Order By [{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Asc,0X7 Ends With {0} Ends With $12 Descending Limit `7esn` Starts With `4esn` Union Start usn1=Node:`5esn`(`1esn`={@usn6}) Where $@usn6 Contains {@usn6} Detach Delete [$`3esn`[..{`4esn`}][..12.e12],9e1[{`5esn`}],0.0][[`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|00[``..usn2][01..$999]]][01],(`4esn` :``{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..None(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0})]"),
    octest_legacy:ct_string("Start `1esn`=Rel:`2esn`(`2esn`=\"d_str\") Where {`6esn`} =~{`4esn`} =~0x0 Start `4esn`=Node:@usn5({999}) Where 01234567[True] Return *,1.0 Contains #usn8 Contains $usn1 Order By Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc Skip 00[12.e12..0Xa][_usn4..@usn5] Union Unwind {`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7} Contains None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654) Contains Allshortestpaths((:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})) As `8esn`"),
    octest_legacy:ct_string("Create _usn4=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})),#usn7=((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`)) Unwind {`8esn`:@usn6[2.12..][`5esn`..]} Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]|{`2esn`} Starts With 1e1) As `1esn` Unwind [$`3esn`[..{`4esn`}][..12.e12],9e1[{`5esn`}],0.0][[`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|00[``..usn2][01..$999]]][01] As usn1"),
    octest_legacy:ct_string("Remove Extract(`` In 9e0 Is Not Null Where usn1[..$usn2][..0]).`2esn`! Union All With  [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)],(`1esn` )<-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(:#usn7:`3esn`{_usn4:{`3esn`}[`1esn`]})-[`7esn`?:`7esn`|:`2esn`{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}]->({`1esn`:`7esn` Contains 01234567 Contains `1esn`})[({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[{`8esn`:{_usn3} Starts With $`4esn` Starts With {_usn4},`3esn`:$_usn3[123456789][0X7]}]->(:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})..Allshortestpaths((({`2esn`:9e1[{`5esn`}]})))][[@usn5 Is Not Null,0Xa[..07][..`2esn`],7[0e0..][$`1esn`..]]..[#usn7 In `7esn` In $`1esn` In $999 Where .e12[..010][..{0}]|$`6esn` Ends With $`3esn` Ends With 07]] As @usn5 Order By 0X7 Ends With {0} Ends With $12 Descending Skip $`5esn` Ends With $7 Ends With `1esn` Where {#usn8}[`7esn`..][_usn3..]"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Using Scan ``:`1esn` Using Scan `8esn`:usn2 Load Csv With Headers From 0e0[..$123456789] As #usn8  Load Csv From .e12[$`2esn`..][{`3esn`}..] As `2esn` "),
    octest_legacy:ct_string("Start usn2=Rel:`6esn`(`7esn`='s_str') Where `5esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(@usn6 In Filter(`` In {0} Is Not Null Is Not Null Where 123456789 In usn2)[Shortestpath(((:`4esn`$999)-[`6esn` *..00{#usn8:$`` =~$1000 =~7,#usn8:{`5esn`} In {#usn7} In $7}]->(#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})))..]| Unwind 0xabc[$#usn7][0Xa] As #usn7) Remove @usn6:@usn5:`7esn`"),
    octest_legacy:ct_string("Merge ((usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})) On Create Set `8esn`+=`1esn` Is Not Null,``:`4esn` On Create Set usn1+=$`3esn` =~$`5esn`,Reduce(#usn7={@usn6}[#usn8..][999..],#usn7 In 0e0 Is Not Null Is Not Null|$`5esn`[`4esn`][{`3esn`}]).`8esn` =01[.._usn4][..$_usn4],@usn5+=#usn7 In 2.12 In $_usn3 Remove [$123456789 Is Not Null Is Not Null,{usn1}[0..{@usn6}][True..usn2],{@usn5} Is Not Null Is Not Null].`3esn`,None(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0 In Null In 00).`6esn`! Optional Match `5esn`=Shortestpath(((`1esn` {#usn8:9e12 Starts With $_usn3})<-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-({usn2:{`8esn`} Is Not Null}))) Using Scan `5esn`:`` Where $`7esn` Ends With @usn5 Ends With .e1"),
    octest_legacy:ct_string("Return Distinct 0xabc In $`5esn` In @usn5 As @usn5 Order By 01[$_usn4..][0..] Asc,$`7esn` Contains `1esn` Contains {usn1} Desc,`7esn`[`7esn`..`5esn`] Asc Skip {999} In `3esn` Limit 0.0 =~$usn1 =~$_usn3 Create Allshortestpaths(((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}}))),`7esn`=(`6esn` )<-[:`6esn`{`6esn`:12e12 Starts With $`7esn`,`6esn`:{`7esn`} =~{7}}]-(`` :_usn3:`5esn`) Remove (`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`)._usn4?,Any(`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7).`5esn`?,[#usn7 In `7esn` In $`1esn` In $999 Where $_usn3 Is Not Null].`7esn`?"),
    octest_legacy:ct_string("Unwind {@usn5}[...e1][..01] As _usn3 Remove `3esn`($`5esn` Contains 123456789 Contains $`1esn`).`7esn`? Union All Create `6esn`=((:`7esn`:#usn8{`1esn`:{`7esn`} Starts With {0} Starts With {1000},`2esn`:#usn8[1e1][$12]})<-[?*..$`4esn`]->(`4esn` {@usn6:0X0123456789ABCDEF[..0.12],`6esn`:{`8esn`}[`3esn`..999]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2)),Shortestpath(((`8esn` :`6esn`))) Detach Delete $@usn5 Contains 12e12 Contains {`6esn`},{0} Is Not Null Is Not Null,exists(Distinct {12}[..9e1],{``}[...e1]) Is Not Null Is Not Null Merge #usn8=(`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`}) On Create Set `8esn`+=`1esn` Is Not Null,``:`4esn` On Match Set `2esn` ={`1esn`} Starts With usn2,`8esn` =Shortestpath((((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`2esn`?:`2esn`|_usn3 *999]->(:`2esn`:@usn5)-[?:_usn4 *..7{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]->(:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})))) =~Any(#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}) =~(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]).`6esn`! ={``}[...e1] Union All With Distinct $`7esn` Contains 01 Contains @usn6 As `4esn`,{_usn3} Starts With $`4esn` Starts With {_usn4} As `6esn` Order By 1.0 Is Not Null Is Not Null Desc,Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Ends With [#usn7 In 0e0 Is Not Null Is Not Null Where {`3esn`}[{`8esn`}..$7][0e0..0x0]] Ends With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7}|$`3esn` Ends With {_usn3} Ends With 9e1) Desc Skip @usn5(Distinct `4esn` Starts With 01234567,$999 Is Not Null Is Not Null) Is Not Null Is Not Null Merge (`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]}) On Create Set Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2! =Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})) Ends With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {12} Ends With $`6esn` Ends With {#usn7}|1e1 Contains $`` Contains 12.0] Ends With @usn6({usn2}[07],0[9e12..{usn1}]),#usn7+='s_str' Is Null Is Null,`6esn`+=$_usn3[123456789][0X7] Load Csv With Headers From Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End As `5esn` "),
    octest_legacy:ct_string("Create Unique Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),`5esn`=((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}})) Foreach(`8esn` In {1000}[True]| Unwind {``}[12e12..`6esn`] As `3esn` Remove [123.654[Null..12.e12],`6esn` In _usn4 In {_usn4},$`8esn`[{``}..]].@usn6?) Union Load Csv With Headers From ``[..`2esn`][..@usn5] As `6esn` Fieldterminator 's_str' Load Csv With Headers From 01 Is Null Is Null As #usn8 Fieldterminator \"d_str\" Load Csv With Headers From True[..{_usn4}][..0.0] As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind 0X7 As `8esn` Union With  *,[0Xa,0e0 In `7esn` In $`8esn`,123456789 Is Null] In (`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) As `7esn`,{`6esn`}[..01234567][..$_usn4] Return Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,7[{_usn4}..{usn2}][9e0..0X7] As _usn4 Order By $`4esn`[$999..][{`3esn`}..] Descending,$`6esn` Contains 12 Descending,12e12 Starts With usn2 Desc Skip {``}[$@usn5] Limit $`4esn`[00..$`8esn`][Null..$@usn5]"),
    octest_legacy:ct_string("Foreach(`5esn` In `7esn` In $`1esn` In $999| Detach Delete False Starts With #usn7 Starts With 12e12,'s_str'[`4esn`..],Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null) Union Create Unique `1esn`=(((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),`1esn`=((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)) With  *,01234567[``..] As `5esn` Skip 07 Starts With $#usn8 Starts With usn2 Limit {`4esn`:`2esn` Starts With $0 Starts With 12.0} Contains Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where {_usn4}[$#usn7..]) Contains {usn1:12e12[@usn5..][01..],#usn7:True[$7..]} Where {999} In Count(*) In `6esn` Start ``=Rel:`5esn`({`7esn`}) "),
    octest_legacy:ct_string("Remove Filter(`5esn` In usn2 Ends With 0.e0 Where $@usn5[0.12..]).#usn7?,Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})).`4esn` Start `8esn`=Node:`1esn`(@usn5='s_str') Where {1000} Is Null Match Allshortestpaths(((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}}))),Shortestpath(((`4esn` :`5esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({usn2:9e12 In $_usn3}))) Using Join On @usn6,`2esn` Where {`6esn`}[07..][{@usn5}..]"),
    octest_legacy:ct_string("Create #usn8=({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]}) With  [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)] Order By False In 0.0 In 0X7 Descending,{@usn5} Is Null Ascending Skip Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Where {7} =~$usn1 =~{_usn4} Create @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) Union Start `1esn`=Rel:`3esn`(@usn5={12}) ,`5esn`=Node:`2esn`(@usn5={1000})Where 010 Ends With `8esn` Ends With $_usn4 Create Unique `5esn`=Allshortestpaths(((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]}))),#usn8=Shortestpath((({``:9e1[$`5esn`..0xabc],`2esn`:#usn7[$@usn6][$`8esn`]})-[{``:{usn1} Contains 0xabc,_usn4:1e1 In $`5esn` In {7}}]-({``:9e12 In 0Xa In $#usn7,`3esn`:#usn7[`4esn`..$`8esn`]})))"),
    octest_legacy:ct_string("Load Csv From @usn5 Starts With $_usn4 Starts With 12.e12 As _usn4  Start `4esn`=Node:`3esn`(_usn3='s_str') ,@usn5=Node:`6esn`(`7esn`='s_str')Where 12e12[@usn5..][01..] Union Remove Case When $`3esn`[..True][..12.e12] Then $_usn3[123456789][0X7] End.usn1!,Extract(`5esn` In 9e1 In 0.0 In {999} Where {7} Contains {#usn8} Contains {7}|{usn2} Is Not Null Is Not Null).`8esn`! Delete `5esn` In 1.0 In $@usn6 Union All Unwind Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) As `` Start @usn5=Relationship:`4esn`({`6esn`}) ,`3esn`=Node:_usn3(usn2={12})"),
    octest_legacy:ct_string("With  01234567 Is Not Null As usn2,12 =~@usn5 =~{#usn8} As usn2 Limit True Is Null Is Null Unwind $0[{#usn8}][\"d_str\"] As `` Remove Single(_usn4 In $`` =~$1000 =~7 Where 01[$_usn4..][0..]).#usn7,Allshortestpaths((`8esn` {usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})).`4esn`?,{`3esn`:2.12 =~.e12 =~#usn8}.`3esn`! Union All With  Reduce(`8esn`=`6esn` =~{usn2},usn2 In 1000 Starts With $123456789|`4esn`[$`4esn`])[{`6esn`:#usn7[0.12..12.e12]}] As `8esn`,Single(`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]) Is Null Is Null,{usn1} Contains {@usn6} Contains $0 As #usn7 Create #usn7=(((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[?:`7esn`|:`2esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}}]->({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3)))"),
    octest_legacy:ct_string("With  *,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}],'s_str' Is Not Null Is Not Null Skip Single(`` In 9e0 Is Not Null Where $123456789 =~00 =~0X0123456789ABCDEF)[{@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}..][Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))..] Limit {0} Ends With $@usn5 Ends With 010 Union Start _usn3=Rel( {`1esn`})  Merge `8esn`=Shortestpath(({@usn5:$#usn7 =~$`1esn`})) On Create Set #usn8+=Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1),`2esn`+={`2esn`} Starts With 00,`3esn` =12.e12 In {@usn6} On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Union Load Csv From Single(`` In {0} Is Not Null Is Not Null Where 1.0 Is Not Null Is Not Null) Starts With {#usn7:{`2esn`} =~12e12 =~1.0} Starts With _usn4(@usn5[01234567..$`8esn`][``..`5esn`],usn1 Is Null) As @usn5 "),
    octest_legacy:ct_string("Delete All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) In Case When 0e0 =~{usn2} Then _usn4 Contains {123456789} Contains $`5esn` End In [{999}[{`7esn`}],$`5esn` Contains 123456789 Contains $`1esn`,$0 Starts With True Starts With $_usn4],.e12[..010][..{0}]"),
    octest_legacy:ct_string("With  1.0[$`5esn`..{``}] As _usn4 Skip {`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0,_usn3:$@usn5[$`6esn`]}[..All(`5esn` In 9e1 In 0.0 In {999} Where {7} Contains {#usn8} Contains {7})][..(_usn4 :`4esn`{_usn4:1000 =~{`1esn`}})<-[`7esn`?:#usn8|`1esn` *..7]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})] Limit {`1esn`} In $999 In {#usn8} Union Detach Delete [`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]],0X7 Ends With {0} Ends With $12 Create _usn4=Shortestpath(({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),Allshortestpaths(((`` :`5esn`{#usn8:$7 In 00}))) With Distinct *,$12[$`3esn`][9e12] As #usn8 Order By Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Asc Skip $999 Contains 0e0 Limit $#usn8[{7}..{`6esn`}] Where $0 Starts With {`2esn`}"),
    octest_legacy:ct_string("Create #usn7=($#usn8)<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})<-[:@usn5|:`1esn`]->(usn2 :#usn7:`3esn`),(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Union Return Distinct 9e12[`6esn`..{12}] As _usn4 Order By @usn5 Contains 7 Contains 999 Descending Skip [0xabc[{@usn5}..][Count(*)..]] In {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}} Start `8esn`=Node:#usn8(\"d_str\")  Union All Foreach(`1esn` In Any(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Is Null Is Null) Starts With #usn7(@usn6[2.12..][`5esn`..],$`5esn`[`4esn`][{`3esn`}]) Starts With Reduce(`5esn`=0X7 Is Null,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{`1esn`} In 0.e0 In $1000)| Load Csv With Headers From False Starts With 's_str' Starts With $`6esn` As `4esn` ) Foreach(`4esn` In `7esn`(Distinct $999[0.12][0xabc]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) In [{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa]| Return Distinct {0}[1.e1],{``:$1000[$`7esn`..1e1],``:#usn8[Null]} =~Allshortestpaths(({_usn3:{#usn8}[`7esn`..][_usn3..],`2esn`:123.654[..$`7esn`][...e0]})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})<-[usn1?:`8esn`|:#usn8 *0X0123456789ABCDEF..]->({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) As #usn8 Order By $@usn6 =~{usn1} =~$@usn5 Ascending,01 Is Not Null Is Not Null Asc Skip $`5esn`[`4esn`][{`3esn`}] Limit 0x0 Contains 0x0 Contains {`1esn`} Unwind $``[..999][..{`1esn`}] As `2esn`)"),
    octest_legacy:ct_string("Create Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))),usn1=((`4esn` :`5esn`)) Create `2esn`=Shortestpath((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(:usn1{usn2:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})),`7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}) Union All With Distinct *,(:@usn6{`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})[Case {#usn8} Ends With `7esn` When Null[#usn7][07] Then {``} Starts With 12.e12 Starts With .e12 Else $_usn4 =~$12 =~`3esn` End][None(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Is Null Is Null)] Skip [0Xa,0e0 In `7esn` In $`8esn`,123456789 Is Null] In (`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) Where _usn3 Starts With 0X7 Create @usn5=(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]}),`6esn`=Allshortestpaths(({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[usn1 *010..]->(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Foreach(`7esn` In All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``) Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12) Starts With Case $_usn3[123456789][0X7] When `4esn` Ends With $#usn8 Ends With {12} Then usn2 Ends With 0.e0 Else $`6esn` Ends With $`3esn` Ends With 07 End| Load Csv From 01[$#usn8..][7..] As `1esn`  Start #usn7=Node( {`3esn`}) ,`5esn`=Rel:_usn3(`2esn`={0}))"),
    octest_legacy:ct_string("Merge `1esn`=(`7esn` :`7esn`:#usn8{`1esn`:{_usn3}[{``}..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`) On Create Set `6esn`+=0.12[$123456789..],usn1(12 Ends With {0} Ends With _usn4,Count(*)[.e12..]).#usn7? =Extract(usn2 In 1000 Starts With $123456789 Where usn1[12e12..]|12.e12)[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`}|{usn2} Ends With $`7esn` Ends With {`1esn`})..][Case $123456789 Is Not Null Is Not Null When False Starts With #usn7 Starts With 12e12 Then {#usn8} Contains 7 When {`8esn`} Is Not Null Then 9e1[{usn2}..$1000] End..],usn1 =``(Distinct 9e0[{@usn5}..]) =~Filter(#usn7 In `7esn` In $`1esn` In $999 Where 's_str' Contains 0xabc) Return Distinct *,{`7esn`} Ends With 999 As _usn3 Skip [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Return True[..{_usn4}][..0.0] As `5esn`,[{#usn7}[..12e12][..{1000}],123456789[{`7esn`}..][{@usn6}..],{`3esn`} Contains 12.0 Contains {`8esn`}][(`1esn` {`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[``?:#usn7|:``{``:0X0123456789ABCDEF[{`5esn`}..]}]->(@usn5 :`1esn`{`2esn`:Count(*) Contains ``})<-[? *010..{`5esn`:0Xa[_usn4..],``:$@usn6 Is Null Is Null}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})..],[{`2esn`} =~Count(*) =~{#usn8},{#usn8}[0X7][0X0123456789ABCDEF]][Reduce(@usn5=@usn5[Count(*)][07],`5esn` In 9e1 In 0.0 In {999}|$`8esn` Is Not Null Is Not Null)] Order By [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Asc,`3esn` Ends With usn1 Ascending,Reduce(usn2=00[``..usn2][01..$999],_usn4 In $`` =~$1000 =~7|$12 In $`3esn` In 07) Starts With (:`8esn`{`6esn`:01[$_usn4..][0..]})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})-[`3esn`?]->(`8esn` ) Desc Union Optional Match Shortestpath((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))),`7esn`=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Using Index `1esn`:@usn5(usn1)"),
    octest_legacy:ct_string("Merge `6esn`=((`3esn` {#usn7:{#usn7}[..12e12][..{1000}]})-[? *..123456789{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]->(`3esn` :_usn3:`5esn`$999)) On Create Set `5esn`+=$usn1[{`5esn`}][0Xa] Start ``=Node:usn2({`5esn`}) Where Null[$`1esn`..][7..] With Distinct *,$@usn5 Starts With usn2 Starts With $`6esn` As @usn5,0.e0 Is Not Null Is Not Null Order By [07 In `2esn` In {`3esn`}][..Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`))][..Allshortestpaths(((_usn3 :`1esn`)))] Desc,0.e0[False] Descending Where {1000} Is Null Is Null Union All Start _usn4=Rel:@usn6(`5esn`={1000}) ,``=Node:`1esn`(`3esn`={12})Where $`3esn` In $#usn8 In {_usn3} Create @usn6=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]-({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}}))),`7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}))) Union All Unwind `6esn` As usn1"),
    octest_legacy:ct_string("Foreach(`6esn` In 123.654[_usn3..Null][{@usn6}..0x0]| Remove Reduce(`1esn`={`8esn`} Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|12e12['s_str'..`8esn`][usn2..$_usn4]).`2esn`?,Filter(#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]).usn2!,Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0e0 In `7esn` In $`8esn`).#usn8) Create Unique `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) Union Create Unique usn2=(`1esn` :`6esn`{#usn7})-[:`3esn`]->({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}),(((`3esn` )-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0})-[`4esn`?:`4esn`]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]}))) Create Unique @usn6=((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]->(:`5esn`{``:$`6esn` Is Not Null})-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`}))"),
    octest_legacy:ct_string("Unwind _usn3 Contains $@usn5 Contains 01 As `` Union Delete `` Ends With $usn1 Ends With $`2esn` With  [010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End,usn2[9e12..$`3esn`] As _usn3,`5esn`['s_str'..][{0}..] Skip Reduce(_usn4={`7esn`} =~{7},`` In {`7esn`} Starts With {0} Starts With {1000}|_usn4 Is Not Null) Contains Case {#usn8} Ends With $999 When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 Else 999[0.0..][$_usn4..] End Contains Case $0[{7}..][123.654..] When $#usn7 In `4esn` In 1.0 Then 's_str' Is Null Is Null When $`5esn` In $_usn4 In $`2esn` Then 2.12 =~1.0 =~{`4esn`} End Limit 12e12 =~{usn1} =~1.e1 Where {0}[{`4esn`}..] With  (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As #usn8,`6esn` =~{usn2} As ``,Reduce(`7esn`=usn1[..$usn2][..0],`4esn` In 0.12[.e12..0][1.0..{_usn4}]|@usn6[..0X0123456789ABCDEF][..{`6esn`}])[{`5esn`:0Xa[..07][..`2esn`]}..Any(`` In 9e0 Is Not Null Where {_usn4} =~`7esn`)][None(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1])..{``:01234567 Is Not Null}] Order By $1000[01][$123456789] Ascending"),
    octest_legacy:ct_string("Merge `7esn`=((({usn1:1e1[..1e1]})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null})<-[?:#usn7|:`` *010..]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}))) On Match Set _usn3+=Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] On Match Set (:`3esn`:usn2{_usn4:_usn4 Starts With $`3esn` Starts With {#usn8}})<-[?:`7esn`|:`2esn`{usn2:`7esn` In $`1esn` In $999,`8esn`:{`2esn`} =~Count(*) =~{#usn8}}]->({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]->(#usn8 :`5esn`{`3esn`:{0} Ends With $@usn5 Ends With 010}).`3esn`! =0[9e0][1.0],`2esn`+=7 =~$`6esn`,`1esn`+=Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null) Union Load Csv From Filter(@usn5 In {#usn8} Contains 7) Ends With Reduce(`1esn`=$`` Contains 123.654 Contains $#usn7,`` In {`7esn`} Starts With {0} Starts With {1000}|{`6esn`}[07..][{@usn5}..]) Ends With [12 Ends With {0} Ends With _usn4] As #usn7  Union Create Shortestpath(())"),
    octest_legacy:ct_string("Load Csv From 9e0[.e12..][$`3esn`..] As _usn4 Fieldterminator \"d_str\" Detach Delete @usn6 Union Create Unique `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Shortestpath(((`` {`1esn`:$@usn6 Is Not Null})-[@usn5? *07..07{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[#usn7:usn2 *01234567..]->(:`1esn`)))"),
    octest_legacy:ct_string("Remove Case When 999[0.0..$`6esn`] Then 0xabc[{@usn5}..][Count(*)..] End._usn4 Union Create ((:usn1)<-[`5esn`:`2esn`|_usn3{usn1:9e1[..`4esn`]}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})),Allshortestpaths((((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})))) Unwind [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}][Reduce(`8esn`={@usn5} In `6esn` In .e0,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|$@usn5 Ends With 00 Ends With 12.e12)] As `6esn` Union All Return Distinct $@usn5,1.e1 Ends With {`8esn`} Ends With 00 As _usn4 Skip {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)]"),
    octest_legacy:ct_string("Load Csv From [_usn3 In 010 Contains $`2esn` Contains 01 Where {`5esn`} In {#usn7} In $7|{``} Starts With \"d_str\"] Contains Reduce(_usn3=010 Contains $`2esn` Contains 01,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|{#usn8}[$`6esn`..12e12]) Contains Case When True Ends With Count(*) Ends With 1.0 Then {`8esn`} Else 0X0123456789ABCDEF[...e12][..0.12] End As #usn8  Unwind 0x0 =~$usn2 As `8esn` Delete 0xabc[False..#usn7][$`1esn`..'s_str'] Union All Create @usn6=(({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})),usn1=((`2esn` {usn1:@usn5 Contains 7 Contains 999})) Create Unique Allshortestpaths(({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[`2esn`:`` *..123456789]->(@usn5 :usn1)),Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))) Create Unique usn1=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Union Load Csv With Headers From Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End As `5esn` "),
    octest_legacy:ct_string("Create `5esn`=({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})<-[usn1 *010..]->(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]}),`5esn`=(`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1)<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`3esn` {usn2:$@usn5[0.12..]}) Start usn2=Relationship( {`2esn`}) ,`7esn`=Relationship:`6esn`({@usn6}) Create Unique `6esn`=(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}),Allshortestpaths(((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))) Union All Create Unique usn1=Allshortestpaths(((:`4esn`{`8esn`:{#usn8} Ends With $999}))),`4esn`=Allshortestpaths(((:`4esn`{`3esn`:True[$7..]})<-[`7esn`?:`7esn`|:`2esn`]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))) Return Null =~$`8esn` =~{`4esn`} As #usn8 Order By .e0[@usn6..] Asc,.e1[@usn5][0X0123456789ABCDEF] Desc Limit {usn2} Is Not Null Is Not Null Union Delete {_usn4} =~`7esn`,'s_str'[12..$`5esn`] Return *,[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6},$`7esn` Contains 01 Contains @usn6 As `4esn` Skip Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null Create @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))),@usn5=Shortestpath(((`` :`2esn`:@usn5)-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]})-[`1esn`?:`7esn`|:`2esn`]->(`7esn` :`6esn`)))"),
    octest_legacy:ct_string("Unwind (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) Contains Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where usn2[_usn3..{usn1}][@usn6..{`4esn`}]) As `3esn` Foreach(`7esn` In 0 In Null In 00| Create Unique Allshortestpaths((({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})))) Union All Remove Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where $#usn8 Ends With #usn8 Ends With 12).`7esn`!,_usn3(Distinct 07 In `2esn` In {`3esn`}).usn1! Load Csv From 0e0 =~{usn2} As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind `4esn` Ends With $#usn8 Ends With {12} As `5esn` Start `5esn`=Relationship:usn2(`6esn`=\"d_str\") Where $`4esn` Contains {7} Contains 999 Detach Delete False Starts With #usn7 Starts With 12e12,'s_str'[`4esn`..],Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}]) Is Not Null Union Optional Match ((`2esn` {`5esn`:.e0[$`8esn`..12e12][usn1..999],#usn7:{`7esn`} Starts With {0} Starts With {1000}})),usn2=Allshortestpaths(((:@usn5:`7esn`{usn2:9e12 In $_usn3})-[`3esn`?{_usn4:{usn2} Ends With $`7esn` Ends With {`1esn`},@usn5:$7 Contains {1000} Contains 0X7}]->(:_usn3:`5esn`{`1esn`:0xabc[{`7esn`}..][{`8esn`}..],`1esn`:0x0[$123456789..$usn1]})<-[{usn2:$`` =~_usn4 =~_usn4,#usn8:{1000}[{@usn5}..][1.e1..]}]-(:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]}))) Using Join On `1esn`,`3esn`,`8esn` Remove Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))).`3esn`?,Case When .e12[..010][..{0}] Then ``[..`2esn`][..@usn5] When 9e12 In 0Xa In $#usn7 Then 0x0 Starts With usn1 Starts With 01 End.#usn8! Union All Start `7esn`=Rel:``(`6esn`={7}) ,``=Rel:usn2({#usn8})Where 07[$_usn3..][$``..]"),
    octest_legacy:ct_string("Foreach(`2esn` In `1esn`[$`4esn`..]| Optional Match #usn8=(:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}}),`5esn`=Shortestpath((:`6esn`{_usn4:07 =~usn2})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)) Using Index `1esn`:@usn5(usn1) Return {_usn3}[07..] As `7esn` Order By Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0)[Case `1esn` In `` In {`6esn`} When {1000} Is Null Then 01234567 Is Null Is Null End] Desc,[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Desc,None(#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0])[Case 0.e0 =~0.e0 =~12.e12 When 010 Contains $`2esn` Contains 01 Then {7}[..{@usn5}] When {`1esn`} Is Null Then 010 Is Not Null Is Not Null End..] Descending) Foreach(`8esn` In {#usn8} In $7| With  *,9e12 =~01 =~$_usn3 As usn2,0.12[..$`4esn`][..$`7esn`] As `5esn` Skip True Ends With Count(*) Ends With 1.0)"),
    octest_legacy:ct_string("Merge ``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) On Match Set usn2+=Reduce(#usn8=$7 Starts With $12 Starts With 12e12,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|01234567[`1esn`])[[$`7esn` Ends With @usn5 Ends With .e1,$`` =~_usn4 =~_usn4,010 Contains $`2esn` Contains 01]],_usn4+=.e0 Ends With $0 Ends With ``,[`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|{`6esn`} Is Not Null Is Not Null].`` =0xabc[False..#usn7][$`1esn`..'s_str'] On Create Set #usn7:`1esn`,#usn8 =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null,`2esn` =Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Foreach(usn1 In Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Starts With @usn6({`4esn`}[$`8esn`..'s_str'])| Remove Extract(@usn5 In {#usn8} Contains 7 Where 9e0[.e12..][$`3esn`..]|{`6esn`} Is Not Null Is Not Null).@usn5,[`` In {`7esn`} Starts With {0} Starts With {1000} Where {1000} Is Null].@usn5?) Foreach(`7esn` In {#usn8} Contains 7| Match `8esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5})) Using Index @usn5:#usn8(``) Using Index `7esn`:`2esn`(#usn8) Where 12 Ends With 0X7 Ends With 12.0 Return 1e1[{7}..{`5esn`}] As `2esn`,Filter(#usn7 In 0e0 Is Not Null Is Not Null) Contains [`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`] Contains Reduce(`3esn`={``}[12e12..`6esn`],`5esn` In 9e1 In 0.0 In {999}|0X0123456789ABCDEF[...e12][..0.12]),2.12 =~{``} =~0X7 Order By $`6esn`[..``][..{@usn5}] Ascending)"),
    octest_legacy:ct_string("Return Distinct {_usn3} Ends With $usn2 As #usn7,@usn5 Starts With $_usn4 Starts With 12.e12 As `5esn`,usn1 In True In 12.e12 Skip 9e0[..1000]"),
    octest_legacy:ct_string("Unwind 0x0[0.0..] As _usn4 Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}) Remove [#usn7 In `7esn` In $`1esn` In $999 Where 010 Ends With {999}].`8esn`?,[$7 In 0.0].`4esn` Union All With Distinct $usn2 Contains $usn1 Order By {@usn6}[..$7][..{`6esn`}] Desc,Reduce(`7esn`=9e12 In 0Xa In $#usn7,`` In {0} Is Not Null Is Not Null|$1000[$`7esn`..1e1]) =~Single(#usn8 In $`8esn`[{``}..] Where {_usn4} Ends With {`3esn`} Ends With 07) =~Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..]) Ascending Where 9e1 Is Null Is Null Remove Reduce(`7esn`={999} Is Null Is Null,`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|False Starts With {``} Starts With 07).`1esn`?,(`1esn` :`3esn`:usn2)<-[#usn7{``:9e1[..`4esn`]}]-(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}).@usn6?,None(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]).`8esn`! Create ((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))"),
    octest_legacy:ct_string("Remove Allshortestpaths(((`` :@usn5:`7esn`)<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`))).@usn6 Union All Create Allshortestpaths(((#usn7 :`8esn`)<-[`5esn`? *12..00]->(usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]}))) Union All Unwind Allshortestpaths((usn1 :usn1{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))[Case When 1.e1[$_usn4..999] Then 01234567[`1esn`] When 0Xa Then {`2esn`} =~{@usn6} End..Filter(`` In 9e0 Is Not Null Where `1esn`[$`4esn`..])] As #usn8 Create Unique #usn7=Shortestpath((({`8esn`:{7} In `1esn` In 123456789})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`7esn` :`6esn`{`3esn`:\"d_str\" Is Null Is Null})<-[`3esn`{`8esn`:`5esn` Is Null}]->(`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]}))),`7esn`=Allshortestpaths((_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}})) Delete 9e0[..1000],$`4esn`[$999..][{`3esn`}..]"),
    octest_legacy:ct_string("Create Unique usn1=Shortestpath((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1))),(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Merge @usn5=Allshortestpaths((`2esn` {usn1:@usn5 Contains 7 Contains 999})<-[?{#usn7:{999} Ends With 1e1,#usn7:{1000} Is Null}]->(:_usn3:`5esn`{`7esn`:`1esn`[0X7..][#usn7..]})) On Match Set Case 1.0 =~$_usn4 When @usn5 Is Null Is Null Then 01234567 Is Null Is Null End.@usn5? =[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),Reduce(`8esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`7esn` In Null =~$`8esn` =~{`4esn`}|12.0[12..9e1]).@usn5? =Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] Union With  *,999 Ends With 999 Ends With .e12 As `6esn`"),
    octest_legacy:ct_string("Detach Delete 0Xa Contains 0X7 Contains {``},$usn2 Ends With $#usn8 Delete {`8esn`} In 123.654 In usn2,[`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000]],{@usn5} Contains $999 Contains 0.12 Union Match (`7esn` :_usn4:`4esn`),`1esn`=Allshortestpaths((((usn2 {#usn8:{#usn8} Contains 7,@usn5:$`1esn` Contains {`4esn`} Contains 0.12})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(`3esn` :#usn8:_usn3)<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)})))) Using Index `8esn`:usn1(_usn4) Using Join On usn1 Match (#usn8 :#usn8:_usn3{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8}) Using Index @usn6:_usn4(_usn4) Where {999} Starts With {`3esn`}"),
    octest_legacy:ct_string("With  0X0123456789ABCDEF[{`4esn`}][$_usn4],{#usn8}[$`6esn`..12e12] As #usn8 Order By Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0xabc[$#usn7][0Xa]) Is Null Is Null Desc,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Descending,07 =~usn2 Desc Return Distinct *,1.0[$`5esn`..{``}] As _usn4,$0 In 999 As `6esn` Skip usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`} Limit All(@usn5 In {#usn8} Contains 7 Where $#usn7 =~$123456789 =~12)[Extract(_usn4 In $`` =~$1000 =~7 Where $@usn6[{`8esn`}..9e0][0..$`4esn`])..][Extract(usn2 In 1000 Starts With $123456789 Where $#usn7[$123456789..][{0}..]|Null Contains \"d_str\" Contains {@usn6})..] Union All Foreach(`5esn` In All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1])| Create Unique ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),@usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF})) Match ((`3esn` :`2esn`:@usn5{`3esn`:`2esn` Starts With $0 Starts With 12.0,`8esn`:{usn2} Ends With _usn3})) Using Index `8esn`:usn1(_usn4) Using Scan usn2:#usn7) Start `4esn`=Node:@usn5({999}) Where 01234567[True]"),
    octest_legacy:ct_string("Delete 0.12[.e12..0][1.0..{_usn4}],{_usn4}[@usn5],Reduce(_usn4=$usn1[{``}..usn2][`3esn`..$1000],usn2 In 1000 Starts With $123456789|01[..$usn1])[Case When $#usn7[..0e0][..$12] Then $`6esn` End][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``})] Start `5esn`=Rel:`3esn`(@usn5={12}) ,``=Node( {`8esn`})"),
    octest_legacy:ct_string("Foreach(`8esn` In \"d_str\"[..`6esn`][..$`8esn`]| Load Csv From 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3} As usn2  Start @usn5=Relationship:`4esn`({`6esn`}) ,`7esn`=Relationship( {1000})Where $@usn5 Is Not Null Is Not Null) Optional Match (:`6esn`{_usn4:07 =~usn2})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(@usn6 $usn1)"),
    octest_legacy:ct_string("With Distinct $`4esn`[0xabc..][.e12..] As #usn7,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`3esn`} Starts With 1.e1 Starts With $#usn7 As `2esn` Order By Null[$`1esn`..][7..] Descending,usn1 In True In 12.e12 Descending,{1000} Contains 12.0 Contains @usn5 Asc Where `6esn` In _usn4 In {_usn4} Union Start usn1=Node:_usn3(``={12}) ,usn1=Relationship:`4esn`({`6esn`})Where $@usn5[0.12..] Merge Shortestpath((:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`)) On Create Set _usn4+=0X7 =~$`7esn` =~$_usn3,`7esn`+=`8esn`[12.0..$`6esn`][0.0..$@usn5] On Match Set @usn5 =$_usn3[`7esn`..][{usn1}..] Match `7esn`=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]}))"),
    octest_legacy:ct_string("Load Csv With Headers From {`3esn`}[{`8esn`}..$7][0e0..0x0] As #usn8 Fieldterminator 's_str' Unwind $`2esn`[..$#usn8] As _usn4 Detach Delete [2.12 =~{``} =~0X7,{#usn7} In `` In @usn6],$_usn3[..@usn6][..{999}],({#usn8:{12}[..9e1],`6esn`:12 Ends With 0X7 Ends With 12.0})-[`6esn`?]-($1000) =~{`6esn`:123456789[{`7esn`}..][{@usn6}..],`1esn`:{@usn6}[..$7][..{`6esn`}]} =~Extract(@usn5 In {#usn8} Contains 7 Where 010[123456789]) Union All Delete 0e0[..$`2esn`][..Count(*)],[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,0x0 Is Null Is Null Merge Shortestpath((((`4esn` {usn1:010 Ends With {999}})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)-[?:_usn3|:@usn5 *0Xa..]-(`3esn` {usn2:$@usn5[0.12..]})))) On Create Set _usn4 =12[{usn2}],[$`3esn`[..{`4esn`}][..12.e12],`7esn`[1.e1..#usn8],{@usn6}[..1000]]._usn3! ={@usn5} Contains {_usn4} With  Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By $`3esn` In $#usn8 In {_usn3} Descending,Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Descending,[{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Descending Limit (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)]"),
    octest_legacy:ct_string("Foreach(`1esn` In 12.0[..7]| With Distinct Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Where {_usn3}[..1.0])"),
    octest_legacy:ct_string("Create ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),@usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF})) Create Shortestpath((((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})))),`7esn`=Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Union All Delete Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]],False Starts With {``} Starts With 07 Create Allshortestpaths(((_usn4 :usn2:_usn4))) With Distinct *,$usn2 In {`5esn`} In 12.0 As _usn4 Order By `3esn`[..$#usn7][..{`8esn`}] Descending,$`4esn`[0xabc..][.e12..] Ascending,Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Contains All(`1esn` In $`7esn` Contains `1esn` Contains {usn1}) Contains Shortestpath(((#usn7 :`2esn`:@usn5))) Asc Where 07 In `2esn` In {`3esn`} Union Detach Delete $@usn5[0.12..]"),
    octest_legacy:ct_string("Return Distinct $usn2 Contains $usn1 Order By {@usn6}[..$7][..{`6esn`}] Desc,Reduce(`7esn`=9e12 In 0Xa In $#usn7,`` In {0} Is Not Null Is Not Null|$1000[$`7esn`..1e1]) =~Single(#usn8 In $`8esn`[{``}..] Where {_usn4} Ends With {`3esn`} Ends With 07) =~Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..]) Ascending Union Foreach(`1esn` In 2.12 Ends With {@usn5} Ends With `2esn`| Load Csv With Headers From `4esn`(Distinct {`1esn`} Starts With usn2) Is Not Null Is Not Null As usn1  Load Csv With Headers From [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}] In Allshortestpaths(((`3esn` :usn1)-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[?$`7esn`]->(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) As usn2 ) Union With  (_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])] As `5esn` Order By 0X7[True..{0}][Count(*)..@usn5] Descending,$`5esn` Is Null Ascending,1.0[..`3esn`][...e0] Ascending Create Unique (:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Return Distinct {@usn5} Contains {_usn4},@usn6(Distinct 0.e0[\"d_str\"][.e12],{0} Ends With $@usn5 Ends With 010)[All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..])..Extract(#usn7 In 0e0 Is Not Null Is Not Null Where `7esn`[1.e1..#usn8])][None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..])..None(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF])] As #usn7,Allshortestpaths((({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null}))) Starts With @usn6({`4esn`}[$`8esn`..'s_str']) Order By `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Descending,12.e12[2.12..] Descending,{`1esn`} In `` In {12} Desc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {@usn5}[9e1..][1e1..] As usn2  With  *,123456789 In usn2,01234567[`1esn`] As `3esn` Order By 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3} Ascending,{999} Is Null Is Null Desc Skip 9e0 Is Not Null Where 00 Foreach(`6esn` In $@usn5 Ends With 00 Ends With 12.e12| Optional Match `3esn`=Allshortestpaths(((`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})<-[@usn5:usn1|usn2]->(:`6esn`{_usn4:12.0 Is Not Null Is Not Null,@usn5:#usn8[..0Xa]})<-[@usn5?*..]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),Shortestpath((`1esn` {`5esn`:12 In {#usn7}})) Using Scan _usn4:#usn8 Using Index `7esn`:usn2(usn2) Where `1esn`[``..$``] Start `3esn`=Node:@usn6(``=\"d_str\") )"),
    octest_legacy:ct_string("Foreach(`7esn` In {`1esn`}[{`2esn`}..{_usn4}][{`8esn`}..$_usn3]| Start #usn8=Relationship:_usn3(`5esn`={_usn4}) ,`8esn`=Rel:_usn3(``={12})Where $@usn5[$`6esn`] Remove usn1:_usn3:`5esn`,Shortestpath((usn1 :`8esn`{``:#usn7[0.12..12.e12]})-[?:`8esn`|:#usn8 *..123456789]-(#usn8 :`7esn`:#usn8)<-[@usn5?{@usn6:12 Ends With {999} Ends With 's_str',#usn7:1000[01234567]}]->(`1esn` :`3esn`:usn2)).`8esn`!,Reduce(`5esn`={`6esn`} Is Null,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|9e12[$#usn7..01234567]).`2esn`) Remove Single(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {`8esn`}[@usn5][0]).usn2 Union All Return *,\"d_str\"[..$usn1][..$`5esn`] Skip True Is Null Is Null Limit 07 =~usn2 With Distinct Case 010[123456789] When {_usn4}[$`3esn`][$`3esn`] Then $`1esn` Contains {`4esn`} Contains 0.12 When {`1esn`}[`8esn`][{usn2}] Then 0.0[$`1esn`..$`5esn`][usn2..$``] Else 0.12 Ends With #usn8 Ends With $1000 End Is Not Null As @usn5,$#usn8 As _usn4,True[$7..] Limit Case {`6esn`}[0x0..{1000}] When 1000 Starts With $123456789 Then `1esn`[True..1000][`4esn`..{`3esn`}] Else `8esn` Contains 123.654 Contains {`7esn`} End[{`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF}] Where {`5esn`} Starts With {12} Starts With 07 Union Create Unique `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})) Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Order By 07[{12}..] Ascending Skip None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Return Distinct None(`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12])[Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4)..][Case {1000} Is Not Null Is Not Null When 0Xa Starts With .e12 Then #usn8[Null] When 1000 Starts With {@usn5} Starts With 123.654 Then .e12[..010][..{0}] Else {#usn8}[`7esn`..][_usn3..] End..] As `2esn` Limit $`5esn` Contains `3esn` Contains {usn2}"),
    octest_legacy:ct_string("Return Distinct `1esn` Starts With $`7esn` Starts With `8esn` As `3esn`,[010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End As usn2,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)) Contains Any(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]) Contains [010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]]"),
    octest_legacy:ct_string("Detach Delete [010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End Delete Single(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12}) Starts With Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 1.e1 Is Not Null) Starts With Allshortestpaths((:`7esn`:#usn8{#usn8:$7 In 00,_usn4:{123456789} Is Null Is Null})<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(usn1 :@usn5:`7esn`)),$_usn4 Contains {1000},True Is Null With Distinct 0x0 Contains 0x0 Contains {`1esn`} Skip `7esn`[1.e1..#usn8] Limit (:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Where $_usn3[..@usn6][..{999}] Union Merge `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) On Create Set ``+=0x0 =~$usn2,`6esn`:`2esn`:@usn5,``+=Reduce(``=1.e1 Is Not Null,`` In {0} Is Not Null Is Not Null|$@usn6[`4esn`..{999}][$``..{@usn6}]) Starts With Reduce(@usn5={usn1} Is Null,`7esn` In Null =~$`8esn` =~{`4esn`}|{``}[True][00]) On Match Set #usn8+=Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1),`2esn` =Count(*) In ``,_usn3 =Reduce(`4esn`=`2esn` Starts With $0 Starts With 12.0,#usn8 In $`8esn`[{``}..]|$`6esn` =~$_usn3 =~.e1)[Allshortestpaths(((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})))] Union Delete {1000} Is Not Null Is Not Null,$999[...e1][..{`3esn`}],999 Contains $`1esn` Remove Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12 Ends With _usn4|#usn8[{#usn7}][12e12]).#usn8!,`3esn`(07 Ends With `1esn` Ends With {@usn5}).`5esn` Remove {_usn3:{7} Contains {#usn8} Contains {7}}.usn2?"),
    octest_legacy:ct_string("Load Csv With Headers From 123.654 Starts With .e1 Starts With $999 As @usn5  Create `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})) Union All Unwind `6esn` As usn1"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 010 Is Not Null As #usn7 Fieldterminator 's_str' Foreach(#usn7 In {@usn5} Ends With {usn1} Ends With @usn5| Create Unique (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null}),((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`}))) Match #usn8=Allshortestpaths((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Using Scan #usn7:`` Using Scan `7esn`:`6esn`"),
    octest_legacy:ct_string("Unwind 9e12[$#usn7..01234567] As @usn6 Union Remove ({``:`1esn`[``..$``]})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})<-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}}).`8esn`!,Allshortestpaths(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))).`1esn`! Union All Detach Delete 0.e0 =~0.e0 =~12.e12 Delete [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]|{#usn8}[$`6esn`..12e12]][{`8esn`:$`` Ends With 9e0,`2esn`:010 Ends With {999}}] Create ``=Shortestpath(((#usn8 :`4esn`)-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})-[`8esn`:@usn6 *12..00{@usn5:$`8esn` Is Not Null Is Not Null,`3esn`:0e0 Is Not Null Is Not Null}]-(#usn8 {`3esn`:123456789 Contains $@usn6 Contains Count(*)}))),@usn5=Shortestpath(((usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})<-[? *010..]->(@usn5 {`3esn`:`2esn`[#usn8]})))"),
    octest_legacy:ct_string("Load Csv From {_usn4}[{usn1}..][`8esn`..] As `8esn`  Return {`3esn`} =~$999,$_usn4 Is Not Null Is Not Null As `3esn`,`2esn`[..$@usn5] As `4esn` Order By 1e1 In False Ascending Skip {`6esn`} =~{`4esn`} =~0x0 With Distinct 1000 Starts With {@usn5} Starts With 123.654,[$`8esn`[..$usn2][..12],$usn1[010..][{@usn6}..],$`5esn`[1e1..]] =~Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0X0123456789ABCDEF[{`5esn`}..]) =~Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where 0xabc[{@usn5}..][Count(*)..]) As usn1 Skip Reduce(`3esn`=$@usn6[{`8esn`}..9e0][0..$`4esn`],@usn5 In {#usn8} Contains 7|{usn1} Contains 0xabc) Ends With Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``}[True][00]) Ends With Case $`6esn` =~$_usn3 =~.e1 When {12} Ends With $`6esn` Ends With {#usn7} Then {`6esn`} Is Null When 9e1[$@usn5..] Then 0[9e1..][0x0..] End Union Foreach(`8esn` In 9e1 Starts With $123456789 Starts With {#usn7}| Detach Delete $0 Starts With {`2esn`},{_usn4}[@usn5],$`1esn` =~$`6esn` =~9e1 Unwind $_usn3 Ends With $999 Ends With 01 As `5esn`) Start usn1=Node:_usn3(``={12}) ,`3esn`=Node:@usn6(``=\"d_str\") Union All Remove Reduce(@usn5=$`5esn`[$#usn7],`5esn` In 9e1 In 0.0 In {999}|9e1 Is Null Is Null).`4esn`!"),
    octest_legacy:ct_string("Remove Reduce(`3esn`=$`5esn` =~`7esn` =~usn2,#usn7 In 0e0 Is Not Null Is Not Null|False =~$`8esn`)._usn3 Foreach(_usn3 In Reduce(#usn8={`8esn`}[.e12][01],`5esn` In usn2 Ends With 0.e0|True[{1000}][1000]) In None(#usn7 In 0e0 Is Not Null Is Not Null)| Match `7esn`=Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`)))),#usn7=((`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[`7esn`:#usn8|`1esn`{``:@usn6,`7esn`:2.12 =~{``} =~0X7}]-(`2esn` {usn1:@usn5 Contains 7 Contains 999})) Using Index `5esn`:`7esn`(#usn7) Using Join On `5esn`,_usn4,`6esn` Where 1000[01234567]) Unwind {#usn8} Ends With `7esn` As `5esn` Union Remove {``:{`8esn`}[`3esn`..999]}.usn2!,[$`8esn` Ends With {`5esn`} Ends With $`4esn`,{#usn8} In $7,{``}[True][00]]._usn4? Union All Create Unique Shortestpath((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)),((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) Load Csv From .e0 Ends With $0 Ends With `` As @usn6  Return 0Xa[_usn4..] As `6esn`,1000[All(`5esn` In usn2 Ends With 0.e0 Where 12[0X7..])..],Case $@usn6 Is Not Null When {``}[True][00] Then 0x0[$123456789..$usn1] When .e12[..010][..{0}] Then 01[.._usn4][..$_usn4] End[None(usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999)..Reduce(`5esn`=07 =~usn2,`4esn` In `4esn`[\"d_str\"..][123.654..]|0X7 =~{_usn3} =~0x0)] As @usn5 Order By {``} Starts With 12.e12 Starts With .e12 Asc,$`7esn` Starts With _usn3 Starts With 2.12 Ascending Skip 010 Starts With 0X7"),
    octest_legacy:ct_string("Start `5esn`=Node:usn2(`7esn`=\"d_str\") ,usn2=Node:`8esn`(`4esn`=\"d_str\")Where $7 Is Not Null Is Not Null Merge Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})) On Create Set `6esn`+=00[$usn1..][0xabc..] On Match Set #usn7 =12.0[{999}..$`5esn`][0xabc..$_usn3],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),#usn7 ={`3esn`}[$`4esn`..] Union All Start `5esn`=Node:_usn4(_usn4=\"d_str\") ,_usn4=Relationship:`6esn`(_usn3={`1esn`})Where _usn4[01234567.._usn4][False..12] Unwind $7 Is Not Null Is Not Null As @usn6"),
    octest_legacy:ct_string("Unwind {7} In 12e12 As usn1 Union Create Unique (`7esn` :_usn3:`5esn`{`1esn`:$`5esn` Is Null,_usn4:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[`8esn`?]->(usn1 :@usn6{`7esn`:123.654[_usn3..Null][{@usn6}..0x0]}),`3esn`=Shortestpath((((`7esn` :@usn6{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[ *..7]-(:`5esn`{`6esn`:$`6esn`,_usn4:12 Starts With $_usn4 Starts With $`6esn`})-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})))) Merge Shortestpath((:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`)) On Create Set _usn4+=0X7 =~$`7esn` =~$_usn3,`7esn`+=`8esn`[12.0..$`6esn`][0.0..$@usn5] On Match Set @usn5 =$_usn3[`7esn`..][{usn1}..] Remove `8esn`:#usn7:`3esn`"),
    octest_legacy:ct_string("Detach Delete 1.0 Contains #usn8 Contains $usn1,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999),$999 Is Not Null Is Not Null Create #usn8=Shortestpath((((`4esn` {@usn5:False =~$`8esn`})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(`8esn` :`2esn`:@usn5$``)<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})))),Shortestpath(((_usn3 :`1esn`))) Union All Create (`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})<-[`6esn`? *..1000{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True}]->(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}),``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) Union All Foreach(@usn5 In [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1)| Load Csv With Headers From {usn1}[`6esn`..@usn5][$usn1..0.0] As @usn6 Fieldterminator \"d_str\") Match @usn5=Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`)))),(usn2 :`2esn`:@usn5)-[_usn3:`5esn` *01{`8esn`:_usn4 Is Not Null,`6esn`:0xabc In $`5esn` In @usn5}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[@usn5?:_usn3|:@usn5]-(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)}) Using Index `7esn`:`2esn`(`7esn`) Using Scan `8esn`:usn2 Merge `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) On Create Set `6esn` =Reduce(`6esn`=$999[0.12][0xabc],`5esn` In usn2 Ends With 0.e0|{_usn4} Starts With 01234567 Starts With $#usn7) =~`6esn`(`1esn`[$`4esn`..]) =~`3esn`(0.0,$usn1 =~{_usn3}),[01 Is Null Is Null,$`8esn`[{``}..]]._usn3! =[$@usn6 Contains {@usn6},False[{`5esn`}..{`8esn`}]][Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7})..],@usn6+=`8esn` Contains 123.654 Contains {`7esn`} On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|{#usn7} In {`6esn`}) Is Null Is Null As usn1 "),
    octest_legacy:ct_string("Merge ({`3esn`:9e0 Is Not Null}) Delete $#usn8[..01],$@usn6 Contains {@usn6},$``[0e0][{`6esn`}] Union All Create Unique ``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),(((`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})<-[#usn8:_usn3|:@usn5{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}))) Union All Foreach(#usn8 In 01234567[..0X7][..0X7]| Optional Match Shortestpath(((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]}))) Where {7} In `1esn` In 123456789 With Distinct $7 In 00 As _usn3,{`6esn`}[0x0..{1000}],0x0 Is Null As `1esn` Order By $999 In $#usn7 In {`1esn`} Descending Limit $12[$`4esn`])"),
    octest_legacy:ct_string("Load Csv From All(usn2 In 1000 Starts With $123456789 Where 0[9e12..{usn1}])[Case {usn1}[0..{@usn6}][True..usn2] When {@usn6}[..$7][..{`6esn`}] Then $7 Starts With $12 Starts With 12e12 Else 01234567 Starts With {`2esn`} Starts With {``} End..(usn1 :#usn8:_usn3{`7esn`:{`6esn`}[..$`8esn`]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(`1esn` :@usn5:`7esn`{`8esn`:$@usn6[`4esn`..][0X7..]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]-(`` :`3esn`:usn2{`8esn`:1e1 Contains $`` Contains 12.0})][@usn6(Distinct {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`])..{`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}] As `3esn` Fieldterminator 's_str' Load Csv From {_usn3} Starts With $`4esn` Starts With {_usn4} As `1esn` Fieldterminator 's_str' Create Unique ``=Allshortestpaths((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1))),#usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))) Union All Optional Match Shortestpath(((({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[#usn7? *0xabc..]-(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})<-[? *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:`1esn`{usn1:0.12 In 123456789})))),#usn8=(`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(`2esn` :usn2:_usn4) Using Scan `5esn`:``"),
    octest_legacy:ct_string("Start `7esn`=Rel:`3esn`(`1esn`={@usn5})  With Distinct *,0X7 =~{_usn3} =~0x0,Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End[..Single(`5esn` In usn2 Ends With 0.e0 Where $`6esn` =~$_usn3 =~.e1)][..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa Contains 0X7 Contains {``})] Limit 12.e12"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(@usn5=`5esn` In $_usn3 In 0Xa,`` In {`7esn`} Starts With {0} Starts With {1000}|@usn5[Count(*)][07]) Starts With [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1] Starts With Case When $#usn7[..0e0][..$12] Then $`6esn` End As `5esn` "),
    octest_legacy:ct_string("Detach Delete False[{`5esn`}..{`8esn`}],Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7) =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) =~Allshortestpaths(((#usn8 :`4esn`))) Load Csv With Headers From 0X0123456789ABCDEF[..0.12] As @usn6 Fieldterminator 's_str' Union With  *,{999} Starts With {`3esn`} As #usn8 Order By {`6esn`} Contains 01 Contains {#usn8} Descending,{#usn8:0Xa Contains 0X7 Contains {``}} Starts With `1esn`() Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Desc,1.e1 Ends With $12 Ends With #usn8 Ascending With Distinct 123.654[0xabc][1.e1] Order By (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[_usn4]-(:@usn5:`7esn`)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) Starts With ({`3esn`:9e0 Is Not Null})<-[:@usn6 *07..07{`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7}]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]}) Starts With (:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) Ascending,{999} In `3esn` Descending,Filter(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where $#usn8[..#usn8][..{`5esn`}]) =~[01[..$usn1],$_usn4 Contains 0 Contains False,9e1 Is Null Is Null] =~Filter(_usn4 In $`` =~$1000 =~7 Where 1.e1 Starts With {`3esn`} Starts With #usn8) Ascending Limit $`5esn`[$#usn7] Where 01234567 Is Null Is Null Foreach(#usn8 In {`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}[[{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]]..12][Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where `3esn`[{``}..$#usn8])..[usn1[..$usn2][..0],$`4esn` In $@usn5,$123456789 =~00 =~0X0123456789ABCDEF]]| Start ``=Node:usn2({`5esn`}) Where Null[$`1esn`..][7..]) Union Unwind $`2esn` Ends With {1000} Ends With `7esn` As `1esn` Unwind {`2esn`} =~{@usn6} As `1esn`"),
    octest_legacy:ct_string("Return Distinct 0Xa[..07][..`2esn`] As #usn8,{@usn6} Is Null As `7esn`,1000 Contains {999} Contains 9e12 Order By {@usn5}[..$12] Desc,{@usn6} Contains {`1esn`} Descending Union With Distinct *,(:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Skip `6esn` Contains 01234567 Contains $12 Where 0X7 In 0xabc Start `8esn`=Rel:#usn8(`6esn`={123456789}) ,#usn7=Node:`4esn`({7})Where `5esn`[12.0..]"),
    octest_legacy:ct_string("Return 1000[..$12][..$usn2] As #usn8 Limit $@usn5[$`6esn`] Start #usn7=Relationship:usn2(`6esn`=\"d_str\")  Create ((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))"),
    octest_legacy:ct_string("Create Unique `1esn`=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))) Match `4esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`}))"),
    octest_legacy:ct_string("Unwind $@usn5 Contains 1.0 As `5esn` Delete `5esn` In $_usn3 In 0Xa Union All With  [True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null Order By {0}[{`4esn`}..] Ascending,{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5}[usn2(Distinct 1.e1[$_usn4..999])..[`5esn` In 9e1 In 0.0 In {999}|#usn8[_usn4]]][[1e1 In False,_usn3[..1000]]..Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)] Descending,Case When #usn7 =~#usn8 =~{`6esn`} Then 12.0[12..9e1] End Ends With [`5esn` In 9e1 In 0.0 In {999} Where $@usn6[{`8esn`}..9e0][0..$`4esn`]|{@usn6} Contains {`1esn`}] Ends With All(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0) Desc Where $`4esn` In $@usn5 Merge usn1=(:@usn5:`7esn`{`8esn`:#usn7 =~#usn8 =~{`6esn`},`7esn`:999[0.0..][$_usn4..]})<-[:`3esn` *01]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) On Create Set @usn6 ={7}[..123456789][..$#usn8],_usn3+={`5esn`}[{_usn3}..False],#usn8 =$_usn4[1.0..@usn6] On Create Set #usn8 =$@usn5 Is Null Is Null"),
    octest_legacy:ct_string("Unwind 12[{usn2}] As `4esn` Unwind Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null As `4esn` Union All Remove Extract(`` In {0} Is Not Null Is Not Null Where 0xabc[$#usn7][0Xa]|`6esn`[$123456789..0xabc][``..$`4esn`]).`8esn`!,[usn2 In 1000 Starts With $123456789 Where $`4esn` Contains {7} Contains 999|9e1 Is Null Is Null].`5esn`,Single(`` In {0} Is Not Null Is Not Null Where $`1esn` Ends With $`7esn` Ends With `2esn`).`8esn`!"),
    octest_legacy:ct_string("Optional Match `1esn`=Shortestpath(((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})-[#usn7?:_usn4 *12..00]-(`6esn` ))),Shortestpath((((`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})))) Create Unique `8esn`=((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}})) Remove [#usn8 In $`8esn`[{``}..] Where {@usn5}[9e1..][1e1..]|`` Ends With $usn1 Ends With $`2esn`].`5esn`!,`2esn`:``"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From False Is Null Is Null As `8esn` "),
    octest_legacy:ct_string("Match @usn6=((:`5esn`{_usn4:#usn8[{#usn7}][12e12]})-[?:`3esn`*]-(`2esn` :#usn8:_usn3)<-[?:``{`3esn`:'s_str' Contains 0xabc,`4esn`:$999 Contains 0e0}]-(@usn5 :`3esn`:usn2{`5esn`:{`1esn`} Is Null,_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]})),Shortestpath((:_usn4:`4esn`{_usn3:usn1[..$usn2][..0]})-[? *0]-(usn2 :_usn3:`5esn`)-[`2esn`?]-(#usn7 :`1esn`)) Where @usn5 Starts With 0xabc Remove Case $0[{7}..][123.654..] When $#usn7 In `4esn` In 1.0 Then 's_str' Is Null Is Null When $`5esn` In $_usn4 In $`2esn` Then 2.12 =~1.0 =~{`4esn`} End._usn3,[{`8esn`}[`3esn`..999],01234567[True],$7 Starts With $12 Starts With 12e12].``,(`1esn` :`5esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})<-[:usn2]-(`3esn` {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})<-[`1esn`:`3esn`]-({@usn6:01234567[True]}).`` Union All Merge `7esn`=Allshortestpaths(((`5esn` :`6esn`{@usn6:_usn3 Starts With 0X7,`6esn`:$`5esn` Is Null}))) With  *,{@usn6} Is Null,{0}[{@usn6}..$_usn3] As `6esn` Order By Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End[..{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}] Asc,#usn8[\"d_str\"..999] Descending Where $`3esn` Ends With {_usn3} Ends With 9e1 Optional Match `1esn`=(`4esn` {@usn6:0X0123456789ABCDEF[..0.12],`6esn`:{`8esn`}[`3esn`..999]})<-[?{`6esn`:2.12 =~.e12 =~#usn8,``:$`5esn` In $_usn4 In $`2esn`}]->(:`4esn`)-[ *0]-(`6esn` {@usn5:9e12[$#usn7..01234567]}),#usn8=Allshortestpaths(((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]}))) Using Scan #usn8:`6esn` Where `1esn` Is Null Union All With  {123456789} Is Null Is Null Order By $`7esn` Contains 01 Contains @usn6 Ascending,Count(*) Contains `` Descending Skip 9e12 Starts With Count(*) Starts With {`4esn`} Where 's_str' Contains 0xabc Load Csv With Headers From Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] As usn1 "),
    octest_legacy:ct_string("Create ((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)) Match (@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}),Shortestpath((((:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})))) Using Join On `1esn`,`8esn` Using Index `3esn`:#usn7(usn2) Create Unique `5esn`=((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))),(:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})"),
    octest_legacy:ct_string("Merge Allshortestpaths((@usn5 :`6esn`)<-[`1esn`? *..0X7]->({#usn8:00})) Start `6esn`=Relationship:`3esn`(usn1='s_str') ,_usn4=Node:`6esn`('s_str')Where {123456789}[01234567..Null] Optional Match usn2=Shortestpath(((`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00})-[#usn8?:``{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]-(@usn6 ))) Using Scan `7esn`:`` Where 9e1[{`5esn`}] Union Load Csv With Headers From 0X0123456789ABCDEF[..0.12] As @usn6 Fieldterminator 's_str' Remove Filter(`5esn` In usn2 Ends With 0.e0 Where $@usn5[0.12..]).#usn7?,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]).`2esn`!,Reduce(`4esn`=01 Starts With 12e12,#usn8 In $`8esn`[{``}..]|_usn4 Contains {123456789} Contains $`5esn`).`5esn`? Detach Delete True[{1000}][1000],({``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]})<-[? *0]->(@usn5 :`1esn`)-[`6esn`?]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})[..{#usn8:07 Starts With 123.654 Starts With 1.0}]"),
    octest_legacy:ct_string("Delete 9e1[..`4esn`],Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Union Unwind 07 In `2esn` In {`3esn`} As `8esn` With Distinct *,$12[$`3esn`][9e12] As #usn8 Order By Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null Asc Skip $999 Contains 0e0 Limit $#usn8[{7}..{`6esn`}] Load Csv From {_usn4}[{usn1}..][`8esn`..] As `8esn`  Union Create Unique `1esn`=((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)),_usn3=Allshortestpaths((`4esn` :usn1{`3esn`:12 Ends With {999} Ends With 's_str'})-[:`3esn` *01]-(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})-[`7esn`?:_usn4 *0xabc..]->(`4esn` :usn2:_usn4{usn2:@usn6}))"),
    octest_legacy:ct_string("Unwind {_usn3}[..1.0] As `8esn` Union Delete {`1esn`}[..\"d_str\"],$`5esn`[{usn2}..][Null..] Load Csv With Headers From 1.e1 Is Null Is Null As @usn6  Union All Load Csv With Headers From [`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}]|$`2esn`[Null][{usn2}]) As ``  Detach Delete $0 Starts With {`2esn`},{_usn4}[@usn5],$`1esn` =~$`6esn` =~9e1 Create `8esn`=Shortestpath((({`3esn`:`2esn`[#usn8]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[ *..0X7]->(`1esn` {#usn8:True[..$7][..$`4esn`]}))),((`4esn` $`6esn`))"),
    octest_legacy:ct_string("Match Allshortestpaths((({`2esn`:9e1[{`5esn`}]})<-[``:`` *..0X7{`3esn`:`2esn`[#usn8]}]-(`3esn` {_usn4:0.e0 Ends With Count(*) Ends With `8esn`}))) Using Scan _usn4:usn2 Where $`3esn` In $#usn8 In {_usn3} Load Csv With Headers From {0}[1.e1] As @usn6 Fieldterminator \"d_str\" Foreach(`5esn` In All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1])| Create Unique ((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),@usn5=((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[_usn3?:_usn3|:@usn5]->({`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`?]-(`4esn` {`7esn`:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF})) Match ((`3esn` :`2esn`:@usn5{`3esn`:`2esn` Starts With $0 Starts With 12.0,`8esn`:{usn2} Ends With _usn3})) Using Index `8esn`:usn1(_usn4) Using Scan usn2:#usn7) Union Create Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))),usn1=((`4esn` :`5esn`)) Create `2esn`=Shortestpath((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(:usn1{usn2:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})),`7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010})"),
    octest_legacy:ct_string("Foreach(usn2 In $@usn5 Is Null Is Null| Load Csv With Headers From Single(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) In Filter(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2]) In {`5esn`} As `5esn` Fieldterminator 's_str' Match `1esn`=((`2esn` :`7esn`:#usn8)-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(_usn3 :``)),_usn3=Allshortestpaths((`4esn` :usn1{`3esn`:12 Ends With {999} Ends With 's_str'})-[:`3esn` *01]-(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})-[`7esn`?:_usn4 *0xabc..]->(`4esn` :usn2:_usn4{usn2:@usn6})) Using Join On `6esn` Using Join On `7esn`,usn1) Foreach(`8esn` In [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|$`7esn` Ends With @usn5 Ends With .e1][Shortestpath((((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))))..Any(`` In {0} Is Not Null Is Not Null Where 0xabc =~@usn6 =~{`2esn`})][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1 =~{_usn3})..Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))]| Return Distinct 0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Create Unique Shortestpath((:#usn7:`3esn`)-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->({@usn6:01234567[True]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}))) Detach Delete {1000} Is Null,\"d_str\"[..`6esn`][..$`8esn`],Case {7}[..{@usn5}] When {#usn7}[..12e12][..{1000}] Then `3esn` =~usn2 =~7 End In None(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]) In Shortestpath(((:_usn4:`4esn`{`7esn`:$usn1[{``}..usn2][`3esn`..$1000]})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})))"),
    octest_legacy:ct_string("Create Allshortestpaths(((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))),((:`1esn`{_usn4:_usn4 Contains {123456789} Contains $`5esn`})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]-({#usn7:{`8esn`}[Count(*)..]})) Merge `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} On Create Set `5esn`:`8esn` Union Create Unique ((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})),((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[usn1 *010..]->(usn2 :@usn6)<-[?{usn2:Count(*) Starts With $7}]-(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})) Create Unique Shortestpath((({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[`8esn`:`1esn`|`6esn`]->(`1esn` $#usn8)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}))) Load Csv With Headers From 2.12 Ends With usn1 Ends With $`2esn` As #usn8  Union Start _usn4=Node:_usn3({_usn3}) ,usn2=Rel:``(#usn8={`8esn`})Where 0x0 Starts With usn1 Starts With 01"),
    octest_legacy:ct_string("With Distinct *,(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]})<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000}) =~Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $0 Starts With {`2esn`}|`2esn` Ends With $0 Ends With {7}) =~Case $7 Contains {1000} Contains 0X7 When {_usn4} =~`7esn` Then 0.e0 =~0.e0 =~12.e12 When @usn5[`5esn`] Then 01[$_usn4..][0..] Else 0e0 In `7esn` In $`8esn` End As _usn3,True[..{_usn4}][..0.0] As `5esn` Skip 12.0 Is Not Null Is Not Null Limit [`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654|$`6esn` =~$_usn3 =~.e1][Extract(usn2 In 1000 Starts With $123456789|{7} =~$usn1 =~{_usn4})..] Where $_usn4 Is Null Is Null Union Create Unique ``=Allshortestpaths((:`2esn`:@usn5{`3esn`:{12} Contains $`4esn` Contains usn2})),(`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00})-[_usn4?:_usn3|:@usn5]-(usn1 :``{@usn5:$#usn7 =~$`1esn`})"),
    octest_legacy:ct_string("Start `7esn`=Rel:@usn5('s_str')  Union All Match ((_usn4 :``)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})),``=(`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}) Using Scan ``:@usn5 With  *,(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[``?:_usn3|:@usn5{usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]}]-(:`8esn`{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]})[[#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null]..] As `8esn` Order By {0} Ends With $@usn5 Ends With 010 Asc,$12 In $`3esn` In 07 Asc Skip Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7}) Starts With [{1000} In $`2esn` In $_usn3] Limit 0X7 In 0xabc Where Count(*) Starts With $7 Create Unique @usn6=((#usn7 :`5esn`{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654})),Allshortestpaths((((_usn3 {``:$``[$@usn6..usn1][usn1..7],usn1:$usn1[010..][{@usn6}..]})-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(_usn4 :usn1))))"),
    octest_legacy:ct_string("Foreach(`4esn` In .e12 Contains 00 Contains usn2| Match `6esn`=({``:{999} Ends With 1e1})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})<-[:`3esn` *01]->(_usn3 :`3esn`:usn2{#usn8:True[..$7][..$`4esn`]}) Using Index `8esn`:#usn7(@usn6) Using Index usn2:`1esn`(_usn3) Where $_usn4 Contains 0 Contains False) Remove Reduce(`8esn`=`5esn` Is Null Is Null,`5esn` In usn2 Ends With 0.e0|01 Contains {0} Contains $`5esn`)._usn4! Create Unique (`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``)-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(_usn3 ),(({``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2})-[ *0Xa..{#usn8:$`2esn` Ends With 9e0 Ends With True}]->(:`4esn`{`8esn`:{`8esn`} In 123.654 In usn2})-[`8esn`:`1esn`|`6esn`]-(usn1 ))"),
    octest_legacy:ct_string("Foreach(`8esn` In $_usn4 Is Not Null Is Not Null| Unwind #usn7[`4esn`..$`8esn`] As usn1 Remove Reduce(@usn5=$1000[`6esn`..][Count(*)..],`` In 9e0 Is Not Null|'s_str' Is Null).`4esn`,Case 0xabc[$#usn7][0Xa] When {`6esn`} Is Null Then {999} Ends With 1e1 When 123.654 Is Null Then {0}[1.e1] End.``) Remove [#usn7[0.12..12.e12],0xabc[$#usn7][0Xa]].`5esn`,Extract(`` In {0} Is Not Null Is Not Null Where 010[123456789])._usn4?,Reduce(`5esn`=$usn2 Ends With `5esn` Ends With 0Xa,`5esn` In usn2 Ends With 0.e0|$12 In $`3esn` In 07).#usn7? Union All Detach Delete {usn1} Is Null,0.e0 Is Null,[`8esn` Contains 123.654 Contains {`7esn`},$usn1[$0..Count(*)][@usn6..$12],9e1 In 0.0 In {999}][Any(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where @usn6[2.12..][`5esn`..])] Foreach(usn2 In $usn2 In {`5esn`} In 12.0| With Distinct Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) As `5esn`,{usn2} Is Not Null Is Not Null As _usn4 Limit {`3esn`}[.._usn3][..{#usn7}] Load Csv From None(#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0])[Case 0.e0 =~0.e0 =~12.e12 When 010 Contains $`2esn` Contains 01 Then {7}[..{@usn5}] When {`1esn`} Is Null Then 010 Is Not Null Is Not Null End..] As `7esn` Fieldterminator \"d_str\") Return Distinct 07 Starts With 123.654 Starts With 1.0 As `` Skip Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {``}[True][00]|2.12 =~{``} =~0X7) Contains None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {`1esn`} Starts With usn2) Contains Extract(`` In `1esn` In `2esn` In $@usn6 Where $usn1[{``}..usn2][`3esn`..$1000])"),
    octest_legacy:ct_string("Foreach(`5esn` In $123456789 =~00 =~0X0123456789ABCDEF| Return Distinct 0[9e0][1.0] As `5esn`,Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When $7 In 00 Then $`` Ends With 9e0 Else {`8esn`} End[count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])..Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))] Unwind [{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null As `6esn`) Merge Allshortestpaths(({``:{999} Ends With 1e1})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})-[`4esn`{usn1:1e1[..1e1]}]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Union All Merge ((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0})) On Match Set All(#usn8 In $`8esn`[{``}..] Where 9e12[_usn4..1.e1][{`3esn`}...e1]).usn2 ={0}[{@usn6}..$_usn3] On Match Set `6esn` =[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Is Null Is Null,(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(_usn4 :_usn4:`4esn`).``? =9e0,.e1.`7esn`! =Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` ))[Case When False[{`5esn`}..{`8esn`}] Then 2.12 =~{``} =~0X7 When 0e0 =~{usn2} Then $_usn4 =~$12 =~`3esn` Else 999[0.0..][$_usn4..] End][[#usn8 In $`8esn`[{``}..] Where {_usn3}[..1.0]]]"),
    octest_legacy:ct_string("With Distinct *,(:``{`1esn`:'s_str' Contains {_usn4}})-[`7esn`?:_usn3|:@usn5]-({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Is Null Is Null Skip `6esn` Contains 01234567 Contains $12 Where 0X7 In 0xabc Start `8esn`=Rel:#usn8(`6esn`={123456789}) ,#usn7=Node:`4esn`({7})Where `5esn`[12.0..]"),
    octest_legacy:ct_string("Create Unique ((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})-[?:`8esn`|:#usn8 *..123456789]-(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]})),({`6esn`:True Ends With Count(*) Ends With 1.0}) Start @usn6=Rel:`3esn`(_usn3='s_str') ,usn1=Relationship:``(`4esn`=\"d_str\")Where usn1 Is Null"),
    octest_legacy:ct_string("Foreach(usn1 In (usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End| Create Unique Shortestpath(({_usn3:999[0.0..$`6esn`]})<-[`7esn`? *0x0{@usn6:123456789 Is Not Null Is Not Null,@usn6:01234567 Is Not Null}]-(usn2 {_usn4:{`3esn`}[`1esn`]})) Delete Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5},12e12[1000..],{#usn8}[$`6esn`..12e12]) Union All Optional Match `8esn`=(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}) Using Index `8esn`:usn1(_usn4) Where $12 In {`8esn`}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Single(`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7) In `6esn` In {`2esn`:$@usn6[`4esn`..{999}][$``..{@usn6}],``:{usn2}[..12.0]} As @usn6 Fieldterminator 's_str' Remove Any(#usn7 In `7esn` In $`1esn` In $999 Where {999} Is Null Is Null).`8esn`? Delete Extract(#usn7 In 0e0 Is Not Null Is Not Null Where {`1esn`} Starts With usn2)[..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``)][..Case When $@usn6 Is Null Is Null Then \"d_str\" Is Null Is Null When {usn2} =~{1000} Then `2esn` Ends With {#usn8} End]"),
    octest_legacy:ct_string("Create (#usn7 :`2esn`:@usn5{#usn7:9e0[..usn2][..0]})<-[@usn6?:`6esn`*..]-({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}),((`` :@usn5:`7esn`)<-[`6esn`:#usn7|:`` *010..{#usn7:$`2esn`[..$#usn8],@usn6:07[..0Xa]}]-({`3esn`:0.12 In 123456789})<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Union All Remove `7esn`:`8esn`,[#usn8 In $`8esn`[{``}..] Where usn1 Is Null|`5esn` In $_usn3 In 0Xa]._usn4? Unwind 's_str' Contains {_usn4} As `5esn` Create Unique Shortestpath((((`5esn` :`8esn`)<-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]->({`2esn`:9e1[{`5esn`}]})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})))) Union Remove Case When 0X7 Ends With {@usn5} Ends With {_usn3} Then {0} Starts With {usn1} End.`1esn`,Reduce(`6esn`={`8esn`}[`3esn`..999],`5esn` In 9e1 In 0.0 In {999}|$1000 Starts With 12.e12 Starts With {#usn7}).`4esn`!,Single(`` In {0} Is Not Null Is Not Null Where $@usn5 Contains 12e12 Contains {`6esn`}).`7esn`? Remove Case False Ends With #usn7 Ends With 1.e1 When #usn8[{#usn7}][12e12] Then {`8esn`} Is Not Null End.`2esn`!"),
    octest_legacy:ct_string("Unwind {`2esn`} =~{@usn6} As @usn5 Union All Merge `5esn`=((@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})) On Match Set Any(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]).`5esn`? =9e1[{`5esn`}] Remove Case When $`5esn` Is Null Then 0X0123456789ABCDEF End.`1esn`,{`3esn`:12.e12,`2esn`:12.e12}.@usn5 Foreach(@usn6 In 9e1[{`5esn`}]| Load Csv With Headers From $#usn7[$@usn6..] As `3esn` ) Union All Return *,{_usn4}[$`3esn`][$`3esn`],`2esn`({`1esn`}[..\"d_str\"]) Contains Reduce(#usn7={@usn6}[..1000],_usn3 In 010 Contains $`2esn` Contains 01|{`3esn`}[$_usn3...e0]) Contains Case {7} In `1esn` In 123456789 When 123.654[Null..12.e12] Then {`1esn`}[`8esn`][{usn2}] When `1esn`[``..$``] Then {_usn3}[{``}..] End Skip {@usn6} In $`5esn` In {7} Limit `5esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove (usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}).@usn6,(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}).#usn7? Start `7esn`=Rel:_usn4(@usn5='s_str')  Union Foreach(#usn8 In Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {7} In `1esn` In 123456789|`2esn` Is Not Null) Is Not Null| Delete Count(*) Contains ``,Case When {usn2} Ends With $`7esn` Ends With {`1esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] Else 01[$_usn4..][0..] End[..Single(`5esn` In usn2 Ends With 0.e0 Where $`6esn` =~$_usn3 =~.e1)][..Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 0Xa Contains 0X7 Contains {``})],$7 Is Not Null Is Not Null Start `2esn`=Rel:`2esn`(`1esn`='s_str') Where `5esn` Is Not Null Is Not Null) Load Csv From _usn4 Is Not Null As `1esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create `7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}),((_usn3 {usn1:{`8esn`} Is Not Null})) Load Csv From Case When `4esn` Ends With $#usn8 Ends With {12} Then 01 Contains _usn3 Contains .e12 End Ends With Allshortestpaths(((`2esn` :`1esn`$1000)<-[?:_usn3|:@usn5]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[#usn7 *01{@usn5:{#usn8} In $7}]->(usn1 {usn2:$123456789 =~00 =~0X0123456789ABCDEF}))) Ends With {@usn6:12 Ends With {999} Ends With 's_str',#usn7:1000[01234567]} As @usn5  Start @usn5=Rel:`2esn`(@usn5={1000}) ,usn2=Relationship:_usn3({@usn5})"),
    octest_legacy:ct_string("Optional Match `5esn`=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),Allshortestpaths((((`3esn` :usn1)<-[usn1 *010..]->(usn2 :@usn6)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->(_usn4 )))) Using Index usn2:`1esn`(_usn3) Where $#usn7 =~$123456789 =~12 Union All Return *,'s_str' Is Not Null Is Not Null As `6esn` Union All Foreach(@usn5 In Case `8esn` Contains 123.654 Contains {`7esn`} When 01[$#usn8..][7..] Then 010 When 01[$_usn4..][0..] Then True Ends With {`7esn`} Ends With @usn5 End| Load Csv With Headers From $0[{7}..][123.654..] As `1esn` Fieldterminator \"d_str\" With  01234567[`1esn`] As `3esn` Skip Allshortestpaths(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn3 :`8esn`)) Starts With {``:9e1[$`5esn`..0xabc]} Starts With 123.654 Limit 0xabc[..``]) Unwind Extract(`` In 9e0 Is Not Null Where {_usn4}[$`3esn`][$`3esn`]|07 In `2esn` In {`3esn`}) Is Null As @usn5"),
    octest_legacy:ct_string("Remove Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where $123456789 =~00 =~0X0123456789ABCDEF|{@usn6}[..1000]).`6esn`,`6esn`($@usn6 Ends With Count(*),1000 Starts With {@usn5} Starts With 123.654)._usn4? Detach Delete $1000 Contains {@usn6} Contains 1.0 Union All Create Allshortestpaths((`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`})),((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0})) Return Distinct *,Allshortestpaths(((`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})<-[@usn6?{@usn5:07[{12}..]}]-(_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]}))) Contains (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Contains (:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]-(`4esn` :`5esn`{#usn8:`6esn`[$123456789..0xabc][``..$`4esn`]}),True[{1000}][1000] As #usn8 Skip 0[9e12..{usn1}] Union All Remove Single(`` In {0} Is Not Null Is Not Null Where Count(*) In ``).@usn6?,[0 In Null In 00,`1esn` Starts With $`7esn` Starts With `8esn`].`4esn`?,[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 12e12 Starts With $`7esn`|$`8esn` Is Not Null Is Not Null].usn1! Create Unique @usn5=Shortestpath((((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5})<-[?:`7esn`|:`2esn` *010..]->(`5esn` :`1esn`)))),(usn2 :`2esn`:@usn5)-[_usn3:`5esn` *01{`8esn`:_usn4 Is Not Null,`6esn`:0xabc In $`5esn` In @usn5}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[@usn5?:_usn3|:@usn5]-(#usn8 :#usn8:_usn3{`3esn`:`1esn` In `` In {`6esn`},@usn6:$@usn6 Ends With Count(*)}) Unwind {`2esn`} Starts With 00 As ``"),
    octest_legacy:ct_string("Foreach(`6esn` In Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}]) Is Not Null Is Not Null| Return Distinct *,`` Starts With 0.0 Starts With $`1esn` As @usn5 Limit Reduce(`4esn`={@usn6}[#usn8..][999..],#usn8 In $`8esn`[{``}..]|0X0123456789ABCDEF[{`5esn`}..]) Is Not Null Is Not Null) Return *,\"d_str\"[..$usn1][..$`5esn`] Skip True Is Null Is Null Limit 07 =~usn2 Union All Load Csv With Headers From None(`` In {0} Is Not Null Is Not Null Where 1.0 =~$_usn4)[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..Any(#usn7 In 0e0 Is Not Null Is Not Null Where {_usn4} =~`7esn`)] As @usn5 "),
    octest_legacy:ct_string("Return Distinct 01234567[True] As `7esn` Order By Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True]) Descending Limit Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] Merge `1esn`=(({`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[usn2 *..7{`6esn`:{usn2} Contains 0e0 Contains 1.e1}]->(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})) On Match Set `1esn` =01 Contains @usn6 Contains {@usn5} On Create Set `8esn`+=12e12 =~{usn1} =~1.e1,`5esn`+=Null Contains \"d_str\" Contains {@usn6},`3esn`+=[`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]][@usn6(Distinct {`1esn`} In 0.e0 In $1000)..][Shortestpath((_usn4 :usn2:_usn4)-[#usn8:usn2*{`3esn`:0[9e12..{usn1}]}]-({`3esn`:0.12 In 123456789})<-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(:`8esn`{0}))..] Union Return *,1.0 Is Not Null Is Not Null As #usn7 Order By All(usn2 In 1000 Starts With $123456789 Where 12 Starts With $_usn4 Starts With $`6esn`) Contains {@usn5:0X0123456789ABCDEF[...e12][..0.12],`8esn`:{123456789} Starts With {`5esn`}} Contains Case {@usn6} Ends With `5esn` Ends With 00 When $`8esn` Is Not Null Is Not Null Then 12[1e1] When {`8esn`} Is Not Null Then 9e1[{usn2}..$1000] Else 1.e1[$_usn4..999] End Descending,$1000 Contains $12 Descending,1000[All(`5esn` In usn2 Ends With 0.e0 Where 12[0X7..])..] Desc Match ``=((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`})),`5esn`=(((@usn5 :@usn6)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-(usn1 :#usn8:_usn3)<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Where #usn7 Starts With 12 Starts With `4esn`"),
    octest_legacy:ct_string("Merge `8esn`=((:`1esn`{usn1:0.12 In 123456789})-[?{@usn6:{@usn5}[...e1][..01]}]-(`1esn` {`2esn`:False[{`5esn`}..{`8esn`}]})<-[_usn3?:usn2{`5esn`:$999 Contains 0e0}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})) On Create Set `3esn`+=All(_usn3 In 010 Contains $`2esn` Contains 01)[[#usn7 In 0e0 Is Not Null Is Not Null Where 07 Ends With $0 Ends With \"d_str\"]..] On Create Set usn2 =(:``{@usn5:`7esn` Contains 01234567 Contains `1esn`,_usn3:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[_usn4]-(_usn4 {`1esn`:0[9e12..{usn1}],`7esn`:{usn2} Ends With _usn3})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]}) Starts With Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {#usn8}[`7esn`..][_usn3..]|{@usn6}[..1000]) Starts With Reduce(#usn8={@usn5}[$usn2..],`` In {0} Is Not Null Is Not Null|$12[..$`6esn`][..$`1esn`]) Remove Extract(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where False Contains _usn4 Contains 2.12|{`1esn`} Is Null).usn2? Detach Delete #usn7[$@usn6][$`8esn`]"),
    octest_legacy:ct_string("Remove exists(Distinct `5esn` Is Not Null Is Not Null,{12} Starts With 00 Starts With 12).#usn8,Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 123.654 Is Null)._usn3! Merge (({`8esn`:{7} In `1esn` In 123456789})) Merge `2esn`=Allshortestpaths((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)) On Match Set _usn3+=Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] Union Unwind #usn7 =~#usn8 =~{`6esn`} As _usn4 Create Unique `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})) Union Foreach(usn1 In Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null| Match ((:usn1)<-[`5esn`:`2esn`|_usn3{usn1:9e1[..`4esn`]}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})),Allshortestpaths((((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]->(#usn8 :`1esn`)-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000})))) Where `1esn` In `` In {`6esn`}) Unwind $1000 Contains {@usn6} Contains 1.0 As ``"),
    octest_legacy:ct_string("Merge ((_usn4 )<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})) On Match Set (@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}).@usn6? ={usn1:1.e1 Is Not Null} Is Null,#usn8 =0Xa Is Not Null Is Not Null Start `3esn`=Rel:``(`6esn`={7}) ,_usn3=Node:@usn6(_usn3={``})"),
    octest_legacy:ct_string("Optional Match Shortestpath((`2esn` )),Allshortestpaths(((_usn4 :`5esn`)<-[`7esn`?:usn2 *01234567..{usn1:{@usn5} Is Not Null Is Not Null,#usn7:{123456789} Starts With {`5esn`}}]-(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[usn1?:_usn4]-(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))) Using Join On `1esn`,`8esn` Using Join On `5esn` Where $`5esn`[`4esn`][{`3esn`}] Union All With  0X0123456789ABCDEF[{`4esn`}][$_usn4],{#usn8}[$`6esn`..12e12] As #usn8 Order By Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 0xabc[$#usn7][0Xa]) Is Null Is Null Desc,{7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Descending,07 =~usn2 Desc Where $`1esn`[{1000}..{999}]"),
    octest_legacy:ct_string("Start @usn5=Relationship:#usn8({12}) Where {0}[1.e1] Remove None(#usn8 In $`8esn`[{``}..] Where 0Xa[..07][..`2esn`]).usn1!"),
    octest_legacy:ct_string("With  *,[0Xa,0e0 In `7esn` In $`8esn`,123456789 Is Null] In (`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) As `7esn`,010 Contains $`2esn` Contains 01 As usn2 Order By {`8esn`} Is Not Null Asc Where $`1esn` =~$`6esn` =~9e1 Foreach(usn1 In Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`)| With  Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where $usn1[{``}..usn2][`3esn`..$1000]|0.e0[\"d_str\"][.e12]) =~{#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5} =~Case When 1000 Starts With {@usn5} Starts With 123.654 Then {#usn7} In `` In @usn6 End As `2esn`,0Xa As #usn8,{1000}[{@usn5}..][1.e1..] As `8esn` Order By $@usn6 =~{usn1} =~$@usn5 Ascending,[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Ends With (:_usn4:`4esn`{@usn6:0x0[$123456789..$usn1]})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->(:`1esn`{usn2:#usn8[_usn4],`4esn`:usn1 Is Null}) Ascending,$`5esn` Contains 123456789 Contains $`1esn` Descending Skip usn1 In {usn1} In 0e0 Unwind {usn2}[01] As `8esn`) Merge (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1) Union Create Allshortestpaths(((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5}))),((_usn3 :``)<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})) Union Create `6esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),Shortestpath((({`3esn`:12 Ends With {999} Ends With 's_str'})-[`7esn`:`1esn`|`6esn` *0xabc..]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`}))) Merge Shortestpath(((`` :_usn4:`4esn`)-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))) On Match Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Return Distinct *,123456789 In usn2 As `2esn`"),
    octest_legacy:ct_string("Foreach(`6esn` In {#usn7} Is Null| Create Unique `8esn`=(((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:#usn8:_usn3{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]}))),_usn3=((@usn6 :`8esn`)<-[:_usn3|:@usn5 *0X0123456789ABCDEF..]-(usn2 :`4esn`{usn2:0X7 Ends With {@usn5} Ends With {_usn3},#usn7:1000 Starts With $123456789})<-[:`7esn`|:`2esn` *0xabc..]->(:usn2:_usn4{@usn5}))) Create usn1=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),`2esn`=(`7esn` :_usn4:`4esn`) Union All Optional Match @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))) Using Scan `4esn`:`8esn` Create Unique (`6esn` {`8esn`:0e0 In `7esn` In $`8esn`})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`2esn` :usn2:_usn4{`6esn`:0[9e1..][0x0..]}) Create Unique `7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}),((_usn3 {usn1:{`8esn`} Is Not Null})) Union All Remove (@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null})<-[?:`1esn`|`6esn`{`2esn`:False[{`5esn`}..{`8esn`}]}]-(`2esn` :usn2:_usn4).usn1,[@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|`7esn`[1.e1..#usn8]].`6esn`?,_usn3:`1esn`"),
    octest_legacy:ct_string("Return (@usn6 {usn2:`8esn` Starts With {_usn4} Starts With $#usn8,#usn7:#usn8[{#usn7}][12e12]})-[?:`4esn`{@usn6:True[$7..],_usn3:@usn6[$`2esn`..]}]-(#usn7 :usn1) Is Not Null Is Not Null,$`6esn` Ends With 1000 Ends With False As _usn3,Case When `4esn` Starts With 01234567 Then {`3esn`}[{`8esn`}..$7][0e0..0x0] When {@usn5}[{0}..0X0123456789ABCDEF] Then $`4esn` Contains {7} Contains 999 End[..[`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]]][..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}] Order By {@usn5} In {_usn3} In 0e0 Asc Skip {`6esn`} =~{`4esn`} =~0x0 Limit 0X0123456789ABCDEF[{`5esn`}..] Union Remove [12 Ends With {0} Ends With _usn4].@usn6?,None(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}).`3esn`!"),
    octest_legacy:ct_string("Create `5esn`=Shortestpath((`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})) Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc"),
    octest_legacy:ct_string("Return *,$usn1 Ends With $`3esn` Ends With 0x0 As usn1 Order By .e12 Contains 00 Contains usn2 Asc,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] Asc,Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)] Ascending Skip {`1esn`}[0e0..][True..] Match _usn3=(_usn4 :`5esn`{`8esn`:$@usn6 Contains {@usn6}}) Union All With  *,`1esn` In `2esn` In $@usn6 As `3esn` Skip {999} In {`4esn`} In $`1esn` Where $7 Contains {1000} Contains 0X7"),
    octest_legacy:ct_string("Load Csv With Headers From {`2esn`} =~{@usn6} As `1esn` Fieldterminator 's_str' Match (:`6esn`) Where usn1 Contains 9e1 Contains 0X0123456789ABCDEF"),
    octest_legacy:ct_string("Create @usn6=(`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Create `5esn`=Allshortestpaths((_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Detach Delete Any(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4})[..All(@usn5 In {#usn8} Contains 7 Where {`6esn`}[..$`8esn`])][..Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01 Contains _usn3 Contains .e12|{`3esn`} Starts With 1.e1 Starts With $#usn7)],`6esn` Contains .e12,{#usn8}[0X7][0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Remove Shortestpath(((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)))._usn4!,`2esn`:usn2:_usn4,`8esn`:@usn6 Union Merge `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} On Create Set `5esn`:`8esn` Detach Delete $_usn3[`7esn`..][{usn1}..]"),
    octest_legacy:ct_string("Return Distinct 0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Union All Unwind `3esn` Ends With usn1 As `8esn` Load Csv From 0xabc[False..#usn7][$`1esn`..'s_str'] As usn1  Merge `4esn`=(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *0X0123456789ABCDEF..]->(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`2esn`:@usn5{usn1:1e1[..1e1]}) On Create Set Case {#usn8}[`7esn`..][_usn3..] When 0e0 Is Null Is Null Then $999 Is Not Null Is Not Null Else {`6esn`}[..$12][..0.e0] End.#usn8! ={_usn4} =~`7esn`,None(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where {123456789}[01234567..Null]).#usn7 =True[{1000}][1000] Union All Start usn1=Relationship:#usn8(@usn5='s_str') Where {``} Starts With \"d_str\" Foreach(_usn3 In [usn1[12e12..],9e12 In $_usn3] Is Null Is Null| Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Where $#usn8[..9e1] Create usn2=((@usn6 :#usn7:`3esn`)-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?{@usn6:{@usn5}[...e1][..01]}]-({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})))"),
    octest_legacy:ct_string("Create _usn4=(({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->(_usn3 {@usn6:{123456789}[..010][..#usn8],``:.e1[..12e12][..Count(*)]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})),`6esn`=((`2esn` )) Unwind [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As `8esn` Unwind Extract(`` In {0} Is Not Null Is Not Null Where {usn1}[`6esn`..@usn5][$usn1..0.0]|@usn5 Starts With $_usn4 Starts With 12.e12)[[{usn1}[...e1][..{_usn4}],0xabc[{`7esn`}..][{`8esn`}..],0[9e1..][0x0..]]][`7esn`] As #usn8 Union All Match `4esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})),Allshortestpaths(({`3esn`:`1esn`[$`4esn`..],#usn8:2.12 Ends With usn1 Ends With $`2esn`})) Union All Delete (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)],{_usn4}[{usn1}..][`8esn`..]"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths(((`3esn` :usn1{`7esn`:$12 In {`8esn`}})-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]-(`2esn` :`5esn`{``:`1esn`[``..$``]}))) On Create Set (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})<-[#usn7?{`7esn`:12.0 Is Not Null Is Not Null,`6esn`:.e12[..010][..{0}]}]-({@usn6:0e0 =~{usn2}}).usn1! =$`8esn`[{``}..] On Match Set All(`7esn` In Null =~$`8esn` =~{`4esn`}).`2esn`? =@usn5[Count(*)][07],(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null,#usn7+={#usn7}[..$_usn4][..$`4esn`] Delete `4esn`[$`4esn`],None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`})"),
    octest_legacy:ct_string("Return 123.654[0xabc][1.e1] Order By 0X7 Contains usn2 Contains $`1esn` Descending,{12} Is Not Null Is Not Null Descending Limit 010 Is Null Is Null Union With  [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As usn1,123.654 Starts With [#usn7 In `7esn` In $`1esn` In $999 Where @usn5 Is Null Is Null|@usn6] Starts With {0},$`7esn` Contains `1esn` Contains {usn1} Skip 07[$_usn3..][$``..] Union All Match Allshortestpaths((_usn4 :#usn8:_usn3{`2esn`:$`` =~_usn4 =~_usn4})) Using Scan ``:`1esn` Using Index @usn5:@usn5(`7esn`) Unwind {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As `2esn`"),
    octest_legacy:ct_string("Unwind All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where Count(*) Contains ``) Starts With Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12) Starts With Case $_usn3[123456789][0X7] When `4esn` Ends With $#usn8 Ends With {12} Then usn2 Ends With 0.e0 Else $`6esn` Ends With $`3esn` Ends With 07 End As `6esn` Foreach(`1esn` In {`1esn`} Ends With 2.12 Ends With _usn4| Return Distinct ({usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}})-[`8esn`? *01]->(:`7esn`:#usn8{usn2:`6esn` =~{usn2},`5esn`:{`5esn`}[{_usn3}..][.e0..]})-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]-({usn1:12 Ends With {0} Ends With _usn4}) =~Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End =~(`5esn` {#usn7:{@usn5}[123.654]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}),[{7} In `1esn` In 123456789,9e0 =~.e12,9e12[`6esn`..{12}]] =~12.e12 =~Shortestpath(((@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(:`7esn`:#usn8))),$`4esn`[0xabc..][.e12..] Order By $123456789[#usn7..][0X7..] Asc,{`8esn`} Is Not Null Ascending Limit 9e1[{`1esn`}][{`3esn`}] Match `4esn`=(((`8esn` :`7esn`:#usn8)<-[:`3esn`{`2esn`:010}]->(:@usn5:`7esn`)<-[`5esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null})))) Unwind $12[{``}] As `1esn` Union Create Unique `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})) Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Order By 07[{12}..] Ascending Skip None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Return Distinct None(`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12])[Reduce(`6esn`={_usn3}[..1.0],#usn7 In `7esn` In $`1esn` In $999|$`` =~_usn4 =~_usn4)..][Case {1000} Is Not Null Is Not Null When 0Xa Starts With .e12 Then #usn8[Null] When 1000 Starts With {@usn5} Starts With 123.654 Then .e12[..010][..{0}] Else {#usn8}[`7esn`..][_usn3..] End..] As `2esn` Limit $`5esn` Contains `3esn` Contains {usn2} Union Detach Delete Reduce(`4esn`={999} In Count(*) In `6esn`,_usn4 In $`` =~$1000 =~7|{999} In Count(*) In `6esn`) In Case `5esn` Is Null Is Null When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 When .e1 In {`6esn`} In \"d_str\" Then $0 Starts With {`2esn`} End In Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))"),
    octest_legacy:ct_string("Return Distinct *,(`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})<-[`5esn`]->(usn1 :`3esn`:usn2)[[9e12[`6esn`..{12}]]..][Shortestpath((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}}))..] As usn2,01[..$usn1] As `3esn` Skip [`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|$`7esn` Ends With @usn5 Ends With .e1][Shortestpath((((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))))..Any(`` In {0} Is Not Null Is Not Null Where 0xabc =~@usn6 =~{`2esn`})][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1 =~{_usn3})..Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))] Unwind _usn3 Starts With 0X7 As `5esn` Foreach(`5esn` In {usn1}[`6esn`..@usn5][$usn1..0.0]| Remove None(#usn8 In $`8esn`[{``}..] Where {`1esn`}[`8esn`][{usn2}]).@usn6,[`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]].`7esn`)"),
    octest_legacy:ct_string("Merge (`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}) On Create Set _usn3 =[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn2 Ends With $@usn6 Ends With $_usn3|``[..`2esn`][..@usn5]][{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]}..] Remove `1esn`(Distinct).`2esn`? Merge _usn3=Allshortestpaths((`6esn` :`1esn`)<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}))"),
    octest_legacy:ct_string("Remove Filter(_usn4 In $`` =~$1000 =~7 Where 01[$_usn4..][0..]).`2esn`!,Case When $`3esn` Ends With {_usn3} Ends With 9e1 Then $usn1[{`5esn`}][0Xa] When $1000 Contains $12 Then $7[..{`8esn`}][..{999}] End.`7esn` Load Csv With Headers From $`6esn`[$`1esn`..] As `6esn`  Union Merge usn2=Shortestpath((`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})) On Match Set _usn4 =999[$_usn3..][$``..],Extract(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]|#usn8[\"d_str\"..999]).`8esn`? =12 =~0xabc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $@usn5[..{`8esn`}][..010] As `3esn`  Unwind {`6esn`} Contains 01 Contains {#usn8} As @usn5"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Null =~$`8esn` =~{`4esn`} As ``  Match `6esn`=(((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),Allshortestpaths(((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]})))"),
    octest_legacy:ct_string("Merge `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} On Create Set `5esn`:`8esn` Detach Delete $_usn3[`7esn`..][{usn1}..]"),
    octest_legacy:ct_string("Merge ((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}))) On Match Set `3esn` =[{`6esn`}[07..][{@usn5}..]][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{usn2} Is Not Null Is Not Null]..][$``..] On Create Set @usn6 ={7}[..123456789][..$#usn8],_usn3+={`5esn`}[{_usn3}..False],#usn8 =$_usn4[1.0..@usn6] Create Allshortestpaths(((#usn7 :`8esn`)<-[`5esn`? *12..00]->(usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]}))) Create (({`8esn`:{7} In `1esn` In 123456789}))"),
    octest_legacy:ct_string("Foreach(`6esn` In {_usn4:{123456789} Is Null Is Null}[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{1000} Contains 12.0 Contains @usn5]]| Start `1esn`=Node:@usn5(usn1='s_str')  With  {123456789} Contains `7esn` Contains 010,All(`` In 9e0 Is Not Null Where $@usn6 Ends With Count(*)) Contains Any(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]) Contains [010[123456789],0.0 Ends With {_usn4} Ends With $1000,{123456789}[{12}..$0][0X0123456789ABCDEF..$_usn3]] Order By {999} In `3esn` Descending,{12}[..9e1] Ascending Skip Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) Where $999[0.12][0xabc]) Union Merge _usn3=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3)) On Create Set #usn7 =12.0[{999}..$`5esn`][0xabc..$_usn3],usn2 =Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End =~Case {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] When 123.654 Is Null Then $`7esn`[..True] When 0Xa[_usn4..] Then {7} Contains {#usn8} Contains {7} Else $@usn5[0.12..] End =~Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654]),#usn7 ={`3esn`}[$`4esn`..] Merge _usn3=Shortestpath(((`` :`2esn`:@usn5)-[{`5esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}}]->(usn1 :`8esn`{``:#usn7[0.12..12.e12]})-[`1esn`?:`7esn`|:`2esn`]->(`7esn` :`6esn`)))"),
    octest_legacy:ct_string("Return Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,7[{_usn4}..{usn2}][9e0..0X7] As _usn4 Order By $`4esn`[$999..][{`3esn`}..] Descending,$`6esn` Contains 12 Descending,12e12 Starts With usn2 Desc Skip {``}[$@usn5] Limit $`4esn`[00..$`8esn`][Null..$@usn5]"),
    octest_legacy:ct_string("Load Csv From All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)] As #usn8  Union All Foreach(`6esn` In 0X7[True..{0}][Count(*)..@usn5]| Load Csv From 9e1 Starts With $123456789 Starts With {#usn7} As #usn7 Fieldterminator 's_str')"),
    octest_legacy:ct_string("Foreach(@usn6 In 0Xa[..`6esn`]| Optional Match (`5esn` {`5esn`:$usn1[{`5esn`}][0Xa]})-[`8esn`:``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}}]->(`5esn` {usn2:\"d_str\" Ends With `7esn` Ends With 12.0}) Using Scan `5esn`:@usn5) Union Create Allshortestpaths((:#usn8:_usn3)<-[?:`2esn`|_usn3]-(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})),Shortestpath((usn1 {@usn6:$usn1[$0..Count(*)][@usn6..$12],`8esn`:0e0[$@usn5..$usn1][usn2..9e1]})-[:`3esn`{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`1esn`?:@usn6*]-(`4esn` :`3esn`:usn2))"),
    octest_legacy:ct_string("Delete 9e12 =~$usn2 =~9e1,{``} =~.e12 =~{0},All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1]) Foreach(#usn8 In 9e1 In 0.0 In {999}| With  Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}),[{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Order By $`3esn` In $#usn8 In {_usn3} Descending,Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Descending,[{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]] Descending Limit (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)]) With  *,`7esn`[..#usn7] Order By `2esn` Starts With `` Starts With .e12 Asc,`7esn`[..#usn7] Desc Limit {``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})] Union All Optional Match (({`3esn`:0.12 In 123456789})<-[`7esn`{``:{`1esn`} In $999 In {#usn8},`7esn`:{12} Contains $`4esn` Contains usn2}]->(`3esn` :_usn4:`4esn`)<-[:@usn6*]->(:usn2:_usn4{_usn4:$`1esn`[{1000}..{999}]})) Remove Case 0.12[.e12..0][1.0..{_usn4}] When $`7esn` Ends With @usn5 Ends With .e1 Then #usn8 Ends With $usn1 End.usn1 Start @usn5=Node:`5esn`(`6esn`='s_str') "),
    octest_legacy:ct_string("Merge (`3esn` :`6esn`)-[`8esn` *010..{`3esn`:False Starts With 's_str' Starts With $`6esn`,usn1:Null[#usn7][07]}]->(@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1}) On Match Set (@usn6 :_usn3:`5esn`)-[usn1:`8esn`|:#usn8]-(`8esn` :`8esn`{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}).``? =0X0123456789ABCDEF[{`4esn`}][$_usn4],#usn8 ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])],_usn3+={7}[..{@usn5}] On Match Set Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $usn1[$0..Count(*)][@usn6..$12]).`8esn` ={#usn7} In `` In @usn6,#usn8 ={`1esn`}[..\"d_str\"],`2esn`+=Single(`` In {0} Is Not Null Is Not Null Where $@usn6 Contains {@usn6}) Is Null Is Null With Distinct *,Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) Contains None(_usn4 In $`` =~$1000 =~7 Where $`5esn`[$`4esn`][$_usn4]) Contains {`1esn`:{_usn4} =~`7esn`} As `6esn` Order By $`8esn`[..$usn2][..12] Asc Limit Filter(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where Count(*)[.e12..])[Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End] Where 12.e12 Optional Match Shortestpath((:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})-[ *..0X7]->(`7esn` )) Using Index #usn8:usn1(`2esn`) Using Scan `1esn`:`7esn` Where 07[..0Xa] Union Match @usn5=Allshortestpaths((usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})-[? *..1000{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`1esn` {#usn8:9e12 Starts With $_usn3})<-[``?:`1esn`|`6esn` *01234567..{`6esn`:{`3esn`}[$_usn3...e0],`7esn`:{`6esn`} Is Not Null Is Not Null}]-(_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Where `1esn`[``..$``] Match `6esn`=(((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))),Allshortestpaths(((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})<-[ *0X0123456789ABCDEF..{@usn6:{`8esn`}[@usn5][0]}]->(`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`3esn`:_usn3|:@usn5 *010..{`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12}]->(:`8esn`{`6esn`:01[$_usn4..][0..]}))) Union Match Allshortestpaths(((`7esn` :@usn6{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000}))),@usn5=Shortestpath(((:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})-[? *0Xa..{#usn8:07[{12}..]}]-({_usn3:999[0.0..$`6esn`]}))) Using Join On #usn7 Detach Delete $@usn5[0.12..] Create @usn6=(({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})),usn1=((`2esn` {usn1:@usn5 Contains 7 Contains 999}))"),
    octest_legacy:ct_string("Match `3esn`=((:@usn5:`7esn`{`7esn`})) Unwind [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null As `2esn` Return (#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4,{`8esn`} Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc Limit Reduce(`1esn`=usn2 Ends With 0.e0,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|_usn3 Starts With 0X7) Is Not Null Is Not Null Union Return Distinct $`7esn` In `6esn` In 01234567,Reduce(#usn7=#usn7[$@usn6][$`8esn`],`` In {0} Is Not Null Is Not Null|1e1[{`6esn`}..{1000}][07..123456789])[{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789}..] As `6esn` Order By 00 Contains 9e0 Contains {7} Descending Load Csv With Headers From $`2esn` Ends With {1000} Ends With `7esn` As `7esn`  With Distinct *,{#usn7} Contains {`8esn`} Contains usn2 As `3esn`,(usn1 :`3esn`:usn2)-[`3esn`?]-(usn2 :`7esn`:#usn8{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}) Starts With Case `1esn`[True..1000][`4esn`..{`3esn`}] When {`1esn`} Is Null Then `3esn` In .e1 In 0X0123456789ABCDEF When $`8esn` Ends With {`5esn`} Ends With $`4esn` Then {_usn4} Ends With .e1 Ends With 0x0 Else 0X0123456789ABCDEF[...e12][..0.12] End As `8esn` Order By [$`5esn`[.e0..][0.0..],$usn1[$0..Count(*)][@usn6..$12],{`6esn`}[False..$`3esn`]] Is Null Is Null Asc Limit [$_usn4 Contains {1000},{`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0],$`4esn` In $@usn5][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..Reduce(#usn7={0} Ends With $@usn5 Ends With 010,`1esn` In $`7esn` Contains `1esn` Contains {usn1}|{999} Is Null Is Null)][{@usn5}..[`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12}|`2esn` Ends With $`6esn` Ends With `2esn`]] Where $`` Ends With 9e0"),
    octest_legacy:ct_string("Merge ((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})) On Match Set _usn4+={usn1} Is Null,`7esn` =01 Contains _usn3 Contains .e12 On Create Set @usn5 =$`1esn` Ends With $`7esn` Ends With `2esn` Start @usn6=Node:@usn6(@usn5={usn2}) ,_usn4=Node( {1000}) Return $`7esn` In `6esn` In 01234567,Reduce(#usn7=#usn7[$@usn6][$`8esn`],`` In {0} Is Not Null Is Not Null|1e1[{`6esn`}..{1000}][07..123456789])[{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789}..] As `6esn` Order By `7esn` Contains 01234567 Contains `1esn` Desc,{999} In {`4esn`} In $`1esn` Desc,usn2 Ends With usn2 Ends With 1.e1 Descending Skip {``} Ends With 0Xa Ends With $999 Union Delete 0[9e1..][0x0..]"),
    octest_legacy:ct_string("Load Csv With Headers From Filter(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}) Ends With Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 When $1000[`6esn`..][Count(*)..] Then 123456789 Starts With 0e0 Else {999} In Count(*) In `6esn` End Ends With {`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}} As ``  Delete 0X7 Is Null Unwind Allshortestpaths(((@usn6 :_usn4:`4esn`{`1esn`:@usn5 Is Null Is Null,`7esn`:07 =~usn2})<-[`3esn`? *0Xa..{`4esn`:$@usn6[`4esn`..][0X7..]}]->(`5esn` :@usn5:`7esn`{`4esn`:0x0 =~$usn2})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12})))[#usn8()..Shortestpath((({usn2:$`7esn` Ends With @usn5 Ends With .e1})-[`2esn`? *999]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})))] As `3esn`"),
    octest_legacy:ct_string("Merge `7esn`=(((`6esn` :``{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[ *01234567..]-({usn1:12 Ends With {0} Ends With _usn4})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(_usn3 :``))) On Create Set `6esn` =Reduce(`6esn`=$999[0.12][0xabc],`5esn` In usn2 Ends With 0.e0|{_usn4} Starts With 01234567 Starts With $#usn7) =~`6esn`(`1esn`[$`4esn`..]) =~`3esn`(0.0,$usn1 =~{_usn3}),[01 Is Null Is Null,$`8esn`[{``}..]]._usn3! =[$@usn6 Contains {@usn6},False[{`5esn`}..{`8esn`}]][Shortestpath((#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1))..][Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {12} Ends With $`6esn` Ends With {#usn7})..],@usn6+=`8esn` Contains 123.654 Contains {`7esn`} On Create Set `8esn` =1000 Contains {999} Contains 9e12,[_usn4 In $`` =~$1000 =~7 Where 12.0[12..9e1]|07[{12}..]].`2esn`! ={`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Foreach(`7esn` In `1esn` Starts With $`7esn` Starts With `8esn`| Return *,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..],`8esn` Contains 123.654 Contains {`7esn`} As usn2 Limit $`8esn` Is Not Null Is Not Null Delete {`6esn`}[`6esn`..{`5esn`}],{#usn8}[True][{`7esn`}],Reduce(`2esn`=0Xa[..07][..`2esn`],#usn7 In 0e0 Is Not Null Is Not Null|123456789 Starts With 0e0) Is Not Null Is Not Null) Union Optional Match _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) Using Scan ``:`1esn` Using Scan `8esn`:usn2 Load Csv With Headers From 0e0[..$123456789] As #usn8  Load Csv From .e12[$`2esn`..][{`3esn`}..] As `2esn` "),
    octest_legacy:ct_string("Detach Delete 7 =~$`6esn` Create `7esn`=Shortestpath((`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})<-[:`3esn`]-(`5esn` :`1esn`)),`6esn`=((:`2esn`:@usn5{usn1:1e1[..1e1]})) Foreach(_usn3 In `3esn`(Distinct $`8esn`[..$usn2][..12]) Ends With None(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) Ends With Extract(`` In {0} Is Not Null Is Not Null Where 123.654[..$`7esn`][...e0]|010 Is Null Is Null)| With Distinct False Ends With #usn7 Ends With 1.e1 As _usn4,123.654 =~010 =~`6esn`,{@usn5}[$usn2..] Order By 0.12 =~True =~`3esn` Desc Skip 12.0[12..9e1] Where 0 Is Null Is Null Unwind $_usn4 Contains 0 Contains False As _usn3) Union All Foreach(`6esn` In 0x0 Contains 0x0 Contains {`1esn`}| Remove `3esn`:`1esn`,Shortestpath(((`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`` *..7]->(:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8))).usn1?) Union Create `5esn`=Shortestpath((`` )-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(:`8esn`{`6esn`:01[$_usn4..][0..]})) Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc"),
    octest_legacy:ct_string("Remove Reduce(`4esn`=9e0[..usn2][..0],`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|{``}[$@usn5]).`5esn`!,`7esn`(Distinct {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]).#usn7? Load Csv With Headers From 7[0e0..][$`1esn`..] As `8esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 9e12 Is Null Is Null As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge (#usn8 :_usn4:`4esn`)-[?:`8esn`|:#usn8 *0xabc..]->({#usn8:{@usn5} In `6esn` In .e0})-[@usn5{`6esn`:1e1 Contains $`` Contains 12.0}]-(@usn6 $usn1) Create Unique ``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))),`6esn`=(((@usn6 :#usn7:`3esn`{@usn5:00[``..usn2][01..$999],`4esn`:{`3esn`}[$_usn3...e0]})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`` :#usn8:_usn3{#usn8:True[{1000}][1000],`6esn`:$`7esn` Is Null Is Null}))) Foreach(_usn3 In @usn6| Optional Match Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Using Index _usn4:_usn3(`4esn`) Where 0X7 =~{_usn3} =~0x0) Union Start `6esn`=Node:_usn3(usn2={12}) ,`8esn`=Node:@usn5({999})Where 1.0[..`3esn`][...e0] Union All With  $`` Ends With usn1 As `3esn`,count(Distinct `5esn` Is Not Null Is Not Null,{_usn3}[..1.0])[[_usn4 In $`` =~$1000 =~7 Where 1.0 =~$_usn4]..None(`5esn` In usn2 Ends With 0.e0 Where `1esn` Is Null)][[#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]|{`8esn`} =~usn1 =~12.e12]..All(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null)],Null Ends With {`5esn`} As `4esn` Order By Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}))[[01[$_usn4..][0..],9e12[`6esn`..{12}],9e12 =~$usn2 =~9e1]..[\"d_str\" Starts With 1.0 Starts With 2.12,$7 In 0.0,True[$7..]]] Asc,1.0 Is Not Null Is Not Null Desc Skip [#usn8 In $`8esn`[{``}..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|12 In $_usn4 In $123456789] In Filter(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..]) Limit None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 9e1[..`4esn`]) Contains {usn2:12.0 Contains {`3esn`},`1esn`:1000[01234567]} Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where 0Xa|$0 Starts With {`2esn`}) Where 07[{12}..] With Distinct 2.12[..01234567][..{usn2}],#usn8[..0Xa],010[123456789] Limit 12e12 Starts With 00 Starts With {0} Where {`3esn`}[{`8esn`}..$7][0e0..0x0] Unwind $usn2 Ends With `5esn` Ends With 0Xa As #usn8"),
    octest_legacy:ct_string("Unwind 12[0X7..] As #usn8 With  Shortestpath(((:#usn8:_usn3{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010}))) Contains [@usn5 In {#usn8} Contains 7 Where 1000 =~{`1esn`}|$`8esn`[..$usn2][..12]],Case When `6esn` Contains 01234567 Contains $12 Then {0}[{`4esn`}..] When .e1 In {`6esn`} In \"d_str\" Then 12e12['s_str'..`8esn`][usn2..$_usn4] Else $_usn4 =~$12 =~`3esn` End Is Not Null Is Not Null,{_usn4} =~`7esn` As @usn5 Order By {`8esn`:@usn6[2.12..][`5esn`..]}[Case 1.e1[{``}] When {`1esn`} =~{usn2} =~$`` Then $#usn7 In `4esn` In 1.0 End][usn2(Distinct 12[0X7..])] Asc,`3esn`[{``}..$#usn8] Descending,Reduce(`4esn`=$999[...e1][..{`3esn`}],_usn4 In $`` =~$1000 =~7|False Starts With #usn7 Starts With 12e12) In Any(#usn7 In `7esn` In $`1esn` In $999 Where False Is Null Is Null) Ascending Skip $@usn6 Contains $`6esn` Contains usn1"),
    octest_legacy:ct_string("Return 1000[..$12][..$usn2] As #usn8,{``} Starts With \"d_str\" Order By 0e0 =~{usn2} Ascending,``[{123456789}..True] Descending,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)] Descending Skip @usn5 Is Null Limit $`2esn` Ends With 9e0 Ends With True Return Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]),$7 Is Not Null Is Not Null Skip [`5esn` In 9e1 In 0.0 In {999} Where {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0]] Ends With Reduce(`3esn`=`8esn`[`1esn`..{7}][{_usn4}..$_usn4],`1esn` In $`7esn` Contains `1esn` Contains {usn1}|`4esn` Starts With 01234567) Ends With Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})) Create Shortestpath((((usn1 {usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[? *0X0123456789ABCDEF..{`2esn`:123.654 Is Null}]->(`8esn` :`5esn`)<-[@usn5? *0X0123456789ABCDEF..{`3esn`:`1esn`[True..1000][`4esn`..{`3esn`}]}]->({`8esn`:$@usn5[0.12..]})))),`5esn`=((#usn7 :usn1)-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->(_usn4 {usn2:010[00],``:999[0.0..$`6esn`]})<-[?:`8esn`|:#usn8 *0xabc..]-(`1esn` {`5esn`:12 In {#usn7}})) Union With  $`7esn` In `6esn` In 01234567,Reduce(#usn7=#usn7[$@usn6][$`8esn`],`` In {0} Is Not Null Is Not Null|1e1[{`6esn`}..{1000}][07..123456789])[{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789}..] As `6esn` Order By 00 Contains 9e0 Contains {7} Descending Where 010 Is Not Null Is Not Null Union Return exists() Is Null As @usn6 Order By $`4esn`[0xabc..][.e12..] Descending,{_usn4}[1000][{123456789}] Descending,[`7esn` In Null =~$`8esn` =~{`4esn`} Where 0.e0 =~0.e0 =~12.e12|`6esn` In _usn4 In {_usn4}] =~(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[_usn4 *..00]-(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}) =~[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Asc Skip `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Limit {`6esn`} Contains {`1esn`} Contains Null"),
    octest_legacy:ct_string("Optional Match `1esn`=Allshortestpaths((({`2esn`:9e1[{`5esn`}]}))),Allshortestpaths(((#usn8 :`4esn`))) Using Join On `6esn`,`6esn`"),
    octest_legacy:ct_string("Delete `6esn` Contains .e12,{@usn6} In $`5esn` In {7},0e0[Case {@usn5}[9e1..][1e1..] When {@usn5}[9e1..][1e1..] Then $12 Starts With {#usn8} Starts With {999} When 1.e1[{``}] Then $0 In 999 Else $@usn6 Is Not Null End..Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null}))][Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..])..All(`` In {0} Is Not Null Is Not Null Where 12.e12)] Union All Optional Match #usn8=Allshortestpaths((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})) Unwind {`5esn`} Is Null As #usn8"),
    octest_legacy:ct_string("Merge `7esn`=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[`3esn`?:@usn6*]-(_usn3 {_usn3:$1000[$`7esn`..1e1],`1esn`:$#usn7[..0e0][..$12]}) On Create Set `6esn` =(`2esn` {`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[_usn4 *..00]->(#usn7 {usn1:7[0e0..][$`1esn`..]}),(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})<-[@usn6?{@usn5:07[{12}..]}]-({`6esn`:{12} Starts With 00 Starts With 12}).`4esn`? =[{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa][(:usn1{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *01234567..]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})][Shortestpath((((@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[`6esn`?:`2esn`|_usn3 *0xabc..{``:9e1[$`5esn`..0xabc]}]-(usn2 :`5esn`)-[usn1?{`4esn`:$`8esn`[{usn1}..]}]-(:`2esn`:@usn5{`6esn`:{1000}[{@usn5}..][1.e1..],``:$#usn7 In `4esn` In 1.0}))))] Create Unique _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})))"),
    octest_legacy:ct_string("Merge _usn3=(({`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})) On Create Set _usn3+={`3esn`} Contains 12.0 Contains {`8esn`},`6esn` =$@usn5 Contains 12e12 Contains {`6esn`},Extract(usn2 In 1000 Starts With $123456789 Where {`5esn`} In {#usn7} In $7|12 Ends With {0} Ends With _usn4).`6esn`! =123.654[..$`7esn`][...e0] On Create Set `2esn` =$`2esn` Ends With {1000} Ends With `7esn`,usn2+=12[1e1],_usn3+=12e12[{#usn7}] With Distinct {@usn6} Contains {`1esn`},{usn2} Is Not Null Is Not Null,$#usn8[..#usn8][..{`5esn`}] As `2esn` Order By $`8esn`[{usn1}..] Asc Union All With Distinct Null =~$`8esn` =~{`4esn`} As #usn8 Skip Any(usn2 In 1000 Starts With $123456789 Where 0e0[..$`2esn`][..Count(*)])[{#usn8:0Xa Contains 0X7 Contains {``}}][(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})] Limit All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})] Optional Match #usn8=((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)) Where 0Xa[..`6esn`] Merge `8esn`=Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})) Union All Create Unique usn1=Allshortestpaths(((`1esn` :`5esn`)-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null})<-[`5esn`]->(`5esn` :`8esn`{#usn7:False Ends With #usn7 Ends With 1.e1}))),`4esn`=(`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[usn2 *..7{`6esn`:{usn2} Contains 0e0 Contains 1.e1}]->(_usn4 :`5esn`{`5esn`:9e12 Starts With $_usn3,@usn5:{_usn4}[$`3esn`][$`3esn`]}) Unwind `7esn`[..#usn7] As #usn7 Start `1esn`=Relationship:usn2(\"d_str\") Where $7 Starts With $12 Starts With 12e12"),
    octest_legacy:ct_string("Start usn1=Rel:`4esn`({``}) ,`6esn`=Node:`5esn`({`7esn`})"),
    octest_legacy:ct_string("Return Distinct Filter(#usn8 In $`8esn`[{``}..] Where 1e1 In #usn8)[..`1esn`(usn2[999..][{`1esn`}..])] As `3esn`,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As ``,[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Starts With Case {`7esn`} Starts With {0} Starts With {1000} When {7} Contains {#usn8} Contains {7} Then 0.12 Ends With #usn8 Ends With $1000 When #usn7 =~#usn8 =~{`6esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] End Skip _usn3 Contains $@usn5 Contains 01 Limit {usn2} In 010 Union Optional Match ((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),((:`2esn`:@usn5{usn1:1e1[..1e1]})) Using Index `3esn`:#usn7(usn2) Where {`8esn`} =~usn1 =~12.e12"),
    octest_legacy:ct_string("Detach Delete {#usn8:`7esn`[1.e1..#usn8],`3esn`:0xabc In $`5esn` In @usn5}[usn2(Distinct 1.e1[$_usn4..999])..[`5esn` In 9e1 In 0.0 In {999}|#usn8[_usn4]]][[1e1 In False,_usn3[..1000]]..Single(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $_usn3 Is Not Null)] Return *,[`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)],False Starts With {``} Starts With 07 Order By 07[{12}..] Ascending Skip None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..]) Union All Foreach(`6esn` In 2.12 Ends With usn1 Ends With $`2esn`| With Distinct *,{@usn5}[$usn2..],Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) In Single(`` In 9e0 Is Not Null Where {`1esn`} Ends With 2.12 Ends With _usn4) Order By Reduce(#usn8=`5esn`[12.0..],`5esn` In 9e1 In 0.0 In {999}|$@usn5 Contains 12e12 Contains {`6esn`})[..Extract(_usn4 In $`` =~$1000 =~7 Where .e12[..010][..{0}])][..Reduce(#usn8=$`` =~$1000 =~7,#usn7 In 0e0 Is Not Null Is Not Null|`6esn` In _usn4 In {_usn4})] Ascending,$`8esn`[{usn1}..] Asc,{`6esn`}[..$12][..0.e0] Asc Skip {7} Contains {#usn8} Contains {7} Limit 9e12 =~$usn2 =~9e1 Load Csv With Headers From {`1esn`} Is Not Null Is Not Null As @usn5 ) Union All Match usn2=((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})<-[`1esn`?:`2esn`|_usn3{``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}]-(:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) Using Index `7esn`:#usn8(`5esn`) Where {``} Starts With 12.e12 Starts With .e12"),
    octest_legacy:ct_string("With Distinct *,Single(`` In 9e0 Is Not Null Where {`8esn`} Is Not Null) In {@usn6:12 Ends With 0X7 Ends With 12.0} In All(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12[0X7..]) Skip All(#usn7 In `7esn` In $`1esn` In $999 Where {7}[..{@usn5}]) =~Any(#usn8 In $`8esn`[{``}..] Where $1000[$`7esn`..1e1]) Where $usn1 Starts With {`5esn`} Unwind $#usn8[..01] As `2esn` Union All Remove exists(1000 =~{`1esn`}).usn2,All(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2])._usn4!"),
    octest_legacy:ct_string("Merge ``=(`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}) On Match Set #usn8+=[010[123456789],$`4esn` In $@usn5,12e12[12.0][{usn2}]] =~Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]})) =~Case {`1esn`} In $999 In {#usn8} When `7esn`[$`6esn`][$`8esn`] Then $`8esn`[...e1] When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End,`3esn` =$123456789 =~usn1 =~01,`5esn` =Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`) Contains All(#usn7 In 0e0 Is Not Null Is Not Null Where {0} Ends With $@usn5 Ends With 010) Contains {#usn8:$`` Contains 123.654 Contains $#usn7,#usn7:$`8esn` Is Not Null Is Not Null} On Create Set `8esn`+=`1esn` Is Not Null,``:`4esn` Start `3esn`=Relationship:`6esn`({@usn6}) ,`7esn`=Relationship:#usn8(@usn5='s_str') Union Optional Match ((:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})-[`1esn`?:@usn5|:`1esn` *010..]-({`5esn`:{@usn5}[...e1][..01]})) Where $_usn4 =~$12 =~`3esn` Create #usn8=(((:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`})<-[:`7esn`|:`2esn`{`5esn`:{`6esn`}[07..][{@usn5}..],#usn7:{#usn7}[{12}..usn1]}]->(`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]}))),(usn2 :usn2:_usn4{@usn6}) Return Distinct *,{usn2} =~{1000},`7esn` Contains 01234567 Contains `1esn` Order By 0Xa[..`6esn`] Descending,0X7 Asc Limit 010[``..123456789][@usn6..{12}]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`1esn`}[`8esn`][{usn2}] As `8esn`  Create Unique usn1=((`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}})),``=Allshortestpaths((({`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}})<-[usn2?{#usn7:{0} Is Not Null Is Not Null,`7esn`:1000 Starts With {@usn5} Starts With 123.654}]-(@usn5 :usn1)-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`}))) Create Unique @usn6=((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})),((:_usn3:`5esn`{usn2:_usn3 Starts With 0X7,@usn5:01 Starts With 12e12})-[`4esn`? *0{`1esn`}]-(`4esn` $`6esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0}))"),
    octest_legacy:ct_string("Remove All(@usn5 In {#usn8} Contains 7 Where $_usn3[123456789][0X7]).@usn5,Reduce(`5esn`=usn2[`3esn`],`7esn` In Null =~$`8esn` =~{`4esn`}|{`1esn`} Starts With usn2).`8esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {``:.e1[..12e12][..Count(*)],_usn4:{7} =~$usn1 =~{_usn4}}[..Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})][..Case When `4esn`[$`4esn`] Then 1.e1 Starts With {`3esn`} Starts With #usn8 Else $`4esn` Contains {7} Contains 999 End] As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct Null =~$`8esn` =~{`4esn`} As #usn8 Order By {`1esn`} In `` In {12} Desc,{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] Asc Limit _usn4[01234567.._usn4][False..12] Where 0xabc Is Null Union Unwind {`2esn`} =~{@usn6} As @usn5"),
    octest_legacy:ct_string("Return Distinct {``:$1000[$`7esn`..1e1],``:#usn8[Null]} =~Allshortestpaths(({_usn3:{#usn8}[`7esn`..][_usn3..],`2esn`:123.654[..$`7esn`][...e0]})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})<-[usn1?:`8esn`|:#usn8 *0X0123456789ABCDEF..]->({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) As #usn8,`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF Create Unique ((`6esn` {`2esn`:usn2 Ends With 0.e0,#usn7:{`3esn`}[$_usn3...e0]})<-[#usn8?:_usn4]->(`8esn` :_usn3:`5esn`{`1esn`:`2esn` Starts With $0 Starts With 12.0})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)) Union Load Csv From (`4esn` :``{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})..None(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0})] As @usn6  Union All Create Unique `7esn`=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})) Delete {usn1:{12} Contains $`4esn` Contains usn2,``:@usn6[$`2esn`..]} =~All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)"),
    octest_legacy:ct_string("Create Allshortestpaths((((`8esn` {usn2:$_usn3[..@usn6][..{999}],_usn3:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]->(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[`8esn` *0x0{`4esn`:`2esn` Ends With {#usn8},#usn7:#usn7[0.12..12.e12]}]->(:@usn5:`7esn`))))"),
    octest_legacy:ct_string("Remove Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End.`5esn`!,(#usn8 :`6esn`)<-[`` *0x0{`3esn`:Count(*)[.e12..],usn2:010 Ends With `8esn` Ends With $_usn4}]-(@usn5 )<-[`1esn`? *0x0{#usn8:$`5esn`[$#usn7]}]-(`` :`4esn`).`6esn`,{`5esn`:01[..$usn1]}._usn4! Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] Union Load Csv With Headers From 's_str' Is Not Null Is Not Null As `8esn`  Start `4esn`=Relationship:``({`5esn`}) ,`6esn`=Rel:@usn6(`5esn`={1000})Where 07[..0Xa]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From [12 Starts With $_usn4 Starts With $`6esn`][..Shortestpath((#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null}))][..{@usn6:`2esn` Starts With `` Starts With .e12}] As `3esn` Fieldterminator 's_str' Merge _usn3=((usn2 :`2esn`:@usn5{`6esn`:1.0 Is Not Null Is Not Null})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})) On Create Set All(`` In {0} Is Not Null Is Not Null Where 01234567[`1esn`]).#usn7? =9e1[$@usn5..],`2esn` ={@usn6} On Create Set Extract(`5esn` In 9e1 In 0.0 In {999} Where $``[$@usn6..usn1][usn1..7]|{`8esn`} =~usn1 =~12.e12).`5esn`! =None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..])"),
    octest_legacy:ct_string("Merge `8esn`=((_usn4 :usn1)-[`5esn`?:`3esn`{`5esn`:$123456789 Is Null Is Null,``:`7esn`[$`6esn`][$`8esn`]}]-(_usn3 :#usn7:`3esn`)<-[?{usn2:Count(*) Starts With $7}]-(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})) Return Distinct Allshortestpaths(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn3 :`8esn`)) Starts With {``:9e1[$`5esn`..0xabc]} Starts With 123.654 Order By 9e12 Starts With $_usn3 Asc Limit {#usn7} In {`6esn`} Optional Match `7esn`=(#usn8 {usn2:`8esn` Contains 123.654 Contains {`7esn`},`5esn`:9e0 Is Not Null})-[{`3esn`:#usn7[`4esn`..$`8esn`],`2esn`:$7[..{`8esn`}][..{999}]}]->(#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5}),_usn3=((usn2 :`2esn`:@usn5{`6esn`:1.0 Is Not Null Is Not Null})-[?:@usn5|:`1esn` *..7{_usn4:{7} In `1esn` In 123456789}]-(:`8esn`{0})) Union Create Unique usn2=Shortestpath((`8esn` :@usn6{`8esn`:$#usn7 In `4esn` In 1.0})-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(`2esn` :usn2:_usn4)) Match `3esn`=Shortestpath(($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}})),Allshortestpaths((({`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]}))) Where $``[..999][..{`1esn`}] Unwind {_usn4:{123456789} Is Null Is Null}[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{1000} Contains 12.0 Contains @usn5]] As `7esn` Union Return {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1 Order By None(`` In {0} Is Not Null Is Not Null Where #usn8 Ends With $usn1)[[@usn5 In {#usn8} Contains 7 Where `6esn` In _usn4 In {_usn4}]][Allshortestpaths(({`6esn`:{12} Starts With 00 Starts With 12})-[`2esn`?:`2esn`|_usn3 *999]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1}))] Ascending,0X7 Contains usn2 Contains $`1esn` Descending,(`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Asc"),
    octest_legacy:ct_string("Start usn2=Relationship:`8esn`({`5esn`}) ,`2esn`=Node:_usn3(`5esn`={_usn4})"),
    octest_legacy:ct_string("Foreach(`1esn` In 2.12 Ends With {@usn5} Ends With `2esn`| Load Csv With Headers From `4esn`(Distinct {`1esn`} Starts With usn2) Is Not Null Is Not Null As usn1  Load Csv With Headers From [{0} Starts With {usn1},`4esn` Ends With $#usn8 Ends With {12},`4esn` Ends With $#usn8 Ends With {12}] In Allshortestpaths(((`3esn` :usn1)-[`2esn`?{`3esn`:12 Ends With _usn4}]->(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[?$`7esn`]->(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) As usn2 )"),
    octest_legacy:ct_string("Merge _usn3=(`7esn` :_usn4:`4esn`{`3esn`:$`4esn` Starts With #usn8 Starts With 2.12})-[ *0X0123456789ABCDEF..]->(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[{@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]}]->(:`2esn`:@usn5{usn1:1e1[..1e1]}) Foreach(#usn7 In All(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where Null Contains \"d_str\" Contains {@usn6})[All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000])..][[`7esn` In Null =~$`8esn` =~{`4esn`} Where ``[``]|{``}[$@usn5]]..]| Remove Shortestpath(((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)))._usn4!,`2esn`:usn2:_usn4,`8esn`:@usn6) Union All Remove {usn2:`2esn` Starts With `` Starts With .e12,`3esn`:{`1esn`} Contains {`5esn`} Contains 0e0}.`7esn`?,Extract(`5esn` In usn2 Ends With 0.e0 Where `5esn` Is Null Is Null).`5esn`?,Case {#usn7}[..12e12][..{1000}] When {`1esn`}[$_usn4..\"d_str\"][{0}..$usn2] Then 9e12 =~$usn2 =~9e1 Else $`5esn` =~`7esn` =~usn2 End.`5esn`! Create _usn3=(:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) Remove Single(#usn7 In `7esn` In $`1esn` In $999 Where True Ends With Count(*) Ends With 1.0).`6esn`?,Case When $@usn6 Is Null Is Null Then `6esn`[$123456789..0xabc][``..$`4esn`] When $7 In 00 Then $`` Ends With 9e0 Else {`8esn`} End.`6esn`,Single(`5esn` In usn2 Ends With 0.e0 Where {999} Is Null Is Null)._usn4 Union Match (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}),@usn6=Shortestpath(((:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]->(:`6esn`{12}))) Using Index `6esn`:usn1(_usn3) Using Index `8esn`:usn1(_usn4)"),
    octest_legacy:ct_string("Foreach(usn2 In {_usn4}[0X0123456789ABCDEF][{123456789}]| Create (`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})<-[`6esn`? *..1000{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True}]->(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[?{usn2:{`1esn`} Is Null,`4esn`:{@usn6}[#usn8..][999..]}]->(`8esn` :`5esn`{@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]}),``=Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0})) With  $0 In 999,0.0[$`1esn`..$`5esn`][usn2..$``] As #usn8,Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {@usn5}[{0}..0X0123456789ABCDEF])[Allshortestpaths(({`6esn`:True Ends With Count(*) Ends With 1.0}))..] As _usn4 Skip [usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}] Starts With [9e12[_usn4..1.e1][{`3esn`}...e1]] Starts With [`` In `1esn` In `2esn` In $@usn6 Where True Ends With {`7esn`} Ends With @usn5|010[123456789]] Limit {`5esn`:12e12[12..`8esn`][0.e0..9e1],`4esn`:{_usn4} Starts With 01234567 Starts With $#usn7} Contains None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where 1000 Starts With {@usn5} Starts With 123.654) Contains Allshortestpaths((:`3esn`:usn2{``:$`` Contains 123.654 Contains $#usn7,@usn6:$12 In {`8esn`}})) Where $12[$`3esn`][9e12]) Load Csv With Headers From {`3esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`],usn2:`1esn` Starts With $`7esn` Starts With `8esn`}[[#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where 010[123456789]|Null Contains \"d_str\" Contains {@usn6}]..[{`4esn`}[..0Xa]]] As _usn3 "),
    octest_legacy:ct_string("Foreach(`5esn` In 01[$_usn4..][0..]| Delete 0Xa,010[00] Start usn2=Relationship:_usn3({@usn5}) ,`6esn`=Rel:`2esn`(\"d_str\")Where $`2esn` Starts With 0xabc Starts With 1000) Foreach(`6esn` In 0X7[True..{0}][Count(*)..@usn5]| Load Csv From 9e1 Starts With $123456789 Starts With {#usn7} As #usn7 Fieldterminator 's_str') Union Create Unique (:usn2:_usn4{_usn4:`7esn`[{`7esn`}..$1000]})-[_usn3?:`4esn` *12..00]-(usn2 :`3esn`:usn2)<-[`7esn`:`7esn`|:`2esn` *12..00]-(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}),`2esn`=(($#usn8)) Union Remove [{`7esn`} Starts With {0} Starts With {1000},0X0123456789ABCDEF =~123.654 =~{_usn4},usn2[999..][{`1esn`}..]].`3esn`?,Case {`5esn`} Starts With {12} Starts With 07 When 12e12 Starts With $`7esn` Then {`6esn`}[{@usn6}..{_usn3}][`6esn`..0.0] Else $#usn8[@usn5..9e0][2.12...e1] End.#usn7? Match ((`5esn` {`3esn`:$`8esn`[...e1],`5esn`:$`7esn`[..True]})<-[`1esn`?:`7esn`|:`2esn`]-(:`4esn`{`3esn`:True[$7..]})) Where {`1esn`} Contains {`5esn`} Contains 0e0 Create Unique `3esn`=((`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}})<-[`7esn`?:`1esn`|`6esn`{`6esn`:{12} Starts With 00 Starts With 12}]->(`8esn` :`1esn`{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]}))"),
    octest_legacy:ct_string("Load Csv With Headers From `8esn`[12.0..$`6esn`][0.0..$@usn5] As `7esn`  Optional Match `1esn`=(((@usn6 :usn1{`8esn`:False Ends With #usn7 Ends With 1.e1})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[#usn8?:`3esn`{@usn5:$`3esn`[..{`4esn`}][..12.e12],_usn4:07[..0Xa]}]-(usn2 $_usn4))) Where {123456789}[01234567..Null] Load Csv From Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)[Shortestpath((((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))))] As usn1 Fieldterminator 's_str' Union All Start `3esn`=Rel:_usn4(@usn5='s_str') ,`5esn`=Node:`7esn`(`3esn`=\"d_str\") Union With Distinct *,$usn2 Contains 2.12 As _usn3 Where $#usn7[$@usn6..] Unwind [_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As `8esn` Create Unique `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null}))"),
    octest_legacy:ct_string("Load Csv With Headers From $`2esn`[..00][..{`7esn`}] As `4esn` Fieldterminator 's_str' Foreach(#usn7 In Reduce(`4esn`={999} In Count(*) In `6esn`,_usn4 In $`` =~$1000 =~7|{999} In Count(*) In `6esn`) In Case `5esn` Is Null Is Null When {``}[12e12..`6esn`] Then False Ends With #usn7 Ends With 1.e1 When .e1 In {`6esn`} In \"d_str\" Then $0 Starts With {`2esn`} End In Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1)))| Start `3esn`=Node:@usn5(usn1='s_str') Where $12[..$`6esn`][..$`1esn`] Match _usn3=Allshortestpaths(((usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}))),`4esn`=Allshortestpaths(((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]}))) Using Index `2esn`:#usn8(`8esn`)) Remove Case When $usn2 Ends With $@usn6 Ends With $_usn3 Then 0 Is Null Is Null End.`1esn`?,[{999} Starts With {`3esn`},{7}[..123456789][..$#usn8]].`6esn`! Union Create `1esn`=({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}),@usn6=(`3esn` :usn1{_usn3:$123456789 =~$`7esn`,@usn6:{`2esn`}[`3esn`][{#usn7}]})-[`3esn`?*{@usn6}]-({`1esn`:{_usn4} =~`7esn`})-[usn2?:`1esn`|`6esn`{usn2:{999} In Count(*) In `6esn`}]->(usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]}) Create Unique `7esn`=((:`4esn`{_usn4:{7} In `1esn` In 123456789})-[``?:`5esn` *01234567..{usn2:9e12 In $_usn3}]-(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),`3esn`=(`4esn` :`5esn`)"),
    octest_legacy:ct_string("Start `4esn`=Rel( {`6esn`}) Where $#usn8[..#usn8][..{`5esn`}] Delete 0[9e1..][0x0..],False Starts With 's_str' Starts With $`6esn` Union Foreach(usn2 In 12 Ends With {999} Ends With 's_str'| Start `6esn`=Rel:_usn4({usn2}) ,@usn6=Relationship:#usn8(@usn5='s_str'))"),
    octest_legacy:ct_string("Unwind $999 Contains 0e0 As `2esn` Return Distinct {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] As usn1,{`5esn`} =~9e0 =~{`2esn`} As `7esn`,$`7esn` Starts With 01 Starts With $7 Order By .e12 Contains 00 Contains usn2 Asc,Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[usn2?:@usn5|:`1esn`]-($1000)))[..[0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00]] Asc,1.0 =~$_usn4 Desc"),
    octest_legacy:ct_string("Foreach(#usn7 In {@usn5} Ends With {usn1} Ends With @usn5| Create Unique (@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null}),((:`2esn`:@usn5{@usn5:{`8esn`} In {`6esn`} In .e12,@usn5:$@usn6[`4esn`..{999}][$``..{@usn6}]})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(#usn8 {`1esn`:{_usn4} =~`7esn`}))) Return *,`2esn`[..$@usn5] As _usn3,$0 Starts With $1000 Starts With False Order By $`6esn` Is Not Null Descending,{123456789}[..010][..#usn8] Ascending Limit Any(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {#usn7}[..12e12][..{1000}])[None(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X7 Contains usn2 Contains $`1esn`)..[12 Ends With {0} Ends With _usn4,9e12 In $_usn3]][[`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]]..Extract(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)] Union All Detach Delete [{`5esn`} In {#usn7} In $7,$`5esn`[`4esn`][{`3esn`}],`5esn` Is Null Is Null][..[@usn6[2.12..][`5esn`..]]][..[{`3esn`}[{`8esn`}..$7][0e0..0x0],0[9e12..{usn1}],$`6esn` =~$_usn3 =~.e1]] Start #usn8=Node:`8esn`(`2esn`='s_str')  Union Load Csv With Headers From False Is Null Is Null As `8esn`  Unwind ``[..`2esn`][..@usn5] As _usn3 Foreach(`8esn` In [1e1 In #usn8,$`3esn`[..{`4esn`}][..12.e12],01[..$usn1]][[#usn7 In 0e0 Is Not Null Is Not Null Where 0.e0 =~0.e0 =~12.e12]..]| Optional Match `3esn`=Shortestpath(((`8esn` {#usn7:$`6esn` Is Not Null,usn2:7[{_usn4}..{usn2}][9e0..0X7]})-[``:`7esn`|:`2esn`{usn2:$`8esn` Is Not Null Is Not Null}]->(`2esn` :`5esn`{``:`1esn`[``..$``]}))) Using Scan `5esn`:`` Using Index @usn5:`4esn`(_usn4) Where {@usn5}[123.654])"),
    octest_legacy:ct_string("Merge `2esn`=($#usn8)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn6?{#usn7:$usn1 Is Null Is Null,_usn4:$@usn6[`4esn`..{999}][$``..{@usn6}]}]->(`2esn` :``{_usn4:{#usn7} In {`6esn`}}) On Match Set `2esn` =$`2esn` Ends With {1000} Ends With `7esn`,usn2+=12[1e1],_usn3+=12e12[{#usn7}] On Match Set {@usn5:$#usn7 =~$123456789 =~12,_usn3:$12 In {`8esn`}}.#usn7! ={`1esn`} Is Null Union With Distinct *,9e12 =~01 =~$_usn3 As usn2,0.12[..$`4esn`][..$`7esn`] As `5esn` Limit 01234567[..0X7][..0X7] Union Remove Allshortestpaths((usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]})<-[:`8esn`|:#usn8 *0]->({@usn5:{`1esn`} In 0.e0 In $1000,`5esn`:$usn1[$0..Count(*)][@usn6..$12]})).`4esn`,[{`6esn`} =~{`4esn`} =~0x0,`3esn` In .e1 In 0X0123456789ABCDEF,@usn6[2.12..][`5esn`..]].`5esn` Remove Case When 0.12[.e12..0][1.0..{_usn4}] Then 0.0 Ends With {_usn4} Ends With $1000 When $123456789 =~00 =~0X0123456789ABCDEF Then .e1 In {`6esn`} In \"d_str\" End.`3esn`"),
    octest_legacy:ct_string("Return Null Ends With {`5esn`} As `4esn` Order By 1.e1 Is Not Null Descending,{``}[...e1] Desc Limit `6esn`[$`1esn`..Null] Delete 0e0 =~{usn2},#usn8[1e1][$12] Union All Load Csv With Headers From 0e0[..$123456789] As @usn6 Fieldterminator 's_str' With  *,Any(`5esn` In 9e1 In 0.0 In {999})[#usn8(#usn7[0.12..12.e12])] Order By {`4esn`:{`4esn`}[..0Xa],_usn3:@usn6} =~Filter(`7esn` In Null =~$`8esn` =~{`4esn`} Where {usn2}[01]) =~`1esn`(Distinct 0.e0[1e1..9e1]) Desc Union Optional Match ((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) Using Join On `7esn`,`3esn` Where {#usn8} Starts With 123456789 Starts With $`1esn` Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Using Scan `7esn`:`6esn` Return Distinct `` Is Null Order By #usn8[{#usn7}][12e12] Desc,$`6esn` Is Not Null Ascending,9e1 In 0.0 In {999} Descending"),
    octest_legacy:ct_string("Return Distinct 1.e1 Is Null Is Null As `1esn`,[True[{1000}][1000],$@usn6 Is Null Is Null] Is Not Null,2.12[12][$`7esn`] As `` Create Unique @usn6=Shortestpath(((usn2 {_usn4:{`3esn`}[`1esn`]})-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]-(@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null}))) Start `5esn`=Relationship:usn2(`6esn`=\"d_str\") ,`4esn`=Node:`2esn`(usn1='s_str')Where {_usn4} Contains {999} Contains 2.12"),
    octest_legacy:ct_string("Foreach(_usn4 In [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)]| Match `7esn`=((usn2 {`6esn`:`1esn` In `2esn` In $@usn6,_usn4:{1000}[True]})) Start #usn7=Node( {1000}) ,``=Node(*)Where $999[...e1][..{`3esn`}]) Create `2esn`=Shortestpath((_usn3 :``{`8esn`:12[{usn2}],#usn8:{@usn5}[`4esn`][12.0]})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-(:usn1{usn2:@usn6[..0X0123456789ABCDEF][..{`6esn`}]})),`7esn`=(usn1 {`3esn`:``[..`2esn`][..@usn5],_usn4:00})<-[_usn3?:@usn5|:`1esn`]-({@usn5:`6esn` =~{usn2},`1esn`:010}) Load Csv From 1e1 In #usn8 As `8esn` Fieldterminator 's_str' Union Match usn1=((@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})) Where $`7esn` Contains `1esn` Contains {usn1} Union With  *,$@usn5 As _usn4,Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As `1esn` Order By {`8esn`}[@usn5][0] Ascending,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654])[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})][[1e1 In False]] Ascending Skip `7esn` Starts With `4esn` Match Shortestpath(((`` {`1esn`:$@usn6 Is Not Null})-[@usn5? *07..07{`4esn`:{_usn3} Starts With $`4esn` Starts With {_usn4}}]->(:`4esn`{_usn3:usn1[..$usn2][..0]})-[#usn7:usn2 *01234567..]->(:`1esn`))),Allshortestpaths((#usn8 )-[`4esn`:`6esn` *07..07{``:`1esn`[``..$``]}]->(:#usn8:_usn3{`3esn`:`2esn`[#usn8]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(`6esn` :#usn8:_usn3{usn1:``[..`2esn`][..@usn5]})) Using Join On `7esn`,`3esn` Where `1esn` In `2esn` In $@usn6 With Distinct *,[`1esn`[$`4esn`..]] In Single(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..]) In {@usn5:usn1 Starts With Count(*) Starts With @usn6},$`7esn` Contains 01 Contains @usn6 As `4esn` Skip Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null Where $`8esn`[...e1]"),
    octest_legacy:ct_string("Optional Match usn1=Shortestpath((`4esn` :_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[`4esn`{usn1:1e1[..1e1]}]-({`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})),(:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2) Union All Detach Delete .e0 Ends With $0 Ends With ``,[$`5esn` =~`7esn` =~usn2,Count(*)[`8esn`..$`7esn`]][{usn2:{`8esn`} Is Not Null}..][Allshortestpaths((:usn1{#usn7:1000 Starts With $123456789,`1esn`:{123456789}[..010][..#usn8]})<-[@usn5 *12..00{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(`3esn` {`2esn`:{`6esn`}[..$12][..0.e0]})-[#usn8?{_usn3:@usn5 Is Null Is Null,`8esn`:{_usn4}[$`3esn`][$`3esn`]}]-(:`5esn`{`5esn`:7 In {7}}))..],$`7esn` Contains 01 Contains @usn6 Union Create (_usn4 {`5esn`:0X0123456789ABCDEF[...e12][..0.12]})-[?*{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}]-(`8esn` :usn2:_usn4{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]})<-[_usn3?:``]->({#usn7:\"d_str\" Starts With 1.0 Starts With 2.12}),(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})) Start `1esn`=Node:@usn5(usn1='s_str') "),
    octest_legacy:ct_string("With Distinct *,0X0123456789ABCDEF Order By #usn7[0.12..12.e12] Descending,All(#usn7 In 0e0 Is Not Null Is Not Null Where $_usn4 Contains 0 Contains False)[..Reduce(`2esn`=`4esn` Is Not Null Is Not Null,_usn3 In 010 Contains $`2esn` Contains 01|{_usn3}[..1.0])][..(:#usn8:_usn3{_usn4:{#usn7} In {`6esn`}})-[_usn3?:_usn3|:@usn5*..]-({@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}})] Asc Where 9e12[`6esn`..{12}] Create Allshortestpaths(((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})<-[? *0Xa..{`5esn`:{`2esn`} Starts With 1e1,`6esn`:$_usn4 Is Null Is Null}]->(@usn5 :`6esn`))) Union Start ``=Rel:`5esn`(@usn5={usn2}) ,`7esn`=Node:_usn4('s_str')Where {_usn3}[{``}..] Remove [`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where _usn4 In False In {usn1}].usn2,(`8esn` {#usn8:9e0 Is Not Null})-[`7esn`:`1esn`|`6esn` *0xabc..]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`}).#usn8?"),
    octest_legacy:ct_string("Create Unique (@usn5 )-[@usn6 *0{usn2:{@usn5} In {_usn3} In 0e0,`2esn`:9e0[.e12..][$`3esn`..]}]-(_usn4 {``:{usn1}[`6esn`..@usn5][$usn1..0.0]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8}) Create Unique (((`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})-[?:`8esn`|:#usn8 *0xabc..]->(`7esn` :`5esn`{#usn7:{@usn5}[123.654]})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))) Union Optional Match ((`1esn` {`3esn`:{`2esn`} =~{@usn6},`7esn`:12[0X7..]})) Using Join On `7esn`,`3esn` Where {#usn8} Starts With 123456789 Starts With $`1esn` Match _usn3=Shortestpath((usn2 :_usn3:`5esn`{`7esn`:{``}[12e12..`6esn`],`4esn`:$1000[$`7esn`..1e1]})),_usn4=Shortestpath(((`2esn` ))) Using Scan `7esn`:`6esn` Return Distinct `` Is Null Order By #usn8[{#usn7}][12e12] Desc,$`6esn` Is Not Null Ascending,9e1 In 0.0 In {999} Descending Union Remove [$123456789 Is Null Is Null,1000 Starts With $123456789,usn2 Ends With usn2 Ends With 1.e1]._usn4 Unwind 7 Is Null Is Null As `7esn`"),
    octest_legacy:ct_string("Delete $#usn8[..#usn8][..{`5esn`}],$123456789[#usn7..][0X7..],[`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]|{#usn8}[$`6esn`..12e12]][{`8esn`:$`` Ends With 9e0,`2esn`:010 Ends With {999}}] Union Unwind {@usn6}[..$7][..{`6esn`}] As `` Union All Foreach(`7esn` In $usn1[$0..Count(*)][@usn6..$12]| Load Csv From {``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}[[0e0[$@usn5..$usn1][usn2..9e1]]..Case {_usn4}[$#usn7..] When {usn2} Is Not Null Is Not Null Then 01[.._usn4][..$_usn4] When 010 Ends With `8esn` Ends With $_usn4 Then 0X0123456789ABCDEF[...e12][..0.12] End][Extract(#usn8 In $`8esn`[{``}..] Where $#usn8[..#usn8][..{`5esn`}])..{usn2:$999 Is Not Null Is Not Null}] As `2esn` )"),
    octest_legacy:ct_string("Delete @usn5 =~$123456789,Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {999}[{`1esn`}..``][{12}..$123456789])[..`8esn`][..Shortestpath((:_usn3:`5esn`)-[@usn6?:`5esn`]-(:`3esn`:usn2{`2esn`:{#usn7}[..12e12][..{1000}],`8esn`:#usn8[{#usn7}..12.e12][7..`8esn`]}))],$0[$123456789..][01234567..] Remove (:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4}).usn2?"),
    octest_legacy:ct_string("Create Unique ((_usn3 :`1esn`)),((:#usn8:_usn3{@usn6:`3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF,`2esn`:False =~$`8esn`})) Match Shortestpath(((usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]-(`6esn` {@usn5:$``[$@usn6..usn1][usn1..7],_usn3:`6esn`[$123456789..0xabc][``..$`4esn`]}))) Union All Start `5esn`=Node:`8esn`(usn1=\"d_str\") ,@usn6=Relationship:#usn8(@usn5='s_str')Where `6esn` Contains 01234567 Contains $12 Union Create `3esn`=((:@usn5:`7esn`{`7esn`})),`5esn`=Allshortestpaths((_usn3 :`1esn`{#usn8:$@usn6 Contains {@usn6},``:{999}[{`7esn`}]})-[_usn3?{_usn3:9e12 =~$usn2 =~9e1,_usn4:$1000[`6esn`..][Count(*)..]}]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})) Match Shortestpath((@usn5 :`4esn`{_usn3:True[#usn8..][$123456789..],`1esn`:{`6esn`} Is Null})-[`1esn`?:@usn5|:`1esn` *010..]-(`3esn` :`4esn`)-[? *0x0{`8esn`:010 Ends With `8esn` Ends With $_usn4}]->(`7esn` {``:$`3esn` In $#usn8 In {_usn3},#usn8:{0} Is Not Null Is Not Null})) Create Shortestpath(((({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`1esn`?:`8esn`|:#usn8{`4esn`:$123456789 Is Null Is Null}]-(`8esn` :_usn3:`5esn`{`5esn`:$`2esn`[..$#usn8],`2esn`:$`2esn` Ends With 9e0 Ends With True})-[:_usn4{#usn7:{7} Contains {#usn8} Contains {7},`6esn`:Count(*) Starts With $7}]-(`5esn` :@usn5:`7esn`))))"),
    octest_legacy:ct_string("With Distinct *,{_usn4}[$`3esn`][$`3esn`] Order By _usn4 Starts With $`3esn` Starts With {#usn8} Descending,Case When `8esn`[`1esn`..{7}][{_usn4}..$_usn4] Then `3esn` Starts With `3esn` Starts With 0X0123456789ABCDEF When 0x0 Contains 0x0 Contains {`1esn`} Then 9e1 In 0.0 In {999} End Starts With [`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]] Starts With Any(`7esn` In Null =~$`8esn` =~{`4esn`} Where 01234567 Starts With {`2esn`} Starts With {``}) Ascending"),
    octest_legacy:ct_string("Remove Case {`8esn`} In 123.654 In usn2 When `7esn` In $`1esn` In $999 Then {@usn5} Is Not Null Is Not Null Else 1e1 Contains $`` Contains 12.0 End.#usn8!,Any(@usn5 In {#usn8} Contains 7 Where 0X7)._usn4,usn2:`1esn` With  [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)] Order By False In 0.0 In 0X7 Descending,{@usn5} Is Null Ascending Skip Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Where {7} =~$usn1 =~{_usn4} Union All Create Unique Shortestpath(((usn2 :@usn6))),#usn8=Shortestpath((_usn3 :#usn8:_usn3)-[`7esn`? *010..{`8esn`:$999[0.12][0xabc]}]-(`4esn` :`2esn`:@usn5{#usn8:#usn8[{#usn7}][12e12]})<-[#usn7?:`7esn`|:`2esn` *..0X7{#usn7:usn2[`3esn`],#usn7:1.0[..`3esn`][...e0]}]->(:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})) With  (#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) As _usn4 Order By {`8esn`} Is Not Null Asc Union Remove Case {`8esn`} In 123.654 In usn2 When `7esn` In $`1esn` In $999 Then {@usn5} Is Not Null Is Not Null Else 1e1 Contains $`` Contains 12.0 End.#usn8!,Any(@usn5 In {#usn8} Contains 7 Where 0X7)._usn4,usn2:`1esn` With  [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {`1esn`} Contains {`5esn`} Contains 0e0][Reduce(@usn5={#usn8} Ends With $999,`5esn` In usn2 Ends With 0.e0|12e12 Starts With $`7esn`)..``(Distinct 01 Is Null Is Null)] Order By False In 0.0 In 0X7 Descending,{@usn5} Is Null Ascending Skip Filter(`5esn` In usn2 Ends With 0.e0 Where `4esn` Ends With $#usn8 Ends With {12})[`3esn`(#usn8 Ends With $usn1)..Case 01234567 Is Not Null When True[..$7][..$`4esn`] Then {7}[{#usn7}..{`5esn`}][123.654..{@usn6}] Else $`3esn` In $#usn8 In {_usn3} End][{#usn8:`1esn` In `2esn` In $@usn6,`6esn`:{_usn4} =~`7esn`}..[0xabc In $`5esn` In @usn5,`3esn` In .e1 In 0X0123456789ABCDEF,0.12[..$`4esn`][..$`7esn`]]] Where {7} =~$usn1 =~{_usn4}"),
    octest_legacy:ct_string("Merge `1esn`=({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})-[?:``{`2esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]-(usn1 :@usn6{`7esn`:123.654[_usn3..Null][{@usn6}..0x0]}) On Match Set (@usn6 :`7esn`:#usn8{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8)<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}).@usn6? ={usn1:1.e1 Is Not Null} Is Null,#usn8 =0Xa Is Not Null Is Not Null On Create Set @usn5+=0e0[..$123456789],`6esn` =1e1[{7}..{`5esn`}] Match ((#usn8 {`6esn`:$usn1 Is Null Is Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[:`1esn`|`6esn` *0]->(usn2 :@usn6{`4esn`:9e1 In 0.0 In {999},#usn8:$`5esn`[$#usn7]})) Using Index `1esn`:@usn5(usn1) Using Scan `1esn`:#usn7 Where 0.e0[1e1..9e1] Union All Return Distinct Filter(#usn8 In $`8esn`[{``}..] Where 1e1 In #usn8)[..`1esn`(usn2[999..][{`1esn`}..])] As `3esn`,[_usn3 In 010 Contains $`2esn` Contains 01 Where `1esn`[``..$``]|12 In {#usn7}] Is Not Null As ``,[{1000}[..$@usn6][..$`6esn`],{usn2}[07]] Starts With Case {`7esn`} Starts With {0} Starts With {1000} When {7} Contains {#usn8} Contains {7} Then 0.12 Ends With #usn8 Ends With $1000 When #usn7 =~#usn8 =~{`6esn`} Then 123.654[_usn3..Null][{@usn6}..0x0] End Skip _usn3 Contains $@usn5 Contains 01 Limit {usn2} In 010"),
    octest_legacy:ct_string("Merge `2esn`=(`4esn` :@usn6{`7esn`:{#usn8} In $7})<-[#usn8:#usn7|:`` *01{`3esn`:#usn8 Ends With $usn1}]->({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`1esn`:_usn3|:@usn5*$1000]->({`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null}) On Create Set ``+=Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 12[0X7..]|0xabc[..``]) Starts With Case When {123456789} Starts With {`5esn`} Then Count(*)[.e12..] When \"d_str\" Is Null Is Null Then $`6esn` End Starts With Extract(`` In {0} Is Not Null Is Not Null Where 12e12['s_str'..`8esn`][usn2..$_usn4]|Count(*)[`8esn`..$`7esn`]),`` =#usn8[..0Xa],Case {usn2} =~{1000} When `1esn` In `2esn` In $@usn6 Then {0}[{`4esn`}..] When $0 In 999 Then @usn6[..0X0123456789ABCDEF][..{`6esn`}] Else 0Xa[..`6esn`] End.usn2! =12 Ends With {999} Ends With 's_str' Remove {`3esn`:0[9e12..{usn1}]}.@usn5!,Filter(@usn5 In {#usn8} Contains 7 Where #usn8[_usn4]).@usn6? Unwind Extract(`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{@usn6} Starts With 9e1 Starts With usn1) Is Not Null Is Not Null As _usn3 Union All Match `5esn`=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[``?:usn2 *..1000{usn1:{usn1} Is Null}]-(:`2esn`:@usn5{@usn6:12 =~0xabc,#usn7:{`7esn`} Starts With {0} Starts With {1000}})<-[?:`2esn`|_usn3]-())),(:`1esn`{`1esn`:{_usn4} Ends With {`3esn`} Ends With 07,_usn4:0.12 In 123456789})<-[? *010..]->(`3esn` {`8esn`:{#usn8}[`7esn`..][_usn3..],``:{`6esn`} Is Not Null Is Not Null}) Using Index `7esn`:usn2(usn2) Using Join On `5esn`,_usn4,`6esn` Where 12.0[{999}..$`5esn`][0xabc..$_usn3] Return *,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `2esn`,[`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999] =~Reduce(``={#usn8}[True][{`7esn`}],`5esn` In 9e1 In 0.0 In {999}|{999} Ends With 1e1) Order By (`2esn` :`8esn`{_usn3:999[0.0..$`6esn`]})<-[`8esn`?:`4esn` *999]-(usn2 :usn2:_usn4)-[_usn4]-(:@usn5:`7esn`) =~`7esn`($_usn3[..@usn6][..{999}],{1000}[$_usn3...e1]) =~Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 's_str' Is Null|{#usn8} Ends With $999) Descending,$`1esn` Contains {`4esn`} Contains 0.12 Descending Limit Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where {0}[{`4esn`}..]|{@usn5}[123.654])[Reduce(`6esn`=01234567 Starts With {`2esn`} Starts With {``},`7esn` In Null =~$`8esn` =~{`4esn`}|$1000 Starts With 12.e12 Starts With {#usn7})][[1e1 In False]] Union All Return Distinct $usn2 Contains $usn1 Order By {@usn6}[..$7][..{`6esn`}] Desc,Reduce(`7esn`=9e12 In 0Xa In $#usn7,`` In {0} Is Not Null Is Not Null|$1000[$`7esn`..1e1]) =~Single(#usn8 In $`8esn`[{``}..] Where {_usn4} Ends With {`3esn`} Ends With 07) =~Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..]) Ascending"),
    octest_legacy:ct_string("Foreach(`7esn` In 1000[01234567]| Create Unique Shortestpath((:`4esn`)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})-[?{@usn5:0Xa Starts With .e12}]-(@usn5 :`6esn`)),Shortestpath((:`4esn`)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})-[?{@usn5:0Xa Starts With .e12}]-(@usn5 :`6esn`))) Remove [{1000}[True],$@usn6 Is Null Is Null].`5esn`?,Reduce(`8esn`=12 Ends With {0} Ends With _usn4,#usn7 In 12 Starts With $_usn4 Starts With $`6esn`|{`8esn`}[@usn5][0]).@usn5!,`4esn`(Distinct $#usn7 Ends With `6esn` Ends With {`3esn`},01[.._usn4][..$_usn4])._usn4 Union Unwind {#usn7} Contains {`8esn`} Contains usn2 As @usn6 Create Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})),Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]})))"),
    octest_legacy:ct_string("Foreach(#usn8 In (`8esn` :`2esn`:@usn5$``)-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:`4esn`{`8esn`:{#usn8} Ends With $999})[{`3esn`:0x0 =~$usn2,`8esn`:$`4esn` Starts With #usn8 Starts With 2.12}][Any(`` In {0} Is Not Null Is Not Null Where Count(*) In ``)]| Start `8esn`=Node:#usn8(\"d_str\") ) Merge `5esn`=(_usn4 :_usn4:`4esn`)<-[`8esn`?:`5esn`]-(:`7esn`:#usn8{`1esn`:0.12[.e12..0][1.0..{_usn4}]}) On Match Set All(@usn5 In {#usn8} Contains 7 Where @usn5[Count(*)][07]).@usn6! =False Ends With #usn7 Ends With 1.e1,Shortestpath((`3esn` {_usn4:1.0[..`3esn`][...e0]})).`4esn` ={`5esn`} =~9e0 =~{`2esn`},(`3esn` :_usn3:`5esn`$999)-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]->({`2esn`:{0}[1.e1],`5esn`:{`8esn`} =~usn1 =~12.e12})<-[:usn2 *999{`6esn`:`5esn` Is Null Is Null,_usn3:9e1[{`5esn`}]}]->(`3esn` {`6esn`}).`7esn`! =1000 =~{`1esn`} Start `5esn`=Node:_usn4(_usn4=\"d_str\") ,_usn4=Relationship:`6esn`(_usn3={`1esn`})Where _usn4[01234567.._usn4][False..12] Union Foreach(`6esn` In None(`` In {0} Is Not Null Is Not Null Where {@usn5}[9e1..][1e1..]) Ends With Case {@usn5} Ends With {usn1} Ends With @usn5 When 0e0 Is Not Null Is Not Null Then 123.654[_usn3..Null][{@usn6}..0x0] End Ends With `3esn`(Distinct {999} Starts With {`3esn`},12e12[@usn5..][01..])| Delete {`3esn`} Starts With 1.e1 Starts With $#usn7,Any(usn2 In 1000 Starts With $123456789 Where 0e0[..$`2esn`][..Count(*)])[{#usn8:0Xa Contains 0X7 Contains {``}}][(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(@usn5 :`6esn`{@usn5:9e12[_usn4..1.e1][{`3esn`}...e1]})]) Unwind Allshortestpaths((usn1 :usn1{`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))[Case When 1.e1[$_usn4..999] Then 01234567[`1esn`] When 0Xa Then {`2esn`} =~{@usn6} End..Filter(`` In 9e0 Is Not Null Where `1esn`[$`4esn`..])] As #usn8"),
    octest_legacy:ct_string("Load Csv From $`8esn`[..$usn2][..12] As `6esn` Fieldterminator \"d_str\" Remove None(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]).`3esn`! Union All Remove Single(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).#usn7?,Reduce(`6esn`={`8esn`}[`3esn`..999],`5esn` In 9e1 In 0.0 In {999}|$1000 Starts With 12.e12 Starts With {#usn7}).`4esn`!,(_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)<-[`2esn`:`` *..123456789]->(@usn5 :usn1).`5esn` Create Unique usn1=Shortestpath(((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}}))) Create Unique Shortestpath(())"),
    octest_legacy:ct_string("Load Csv From False Contains _usn4 Contains 2.12 As _usn3 Fieldterminator 's_str' Load Csv From Shortestpath(((:@usn5:`7esn`{`7esn`:$`1esn` Ends With $`7esn` Ends With `2esn`,usn1:$usn1[{``}..usn2][`3esn`..$1000]})-[_usn4?:_usn3|:@usn5]-({usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]})<-[:@usn6{`5esn`:0X7 =~{_usn3} =~0x0,`2esn`:{1000}[..$`3esn`][..2.12]}]->(:usn1))) Starts With Single(#usn8 In $`8esn`[{``}..] Where 12[{usn2}]) As #usn7 Fieldterminator \"d_str\" Return (_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})<-[`` *..1000]->(usn2 {_usn4:@usn5 Starts With 0xabc})[`8esn`(Distinct 12[0X7..])],{_usn4}[$`3esn`][$`3esn`]"),
    octest_legacy:ct_string("Start #usn7=Node:_usn3({_usn3}) Where {@usn6}[..$7][..{`6esn`}] Unwind 0Xa[..07][..`2esn`] As @usn6 Union All Delete ``(Distinct {usn2}[..12.0],{`1esn`} Starts With usn2)[..Shortestpath((((@usn6 {`2esn`:$`3esn` Ends With {_usn3} Ends With 9e1})<-[`8esn`?:`4esn` *999]-(_usn3 )<-[ *0X0123456789ABCDEF..]-({`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}))))],07 Ends With $0 Ends With \"d_str\" Unwind $#usn8[..9e1] As _usn3 Start #usn8=Rel:`4esn`({7}) ,`6esn`=Node:_usn3(usn2={12}) Union Foreach(#usn8 In $999 Starts With {@usn6}| Match `6esn`=(((`3esn` )-[#usn8?]->(@usn6 {`4esn`:{7} In `1esn` In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))) Using Scan ``:`1esn` Using Index _usn3:_usn3(@usn5) Where True Ends With {`7esn`} Ends With @usn5)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {usn2}[..12.0] As #usn7 Fieldterminator \"d_str\" Start `8esn`=Rel:`8esn`(`5esn`=\"d_str\") "),
    octest_legacy:ct_string("Create Unique _usn4=Allshortestpaths(((`1esn` :`4esn`{usn2:$@usn5[0.12..]})-[`5esn`? *12..00{usn2:.e0 Is Not Null Is Not Null,`2esn`:{`5esn`} Starts With {12} Starts With 07}]-(`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2}))),Allshortestpaths(((`3esn` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})<-[`4esn`:`1esn`|`6esn` *0{@usn5:{`1esn`} In $999 In {#usn8},usn1:12 In {#usn7}}]-(`` :`4esn`{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}))) With Distinct 1.0 =~$_usn4,`3esn` Ends With usn1 As `2esn`,01234567[`1esn`] As `3esn` Order By `7esn`(Distinct $999[0.12][0xabc]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) In [{``} Ends With 0Xa Ends With $999,010 Ends With {999},`5esn` In $_usn3 In 0Xa] Asc,#usn7[0.12..12.e12] Ascending,{`3esn`}[$_usn3...e0] Ascending Where 01234567[True] Union Unwind 12[{usn2}] As `4esn` Unwind Extract(`` In `1esn` In `2esn` In $@usn6 Where 7[0e0..][$`1esn`..]|#usn7[`4esn`..$`8esn`]) Is Not Null Is Not Null As `4esn`"),
    octest_legacy:ct_string("With  1000[..$12][..$usn2] As #usn8,{``} Starts With \"d_str\" Order By 00[12.e12..0Xa][_usn4..@usn5] Descending Skip {usn2}[{999}..][0Xa..] Limit 010 Is Not Null Is Not Null Load Csv With Headers From 0e0[..$123456789] As @usn6 Fieldterminator 's_str' Merge (((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->({@usn6:0e0 =~{usn2}}))) On Match Set Any(_usn4 In $`` =~$1000 =~7 Where {#usn7}[..12e12][..{1000}]).`1esn` =Case {#usn7}[{12}..usn1] When 12e12[12.0][{usn2}] Then #usn8[\"d_str\"..999] End[..All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {`8esn`}[0xabc..][`4esn`..])][..Reduce(`4esn`=$999[0.12][0xabc],`` In `1esn` In `2esn` In $@usn6|{@usn6} Contains 's_str')],`7esn` =$_usn4 Contains 0 Contains False Union All Create @usn5=Shortestpath(((`1esn` :@usn6{`8esn`:{`8esn`} In 123.654 In usn2})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-({`5esn`:{@usn5}[...e1][..01]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))) Union Unwind @usn6[..$usn2][..0X0123456789ABCDEF] As _usn4"),
    octest_legacy:ct_string("Create Unique `1esn`=((#usn8 :`4esn`)-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-({`8esn`:$@usn5[0.12..]})),((`2esn` :usn2:_usn4)<-[`3esn`?:`5esn`]-(:`6esn`{usn2:$`1esn` =~$`6esn` =~9e1,`3esn`:$`5esn`[$7]})) Union Create Unique _usn4=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) Union With Distinct *,1.0 Contains #usn8 Contains $usn1 Order By {`5esn`}[{_usn3}..False] Desc,#usn8(`1esn` Is Null,``[..`2esn`][..@usn5])[[{``}[12e12..`6esn`],2.12 Ends With {@usn5} Ends With `2esn`,`1esn`[0X7..][#usn7..]]..(`8esn` :@usn5:`7esn`{`4esn`:$`2esn` In $999 In 0.12,`1esn`:$`8esn` Is Not Null Is Not Null})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})-[@usn6 *..123456789{usn1:`1esn` Starts With $`7esn` Starts With `8esn`,`7esn`:{#usn7} In {`6esn`}}]-(usn1 :_usn3:`5esn`{_usn4:\"d_str\" Contains `6esn` Contains $12})] Asc,$12[..$`6esn`][..$`1esn`] Descending Limit False Starts With 's_str' Starts With $`6esn` Where {_usn3} Starts With $`4esn` Starts With {_usn4}"),
    octest_legacy:ct_string("Create Shortestpath(((`2esn` :``{_usn4:{#usn7} In {`6esn`}})-[`3esn`?]->(:@usn6{@usn6:01234567[True]}))),`5esn`=(:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) Create Allshortestpaths(((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) With  *,0X7 Ends With {0} Ends With $12 As `7esn`,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `1esn` Order By Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True]) Descending Skip #usn7 =~#usn8 =~{`6esn`} Where {_usn4}[$#usn7..]"),
    octest_legacy:ct_string("Foreach(`3esn` In {usn1}[0..{@usn6}][True..usn2]| With  0.12[..$`4esn`][..$`7esn`] As `5esn` Order By {`6esn`}[0x0..{1000}] Descending,{999}[$7..] Desc Limit 00[$usn1..][0xabc..] Where 2.12 =~{``} =~0X7 With Distinct *,#usn8(`8esn`[`1esn`..{7}][{_usn4}..$_usn4],0xabc Is Null) Is Not Null,{999} Starts With {`3esn`} As #usn7 Order By {`1esn`} Contains {`5esn`} Contains 0e0 Asc,{12} Starts With 00 Starts With 12 Ascending,12e12[{#usn7}] Desc Skip {`3esn`}[.._usn3][..{#usn7}]) Create `3esn`=Shortestpath((((`7esn` :@usn6{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]})-[ *..7]-(:`5esn`{`6esn`:$`6esn`,_usn4:12 Starts With $_usn4 Starts With $`6esn`})-[:`1esn`|`6esn`{``:9e12 Starts With $_usn3}]->(#usn7 {#usn7:07 Ends With $0 Ends With \"d_str\",#usn8:$123456789 =~$`7esn`})))) Create Unique `6esn`=(((@usn6 :#usn7:`3esn`{@usn5:00[``..usn2][01..$999],`4esn`:{`3esn`}[$_usn3...e0]})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})<-[?:`8esn`|:#usn8{`6esn`:$#usn8 Ends With #usn8 Ends With 12,`1esn`:_usn3[..1000]}]->(`` :#usn8:_usn3{#usn8:True[{1000}][1000],`6esn`:$`7esn` Is Null Is Null})))"),
    octest_legacy:ct_string("Unwind 12e12[{#usn7}] As `8esn` Union Load Csv From None(`4esn` In `4esn`[\"d_str\"..][123.654..] Where @usn6[$`2esn`..]) Starts With None(usn2 In 1000 Starts With $123456789 Where 07 In `2esn` In {`3esn`}) Starts With {#usn7:$#usn8[@usn5..9e0][2.12...e1]} As `1esn` Fieldterminator 's_str' Union Remove {`5esn`:{@usn6}[#usn8..][999..],@usn6:Count(*)[`8esn`..$`7esn`]}.`3esn`?,{_usn3:`7esn` Contains 01234567 Contains `1esn`,`8esn`:{@usn6}[..1000]}.``?,Reduce(`8esn`={`6esn`} Is Null,`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7}|{`4esn`}[$`8esn`..'s_str']).`4esn`! Start usn2=Node:`5esn`(`1esn`={@usn6}) ,`7esn`=Node:#usn7({999})Where 0.e0[\"d_str\"][.e12]"),
    octest_legacy:ct_string("Detach Delete Single(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {@usn6}[..1000])[[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where {999}[{`7esn`}]|{`1esn`} In `` In {12}]..Reduce(`5esn`=$_usn3 In $`5esn`,`4esn` In `4esn`[\"d_str\"..][123.654..]|{999}[{`1esn`}..``][{12}..$123456789])],True Contains {12} Contains 0Xa Load Csv From {1000} Is Null As _usn4 Fieldterminator 's_str' Return {_usn4}[1000][{123456789}] Skip {`6esn`}[..$`8esn`]"),
    octest_legacy:ct_string("With Distinct *,Null =~$`8esn` =~{`4esn`} As #usn8,Count(*) Starts With $7 Order By `4esn` Contains $usn1 Contains @usn6 Asc,#usn8[1e1][$12] Ascending,Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1) Descending Where #usn8 Ends With $usn1 Start #usn8=Rel:`5esn`(_usn4=\"d_str\") Where 1e1 In False Union All Merge ((`` {`1esn`:$@usn6 Is Not Null})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})) On Create Set Reduce(usn2=`1esn` Is Null,`` In {`7esn`} Starts With {0} Starts With {1000}|.e1[..12e12][..Count(*)]).`7esn` =usn2(Distinct `6esn` In _usn4 In {_usn4}) Ends With {`4esn`},`3esn`+=Extract(`5esn` In usn2 Ends With 0.e0 Where $`5esn`[$#usn7]|$`2esn` In $999 In 0.12)[Case `6esn` =~{usn2} When $`5esn`[$7] Then $#usn7 =~$123456789 =~12 When $@usn5[0.12..] Then 9e12[`6esn`..{12}] End..][Shortestpath(((usn1 :@usn5:`7esn`)))..],@usn5+=Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where 07[$_usn3..][$``..]|'s_str' =~\"d_str\") In Reduce(``=usn1 Is Null,`5esn` In 9e1 In 0.0 In {999}|$usn2 Ends With `5esn` Ends With 0Xa) In Extract(`` In `1esn` In `2esn` In $@usn6 Where 07 Ends With `1esn` Ends With {@usn5}) On Match Set `5esn`({`8esn`} =~usn1 =~12.e12).#usn7? =(:_usn3:`5esn`{`1esn`:0xabc[{`7esn`}..][{`8esn`}..],`1esn`:0x0[$123456789..$usn1]})-[:@usn6 *01234567..{`6esn`:0.0[$`1esn`..$`5esn`][usn2..$``],`1esn`:@usn5[01234567..$`8esn`][``..`5esn`]}]->({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`1esn`?:`7esn`|:`2esn`]->(@usn6 {_usn3:$@usn5 Contains 12e12 Contains {`6esn`}})[(@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"})..[`5esn` In usn2 Ends With 0.e0 Where {`3esn`} Starts With 1.e1 Starts With $#usn7|{`1esn`}[`8esn`][{usn2}]]][usn2(Distinct $`` Ends With 9e0,{12}[..9e1])..Extract(`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`])],#usn7 =(#usn8 {`6esn`:$usn1 Is Null Is Null})<-[:@usn5|:`1esn`]->(`` :`8esn`{@usn5:2.12 =~1.0 =~{`4esn`}}) =~[{`6esn`}[07..][{@usn5}..]] =~(:_usn3:`5esn`)-[_usn3:usn2{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]->(`3esn` {`4esn`:1e1 In $`5esn` In {7},`5esn`:#usn8[\"d_str\"..999]})-[`2esn` *0xabc..{`7esn`:$12 Starts With {#usn8} Starts With {999},@usn6:usn2 Ends With usn2 Ends With 1.e1}]-(`8esn` {usn2:0xabc =~@usn6 =~{`2esn`}}) Delete .e0[$`8esn`..12e12][usn1..999],{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]} Ends With {#usn7:07 Ends With `1esn` Ends With {@usn5}} Ends With Single(`` In {`7esn`} Starts With {0} Starts With {1000})"),
    octest_legacy:ct_string("Load Csv With Headers From $123456789 =~usn1 =~01 As `6esn` Fieldterminator 's_str' Foreach(`8esn` In Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999)| Return Distinct Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where 010 Is Not Null Is Not Null),`6esn`[$`1esn`..Null],{#usn7} In {`6esn`} As usn2 Order By `7esn`[1.e1..#usn8] Asc,07 In `2esn` In {`3esn`} Desc) Union Foreach(usn2 In 2.12 Starts With {999}| Unwind Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As @usn6 Return Distinct *,[`5esn` In usn2 Ends With 0.e0 Where 07 Ends With `1esn` Ends With {@usn5}] In Reduce(@usn5=0.0 Ends With 1000 Ends With 12e12,_usn3 In 010 Contains $`2esn` Contains 01|{`6esn`}[..$12][..0.e0]) Order By `7esn` Contains 01234567 Contains `1esn` Ascending Skip 0 Contains 010 Contains 0.12) Remove {`3esn`:2.12 =~.e12 =~#usn8}.`3esn`!,_usn4:`4esn`,exists()._usn4? Start `2esn`=Node:_usn3(`5esn`={_usn4}) ,#usn7=Node:_usn3({_usn3})"),
    octest_legacy:ct_string("Create ({`5esn`:$_usn4[1.0..@usn6]})<-[?:`5esn` *..1000{`3esn`:1e1 In #usn8}]-(usn2 :_usn3:`5esn`{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]})<-[`5esn`? *12..00]->(usn2 :`3esn`:usn2{`5esn`:Null =~$`8esn` =~{`4esn`},#usn8:$#usn7[..0e0][..$12]}),`4esn`=(#usn7 :`5esn`)<-[`7esn` *..00]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]}) Union Merge usn2=(@usn6 :@usn6{`3esn`:`7esn`[$`6esn`][$`8esn`],#usn8:@usn6[..0X0123456789ABCDEF][..{`6esn`}]}) Unwind $`7esn` Contains `1esn` Contains {usn1} As _usn4"),
    octest_legacy:ct_string("Match ((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`)-[`5esn`:`4esn`]-(`6esn` {`4esn`:$`1esn`[{1000}..{999}],`2esn`:_usn4 Contains {123456789} Contains $`5esn`})),Allshortestpaths((`4esn` )) Remove `7esn`:`8esn`,[#usn8 In $`8esn`[{``}..] Where usn1 Is Null|`5esn` In $_usn3 In 0Xa]._usn4?"),
    octest_legacy:ct_string("Optional Match `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) Using Scan `5esn`:usn1 Using Scan `4esn`:`8esn` Where $#usn7 =~$123456789 =~12 Merge `4esn`=((`1esn` {``:01[$#usn8..][7..]})<-[? *..0X7{@usn6:`3esn` =~usn2 =~7,`5esn`:999[$_usn3..][$``..]}]->(@usn5 :_usn4:`4esn`{`1esn`:0e0[..$`2esn`][..Count(*)],`1esn`:$#usn8 Ends With $_usn4})) On Match Set usn2 =0X7 =~$`7esn` =~$_usn3,_usn4 ={``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]}[Case {`3esn`} Starts With 1.e1 Starts With $#usn7 When 9e1[$@usn5..] Then 0[9e1..][0x0..] When 01 Contains _usn3 Contains .e12 Then {`2esn`} Starts With 1e1 End..(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->(:`8esn`{`3esn`:{``} Ends With 0Xa Ends With $999,`6esn`:$0[{7}..][123.654..]})<-[`` *..123456789$#usn8]-(_usn4 :`6esn`{``:#usn8[..0Xa],_usn3:12 In {#usn7}})],[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1].`` =@usn5[01234567..$`8esn`][``..`5esn`] With Distinct Extract(#usn7 In 0e0 Is Not Null Is Not Null Where $@usn6[`4esn`..{999}][$``..{@usn6}])[Single(`` In {0} Is Not Null Is Not Null Where {usn2}[{999}..][0Xa..])] As usn2,$#usn8 Ends With #usn8 Ends With 12 Skip `7esn` Is Null"),
    octest_legacy:ct_string("Match `1esn`=(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[#usn8?{usn2:010 Ends With `8esn` Ends With $_usn4}]->(@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[`3esn`?:`7esn`|:`2esn`{`6esn`:{``} Ends With 0Xa Ends With $999}]-({`1esn`:{_usn4} =~`7esn`}) Where 9e1[{usn2}..$1000] Unwind $`5esn` Is Null As `7esn`"),
    octest_legacy:ct_string("Remove Reduce(_usn4=`2esn` Starts With $0 Starts With 12.0,`` In `1esn` In `2esn` In $@usn6|$123456789 =~$`7esn`).`8esn`,`6esn`(Distinct usn1 Starts With Count(*) Starts With @usn6).`3esn`!,({`6esn`:{1000}[$_usn3...e1],usn2:{@usn5}[...e1][..01]})-[`4esn`? *0X0123456789ABCDEF..{usn2:`2esn`[#usn8],`1esn`:9e0[.e12..][$`3esn`..]}]-(#usn8 :`1esn`).`5esn` Create Unique `4esn`=((`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[`` *..7]->(:`5esn`{usn2:9e0 Is Not Null,`5esn`:$1000 Contains $12})-[#usn8? *010..{@usn5:{123456789} Contains `7esn` Contains 010}]->(@usn5 :`7esn`:#usn8)),_usn4=(`` )<-[_usn4:`4esn`]-({`1esn`:`7esn` Contains 01234567 Contains `1esn`})-[`5esn`?]-(:`6esn`{_usn4:07 =~usn2}) With Distinct *,{`7esn`} Ends With 999 As _usn3 Skip [_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}|{7}[..{@usn5}]] Is Null Is Null Where {@usn5}[$usn2..]"),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths(((`5esn` :@usn5:`7esn`)-[usn1? *..0X7{`2esn`:010}]-(`3esn` :usn1))) Union All With Distinct $usn2 Contains $usn1 Order By {@usn6}[..$7][..{`6esn`}] Desc,Reduce(`7esn`=9e12 In 0Xa In $#usn7,`` In {0} Is Not Null Is Not Null|$1000[$`7esn`..1e1]) =~Single(#usn8 In $`8esn`[{``}..] Where {_usn4} Ends With {`3esn`} Ends With 07) =~Any(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`8esn`[{usn1}..]) Ascending Where 9e1 Is Null Is Null Remove Reduce(`7esn`={999} Is Null Is Null,`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1]|False Starts With {``} Starts With 07).`1esn`?,(`1esn` :`3esn`:usn2)<-[#usn7{``:9e1[..`4esn`]}]-(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}).@usn6?,None(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]).`8esn`! Create ((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))"),
    octest_legacy:ct_string("Create Unique Shortestpath((((`` :_usn3:`5esn`{usn2:`1esn`[True..1000][`4esn`..{`3esn`}],``:`1esn` In `` In {`6esn`}})<-[? *010..]-(`7esn` {`6esn`:0X0123456789ABCDEF =~123.654 =~{_usn4}})-[_usn3 *..00]-(:`5esn`{#usn8:$#usn8[..#usn8][..{`5esn`}]})))),usn2=(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7})<-[:`8esn`|:#usn8 *0]->(_usn4 :`8esn`{usn2:True[$7..],``:$1000[`6esn`..][Count(*)..]})<-[?:_usn3|:@usn5{`7esn`:$_usn3 Starts With 0.0 Starts With {#usn7}}]->({`3esn`:True[$7..]})"),
    octest_legacy:ct_string("With Distinct $`4esn` Starts With #usn8 Starts With 2.12 As `8esn`,$`4esn`[0xabc..][.e12..],$_usn4 =~{#usn8} =~$`5esn` Skip [`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where $usn2 Ends With $@usn6 Ends With $_usn3|``[..`2esn`][..@usn5]][{`4esn`:{7}[..123456789][..$#usn8],@usn6:{``}[True][00]}..] Where $`5esn`[$#usn7] Remove @usn6(Distinct {`1esn`} Ends With 2.12 Ends With _usn4,{#usn8}[`7esn`..][_usn3..])._usn3? Union Load Csv With Headers From usn1[..$usn2][..0] As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct Case {1000}[$_usn3...e1] When @usn5[`5esn`] Then 01[$_usn4..][0..] End =~({`3esn`:`2esn`[#usn8]})-[?:@usn5|:`1esn` *0]-(`3esn` {usn1:$@usn6 Contains {@usn6},usn1:0 Is Null Is Null})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(:`4esn`$999) Order By True Contains {12} Contains 0Xa Ascending Skip `7esn`[1.e1..#usn8] Limit $12 Remove Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True])._usn3,Case When 0X7 In 0xabc Then 07 Starts With 123.654 Starts With 1.0 Else @usn6 End.`7esn`,None(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1[{``}..usn2][`3esn`..$1000]).#usn8! Foreach(_usn4 In #usn8[{#usn7}][12e12]| Return *,2.12[True],{`8esn`:0X7 Ends With {@usn5} Ends With {_usn3},`6esn`:1000[..$12][..$usn2]} Ends With Shortestpath((@usn6 :_usn3:`5esn`)<-[:`4esn`{``:123456789 Contains $@usn6 Contains Count(*)}]->(:`8esn`)) Ends With Extract(@usn5 In {#usn8} Contains 7 Where @usn5 Is Null Is Null) As `4esn` Order By Shortestpath((`8esn` :`6esn`{usn2:1000 Starts With $123456789,`6esn`:$#usn7[$123456789..][{0}..]}))[[``[``]]..] Desc) Union Start usn1=Node:@usn6(_usn3={``})  Merge `8esn`=(`` :_usn4:`4esn`{`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]}) On Create Set ``+=0x0 =~$usn2,`6esn`:`2esn`:@usn5,``+=Reduce(``=1.e1 Is Not Null,`` In {0} Is Not Null Is Not Null|$@usn6[`4esn`..{999}][$``..{@usn6}]) Starts With Reduce(@usn5={usn1} Is Null,`7esn` In Null =~$`8esn` =~{`4esn`}|{``}[True][00]) On Match Set #usn8+=Single(`5esn` In 9e1 In 0.0 In {999} Where 0.0[$`1esn`..$`5esn`][usn2..$``]) Ends With `5esn`($`4esn` Starts With #usn8 Starts With 2.12,\"d_str\" Contains `6esn` Contains $12) Ends With Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn2} Contains 0e0 Contains 1.e1),`2esn` =Count(*) In ``,_usn3 =Reduce(`4esn`=`2esn` Starts With $0 Starts With 12.0,#usn8 In $`8esn`[{``}..]|$`6esn` =~$_usn3 =~.e1)[Allshortestpaths(((:@usn6{@usn6:01234567[True]})-[:_usn4*..{_usn3:{usn2} Ends With $`7esn` Ends With {`1esn`},``:#usn7 =~#usn8 =~{`6esn`}}]-(:`4esn`{`3esn`:True[$7..]})))] Create @usn6=Allshortestpaths(((@usn5 {#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})-[usn1? *0x0{@usn6:{`8esn`}[@usn5][0]}]-({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}}))),`7esn`=Shortestpath(((@usn6 :_usn3:`5esn`)<-[:`3esn` *01]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]})-[`6esn`?]-({_usn4:`2esn` Ends With $`6esn` Ends With `2esn`,#usn8:2.12 =~.e12 =~#usn8})))"),
    octest_legacy:ct_string("Match `3esn`=Shortestpath(((:#usn8:_usn3{@usn6:123456789 In usn2,@usn6:9e12[`6esn`..{12}]})-[?:@usn5|:`1esn`*]->({`3esn`:$`3esn` Ends With {_usn3} Ends With 9e1,`1esn`:9e1 Is Null Is Null})-[?:`8esn`|:#usn8 *..123456789]-(`8esn` {_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}))) Using Index ``:``(`8esn`) Return Distinct ({``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]})<-[? *0]->(@usn5 :`1esn`)-[`6esn`?]-(:``{`1esn`:{@usn5}[{0}..0X0123456789ABCDEF]})[..{#usn8:07 Starts With 123.654 Starts With 1.0}] Union All With Distinct *,#usn8 Ends With $usn1,{999} Starts With {`3esn`} As #usn7 Order By Case \"d_str\" Contains `6esn` Contains $12 When 010 Then {usn2}[{999}..][0Xa..] End Is Null Asc Where 010[$_usn4..][{`3esn`}..] With Distinct *,True[{1000}][1000] As #usn8 Order By `5esn`(Distinct $`8esn`[{``}..],12.e12) Contains Reduce(`6esn`=1.e1[$_usn4..999],`5esn` In 9e1 In 0.0 In {999}|999 In 0X0123456789ABCDEF In 9e0) Contains (@usn6 :`2esn`:@usn5)<-[`8esn`:usn2]->(:#usn7:`3esn`{@usn6:`6esn` =~{usn2},`2esn`:`` Starts With 0.0 Starts With $`1esn`})<-[`5esn`?:`3esn` *..7{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(:`6esn`{`1esn`:07 Ends With $0 Ends With \"d_str\"}) Asc Skip 0e0 Is Null Is Null Limit [usn1[12e12..],9e12 In $_usn3] Is Null Is Null Where {`8esn`}[0xabc..][`4esn`..] Create ((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),((:`2esn`:@usn5{usn1:1e1[..1e1]}))"),
    octest_legacy:ct_string("Load Csv From {@usn6} In $`5esn` In {7} As usn2  Merge Shortestpath((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})) Union All Foreach(`1esn` In usn1 Is Null| Unwind Extract(`5esn` In 9e1 In 0.0 In {999} Where 1000[{7}..]|{_usn4}[$#usn7..]) Is Not Null Is Not Null As @usn5) Delete {``:0xabc Is Not Null,`4esn`:0.0[$`1esn`..$`5esn`][usn2..$``]} =~@usn6({@usn5}[9e1..][1e1..],usn1 Starts With Count(*) Starts With @usn6),[`7esn` In Null =~$`8esn` =~{`4esn`} Where {`6esn`}[..$`8esn`]|$`7esn` Ends With @usn5 Ends With .e1][Shortestpath((((@usn6 {``:{_usn4}[$`3esn`][$`3esn`],@usn5:{`5esn`} In {#usn7} In $7})-[``:``]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[`3esn`?:@usn5|:`1esn`{usn2:$`` Contains 123.654 Contains $#usn7}]-(:#usn7:`3esn`{`5esn`:{@usn5}[...e1][..01]}))))..Any(`` In {0} Is Not Null Is Not Null Where 0xabc =~@usn6 =~{`2esn`})][Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where $usn1 =~{_usn3})..Allshortestpaths(((_usn4 {`2esn`:$`3esn`[..True][..12.e12]})-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]->(_usn4 :usn1)<-[@usn5 *..00{`8esn`:12 Starts With $_usn4 Starts With $`6esn`,`2esn`:`1esn` In `2esn` In $@usn6}]->(usn2 :`5esn`)))],Filter(_usn3 In 010 Contains $`2esn` Contains 01 Where 123456789 Contains $@usn6 Contains Count(*)) Contains Reduce(`2esn`=`1esn` In `2esn` In $@usn6,`` In `1esn` In `2esn` In $@usn6|$1000[`6esn`..][Count(*)..]) Contains Allshortestpaths(((({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:`2esn`|_usn3]-({`8esn`:{999} In `3esn`,`1esn`:$`6esn` Ends With $`3esn` Ends With 07})-[`7esn`?:`8esn`|:#usn8 *0xabc..]->(`2esn` :usn2:_usn4))))"),
    octest_legacy:ct_string("Foreach(#usn7 In `8esn`[`1esn`..{7}][{_usn4}..$_usn4]| Load Csv From None(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null) Is Null Is Null As #usn8 Fieldterminator \"d_str\" Remove Case 00 When $1000[$`7esn`..1e1] Then $usn1 Starts With {`5esn`} End.@usn5!,[#usn8[_usn4],usn1 Is Null,$999[0.12][0xabc]].usn1?) With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Where `6esn` Contains 01234567 Contains $12 Start `3esn`=Relationship( {12}) Where True Ends With Count(*) Ends With 1.0 Union Load Csv From Allshortestpaths(({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]})<-[?:_usn3|:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7}]-(_usn3 :`8esn`)) =~None(`` In `1esn` In `2esn` In $@usn6 Where {``} =~.e12 =~{0}) As usn1  Union All Merge (`7esn` :_usn4:`4esn`)<-[?{`6esn`:True Ends With Count(*) Ends With 1.0}]->(@usn6 :`6esn`{``:{`8esn`}[Count(*)..],`5esn`:usn2[999..][{`1esn`}..]}) On Match Set [$7 In 0.0,010 Ends With {999},$`3esn`[..{`4esn`}][..12.e12]].`6esn`! ={#usn7}[..$_usn4][..$`4esn`],`1esn`:`5esn`,_usn4(Distinct 0xabc[$#usn7][0Xa],12 Starts With $_usn4 Starts With $`6esn`).usn2 ={@usn6}[..1000] On Match Set Case When `8esn` Contains 123.654 Contains {`7esn`} Then 07 =~usn2 End.`4esn`! ={#usn7}[..$_usn4][..$`4esn`],Reduce(`5esn`=$#usn7[$@usn6..],`4esn` In `4esn`[\"d_str\"..][123.654..]|{7} In `1esn` In 123456789).`3esn` =2.12[True] Return {@usn5} In `6esn` In .e0 As #usn7,Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3}) Is Null Is Null Skip $_usn3 In $`5esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}}))) Remove Any(#usn7 In 0e0 Is Not Null Is Not Null).usn1!,Case 010 Contains $`2esn` Contains 01 When 123456789 Is Null Then 0xabc[{`7esn`}..][{`8esn`}..] End.`6esn`!,Shortestpath((:`6esn`)-[#usn7?:_usn4 *12..00]->({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})-[usn2{usn1:{`1esn`}[..\"d_str\"],#usn8:@usn5 Is Null Is Null}]-(:usn2:_usn4{``:$`6esn` Is Not Null}))._usn3 Load Csv With Headers From Shortestpath((((`3esn` )<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`7esn` :_usn3:`5esn`)-[`8esn`:`7esn`|:`2esn`{`5esn`:0Xa[..07][..`2esn`]}]-(_usn4 {`2esn`:$`3esn`[..True][..12.e12]})))) Is Null As @usn6  Union Merge `6esn`=Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) On Match Set `8esn` ={123456789}[01234567..Null],Case 0e0 Is Null Is Null When 0[9e12..{usn1}] Then 0 Is Null Is Null End.`3esn` =Reduce(``=1.e1 Is Not Null,`` In {0} Is Not Null Is Not Null|$@usn6[`4esn`..{999}][$``..{@usn6}])[[$`3esn`[..True][..12.e12],1.0[..`3esn`][...e0]]][`8esn`(Distinct `1esn` In `` In {`6esn`})],`7esn`+=Filter(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) In None(`` In `1esn` In `2esn` In $@usn6 Where {``}[12e12..`6esn`]) Create Unique Shortestpath(((`8esn` :`6esn`))) Load Csv With Headers From $#usn7[$@usn6..] As `3esn` "),
    octest_legacy:ct_string("Match @usn6=((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[_usn4? *0xabc..{#usn8:Count(*) In ``}]->(:`5esn`{``:$`6esn` Is Not Null})-[`4esn`?:_usn3|:@usn5]->(`4esn` {@usn5:False =~$`8esn`})),Allshortestpaths((({`2esn`:9e1[{`5esn`}]}))) Using Scan ``:@usn5 With  $1000 In 7 In `1esn` As #usn7,Filter(`4esn` In `4esn`[\"d_str\"..][123.654..] Where $`6esn`)[Shortestpath((((`` :@usn6{@usn6:$#usn7 Ends With `6esn` Ends With {`3esn`},`6esn`:2.12 =~.e12 =~#usn8})<-[``? *..123456789{``:{``} Ends With 0Xa Ends With $999}]-(`3esn` {#usn8})<-[`7esn`?{usn1:$`4esn` Contains {7} Contains 999}]->(`` :@usn6{`6esn`:9e12[$#usn7..01234567],_usn3:{#usn8} Contains 7}))))] As `7esn`,'s_str' Contains 01 Contains $`` As `6esn` Skip $999 In $#usn7 In {`1esn`} Limit {`4esn`}[..0Xa]"),
    octest_legacy:ct_string("Start usn1=Rel:`6esn`('s_str') ,`8esn`=Node:`1esn`(`7esn`=\"d_str\") Union All Create Shortestpath(((`2esn` :``{_usn4:{#usn7} In {`6esn`}})-[`3esn`?]->(:@usn6{@usn6:01234567[True]}))),`5esn`=(:`6esn`)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(`7esn` )-[?{@usn6:{@usn5}[...e1][..01]}]-(#usn7 :``) Create Allshortestpaths(((_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})-[ *0]->({`2esn`:01234567 Is Null Is Null,`7esn`:$_usn3[123456789][0X7]})-[_usn4?:`4esn`{`3esn`:12.e12,`2esn`:12.e12}]-(`1esn` {`5esn`:$_usn4[1.0..@usn6]}))) With  *,0X7 Ends With {0} Ends With $12 As `7esn`,{`2esn`:0.12[..$`4esn`][..$`7esn`]} In None(`` In {0} Is Not Null Is Not Null Where {`1esn`} In 0.e0 In $1000) In Shortestpath(((({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})<-[@usn6:@usn5|:`1esn`{#usn8:Null[#usn7][07]}]-(`2esn` {`3esn`:2.12 =~.e12 =~#usn8})-[`7esn`:usn1|usn2]-(:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})))) As `1esn` Order By Extract(@usn5 In {#usn8} Contains 7 Where 0.0[$`1esn`..$`5esn`][usn2..$``]|$`7esn`[..True]) Descending Skip #usn7 =~#usn8 =~{`6esn`} Where {_usn4}[$#usn7..] Union All With  0Xa[..07][..`2esn`] As @usn5,Extract(`` In `1esn` In `2esn` In $@usn6 Where {7} =~$usn1 =~{_usn4}|0x0 =~$usn2) Ends With [False Is Null Is Null,$_usn4 Contains 0 Contains False,{#usn7}[{12}..usn1]] Ends With Case {@usn6}[#usn8..][999..] When 1000 =~{`1esn`} Then usn1 Contains 9e1 Contains 0X0123456789ABCDEF When {`8esn`}[.e12][01] Then $`6esn` Is Not Null End Order By 0X7[True..{0}][Count(*)..@usn5] Descending,$`5esn` Is Null Ascending,1.0[..`3esn`][...e0] Ascending Where 9e0[..usn2][..0] Match usn2=Shortestpath(((`4esn` :`8esn`{usn2:{#usn7} In `` In @usn6,_usn3:1.e1 Ends With {`8esn`} Ends With 00})-[#usn8?:``{`1esn`:01234567 Is Not Null,#usn8:$#usn7[$@usn6..]}]-(@usn6 ))) Using Join On _usn3,`2esn`,`6esn` Using Index @usn6:`2esn`(`5esn`) Where 0xabc[{@usn5}..][Count(*)..]"),
    octest_legacy:ct_string("Detach Delete 0e0 Is Null Is Null Create `6esn`=(((_usn4 {`2esn`:`1esn`[``..$``],`2esn`:0.12 Ends With #usn8 Ends With $1000})<-[@usn6?:@usn6 *07..07]-(:`1esn`{usn1:0.12 In 123456789})<-[usn1? *..123456789{`6esn`:{`8esn`}[Count(*)..]}]-({`8esn`:{`6esn`}[{@usn5}..{`8esn`}][$_usn3..$`6esn`]}))) Union All Match #usn7=Shortestpath(((_usn4 {`4esn`:999 In 0X0123456789ABCDEF In 9e0,`4esn`:0.e0[\"d_str\"][.e12]})-[?:#usn8|`1esn`{@usn5:$#usn7 =~$`1esn`}]-(#usn8 {`1esn`:$#usn7[..0e0][..$12],`2esn`:{_usn3}[..1.0]})-[`3esn`*{`7esn`:{7} Contains {#usn8} Contains {7},_usn4:$`8esn` Ends With {`5esn`} Ends With $`4esn`}]-(@usn5 {usn2:999[$_usn3..][$``..],`4esn`:7 In {7}}))) Using Index `6esn`:`7esn`(`5esn`) Foreach(`1esn` In [_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]|_usn3 Starts With 0X7] In Shortestpath(((:@usn6{@usn6:0X0123456789ABCDEF,`6esn`:#usn7[`4esn`..$`8esn`]})<-[#usn8?{`7esn`:123.654[..$`7esn`][...e0]}]->({`3esn`:9e0 =~.e12})<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`))) In Single(`` In 9e0 Is Not Null Where {1000} Is Not Null Is Not Null)| Detach Delete $1000[$`7esn`..1e1],`2esn` Starts With `` Starts With .e12 Start `7esn`=Node:usn2({0}) ,`1esn`=Node:`4esn`({@usn6})) With Distinct {#usn8:0Xa Contains 0X7 Contains {``}}[Extract(@usn5 In {#usn8} Contains 7 Where 12.0 Contains {`3esn`})..Any(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 's_str' =~\"d_str\")][[{`3esn`} Starts With 1.e1 Starts With $#usn7,01 Starts With 12e12]..Reduce(usn2={@usn5} Is Not Null Is Not Null,`` In {`7esn`} Starts With {0} Starts With {1000}|True[#usn8..][$123456789..])] As ``,7[{_usn4}..{usn2}][9e0..0X7] As _usn4 Order By {`5esn`}[{_usn3}..False] Asc,12e12['s_str'..`8esn`][usn2..$_usn4] Asc,{#usn8} In {#usn8} Asc"),
    octest_legacy:ct_string("Start @usn5=Node:@usn6({1000})  Return *,`2esn`[..$@usn5] As _usn3,$0 Starts With $1000 Starts With False Order By $123456789 Contains {`2esn`} Contains 's_str' Ascending Union Start _usn4=Node:`6esn`('s_str')  Detach Delete {@usn5} Is Null,9e1[..`4esn`],{`5esn`} =~9e0 =~{`2esn`}"),
    octest_legacy:ct_string("Optional Match `5esn`=(({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]})-[?:`5esn`{usn1:{`1esn`} =~{usn2} =~$``,@usn6:$1000[`6esn`..][Count(*)..]}]->(`8esn` :#usn8:_usn3{#usn7:$_usn3[123456789][0X7]})-[? *01234567..{#usn8:`1esn`[0X7..][#usn7..],`7esn`:9e12[`6esn`..{12}]}]-(#usn8 :_usn3:`5esn`{`3esn`:0.12 In 123456789})),`2esn`=((`` :`6esn`{`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})<-[:`2esn`|_usn3{#usn7:0Xa Contains 0X7 Contains {``},`8esn`:12.0[12..9e1]}]->(`4esn` :#usn8:_usn3)) Create ((`1esn` {#usn8:True[..$7][..$`4esn`]})),#usn8=((_usn3 {_usn3:$12 In {`8esn`},@usn5:{`1esn`}[`8esn`][{usn2}]})<-[?$usn1]-(:#usn8:_usn3{`2esn`:$`` =~$1000 =~7,#usn7:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})) Load Csv With Headers From Reduce(usn2=9e1[$`5esn`..0xabc],#usn8 In $`8esn`[{``}..]|9e0[.e12..][$`3esn`..])[count(Distinct 9e0[..usn2][..0],9e12[_usn4..1.e1][{`3esn`}...e1])..Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 01[$#usn8..][7..])][[{1000}[..$@usn6][..$`6esn`],{usn2}[07]]..(`7esn` :``{``:$@usn5 Ends With 00 Ends With 12.e12})-[`1esn`? *0x0{#usn8:$`5esn`[$#usn7]}]->(#usn8 :_usn4:`4esn`)<-[?:_usn4{`2esn`:$_usn3 In $`5esn`}]-(@usn6 $usn1)] As `4esn`  Union Optional Match ((#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null})<-[usn2?]-(:_usn4:`4esn`{_usn3:True Ends With Count(*) Ends With 1.0,`7esn`:{#usn8} Contains 7})),((:`2esn`:@usn5{usn1:1e1[..1e1]})) Using Index `3esn`:#usn7(usn2) Where {`8esn`} =~usn1 =~12.e12"),
    octest_legacy:ct_string("Return Distinct {0}[1.e1],{``:$1000[$`7esn`..1e1],``:#usn8[Null]} =~Allshortestpaths(({_usn3:{#usn8}[`7esn`..][_usn3..],`2esn`:123.654[..$`7esn`][...e0]})<-[:`3esn` *01]->({`3esn`:`2esn`[#usn8]})<-[usn1?:`8esn`|:#usn8 *0X0123456789ABCDEF..]->({@usn5:{`8esn`}[@usn5][0],`3esn`:{`3esn`}[$_usn3...e0]})) As #usn8 Order By $@usn6 =~{usn1} =~$@usn5 Ascending,01 Is Not Null Is Not Null Asc Skip $`5esn`[`4esn`][{`3esn`}] Limit 0x0 Contains 0x0 Contains {`1esn`} Start `7esn`=Relationship:#usn8(@usn5='s_str') ,`5esn`=Rel:_usn3(`2esn`={0})Where {7}[..123456789][..$#usn8] Create Unique `7esn`=(#usn8 {usn2:`8esn` Contains 123.654 Contains {`7esn`},`5esn`:9e0 Is Not Null})-[{`3esn`:#usn7[`4esn`..$`8esn`],`2esn`:$7[..{`8esn`}][..{999}]}]->(#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5}) Union All Start `6esn`=Rel:@usn6(`5esn`={1000}) Where {_usn3} Starts With $`4esn` Starts With {_usn4} Union All Remove Allshortestpaths((((#usn8 :`6esn`)-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-(`1esn` :@usn5:`7esn`{``:{`8esn`}[@usn5][0],`8esn`:01 Contains _usn3 Contains .e12})-[@usn6?:`2esn`|_usn3 *0x0{`2esn`:0.12 Ends With #usn8 Ends With $1000}]-(:`5esn`{``:$`6esn` Is Not Null})))).usn1!,_usn4(Distinct $7 Is Not Null Is Not Null).usn2?,(`5esn` {@usn6:0.12 Ends With #usn8 Ends With $1000})<-[`4esn`?:_usn4*]-(_usn3 :#usn8:_usn3)<-[usn2?:#usn8|`1esn`{`2esn`:{`6esn`}[..$12][..0.e0]}]->(`5esn` :@usn5:`7esn`).`2esn`?"),
    octest_legacy:ct_string("Create _usn3=(`5esn` :_usn4:`4esn`),(`1esn` {`5esn`:12 In {#usn7}}) Merge (({`2esn`:12.0[12..9e1],usn2:{7}[{#usn7}..{`5esn`}][123.654..{@usn6}]})<-[@usn6:_usn4*..]->(:@usn5:`7esn`{usn2:9e12 In $_usn3})) On Match Set `7esn` ={`3esn`} Is Null Is Null,(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8).`7esn`? =`8esn`[`1esn`..{7}][{_usn4}..$_usn4],_usn4+=07[.._usn4][..$@usn5] Merge _usn4=Shortestpath((`` {#usn8:$`6esn` =~$_usn3 =~.e1,`8esn`:usn2[999..][{`1esn`}..]})-[usn2?:_usn3|:@usn5{``:9e1[$`5esn`..0xabc]}]-(_usn3 :``)<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]-(_usn4 :_usn3:`5esn`{usn2:$999[0.12][0xabc]}))"),
    octest_legacy:ct_string("With  0xabc[Count(*)..`6esn`][@usn5..$usn1] As `4esn` Skip (#usn8 {`8esn`:999[0.0..$`6esn`],`1esn`:010 Is Not Null Is Not Null})<-[_usn3?:_usn3|:@usn5]->(:@usn5:`7esn`{`2esn`:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,@usn6:`7esn`[{`7esn`}..$1000]})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`) Is Null Where `6esn` Contains 01234567 Contains $12 Merge _usn4=(#usn8 :usn2:_usn4{``:`1esn`[$`4esn`..],`4esn`:01 Is Null Is Null}) Union Return exists() Is Null As @usn6 Order By $`4esn`[0xabc..][.e12..] Descending,{_usn4}[1000][{123456789}] Descending,[`7esn` In Null =~$`8esn` =~{`4esn`} Where 0.e0 =~0.e0 =~12.e12|`6esn` In _usn4 In {_usn4}] =~(usn1 {`3esn`:0e0 Is Not Null Is Not Null,_usn4:$usn2 Ends With $@usn6 Ends With $_usn3})<-[_usn4 *..00]-(usn2 :`2esn`:@usn5{`2esn`:{`6esn`}[07..][{@usn5}..]})<-[:#usn8|`1esn`]->(`1esn` :`8esn`{``:{999} Ends With 1e1}) =~[`` In 9e0 Is Not Null Where `1esn`[$`4esn`..]|7 Is Null Is Null] Asc Skip `8esn`(Distinct `1esn` In `` In {`6esn`}) Starts With Single(_usn3 In 010 Contains $`2esn` Contains 01 Where {`6esn`} Is Null) Limit {`6esn`} Contains {`1esn`} Contains Null Union Detach Delete 1000[01234567],[9e1[..`4esn`],$#usn7 =~$`1esn`] Starts With Case When 010[123456789] Then #usn7[0.12..12.e12] End Remove Any(#usn8 In $`8esn`[{``}..] Where 01 Contains {0} Contains $`5esn`).`6esn`!,Extract(`` In {0} Is Not Null Is Not Null Where Count(*) In ``).``? Return 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7}),Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As `1esn`,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) Ends With All(`` In {0} Is Not Null Is Not Null Where \"d_str\" Ends With `7esn` Ends With 12.0) Ends With All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) As `4esn` Skip [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)]"),
    octest_legacy:ct_string("Remove Any(_usn3 In 010 Contains $`2esn` Contains 01 Where {`5esn`} In {#usn7} In $7).`2esn`!,Reduce(`5esn`=9e12[`6esn`..{12}],`` In {0} Is Not Null Is Not Null|{usn1} Is Null)._usn4!,{``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}.`7esn`? Unwind {_usn4}[..'s_str'][..$`7esn`] As @usn6 Detach Delete {`8esn`}[.e12][01],Any(`` In {0} Is Not Null Is Not Null Where 12[{usn2}]) In Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12 Ends With 0X7 Ends With 12.0),0x0[0.0..] Union Remove Filter(#usn8 In $`8esn`[{``}..] Where 01 Contains {0} Contains $`5esn`).#usn7!,[$usn1[{``}..usn2][`3esn`..$1000]].`1esn`?,`1esn`:usn1 Foreach(`7esn` In `1esn`[``..$``]| With  *,True[{1000}][1000] As #usn8 Return Distinct 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7}),Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As `1esn`,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) Ends With All(`` In {0} Is Not Null Is Not Null Where \"d_str\" Ends With `7esn` Ends With 12.0) Ends With All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) As `4esn` Order By All(`4esn` In `4esn`[\"d_str\"..][123.654..] Where {0} Ends With $@usn5 Ends With 010)[None(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 1.e1 Ends With {`8esn`} Ends With 00)..Extract(`5esn` In 9e1 In 0.0 In {999} Where {#usn8}[0X7][0X0123456789ABCDEF]|01 Starts With 12e12)] Ascending Skip {`3esn`}[`8esn`][$#usn7] Limit [{1000}[..$@usn6][..$`6esn`],$`1esn`[{1000}..{999}]][Single(_usn4 In $`` =~$1000 =~7 Where 0X0123456789ABCDEF Starts With {usn1} Starts With {_usn3})..Extract(_usn4 In $`` =~$1000 =~7 Where 0.e0[1e1..9e1]|{`5esn`} In {#usn7} In $7)]) Load Csv From {`5esn`} =~9e0 =~{`2esn`} As #usn8 "),
    octest_legacy:ct_string("Match @usn6=((:`7esn`:#usn8{`8esn`:$@usn6 Contains {@usn6}})-[usn2:@usn6]->(@usn6 :#usn7:`3esn`{#usn7:$@usn6[{`8esn`}..9e0][0..$`4esn`],_usn3:2.12 =~1.0 =~{`4esn`}})),((:_usn3:`5esn`{usn2:_usn3 Starts With 0X7,@usn5:01 Starts With 12e12})-[`4esn`? *0{`1esn`}]-(`4esn` $`6esn`)-[`7esn`:`7esn`|:`2esn` *12..00]-({``:`5esn` Is Not Null Is Not Null,@usn5:{@usn5} In {_usn3} In 0e0})) Using Scan `1esn`:usn2 Using Join On @usn6,`2esn`,_usn4 Where usn2 Ends With usn2 Ends With 1.e1"),
    octest_legacy:ct_string("Create usn2=(:``) Match `4esn`=((:_usn3:`5esn`{usn2:$`3esn` In $#usn8 In {_usn3}})-[?:usn2 *..00{_usn3:{usn2}[..12.0]}]-(`` {`8esn`:@usn5 Is Not Null,`8esn`:'s_str'[12..$`5esn`]})) Using Join On _usn3,`2esn`,`3esn` Where 0e0 Is Not Null Is Not Null Foreach(_usn3 In `1esn` Is Null| Create (({`6esn`:$7 Starts With $12 Starts With 12e12,#usn7:{#usn8} Ends With `7esn`})))"),
    octest_legacy:ct_string("Delete 12 In {#usn7} Foreach(@usn6 In Case When {`5esn`}[{_usn3}..][.e0..] Then 1000 Starts With {@usn5} Starts With 123.654 When {`1esn`} In `` In {12} Then $@usn6[`4esn`..{999}][$``..{@usn6}] Else $#usn8[..#usn8][..{`5esn`}] End Starts With Single(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..])| Return #usn8[..0Xa] As usn2 Limit {@usn5} =~Null =~$`4esn` With Distinct Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where {1000}[..$`3esn`][..2.12]) In Filter(`` In `1esn` In `2esn` In $@usn6 Where .e1[..12e12][..Count(*)]) In Reduce(`6esn`=9e1[{usn2}..$1000],`5esn` In usn2 Ends With 0.e0|$_usn4 =~$12 =~`3esn`) As `5esn`,['s_str' Is Null Is Null,{@usn6}[#usn8..][999..]] Starts With Extract(#usn7 In 0e0 Is Not Null Is Not Null Where 1e1 In #usn8) Starts With _usn4({usn2}[07],{`4esn`}[$`8esn`..'s_str']) As `5esn`,{usn2} Is Not Null Is Not Null As _usn4 Limit {`3esn`}[.._usn3][..{#usn7}])"),
    octest_legacy:ct_string("Merge `7esn`=(_usn3 {@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`5esn`:`4esn`{@usn5:`7esn`[{`7esn`}..$1000]}]-(:usn2:_usn4{@usn5}) On Match Set Extract(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where 0X0123456789ABCDEF|$7 In 0.0)._usn3 =`2esn` Ends With $`6esn` Ends With `2esn`,`7esn` =Extract(#usn8 In $`8esn`[{``}..] Where {`6esn`}[False..$`3esn`]|usn1 Is Null) In [`` In 9e0 Is Not Null Where $usn1[$0..Count(*)][@usn6..$12]] In [{@usn5}[{0}..0X0123456789ABCDEF]],`6esn`+=010 Ends With `8esn` Ends With $_usn4 On Create Set [{`6esn`}[..$12][..0.e0],{`1esn`} Contains {`5esn`} Contains 0e0,{#usn8}[True][{`7esn`}]].usn2? =$0[$123456789..][01234567..],`` ={#usn7} In {`6esn`} Remove Single(`` In {0} Is Not Null Is Not Null Where $usn2 Ends With `5esn` Ends With 0Xa).#usn7?,[`` In 9e0 Is Not Null Where {@usn5}[9e1..][1e1..]|{`6esn`} Is Not Null Is Not Null].`5esn`!,{`1esn`:0x0 Is Null,`2esn`:$`3esn`[..True][..12.e12]}.@usn6 Optional Match `2esn`=(((`5esn` :`7esn`:#usn8{usn1:12e12[@usn5..][01..],`6esn`:{`3esn`}[`1esn`]})-[`6esn`?:@usn5|:`1esn`{_usn3:0X7 Contains usn2 Contains $`1esn`,`4esn`:$_usn4 Is Null Is Null}]->(:@usn5:`7esn`{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]})<-[?{``:{_usn3} Starts With $`4esn` Starts With {_usn4},#usn7:9e1[{usn2}..$1000]}]->(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}}))),`8esn`=(`7esn` :`6esn`)-[?{_usn4:usn1 Contains 9e1 Contains 0X0123456789ABCDEF,`2esn`:7 Is Null Is Null}]-(`1esn` :`2esn`:@usn5{usn1:9e12[$#usn7..01234567],usn1:010 Ends With {999}}) Using Index `6esn`:`1esn`(_usn4) Using Index `7esn`:`2esn`(`7esn`) Where $#usn8[..9e1]"),
    octest_legacy:ct_string("Return Extract(`1esn` In $`7esn` Contains `1esn` Contains {usn1} Where `7esn` In $`1esn` In $999|`5esn` Is Not Null Is Not Null) =~(`8esn` :`2esn`:@usn5$``)<-[`5esn`?{`1esn`:{``}[...e1]}]->(`1esn` {#usn8:9e12 Starts With $_usn3})-[usn2:@usn6]->(@usn6 :@usn6{_usn4:{1000} Is Not Null Is Not Null}) As `8esn` Order By 2.12[True] Asc,usn1 In {usn1} In 0e0 Desc,{999} In `3esn` Ascending Limit 's_str' Starts With 123456789 Starts With .e12 Create (:usn2:_usn4{`2esn`:{7}[..123456789][..$#usn8],`2esn`:`2esn` Is Not Null})-[#usn7?:usn2{usn2:123456789 Is Null,@usn5:2.12 =~{``} =~0X7}]->(`6esn` {`1esn`:$usn1[$0..Count(*)][@usn6..$12],`4esn`:$`5esn`[$7]}) Create Allshortestpaths((:`5esn`{_usn3:#usn8[{#usn7}..12.e12][7..`8esn`],_usn3:0e0 Is Not Null Is Not Null})),Shortestpath(((`1esn` {`5esn`:12 In {#usn7}})-[:`6esn` *010..]->(:`4esn`{`7esn`:$usn1[010..][{@usn6}..]}))) Union All Return 0.12 In (usn1 :``{@usn5:$#usn7 =~$`1esn`})<-[?*..$`4esn`]->(`7esn` {`2esn`:.e0 Is Not Null Is Not Null}) In All(`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 12 In {#usn7}),Allshortestpaths((({`4esn`:`4esn`[\"d_str\"..][123.654..],`3esn`:{``} =~.e12 =~{0}})-[ *0X0123456789ABCDEF..{`6esn`:$_usn4[1.0..@usn6],`7esn`:`` Starts With 0.0 Starts With $`1esn`}]->(:``))) Starts With (#usn7 :_usn4:`4esn`{`4esn`:$`4esn` In $@usn5})<-[`5esn`?*..{@usn6:`4esn` Ends With $#usn8 Ends With {12}}]-({@usn5:{123456789} Contains `7esn` Contains 010})-[`2esn`? *999]->(:`6esn`{`2esn`:{`6esn`}[07..][{@usn5}..]}) Starts With All(`3esn` In $_usn3 Starts With 0.0 Starts With {#usn7} Where {usn2}[{999}..][0Xa..]) As `1esn`,Extract(`` In {`7esn`} Starts With {0} Starts With {1000} Where $`4esn` Contains {7} Contains 999|$`3esn` In $#usn8 In {_usn3}) Ends With All(`` In {0} Is Not Null Is Not Null Where \"d_str\" Ends With `7esn` Ends With 12.0) Ends With All(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $usn1[{``}..usn2][`3esn`..$1000]) As `4esn` Skip [`5esn` In usn2 Ends With 0.e0 Where 9e1[{`5esn`}]|False Is Null Is Null][Case When `1esn`[0X7..][#usn7..] Then {1000} Contains 12.0 Contains @usn5 When {@usn5}[...e1][..01] Then 1e1 In False End..[`4esn` In 0.12[.e12..0][1.0..{_usn4}] Where 010[``..123456789][@usn6..{12}]]][Extract(_usn3 In 010 Contains $`2esn` Contains 01 Where {1000}[{@usn5}..][1.e1..])..(:`8esn`{`5esn`:{`8esn`},`4esn`:`4esn`[\"d_str\"..][123.654..]})<-[usn2?*{`5esn`:$@usn6[{`8esn`}..9e0][0..$`4esn`]}]->(`1esn` $#usn8)] With Distinct *,1.0[$`5esn`..{``}] As `2esn` Order By {`5esn`} Starts With {12} Starts With 07 Ascending,_usn4[01234567.._usn4][False..12] Ascending,Any(#usn7 In 12 Starts With $_usn4 Starts With $`6esn`)[#usn8({usn2}[01],$`5esn` Is Null)..] Descending Skip 12.e12[`6esn`][1.e1] Where 9e1 In 0.0 In {999} Return Distinct $usn2 Ends With $_usn3 Order By @usn5[Count(*)][07] Desc,{123456789}[01234567..Null] Desc,Extract(`5esn` In 9e1 In 0.0 In {999}|0e0[..$`2esn`][..Count(*)]) Contains #usn8(Distinct $1000 Contains $12) Contains Extract(`2esn` In 9e12[_usn4..1.e1][{`3esn`}...e1] Where {``} =~.e12 =~{0}|$`2esn`[..$#usn8]) Asc Skip 0e0 Is Null Is Null Limit 's_str' Is Null Is Null Union Merge (({`6esn`:{`3esn`} Contains 12.0 Contains {`8esn`},#usn7:12e12[@usn5..][01..]})) On Create Set Filter(#usn7 In `7esn` In $`1esn` In $999 Where 0x0 Contains 0x0 Contains {`1esn`})._usn4! =00[12.e12..0Xa][_usn4..@usn5] On Create Set (_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`8esn`:`8esn`|:#usn8{_usn4:`5esn`[12.0..],`6esn`:'s_str'[`4esn`..]}]-(`1esn` :`4esn`{usn2:$@usn5[0.12..]})<-[`8esn`?{_usn3:.e12[..010][..{0}],usn2:`2esn` Starts With `` Starts With .e12}]-(`5esn` {_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).@usn5 =(:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]})"),
    octest_legacy:ct_string("Merge @usn6=({``:01 Contains {0} Contains $`5esn`,`6esn`:{@usn5}[...e1][..01]}) On Match Set `7esn` ={`3esn`} Is Null Is Null,(:@usn6{`3esn`:0X7,`5esn`:$@usn5 Ends With 00 Ends With 12.e12})-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`2esn` :`7esn`:#usn8).`7esn`? =`8esn`[`1esn`..{7}][{_usn4}..$_usn4],_usn4+=07[.._usn4][..$@usn5] On Create Set Case $@usn5 Ends With 00 Ends With 12.e12 When 0.12 In 123456789 Then True[$7..] When $123456789 Is Null Is Null Then $999 Contains 0e0 End.`2esn` =({`6esn`:True Ends With Count(*) Ends With 1.0})<-[?{_usn3:usn1[..$usn2][..0]}]-(`7esn` :_usn3:`5esn`)[{@usn5:123456789 Is Null,``:#usn7[`4esn`..$`8esn`]}..[`4esn` In `4esn`[\"d_str\"..][123.654..] Where {usn1}[`6esn`..@usn5][$usn1..0.0]|False Starts With 's_str' Starts With $`6esn`]],`3esn`+=010 Is Not Null Is Not Null Remove [0x0 Contains 0x0 Contains {`1esn`},#usn8 Ends With $usn1,0 In Null In 00].`6esn`!,(`7esn` :_usn3:`5esn`)<-[ *0{_usn3:{#usn8}[`7esn`..][_usn3..],`3esn`:{usn1}[...e1][..{_usn4}]}]-({_usn4:$`7esn` Contains `1esn` Contains {usn1},`5esn`:01[$_usn4..][0..]}).`5esn`?,Extract(#usn7 In `7esn` In $`1esn` In $999 Where `5esn` Is Null|$usn2 Ends With $@usn6 Ends With $_usn3).usn2 Foreach(#usn7 In 9e12 =~01 =~$_usn3| Start usn2=Rel:`5esn`({`7esn`}) Where 2.12 =~1.0 =~{`4esn`}) Union All Match #usn7=((#usn7 :`7esn`:#usn8)-[?:_usn3|:@usn5*..]-(_usn4 :``{`5esn`:$#usn7 Ends With `6esn` Ends With {`3esn`}})-[usn1?{`1esn`:9e0 =~.e12,`1esn`:{usn2} Ends With $`7esn` Ends With {`1esn`}}]-(`2esn` :`6esn`)),Allshortestpaths(((({`3esn`:9e0 =~.e12})-[`8esn`?]->(:`3esn`:usn2{`2esn`:1e1 In $`5esn` In {7}})-[?{#usn7:#usn7[`4esn`..$`8esn`],usn2:_usn3 Starts With 0X7}]-(:`6esn`)))) Where $#usn8[..9e1] Union All Foreach(#usn7 In 2.12[..01234567][..{usn2}]| Match `4esn`=Shortestpath((:`3esn`:usn2{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`5esn`?:`8esn`|:#usn8{#usn8:Count(*) In ``}]->(:`3esn`:usn2)) Using Join On `7esn`,``,#usn7 Using Join On usn2,`1esn` Where {`6esn`}[07..][{@usn5}..]) Start `5esn`=Node:#usn8(`6esn`={123456789}) Where {`4esn`}[..0Xa] Load Csv From 9e0[.e12..][$`3esn`..] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With  Filter(`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc Is Null) In {usn1:``[..`2esn`][..@usn5]} In (:usn2:_usn4{_usn4:@usn6[2.12..][`5esn`..]})-[#usn8?:`3esn` *010..{`5esn`:{`1esn`} =~{usn2} =~$``}]-({`1esn`:usn1 In {usn1} In 0e0,`2esn`:{7} Contains {#usn8} Contains {7}}) Order By 1.e1[$_usn4..999] Descending,{@usn6}[..$7][..{`6esn`}] Descending,{`1esn`} =~{usn2} =~$`` Ascending Limit 123456789[{`7esn`}..][{@usn6}..] Create Unique @usn6=({_usn3:{7} Contains {#usn8} Contains {7}})<-[#usn7{``:9e1[..`4esn`]}]-({`2esn`:9e1[{`5esn`}]})-[#usn8? *..0X7]->(`3esn` {`6esn`:$`2esn` Starts With 0xabc Starts With 1000}) Start @usn6=Node:_usn3({7}) Where `4esn` Is Not Null Is Not Null Union Create Shortestpath(((`3esn` :`2esn`:@usn5{`3esn`:`2esn` Starts With $0 Starts With 12.0,`8esn`:{usn2} Ends With _usn3}))),Shortestpath((`2esn` :_usn3:`5esn`{`3esn`:123456789 Is Null,`6esn`:$`2esn` Starts With 0xabc Starts With 1000})-[@usn5 *01234567..{`5esn`:{@usn5}[...e1][..01],`8esn`:{`2esn`} Starts With 1e1}]-(:`8esn`{`2esn`:_usn4 Starts With $`3esn` Starts With {#usn8},_usn3:{@usn6} Contains {`1esn`}})-[_usn3? *0xabc..{`3esn`:\"d_str\" Is Null Is Null}]-(:#usn8:_usn3{`3esn`:`2esn`[#usn8]})) Union Load Csv With Headers From 0x0 Contains 0x0 Contains {`1esn`} As `` Fieldterminator 's_str' Detach Delete $#usn7[1.0..01][0x0..123.654],$#usn8 Ends With $_usn4,999 In 0X0123456789ABCDEF In 9e0 Unwind {`8esn`} In {`6esn`} In .e12 As _usn4"),
    octest_legacy:ct_string("Delete [{`1esn`}[$_usn4..\"d_str\"][{0}..$usn2],12.0 Is Not Null Is Not Null,12[0X7..]][[`` In {`7esn`} Starts With {0} Starts With {1000} Where 0xabc[..``]|123.654[..$`7esn`][...e0]]],$`` Ends With usn1 With  (:`7esn`:#usn8{@usn5:123456789 Contains $@usn6 Contains Count(*)})<-[`1esn`?:@usn6{#usn8:{7} Contains {#usn8} Contains {7},#usn7:9e0 =~.e12}]->(:`2esn`:@usn5{`3esn`:01[$#usn8..][7..]}) As `1esn`,$@usn5[$`6esn`] As usn1 Order By usn2[9e12..$`3esn`] Desc Skip Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} Create Unique Allshortestpaths((((@usn5 {`4esn`:1e1 In #usn8,#usn7:{`1esn`} Starts With usn2})-[`7esn`?:usn2 *07..07{`1esn`:0Xa[..07][..`2esn`],_usn4:0.12[.e12..0][1.0..{_usn4}]}]-(`4esn` :@usn6{`7esn`:{#usn8} In $7})-[`` *..1000]-(`` )))) Union All Load Csv With Headers From _usn3 Starts With 0X7 As #usn7 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(usn1 In $12[{``}]| Return Distinct $_usn4 Is Not Null Is Not Null As `3esn`,`8esn`[`1esn`..{7}][{_usn4}..$_usn4] Order By 00[12.e12..0Xa][_usn4..@usn5] Descending Start `5esn`=Node:usn2(`7esn`=\"d_str\") ,usn2=Node:`8esn`(`4esn`=\"d_str\")Where $7 Is Not Null Is Not Null) Start `5esn`=Node:usn2(`6esn`=\"d_str\")  Union All Unwind $usn1 =~{_usn3} As #usn8 Return 0.e0[1e1..9e1],$`1esn`[``][\"d_str\"] Order By {`5esn`:{@usn5}[...e1][..01]}[..Allshortestpaths(((({@usn6:$`7esn` Contains `1esn` Contains {usn1}})<-[`4esn`?{`4esn`:{_usn4}[$#usn7..],`3esn`:$1000[$`7esn`..1e1]}]-({@usn5:`6esn` =~{usn2},`1esn`:010})<-[`3esn`{`8esn`:`5esn` Is Null}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"}))))][..(@usn6 {_usn3:$@usn6 Contains {@usn6},usn1:0.e0 =~0.e0 =~12.e12})<-[@usn6?:@usn6 *07..07]-(#usn8 :`6esn`)] Descending Limit {@usn5}[...e1][..01]"),
    octest_legacy:ct_string("Create Unique `6esn`=Shortestpath(({_usn4:$1000[`6esn`..][Count(*)..],`8esn`:`4esn` Is Not Null Is Not Null})<-[#usn7?:`2esn`|_usn3{_usn3:$_usn4 Contains {1000},@usn5:{_usn4} Contains {999} Contains 2.12}]-(`5esn` {`1esn`:07 Ends With $0 Ends With \"d_str\"})<-[:`7esn`|:`2esn` *0xabc..]-(`1esn` {``:01[$#usn8..][7..]})),`8esn`=((:usn2:_usn4{``:$`6esn` Is Not Null})) Union Load Csv From {`5esn`:$12[$`3esn`][9e12]}[Extract(#usn7 In 12 Starts With $_usn4 Starts With $`6esn` Where $`7esn` Is Null Is Null|0.0 Ends With {_usn4} Ends With $1000)] As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match #usn8=(((:`1esn`{`5esn`:`4esn` Ends With $#usn8 Ends With {12}})-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(`2esn` :`7esn`:#usn8{usn2:@usn6[2.12..][`5esn`..]})-[`2esn`:`5esn` *..1000{_usn4:`7esn`[{`7esn`}..$1000]}]->({@usn6:0e0 =~{usn2}}))) Using Scan usn2:#usn7 Match (`6esn` {@usn6:{_usn4} Contains {999} Contains 2.12,_usn4:12.0[{999}..$`5esn`][0xabc..$_usn3]})<-[_usn4?:`8esn`|:#usn8 *0X0123456789ABCDEF..{usn2:12 Starts With $_usn4 Starts With $`6esn`,@usn5:`7esn` In $`1esn` In $999}]-(:``{`3esn`:12e12[12..`8esn`][0.e0..9e1]}),@usn6=Shortestpath(((:`3esn`:usn2{`5esn`:{`5esn`}[{_usn3}..][.e0..],@usn5:123456789 Starts With 0e0})<-[@usn5? *12..00{@usn5:9e1[$`5esn`..0xabc],`4esn`:0X7 Is Null}]->(:`6esn`{12}))) Using Index `6esn`:usn1(_usn3) Using Index `8esn`:usn1(_usn4) Create Allshortestpaths((`6esn` :`7esn`:#usn8{usn2:$`8esn` Is Not Null Is Not Null})-[`3esn`?:`1esn`|`6esn` *0xabc..{#usn8:010 Contains $`2esn` Contains 01}]-(_usn3 )<-[`2esn`?:@usn6*..]->({#usn7:{999} In Count(*) In `6esn`})),((_usn4 :`4esn`)-[_usn3?:usn2 *0Xa..{_usn4:0.e0 Ends With Count(*) Ends With `8esn`}]->(#usn8 :`8esn`{`5esn`:$999 Contains 0e0}))"),
    octest_legacy:ct_string("Return Distinct *,12.e12 In {@usn6},\"d_str\"[..$usn1][..$`5esn`] Limit Filter(_usn4 In $`` =~$1000 =~7 Where #usn7[$@usn6][$`8esn`]) =~Single(`7esn` In Null =~$`8esn` =~{`4esn`} Where 12.e12) =~{`8esn`:$#usn7 In `4esn` In 1.0} Union All Foreach(`4esn` In Case 1e1[{`6esn`}..{1000}][07..123456789] When {#usn7}[..12e12][..{1000}] Then {_usn4} Ends With .e1 Ends With 0x0 When {usn2}[..12.0] Then $`7esn` Is Null Is Null Else $7[..{`8esn`}][..{999}] End[(#usn7 :`2esn`:@usn5{usn1:{`3esn`} Starts With 1.e1 Starts With $#usn7})-[?:#usn7|:`` *010..]-(usn1 :@usn5:`7esn`)-[?:_usn4{@usn6:_usn3 Starts With 0X7,`6esn`:{@usn6} Starts With 9e1 Starts With usn1}]-(`5esn` :@usn5:`7esn`)..(_usn4 :usn2:_usn4)<-[`3esn`?:#usn8|`1esn`]->(:`3esn`:usn2)]| Remove `6esn`(Distinct $`` Contains 123.654 Contains $#usn7).`4esn`!,Reduce(`4esn`=$999[0.12][0xabc],`` In `1esn` In `2esn` In $@usn6|{@usn6} Contains 's_str').usn2?,(_usn3 :`3esn`:usn2{`2esn`:$`` =~_usn4 =~_usn4})<-[`4esn` *0{usn1:`7esn` In $`1esn` In $999}]->(`2esn` :#usn8:_usn3)<-[`2esn`:`` *..123456789]->(@usn5 :usn1).`5esn`)").
