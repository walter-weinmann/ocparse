%%%-------------------------------------------------------------------
%%% File        : performance_query_legacy_SUITE.erl
%%% Description : Test Suite for rule: query.
%%%
%%% Created     : 26.08.2016
%%%-------------------------------------------------------------------
-module(performance_query_legacy_SUITE).

-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - SUITE
%%--------------------------------------------------------------------

suite() ->
    [
        {timetrap, {minutes, 10}}
    ].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - ALL
%%--------------------------------------------------------------------

all() ->
    [test_query].

%%--------------------------------------------------------------------
%% TEST CASES
%%--------------------------------------------------------------------

test_query(_Config) ->
    octest_legacy:ct_string("Create `4esn`=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})),((`5esn` :@usn6)-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Union All Create Allshortestpaths((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})),(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[`8esn`?:#usn8|_usn3* 01..{_usn3:999 Is Not Null Is Not Null}]->(`6esn` :#usn7:`6esn`)-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}))) Foreach(`4esn` In {1000} Ends With 00 Ends With ``| Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}})) Load Csv With Headers From False =~Null =~12.0 As usn1 Fieldterminator \"d_str\") Union Start `5esn`=Node:#usn7(``={@usn5}) ,@usn5=Node:usn2(@usn5=\"d_str\")Where usn2 Contains {usn1} Create Allshortestpaths((((:`6esn`:`4esn`)-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:_usn3:@usn6{usn2:usn1 =~1000 =~12})-[_usn3?:`6esn`|:`7esn`]->(_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})))),(`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]})"),
    octest_legacy:ct_string("Optional Match _usn3=(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[`2esn`?:_usn3|:`6esn`* 0X7..]-(_usn3 {`2esn`:0xabc Ends With 1.0 Ends With $``,`3esn`:.e12 Ends With {`2esn`}}),``=Allshortestpaths(((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1}))) Remove {usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}.@usn5?,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn8 Ends With 0Xa).`7esn` Match @usn5=Allshortestpaths((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]}))))"),
    octest_legacy:ct_string("Merge _usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) On Match Set `6esn`+=False Contains _usn3 Contains {`5esn`} Union All Unwind Allshortestpaths(((:#usn8:#usn7)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[@usn6:`1esn`|``* 0]->(`4esn` :`6esn`:`4esn`))) In Case $7[{`7esn`}][12.0] When 00[$usn2..][0.12..] Then True In `8esn` When $#usn7 Is Not Null Is Not Null Then Count(*) In `1esn` In {_usn3} End In None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12) As `5esn` Foreach(`` In $`7esn` =~#usn8 =~{`7esn`}| Return *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]] Limit 1e1 Is Not Null Is Not Null With  *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Where `1esn` In {`4esn`})"),
    octest_legacy:ct_string("Remove [#usn8[#usn8..]].usn2!,`3esn`(`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],Null In 1e1 In {999}).#usn8!,Shortestpath((usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]})).`3esn` Return $`4esn` Is Null Is Null Order By {#usn8} Starts With {`4esn`} Starts With 00 Desc,2.12 Is Not Null Is Not Null Asc Skip {`3esn`:.e1[@usn5]}[{@usn5:$`4esn`[.e0][9e0]}..None(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)] Limit $999 Starts With $usn1 Starts With {`3esn`}"),
    octest_legacy:ct_string("Return *,$_usn3 Contains {#usn8} Order By usn2[0.e0..] Descending Limit {`1esn`}[01234567..][@usn5..] Unwind 0xabc Ends With 1.0 Ends With $`` As `` Delete Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})],$usn1 Contains 12.e12 Contains {@usn5} Union All Unwind {0}[$usn2..0.e0][{`4esn`}..True] As usn2 With Distinct `5esn` In 123.654 In {`6esn`} As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Desc,{0}[$usn2..0.e0][{`4esn`}..True] Descending Skip All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Limit All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Where `3esn` Contains {`6esn`}"),
    octest_legacy:ct_string("Unwind {#usn7} Is Null Is Null As `3esn` Remove {@usn6:$usn1[{_usn3}],`8esn`:0[{`4esn`}..]}.`4esn`!,(`4esn` :usn2)<-[`3esn`?:`6esn`|:`7esn`* ..999]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]}).`1esn`!,Any(usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000).`7esn` Union All Start `5esn`=Node:`2esn`(@usn6={`2esn`})  Unwind 0xabc Contains False Contains {1000} As @usn5 Return Distinct *,Case When $#usn7 Is Null Then $`1esn`[0..{_usn3}] When 999 Starts With {``} Then 0.e0 Ends With $`8esn` Else `3esn` Is Null Is Null End Is Not Null As `` Order By Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Descending,_usn4 Ends With $`3esn` Ends With {`3esn`} Desc"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))),``=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))) Remove [0Xa[..0.12],0.0[.e12..]].`2esn` Remove Case 12e12[..Count(*)][..$usn2] When $`3esn` In {`1esn`} In 12e12 Then {`1esn`}[\"d_str\"][{1000}] Else 999 =~0x0 =~2.12 End.#usn7 Union All Remove [#usn8 In True In `8esn` Where True[..{_usn3}][..999]|$`7esn` Ends With $1000 Ends With {999}].@usn5!"),
    octest_legacy:ct_string("Load Csv From #usn8 Ends With `5esn` Ends With _usn3 As #usn8  Union All Optional Match @usn6=(({`3esn`:_usn3 In 1.e1})),((`4esn` :`6esn`:`4esn`)) Create Unique ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),`4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))"),
    octest_legacy:ct_string("Detach Delete {`6esn`}[$1000],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Union Create Unique Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),Shortestpath(({`3esn`:.e12 Is Not Null})) Union Merge `2esn`=(:`4esn`:`3esn`{``:@usn6[9e12..],`8esn`:`6esn` Contains `6esn` Contains 9e1})-[`5esn`?:_usn3|:`6esn`]-(@usn5 :`6esn`:`4esn`)-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]}) On Match Set usn1 =$`7esn` Contains $_usn4 Contains `8esn`,usn1 =2.12 Contains `4esn` Contains .e1 On Match Set #usn7+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}[[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null]..][{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}..],Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})).#usn7? =Single(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)[..[@usn5[123.654..$_usn4][0.12..$@usn6],00[{999}..$#usn7][$0...e0],0 Is Null]][..@usn6(Distinct {@usn5} =~$`2esn`,@usn5 In 00)],Extract(#usn7 In {`5esn`} Ends With `2esn` Where {_usn4} =~0 =~{12})._usn3! ={`5esn`}[$1000..`1esn`]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From usn2[01234567..] As @usn5 Fieldterminator \"d_str\" Return Distinct 0[...e1][..$usn2],`8esn`[{#usn7}..][_usn4..],All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As `1esn` Order By $7[.e1] Descending,usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Descending,0x0 Ends With $@usn6 Ends With {usn2} Asc Skip `6esn` Contains `6esn` Contains 9e1"),
    octest_legacy:ct_string("Unwind $12 Contains .e1 As @usn6 Union Unwind $`3esn` Is Null Is Null As _usn4 Merge Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) Merge Allshortestpaths(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}}))) On Match Set Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).`2esn` =0.12 In `8esn`,{usn2:usn1 Ends With $@usn6 Ends With $1000}.`5esn`? =#usn7[9e1..$@usn5],`4esn`(9e1 =~$`4esn` =~{usn2}).``? =`3esn`[Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]|1e1 In 0xabc)..] On Match Set `8esn` =$``[..`4esn`][..0] Union Create Unique Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?:`4esn`|`2esn`* 07..]->(`7esn` :_usn3:@usn6)-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))) Return Distinct $`6esn` Ends With {`4esn`} Order By $#usn7 Ends With $999 Ends With {`5esn`} Desc,9e1[..2.12][..@usn6] Asc Create #usn8=((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})),@usn6=(`3esn` :#usn7:`6esn`)-[?:``]-(`2esn` :#usn7:`6esn`{`7esn`:0xabc =~{`8esn`} =~{_usn3}})<-[:usn2|_usn3* 0X0123456789ABCDEF]-(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})"),
    octest_legacy:ct_string("Load Csv From 123456789 Starts With 9e0 As `6esn` Fieldterminator 's_str' Foreach(@usn5 In Case `8esn` =~{`3esn`} =~9e12 When {#usn8} Is Not Null Is Not Null Then $@usn5[$7..@usn5] End[..(#usn7 :#usn7:`6esn`{1000})-[:`3esn`|``]-(:usn1{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})][..{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null}]| With Distinct Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},12.0 =~0.12 =~999 As usn1 Where $usn2[`4esn`..] Detach Delete False =~Null =~12.0,@usn6(Distinct _usn4 In usn2)[..Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654)][..#usn8(0.12 Is Not Null,0.e0[True..][True..])]) Union All Create `4esn`=(`4esn` {@usn5:`3esn`[#usn8]})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}) Remove {`3esn`:1.0 Ends With {`4esn`} Ends With {`2esn`},`3esn`:$_usn3[$usn2..]}.@usn5? Start _usn4=Node:`4esn`(@usn5={`6esn`})  Union All Foreach(`4esn` In {usn2} Is Not Null Is Not Null| Detach Delete Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])],123456789[$`5esn`],`4esn` In \"d_str\" In $``)"),
    octest_legacy:ct_string("Remove [#usn7 In {`5esn`} Ends With `2esn` Where 1e1[usn1..$123456789][Count(*)..False]|$#usn7 Contains {usn2}].`3esn`,All(usn1 In #usn8 =~$@usn5 Where .e1[07..`5esn`][$12...e0]).`1esn`?,Case When #usn7 Then 12e12[$``..] When 0.e0 Ends With $`8esn` Then Count(*) Is Not Null Is Not Null Else {7}['s_str'..] End.@usn6! Unwind {1000} Is Not Null As _usn4 Detach Delete `1esn` In `7esn` In {`7esn`},$#usn7[$``..{`7esn`}],1e1 Ends With {usn1} Ends With `2esn` Union Unwind All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As `8esn` Detach Delete $7[.e1],{_usn4} Ends With 12.0 Ends With $@usn6 Union All Return *,`2esn` As `2esn` Order By 0Xa Contains 7 Contains $@usn5 Asc Remove Reduce(``=$usn1[{_usn3}],`1esn` In {``} =~{`2esn`} =~$`8esn`|False Is Null Is Null).`1esn`! Foreach(`5esn` In 0[...e1][..$usn2]| Remove Single(usn2 In 999[{123456789}..999] Where {usn1} Contains 123.654 Contains {#usn8}).@usn5!)"),
    octest_legacy:ct_string("Merge `1esn`=(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))) On Create Set `2esn`+=0X7 Is Null Is Null,#usn8+=`` Contains True On Create Set `1esn`+=`4esn` Starts With 9e12 Starts With 00 Create Unique (:_usn3:@usn6{usn2:.e0 In 9e1 In $_usn3,_usn4:True[12e12..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})<-[* ..12]->(`5esn` :`5esn`),((usn1 :`1esn`)) Union Start `8esn`=Node:_usn3('s_str') Where $`4esn` Contains @usn5 Contains {`8esn`} Return *,$`8esn` In Count(*) In $usn1 Skip 9e0[{`8esn`}] Limit $@usn6[..{`6esn`}][...e0] Union All Delete {usn2}[`2esn`..{`4esn`}][_usn4..``],.e12[Count(*)..{`4esn`}][07..$1000],Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)] With Distinct 0X0123456789ABCDEF[0e0..$12][00..{12}],$@usn6 Ends With {`6esn`} Ends With 0.e0,7 Starts With $1000 As @usn6 Order By $usn2 Is Not Null Asc,0e0 In .e1 Descending"),
    octest_legacy:ct_string("Remove Reduce(`6esn`=0xabc =~{_usn4},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|{_usn3} In 010 In 0.e0).usn1?,Case When 0Xa[..0.12] Then Null[..010][..$@usn6] Else {`4esn`}[..$#usn7] End.#usn7,Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True In `8esn`)._usn4! Merge #usn8=Allshortestpaths(((:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999})-[?:``]-({`3esn`:.e12 Is Not Null})<-[usn1?:`7esn`* 0x0..7]->(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) On Match Set {``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}}.`3esn`! =07 Starts With 7,_usn3 =`2esn`[0Xa][{`8esn`}] On Create Set `7esn` =Filter(`4esn` In False[0.0..{@usn6}] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`])[Reduce(`4esn`=False[Count(*)],usn2 In 999[{123456789}..999]|$0 Ends With `2esn`)..],[`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where $#usn7[$``..{`7esn`}]|`3esn` =~12e12].#usn8 =$7 =~{`7esn`} =~$`6esn` Union All Create Unique `6esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}),`2esn`=Shortestpath((({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`))) Merge `3esn`=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) On Create Set `1esn` =`4esn`[$999..][1.0..] Match Allshortestpaths((((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[`5esn`* 0Xa]->(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})))) Using Index ``:@usn6(`6esn`)"),
    octest_legacy:ct_string("Load Csv From $7[{`7esn`}][12.0] As _usn3 Fieldterminator 's_str' Union All Start `1esn`=Relationship:@usn5({#usn8}) Where usn1 =~1000 =~12"),
    octest_legacy:ct_string("Match (`1esn` :@usn5:usn2),Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Join On @usn5,@usn5,`` Delete 0.0,{@usn5} Is Null Is Null"),
    octest_legacy:ct_string("Delete {@usn5}[1000] Create Allshortestpaths(({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})),`5esn`=Shortestpath((@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})) Union All Merge Shortestpath((((usn1 {`8esn`:12e12[..1.e1][..$12]})-[_usn4* 0X0123456789ABCDEF]-(#usn8 {`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[`1esn`* 01..{`5esn`:0xabc =~{_usn4}}]-(`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})))) On Create Set `1esn`+=0 Contains 123.654 Load Csv With Headers From 999 Starts With {``} As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete ``[$7..``],$_usn4 Contains Null Contains $0 Unwind `5esn` =~0e0 As `1esn` Union All Create Unique ({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})-[@usn5?* 01..]-({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) Load Csv From {`7esn`}[{#usn7}..] As `4esn`  Union All Optional Match `3esn`=Shortestpath((((`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})))),Shortestpath((({_usn3:_usn4 =~`1esn`}))) Using Index _usn4:#usn8(_usn4) Using Scan `6esn`:`2esn` Detach Delete 1.0 =~`7esn` =~$`7esn`,Single(`4esn` In False[0.0..{@usn6}] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`]) In {_usn4:0.12 In `8esn`,@usn5:`7esn`[..{`8esn`}]}"),
    octest_legacy:ct_string("Return Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12} As `8esn`,@usn5[..$`7esn`][..$`6esn`] As usn2 Order By {#usn7} In 010 In 12 Desc,`1esn` In {999} In $123456789 Ascending Load Csv With Headers From {@usn6:07 Is Null}[Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End][Case When {`6esn`} Is Not Null Is Not Null Then {`2esn`} Contains 0.12 Contains 0.0 End] As `8esn` Fieldterminator \"d_str\" Union All Return Distinct $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As usn1 Order By $12 =~{12} Ascending Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1] =~Reduce(`6esn`=9e1[..2.12][..@usn6],usn1 In {usn2} Contains {123456789} Contains 0Xa|{`6esn`} Is Not Null Is Not Null) =~(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})-[`8esn`?:`8esn`|:_usn3* 01..]->(:#usn8:#usn7)<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(:#usn7:`6esn`{`6esn`:0[{`4esn`}..],`7esn`:{``}[$@usn5]}) Limit {`3esn`} Ends With $123456789 Ends With {12} Remove None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True).``?,Filter(`4esn` In False[0.0..{@usn6}]).#usn8 Union All Foreach(`6esn` In {`6esn`} Starts With $1000| Start `7esn`=Rel:#usn8({_usn4}) Where {`3esn`}[`6esn`..] Optional Match `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) Where #usn8 =~$@usn5) Optional Match `3esn`=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))),@usn5=((_usn3 :usn2)-[?:`7esn`* ..999]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->(`8esn` :usn1)) Foreach(`2esn` In Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])]| Create Unique `8esn`=(:@usn5:usn2{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null})-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999}) With Distinct 7 Is Null Is Null As _usn3,{`3esn`} Is Null Is Null Order By 0X0123456789ABCDEF Is Not Null Is Not Null Ascending)"),
    octest_legacy:ct_string("Return Distinct *,0X0123456789ABCDEF Is Null As `1esn` Return Distinct *,$_usn4 Ends With False Ends With $#usn8,07 Is Null As usn2 Order By _usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Descending Skip 0x0 =~$`2esn` =~#usn7 Limit $@usn6[..{`6esn`}][...e0] Union Return Distinct *,1.0 As usn2,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip $7[\"d_str\"][`8esn`] Start @usn6=Rel:#usn7(``={@usn5}) ,#usn7=Node:#usn8(_usn3=\"d_str\")Where 1000 In {`4esn`} Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)._usn3,count(Distinct 1e1[{`3esn`}][True]).`1esn`,[@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].@usn6?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] As `7esn` Fieldterminator \"d_str\" With  *,{1000} Is Not Null As ``,{1000} Is Not Null As `` Order By `1esn` In #usn8 Ascending,.e12 Contains {`6esn`} Contains .e12 Desc,$`3esn` Is Null Is Null Asc Skip $`1esn` Is Not Null Limit Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Create Unique _usn3=Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})),(usn1 :`8esn`:_usn3)<-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]-({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})"),
    octest_legacy:ct_string("Merge @usn6=(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]}) On Create Set ['s_str' Ends With 's_str' Ends With $1000].`6esn` ={7}[{`7esn`}][$12] On Match Set usn2 =.e12[0.0..][$#usn8..] Remove count({usn1}[12e12..`6esn`][`7esn`..$`6esn`]).`6esn` Foreach(`4esn` In [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12})| With Distinct All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),[usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|0.12 Is Not Null] Starts With Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|$`1esn`[0..{_usn3}]) Starts With {`1esn`:$`5esn` Starts With 1.0 Starts With $usn2,@usn6:010[.e12]},Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] As `1esn` Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending Limit 's_str' Is Not Null Is Not Null Where Count(*)[{usn1}..][$`7esn`..])"),
    octest_legacy:ct_string("Optional Match usn1=((`3esn` {@usn5:$``[..`4esn`][..0],`8esn`:{@usn5}})),((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})) Where True In `8esn` Unwind 0 Is Null Is Null As _usn4 Union All Return Reduce(`2esn`={`4esn`} Is Null,#usn8 In True In `8esn`|{@usn5}[{``}][{_usn4}]) =~Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0 Ends With .e0) Order By Reduce(`2esn`=$#usn8 In $0 In {`2esn`},@usn5 In 1.0 Starts With 12|`4esn`[usn2..]) Is Not Null Is Not Null Asc,{usn2:.e12 Contains {`6esn`} Contains .e12} Contains Reduce(usn1=999[{123456789}..999],#usn8 In True In `8esn`|2.12 =~9e1 =~{_usn4}) Descending,{999}[`2esn`] Asc Skip {``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] Start #usn8=Node:@usn6(``='s_str') ,@usn6=Node:@usn6('s_str')Where Count(*) Is Not Null Is Not Null Union All Load Csv With Headers From `1esn`[$``][{`5esn`}] As _usn3 Fieldterminator 's_str' Load Csv From Extract(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) Contains Case When $`1esn`[0..{_usn3}] Then $_usn3[@usn6..][{``}..] When 999[1000..] Then {1000}[..#usn7][..{#usn8}] Else Count(*) =~0e0 =~0x0 End Contains Reduce(#usn7=$#usn7 =~Count(*) =~@usn5,@usn5 In 1.0 Starts With 12|2.12 Contains 0.0 Contains $`6esn`) As `8esn`  Foreach(_usn3 In $#usn7[$usn2..@usn6][$`7esn`..{7}]| Create _usn3=Shortestpath((((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})<-[?:`1esn`|``* 123456789..999]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})))),_usn3=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})))"),
    octest_legacy:ct_string("Start usn1=Relationship:@usn6({`5esn`}) ,`6esn`=Relationship:`2esn`(@usn6={`2esn`})Where `5esn`[$usn1..$7] Load Csv With Headers From 1000 Contains 12.e12 As #usn8 Fieldterminator \"d_str\" Load Csv With Headers From (`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 As `6esn` "),
    octest_legacy:ct_string("Load Csv From {@usn6} Starts With 00 As `8esn`  Union All Match `2esn`=(`` :usn1)-[`5esn`?:#usn8|_usn3{`8esn`:`3esn` Is Null Is Null,@usn6:0x0 =~$`2esn` =~#usn7}]-(`5esn` :`3esn`:@usn5{@usn5:0.0[010..12.e12]})<-[:`6esn`|:`7esn`]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``}),Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[usn2?:@usn6* 0x0..7]-(_usn4 {`7esn`:0xabc =~{`8esn`} =~{_usn3}})))"),
    octest_legacy:ct_string("Merge (((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[?* ..999]->(:@usn5:usn2))) Foreach(#usn8 In 01234567[usn1]| With Distinct *,$`` Ends With _usn3 Ends With $@usn5 As `7esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip 0.e0[True..][True..] Limit {`5esn`}[$1000..`1esn`] Where $#usn8 In $0 In {`2esn`} Load Csv From `6esn` Contains {`3esn`} As `1esn` ) Unwind 12[$`8esn`..{_usn4}] As `1esn`"),
    octest_legacy:ct_string("Detach Delete $`8esn` Contains 12,{@usn5} Is Null Is Null Load Csv With Headers From `5esn`[$usn1..$7] As `2esn` Fieldterminator \"d_str\" Union Load Csv From [usn2 In 999[{123456789}..999]][[$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]..][{usn2:#usn7[$7..{_usn4}],`7esn`:$`1esn` Ends With {1000} Ends With $`8esn`}..] As `8esn` Fieldterminator \"d_str\" Create ((({usn2:.e0 In 9e1 In $_usn3,_usn4:True[12e12..]})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}))) Load Csv With Headers From Extract(`5esn` In $999[12] Where False[0.0..{@usn6}]|0Xa Contains {`4esn`} Contains {`1esn`})[Case $@usn5[`2esn`..][#usn7..] When {`6esn`}[$1000] Then {`3esn`} Ends With $123456789 Ends With {12} When $12[{`5esn`}..] Then #usn8 =~$@usn5 End][None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)] As `8esn` "),
    octest_legacy:ct_string("Unwind 1000 In {`4esn`} As `4esn` Return Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Skip `7esn`[{12}] Limit None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null) Union With Distinct *,`5esn`[$12..][`2esn`..] As _usn3,'s_str' Contains $_usn4 Contains $`7esn` Skip $`8esn`[$usn1][0X7] Limit $#usn8[$12][`6esn`] With  *,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn`,{#usn8}[False..{usn1}][$`6esn`..0Xa] Skip #usn8(0.e0 Ends With $`8esn`,{#usn7}[{`1esn`}..][`1esn`..])[{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}..{_usn4:$`8esn` Contains {`7esn`} Contains $`4esn`}] Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]) Where Count(*) =~0e0 =~0x0 Foreach(usn1 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn`) Union Return Distinct *,Reduce(usn2=0xabc In {`6esn`} In $@usn6,`7esn` In @usn5[01..`6esn`]|#usn7[$7..{_usn4}]) =~Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End As #usn8 Limit [{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) Return Distinct $`3esn` Ends With `8esn` Ends With {`5esn`} As `2esn`,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Skip 9e0 Ends With `` Ends With 010 Limit $`7esn` Is Null Foreach(#usn8 In {`7esn`:$@usn5[$123456789..][@usn5..]} In Case #usn7[999..``] When 010 Contains $`5esn` Then {`7esn`}[..$`8esn`][..{`8esn`}] End In `3esn`(Distinct $#usn7 =~Count(*) =~@usn5)| Load Csv With Headers From 12.0 =~0.12 =~999 As `7esn` )"),
    octest_legacy:ct_string("Create Unique _usn3=({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3}),({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})-[#usn7?:usn2|_usn3* 7{_usn4}]->(:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}}) Foreach(usn1 In @usn5[..$`7esn`][..$`6esn`]| Detach Delete Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null),Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})],1.0) Delete {`4esn`} Ends With 1e1 Ends With @usn6 Union Create _usn3=Shortestpath((:#usn8:#usn7{usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) Merge `2esn`=((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[@usn5?* 00..999]->(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})) Unwind $`1esn` Contains usn2 Contains 1.0 As usn1"),
    octest_legacy:ct_string("Delete 00[usn1..\"d_str\"][{0}..$`8esn`],0X0123456789ABCDEF =~2.12 =~True,7 Is Null Is Null Load Csv From $@usn5 =~999 =~0e0 As `1esn` Fieldterminator \"d_str\" Optional Match _usn3=(:_usn4:`1esn`{`5esn`:010 Ends With 123456789 Ends With .e0,_usn4:9e1[..2.12][..@usn6]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`) Using Join On _usn4,`1esn` Where $usn1[{_usn3}] Union Detach Delete Reduce(#usn7={`7esn`} Ends With $usn2 Ends With 9e0,usn1 In {usn2} Contains {123456789} Contains 0Xa|$`3esn` Contains .e1)[Case When 999 =~0x0 =~2.12 Then 0[...e1][..$usn2] When `6esn` Contains `6esn` Contains 9e1 Then 01234567 Starts With 01 Starts With 1.e1 End..[#usn7 In $@usn6 Contains 0 Contains 0 Where Count(*) In `1esn` In {_usn3}]],1000 Is Not Null Is Not Null,`1esn` In #usn8 With  usn2[..12.e12][..0.0] As `4esn`,$`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As `1esn`,None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] As _usn3 Skip 9e0 Starts With 9e1 Starts With 12e12 Limit 12 Ends With @usn5 Ends With 1e1 Unwind {1000} Is Not Null Is Not Null As usn2 Union All Load Csv With Headers From $`7esn` Ends With {usn1} Ends With {``} As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Unique @usn5=(:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}),Shortestpath(((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} As usn1 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From usn2[{7}..#usn8][{12}..{``}] As `7esn` Fieldterminator \"d_str\" Start #usn7=Relationship:`1esn`(_usn3={`4esn`}) Where {`6esn`} Starts With 123456789 Starts With 0x0 Foreach(usn2 In {usn1}[..{#usn7}]| Delete Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) In Case usn1[{123456789}..][010..] When {usn1} Contains 123.654 Contains {#usn8} Then 0xabc Contains False Contains {1000} When @usn5[_usn3..{12}][{999}..$7] Then 0X7[#usn7..][12e12..] Else $`8esn` Starts With $123456789 End In (usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 01..]-(`5esn` {#usn8:True Ends With usn1})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}),.e1 In $123456789 In _usn3,0Xa Is Not Null Is Not Null Create Unique ``=Shortestpath((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})))"),
    octest_legacy:ct_string("Unwind {12} Is Null As `8esn` Union All Merge `3esn`=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})) On Match Set @usn5 =.e1 In $123456789 In _usn3,`7esn`+=.e0 In 9e1 In $_usn3 On Create Set _usn4+=0X7[..`2esn`][..@usn5] Merge #usn7=Allshortestpaths((((`8esn` :@usn5:usn2)-[`5esn`]->(:#usn8:#usn7)-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`)))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set `8esn`+={usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}),[{`1esn`}[01234567..][@usn5..]].`3esn` =$123456789[.e12..][$999..]"),
    octest_legacy:ct_string("Start ``=Relationship:_usn4(`3esn`='s_str')  Foreach(#usn7 In $`2esn`[usn2][#usn7]| Create Unique Allshortestpaths((((#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})<-[?:`4esn`|`2esn`* 07..{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}]-(:`2esn`)<-[@usn5]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))),Allshortestpaths(((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null})))) Union Load Csv From Single(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]) In [#usn8 In True In `8esn` Where 1e1[{`3esn`}][True]] In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 07 Contains @usn5] As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 010[.e12] As `4esn`  Create usn2=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))"),
    octest_legacy:ct_string("Foreach(`5esn` In $#usn8[12e12][0X7]| Remove Allshortestpaths((({``:{`5esn`} Ends With `2esn`}))).`7esn` Remove None(usn2 In 999[{123456789}..999] Where {@usn5}[{``}][{_usn4}]).#usn7?) Match @usn6=Allshortestpaths((:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Using Scan @usn6:`1esn` With  *,$7[{`7esn`}][12.0] As `5esn`,{`7esn`}[{#usn7}..] As `` Order By Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)] Ascending"),
    octest_legacy:ct_string("Load Csv With Headers From 12.0[{`6esn`}..123.654][@usn5..usn1] As usn2  Detach Delete (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12},0x0 In {`3esn`} Merge Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) On Match Set @usn5 =$999 Is Null Is Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Reduce(`2esn`={`4esn`} Is Null,#usn8 In True In `8esn`|{@usn5}[{``}][{_usn4}]) =~Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0 Ends With .e0) As `` Fieldterminator 's_str' Return {usn1}[..{#usn7}],{123456789} Ends With False Ends With {@usn6} As usn1 Limit 0X7[{12}..$``] Foreach(#usn8 In {`6esn`}[0.e0..$123456789]| Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Delete $`2esn`[#usn7][01],0Xa[$#usn8])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..] As `6esn`  Remove None(`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0).`3esn`!,Filter(`5esn` In `5esn` In 123.654 In {`6esn`} Where $12 Is Null).`7esn`!,{`5esn`:{#usn7} =~{usn1}}.usn2 Return Distinct Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Skip {usn2}[{`7esn`}][$usn2]"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((((#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})<-[?:`4esn`|`2esn`* 07..{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}]-(:`2esn`)<-[@usn5]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))) Remove `8esn`(Distinct 9e1 Ends With 0xabc Ends With @usn6,9e1 Is Not Null Is Not Null).`1esn`,[00[{999}..$#usn7][$0...e0]].usn1 Merge ((`5esn` {999})<-[?:usn2|_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(usn2 :@usn5:usn2)) Union All With  *,1e1 Contains @usn6 Contains {`8esn`} As `7esn`,Case `8esn` =~{`3esn`} =~9e12 When {#usn8} Is Not Null Is Not Null Then $@usn5[$7..@usn5] End[..(#usn7 :#usn7:`6esn`{1000})-[:`3esn`|``]-(:usn1{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})][..{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null}] Limit 0.e0[#usn7..][$@usn5..] Where {999} =~7 =~{usn1}"),
    octest_legacy:ct_string("Merge Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) Load Csv With Headers From True In $#usn8 As _usn4 "),
    octest_legacy:ct_string("Create Unique #usn7=(((@usn5 :`6esn`:`4esn`)<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}))) Union Create Unique Shortestpath((:@usn6{`7esn`:{12} Is Null})),_usn3=(({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999})) Create Unique _usn4=Shortestpath(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[`5esn`* 01234567..0Xa]-(`2esn` ))),usn2=Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0}))) Create @usn5=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})),Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6)))) Union All Start usn2=Relationship:`6esn`({#usn8}) "),
    octest_legacy:ct_string("Load Csv From 0.0[`5esn`][1.e1] As `3esn` Fieldterminator 's_str' Detach Delete 010[$12..],$`2esn`[#usn7] Return $123456789[{`4esn`}..123456789][`1esn`..False] As `2esn`,_usn4 =~$#usn7 =~`8esn` Skip _usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Limit {12}[{`5esn`}][7] Union Delete $_usn3 Is Not Null Is Not Null,$#usn7[$``..{`7esn`}],0e0 Ends With 0 Ends With {`6esn`} Detach Delete {#usn7}[$usn2]"),
    octest_legacy:ct_string("With Distinct (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}) Is Not Null As `5esn`,[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {@usn6} Starts With 00|#usn7 Ends With {@usn5}] Is Null Is Null Order By {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..] Desc,None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]) Desc Skip #usn8[01..``][`8esn`..@usn6] Limit Case When `1esn` In {`4esn`} Then $0[{``}..`2esn`] When 01234567[usn1] Then {`2esn`} In `5esn` In usn2 End Contains Case When _usn4 Ends With $`3esn` Ends With {`3esn`} Then $``[{#usn7}..{usn2}] End Contains {@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12} Union Remove [_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|{`2esn`} Contains 0.12 Contains 0.0].`3esn`!,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`6esn`}[_usn3]).@usn5? Return *,.e0 Starts With usn2 As ``,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..] Desc,$usn1[{_usn3}] Descending Limit `3esn` Is Null Is Null Union Foreach(`6esn` In 0e0 Ends With 0x0 Ends With $@usn5| Start `2esn`=Node:``(@usn6='s_str') ,#usn7=Rel:`1esn`(`7esn`={_usn3})Where 0X0123456789ABCDEF Is Null) Create `7esn`=((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})),Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12})))"),
    octest_legacy:ct_string("Unwind $123456789 In $7 As @usn6 Merge ({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})-[@usn5?* 01..]-({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) On Create Set [$`6esn` Is Null Is Null,01 Starts With {0} Starts With $`4esn`,$`2esn` In 0xabc].``? =$_usn4[0X7..{1000}] Union Foreach(`5esn` In [@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null| Create Shortestpath(((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})))),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Load Csv With Headers From {`5esn`} Ends With `2esn` As @usn6 ) Union Create ({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}),`1esn`=Allshortestpaths((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Return 12e12[$``..] As #usn7,$#usn7 Contains Count(*) Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending,_usn4 In usn2 Desc,9e1 Contains {#usn8} Contains `5esn` Asc Skip 0.e0[#usn7..][$@usn5..] Limit {``} Contains 12e12 Contains Null"),
    octest_legacy:ct_string("Merge Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) On Create Set usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]).usn1 =$12 Starts With $`3esn` Starts With $_usn3 Delete Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)],{`7esn`} Contains 's_str' Contains 01"),
    octest_legacy:ct_string("Create Unique ``=(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[?:`5esn`|`3esn`* 07..{`2esn`:`6esn` Contains `6esn` Contains 9e1}]->(@usn6 {`2esn`:{`1esn`} =~{``} =~$`8esn`}) Union Unwind $_usn3 Contains {#usn8} As #usn8 With  usn2[$7..$`5esn`] Order By {@usn6}[..0.e0][..$0] Asc,2.12 Contains @usn5 Contains {``} Descending,123456789 Is Not Null Is Not Null Ascending Skip 0xabc[$`2esn`..] Where 0xabc[{@usn5}]"),
    octest_legacy:ct_string("Create Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) With Distinct *,_usn3 In 1.e1 Order By `7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Asc,$#usn8 In {12} In $`4esn` Descending Skip 999 =~0x0 =~2.12 Merge Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})-[?{`5esn`:9e0 =~$usn1 =~{@usn6}}]->(_usn4 :_usn3:@usn6)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})))) On Match Set _usn4+=`3esn`[$`2esn`] On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] Union All Start `3esn`=Node:`5esn`({0})  Create ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]}))) Load Csv With Headers From 0xabc Is Not Null Is Not Null As _usn3  Union All Create Unique `6esn`=Allshortestpaths((_usn4 {`2esn`:0[{`4esn`}..],`6esn`:{`2esn`}[..{123456789}]})-[#usn7:_usn3|:`6esn`{@usn6:{12} Is Null}]-({_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[`7esn`?* 0xabc..01234567]-(`1esn` {_usn3:7 Is Null Is Null})),`7esn`=Allshortestpaths(((`5esn` :@usn6)-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))) Create `7esn`=Allshortestpaths((_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}))"),
    octest_legacy:ct_string("Return Distinct Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) In [999[1000..]],{`1esn`} Is Null Is Null,Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)] Order By {``} Ends With $`1esn` Ends With {`3esn`} Asc,{@usn5}[{`6esn`}..$0][1000..$1000] Descending,$0 Descending Limit Null[`1esn`..00] Detach Delete 07[{_usn4}..{`4esn`}],7 =~00,[usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Is Null Is Null Detach Delete $999[..$`2esn`],$7 Is Null Is Null Union All With Distinct 07 Is Null As usn2,.e12 Is Null Is Null As @usn5,{7}[{`7esn`}][$12] As `8esn` Skip All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where .e1 Starts With #usn7 Starts With 1.e1) Starts With `4esn`(12[$`8esn`..{_usn4}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1) Limit 0.e0[$`1esn`..] Create Unique `8esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Foreach(`1esn` In [`6esn` Ends With 0x0 Ends With 12,`8esn`[$1000..$#usn8][_usn3..{7}],12.e12 Starts With `8esn` Starts With 9e12] In 9e0 In [{`7esn`}[..0xabc][..0e0]]| Unwind Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As ``) Union All Merge #usn7=Allshortestpaths((({usn1:$@usn5[`2esn`..][#usn7..],@usn5:{1000}[..#usn7][..{#usn8}]})-[]->(:usn1)-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) On Match Set @usn5+=1.0 Is Null Is Null On Match Set usn1+=(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[#usn7{`2esn`:01[$`1esn`..\"d_str\"]}]->(#usn7 :_usn4:`1esn`{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]})[{usn1:.e1[..`2esn`],@usn5:12.e12[..9e12][..1000]}][Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)],`6esn`+=$7 Is Not Null Is Not Null,usn1+=07[_usn3][123456789]"),
    octest_legacy:ct_string("Foreach(@usn6 In Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where 7 Is Null Is Null) Ends With @usn5(010 Starts With `3esn` Starts With {usn1},{`2esn`}[@usn6][{_usn3}])| With  *,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn2 Skip 0 =~usn1 Limit [01234567[``..$`1esn`][True..$#usn7]] =~Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {7} Starts With $usn2 Starts With $usn2) Where {``}[2.12] Create `6esn`=(`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}),#usn7=(`7esn` :_usn3:@usn6)) Remove Reduce(usn2=Count(*)[#usn8][$usn1],usn2 In {@usn5}|$usn2[`4esn`..]).`7esn`,Reduce(_usn4=\"d_str\" Starts With $`` Starts With $usn1,#usn7 In {`5esn`} Ends With `2esn`|`4esn` Starts With 01).`3esn`!"),
    octest_legacy:ct_string("Optional Match `6esn`=Shortestpath((`7esn` :`3esn`:@usn5{#usn7:1.0 Starts With 12,`7esn`:$999 =~$999 =~usn2})),usn2=(({_usn4:Null[False..][12.e12..]})) Using Scan `1esn`:`6esn` Using Join On _usn4 Where 123.654 In {`6esn`} In `6esn` Remove (:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)-[* 010]->(:#usn8:#usn7).#usn8!,{`6esn`:$0 Starts With `2esn` Starts With {`1esn`}}.usn2,Any(#usn7 In {`5esn`} Ends With `2esn` Where {999}[`2esn`]).``? Create Unique @usn6=((:``:usn1{usn2:010 Contains $`5esn`})-[?:`5esn`|`3esn`* ..12]-(`1esn` {`3esn`:0.12 In `8esn`})<-[@usn5{@usn5:00 =~.e12}]->({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})),Shortestpath((:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[`5esn`?{`3esn`:{@usn6}[..0.e0][..$0]}]-(:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})<-[* 01..{_usn4:Count(*)[#usn8][$usn1]}]->($`3esn`))"),
    octest_legacy:ct_string("Unwind [usn1 In #usn8 =~$@usn5 Where $`2esn` In 0xabc|Null In 1e1 In {999}] =~`1esn`(Distinct $`7esn` Ends With $1000 Ends With {999}) As `3esn`"),
    octest_legacy:ct_string("Create `2esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Union Unwind 01 =~0X7 As #usn8"),
    octest_legacy:ct_string("With  `4esn`[usn2..] As `5esn`,0 Is Null Is Null As `3esn` Where 12e12[..1.e1][..$12] Load Csv From Extract(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) Contains Case When $`1esn`[0..{_usn3}] Then $_usn3[@usn6..][{``}..] When 999[1000..] Then {1000}[..#usn7][..{#usn8}] Else Count(*) =~0e0 =~0x0 End Contains Reduce(#usn7=$#usn7 =~Count(*) =~@usn5,@usn5 In 1.0 Starts With 12|2.12 Contains 0.0 Contains $`6esn`) As @usn5 Fieldterminator 's_str' Union Merge ``=Allshortestpaths((`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:_usn3:@usn6{#usn7:0xabc =~{`8esn`} =~{_usn3}})) On Match Set `6esn`+=Count(*) In `1esn` In {_usn3},#usn7+=[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..],_usn3+={``}[2.12] On Create Set `8esn`+=1e1 Is Not Null Is Not Null,`1esn` =[0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1),[$#usn7 Is Null,Count(*) In {`4esn`},{`7esn`} Contains 's_str' Contains 01].@usn5! =0.12[`8esn`..] Optional Match _usn3=Allshortestpaths(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})-[`4esn`* 1000]-(`3esn` :_usn3:@usn6{`6esn`:7 Starts With `5esn`})) Using Scan @usn5:`7esn` Using Scan _usn4:usn2 Where $`6esn` Starts With _usn4 Starts With `5esn` Union All Foreach(`7esn` In Case $`6esn` Starts With _usn4 Starts With `5esn` When _usn4 =~`1esn` Then {`6esn`} Starts With 0xabc When $7[{`7esn`}][12.0] Then $``[{#usn7}..{usn2}] Else 0xabc Is Not Null Is Not Null End[Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..])..(_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})][{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}..Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End]| Start usn2=Relationship:_usn3({`1esn`}) ,`2esn`=Node:`8esn`(#usn8='s_str'))"),
    octest_legacy:ct_string("Return Distinct False[Count(*)],`4esn` Is Not Null As _usn4 Skip All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]] Limit (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) Create `7esn`=((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union Foreach(`7esn` In 0Xa[0X7..#usn8][_usn3..9e1]| Load Csv From 07[_usn3][123456789] As `` Fieldterminator \"d_str\" Create ((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(`1esn` {_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})),`3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))) Create Unique #usn8=(`6esn` :usn1)-[`2esn`?* 0X7..]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})<-[usn1?:`5esn`|`3esn`]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})"),
    octest_legacy:ct_string("Start _usn3=Node:`4esn`({`7esn`}) Where {1000} Is Not Null Union Foreach(`3esn` In [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))| Create `2esn`=((#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]->(:``:usn1{`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1})),`4esn`=Allshortestpaths(((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})))) Return usn1[12.e12..$`1esn`][$`2esn`..0Xa] As `7esn`,$`7esn`[_usn3][{_usn4}] Skip 00 Starts With `6esn` Starts With $1000 Limit None(#usn8 In True In `8esn` Where $#usn8[12e12][0X7]) Is Null"),
    octest_legacy:ct_string("Merge #usn7=Allshortestpaths((((`8esn` :@usn5:usn2)-[`5esn`]->(:#usn8:#usn7)-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`)))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set `8esn`+={usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}),[{`1esn`}[01234567..][@usn5..]].`3esn` =$123456789[.e12..][$999..] Delete $_usn3 Is Not Null Is Not Null,$#usn7[$``..{`7esn`}],0e0 Ends With 0 Ends With {`6esn`} Union All Load Csv From 07 Starts With \"d_str\" Starts With $12 As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null As `8esn`  Create Unique (`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6}),((#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[?* 07..]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]})<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(:@usn5:usn2{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}})) Union Start `1esn`=Node:_usn4(\"d_str\") ,`7esn`=Rel:#usn7(`3esn`={_usn4}) Delete Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12})))[Extract(#usn7 In {`5esn`} Ends With `2esn` Where $@usn5[$123456789..][@usn5..])..][All(#usn7 In $@usn6 Contains 0 Contains 0 Where $0 Starts With `2esn` Starts With {`1esn`})..],#usn8 Ends With `5esn` Ends With _usn3 Detach Delete 00 Is Null Union Optional Match `5esn`=((_usn4 :``:usn1)-[?:`6esn`|:`7esn`* 0]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Using Index usn1:`7esn`(#usn7) Merge `6esn`=(({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})) On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] On Create Set (`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[?:`6esn`|:`7esn`* 0x0..7{usn2:usn1 =~1000 =~12}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 {_usn4:1000 Starts With {7} Starts With $7}).usn1! =$@usn6[#usn8..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]) As _usn4 Fieldterminator \"d_str\" Foreach(_usn3 In `7esn` Is Null| Unwind 01 Is Null As `1esn`) With  *,$`1esn` =~1.0 =~0X7 As `4esn` Limit {999}[0..{`7esn`}][9e0..{`3esn`}] Where $12 Contains .e1"),
    octest_legacy:ct_string("Remove Reduce(`6esn`=0 Is Not Null,`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|1e1[{`3esn`}][True])._usn4!,All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 12.0 =~0.12 =~999).`6esn`,[$`1esn`[`6esn`..$12][{usn2}..07],$`6esn`[`5esn`..][$12..],1000 Contains 12.e12].`5esn`? Start @usn6=Node:``(``={_usn4}) ,@usn5=Node:@usn6(\"d_str\") With  Extract(usn1 In #usn8 =~$@usn5 Where {999}[`2esn`]|.e12[Count(*)..{`4esn`}][07..$1000])[[`3esn` Starts With @usn5 Starts With {`4esn`},_usn3[$123456789..],00 Starts With 12 Starts With 0e0]..][[`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2]..] As usn2 Order By 9e1 Is Not Null Ascending,0X0123456789ABCDEF Is Not Null Is Not Null Ascending,.e1 Ends With $usn2 Ends With $7 Ascending Skip (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..] Limit {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Union All Load Csv From Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}) As `6esn`  Start `2esn`=Node:`4esn`(`3esn`=\"d_str\") Where 1e1 In 0xabc Load Csv From Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return Filter(@usn5 In 1.0 Starts With 12 Where 0.0 Starts With $`6esn`) Ends With (#usn7 :usn1)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2) As `4esn`,{1000} Is Not Null Is Not Null,$`4esn`[{@usn5}] Skip 123456789 Starts With 9e0 With  {`7esn`} Ends With Count(*) Ends With {`5esn`} As usn1 Order By 2.12[$`7esn`..] Asc,{_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End Ascending,(`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]}) Starts With {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where ``[$7..``]] Ascending Skip $`2esn`[#usn7]"),
    octest_legacy:ct_string("Create Allshortestpaths(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)),@usn5=(_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) With Distinct 123.654 Contains $`4esn` Contains .e1,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2,12.0 Starts With 00 Starts With 9e1 As `6esn` Order By Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Ascending,`2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Desc,123456789[$`5esn`] Desc Skip #usn7 Ends With {@usn5} Where 0 Is Null"),
    octest_legacy:ct_string("Remove [$usn1[{_usn3}],Count(*) In {`4esn`}].`3esn`?,Case When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] When #usn7 Starts With {@usn5} Starts With 07 Then {`2esn`} Else 0.0[`5esn`][1.e1] End.`7esn`! Unwind 1.e1[0xabc..][.e12..] As `5esn` Union Unwind Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})] As `5esn` Merge @usn5=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})) On Create Set (:@usn6{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12})<-[`4esn`?* 010]-(`7esn` :`6esn`:`4esn`)<-[:`7esn`{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`}).`6esn`? =00 Is Null,{usn2:$`3esn`[12.e12...e1],`8esn`:0xabc In {`6esn`} In $@usn6}.`4esn` =0x0 In {`3esn`},#usn8 =Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End =~Shortestpath((_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})) =~Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) On Create Set `5esn`:`7esn`:_usn4,Extract(`7esn` In @usn5[01..`6esn`] Where 0Xa[..0.12]).@usn6 =0.0[Count(*)],Case {999} =~7 =~{usn1} When .e12 Is Not Null Then 0X0123456789ABCDEF[1.0..] When $12[{`5esn`}..] Then `6esn` =~12.e12 =~123456789 End.`2esn`? =Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Load Csv From 999 Starts With {``} As `` "),
    octest_legacy:ct_string("Create Unique ((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})),(((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}}))) Return Distinct *,0[0xabc] As _usn3,Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null As `5esn` Order By [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Ascending,Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null Asc Limit 01234567 Starts With 01 Starts With 1.e1 Detach Delete Allshortestpaths((`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})) Contains [1000 Contains 12.e12,{usn2}[{`7esn`}][$usn2],$7[0X0123456789ABCDEF]] Contains All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}),$123456789 Ends With 1e1,999 Is Not Null Is Not Null Union All Merge ((`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]})-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[usn1?:`8esn`|:_usn3]->(_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})) Union With  1.e1[{1000}..] As @usn6,Null Starts With 's_str' Starts With {`1esn`},\"d_str\"[Count(*)..] As `5esn` Order By $``[{#usn7}..{usn2}] Desc Skip $`1esn` Is Not Null Where {usn1}[$`8esn`][0.e0] Create ((#usn8 :@usn5:usn2)-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))"),
    octest_legacy:ct_string("Merge ((@usn5 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[?* 0X7..{`7esn`:$@usn6[..{`6esn`}][...e0]}]-(`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})) Create (((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[usn1:#usn8|_usn3]->(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}))),_usn3=Allshortestpaths((@usn5 :`3esn`:@usn5{`1esn`:{#usn7} =~$0})<-[:`5esn`|`3esn`{@usn5:usn1 =~1000 =~12}]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})) Merge ((usn1 :`1esn`)) Union All Start `1esn`=Node:`7esn`(`4esn`=\"d_str\") Where 0.0[.e12..] Union With  *,$`2esn`[usn2][#usn7] As `8esn`,{#usn8} Is Null Is Null As @usn5 Skip 0.12[{usn1}..{1000}][{0}..{#usn8}] Limit ``[$7..``] Where $#usn7 =~Count(*) =~@usn5 Unwind `` =~_usn3 =~{`6esn`} As _usn3"),
    octest_legacy:ct_string("With  *,Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)],123.654[12.0..{123456789}] As `5esn` Order By .e12[0.0..][$#usn8..] Asc,$_usn3 Ends With 1e1 Ends With 12e12 Descending Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As `2esn` Merge Allshortestpaths(((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}))) On Create Set `2esn`+=.e0 In 9e1 In $_usn3 Union All Create Unique usn2=(usn1 :usn2) Merge `6esn`=(`6esn` :usn1)-[`2esn`?* 0X7..]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})<-[usn1?:`5esn`|`3esn`]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})"),
    octest_legacy:ct_string("Merge ((usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})) On Match Set usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]).usn1 =$12 Starts With $`3esn` Starts With $_usn3 On Match Set `1esn` =12.0 In $usn1 In True,`4esn`+=#usn7[..$`1esn`][..{`1esn`}],(:usn2{@usn5:usn1 =~1000 =~12})<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}).`7esn`! =9e0 Is Not Null Foreach(usn1 In 0xabc In 9e1| Unwind $999 In $999 As `` Delete (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..],Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00})))) Start `3esn`=Node:#usn8({_usn4}) Where .e0 Starts With {0} Starts With 0x0"),
    octest_legacy:ct_string("With Distinct *,{#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) As `4esn`,Null[.e12..{#usn8}] Skip $@usn6[#usn8..] Limit usn2 Contains \"d_str\" Contains 123.654 Where Count(*)[#usn8][$usn1] Remove [{``} Starts With True Starts With True,$@usn6[..{`6esn`}][...e0],12 Ends With @usn5 Ends With 1e1].usn1! Union All Create Unique (:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}) Load Csv With Headers From $usn1[{_usn3}] As ``  Create usn1=((:`5esn`)<-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]-(:`3esn`:@usn5))"),
    octest_legacy:ct_string("Delete Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,1e1 Ends With {usn1} Ends With `2esn`,Count(*)[#usn8][$usn1] Union Create Unique ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),((`` :usn2{``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}})<-[?* 0xabc..01234567]->(`4esn` :``:usn1)<-[`1esn`* ..12{`3esn`:123456789 Is Not Null}]->(`3esn` :#usn7:`6esn`)) Union All Start @usn6=Relationship:#usn7(@usn5=\"d_str\") ,`2esn`=Relationship:@usn6({`5esn`}) Merge #usn7=Allshortestpaths((`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`)) On Create Set `7esn`+=9e1 Starts With {_usn3} Starts With {_usn3} On Match Set Single(`4esn` In False[0.0..{@usn6}] Where 0 Ends With .e0).@usn6! =False[0e0],[{999}[`2esn`],{usn2} Is Not Null Is Not Null,_usn3 Ends With {`7esn`} Ends With 12].usn1! ={#usn7} In 010 In 12"),
    octest_legacy:ct_string("Optional Match `5esn`=((_usn4 :``:usn1)-[?:`6esn`|:`7esn`* 0]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Using Index usn1:`7esn`(#usn7) Merge `6esn`=(({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})) On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] On Create Set (`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[?:`6esn`|:`7esn`* 0x0..7{usn2:usn1 =~1000 =~12}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 {_usn4:1000 Starts With {7} Starts With $7}).usn1! =$@usn6[#usn8..] Union All Merge ({#usn7:0xabc In 9e1,`6esn`:$999 =~$999 =~usn2})-[_usn3?* 0Xa{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`}]-(:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}) Union All Delete Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) In Case usn1[{123456789}..][010..] When {usn1} Contains 123.654 Contains {#usn8} Then 0xabc Contains False Contains {1000} When @usn5[_usn3..{12}][{999}..$7] Then 0X7[#usn7..][12e12..] Else $`8esn` Starts With $123456789 End In (usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 01..]-(`5esn` {#usn8:True Ends With usn1})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}),.e1 In $123456789 In _usn3,0Xa Is Not Null Is Not Null Foreach(usn1 In `3esn`[#usn8]| Match Shortestpath(((#usn8 :`1esn`{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))),@usn5=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))) Using Index _usn4:#usn8(_usn4) Using Join On `4esn`)"),
    octest_legacy:ct_string("Create `3esn`=Shortestpath((:_usn4:`1esn`{`5esn`:010 Ends With 123456789 Ends With .e0,_usn4:9e1[..2.12][..@usn6]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`)) Match ((_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(`5esn` :`5esn`{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]})),usn2=((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Remove Single(`4esn` In False[0.0..{@usn6}] Where {`7esn`}).#usn8!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]) As `` Fieldterminator \"d_str\" Start _usn3=Node:``(\"d_str\")  Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On `8esn`,`4esn`,`1esn` Using Scan `3esn`:`2esn`"),
    octest_legacy:ct_string("Create Unique ((@usn6 $1000)) Detach Delete All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null,None(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6)[[$999 Is Not Null Is Not Null,01 Starts With {0} Starts With $`4esn`,0.e0[#usn7..][$@usn5..]]..Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`})][Case Null In {_usn3} In _usn3 When {`6esn`} Is Not Null Is Not Null Then $#usn8[12e12][0X7] End..Reduce(`2esn`=9e0[..{usn1}],@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|9e12 Is Null Is Null)],1.e1[{1000}..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`7esn` Contains $_usn4 Contains `8esn` As `2esn` Fieldterminator \"d_str\" Unwind $1000[123.654] As @usn5"),
    octest_legacy:ct_string("Return *,`1esn` In 12.e12 In $#usn7 As `1esn`,$usn1 Is Not Null Is Not Null Skip `3esn`[{`1esn`}] Limit 0x0 In {`3esn`} Start _usn4=Node:`4esn`(@usn5={`6esn`}) ,@usn6=Relationship:`2esn`(@usn6={`2esn`}) With  *,[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}),True[..{_usn3}][..999] Order By {@usn5}[{``}][{_usn4}] Ascending Skip `8esn`[{#usn7}..][_usn4..] Where `5esn`[$usn1..$7]"),
    octest_legacy:ct_string("Create Unique `1esn`=(`4esn` :`1esn`{`2esn`:1000 Is Not Null}) Union All With  *,0.e0 In 9e0 In 0e0 As _usn3,Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Order By 0Xa[01..$`1esn`] Asc Skip usn2[..12.e12][..0.0] Where _usn4 =~`1esn` Union All With Distinct $_usn4 Contains Null Contains $0 As `3esn`,[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null] In Filter(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) In [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where `4esn` Starts With 0x0],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By `1esn`[$`8esn`..][True..] Desc Skip `6esn` =~12.e12 =~123456789 Foreach(`8esn` In `2esn`[..$`4esn`][..$@usn5]| Delete $@usn6 Ends With {`6esn`} Ends With 0.e0,#usn7 Contains $#usn8 Contains {`4esn`} Start ``=Rel:`1esn`(usn2={@usn6}) Where {#usn7} =~{usn1})"),
    octest_legacy:ct_string("Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Merge @usn6=((:`3esn`:@usn5{`5esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})) On Create Set @usn6 =#usn7[999..``] On Create Set `8esn` =(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1"),
    octest_legacy:ct_string("Unwind {usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}} Starts With [$`6esn` Starts With _usn4 Starts With `5esn`,{999} Ends With 1000 Ends With 1e1] Starts With Reduce(`7esn`=$#usn7[$`1esn`..{`1esn`}],`1esn` In {``} =~{`2esn`} =~$`8esn`|`6esn` =~12.e12 =~123456789) As _usn4 Union All Return *,{1000} Is Not Null As ``,{1000} Is Not Null As `` Order By usn1[#usn8..0.0] Ascending,{`7esn`}[..0xabc][..0e0] Asc,Reduce(#usn7=$999 In $999,#usn8 In True In `8esn`|$#usn8 Is Not Null) Is Not Null Is Not Null Desc Skip .e0 Contains $@usn6 Union Foreach(`7esn` In [usn2 In 999[{123456789}..999] Where @usn5[_usn3..{12}][{999}..$7]] Starts With [`6esn` In {1000} Is Not Null Where 01] Starts With None(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)| Create Unique ((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})) Return Distinct 0.12 =~$`7esn` =~`8esn` As @usn6 Skip Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]}) Create (:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Delete $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`"),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End As `1esn`  Union All Detach Delete 9e1 Is Not Null Is Not Null Load Csv With Headers From 010 Starts With `3esn` Starts With {usn1} As _usn3 Fieldterminator 's_str' Foreach(#usn8 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Create _usn3=Allshortestpaths(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})-[`4esn`* 1000]-(`3esn` :_usn3:@usn6{`6esn`:7 Starts With `5esn`})),`1esn`=(((usn1 :`4esn`:`3esn`)-[@usn5* 0x0..7]-(`8esn` :_usn3:@usn6)<-[:`5esn`|`3esn`$usn1]-(#usn8 :@usn5:usn2))) Create Unique `2esn`=((:usn2)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})),((`7esn` :@usn5:usn2)<-[:``* 010{`2esn`:'s_str'[..'s_str'][..{#usn7}]}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{@usn5:{7} Starts With $usn2 Starts With $usn2}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})))"),
    octest_legacy:ct_string("Optional Match _usn3=(:_usn4:`1esn`{`5esn`:010 Ends With 123456789 Ends With .e0,_usn4:9e1[..2.12][..@usn6]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`) Using Join On _usn4,`1esn` Where $usn1[{_usn3}] Union All With  $_usn4[123456789..][$`6esn`..] As ``,{`5esn`}[$`8esn`..$`1esn`] As _usn4 Order By (:`2esn`{_usn3:{_usn4} Ends With 12.0 Ends With $@usn6})<-[@usn6:`5esn`|`3esn`* 07..]->({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}) Ends With Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..]) Ends With Extract(@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`) Ascending Skip {`7esn`} =~01234567 =~`7esn` Limit ``[..`3esn`][..{@usn6}] Foreach(_usn3 In Reduce(#usn8=01234567 Is Not Null,`6esn` In {1000} Is Not Null|$`2esn` Contains `5esn` Contains .e1)[[$#usn7[$``..{`7esn`}]]..][[#usn8[1e1..]]..]| Start `7esn`=Node:_usn4({#usn7}) ) Load Csv With Headers From [`7esn` In @usn5[01..`6esn`] Where $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`|$12 Contains .e1][..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 0X0123456789ABCDEF[0e0..$12][00..{12}]|{7}['s_str'..]]][..[1.0 Is Not Null,$`1esn`[0..{_usn3}]]] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start `4esn`=Rel( {usn2}) ,@usn5=Relationship:`1esn`(_usn3={`4esn`})Where usn2[..$`8esn`][..``]"),
    octest_legacy:ct_string("Start `3esn`=Relationship:`6esn`({#usn8}) ,@usn5=Node:`8esn`(`3esn`={999}) Return Distinct Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Union Start `1esn`=Node:_usn4(\"d_str\") ,`5esn`=Node:#usn7('s_str') Load Csv With Headers From {`5esn`} Ends With `2esn` As @usn6  Union With Distinct *,#usn7 Ends With {@usn5} Skip exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End In None(usn2 In 999[{123456789}..999] Where `5esn` In 123.654 In {`6esn`}) Limit {999}[0..{`7esn`}][9e0..{`3esn`}] Where {`7esn`} Remove [0Xa[$#usn8],7 Starts With `5esn`,{0}[$usn2..0.e0][{`4esn`}..True]].#usn7? Return Distinct *,False Contains _usn3 Contains {`5esn`},usn2[$7..$`5esn`] Order By [#usn7 In $@usn6 Contains 0 Contains 0 Where {#usn7} =~{usn1}] Ends With Case When {`6esn`} Is Not Null Then 1000 Is Not Null Is Not Null When 1000 In {`4esn`} Then {`4esn`} Is Null End Desc Skip 2.12 Contains 0.0 Contains $`6esn`"),
    octest_legacy:ct_string("Detach Delete $#usn7 Contains {usn2},.e0 Starts With {0} Starts With 0x0"),
    octest_legacy:ct_string("Remove (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[#usn8{@usn6:07 Is Null}]-(@usn5 :@usn5:usn2{`1esn`:{`3esn`}[`6esn`..],`1esn`:1.e1[0xabc..][.e12..]})<-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{@usn5:{7} Starts With $usn2 Starts With $usn2}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12}).usn1 Match ``=Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Where @usn6[2.12..$123456789][$`8esn`..{123456789}] Union All Foreach(@usn6 In Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})]| Load Csv From {`2esn`}[0] As `8esn`  Match Shortestpath(((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]}))) Where {usn1}[12e12..`6esn`][`7esn`..$`6esn`]) Remove `3esn`:`6esn`:`4esn`,[`7esn` In @usn5[01..`6esn`] Where {``}[2.12]].usn2!,Shortestpath((((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})<-[?:`5esn`|`3esn`* 0Xa{#usn8:{`2esn`}[..$`6esn`][..`3esn`]}]->({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`})))).@usn6?"),
    octest_legacy:ct_string("Return Distinct Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),$12 Contains .e1,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn1 Order By Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) Descending Limit #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``) Union Start `3esn`=Node:#usn8({_usn4}) Where $usn1[0X0123456789ABCDEF...e12] Foreach(_usn3 In 00[usn1..\"d_str\"][{0}..$`8esn`]| Unwind Null[`1esn`..00] As `8esn` Start `8esn`=Node:`7esn`(`4esn`=\"d_str\") ,usn1=Node:`1esn`(`7esn`={_usn3})Where 0e0 Ends With 0 Ends With {`6esn`}) Foreach(usn1 In 1.0[{#usn8}..]| Return *,0X0123456789ABCDEF Is Null As `1esn`,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Asc,{@usn5}[12.0..][$999..] Ascending Skip {`4esn`} Starts With $12 Starts With 0Xa) Union All Merge Allshortestpaths((_usn3 :`4esn`:`3esn`)-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})-[@usn6?:`2esn`* 01..{``:2.12 Contains @usn5 Contains {``},``:{#usn8} In 07 In 0}]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})) On Match Set _usn3+=Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End[[$0 =~_usn3,010]..],usn2+=Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] Return Distinct None(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])[Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})] As `5esn`,$usn1[..$`1esn`] As `1esn`,0.12 =~$`7esn` =~`8esn` As @usn6 Skip 1e1[999..] Limit $_usn4 Contains Null Contains $0 Load Csv From Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From `4esn` Is Null As usn2 Fieldterminator 's_str' Load Csv With Headers From 999[1000..] As @usn5 Fieldterminator \"d_str\" Return Distinct *,{_usn4} =~{`7esn`} =~$#usn7 As usn1,$`2esn` Ends With $`2esn` As `6esn` Order By 0xabc Contains False Contains {1000} Descending,{0}[123456789..$`8esn`] Descending"),
    octest_legacy:ct_string("Foreach(_usn4 In 010 Ends With 123456789 Ends With .e0| Unwind $#usn7 Is Not Null Is Not Null As _usn3) Union All Start `3esn`=Node:`3esn`('s_str') ,`8esn`=Rel:@usn5(usn1='s_str')Where 0 Contains 123.654 With Distinct `5esn` In 123.654 In {`6esn`} As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Desc,{0}[$usn2..0.e0][{`4esn`}..True] Descending Skip All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Limit All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Where `3esn` Contains {`6esn`} Foreach(@usn5 In #usn7(1e1[$@usn5]) In #usn7(Distinct `8esn`[$1000..$#usn8][_usn3..{7}]) In [$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]| Optional Match Allshortestpaths(({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})),(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]->(:usn2{@usn5:usn1 =~1000 =~12})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}) Using Join On #usn7,`1esn`,_usn4 Where 0 Is Not Null Create Unique (`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]})) Union All Return {`7esn`} Ends With Count(*) Ends With {`5esn`} As usn1 Order By 2.12[$`7esn`..] Asc,{_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End Ascending,(`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]}) Starts With {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where ``[$7..``]] Ascending Skip $`2esn`[#usn7]"),
    octest_legacy:ct_string("Delete $`4esn` Ends With $12 Create #usn7=((`6esn` {_usn3:999 Is Not Null Is Not Null})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Remove Reduce(`6esn`=0 Is Not Null,`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|1e1[{`3esn`}][True])._usn4!,All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 12.0 =~0.12 =~999).`6esn`,[$`1esn`[`6esn`..$12][{usn2}..07],$`6esn`[`5esn`..][$12..],1000 Contains 12.e12].`5esn`? Union All Start ``=Rel:#usn7(`8esn`=\"d_str\") Where 01 Remove [`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}|0x0[9e0..][$@usn5..]].#usn8,usn1:usn1 Detach Delete {`5esn`:12e12[$``..],@usn6:$`3esn` Is Null Is Null} =~{_usn4:`1esn` In 12.e12 In $#usn7},Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End],7[_usn4..0.12]"),
    octest_legacy:ct_string("Merge @usn5=(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On `8esn`,`4esn`,`1esn` Using Scan `3esn`:`2esn` Create Unique ((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[usn1:`8esn`|:_usn3* 010]->(:usn1)-[@usn6?]->(usn1 {`8esn`:12e12[..1.e1][..$12]})),Shortestpath(((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})))) Union Create ((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})),``=Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})) Load Csv With Headers From True Starts With `` Starts With 0.e0 As ``  Create Unique Allshortestpaths(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})),``=(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(`8esn` )"),
    octest_legacy:ct_string("With  *,$12[`6esn`][$#usn8] Order By 12 =~$`5esn` =~$_usn3 Desc Limit $`7esn`[..`4esn`] Remove Allshortestpaths(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`1esn`{#usn8:0e0 In .e1})))._usn4! Union With Distinct All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),[usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|0.12 Is Not Null] Starts With Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|$`1esn`[0..{_usn3}]) Starts With {`1esn`:$`5esn` Starts With 1.0 Starts With $usn2,@usn6:010[.e12]},Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] As `1esn` Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending Limit 's_str' Is Not Null Is Not Null Where Count(*)[{usn1}..][$`7esn`..] Union With Distinct *,$12[`6esn`][$#usn8] Order By 12 =~$`5esn` =~$_usn3 Desc Limit $`7esn`[..`4esn`]"),
    octest_legacy:ct_string("Load Csv With Headers From #usn8($7[.e1],`3esn` Starts With @usn5 Starts With {`4esn`}) In `3esn`(Distinct) In Shortestpath((({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}}))) As `8esn` Fieldterminator 's_str' Union Return Distinct 07 Is Null Is Null As _usn3,0.12 Ends With $_usn3 Ends With 07 Skip {`4esn`:.e12 Contains {`6esn`} Contains .e12,`6esn`:@usn5[..$`7esn`][..$`6esn`]} Starts With Single(_usn4 In .e12 Is Not Null Where 999 Is Not Null Is Not Null) Limit {_usn4}[`8esn`..\"d_str\"] Start _usn3=Node( {usn1}) ,`5esn`=Rel:`5esn`({_usn3})Where 0 Is Not Null Union All Merge `3esn`=(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}) On Match Set All(usn2 In 999[{123456789}..999] Where False[Count(*)]).`1esn`! =`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..],usn2+=0.12 =~$`7esn` =~`8esn` Unwind #usn7(1e1[$@usn5]) In #usn7(Distinct `8esn`[$1000..$#usn8][_usn3..{7}]) In [$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`] As `6esn`"),
    octest_legacy:ct_string("Create @usn5=Shortestpath((`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`)),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Union Optional Match (({_usn3:_usn4 =~`1esn`})),`4esn`=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Using Index `6esn`:``(_usn3) Using Scan `6esn`:`7esn` Where .e12 Is Not Null Union Remove [`5esn` In `5esn` In 123.654 In {`6esn`} Where True In `8esn`].#usn8,None(#usn7 In $@usn6 Contains 0 Contains 0 Where {#usn7} =~{usn1})._usn3 Unwind 9e0 Ends With `` Ends With 010 As @usn5 With  *,`2esn` Is Null Is Null As `8esn` Skip usn1 =~9e0 Limit 0X0123456789ABCDEF[..`5esn`][..$`3esn`]"),
    octest_legacy:ct_string("Detach Delete All(usn2 In {@usn5} Where 0[`6esn`][1e1])[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 9e12 Is Null Is Null|@usn5[..$`7esn`][..$`6esn`]]..()<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})],Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Return Distinct `5esn` In 123.654 In {`6esn`} As `2esn`,9e1 =~$`4esn` =~{usn2},{`2esn`}[{123456789}..$#usn7][_usn3..999] As `7esn` Order By 1000 Contains 12.e12 Ascending,`1esn`[..{`4esn`}][..{0}] Asc,12 Contains 9e1 Contains $`8esn` Ascending Skip Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] Limit {`1esn`} Is Null Is Null Remove All(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]).usn1?,Reduce(`6esn`=12 Is Null Is Null,usn2 In 999[{123456789}..999]|$999 Is Not Null Is Not Null).`8esn`? Union All Remove Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where True In $#usn8|0.0).#usn8?,Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))).`5esn`? Create #usn7=Shortestpath((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})),(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`7esn`:`5esn`|`3esn`{`6esn`:1e1[usn1..$123456789][Count(*)..False],`4esn`:$#usn7 =~Count(*) =~@usn5}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})-[``?* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})"),
    octest_legacy:ct_string("Delete Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3} In 010 In 0.e0][..Case {`5esn`} Contains 0 When {_usn4} Then 1e1[1.e1..] When {_usn3} In 010 In 0.e0 Then $0 End][..[@usn5 In 07[{_usn4}..{`4esn`}] Where {`7esn`} =~01234567 =~`7esn`|$7 =~{`7esn`} =~$`6esn`]],True In `8esn` Detach Delete Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] Start @usn5=Node:`6esn`(\"d_str\") ,`1esn`=Rel:usn2(`4esn`={`6esn`})"),
    octest_legacy:ct_string("Detach Delete 0.e0 In 9e0 In 0e0,$_usn4 Ends With False Ends With $#usn8,0[1.0..][.e0..] Start `1esn`=Relationship:@usn5({#usn8}) ,usn2=Relationship:`4esn`(\"d_str\")Where 7 Is Null Is Null"),
    octest_legacy:ct_string("Start `2esn`=Node:`8esn`({usn1}) Where 12e12[$``..] Delete 1.0 Starts With 12"),
    octest_legacy:ct_string("Optional Match `6esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}),_usn3=Allshortestpaths((_usn4 :usn1{`6esn`:{_usn4}})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]})) Using Join On _usn4,`1esn` Return Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) As _usn3,`4esn` Ends With 01 Ends With `5esn` As `6esn` Order By `4esn` Ends With 01 Ends With `5esn` Ascending Skip usn2[0.e0..] Limit {`7esn`} Is Not Null Is Not Null Union Remove Reduce(@usn5=@usn6 Contains {0},`1esn` In {``} =~{`2esn`} =~$`8esn`|$1000[999..][0Xa..]).``?,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2"),
    octest_legacy:ct_string("Load Csv From 0X7 In $@usn6 In {`2esn`} As _usn3  Foreach(`3esn` In #usn8[#usn8..]| Load Csv With Headers From 0.12 Is Not Null As @usn6 Fieldterminator 's_str' With Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`])) Union All Return Distinct {`7esn`} =~01234567 =~`7esn` As `6esn`,12 Ends With @usn5 Ends With 1e1 As `3esn`,2.12 Contains {1000} Contains 1.e1 Order By 01 Starts With \"d_str\" Ascending,Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Asc Detach Delete {_usn4} =~0 =~{12},[Count(*) In {`4esn`},usn2[$7..$`5esn`]][Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1)] Optional Match `5esn`=Shortestpath((((_usn4 :``:usn1)<-[?* 0xabc..01234567]->(`4esn` :``:usn1)-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999})))),usn2=Allshortestpaths((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Where 1e1 Contains @usn6 Contains {`8esn`}"),
    octest_legacy:ct_string("Delete $`2esn`[#usn7][01] Start `1esn`=Relationship:`1esn`(#usn7={999}) Where $`2esn`[#usn7][01] Merge `5esn`=((:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})) Union Foreach(`8esn` In {12}[{@usn6}..``][7..`1esn`]| Optional Match (#usn8 {`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]}),`1esn`=(_usn4 :`3esn`:@usn5{`2esn`:00[$usn2..][0.12..],_usn3:123456789 Is Not Null})-[usn1:#usn8|_usn3]->(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})) With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By {`1esn`} =~{``} =~$`8esn` Desc,$`2esn`[#usn7] Ascending,(`7esn` :``:usn1{#usn7:0[...e1][..$usn2],_usn3:`8esn` =~0})<-[{_usn3:$`3esn` Is Null Is Null}]-(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}) Contains {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Contains Reduce(#usn7=1000 Contains 12.e12,`5esn` In $999[12]|True[..{_usn3}][..999]) Descending Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Where 00[usn1..\"d_str\"][{0}..$`8esn`] Create ((#usn8 :usn1)<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?* 123456789..999]-(_usn3 {_usn4:Null[False..][12.e12..]})) Union Foreach(@usn6 In $`1esn` Contains $#usn7| Match Allshortestpaths(((`8esn` )<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}))) Using Index @usn5:#usn8(`5esn`) Using Index `6esn`:``(_usn3)) Load Csv With Headers From 7 Is Null Is Null As `4esn` Fieldterminator 's_str' Load Csv With Headers From False =~Null =~12.0 As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From $`4esn` As `7esn` Fieldterminator 's_str' Foreach(usn1 In $12 Contains .e1| Match `4esn`=(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[#usn8* 01234567..0Xa{#usn8:$`6esn` Starts With _usn4 Starts With `5esn`}]-(`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789}),Shortestpath(((`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})<-[`6esn`:@usn5|``{usn2}]-(@usn5 )<-[:``* 010]-(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) Using Index `4esn`:_usn4(`1esn`) Where $`4esn` =~{usn1}) Load Csv From $`2esn`[usn2][#usn7] As `` Fieldterminator \"d_str\" Union All Remove Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {12}[{_usn3}..0X7][$7..0]).`2esn`? Union All Delete $999[{`7esn`}..] With Distinct *,0X0123456789ABCDEF Is Null As `1esn`,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Asc,{@usn5}[12.0..][$999..] Ascending Skip {`4esn`} Starts With $12 Starts With 0Xa"),
    octest_legacy:ct_string("Create Unique @usn5=(@usn5 :`6esn`:`4esn`)<-[:`6esn`|:`7esn`]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3}) Union All Return [`8esn`[{#usn7}..][_usn4..]] Contains All(@usn5 In 07[{_usn4}..{`4esn`}] Where $`3esn` In {`1esn`} In 12e12) Contains Extract(`6esn` In {1000} Is Not Null Where 0X0123456789ABCDEF[1.0..]|0.0 Is Null) As usn1 Order By Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3)[{`3esn`:{#usn8} Is Not Null Is Not Null}..][Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`)..] Asc,$12 Contains {`7esn`} Asc,usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Ascending Unwind {`6esn`}[{usn2}..$`3esn`][12.0..0xabc] As @usn5"),
    octest_legacy:ct_string("Optional Match Shortestpath((((`6esn` :usn1)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})-[`7esn`?:#usn7|:``* 7{`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000}]-(`7esn` {`8esn`:_usn4 In usn2})))),@usn6=({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}) Using Scan `8esn`:@usn6 Merge ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]})))"),
    octest_legacy:ct_string("Unwind `1esn` In 12.e12 In $#usn7 As `5esn` Create `8esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})),(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``}) Union Unwind 00[$usn2..][0.12..] As `3esn` Create Unique Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})) Load Csv With Headers From #usn7[999..``] As `3esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create `1esn`=Shortestpath((((`6esn` :usn1)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})-[`7esn`?:#usn7|:``* 7{`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000}]-(`7esn` {`8esn`:_usn4 In usn2})))) Return *,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) Union Merge usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))) Load Csv From {`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete `7esn`[{12}] Start usn1=Node:`1esn`(`7esn`={_usn3}) ,`7esn`=Rel:usn2(usn2='s_str')Where $#usn8 In {12} In $`4esn` Match `6esn`=Shortestpath((:`1esn`{@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(_usn3 :_usn3:@usn6)) Using Index @usn5:#usn8(`5esn`) Using Join On #usn8,_usn3 Where $`2esn` Ends With $`2esn`"),
    octest_legacy:ct_string("Optional Match Shortestpath((`2esn` :`5esn`)<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})),@usn5=(`5esn` {`3esn`:_usn3 In 1.e1}) Using Join On @usn5,@usn5,`` Using Join On `5esn`,`2esn` Union Create ``=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),((#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[`7esn`:`5esn`|`3esn`{`6esn`:1e1[usn1..$123456789][Count(*)..False],`4esn`:$#usn7 =~Count(*) =~@usn5}]-({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`))"),
    octest_legacy:ct_string("With Distinct *,Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}] As _usn4 Order By {#usn7} In 010 In 12 Desc,`1esn` In {999} In $123456789 Ascending Skip `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] Union All Remove (_usn3 {`2esn`:0xabc Ends With 1.0 Ends With $``,`3esn`:.e12 Ends With {`2esn`}})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[`6esn`?:_usn3|:`6esn`{``:$usn1[{_usn3}]}]-(:#usn8:#usn7{@usn5:@usn5 In 00}).`2esn`!,Reduce(`1esn`=#usn7[9e1..$@usn5],@usn5 In 1.0 Starts With 12|True Starts With `` Starts With 0.e0).`3esn`"),
    octest_legacy:ct_string("Remove Allshortestpaths(((`6esn` :#usn7:`6esn`)<-[`8esn`?:usn1|:@usn6]->(`8esn` :`1esn`)-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]}))).`5esn`,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1).`1esn`! Start `5esn`=Node:usn1(\"d_str\") ,`7esn`=Node:_usn3('s_str')Where {`7esn`}[..$`8esn`][..{`8esn`}] Union All With Distinct $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Limit `2esn` In `5esn` Where `1esn` In 12.e12 In $#usn7 Start #usn7=Node:`3esn`('s_str') ,`4esn`=Rel:`5esn`({0}) Return Distinct Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) In [999[1000..]],{`1esn`} Is Null Is Null,Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)] Order By {``} Ends With $`1esn` Ends With {`3esn`} Asc,{@usn5}[{`6esn`}..$0][1000..$1000] Descending,$0 Descending Limit Null[`1esn`..00] Union Create Unique ((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})),Allshortestpaths(((`5esn` {999})<-[?:usn2|_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(usn2 :@usn5:usn2))) Start @usn6=Relationship( {`7esn`}) ,``=Relationship:usn1({usn2})"),
    octest_legacy:ct_string("Merge Shortestpath((usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)) Union All Remove Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`]).`4esn`?,Reduce(_usn3='s_str'[..$123456789][..{1000}],`5esn` In `5esn` In 123.654 In {`6esn`}|'s_str'[..'s_str'][..{#usn7}]).`4esn`,Case When #usn7 Starts With {@usn5} Starts With 07 Then .e1 =~9e12 End.`4esn`?"),
    octest_legacy:ct_string("Return Distinct False =~Null =~12.0 As _usn3,Single(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]) In [#usn8 In True In `8esn` Where 1e1[{`3esn`}][True]] In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 07 Contains @usn5] As `7esn` Order By 07 Starts With 7 Ascending,Reduce(`1esn`=$`7esn` Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|$#usn7[$usn2..@usn6][$`7esn`..{7}]) In Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) In Case _usn3 In 1.e1 When $`4esn` Ends With $12 Then #usn8 Starts With {_usn3} Starts With 123.654 When $`6esn` Is Not Null Is Not Null Then $@usn6 End Descending Skip $12 Starts With $`3esn` Starts With $_usn3 Union All Load Csv From 2.12 Contains @usn5 Contains {``} As _usn4 Fieldterminator \"d_str\" Unwind 0.0[`5esn`][1.e1] As usn1 Union All Foreach(`2esn` In $`4esn`| Start `2esn`=Rel:`1esn`(`7esn`='s_str') ,_usn3=Node:usn1(\"d_str\")) Return *,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567)"),
    octest_legacy:ct_string("Unwind 9e12[{1000}..][1000..] As usn1 Union Start _usn3=Node:`1esn`(usn1=\"d_str\") Where $`8esn` Starts With $123456789"),
    octest_legacy:ct_string("Create usn2=((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})) Union Unwind 07 Is Null As `8esn` Match Shortestpath(((`1esn` {`3esn`:0.12 In `8esn`})<-[`8esn`?:_usn4|`5esn`]->(usn2 $`3esn`))),(({@usn5:0[...e1][..$usn2]})) Using Scan `4esn`:`6esn` Using Index _usn3:`4esn`(usn2)"),
    octest_legacy:ct_string("Create @usn5=((usn1 )-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[`4esn`?:#usn7|:``* 07..]->({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]})),``=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))) Merge @usn5=(:@usn6) On Create Set `7esn`+=1000[9e12][$`1esn`] Union Start #usn7=Node:`3esn`('s_str') Where $`7esn` In $999 In {123456789} Unwind Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) As usn1 Optional Match ((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})-[?* 07..]->(:usn1{#usn8:True Ends With usn1})-[?:``]-(`7esn` :@usn6)),`5esn`=Shortestpath((:#usn8:#usn7{usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) Where $7[0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From True Starts With `` Starts With 0.e0 As ``  Detach Delete Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null,$#usn7 Ends With $999 Ends With {`5esn`},01 Is Null"),
    octest_legacy:ct_string("Remove Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn7[999..``]).usn2,Case 1e1[{`3esn`}][True] When 1.e1[0xabc..][.e12..] Then 0xabc Is Not Null Is Not Null When {#usn7} =~$0 Then 07[0X0123456789ABCDEF] End.usn2,Reduce(_usn3={`1esn`}[\"d_str\"][{1000}],`4esn` In False[0.0..{@usn6}]|0 =~usn1).`3esn`"),
    octest_legacy:ct_string("With  12e12[$``..] As #usn7,$#usn7 Contains Count(*) Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending,_usn4 In usn2 Desc,9e1 Contains {#usn8} Contains `5esn` Asc Skip 0.e0[#usn7..][$@usn5..] Limit {``} Contains 12e12 Contains Null Where `4esn` Ends With 01 Ends With `5esn` Merge ((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))) On Create Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])] Union All Start @usn6=Node:@usn6('s_str') ,`5esn`=Node:#usn7('s_str')Where $`1esn` Ends With {1000} Ends With $`8esn`"),
    octest_legacy:ct_string("Return Distinct *,0X0123456789ABCDEF Is Null As `1esn` Order By @usn5(12e12 In Null In {7}) Contains Case When `5esn`[$123456789][`2esn`] Then $`2esn`[Null][{``}] When {`7esn`}[..0xabc][..0e0] Then {#usn7} =~{usn1} Else #usn8 Is Null End Ascending,[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) Asc,#usn8 Ends With `5esn` Ends With _usn3 Ascending Skip {7} Is Null Is Null"),
    octest_legacy:ct_string("Load Csv With Headers From Allshortestpaths((`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`)) Is Null Is Null As @usn6  Delete `4esn` Starts With 9e12 Starts With 00,0X7[..`2esn`][..@usn5],@usn5[123.654][12.e12] Union All Remove None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3).`3esn`?,usn1:#usn7:`6esn`"),
    octest_legacy:ct_string("Merge ((`` :#usn8:#usn7)<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})) On Match Set usn1+=(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[#usn7{`2esn`:01[$`1esn`..\"d_str\"]}]->(#usn7 :_usn4:`1esn`{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]})[{usn1:.e1[..`2esn`],@usn5:12.e12[..9e12][..1000]}][Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)],`6esn`+=$7 Is Not Null Is Not Null,usn1+=07[_usn3][123456789] Merge #usn7=(`7esn` :_usn3:@usn6) On Create Set `2esn` =Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null Union All With  *,`2esn` Is Null Is Null As @usn5,999[{12}..][$1000..] As @usn5 Skip {usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}} Starts With [$`6esn` Starts With _usn4 Starts With `5esn`,{999} Ends With 1000 Ends With 1e1] Starts With Reduce(`7esn`=$#usn7[$`1esn`..{`1esn`}],`1esn` In {``} =~{`2esn`} =~$`8esn`|`6esn` =~12.e12 =~123456789) Limit 0e0 Ends With 0x0 Ends With $@usn5 Load Csv From Single(usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1) Is Not Null Is Not Null As @usn6 Fieldterminator \"d_str\" Union All Merge `3esn`=Shortestpath(((#usn8 :usn1)-[?* 0X0123456789ABCDEF]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) On Match Set @usn6 =Shortestpath((`4esn` :usn1)-[`4esn`?* 01..]-(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})) Contains (:`2esn`{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1})<-[:usn2|_usn3* 0xabc..01234567]->(:_usn4:`1esn`) Contains (:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(usn1 {_usn3}),_usn4+=0Xa[$#usn8],`8esn`+={123456789}[..Count(*)] On Create Set exists(Distinct 0X0123456789ABCDEF[0e0..0xabc],12.e12 =~$`7esn` =~{``}).@usn6? ={`7esn`} Is Not Null Is Not Null,[0xabc In 9e1].`1esn`! =(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null,``+={`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5] Unwind 123.654 Contains $`4esn` Contains .e1 As usn1 With  *,$usn2 Starts With {`1esn`} As `1esn`,{`8esn`} Is Null Is Null As #usn8 Skip usn2[$7..``][$``..$_usn3] Limit Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789} Where $`2esn` In 0xabc"),
    octest_legacy:ct_string("With  *,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Limit #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] Union Delete 00[.e0][010] With  `2esn` As `1esn`,9e1[9e0],Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] As _usn4 Order By {123456789}[..Count(*)] Desc,$`3esn`[$_usn4][True] Desc,{`7esn`} =~01234567 =~`7esn` Descending Where 2.12 Contains `4esn` Contains .e1"),
    octest_legacy:ct_string("With Distinct 7[_usn4..0.12] As usn2,0X0123456789ABCDEF[..$`1esn`] As @usn6 Order By 999 Is Not Null Is Not Null Desc,{``} Ends With `8esn` Ends With {`6esn`} Asc,{`5esn`}[0X7..] Descending Where 07 Is Null Unwind usn1 Contains $999 As _usn3 Remove Any(#usn7 In {`5esn`} Ends With `2esn` Where {usn1}[$`8esn`][0.e0]).`6esn`"),
    octest_legacy:ct_string("Match #usn7=Allshortestpaths((:usn2{@usn5:usn1 =~1000 =~12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1)),`3esn`=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})) Where 0e0 Is Null Union Return Distinct Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip 0 Is Null Union Return {_usn4} In 9e0 As @usn6 Limit $1000[{#usn8}..] Merge `2esn`=Allshortestpaths((@usn5 :`1esn`)<-[usn1?:@usn5|``* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})<-[usn1?:@usn5|``* 1000]->(@usn6 )) On Match Set {_usn4:`1esn` In 12.e12 In $#usn7}.`8esn`? =0[`7esn`..][$12..],`8esn` =$999 In $999,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End.@usn6! =usn2[{7}..#usn8][{12}..{``}]"),
    octest_legacy:ct_string("With  *,{#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) As `4esn`,Null[.e12..{#usn8}] Skip $@usn6[#usn8..] Limit usn2 Contains \"d_str\" Contains 123.654 Where {``} =~{`2esn`} =~$`8esn` Detach Delete $@usn5 Is Not Null With Distinct $#usn8[$12][`6esn`] As `2esn` Limit Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] Where $7[.e1]"),
    octest_legacy:ct_string("With  00[usn2..`3esn`][0X0123456789ABCDEF..$7],{_usn3:9e12[..#usn7][...e0]}[(usn1 {`8esn`:12e12[..1.e1][..$12]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]->(`` :`5esn`{#usn8:`4esn` Starts With 0x0})][{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null}] As `1esn`,1.0 =~`7esn` =~$`7esn` Order By 9e0 Is Not Null Is Not Null Descending,9e1 Ends With 0xabc Ends With @usn6 Ascending Create ((#usn7 :`7esn`:_usn4)<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})<-[usn2:#usn8|_usn3]->(`8esn` :`4esn`:`3esn`)),#usn7=((_usn3 :`6esn`:`4esn`)) Union All Return *,@usn5[123.654][12.e12],Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) As `5esn` Skip (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..] Limit 123.654[$`5esn`]"),
    octest_legacy:ct_string("Unwind 9e1[{usn2}..$`4esn`] As #usn7 Load Csv From 01234567 =~{@usn5} =~1e1 As #usn8  Union Merge (`5esn` :@usn6) On Create Set usn1+=.e0 Starts With usn2 On Create Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7 Remove Extract(usn1 In #usn8 =~$@usn5 Where {`6esn`} Starts With $1000|$`3esn` Contains .e1).`6esn`!,Reduce(`8esn`=.e0 Starts With usn2,`5esn` In `5esn` In 123.654 In {`6esn`}|Count(*) =~0e0 =~0x0).``!"),
    octest_legacy:ct_string("Optional Match @usn5=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1})) Using Join On `2esn`,`1esn` Using Index `8esn`:`3esn`(`6esn`) Where {usn1}[..{#usn7}] Create Unique (((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[?:usn2|_usn3* 07..]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))),`7esn`=(`3esn` :`3esn`:@usn5)-[{@usn6:$@usn6}]-(`5esn` {`8esn`:0xabc Is Null})-[:`6esn`|:`7esn`]-(`5esn` {`8esn`:1e1 In 0xabc}) Union Unwind 1.0[$usn2..$`5esn`][$`5esn`..\"d_str\"] As #usn7 Start @usn5=Relationship:#usn7('s_str') ,`8esn`=Relationship:`3esn`(#usn8={`5esn`})Where $#usn7 Is Null Merge `2esn`=(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) On Match Set @usn5 =$999 Is Null Is Null Union Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]})) Start `3esn`=Node:#usn8({_usn4})  Delete Allshortestpaths((`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})) Contains [1000 Contains 12.e12,{usn2}[{`7esn`}][$usn2],$7[0X0123456789ABCDEF]] Contains All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})"),
    octest_legacy:ct_string("Return `5esn` In 123.654 In {`6esn`} As `2esn`,9e1 =~$`4esn` =~{usn2},{`2esn`}[{123456789}..$#usn7][_usn3..999] As `7esn` Order By 1000 Contains 12.e12 Ascending,`1esn`[..{`4esn`}][..{0}] Asc,12 Contains 9e1 Contains $`8esn` Ascending Skip Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] Limit {`1esn`} Is Null Is Null Union All Create Unique ({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})-[@usn5?* 01..]-({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}),Shortestpath((_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})) Union All Unwind {@usn5} As `7esn`"),
    octest_legacy:ct_string("Load Csv With Headers From $`2esn` In 0xabc As _usn4 Fieldterminator 's_str' Union All Remove [$`7esn` Ends With usn2].@usn6,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where {7} Starts With $usn2 Starts With $usn2).``,`2esn`({@usn5} In 0X0123456789ABCDEF In 1000).#usn7 Return Distinct 7[_usn4..0.12] As usn2,0X0123456789ABCDEF[..$`1esn`] As @usn6 Order By 999 Is Not Null Is Not Null Desc,{``} Ends With `8esn` Ends With {`6esn`} Asc,{`5esn`}[0X7..] Descending"),
    octest_legacy:ct_string("Remove Extract(`6esn` In {1000} Is Not Null Where 0X0123456789ABCDEF[1.0..])._usn4,#usn8:#usn8:#usn7"),
    octest_legacy:ct_string("Create Unique `2esn`=(((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[?:`1esn`|``* 123456789..999]->(_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))),@usn5=(`5esn` {`3esn`:_usn3 In 1.e1}) Create Allshortestpaths((({`8esn`:12e12[..1.e1][..$12]})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))) Union Remove ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]})-[@usn5?:`2esn`{`4esn`:{`2esn`}[..{123456789}]}]->(:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]})._usn3 Union All Merge _usn3=(((`4esn` :``:usn1)-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[:_usn3|:`6esn`* 0Xa]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))) On Create Set `3esn`+=1e1[..12e12]"),
    octest_legacy:ct_string("Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As `6esn`,Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null As _usn4 Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]})) Union Load Csv With Headers From `7esn`(Distinct) Is Not Null As `3esn`  Remove Filter(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7 In $usn2 In {1000}).``"),
    octest_legacy:ct_string("Load Csv From $@usn5[`2esn`..][#usn7..] As ``  Delete Count(*) Is Not Null Is Not Null,9e1 =~{#usn7} Union Remove (usn2 :`6esn`:`4esn`)<-[?* ..999]->(:``:usn1)<-[`2esn`:`5esn`|`3esn`* 07..{_usn3:0X7 =~$`6esn`,`2esn`:999[$_usn3][@usn6]}]->(`` :#usn8:#usn7)._usn3,Case $0 Starts With `2esn` Starts With {`1esn`} When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else True Starts With 2.12 Starts With {123456789} End.#usn7?,None(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]).`7esn`! Optional Match Shortestpath(((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))) Where $`7esn` Ends With usn2 Union All Merge @usn6=Shortestpath((({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`))) Remove Reduce(`3esn`=9e1 =~{#usn7},#usn7 In {`5esn`} Ends With `2esn`|0X7 Is Null Is Null).#usn8?,`5esn`(Distinct .e12 Is Not Null,@usn6[..{usn2}][..{`5esn`}]).#usn8 Load Csv With Headers From True Starts With `` Starts With 0.e0 As `5esn` "),
    octest_legacy:ct_string("With  *,$`2esn`[usn2][#usn7] As `8esn`,{#usn8} Is Null Is Null As @usn5 Skip 0.12[{usn1}..{1000}][{0}..{#usn8}] Limit ``[$7..``] Where $#usn7 =~Count(*) =~@usn5 Unwind `` =~_usn3 =~{`6esn`} As _usn3 Union All Return Distinct {`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null,True Contains $123456789 Contains {`2esn`} As @usn5,`5esn` Remove Extract(#usn7 In {`5esn`} Ends With `2esn` Where 1.e1 =~123.654 =~$`3esn`).@usn5?,Shortestpath(((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}))).`4esn`?,{@usn5:{#usn8} Ends With {123456789} Ends With #usn8,_usn3:$`1esn` Is Not Null}._usn3! Create Shortestpath(((#usn7 :`2esn`)))"),
    octest_legacy:ct_string("With  #usn8 =~$@usn5 As usn1 Order By True =~_usn3 Descending,Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..] Asc Limit #usn7 Contains $#usn8 Contains {`4esn`} Where $#usn7 Is Null Remove [0X0123456789ABCDEF =~$@usn6 =~$`8esn`]._usn4,[{`7esn`}[{#usn7}..],$usn1 Ends With {123456789} Ends With 1.e1].`3esn`! Union All Create Unique ((`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)),#usn8=((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From usn2[$7..``][$``..$_usn3] As usn1  Foreach(_usn4 In All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null)[($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})..Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End]| Optional Match usn1=Allshortestpaths(((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]}))) Using Index `4esn`:_usn4(`1esn`) Where {1000} Is Not Null Remove (:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})-[?:``]-(`2esn` :#usn7:`6esn`{`7esn`:0xabc =~{`8esn`} =~{_usn3}}).@usn6!,`5esn`:@usn5:usn2,Reduce(`1esn`={`7esn`}[..0xabc][..0e0],@usn5 In 1.0 Starts With 12|{@usn5}).`7esn`!)"),
    octest_legacy:ct_string("Unwind usn2 Ends With 1.0 Ends With $@usn6 As `4esn` With Distinct *,Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Order By 999 Is Not Null Is Not Null Desc,{``} Ends With `8esn` Ends With {`6esn`} Asc,{`5esn`}[0X7..] Descending Limit Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End Is Null Where {1000}[..#usn7][..{#usn8}] Create Unique ``=Allshortestpaths((($7)-[``?:#usn7|:``]-(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))) Union All With  `4esn`[`1esn`][{`8esn`}],{`2esn`} Contains 0.12 Contains 0.0 Limit {`2esn`}[..$`6esn`][..`3esn`] Where False =~Null =~12.0 Detach Delete {`3esn`} Is Null Is Null,Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End[All(#usn8 In True In `8esn` Where .e0 Starts With {0} Starts With 0x0)..All(`4esn` In False[0.0..{@usn6}] Where {`7esn`})],[`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12][Case 0xabc Is Not Null Is Not Null When `4esn`[`1esn`][{`8esn`}] Then usn1[12.e12..$`1esn`][$`2esn`..0Xa] When 12e12[$``..] Then _usn4 =~`1esn` End..Shortestpath(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000)))] Remove {usn1:$123456789[{`1esn`}][0.12]}.#usn8?,(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 0]-(usn1 :`4esn`:`3esn`)-[`1esn`* ..12{`3esn`:123456789 Is Not Null}]-({#usn8:`4esn` Starts With 9e12 Starts With 00})._usn3!,({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[?* 0xabc..01234567{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}).`5esn`? Union All Merge @usn6=Shortestpath((((`3esn` :_usn4:`1esn`)<-[`1esn`?* 0Xa]-(@usn5 :`1esn`)-[?* 00..999]-(:``:usn1{@usn6:07 Is Null})))) On Match Set #usn8+=`1esn` In {999} In $123456789,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 =9e1[010..][`5esn`..],`3esn`+={`7esn`} Unwind #usn7[9e1..$@usn5] As `8esn` Foreach(`` In {usn1} Starts With #usn8| Match usn2=((`7esn` :@usn6)-[_usn3:`5esn`|`3esn`]-(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})),`6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On #usn8,`3esn`,`1esn` Where {`7esn`})"),
    octest_legacy:ct_string("Start `5esn`=Relationship:``(``=\"d_str\") ,_usn3=Node( {usn1})Where `3esn`[{`1esn`}] Merge `4esn`=Shortestpath(((`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[?* 010]->(@usn6 {@usn6:{0}[$0][$#usn7]}))) On Match Set `6esn`+=1.e1[{@usn5}..123.654] On Match Set `2esn`+=$0 Ends With 12.0 Ends With _usn4,usn1 =Reduce(_usn3=$#usn8 In {12} In $`4esn`,_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])[Single(@usn5 In 1.0 Starts With 12 Where True =~_usn3)] With  _usn4[12.e12..] As ``,Extract(`5esn` In $999[12] Where False[0.0..{@usn6}]|0Xa Contains {`4esn`} Contains {`1esn`})[Case $@usn5[`2esn`..][#usn7..] When {`6esn`}[$1000] Then {`3esn`} Ends With $123456789 Ends With {12} When $12[{`5esn`}..] Then #usn8 =~$@usn5 End][None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)],{`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5] Order By [0e0 Is Null,$`1esn` Contains usn2 Contains 1.0,1000[9e12][$`1esn`]] Ends With (@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Descending,Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End Asc Union Merge `7esn`=Shortestpath(((usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`3esn`?:`7esn`]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))) On Match Set `1esn` =`4esn`[$999..][1.0..] On Match Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])] Union All With Distinct $#usn8[$12][`6esn`] As @usn6 Order By $`7esn` =~#usn8 =~{`7esn`} Asc,{7}[$@usn5][123456789] Ascending,usn2[..`8esn`(Distinct 0.0[0.12])][..usn1] Descending Skip `2esn` =~$#usn7 =~_usn4 Limit Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Load Csv With Headers From Case When _usn3 Ends With {#usn7} Then {usn1} Is Null Is Null When `1esn` In 12.e12 In $#usn7 Then 1.0 =~`7esn` =~$`7esn` End In Case When 999 Starts With {``} Then Count(*) In `1esn` In {_usn3} Else {`2esn`} End As `2esn` "),
    octest_legacy:ct_string("Detach Delete Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),{`5esn`} Contains 0,{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]} In `6esn`(12.0 Starts With 00 Starts With 9e1) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where False =~9e0 =~{`5esn`}) Union All Match @usn6=Allshortestpaths((:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Using Scan @usn6:`1esn` Remove Case When $7[0X0123456789ABCDEF] Then #usn8 Ends With 0Xa When {12} Is Null Then $#usn8 Is Not Null Else 123.654 In {`6esn`} In `6esn` End.@usn5 Remove Case When {#usn8} =~$0 Then $12 Is Null When `4esn` Starts With $12 Starts With $12 Then 0X7 =~$`6esn` End.``!,[_usn4 In .e12 Is Not Null Where {usn2}[`2esn`..{`4esn`}][_usn4..``]|`4esn` Is Null].#usn8! Union Start #usn7=Relationship:@usn6(\"d_str\") Where 's_str' Ends With 's_str' Ends With $1000"),
    octest_legacy:ct_string("Load Csv With Headers From 00[$usn2..][0.12..] As `3esn` Fieldterminator 's_str' Remove Case {usn2}[{`7esn`}][$usn2] When $`7esn` =~#usn8 =~{`7esn`} Then 12e12[..1.e1][..$12] When 01[$_usn3..][123.654..] Then $12 Is Null Else $#usn8 In {12} In $`4esn` End._usn4!,Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12|0.12[$0..$``]).@usn6! Union Match `8esn`=(:@usn5:usn2{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null})-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999}) Using Index _usn4:_usn4(_usn3) Union Detach Delete 0.e0 In 9e0 In 0e0,0[`6esn`][1e1],`4esn`(12[$`8esn`..{_usn4}])[Reduce(`1esn`=7 Is Null Is Null,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$#usn8 In {12} In $`4esn`)..] Create usn1=((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0})),(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[?:usn2|_usn3* 07..]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Create @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))"),
    octest_legacy:ct_string("Return _usn3 Ends With {`7esn`} Ends With 12 Order By {`1esn`}[..{_usn4}] Descending,0.12[$0..$``] Descending Skip $`6esn` Ends With {`4esn`} Limit $`8esn`[$usn1][0X7] Load Csv With Headers From 9e0 Is Not Null Is Not Null As `5esn`  Create @usn6=(({`3esn`:_usn3 In 1.e1})),`3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Union All With Distinct *,$`3esn`[`3esn`..],{``}[$`4esn`..`8esn`][$_usn4..$`3esn`] As usn2 Order By 0[`6esn`][1e1] Asc,.e1[..`2esn`] Desc Skip 0 =~usn1 Limit {12} Is Null With Distinct #usn8[1e1..],00[{999}..$#usn7][$0...e0] Order By [usn2 In 999[{123456789}..999]][[$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]..][{usn2:#usn7[$7..{_usn4}],`7esn`:$`1esn` Ends With {1000} Ends With $`8esn`}..] Desc,9e1[`3esn`][$#usn8] Asc,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Asc Skip False =~Null =~12.0 Limit 0e0[00..7][$#usn7..7] With  $999 Starts With $usn1 Starts With {`3esn`} As _usn3 Order By 0.e0 Ends With {@usn5} Ends With 0e0 Descending Skip [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Union Merge (#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})-[`1esn`?]-(usn1 :`4esn`:`3esn`)"),
    octest_legacy:ct_string("Remove (usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}}).@usn6,Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End.`1esn`,Case When `4esn` Starts With 0x0 Then #usn8 Ends With 0Xa When $7 =~{`7esn`} =~$`6esn` Then 010 Ends With 123456789 Ends With .e0 End.`4esn`? Unwind 123.654 Contains $`4esn` Contains .e1 As `4esn` Optional Match usn1=Shortestpath((#usn7 :#usn7:`6esn`)<-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]->(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Using Index `4esn`:`8esn`(usn1) Using Index `3esn`:`3esn`(#usn8) Where $7 =~{`7esn`} =~$`6esn` Union Foreach(@usn6 In {7}[{`7esn`}][$12]| Create ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)))"),
    octest_legacy:ct_string("Optional Match `5esn`=Shortestpath(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)),(((:`3esn`:@usn5{_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(`7esn` {`2esn`:0.e0[$`1esn`..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Using Join On `6esn`,`3esn`,`1esn` Using Index usn2:`4esn`(`5esn`) Where 1e1[$@usn5] Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") ,_usn4=Node:@usn5(`3esn`='s_str') With  *,0X0123456789ABCDEF =~$@usn6 =~$`8esn`,Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As _usn3 Order By 00 Is Null Asc,{#usn7} Contains \"d_str\" Contains {_usn4} Descending Skip 9e1 Contains {#usn8} Contains `5esn` Limit 's_str' Is Not Null"),
    octest_legacy:ct_string("Optional Match Shortestpath((({@usn5:0[...e1][..$usn2]}))),(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[#usn8* 01234567..0Xa{#usn8:$`6esn` Starts With _usn4 Starts With `5esn`}]-(`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789}) Using Index usn2:usn1(#usn7) Where True Contains $123456789 Contains {`2esn`} Create Unique ((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[usn2?:@usn6* 0x0..7]-(_usn4 {`7esn`:0xabc =~{`8esn`} =~{_usn3}})),Allshortestpaths(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Union All Remove Allshortestpaths(({usn1:0 Contains 123.654,`8esn`:0x0 =~$`2esn` =~#usn7})-[_usn3:_usn3|:`6esn`]-(`` {`7esn`:$@usn5[$123456789..][@usn5..]})).usn2!,`5esn`:`7esn`:_usn4 Foreach(`4esn` In [{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`}))| Load Csv With Headers From $#usn7[$usn2..@usn6][$`7esn`..{7}] As `3esn` Fieldterminator 's_str') Remove [usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|999[$_usn3][@usn6]].usn2,`1esn`(.e12 Starts With 12).`2esn`!,Allshortestpaths((usn2 $`2esn`))._usn4!"),
    octest_legacy:ct_string("Optional Match #usn8=Allshortestpaths(({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})),Allshortestpaths(((@usn6 $1000))) Where 1.0 =~`7esn` =~$`7esn` Unwind Allshortestpaths(($#usn7))[..{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}][..Reduce(_usn4=12 Is Null Is Null,`5esn` In $999[12]|{`2esn`}[..``])] As `6esn`"),
    octest_legacy:ct_string("Unwind usn2[..12.e12][..0.0] As usn1 Foreach(`3esn` In 9e1[..2.12][..@usn6]| Unwind 's_str' Ends With 's_str' Ends With $1000 As _usn3) Union All Foreach(#usn8 In 010 Is Not Null Is Not Null| Delete 1e1 Is Not Null Is Not Null Create (((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))) Union Start `8esn`=Rel:@usn5(usn1='s_str') ,`2esn`=Node:`2esn`({`3esn`})"),
    octest_legacy:ct_string("Return *,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)] As #usn8 Skip Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Match _usn4=Shortestpath(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[`5esn`* 01234567..0Xa]-(`2esn` ))),usn2=Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) Using Index _usn4:`1esn`(`8esn`) Using Scan @usn6:`1esn` Start `8esn`=Node( {`8esn`}) Where 0[1.0..$``]"),
    octest_legacy:ct_string("Return Distinct `3esn`[#usn8] Order By $`3esn`[`3esn`..] Ascending,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Ascending,{usn1}[$`8esn`][0.e0] Asc Skip `3esn`[{`1esn`}] Remove [@usn5 In 07[{_usn4}..{`4esn`}]|#usn7 Ends With {@usn5}].``,{`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`}.`2esn`?,_usn3:`1esn` Union All Return *,0x0 =~$`2esn` =~#usn7 As _usn3 Order By Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Ascending,0e0 Is Null Descending,12 Contains 9e1 Contains $`8esn` Desc"),
    octest_legacy:ct_string("Create Unique Shortestpath(((#usn8 :`1esn`{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))),((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})) Match ((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) Using Scan ``:@usn5 Using Join On `6esn`,usn2,`4esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]"),
    octest_legacy:ct_string("Delete None(#usn7 In {`5esn`} Ends With `2esn` Where 9e1[..2.12][..@usn6])[Case When 9e1 =~$`4esn` =~{usn2} Then 123456789 Is Not Null Is Not Null Else 0[`6esn`][1e1] End][count(Distinct $`4esn` Is Null,`2esn`[0Xa][{`8esn`}])],07 Is Null Is Null Union Match Shortestpath((({_usn3:_usn4 =~`1esn`}))),((`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})) Using Scan `8esn`:`1esn` Where 12 Is Null Is Null Remove `3esn`:`3esn`:@usn5,Any(`5esn` In $999[12] Where 0e0 Starts With 's_str').`2esn` Union Foreach(_usn3 In `2esn` =~$0| Optional Match `7esn`=(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}),_usn4=(`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[?:@usn6* 123456789..999]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]}) Load Csv With Headers From 's_str' Ends With 's_str' Ends With $1000 As @usn5 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {1000} =~{7} =~{12} As `` "),
    octest_legacy:ct_string("Foreach(`7esn` In (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}) Is Not Null| Remove All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 In .e1).@usn6?,Case When 0.e0 Ends With $`8esn` Then {`7esn`} Contains 's_str' Contains 01 End.@usn6?,Shortestpath(((`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))).`2esn`?)"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567}))),(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}) Using Scan #usn8:#usn8 Union Detach Delete 0xabc In 9e1,All(usn2 In {@usn5} Where 0[`6esn`][1e1])[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 9e12 Is Null Is Null|@usn5[..$`7esn`][..$`6esn`]]..()<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})],{`7esn`:$@usn5[$123456789..][@usn5..]} Contains [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Contains Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]) Union All Foreach(@usn6 In Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))]| Start `8esn`=Node( {`8esn`}) Where 0[1.0..$``] Create _usn4=((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`}))) With Distinct *,Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})] As usn1,{#usn7} =~$0 Order By {`3esn`}[`6esn`..] Desc,Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) Asc,7 Starts With `5esn` Desc Limit 0x0[9e0..][$@usn5..] Where #usn7 =~{7} Start `1esn`=Rel:@usn5('s_str') ,@usn6=Rel:``(``={_usn4})"),
    octest_legacy:ct_string("Foreach(#usn8 In $@usn5[`2esn`..][#usn7..]| Unwind {1000}[$``..$`6esn`][{@usn5}..$_usn4] As `8esn`) Remove Filter(_usn4 In .e12 Is Not Null Where 9e1 Is Not Null).`4esn`! Create Unique _usn4=(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07}) Union Create ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),((`` :usn2{``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}})<-[?* 0xabc..01234567]->(`4esn` :``:usn1)<-[`1esn`* ..12{`3esn`:123456789 Is Not Null}]->(`3esn` :#usn7:`6esn`)) With Distinct 1e1[1.e1..] Skip `6esn` In _usn3 In 0.0 Limit .e1 =~9e12 Unwind (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As @usn5 Union Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),Allshortestpaths((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[`8esn`* 00..999{`5esn`:{`7esn`}[..1000][..#usn7]}]-(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) With Distinct {#usn8} Starts With {usn1} Starts With 9e12,$@usn5 =~999 =~0e0 As @usn5 Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Limit @usn5[01..`6esn`] Where $999[999..][$_usn4..] Remove Extract(_usn4 In .e12 Is Not Null Where $#usn7 Is Null|0[{`4esn`}..]).`5esn`?,[#usn7 In {`5esn`} Ends With `2esn` Where 9e1[..2.12][..@usn6]|$`1esn` Ends With {1000} Ends With $`8esn`].@usn6?,[`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}|0x0[9e0..][$@usn5..]].#usn8"),
    octest_legacy:ct_string("Start #usn8=Node:`2esn`(`1esn`=\"d_str\") ,`3esn`=Rel:`4esn`(@usn5={`6esn`})Where $`8esn`[#usn7..][0X7..] Unwind $`7esn` Ends With usn2 As `4esn` Union Return `5esn` In 123.654 In {`6esn`} As `2esn`,9e1 =~$`4esn` =~{usn2},{`2esn`}[{123456789}..$#usn7][_usn3..999] As `7esn` Order By 1000 Contains 12.e12 Ascending,`1esn`[..{`4esn`}][..{0}] Asc,12 Contains 9e1 Contains $`8esn` Ascending Skip Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] Limit {`1esn`} Is Null Is Null"),
    octest_legacy:ct_string("Unwind $_usn4 Ends With False Ends With $#usn8 As `3esn` With  $`2esn`[{@usn5}..12.e12][9e0..$`8esn`],{`7esn`} Ends With Count(*) Ends With {`5esn`} As `1esn`,7 Starts With $1000 Skip `3esn` Is Null Is Null Foreach(usn2 In Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null| Return Distinct *,7 Is Null Is Null As _usn3,`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Order By [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending,1e1[{`3esn`}][True] Desc Limit 0xabc Starts With {``} Starts With 0xabc Optional Match `2esn`=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))),((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[:`3esn`|``* 1000]->(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})) Using Index _usn3:`4esn`(usn2))"),
    octest_legacy:ct_string("Create Unique @usn6=(_usn3 :usn2)-[#usn7* 7]->(`7esn` {`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000})<-[:`3esn`|``* 1000]->(_usn4 :_usn4:`1esn`) Union All Start _usn3=Node:`1esn`(usn1=\"d_str\") ,usn1=Rel:_usn4(`3esn`={`2esn`}) Union Merge Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`5esn` :``:usn1)<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(`` :_usn4:`1esn`)) On Create Set `2esn`+=`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Detach Delete _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])],{usn2}[{`7esn`}][$usn2],`1esn`[{usn1}][{12}]"),
    octest_legacy:ct_string("Create Unique ((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})) Merge `7esn`=((({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4))) On Create Set `3esn` =(usn1 :usn2)-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`5esn` :``:usn1)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12) Is Null,@usn6+={`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null,`5esn`+=_usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])]"),
    octest_legacy:ct_string("Optional Match ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]}),(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}))) Using Join On `5esn`,`2esn` Using Index _usn3:`8esn`(#usn8) Where True Starts With 2.12 Starts With {123456789} Create Unique usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),(_usn3 :`2esn`) Merge ((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]}))) On Match Set (`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})<-[`2esn`?]->(:#usn8:#usn7{`7esn`})<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}).@usn6? =$@usn6 Ends With {`6esn`} Ends With 0.e0,`1esn` =Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]]"),
    octest_legacy:ct_string("Return Distinct Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip 0 Is Null Union All Create _usn4=Allshortestpaths(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)),Shortestpath((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})-[?:``]-({`3esn`:.e12 Is Not Null})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})) Start `5esn`=Node:#usn7({``}) ,usn1=Node:usn2(_usn3=\"d_str\") Match ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Using Join On #usn8,_usn3 Using Scan `7esn`:#usn7 Where 01234567 Is Not Null Union Create Unique Shortestpath((((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[?* ..999]->(:@usn5:usn2)))) Optional Match usn1=(:`6esn`:`4esn`$7)-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]}),`4esn`=(((`4esn` :#usn8:#usn7)<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[`3esn`{usn1:$`7esn`[_usn3..][{_usn3}..],_usn4:{`3esn`}[`6esn`..]}]->(_usn3 :`7esn`:_usn4))) Using Scan `4esn`:`3esn` Using Index `7esn`:#usn8(@usn5) Where 1e1 Contains @usn6 Contains {`8esn`}"),
    octest_legacy:ct_string("Merge Shortestpath((((_usn3 :`5esn`)<-[?:usn2|_usn3* 07..]-({`3esn`:_usn3 In 1.e1})<-[?:@usn5|``* 123456789..999{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})))) On Match Set {`8esn`:Null In {_usn3} In _usn3,`4esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]}.usn1? =$`8esn` Starts With $123456789,`8esn` =#usn7 Contains $#usn8 Contains {`4esn`} Foreach(#usn7 In {`6esn`} Starts With 0xabc| Optional Match usn2=Allshortestpaths((:_usn3:@usn6{`2esn`:$`2esn`[#usn7][01]})),((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[usn2?:@usn6* 0x0..7]-(_usn4 {`7esn`:0xabc =~{`8esn`} =~{_usn3}})) Detach Delete {`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]} In `6esn`(12.0 Starts With 00 Starts With 9e1) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where False =~9e0 =~{`5esn`}),None(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])[Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})],$7 Is Null Is Null) Create Shortestpath((`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]}))"),
    octest_legacy:ct_string("Merge Shortestpath(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[?:`6esn`|:`7esn`* 1000]-({``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}})<-[@usn5?:#usn8|_usn3{``:{7} Starts With $usn2 Starts With $usn2,`3esn`:9e12[{1000}..][1000..]}]->(#usn8 :@usn6))) On Create Set `8esn` =(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 On Create Set `8esn` =($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})[..Case 1e1[..12e12] When @usn5[123.654..$_usn4][0.12..$@usn6] Then $@usn5[`2esn`..][#usn7..] End] Remove All(`6esn` In {1000} Is Not Null Where `1esn`[$``][{`5esn`}])._usn3,Reduce(@usn6=0.12[$0..$``],`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}|00[usn1..\"d_str\"][{0}..$`8esn`]).#usn7 Union All With Distinct *,00[0xabc..][`8esn`..] As usn2,exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $`5esn` =~`1esn` =~123.654 Asc,Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] Ascending,0.0[``] Asc Skip 00 Is Null Limit {`4esn`}[0xabc..][010..] Remove Case 's_str'[..$123456789][..{1000}] When usn2[$7..$`5esn`] Then `6esn` Contains `6esn` Contains 9e1 When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then True Starts With 2.12 Starts With {123456789} End.`4esn`!,`1esn`:usn2,#usn7({@usn5}[{``}][{_usn4}],123.654 Starts With `8esn` Starts With @usn5).``? Return Distinct $`4esn` Is Null Is Null Order By {#usn8} Starts With {`4esn`} Starts With 00 Desc,2.12 Is Not Null Is Not Null Asc Skip {`3esn`:.e1[@usn5]}[{@usn5:$`4esn`[.e0][9e0]}..None(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)] Limit $999 Starts With $usn1 Starts With {`3esn`} Union All Start #usn7=Node:`4esn`(usn2='s_str') ,`1esn`=Node:_usn3(usn2=\"d_str\")Where `3esn` =~12e12 Load Csv From [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $`4esn`['s_str'..1000][.e12..010]][Reduce(usn1=07[0X0123456789ABCDEF],usn1 In #usn8 =~$@usn5|0xabc =~{`8esn`} =~{_usn3})] As `1esn`  Start `2esn`=Rel:`1esn`(usn1={`8esn`}) ,`5esn`=Relationship:#usn7({``})"),
    octest_legacy:ct_string("Foreach(`5esn` In Case {`4esn`} Contains \"d_str\" When 01234567[usn1] Then $`4esn`[{@usn5}] When $12[{`5esn`}..] Then {@usn6} Starts With 00 Else `3esn` =~12e12 End Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null]| Return Distinct Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),$12 Contains .e1,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn1 Order By Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) Descending Limit #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``)) Start ``=Relationship:`5esn`(`4esn`=\"d_str\") Where {usn2} Is Not Null Is Not Null Union Start ``=Node:#usn7({#usn7})  Foreach(_usn4 In 010 Ends With 123456789 Ends With .e0| Unwind $#usn7 Is Not Null Is Not Null As _usn3) Delete Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}]"),
    octest_legacy:ct_string("Load Csv With Headers From {@usn6} Contains {_usn3} Contains 1000 As #usn7 Fieldterminator \"d_str\" Union Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As `6esn`,Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null As _usn4 Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]})) Union All Load Csv With Headers From $7[{`7esn`}][12.0] As `` Fieldterminator \"d_str\" Return _usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]),$`8esn` =~$`7esn` =~`3esn` As `8esn` Order By 0.e0 Ends With {@usn5} Ends With 0e0 Ascending,Count(*) In `1esn` In {_usn3} Descending Skip 's_str' =~0xabc =~$@usn5 Limit `2esn`[..$`4esn`][..$@usn5] Load Csv With Headers From Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Is Not Null Is Not Null As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From False =~9e0 =~{`5esn`} As #usn7 Fieldterminator \"d_str\" Remove Filter(`5esn` In $999[12] Where $usn1[..$`1esn`]).@usn6,`2esn`:@usn5:usn2 Foreach(`8esn` In 999[.e1..{`5esn`}][{#usn7}..{`1esn`}]| Unwind $`7esn` Contains 9e12 Contains `2esn` As #usn8)"),
    octest_legacy:ct_string("Foreach(`6esn` In None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 0X0123456789ABCDEF[0e0..$12][00..{12}]) Contains Case When 0[0xabc] Then {@usn6}[..0.e0][..$0] End Contains Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)| Detach Delete 999[{123456789}..999],{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc),@usn5 Ends With `8esn` Create Unique (`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})) Union Delete Null Is Null Is Null,12e12[0X0123456789ABCDEF..{`2esn`}],$`` Ends With _usn3 Ends With $@usn5 Union Remove Extract(@usn5 In 1.0 Starts With 12 Where #usn8 =~$@usn5)._usn4?,Reduce(`3esn`=$12 Is Null,`5esn` In $999[12]|@usn5[_usn3..{12}][{999}..$7]).`4esn`?,Reduce(_usn3=$#usn7 Starts With {`2esn`} Starts With @usn6,@usn6 In 0xabc Ends With 1.0 Ends With $``|1e1[..12e12]).usn1 Start `7esn`=Relationship( {7}) ,`6esn`=Relationship:`2esn`(@usn6=\"d_str\")Where $123456789 Ends With 1e1"),
    octest_legacy:ct_string("Start #usn7=Node:`6esn`(#usn8={12})  Delete Shortestpath((({@usn5:0[...e1][..$usn2]})-[@usn6:`1esn`|``* 0]->(`4esn` :`6esn`:`4esn`)<-[#usn8{@usn6:07 Is Null}]-({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}))) In [{#usn7} Contains {`7esn`} Contains $`3esn`,123.654 In {12} In ``,True =~_usn3] Return *,{1000} Ends With $123456789 Ends With 12 As @usn6 Order By 999[{123456789}..999] Ascending,Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End] Ascending,$@usn5 Is Not Null Ascending Union Optional Match `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`6esn`=(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Using Index @usn6:@usn6(@usn6) Union All Unwind Allshortestpaths(((:#usn8:#usn7)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[@usn6:`1esn`|``* 0]->(`4esn` :`6esn`:`4esn`))) In Case $7[{`7esn`}][12.0] When 00[$usn2..][0.12..] Then True In `8esn` When $#usn7 Is Not Null Is Not Null Then Count(*) In `1esn` In {_usn3} End In None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12) As `5esn` Foreach(`` In $`7esn` =~#usn8 =~{`7esn`}| Return *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]] Limit 1e1 Is Not Null Is Not Null With  *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Where `1esn` In {`4esn`})"),
    octest_legacy:ct_string("Create _usn3=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}) Optional Match Shortestpath((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})),Allshortestpaths((:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})<-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]-(_usn4 {`2esn`:`8esn`[1000..#usn8]})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Using Join On #usn8 Using Join On `2esn`,`1esn` Unwind $`8esn` Ends With 12 Ends With 0xabc As `2esn` Union All Foreach(usn1 In Case When @usn6 Contains {0} Then 12 =~$`5esn` =~$_usn3 When {usn2}[{`7esn`}][$usn2] Then $12[`6esn`][$#usn8] Else \"d_str\" Ends With 0e0 Ends With {usn2} End Is Null Is Null| Unwind {`1esn`}[`2esn`..] As #usn7) Union Remove ['s_str' =~0x0 =~{#usn8},0.e0 Ends With {@usn5} Ends With 0e0].`5esn`! Foreach(`1esn` In Null =~`4esn` =~9e0| Start ``=Node:`2esn`({1000}) Where Null Starts With {_usn4})"),
    octest_legacy:ct_string("Create Unique `4esn`=Allshortestpaths(((`1esn` :@usn6{_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))),`4esn`=Shortestpath(((`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[?* 010]->(@usn6 {@usn6:{0}[$0][$#usn7]}))) Union With  $1000 Contains $`2esn` Contains 12 As `2esn`,{@usn5} In $`5esn` As #usn7,[`8esn`[{#usn7}..][_usn4..]] Contains All(@usn5 In 07[{_usn4}..{`4esn`}] Where $`3esn` In {`1esn`} In 12e12) Contains Extract(`6esn` In {1000} Is Not Null Where 0X0123456789ABCDEF[1.0..]|0.0 Is Null) As usn1 Skip (`3esn` {`7esn`:12[`3esn`..][0X0123456789ABCDEF..]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}) Is Null Is Null Limit `1esn`[..{`4esn`}][..{0}] Where $0 Detach Delete 0X0123456789ABCDEF[..`5esn`][..$`3esn`],Null[`8esn`],$`6esn` In $#usn8 Union All Create `1esn`=Shortestpath((`` )),`8esn`=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))"),
    octest_legacy:ct_string("With Distinct {@usn6} Starts With .e1 As `3esn`,\"d_str\"[Count(*)..] Order By [usn2 In 999[{123456789}..999]][[$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]..][{usn2:#usn7[$7..{_usn4}],`7esn`:$`1esn` Ends With {1000} Ends With $`8esn`}..] Desc,#usn8 Is Null Desc,$`5esn` =~`1esn` =~123.654 Desc Limit {_usn4} =~0 =~{12} With Distinct exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As #usn8 Merge ((({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})))"),
    octest_legacy:ct_string("Unwind False Contains {``} Contains $`2esn` As `6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {999} =~7 =~{usn1} As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start `4esn`=Relationship:#usn7('s_str') Where $12[0xabc..][12e12..] Union With  {`1esn`}[01234567..][@usn5..] As @usn6 Return Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],`2esn` =~$#usn7 =~_usn4 As `7esn` Skip {123456789}[..Count(*)] Limit 2.12 Contains $#usn7 Contains {`6esn`} Union Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As `7esn` With Distinct 0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$_usn4 Contains Null Contains $0 As `3esn` Order By `4esn` Is Not Null Descending Limit False =~9e0 =~{`5esn`} Create Unique #usn8=((#usn8 :@usn6)<-[`6esn`{``:$0,`4esn`:`4esn` Starts With 9e12 Starts With 00}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]})),(((`8esn` {#usn7:Count(*)[#usn8][$usn1]})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})<-[?:`5esn`|`3esn`* 0Xa{#usn8:{`2esn`}[..$`6esn`][..`3esn`]}]->({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $`1esn` Contains usn2 Contains 1.0 As #usn7  Start `4esn`=Node:`1esn`(`7esn`='s_str') ,_usn4=Rel:`7esn`(`6esn`=\"d_str\")Where .e0 Starts With {0} Starts With 0x0 Return `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] As usn2,$1000[{#usn8}..],None(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])[Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})] As `5esn` Skip (`7esn` :``:usn1{#usn7:0[...e1][..$usn2],_usn3:`8esn` =~0})<-[{_usn3:$`3esn` Is Null Is Null}]-(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}) Contains {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Contains Reduce(#usn7=1000 Contains 12.e12,`5esn` In $999[12]|True[..{_usn3}][..999])"),
    octest_legacy:ct_string("Remove _usn4:`1esn`,(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})._usn3?,Allshortestpaths(((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1}))).`6esn` Load Csv With Headers From Case When _usn3 Ends With {#usn7} Then {usn1} Is Null Is Null When `1esn` In 12.e12 In $#usn7 Then 1.0 =~`7esn` =~$`7esn` End In Case When 999 Starts With {``} Then Count(*) In `1esn` In {_usn3} Else {`2esn`} End As `2esn` "),
    octest_legacy:ct_string("Detach Delete _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])],{usn2}[{`7esn`}][$usn2],`1esn`[{usn1}][{12}] Unwind 0xabc =~{`8esn`} =~{_usn3} As #usn8"),
    octest_legacy:ct_string("Create Unique ``=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),_usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))) Optional Match @usn5=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1})) Using Join On `2esn`,`1esn` Using Index `8esn`:`3esn`(`6esn`) Where {usn1}[..{#usn7}] Match ((:`3esn`:@usn5{_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})),Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(:`2esn`{`4esn`:$999[$12..][.e0..]})<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0})))) Union All Foreach(@usn5 In `5esn` Starts With {999}| Load Csv With Headers From Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where @usn6[..{usn2}][..{`5esn`}]) Is Null As `5esn` ) Foreach(`2esn` In usn1 Is Not Null Is Not Null| Create Unique ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)),`6esn`=Shortestpath((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ))) Union Foreach(#usn8 In 2.12[$`7esn`..]| With  12.e12 Starts With `8esn` Starts With 9e12 As ``,{#usn7} =~$0) Create ((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* ..999]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})),@usn5=(`5esn` {`3esn`:_usn3 In 1.e1}) Create (((`5esn` :@usn6)-[?:usn1|:@usn6* ..12$`6esn`]->({#usn7:0xabc In 9e1,`6esn`:$999 =~$999 =~usn2})-[``?:#usn7|:``]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})))"),
    octest_legacy:ct_string("Remove Allshortestpaths((({``:{`5esn`} Ends With `2esn`}))).`8esn`,usn2(Distinct $`5esn` Starts With 1.0 Starts With $usn2,$`7esn` Ends With $1000 Ends With {999}).`` Create `3esn`=(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})-[`1esn`?:#usn8|_usn3* 0x0..7]->(#usn7 :`2esn`),@usn6=Shortestpath((((`3esn` :_usn4:`1esn`)<-[`1esn`?* 0Xa]-(@usn5 :`1esn`)-[?* 00..999]-(:``:usn1{@usn6:07 Is Null})))) Union Delete {usn1:$0 =~_usn3,_usn3:1.0 Starts With 12} Delete 0.12[..0][..{``}],{`3esn`} Is Null Is Null"),
    octest_legacy:ct_string("Detach Delete $`1esn` Contains $#usn7,@usn6[2.12..$123456789][$`8esn`..{123456789}],0X0123456789ABCDEF[0e0..0xabc] Foreach(`4esn` In True Starts With `` Starts With 0.e0| Start `1esn`=Node:`1esn`(`7esn`={_usn3}) ,``=Node:#usn7({#usn7})Where $`2esn` In 0xabc) Start #usn8=Node:`4esn`(`3esn`=\"d_str\") ,@usn5=Relationship:#usn7('s_str')Where False[0.0..{@usn6}] Union All With  *,{1000} Ends With $123456789 Ends With 12 As @usn6 Order By 999[{123456789}..999] Ascending,Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End] Ascending,$@usn5 Is Not Null Ascending Delete 0x0 Ends With 123.654 Ends With 01,01[@usn5..{_usn4}] Merge `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Union All Optional Match `2esn`=Allshortestpaths(((:#usn7:`6esn`{`5esn`:@usn5 In 00,`6esn`:0.e0[$`1esn`..]}))) Where 's_str' =~0x0 =~{#usn8} Delete Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)] Unwind {_usn3}[..$usn2][..$`6esn`] As usn2"),
    octest_legacy:ct_string("Return {1000}[0e0][{usn1}],{@usn5} In 0X0123456789ABCDEF In 1000,$`2esn`[Null][{``}] Create Unique #usn8=Allshortestpaths(({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})),Allshortestpaths(((@usn6 $1000))) Union Unwind Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As `2esn` Foreach(`3esn` In _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])]| Start `8esn`=Node:usn2({`2esn`}) Where 's_str' Is Not Null Create Unique ((`1esn` :@usn6{@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4)))"),
    octest_legacy:ct_string("Foreach(usn1 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn`) Foreach(#usn7 In 12e12[0X0123456789ABCDEF..{`2esn`}]| Load Csv With Headers From Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) As `7esn` Fieldterminator 's_str' Return *,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),@usn6[9e12..] As `7esn` Order By 0X0123456789ABCDEF[..$`1esn`] Asc,$`5esn` =~`1esn` =~123.654 Desc Skip {`7esn`} =~01234567 =~`7esn`) Unwind \"d_str\" In 2.12 As `8esn` Union Start `6esn`=Rel:@usn6(`8esn`={`7esn`}) Where {999} Ends With 1000 Ends With 1e1 Union All Foreach(`3esn` In $`2esn` Ends With 9e1 Ends With ``| Load Csv From Allshortestpaths((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|{`5esn`} Contains 0)][Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4})] As `1esn` Fieldterminator 's_str' Create `1esn`=(`6esn` :#usn8:#usn7)-[?* 0{``:0[1.0..][.e0..]}]-(#usn7 {``:1.0 =~`7esn` =~$`7esn`})-[@usn6:@usn5|``* 07..]-(`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})) Create Unique ((:`1esn`{@usn5:{`4esn`} Is Null})<-[* 0Xa{@usn5:`2esn`[0Xa][{`8esn`}],`5esn`:0Xa[01..$`1esn`]}]->(`4esn` :`1esn`{`2esn`:1000 Is Not Null}))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})))"),
    octest_legacy:ct_string("Load Csv From (`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000 As usn1 Fieldterminator 's_str' Remove (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[#usn8{@usn6:07 Is Null}]-(@usn5 :@usn5:usn2{`1esn`:{`3esn`}[`6esn`..],`1esn`:1.e1[0xabc..][.e12..]})<-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{@usn5:{7} Starts With $usn2 Starts With $usn2}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12}).usn1 Union All Merge Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) On Create Set _usn4+=0X7[..`2esn`][..@usn5] On Create Set [`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]|0.e0[#usn7..][$@usn5..]].`3esn`? =[@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}],`3esn` =Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null Union Detach Delete [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Starts With Single(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Merge `4esn`=(`7esn` :`6esn`:`4esn`) On Match Set Reduce(usn1=07[{_usn4}..{`4esn`}],`5esn` In $999[12]|Count(*) In {`4esn`}).`7esn` =0X7 Is Not Null Is Not Null,Any(usn2 In 999[{123456789}..999] Where @usn5[_usn3..{12}][{999}..$7])._usn4? ={usn2} =~{0},usn2+={@usn5}[01234567][{1000}] On Match Set `7esn` =$12 =~{12},#usn8 =[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3} In 010 In 0.e0][..Case {`5esn`} Contains 0 When {_usn4} Then 1e1[1.e1..] When {_usn3} In 010 In 0.e0 Then $0 End][..[@usn5 In 07[{_usn4}..{`4esn`}] Where {`7esn`} =~01234567 =~`7esn`|$7 =~{`7esn`} =~$`6esn`]]"),
    octest_legacy:ct_string("Optional Match (`1esn` :@usn5:usn2) Using Scan ``:_usn3 Where $7[.e1] Unwind _usn3[$123456789..] As `7esn` Union With  0X0123456789ABCDEF[0e0..$12][00..{12}],$@usn6 Ends With {`6esn`} Ends With 0.e0,7 Starts With $1000 As @usn6 Order By $usn2 Is Not Null Asc,0e0 In .e1 Descending Where $`7esn` Ends With usn2 Delete 1000[..$``][..123456789],0X0123456789ABCDEF[{12}..`6esn`][{usn2}..$7],Null In 1e1 In {999} Create #usn7=Shortestpath((`` :#usn8:#usn7)) Union Merge `1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Foreach(#usn8 In {`6esn`}[0.e0..$123456789]| Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Delete $`2esn`[#usn7][01],0Xa[$#usn8])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {12} Is Null As usn2 Fieldterminator \"d_str\" Match _usn4=((:_usn4:`1esn`{_usn3:`3esn` Is Null Is Null})-[?* ..999]-(#usn8 {``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07})-[* 123456789..999]->(:@usn6)),`4esn`=Shortestpath(((:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Where .e0 In 9e1 In $_usn3 Create Unique Shortestpath(((#usn8 :`1esn`{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))),((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]}))"),
    octest_legacy:ct_string("Create (`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}) Match `1esn`=Shortestpath((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 )),usn2=((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})) Using Scan `2esn`:`5esn` Using Join On `3esn`,`4esn` Where 7 Starts With `5esn` Union Create Shortestpath(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)),Allshortestpaths(((`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))) Return usn1 =~9e0 As `` Order By {`6esn`} Starts With $1000 Ascending,True[12e12..] Ascending Skip $_usn4[$_usn4..01234567] Limit Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null Union Foreach(`4esn` In 1e1[1000]| Load Csv With Headers From $usn2[$`4esn`..] As usn2  Optional Match `3esn`=Shortestpath((((_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[@usn6:`5esn`|`3esn`* 07..]->({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``* 7]-(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})))),(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Using Index `2esn`:`8esn`(#usn8) Using Scan #usn8:`1esn`) Detach Delete {usn1:$0 =~_usn3,_usn3:1.0 Starts With 12} Create Unique @usn6=((:``:usn1{usn2:010 Contains $`5esn`})-[?:`5esn`|`3esn`* ..12]-(`1esn` {`3esn`:0.12 In `8esn`})<-[@usn5{@usn5:00 =~.e12}]->({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})),Shortestpath((:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[`5esn`?{`3esn`:{@usn6}[..0.e0][..$0]}]-(:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})<-[* 01..{_usn4:Count(*)[#usn8][$usn1]}]->($`3esn`))"),
    octest_legacy:ct_string("Unwind Reduce(`7esn`=0X7[#usn7..][12e12..],`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}|_usn3[..0xabc][..@usn5])[..[{`2esn`} Contains 0.12 Contains 0.0,{12} Is Null,{`2esn`} In `5esn` In usn2]] As `6esn` Union All With Distinct *,Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)] Skip Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..] Where `6esn` Ends With 0x0 Ends With 12 Merge @usn5=({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`) On Create Set _usn3+={#usn7} Starts With $`1esn` Starts With 07,@usn5+={@usn6}[{usn2}..],`4esn`+=count(Distinct $`6esn` Is Not Null Is Not Null,010 Ends With 123456789 Ends With .e0) Contains {#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`} Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]|_usn3[$123456789..]) Union All Start #usn8=Rel:`3esn`(`4esn`={123456789}) ,usn2=Node:`1esn`(usn1=\"d_str\") With  *,{7}['s_str'..] As `2esn` Order By {_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End Desc,123456789[{@usn6}..][9e0..] Ascending Limit Allshortestpaths(($#usn7))[..{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}][..Reduce(_usn4=12 Is Null Is Null,`5esn` In $999[12]|{`2esn`}[..``])] Where $#usn8[12e12][0X7] Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") ,_usn4=Node:@usn5(`3esn`='s_str')"),
    octest_legacy:ct_string("Optional Match @usn6=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))) Where 0Xa[..0.12] Create Shortestpath((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[`2esn`?* 7{@usn5:@usn5 In 00}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(#usn7 :_usn4:`1esn`{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}))))"),
    octest_legacy:ct_string("Load Csv With Headers From [0X0123456789ABCDEF Starts With #usn7,``[{12}],{999} =~7 =~{usn1}] =~Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn7[999..``]) =~[usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`] As `5esn`  Delete 1.0 Starts With 12 With  Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],'s_str' Contains $_usn4 Contains $`7esn` As `8esn`,$`8esn` Contains {`7esn`} Contains $`4esn` As @usn6 Limit Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Union With Distinct *,{usn2}[{`7esn`}][$usn2] As @usn6 Order By $_usn4[123456789..][$`6esn`..] Asc,True[12e12..] Desc Skip 0.12 Ends With $_usn3 Ends With 07 Limit Case When 12[0X0123456789ABCDEF..][Count(*)..] Then 's_str'[..$123456789][..{1000}] End[Reduce(usn2={`6esn`} Is Not Null Is Not Null,#usn7 In {`5esn`} Ends With `2esn`|07[_usn3][123456789])..Reduce(@usn6=$`7esn` =~#usn8 =~{`7esn`},#usn7 In {`5esn`} Ends With `2esn`|{@usn5})] Remove {_usn3:123.654[2.12..][{`7esn`}..]}.`6esn`!,(`8esn` :`1esn`)-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]}).`5esn`?,[`4esn` In False[0.0..{@usn6}] Where 0xabc In {`6esn`} In $@usn6|`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]]._usn3 Load Csv From {`2esn`}[0] As `8esn`  Union Foreach(@usn5 In #usn7(1e1[$@usn5]) In #usn7(Distinct `8esn`[$1000..$#usn8][_usn3..{7}]) In [$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]| Optional Match Allshortestpaths(({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})),(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]->(:usn2{@usn5:usn1 =~1000 =~12})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}) Using Join On #usn7,`1esn`,_usn4 Where 0 Is Not Null Create Unique (`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]})) Load Csv With Headers From 12.0 Is Null Is Null As `8esn` Fieldterminator 's_str' Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Index ``:@usn6(`6esn`)"),
    octest_legacy:ct_string("Foreach(usn1 In All(_usn4 In .e12 Is Not Null Where 0xabc Contains False Contains {1000}) Is Null Is Null| Load Csv From [`4esn` Is Not Null,$`6esn`[$7..{`3esn`}],@usn6[9e12..]] =~Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End As usn1 Fieldterminator \"d_str\") Match `3esn`=Shortestpath((((_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[@usn6:`5esn`|`3esn`* 07..]->({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``* 7]-(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})))),(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Union All Delete Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End],{1000}[9e0][`3esn`] Remove None(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5).`6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From [@usn5 In 1.0 Starts With 12 Where $`8esn` In {`2esn`} In $0|{_usn4} Is Not Null][Filter(`7esn` In @usn5[01..`6esn`] Where .e1[07..`5esn`][$12...e0])] As usn1 Fieldterminator \"d_str\" Return {``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] As #usn8 Order By 1000 Starts With {7} Starts With $7 Descending Limit 07 Starts With \"d_str\" Starts With $12 With  Count(*) Is Not Null Is Not Null Order By [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12][Case 0xabc Is Not Null Is Not Null When `4esn`[`1esn`][{`8esn`}] Then usn1[12.e12..$`1esn`][$`2esn`..0Xa] When 12e12[$``..] Then _usn4 =~`1esn` End..Shortestpath(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000)))] Desc,0.e0 Starts With 0x0 Starts With {12} Descending Skip Case {`6esn`}[0.e0..$123456789] When _usn3 In 1.e1 Then $999[$12..][.e0..] Else usn2[01234567..] End In Case $123456789[{`1esn`}][0.12] When 12.0[{`6esn`}..123.654][@usn5..usn1] Then $`7esn` Contains 9e12 Contains `2esn` When 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Then 's_str' =~0xabc =~$@usn5 Else 1e1[..12e12] End In {`7esn`:{12} Is Null} Limit [usn1 In {usn2} Contains {123456789} Contains 0Xa Where {@usn6} Starts With 00|#usn7 Ends With {@usn5}] Is Null Is Null Where True Starts With 2.12 Starts With {123456789}"),
    octest_legacy:ct_string("Start _usn3=Node:``(\"d_str\")  Load Csv With Headers From _usn3[$123456789..] As `1esn` Fieldterminator 's_str' Unwind 's_str' Ends With 's_str' Ends With $1000 As _usn3 Union Merge ((#usn8 :@usn5:usn2)-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) On Match Set `1esn`:_usn4:`1esn`,Case 0X0123456789ABCDEF[0e0..0xabc] When {`1esn`} =~{@usn6} =~`2esn` Then 2.12 Contains $#usn7 Contains {`6esn`} Else $#usn7 Starts With $`4esn` End.`7esn`? =Extract(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) Contains Case When $`1esn`[0..{_usn3}] Then $_usn3[@usn6..][{``}..] When 999[1000..] Then {1000}[..#usn7][..{#usn8}] Else Count(*) =~0e0 =~0x0 End Contains Reduce(#usn7=$#usn7 =~Count(*) =~@usn5,@usn5 In 1.0 Starts With 12|2.12 Contains 0.0 Contains $`6esn`),``(Distinct `2esn` =~$#usn7 =~_usn4).`1esn`? =All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 Ends With 0e0 Ends With $123456789)[Case $`2esn`[Null][{``}] When @usn6[..{usn2}][..{`5esn`}] Then 0 Contains 123.654 End..Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})))][{`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000}..Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})))] On Match Set Allshortestpaths(((`` :usn1{``:$999 Is Not Null Is Not Null,`4esn`:.e12 Ends With {`2esn`}})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]}))).`8esn` =$`5esn`[123456789][12],Case When {#usn8} =~$0 Then $12 Is Null When True =~_usn3 Then Count(*)[{usn1}..][$`7esn`..] End.@usn6? =[$`4esn` Ends With $12,$`6esn` Is Null Is Null,`8esn` =~{`3esn`} =~9e12] =~Reduce(@usn6=$usn2 =~`6esn` =~{usn1},usn1 In {usn2} Contains {123456789} Contains 0Xa|12.0 Starts With 00 Starts With 9e1) =~Single(`6esn` In {1000} Is Not Null Where Count(*) In {`4esn`}),_usn4+=Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}] Create Unique `1esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),Shortestpath(((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})))"),
    octest_legacy:ct_string("Delete 0Xa[01..$`1esn`],.e0 Contains $@usn6"),
    octest_legacy:ct_string("Remove @usn5:#usn8:#usn7,{#usn7:@usn6[..{usn2}][..{`5esn`}],`5esn`:{0}[$usn2..0.e0][{`4esn`}..True]}.#usn7?,`6esn`:_usn3:@usn6 Foreach(`2esn` In `5esn` =~0e0| Create Unique `1esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),Shortestpath(((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Load Csv With Headers From 0e0 In .e1 As `6esn` Fieldterminator \"d_str\") Detach Delete [{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])],`5esn`[$usn1..$7] Union All Merge `6esn`=Allshortestpaths((((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn6?:_usn4|`5esn`* ..12]->(_usn3 :`4esn`:`3esn`)<-[`6esn`:@usn5|``{usn2}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})))) On Match Set `` =7 Is Null,Case When 2.12 Contains `4esn` Contains .e1 Then #usn7 Contains 0X0123456789ABCDEF When Count(*) In {`4esn`} Then 1e1[1000] Else 1.0 End.`7esn` ={`7esn`:$@usn5[$123456789..][@usn5..]} =~{_usn4:True Starts With `` Starts With 0.e0} =~[usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..]|'s_str' =~0x0 =~{#usn8}],`1esn`+=00 Starts With `6esn` Starts With $1000 On Match Set Single(`4esn` In False[0.0..{@usn6}] Where 0 Ends With .e0).@usn6! =False[0e0],[{999}[`2esn`],{usn2} Is Not Null Is Not Null,_usn3 Ends With {`7esn`} Ends With 12].usn1! ={#usn7} In 010 In 12"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))),((:usn2{`2esn`:{`3esn`} Is Null Is Null,@usn5:00 =~.e12})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[?$@usn6]-({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})) Union All Create `6esn`=(`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}),#usn7=(`7esn` :_usn3:@usn6) Delete None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null,$#usn7 Starts With $`4esn`,Reduce(#usn7=$999 In $999,#usn8 In True In `8esn`|$#usn8 Is Not Null) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create @usn5=Shortestpath(((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]})))),usn1=Shortestpath((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})-[?:``]-({`3esn`:.e12 Is Not Null})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})) Create (`4esn` {`4esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}) Union All Detach Delete $#usn7[$usn2..@usn6][$`7esn`..{7}]"),
    octest_legacy:ct_string("Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As `7esn` With Distinct 0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$_usn4 Contains Null Contains $0 As `3esn` Order By `4esn` Is Not Null Descending Limit False =~9e0 =~{`5esn`} Create Unique #usn8=((#usn8 :@usn6)<-[`6esn`{``:$0,`4esn`:`4esn` Starts With 9e12 Starts With 00}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]})),(((`8esn` {#usn7:Count(*)[#usn8][$usn1]})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})<-[?:`5esn`|`3esn`* 0Xa{#usn8:{`2esn`}[..$`6esn`][..`3esn`]}]->({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`}))) Union All Start `8esn`=Relationship:#usn7('s_str')  Start `7esn`=Node:`6esn`({#usn8}) ,`1esn`=Relationship:@usn5({#usn8})Where {usn2} Contains {123456789} Contains 0Xa"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 999[.e1..{`5esn`}][{#usn7}..{`1esn`}] As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Reduce(`1esn`=#usn7[9e1..$@usn5],@usn5 In 1.0 Starts With 12|True Starts With `` Starts With 0.e0).`3esn`,Allshortestpaths(((`6esn` :`4esn`:`3esn`))).`8esn`? Return (`2esn` :``:usn1)<-[`3esn`* 7{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]->(`` ) Is Not Null Is Not Null As _usn3 Limit {999} =~7 =~{usn1} Union Unwind All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As `8esn` Detach Delete $7[.e1],{_usn4} Ends With 12.0 Ends With $@usn6 Union Unwind Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End As `8esn` Unwind Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `6esn`"),
    octest_legacy:ct_string("Remove Reduce(`6esn`=`1esn` =~12.0,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$12[0xabc..][12e12..]).usn1,All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $`4esn`[{@usn5}]).#usn8? Merge `5esn`=Shortestpath((((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[#usn8?:#usn7|:``* 0xabc..01234567]-(`4esn` {@usn5:`3esn`[#usn8]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(`8esn` )))) On Match Set #usn7 =123.654 In {`6esn`} In `6esn`,@usn5 =Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Foreach(`4esn` In 123456789 Is Not Null Is Not Null| With  Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `3esn`,9e0 Starts With 9e1 Starts With 12e12,0e0[$usn2..1e1][$7..12e12] Order By Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Descending,_usn4 Ends With $`3esn` Ends With {`3esn`} Desc Limit {@usn5} Is Null Is Null Where $`7esn` Contains 9e12 Contains `2esn`) Union All Start _usn4=Node:`4esn`(@usn5={`6esn`}) ,@usn6=Relationship:`2esn`(@usn6={`2esn`}) Merge Shortestpath(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) Return Distinct `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] As `6esn` Skip $`3esn` Ends With `8esn` Ends With {`5esn`} Limit {999}[`2esn`] Union All Start `7esn`=Node:`6esn`({#usn8}) Where 12.0[{`6esn`}..123.654][@usn5..usn1] Match ``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Where `7esn`[`5esn`..][0.12..] Create ``=Shortestpath(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})),`7esn`=((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}}))"),
    octest_legacy:ct_string("Start @usn6=Rel:#usn7(``={@usn5}) Where {`3esn`} Ends With $123456789 Ends With {12} Return Distinct [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]),1.0 =~`7esn` =~$`7esn` Order By `4esn` Starts With 9e12 Starts With 00 Descending,`1esn` In {999} In $123456789 Ascending,usn1 =~9e0 Asc Skip Null Starts With {usn1} Starts With #usn7 Limit Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}) Match (usn1 {_usn3}),usn1=((`3esn` {@usn5:$``[..`4esn`][..0],`8esn`:{@usn5}})) Using Scan @usn5:`7esn` Where _usn4[12.e12..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `` Starts With {999} As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind #usn7 As _usn3 Load Csv With Headers From 0x0 =~$`2esn` =~#usn7 As _usn4  Union Foreach(_usn3 In $_usn3[$usn2..]| Create Shortestpath((((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[?* ..999]->(:@usn5:usn2))))) Union All Start `2esn`=Node:#usn7(usn2=\"d_str\")  With  *,$usn2 Starts With {`1esn`} As `1esn`,{`8esn`} Is Null Is Null As #usn8 Skip usn2[$7..``][$``..$_usn3] Limit Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789} Merge Allshortestpaths((({_usn4:Null[False..][12.e12..]}))) On Create Set @usn6 =#usn7[999..``]"),
    octest_legacy:ct_string("Remove `3esn`:@usn6,{usn2:9e1[12.e12..]}.`6esn`! Foreach(_usn3 In $0 Ends With `2esn`| Unwind {``}[2.12] As `5esn`) Union All Optional Match #usn8=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) Using Scan `8esn`:`1esn` Union All Remove [0X7 Is Null Is Null,$usn1[..$`1esn`],{@usn5} Contains 0X7 Contains 1e1].`6esn`?"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str' Contains $_usn4 Contains $`7esn` As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where .e1 Starts With #usn7 Starts With 1.e1) Starts With `4esn`(12[$`8esn`..{_usn4}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1) As `6esn`  Create (@usn5 :_usn4:`1esn`),`6esn`=(((_usn3 :`5esn`)<-[?:usn2|_usn3* 07..]-({`3esn`:_usn3 In 1.e1})<-[?:@usn5|``* 123456789..999{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 12.0[{`6esn`}..123.654][@usn5..usn1] As #usn7 "),
    octest_legacy:ct_string("Load Csv With Headers From Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null As _usn3 Fieldterminator 's_str' Union All Detach Delete {`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5],[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]] Starts With Extract(usn2 In 999[{123456789}..999] Where 9e1 Is Not Null|$_usn3[$usn2..]),$`5esn` Ends With $#usn8 With  *,`2esn` Is Null Is Null As @usn5,999[{12}..][$1000..] As @usn5 Order By {`5esn`}[$`8esn`..$`1esn`] Asc,.e12[{1000}] Asc,9e0 Is Not Null Ascending Skip `1esn`[$`8esn`..][True..] Limit {#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {_usn4} In 0.12 In {_usn3} As usn1 "),
    octest_legacy:ct_string("Start usn1=Node:`1esn`(\"d_str\") ,usn1=Node:`1esn`(\"d_str\")Where $0[{``}..`2esn`] Create Unique (:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[#usn8* 01234567..0Xa{#usn8:$`6esn` Starts With _usn4 Starts With `5esn`}]-(`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789}) Union All Load Csv From 123456789 Is Null Is Null As #usn7  Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Merge #usn7=Allshortestpaths(((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))) On Create Set `1esn`:`6esn`:`4esn`,`8esn`(Distinct $999[999..][$_usn4..],010 Starts With `3esn` Starts With {usn1}).`1esn` =(`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) Union All Foreach(@usn5 In #usn8(`6esn` Ends With 0x0 Ends With 12,1.0 Starts With 12)[Reduce(`7esn`=123.654[2.12..][{`7esn`}..],`4esn` In False[0.0..{@usn6}]|9e0[..{usn1}])..]| Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As @usn6 Optional Match Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Join On _usn4,`8esn` Where @usn5[..$`7esn`][..$`6esn`]) Delete {`8esn`} In 12 In 1e1,\"d_str\" Starts With $7 Starts With 2.12 Merge `5esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))))"),
    octest_legacy:ct_string("Merge `1esn`=(_usn4 :``:usn1)<-[?:`2esn`* ..999{usn1:.e1[..`2esn`],@usn5:12.e12[..9e12][..1000]}]->({`1esn`:{1000}[0e0][{usn1}]})<-[``?:#usn7|:``]-(usn1 :`1esn`) Create `1esn`=Allshortestpaths((($7)-[``?:#usn7|:``]-(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))),_usn4=(:``:usn1{@usn6:07 Is Null}) Remove (usn2 {#usn8:True Ends With usn1})<-[usn2?* 00..999{`5esn`:999 Starts With {``}}]-(@usn5 :`1esn`)-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]-(:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}).@usn5?,Shortestpath(((`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))).usn1?,(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})<-[`5esn`* 01234567..0Xa]->(_usn3 :`1esn`{`3esn`:.e12[0.0..][$#usn8..],``:12 Is Null Is Null})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}).`7esn`?"),
    octest_legacy:ct_string("Start `1esn`=Node:_usn3(usn2=\"d_str\") ,usn2=Node:@usn6(`7esn`={#usn7})"),
    octest_legacy:ct_string("Merge (`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(:`2esn`{`4esn`:$999[$12..][.e0..]})<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}) Optional Match `3esn`=(_usn4 :usn1{`6esn`:{_usn4}})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]}) Using Scan `5esn`:@usn5 Using Join On `6esn`,`3esn`,`1esn`"),
    octest_legacy:ct_string("Return *,{999} =~0.0 =~$`` As usn1 Load Csv From $`8esn`[$usn1][0X7] As `7esn`  Foreach(`8esn` In $999[12]| Return _usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]),$`8esn` =~$`7esn` =~`3esn` As `8esn` Order By 0.e0 Ends With {@usn5} Ends With 0e0 Ascending,Count(*) In `1esn` In {_usn3} Descending Skip 's_str' =~0xabc =~$@usn5 Limit `2esn`[..$`4esn`][..$@usn5] Start #usn8=Node:`4esn`(`3esn`=\"d_str\") )"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath((`4esn` :usn1)-[`4esn`?* 01..]-(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})) Contains (:`2esn`{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1})<-[:usn2|_usn3* 0xabc..01234567]->(:_usn4:`1esn`) Contains (:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(usn1 {_usn3}) As `2esn` Fieldterminator \"d_str\" Create Unique #usn7=(((@usn5 :`6esn`:`4esn`)<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})))"),
    octest_legacy:ct_string("Foreach(#usn8 In {`6esn`}[0.e0..$123456789]| Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Delete $`2esn`[#usn7][01],0Xa[$#usn8]) Optional Match Shortestpath((:@usn6{`7esn`:{12} Is Null})),``=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) Using Scan `6esn`:_usn3 Using Index `4esn`:#usn8(`3esn`) Union All With Distinct *,00[0xabc..][`8esn`..] As usn2,exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $`5esn` =~`1esn` =~123.654 Asc,Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] Ascending,0.0[``] Asc Skip 00 Is Null Limit {`4esn`}[0xabc..][010..] Remove Case 's_str'[..$123456789][..{1000}] When usn2[$7..$`5esn`] Then `6esn` Contains `6esn` Contains 9e1 When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then True Starts With 2.12 Starts With {123456789} End.`4esn`!,`1esn`:usn2,#usn7({@usn5}[{``}][{_usn4}],123.654 Starts With `8esn` Starts With @usn5).``? Return Distinct $`4esn` Is Null Is Null Order By {#usn8} Starts With {`4esn`} Starts With 00 Desc,2.12 Is Not Null Is Not Null Asc Skip {`3esn`:.e1[@usn5]}[{@usn5:$`4esn`[.e0][9e0]}..None(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)] Limit $999 Starts With $usn1 Starts With {`3esn`} Union All Create ((#usn8 :@usn5:usn2)-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Detach Delete $`4esn`[.e0][9e0],`2esn` =~$#usn7 =~_usn4,@usn6 Contains {0} Detach Delete usn2[..$`8esn`][..``],{usn1}[..{#usn7}],$#usn8 In $0 In {`2esn`}"),
    octest_legacy:ct_string("Unwind {#usn8}[False..{usn1}][$`6esn`..0Xa] As #usn8 Union All Match (`4esn` {`4esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}) Using Index @usn6:@usn6(@usn6) Where $#usn8 In $0 In {`2esn`} Union All Create Unique @usn6=(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]}) Remove (#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[_usn3:`7esn`]-(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}).`8esn` Return *,$``[{#usn7}..{usn2}] Order By Filter(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5])[All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..] Asc Skip $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] Limit {#usn8}[123.654..`5esn`]"),
    octest_legacy:ct_string("Return Distinct 's_str' Contains $_usn4 Contains $`7esn`,'s_str' In {1000} In 010 As `4esn`,Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `2esn` Skip Single(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]) In [#usn8 In True In `8esn` Where 1e1[{`3esn`}][True]] In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 07 Contains @usn5] Remove {usn2:$`7esn` =~#usn8 =~{`7esn`},`8esn`:`1esn` In {`4esn`}}.`7esn`,{usn2:$#usn7 Contains {usn2}}.`8esn`?"),
    octest_legacy:ct_string("Remove Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))).`5esn`?,{``:{@usn5}[{``}][{_usn4}],`3esn`:{0}[123456789..$`8esn`]}.@usn5?,[_usn3[..0xabc][..@usn5],$#usn7 Starts With $`4esn`,{`7esn`} Ends With $usn2 Ends With 9e0].@usn6! Return Distinct {`6esn`} Is Not Null Order By .e12[$``..] Desc Skip {`2esn`}[..``] Create `4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0}))) Union Match `6esn`=((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` ))),Allshortestpaths(((:`8esn`:_usn3{_usn3:{999}[..{999}]})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index ``:#usn7(_usn4) Delete `1esn`[..{`4esn`}][..{0}] Union All Load Csv With Headers From `5esn`[$123456789][`2esn`] As `4esn` Fieldterminator \"d_str\" Merge Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})-[?{`5esn`:9e0 =~$usn1 =~{@usn6}}]->(_usn4 :_usn3:@usn6)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})))) On Match Set _usn4+=`3esn`[$`2esn`] On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] Remove (usn2 {`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[* ..999]-(`8esn` :`5esn`).#usn8?"),
    octest_legacy:ct_string("Create `1esn`=(_usn4 :``:usn1)<-[?:`2esn`* ..999{usn1:.e1[..`2esn`],@usn5:12.e12[..9e12][..1000]}]->({`1esn`:{1000}[0e0][{usn1}]})<-[``?:#usn7|:``]-(usn1 :`1esn`) Union Remove [0.0[.e12..],7 Starts With `5esn`,$7[..999][..`2esn`]].@usn5,Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 9e12 In 's_str' In $`4esn`).#usn7! Detach Delete 999[{12}..][$1000..],Allshortestpaths(((@usn6 $1000)))[..Allshortestpaths((`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]}))],True In $#usn8 Merge ((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})) On Create Set {`3esn`:9e12[1000]}.`6esn`? =1e1 In @usn6 In 0X0123456789ABCDEF,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $@usn5[`2esn`..][#usn7..]|$`4esn` Is Null].usn1! =$`7esn`[_usn3..][{_usn3}..] On Create Set (_usn4 :_usn3:@usn6{_usn4:Null[False..][12.e12..]})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->(#usn7 {`3esn`:{usn1}[..{#usn7}]}).`3esn` =True =~`5esn`"),
    octest_legacy:ct_string("Merge `3esn`=((@usn5 :`6esn`:`4esn`)) On Match Set #usn8+=`1esn` In {999} In $123456789,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 =9e1[010..][`5esn`..],`3esn`+={`7esn`} On Create Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7 Unwind 0.e0 In 9e0 In 0e0 As `3esn` Return Distinct *,0X0123456789ABCDEF Is Null As `1esn` Order By @usn5(12e12 In Null In {7}) Contains Case When `5esn`[$123456789][`2esn`] Then $`2esn`[Null][{``}] When {`7esn`}[..0xabc][..0e0] Then {#usn7} =~{usn1} Else #usn8 Is Null End Ascending,[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) Asc,#usn8 Ends With `5esn` Ends With _usn3 Ascending Skip {7} Is Null Is Null Union All With  \"d_str\" Ends With 0e0 Ends With {usn2} As usn1 Where `1esn` In `7esn` In {`7esn`} Unwind {1000}[0e0][{usn1}] As usn2 Unwind (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As @usn5 Union Match `6esn`=Allshortestpaths(((({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})-[`5esn`* ..999]-(usn1 :`3esn`:@usn5{_usn4:usn1[{123456789}..][010..]})<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})))),((#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[#usn7?:``]->(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})) Using Join On `5esn`,`3esn`,usn1 Where {_usn3} In 010 In 0.e0 Remove Case .e12[$``..] When $usn2 =~`6esn` =~{usn1} Then $usn1 Ends With {123456789} Ends With 1.e1 End._usn3,Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {@usn5} Contains 0X7 Contains 1e1|`2esn`[0Xa][{`8esn`}]).`1esn`!"),
    octest_legacy:ct_string("Merge (`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:_usn3:@usn6{#usn7:0xabc =~{`8esn`} =~{_usn3}}) On Create Set (:@usn6{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12})<-[`4esn`?* 010]-(`7esn` :`6esn`:`4esn`)<-[:`7esn`{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`}).`6esn`? =00 Is Null,{usn2:$`3esn`[12.e12...e1],`8esn`:0xabc In {`6esn`} In $@usn6}.`4esn` =0x0 In {`3esn`},#usn8 =Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End =~Shortestpath((_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})) =~Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) Detach Delete 12e12[..Count(*)][..$usn2],\"d_str\" Starts With $`` Starts With $usn1 Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As `7esn`"),
    octest_legacy:ct_string("Remove Case 12.0[$999..][$@usn6..] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then True Starts With 2.12 Starts With {123456789} End.``! Union All Detach Delete \"d_str\" In 2.12,Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}),{_usn4:0.0[0.12],_usn4:Count(*) In {`4esn`}} In exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) Optional Match `1esn`=Allshortestpaths((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))),`8esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) Using Scan _usn4:@usn6 Where 0.0 Union Load Csv With Headers From Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End] As #usn8  Load Csv With Headers From Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3)[{`3esn`:{#usn8} Is Not Null Is Not Null}..][Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`)..] As `8esn` "),
    octest_legacy:ct_string("Detach Delete 0 Is Null Create Unique `2esn`=Shortestpath((((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {_usn3:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]})-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)))),Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))) Detach Delete 1e1[999..],$#usn7 Contains {usn2} Union All With Distinct *,Reduce(usn2=0xabc In {`6esn`} In $@usn6,`7esn` In @usn5[01..`6esn`]|#usn7[$7..{_usn4}]) =~Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End As #usn8 Order By 0 Is Null Is Null Ascending,`` =~_usn3 =~{`6esn`} Asc,[False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending Skip $1000 Is Null Is Null Limit 9e0 Ends With `` Ends With 010 Foreach(`8esn` In 0.12[$0..$``]| Delete 1.e1 =~9e12 =~$`3esn`) Union Optional Match @usn5=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1})) Using Join On `2esn`,`1esn` Using Index `8esn`:`3esn`(`6esn`) Where {usn1}[..{#usn7}] Create Unique (((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[?:usn2|_usn3* 07..]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))),`7esn`=(`3esn` :`3esn`:@usn5)-[{@usn6:$@usn6}]-(`5esn` {`8esn`:0xabc Is Null})-[:`6esn`|:`7esn`]-(`5esn` {`8esn`:1e1 In 0xabc})"),
    octest_legacy:ct_string("Return Reduce(#usn8=`8esn`[$123456789..][$usn1..],`6esn` In {1000} Is Not Null|$@usn5[$7..@usn5])[Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})))..(_usn4 {`2esn`:`8esn`[1000..#usn8]})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(`5esn` :`5esn`{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2})][{usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}}..0e0],$999 In $999 As _usn3,9e0[{`8esn`}] Skip $123456789 Contains $123456789 Contains 0.e0 Limit `` Contains True Foreach(`1esn` In [`6esn` Ends With 0x0 Ends With 12,`8esn`[$1000..$#usn8][_usn3..{7}],12.e12 Starts With `8esn` Starts With 9e12] In 9e0 In [{`7esn`}[..0xabc][..0e0]]| Unwind Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As ``) Union All Create (`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`),`8esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Foreach(`` In Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])| Remove [0.0[.e12..],12.0 In $usn1 In True,$999[$12..][.e0..]].#usn8,[usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12|00[{999}..$#usn7][$0...e0]]._usn3! Remove ['s_str' =~0x0 =~{#usn8},0.e0 Ends With {@usn5} Ends With 0e0].`5esn`!) Union All Create Unique `4esn`=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[:`4esn`|`2esn`* 00..999]->(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}}))),Allshortestpaths(((:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[usn2?:`6esn`|:`7esn`]-(usn2 :@usn6{usn1:0.0[0.12]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})))"),
    octest_legacy:ct_string("With  *,Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)],0[1.0..][.e0..] As usn2 Skip $12 Is Not Null Is Not Null Where $123456789 In $7 Optional Match @usn5=Allshortestpaths(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})),((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]-(:_usn4:`1esn`{#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]})-[_usn3:_usn3|:`6esn`]-(`3esn` :`3esn`:@usn5)) Using Scan #usn8:#usn8 Where {@usn5} Contains 0X7 Contains 1e1 Optional Match (usn1 :`4esn`:`3esn`)-[* 0X0123456789ABCDEF]-(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]}) Using Index usn2:#usn8(_usn3) Using Scan usn2:`5esn` Where 0e0 Starts With 's_str'"),
    octest_legacy:ct_string("Merge (#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})-[`1esn`?]-(usn1 :`4esn`:`3esn`) Union All Remove $1000.`6esn`!,Case When `6esn` =~12.e12 =~123456789 Then 1000 Starts With {7} Starts With $7 End.`5esn`! Create ((`1esn` :@usn6{@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4)) Union Start `7esn`=Node:#usn7(usn2=\"d_str\") ,`5esn`=Node:`4esn`(`2esn`={7}) Start ``=Relationship:`8esn`({``}) "),
    octest_legacy:ct_string("Match ((:`3esn`:@usn5{_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})),@usn5=(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})-[`2esn`:`6esn`|:`7esn`* 0{`2esn`:0.e0 Ends With {@usn5} Ends With 0e0}]->(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})<-[* 01..{`4esn`:`3esn` Is Null Is Null}]-(`6esn` :#usn7:`6esn`) Using Index usn1:`7esn`(#usn7) Using Scan `1esn`:`6esn` Remove _usn4(Distinct $#usn7 Is Not Null Is Not Null).`2esn`,[{7}['s_str'..]].`1esn`! Union Merge @usn5=Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) On Create Set Reduce(`6esn`=0xabc =~{_usn4},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|{_usn3} In 010 In 0.e0).usn1? =Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],`3esn`+=1.0 Ends With {`4esn`} Ends With {`2esn`} On Match Set Extract(#usn7 In {`5esn`} Ends With `2esn` Where {_usn3}[{#usn7}]|_usn4 =~$#usn7 =~`8esn`).#usn7! =Case When 12[0X0123456789ABCDEF..][Count(*)..] Then 's_str'[..$123456789][..{1000}] End[Reduce(usn2={`6esn`} Is Not Null Is Not Null,#usn7 In {`5esn`} Ends With `2esn`|07[_usn3][123456789])..Reduce(@usn6=$`7esn` =~#usn8 =~{`7esn`},#usn7 In {`5esn`} Ends With `2esn`|{@usn5})],usn1 ={`7esn`}[..$`8esn`][..{`8esn`}],`8esn`+=Reduce(`6esn`=9e12 In 's_str' In $`4esn`,usn2 In 999[{123456789}..999]|07[{_usn4}..{`4esn`}]) =~Single(usn2 In {@usn5} Where `1esn` In 9e0 In {7}) =~[usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]] Foreach(`3esn` In $`6esn` Ends With 0.12 Ends With 999| Load Csv With Headers From 0X0123456789ABCDEF =~2.12 =~True As `3esn` )"),
    octest_legacy:ct_string("Remove Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where 1000[..$``][..123456789]|0X7 Is Null Is Null)._usn4,Any(usn2 In {@usn5} Where 9e0[{`8esn`}]).usn1?,Case When usn1 =~1000 =~12 Then {`7esn`} =~01234567 =~`7esn` Else {``} =~{`2esn`} =~$`8esn` End.`6esn`? Unwind 0.12[..0][..{``}] As `4esn` Union Remove [`6esn` Contains `6esn` Contains 9e1]._usn4?,Extract(usn2 In 999[{123456789}..999] Where $1000[999..][0Xa..]).`7esn`! Remove {`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1}.@usn6!,`2esn`:`2esn` Create Unique @usn5=Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),_usn4=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))) Union All Return Distinct *,0x0 =~$`2esn` =~#usn7 As _usn3 Skip Null =~`4esn` =~9e0 Limit 0.12 In `8esn` Load Csv With Headers From 0X7 Is Not Null Is Not Null As `4esn` Fieldterminator \"d_str\" With  Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Skip {usn2}[{`7esn`}][$usn2] Where 12[0X0123456789ABCDEF..][Count(*)..]"),
    octest_legacy:ct_string("Foreach(`` In 0X0123456789ABCDEF[0e0..0xabc]| Remove Filter(`5esn` In $999[12] Where 1e1 Contains @usn6 Contains {`8esn`}).``!,`6esn`:@usn5:usn2,{7}.usn1 Create Unique `6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))) Unwind $`8esn` Ends With 12 Ends With 0xabc As usn2 Foreach(_usn3 In `6esn`[$_usn3.._usn3][usn2..0.0]| With  12.e12 Starts With `8esn` Starts With 9e12 As ``,{#usn7} =~$0)"),
    octest_legacy:ct_string("Return Distinct {1000} Starts With {_usn4} As _usn4,[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]) As `5esn` Skip $`2esn`[{@usn5}..12.e12][9e0..$`8esn`] Limit [#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]) Return *,$`8esn` In Count(*) In $usn1 Skip 9e0[{`8esn`}] Limit $@usn6[..{`6esn`}][...e0] Create #usn8=Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}))),Shortestpath((((_usn3 :`6esn`:`4esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(:`4esn`:`3esn`{12})<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})))) Union All Start usn2=Node:`4esn`(usn2='s_str') ,`2esn`=Node:#usn7(@usn5=\"d_str\")Where $`4esn`[{@usn5}] Merge @usn5=Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) On Match Set `1esn` =Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..],usn1 ={`4esn`}[0xabc..][010..],usn2 =@usn6[9e12..] On Create Set #usn8+=False[0.0..{@usn6}],Shortestpath((((_usn3 :`5esn`)<-[?:usn2|_usn3* 07..]-({`3esn`:_usn3 In 1.e1})<-[?:@usn5|``* 123456789..999{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})))).`5esn` =12e12 In Null In {7}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`2esn`[usn2][#usn7] As `7esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start @usn6=Rel:#usn7(``={@usn5}) ,`7esn`=Relationship( {`5esn`}) With Distinct 123.654 Is Null Is Null Order By 0.12 =~$`7esn` =~`8esn` Desc,{`7esn`}[..$`8esn`][..{`8esn`}] Descending Create ((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))),@usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Optional Match @usn6=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))),Shortestpath(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]}))) Where $`5esn` Starts With 1.0 Starts With $usn2 Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where @usn6 Contains {0}].@usn6?,Reduce(_usn3={`1esn`}[\"d_str\"][{1000}],`4esn` In False[0.0..{@usn6}]|0 =~usn1)._usn4? Union Match usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),@usn5=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) Where 00 Starts With 12 Starts With 0e0 Remove None(usn2 In 999[{123456789}..999] Where {@usn5}[{``}][{_usn4}]).#usn7? With Distinct *,$7 In $usn2 In {1000} Order By {`4esn`} Starts With $12 Starts With 0Xa Desc,{7} Is Null Is Null Desc,$@usn5[00][0Xa] Asc Where $usn1 Ends With {123456789} Ends With 1.e1"),
    octest_legacy:ct_string("Detach Delete .e0[..@usn5][..usn2] Merge (`` :`5esn`) Optional Match ((:@usn6)<-[`3esn`?:_usn4|`5esn`]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[?* 123456789..999{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]})),Shortestpath((`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]})) Using Join On `2esn`,usn2,@usn6 Union Foreach(`1esn` In {`1esn`}[\"d_str\"][{1000}]| Delete Allshortestpaths((`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})) Contains [1000 Contains 12.e12,{usn2}[{`7esn`}][$usn2],$7[0X0123456789ABCDEF]] Contains All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}) Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})))"),
    octest_legacy:ct_string("Create Unique #usn7=(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1),Allshortestpaths((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]->(`1esn` {`3esn`:0.12 In `8esn`})<-[* 0]-(usn1 :`4esn`:`3esn`)) Union All Load Csv From `7esn`[`5esn`..][0.12..] As `6esn`  With  *,0X0123456789ABCDEF =~2.12 =~True As ``,.e12[Count(*)..{`4esn`}][07..$1000] As `8esn` Order By Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] Ascending,`8esn`[12e12][_usn3] Desc Skip {#usn7} Starts With $`1esn` Starts With 07 Limit #usn8 Is Null Where {usn2}[`2esn`..{`4esn`}][_usn4..``] Union All Create ((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`})),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Delete .e1 Starts With #usn7 Starts With 1.e1 Create #usn7=((`6esn` {_usn3:999 Is Not Null Is Not Null})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From True =~_usn3 As `4esn` "),
    octest_legacy:ct_string("Create `1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Union Create Unique usn1=((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})) With Distinct $#usn8[$12][`6esn`] As @usn6 Order By $`7esn` =~#usn8 =~{`7esn`} Asc,{7}[$@usn5][123456789] Ascending,usn2[..`8esn`(Distinct 0.0[0.12])][..usn1] Descending Skip `2esn` =~$#usn7 =~_usn4 Limit Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Match `5esn`=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Union Return *,0X0123456789ABCDEF Is Null As `1esn`,0X0123456789ABCDEF[0e0..$12][00..{12}] Skip `1esn`[{usn1}][{12}] Limit {#usn8} =~$0 Create Unique Allshortestpaths(((`6esn` :#usn7:`6esn`)<-[`8esn`?:usn1|:@usn6]->(`8esn` :`1esn`)-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})))"),
    octest_legacy:ct_string("Optional Match @usn5=Shortestpath((_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(#usn7 :#usn7:`6esn`)<-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]->(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}) Using Join On @usn6,usn2,`5esn` Using Index usn2:`4esn`(`5esn`) Where 0 Ends With .e0"),
    octest_legacy:ct_string("Foreach(`8esn` In `5esn`[..$_usn3]| Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Remove [_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|{`2esn`} Contains 0.12 Contains 0.0].`3esn`!,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`6esn`}[_usn3]).@usn5?) Remove Allshortestpaths(((:@usn6)<-[`3esn`?:_usn4|`5esn`]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[?* 123456789..999{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))).`7esn`?,[\"d_str\" Starts With $`` Starts With $usn1,True In $#usn8].`8esn`? Merge @usn5=Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) On Match Set `6esn`+=0X0123456789ABCDEF =~$@usn6 =~$`8esn`,Extract(`5esn` In $999[12] Where $999[999..][$_usn4..]|@usn5[..$`7esn`][..$`6esn`]).@usn5! =Count(*) In {`4esn`},usn1 =`5esn`(Distinct @usn5[01..`6esn`],7[`7esn`..usn2][$`5esn`..0X7]) Is Null Is Null On Create Set #usn7 =[#usn7 In {`5esn`} Ends With `2esn` Where {#usn7} Starts With $`1esn` Starts With 07|Count(*)[#usn8][$usn1]][{_usn4:0x0[9e0..][$@usn5..]}],`8esn`+=$usn1 Ends With {123456789} Ends With 1.e1"),
    octest_legacy:ct_string("Remove {usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}.@usn5?,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn8 Ends With 0Xa).`7esn` Union Unwind $@usn5 =~999 =~0e0 As `7esn` Union All With Distinct {``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] As #usn8 Order By 1000 Starts With {7} Starts With $7 Descending Limit 07 Starts With \"d_str\" Starts With $12 Where _usn4 In usn2 With Distinct 7 Is Null Is Null As _usn3,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) As usn2,[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Skip 12.0 In $usn1 In True Limit {`7esn`}[{#usn7}..] Where {``}[2.12]"),
    octest_legacy:ct_string("Create `3esn`=Allshortestpaths(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) With  00[usn2..`3esn`][0X0123456789ABCDEF..$7],{_usn3:9e12[..#usn7][...e0]}[(usn1 {`8esn`:12e12[..1.e1][..$12]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]->(`` :`5esn`{#usn8:`4esn` Starts With 0x0})][{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null}] As `1esn`,1.0 =~`7esn` =~$`7esn` Order By 9e0 Is Not Null Is Not Null Descending,9e1 Ends With 0xabc Ends With @usn6 Ascending Union Merge usn2=Shortestpath(((`2esn` :``:usn1)<-[usn1?:`7esn`* 0x0..7]->(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Remove None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3).`3esn`?,usn1:#usn7:`6esn` Union All Create Unique ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`))"),
    octest_legacy:ct_string("Load Csv With Headers From Case When _usn3 Ends With {#usn7} Then {usn1} Is Null Is Null When `1esn` In 12.e12 In $#usn7 Then 1.0 =~`7esn` =~$`7esn` End In Case When 999 Starts With {``} Then Count(*) In `1esn` In {_usn3} Else {`2esn`} End As `2esn`  Union All Create Unique Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})) Create `7esn`=((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union All Foreach(@usn6 In 123.654[2.12..][{`7esn`}..]| With Distinct {@usn5:00 =~.e12}[(`8esn` :usn2)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(usn1 :`7esn`:_usn4)-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})..] Skip {`2esn`}[usn2..][$#usn7..] Limit $`6esn` Is Null Is Null Remove Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where True In $#usn8|0.0).#usn8?,Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))).`5esn`?) With Distinct {#usn8} Starts With {usn1} Starts With 9e12,$@usn5 =~999 =~0e0 As @usn5 Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Limit @usn5[01..`6esn`] Where $999[999..][$_usn4..]"),
    octest_legacy:ct_string("Foreach(_usn3 In $`7esn`[_usn3][{_usn4}]| With Distinct `5esn`(Distinct @usn5[01..`6esn`],7[`7esn`..usn2][$`5esn`..0X7]) Is Null Is Null,$`3esn`[`3esn`..] Order By $usn2[$`4esn`..] Descending,#usn8 Ends With 0Xa Ascending,$7[.e1] Descending Where #usn7 Starts With {@usn6} Starts With {`1esn`} Optional Match `6esn`=({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}),``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Using Index `4esn`:_usn4(`1esn`) Where $`8esn`[2.12][$_usn4]) Delete None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null,$#usn7 Starts With $`4esn`,Reduce(#usn7=$999 In $999,#usn8 In True In `8esn`|$#usn8 Is Not Null) Is Not Null Is Not Null Union Return Distinct *,None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null As _usn3,False[0.0..{@usn6}] As `` Order By Allshortestpaths((((:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]})))) Is Null Is Null Desc,Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null Asc,.e0[.e0..][$``..] Descending Limit None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`) Ends With [_usn4 In .e12 Is Not Null Where $`8esn` Contains 12] Ends With All(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`})"),
    octest_legacy:ct_string("With Distinct usn2[$7..$`5esn`] Order By {@usn6}[..0.e0][..$0] Asc,2.12 Contains @usn5 Contains {``} Descending,123456789 Is Not Null Is Not Null Ascending Skip 0xabc[$`2esn`..] Where 's_str'[..$123456789][..{1000}]"),
    octest_legacy:ct_string("Start `2esn`=Node:_usn3({_usn3}) ,`6esn`=Node:`8esn`({`4esn`}) Union Create (({usn2:'s_str' Is Not Null,`4esn`:$`1esn` Contains usn2 Contains 1.0})) Return *,{@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]},$@usn6 Ends With {`6esn`} Ends With 0.e0 Limit Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {@usn5} =~$`2esn`|1e1[1000]) Starts With Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1.0 =~`7esn` =~$`7esn`) Starts With Extract(usn2 In 999[{123456789}..999] Where 12e12[..Count(*)][..$usn2]|$999[999..][$_usn4..]) Create Unique Shortestpath((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))),`5esn`=Shortestpath((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0}))) Union All Create @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))"),
    octest_legacy:ct_string("Return Distinct Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null As `6esn`,$#usn7 Is Not Null Is Not Null Skip 010 Is Not Null Is Not Null Create Unique Allshortestpaths(((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union Delete $`1esn` =~1.0 =~0X7 Match ((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]})) Union All Optional Match #usn8=(((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})<-[_usn4?:``]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654}))) Using Index #usn8:usn1(`2esn`) Using Join On `7esn` Where $7[@usn6][0xabc]"),
    octest_legacy:ct_string("Merge Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) On Create Set _usn4+=0X7[..`2esn`][..@usn5] On Create Set [`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]|0.e0[#usn7..][$@usn5..]].`3esn`? =[@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}],`3esn` =Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create `2esn`=(:`4esn`:`3esn`{``:@usn6[9e12..],`8esn`:`6esn` Contains `6esn` Contains 9e1})-[`5esn`?:_usn3|:`6esn`]-(@usn5 :`6esn`:`4esn`)-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]}) With Distinct $_usn4 Contains Null Contains $0 As `3esn`,[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null] In Filter(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) In [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where `4esn` Starts With 0x0],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By `1esn`[$`8esn`..][True..] Desc Skip `6esn` =~12.e12 =~123456789"),
    octest_legacy:ct_string("Foreach(#usn8 In {usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})| Create Unique _usn3=((_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:`8esn`|:_usn3]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]})))"),
    octest_legacy:ct_string("Foreach(usn2 In Case {`6esn`}[0.e0..$123456789] When _usn3 In 1.e1 Then $999[$12..][.e0..] Else usn2[01234567..] End In Case $123456789[{`1esn`}][0.12] When 12.0[{`6esn`}..123.654][@usn5..usn1] Then $`7esn` Contains 9e12 Contains `2esn` When 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Then 's_str' =~0xabc =~$@usn5 Else 1e1[..12e12] End In {`7esn`:{12} Is Null}| Match ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]}))) Using Index @usn5:`6esn`(@usn5) Using Index usn1:usn2(@usn5) Detach Delete [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Starts With Single(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0})))) Merge _usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) On Match Set #usn8 =$`1esn` Contains usn2 Contains 1.0,`3esn`+={_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])],``+=0.e0[$`1esn`..] On Create Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Create @usn6=Allshortestpaths(((:#usn7:`6esn`{999}))) Union All With  *,.e12[Count(*)..{`4esn`}][07..$1000] Skip {1000}[..#usn7][..{#usn8}] Limit $7 In $usn2 In {1000} Where 12.0 Ends With 0e0 Ends With $123456789 Union Return Distinct [0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1) As #usn8,9e12[1000] Order By {@usn5}[Case 010 Ends With 123456789 Ends With .e0 When {#usn8} Is Not Null Is Not Null Then $`6esn` Is Null Is Null End..Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6|Null[False..][12.e12..])] Ascending,Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4])[None(usn2 In 999[{123456789}..999] Where 12[0X0123456789ABCDEF..][Count(*)..])] Descending Skip $#usn8 Is Not Null Is Not Null Limit Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null Create Unique @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),Shortestpath((((:`1esn`{`4esn`:{_usn4} =~0 =~{12}})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`)-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7))))"),
    octest_legacy:ct_string("Create `3esn`=Shortestpath((((_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[@usn6:`5esn`|`3esn`* 07..]->({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``* 7]-(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})))),(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Foreach(`1esn` In {`2esn`} Is Not Null| Start usn1=Node:usn2(_usn3=\"d_str\") Where _usn4 In usn2 Remove Reduce(#usn7=01234567 Is Not Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|$`1esn` Contains $#usn7).`7esn`?,[@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3].usn1) Merge (`5esn` {`3esn`:_usn3 In 1.e1})"),
    octest_legacy:ct_string("Foreach(@usn6 In {`2esn`}[{`3esn`}..][.e1..]| Load Csv From 01[$_usn3..][123.654..] As `4esn` Fieldterminator \"d_str\") Foreach(_usn4 In 010[$12..]| Unwind {``}[2.12] As usn1) Union All With  [usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000|`2esn` =~$#usn7 =~_usn4] Starts With Extract(`6esn` In {1000} Is Not Null|12e12 In Null In {7}) Starts With {_usn4:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,usn1:9e1[..2.12][..@usn6]} As usn2,#usn7 Ends With {@usn5} Order By {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Ascending,{#usn7} Is Null Is Null Ascending Skip `5esn` In 123.654 In {`6esn`} Where 0 =~usn1 Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") ,_usn4=Node:@usn5(`3esn`='s_str')"),
    octest_legacy:ct_string("Start `3esn`=Rel:`1esn`(\"d_str\") Where {`6esn`}[0.e0..$123456789]"),
    octest_legacy:ct_string("Unwind Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As ``"),
    octest_legacy:ct_string("Optional Match Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))),`7esn`=(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Using Index `2esn`:usn2(`7esn`) Using Index @usn5:`6esn`(@usn5) Union All With  's_str' In {1000} In 010 As `8esn`,_usn4[12.e12..] As `` Order By Reduce(``=$`7esn` Contains 9e12 Contains `2esn`,@usn5 In 07[{_usn4}..{`4esn`}]|True[..{_usn3}][..999]) In Reduce(`6esn`=#usn8 Ends With 0Xa,usn1 In #usn8 =~$@usn5|$7[.e1]) In Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`}) Asc Where $0 Ends With 12.0 Ends With _usn4 With Distinct All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),[usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|0.12 Is Not Null] Starts With Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|$`1esn`[0..{_usn3}]) Starts With {`1esn`:$`5esn` Starts With 1.0 Starts With $usn2,@usn6:010[.e12]},Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] As `1esn` Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending Limit 's_str' Is Not Null Is Not Null Where Count(*)[{usn1}..][$`7esn`..] Start `2esn`=Node:`8esn`({usn1}) ,`3esn`=Node( {1000})Where 00 Starts With 12 Starts With 0e0"),
    octest_legacy:ct_string("Return Distinct [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]),1.0 =~`7esn` =~$`7esn` Order By `4esn` Starts With 9e12 Starts With 00 Descending,`1esn` In {999} In $123456789 Ascending,usn1 =~9e0 Asc Skip Null Starts With {usn1} Starts With #usn7 Limit Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}) Remove [`4esn` In False[0.0..{@usn6}] Where @usn6[2.12..$123456789][$`8esn`..{123456789}]|#usn8 =~$@usn5].@usn6!,[usn2 In 999[{123456789}..999] Where 123.654 In {12} In ``|`5esn` =~@usn6 =~$`7esn`].`6esn`!,`1esn`(Distinct 12e12[..1.e1][..$12]).@usn6 Merge ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})) On Create Set `2esn`+=`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Union Remove Shortestpath((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))).@usn5,exists($`2esn`[#usn7][01]).`2esn`! Remove Extract(#usn7 In {`5esn`} Ends With `2esn` Where 1.e1 =~123.654 =~$`3esn`).@usn5?,Shortestpath(((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}))).`4esn`?,{@usn5:{#usn8} Ends With {123456789} Ends With #usn8,_usn3:$`1esn` Is Not Null}._usn3! Union Detach Delete $``[{`2esn`}..][#usn7..],All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 Ends With 0e0 Ends With $123456789)[Case $`2esn`[Null][{``}] When @usn6[..{usn2}][..{`5esn`}] Then 0 Contains 123.654 End..Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})))][{`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000}..Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})))] Unwind [`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] As #usn7 Remove {``:$`7esn` Ends With $1000 Ends With {999}}.usn2!,Single(@usn5 In 1.0 Starts With 12 Where .e0 Starts With usn2).`1esn`!,[#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6].@usn6?"),
    octest_legacy:ct_string("Foreach(`1esn` In {`1esn`}[\"d_str\"][{1000}]| Delete Allshortestpaths((`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})) Contains [1000 Contains 12.e12,{usn2}[{`7esn`}][$usn2],$7[0X0123456789ABCDEF]] Contains All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}) Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}))) Union Merge _usn3=Allshortestpaths(((({`4esn`:01234567[usn1]})-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn1?* 0X7..{`4esn`:12 =~{#usn7},_usn3:`3esn` Starts With @usn5 Starts With {`4esn`}}]-(:#usn8:#usn7{`7esn`})))) On Match Set `5esn`+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) On Create Set #usn7 =[#usn7 In {`5esn`} Ends With `2esn` Where {#usn7} Starts With $`1esn` Starts With 07|Count(*)[#usn8][$usn1]][{_usn4:0x0[9e0..][$@usn5..]}],`8esn`+=$usn1 Ends With {123456789} Ends With 1.e1 Union Merge @usn5=Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) On Match Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7 Return *,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)] As #usn8 Skip 0Xa[0X7..#usn8][_usn3..9e1] Limit Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)]"),
    octest_legacy:ct_string("Remove [1e1 In 0xabc,$999[12]].`4esn`?,None(usn1 In {usn2} Contains {123456789} Contains 0Xa).@usn5,All(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12).`2esn`! With  $`3esn` Ends With `8esn` Ends With {`5esn`} As `6esn` Skip 123.654 In {`6esn`} In `6esn` Limit `4esn` Starts With $12 Starts With $12 Union All Detach Delete {`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]} In `6esn`(12.0 Starts With 00 Starts With 9e1) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where False =~9e0 =~{`5esn`}),None(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])[Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})],$7 Is Null Is Null Remove Filter(`4esn` In False[0.0..{@usn6}] Where {1000} Is Not Null).usn2! Union Detach Delete {usn1} Ends With {#usn7} Ends With 12.0,$`2esn` In 0xabc With  *,07 Is Null As _usn3,.e1 In $123456789 In _usn3 As `` Skip 9e1[9e0] Limit {`6esn`} Is Not Null Is Not Null Where 0.e0[$`1esn`..]"),
    octest_legacy:ct_string("Remove Extract(`4esn` In False[0.0..{@usn6}] Where `2esn`[0Xa][{`8esn`}]|`5esn`[$123456789][`2esn`]).`5esn`,`7esn`(Distinct {`6esn`} Is Not Null Is Not Null).`7esn`,`6esn`(True Starts With 2.12 Starts With {123456789}).`2esn`!"),
    octest_legacy:ct_string("Return $`6esn` In $#usn8 Limit `1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] Start `6esn`=Node:`1esn`(usn1={`8esn`})  Union Return Distinct 1.e1[{@usn5}..123.654] As @usn6,Case When {1000} Is Not Null Then 0xabc In {`6esn`} In $@usn6 When {`6esn`}[$1000] Then True =~`5esn` Else $`8esn` Starts With $123456789 End Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending,_usn4 In usn2 Desc,9e1 Contains {#usn8} Contains `5esn` Asc Skip 1.e1[{1000}..] Foreach(_usn4 In All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null)[($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})..Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End]| Start #usn8=Node:_usn4({#usn7}) ,@usn6=Rel:#usn7(``={@usn5})) Union All Load Csv With Headers From [$`4esn` =~{usn1}] Is Not Null As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return *,0X0123456789ABCDEF =~2.12 =~True As ``,.e12[Count(*)..{`4esn`}][07..$1000] As `8esn` Union With  *,#usn8[1e1..],$`3esn`[`3esn`..] Order By None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] Descending,$`3esn`[`3esn`..] Desc Skip `8esn` =~{`3esn`} =~9e12 Limit usn2[..2.12] Where _usn4 In usn2 Create Unique `6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Union Unwind 01 =~0X7 As #usn8"),
    octest_legacy:ct_string("Start `5esn`=Node:``(``=\"d_str\") ,``=Rel:`5esn`({123456789}) Union All Merge Allshortestpaths(((:@usn6{@usn6:$999[..$`2esn`]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`4esn`:`3esn`{12}))) Foreach(@usn5 In 0[1.0..$``]| Create Shortestpath((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))),`5esn`=Shortestpath((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0}))) Start #usn7=Rel:`7esn`(`6esn`=\"d_str\") ,`4esn`=Relationship:#usn7('s_str')) Start `7esn`=Node:_usn4({#usn7}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {@usn5}[$0][{``}] As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From {_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])] As `5esn` Fieldterminator \"d_str\" Foreach(`2esn` In `5esn` =~0e0| Create Unique `1esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),Shortestpath(((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Load Csv With Headers From 0e0 In .e1 As `6esn` Fieldterminator \"d_str\") Union All With  00[$`2esn`..{7}][usn2..\"d_str\"] Skip {`2esn`}[@usn6][{_usn3}] Limit 123.654 Contains $`4esn` Contains .e1"),
    octest_legacy:ct_string("With  None(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])[Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})] As `5esn`,$usn1[..$`1esn`] As `1esn`,0.12 =~$`7esn` =~`8esn` As @usn6 Skip 1e1[999..] Limit $_usn4 Contains Null Contains $0 Where _usn3 Ends With {`7esn`} Ends With 12 Union Merge _usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) On Match Set #usn8 =$`1esn` Contains usn2 Contains 1.0,`3esn`+={_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])],``+=0.e0[$`1esn`..] On Create Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Load Csv From $`4esn` As `7esn` Fieldterminator 's_str' Load Csv From {`4esn`} Is Null As `4esn`  Union All Remove Reduce(`6esn`=0 Is Not Null,`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|1e1[{`3esn`}][True])._usn4!,All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 12.0 =~0.12 =~999).`6esn`,[$`1esn`[`6esn`..$12][{usn2}..07],$`6esn`[`5esn`..][$12..],1000 Contains 12.e12].`5esn`? Start @usn6=Node:``(``={_usn4}) ,@usn5=Node:@usn6(\"d_str\") With  Extract(usn1 In #usn8 =~$@usn5 Where {999}[`2esn`]|.e12[Count(*)..{`4esn`}][07..$1000])[[`3esn` Starts With @usn5 Starts With {`4esn`},_usn3[$123456789..],00 Starts With 12 Starts With 0e0]..][[`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2]..] As usn2 Order By 9e1 Is Not Null Ascending,0X0123456789ABCDEF Is Not Null Is Not Null Ascending,.e1 Ends With $usn2 Ends With $7 Ascending Skip (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..] Limit {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}"),
    octest_legacy:ct_string("Return 0Xa Is Null Is Null Order By {`8esn`}[{`6esn`}..1.e1] Ascending"),
    octest_legacy:ct_string("With Distinct *,0X0123456789ABCDEF =~2.12 =~True As ``,.e12[Count(*)..{`4esn`}][07..$1000] As `8esn` Order By Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] Ascending,`8esn`[12e12][_usn3] Desc Skip {#usn7} Starts With $`1esn` Starts With 07 Limit #usn8 Is Null Create `2esn`=(((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[?:`1esn`|``* 123456789..999]->(_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))),@usn5=(`5esn` {`3esn`:_usn3 In 1.e1}) Union All Delete Reduce(``=$`7esn` Contains 9e12 Contains `2esn`,@usn5 In 07[{_usn4}..{`4esn`}]|True[..{_usn3}][..999]) In Reduce(`6esn`=#usn8 Ends With 0Xa,usn1 In #usn8 =~$@usn5|$7[.e1]) In Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`}),[$`4esn` =~{usn1}] Is Not Null,01234567 Is Not Null Create Unique `2esn`=((:usn2)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})),((`7esn` :@usn5:usn2)<-[:``* 010{`2esn`:'s_str'[..'s_str'][..{#usn7}]}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{@usn5:{7} Starts With $usn2 Starts With $usn2}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})) Union Optional Match `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`6esn`=(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Using Index @usn6:@usn6(@usn6)"),
    octest_legacy:ct_string("With  *,$7 In $usn2 In {1000} Order By {`4esn`} Starts With $12 Starts With 0Xa Desc,{7} Is Null Is Null Desc,$@usn5[00][0Xa] Asc Load Csv With Headers From usn2[$7..``][$``..$_usn3] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove [07[_usn3][123456789],#usn8 Ends With 0Xa].usn1 Detach Delete 0x0[{`1esn`}],Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})],0Xa[01..$`1esn`] Union Create (`3esn` :``:usn1)<-[:@usn6]->(`2esn` :_usn4:`1esn`{#usn7:'s_str'[9e12..][12e12..],``:$`1esn` Contains usn2 Contains 1.0}),Shortestpath((`3esn` )-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]-(:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Create (`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}) Union Foreach(`3esn` In #usn8[#usn8..]| Load Csv With Headers From 0.12 Is Not Null As @usn6 Fieldterminator 's_str' With Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`])) Remove Case When {#usn8} =~$0 Then $12 Is Null When `4esn` Starts With $12 Starts With $12 Then 0X7 =~$`6esn` End.``!,[_usn4 In .e12 Is Not Null Where {usn2}[`2esn`..{`4esn`}][_usn4..``]|`4esn` Is Null].#usn8! Unwind Shortestpath((:#usn7:`6esn`{`5esn`:@usn5 In 00,`6esn`:0.e0[$`1esn`..]})<-[@usn5?* 00..999]->(`3esn` :#usn8:#usn7{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1}))[Reduce(usn2={`6esn`} Is Not Null Is Not Null,#usn7 In {`5esn`} Ends With `2esn`|07[_usn3][123456789])..(:_usn4:`1esn`{``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]})<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(:@usn5:usn2{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}})][Allshortestpaths((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]}))..[@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $`7esn` Contains 9e12 Contains `2esn`]] As _usn3"),
    octest_legacy:ct_string("Start ``=Relationship:_usn4(`3esn`='s_str') Where 9e12[..#usn7][...e0] Merge Shortestpath(((@usn5 :`6esn`:`4esn`))) On Create Set $0.`3esn` =0 Is Null Is Null Unwind `5esn` =~0e0 As `1esn`"),
    octest_legacy:ct_string("Merge Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Start `2esn`=Node:_usn3({_usn3}) Where 0x0 Is Not Null Union All Remove {`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1}.@usn6!,`2esn`:`2esn` With  12.0 Starts With 00 Starts With 9e1 As `6esn`,07[{_usn4}..{`4esn`}],_usn4 =~$`2esn` As #usn8 Load Csv From True Ends With usn1 As #usn8 Fieldterminator 's_str' Union All Remove All(`4esn` In False[0.0..{@usn6}] Where 12.0 Starts With 00 Starts With 9e1).`8esn`!,Case 0x0[{`1esn`}] When 1e1[1.e1..] Then 999[$_usn3][@usn6] End.#usn7"),
    octest_legacy:ct_string("Unwind False Contains {``} Contains $`2esn` As `` Load Csv From 01234567 =~{@usn5} =~1e1 As `2esn`  Remove Case 0x0 Is Not Null When .e12 Is Null Is Null Then `1esn` In 9e0 In {7} Else {`8esn`}[{`6esn`}..1.e1] End.@usn5!,@usn6:`8esn`:_usn3 Union All Remove Single(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999})._usn4?"),
    octest_legacy:ct_string("Start `7esn`=Node:_usn3('s_str')  Merge `3esn`=((@usn5 :`6esn`:`4esn`)) On Match Set #usn8+=`1esn` In {999} In $123456789,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 =9e1[010..][`5esn`..],`3esn`+={`7esn`} On Create Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`4esn` As `7esn` Fieldterminator 's_str' With Distinct Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null As `6esn`,$#usn7 Is Not Null Is Not Null Skip $7[\"d_str\"][`8esn`] Limit usn1 Is Not Null Is Not Null Where {`7esn`} Ends With $usn2 Ends With 9e0"),
    octest_legacy:ct_string("Detach Delete _usn4[12.e12..],(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]-({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]-(:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}) =~[`1esn` In {``} =~{`2esn`} =~$`8esn`|`4esn`[`1esn`][{`8esn`}]],123456789[{_usn3}] Union All Load Csv From Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] As `6esn` Fieldterminator 's_str' Union All With  *,(`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) As @usn5 Order By 0 Contains 123.654 Descending,{`5esn`} Ends With `2esn` Descending,{999} =~7 =~{usn1} Desc Where {0}[.e12..] Create Unique Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Start #usn7=Relationship( {7}) ,`2esn`=Node:``(@usn6='s_str')Where {7} Starts With $usn2 Starts With $usn2"),
    octest_legacy:ct_string("Return *,#usn7[..$`1esn`][..{`1esn`}] Order By $`1esn` Contains usn2 Contains 1.0 Ascending Skip #usn7 Ends With {@usn5} Union Create Unique #usn7=Shortestpath((({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) Start usn1=Relationship:@usn6('s_str') "),
    octest_legacy:ct_string("Return Distinct 00[usn2..`3esn`][0X0123456789ABCDEF..$7],{_usn3:9e12[..#usn7][...e0]}[(usn1 {`8esn`:12e12[..1.e1][..$12]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]->(`` :`5esn`{#usn8:`4esn` Starts With 0x0})][{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null}] As `1esn`,1.0 =~`7esn` =~$`7esn` Create _usn3=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}),_usn4=Allshortestpaths((((`6esn` {#usn7:999[1000..]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0}))))"),
    octest_legacy:ct_string("Optional Match `3esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})),#usn8=((@usn6 {@usn6:{0}[$0][$#usn7]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) Using Join On @usn6,usn2,`5esn` Foreach(_usn4 In $`1esn` Is Not Null| With  [usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000|`2esn` =~$#usn7 =~_usn4] Starts With Extract(`6esn` In {1000} Is Not Null|12e12 In Null In {7}) Starts With {_usn4:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,usn1:9e1[..2.12][..@usn6]} As usn2,#usn7 Ends With {@usn5} Order By {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Ascending,{#usn7} Is Null Is Null Ascending Skip `5esn` In 123.654 In {`6esn`} Where 0 =~usn1 Match `6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Where $@usn5[$123456789..][@usn5..]) Create Unique Allshortestpaths((:``:usn1{@usn6:07 Is Null})) Union Delete {_usn4} Is Not Null Unwind (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null As `7esn` Merge ((`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})-[`3esn`?* 0xabc..01234567]-(usn2 {`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})) On Match Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7"),
    octest_legacy:ct_string("Start _usn4=Rel:`3esn`(_usn3={_usn4}) ,`2esn`=Node:`4esn`(`3esn`=\"d_str\")Where 00 =~.e12 With  *,All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]],[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]][Case $#usn7 Is Null When {`7esn`} Contains 's_str' Contains 01 Then $`6esn` Is Null Is Null Else usn2[$7..$`5esn`] End] As `8esn` Union Return Distinct 0xabc In {`6esn`} In $@usn6 As ``,0.e0 Starts With 0x0 Starts With {12} As _usn4,`5esn`[$usn1..$7] As `` Order By {`2esn`}[..{123456789}] Asc,#usn8 Is Null Desc,@usn6 Is Not Null Is Not Null Desc Skip {1000} Contains 0.e0 Contains $123456789 Delete Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,1e1 Ends With {usn1} Ends With `2esn`,Count(*)[#usn8][$usn1]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $12 Is Not Null Is Not Null As #usn7 "),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Using Scan @usn6:@usn5 Create Unique @usn6=(:usn2{usn1:1.e1 =~123.654 =~$`3esn`}) Unwind $usn2[`4esn`..] As #usn8 Union All Load Csv From usn2 Ends With 1.0 Ends With $@usn6 As `3esn` Fieldterminator 's_str' Union All Start `4esn`=Rel:_usn3({_usn3})  Start usn2=Node:`6esn`('s_str') Where _usn4 =~$#usn7 =~`8esn`"),
    octest_legacy:ct_string("Create Unique @usn5=Allshortestpaths((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})))),((:#usn8:#usn7{`2esn`:usn2[01234567..],`2esn`:$7[..999][..`2esn`]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))"),
    octest_legacy:ct_string("With  .e12[{1000}] As `7esn` Order By 01[@usn5..{_usn4}] Asc Unwind 0Xa Starts With 's_str' Starts With #usn7 As `` Match usn2=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}),`3esn`=Shortestpath(((#usn8 :usn1)-[?* 0X0123456789ABCDEF]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) Using Join On #usn8,_usn3 Using Join On #usn7,`6esn`"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Optional Match `7esn`=({`3esn`:_usn3 In 1.e1}),((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan `6esn`:`7esn` Using Join On `3esn`,`4esn` Union Create Unique @usn6=Shortestpath((`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})-[:usn1|:@usn6* 0X0123456789ABCDEF]->(#usn8 :@usn5:usn2)) Union Merge @usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) On Create Set `2esn`+=$0 Ends With 12.0 Ends With _usn4,usn1 =Reduce(_usn3=$#usn8 In {12} In $`4esn`,_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])[Single(@usn5 In 1.0 Starts With 12 Where True =~_usn3)] On Create Set @usn6+=$#usn7 Starts With $`4esn` Create Unique ({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}),_usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) With Distinct usn2[..12.e12][..0.0] As `4esn`,$`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As `1esn`,None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] As _usn3 Order By 1000 Contains 12.e12 Ascending,0x0 =~0.12 =~$_usn4 Descending Skip _usn3 Ends With {`7esn`} Ends With 12 Where $`3esn` Is Null Is Null"),
    octest_legacy:ct_string("Remove Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True In `8esn`)._usn4! Union Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where $`8esn` Contains 12|{_usn4} =~0 =~{12}].`4esn`!,[@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`|Count(*)[#usn8][$usn1]].`8esn`?,Shortestpath((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]}))._usn3! Union All Optional Match `1esn`=((`1esn` :`3esn`:@usn5{_usn3:{`5esn`} Ends With `2esn`,_usn3:{#usn7} Contains {`7esn`} Contains $`3esn`})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) Using Join On `2esn`,usn2,@usn6 Using Index `2esn`:`4esn`(_usn4) Where $#usn7 Contains {usn2} Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`).@usn6! Create Unique (((@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)<-[`3esn`?:`6esn`|:`7esn`* ..999]->({#usn8:0xabc =~{_usn4}}))),((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]}))"),
    octest_legacy:ct_string("Create `1esn`=Shortestpath((`` )),`8esn`=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))"),
    octest_legacy:ct_string("Remove {usn1:010,`5esn`:{@usn5}[{``}][{_usn4}]}.`8esn`!,[$`3esn` In {`1esn`} In 12e12,999[$_usn3][@usn6]]._usn3,(:@usn6)<-[:`3esn`|``* 1000]-(`6esn` :usn1)<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}).`7esn` With  [0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1) As #usn8 Order By 0e0 Descending,[{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])] Asc Where {usn1} Is Null Is Null With  *,\"d_str\"[..{`1esn`}][..$`2esn`] As @usn6,Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With {@usn6:00[.e0][010]} Order By 0Xa Is Null Is Null Ascending,{`4esn`} Contains \"d_str\" Asc,01234567 =~{usn1} =~$123456789 Ascending Skip (#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null Where @usn6 Contains {0} Union All Foreach(#usn8 In 010 Is Not Null Is Not Null| Delete 1e1 Is Not Null Is Not Null Create (((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}))))"),
    octest_legacy:ct_string("Start `1esn`=Node:_usn3(usn2=\"d_str\") ,`5esn`=Node:`4esn`(usn2='s_str')Where {`6esn`} Is Not Null Is Not Null With Distinct *,.e0 Starts With usn2 As ``,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Desc Limit [usn2 In 999[{123456789}..999] Where {usn1} Contains 123.654 Contains {#usn8}|.e12[Count(*)..{`4esn`}][07..$1000]] =~`7esn` =~(:`5esn`{`2esn`:0xabc =~{`8esn`} =~{_usn3}})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}) Detach Delete 0xabc[0.e0..][$7..],#usn8 Is Null,0.e0 Ends With 12.e12 Ends With $usn2"),
    octest_legacy:ct_string("Return Distinct [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]),1.0 =~`7esn` =~$`7esn` Order By {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Ascending,{#usn7} Is Null Is Null Ascending Create Shortestpath((((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[`5esn`?:usn1|:@usn6]-(usn2 :`2esn`)<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})))) Return *,12[$`8esn`..{_usn4}] As #usn8,0Xa[$#usn8] As usn1"),
    octest_legacy:ct_string("Unwind $123456789 Ends With 1e1 As `6esn` Merge ((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})-[usn2?:`1esn`|``* 0x0..7]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})) On Create Set `3esn` =[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) On Match Set `4esn` =12[{_usn4}..$_usn3][{`6esn`}..`3esn`],@usn6($usn1 Is Not Null Is Not Null,$123456789 In $7)._usn4? =01[123456789..][$_usn4..],`8esn`+=$12[0xabc..][12e12..]"),
    octest_legacy:ct_string("Unwind Null[`1esn`..00] As `8esn` Merge ``=Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[#usn8?:`8esn`|:_usn3* 123456789..999]-(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07}))) On Match Set `5esn`+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) On Create Set @usn6 ={usn1}[Null..][Null..],@usn6:_usn4:`1esn`,usn2+=usn1 Contains $999 Union All Match `6esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Create usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),((`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)) Union Remove Extract(`6esn` In {1000} Is Not Null Where $`2esn`[Null][{``}]|{``}[$@usn5]).@usn6!,[{@usn6} Starts With .e1,`8esn` =~0,usn2[$7..$`5esn`]].`1esn`?,Reduce(_usn3=$999 Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|{#usn7} Contains {`7esn`} Contains $`3esn`).usn2 Load Csv From Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}) As `6esn` "),
    octest_legacy:ct_string("Match `5esn`=Allshortestpaths(((`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})<-[`6esn`:@usn5|``{usn2}]-(@usn5 )<-[:``* 010]-(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) Using Join On `5esn`,`2esn` Using Join On `6esn`,usn2,`4esn`"),
    octest_legacy:ct_string("With Distinct 123.654 Is Null Is Null Order By 0.12 =~$`7esn` =~`8esn` Desc,{`7esn`}[..$`8esn`][..{`8esn`}] Descending Load Csv With Headers From $`1esn` Contains usn2 Contains 1.0 As #usn7  Unwind `` =~_usn3 =~{`6esn`} As `4esn` Union All Remove (`5esn` :@usn6)<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(:@usn5:usn2{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(usn1 {_usn3}).`2esn`!,Case When {`3esn`} Ends With $123456789 Ends With {12} Then 12 Is Null Is Null When $#usn8 In $0 In {`2esn`} Then {usn1}[12e12..`6esn`][`7esn`..$`6esn`] Else 1.0 Starts With 12 End.`7esn` Return {1000}[0e0][{usn1}],{@usn5} In 0X0123456789ABCDEF In 1000,$`2esn`[Null][{``}] Order By [{@usn6} Contains {_usn3} Contains 1000,$usn1[..$`1esn`]][{`5esn`:Null[False..][12.e12..]}..[`4esn` Is Null]] Descending Skip Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Is Not Null Is Not Null Limit Count(*)[#usn8][$usn1] Foreach(`7esn` In Null In {_usn3} In _usn3| Optional Match `2esn`=((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[@usn5?* 00..999]->(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})),`1esn`=(((_usn3 :`5esn`)<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}))) Create ((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})),@usn5=Shortestpath(((`` :#usn8:#usn7)<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})))) Union Foreach(`4esn` In {@usn6} Starts With 00| Start `6esn`=Rel:@usn6(`8esn`={`7esn`}) Where {999} Ends With 1000 Ends With 1e1) Load Csv From Null[..010][..$@usn6] As @usn6 "),
    octest_legacy:ct_string("Merge usn1=(((`8esn` :`2esn`{`5esn`:0 Is Not Null})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(`2esn` :`6esn`:`4esn`)-[@usn5:`6esn`|:`7esn`* ..999]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12}))) With  Extract(usn1 In #usn8 =~$@usn5 Where {999}[`2esn`]|.e12[Count(*)..{`4esn`}][07..$1000])[[`3esn` Starts With @usn5 Starts With {`4esn`},_usn3[$123456789..],00 Starts With 12 Starts With 0e0]..][[`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2]..] As usn2 Order By 9e1 Is Not Null Ascending,0X0123456789ABCDEF Is Not Null Is Not Null Ascending,.e1 Ends With $usn2 Ends With $7 Ascending Skip (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..] Limit {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Union All Start #usn8=Node:`4esn`(`3esn`=\"d_str\") ,`3esn`=Node:#usn8(`4esn`=\"d_str\")Where 0xabc[{@usn5}] Foreach(`` In [usn2 In 999[{123456789}..999] Where @usn5[_usn3..{12}][{999}..$7]] Starts With [`6esn` In {1000} Is Not Null Where 01] Starts With None(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)| Detach Delete 123.654 Contains $`4esn` Contains .e1,0x0 Is Not Null Is Not Null,$12 Contains .e1 Unwind $@usn5[$7..@usn5] As usn1) Match Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})))) Using Scan `4esn`:`6esn` Using Join On usn2,`` Where .e12 In `1esn` In `3esn` Union Start #usn8=Relationship:#usn7(usn2=\"d_str\") ,`5esn`=Node:#usn7({``})Where 1000 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind [01234567[``..$`1esn`][True..$#usn7]] =~Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {7} Starts With $usn2 Starts With $usn2) As `1esn` Remove [00 Starts With 12 Starts With 0e0].`2esn`,None(@usn5 In 1.0 Starts With 12 Where 12.0 Ends With 0e0 Ends With $123456789).#usn8,Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))).`5esn`! Union All Delete 01234567[``..$`1esn`][True..$#usn7],{@usn5}[1000] Union Merge Allshortestpaths((_usn4 )) On Match Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] On Create Set _usn3+={#usn7} Starts With $`1esn` Starts With 07,@usn5+={@usn6}[{usn2}..],`4esn`+=count(Distinct $`6esn` Is Not Null Is Not Null,010 Ends With 123456789 Ends With .e0) Contains {#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`} Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]|_usn3[$123456789..]) Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") "),
    octest_legacy:ct_string("Return Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})] As usn1,Reduce(`1esn`=$`7esn` Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|$#usn7[$usn2..@usn6][$`7esn`..{7}]) In Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) In Case _usn3 In 1.e1 When $`4esn` Ends With $12 Then #usn8 Starts With {_usn3} Starts With 123.654 When $`6esn` Is Not Null Is Not Null Then $@usn6 End As _usn4,_usn4[..{`3esn`}][..{@usn6}] Order By {`6esn`}[{usn2}..$`3esn`][12.0..0xabc] Descending Skip {@usn5}[Case 010 Ends With 123456789 Ends With .e0 When {#usn8} Is Not Null Is Not Null Then $`6esn` Is Null Is Null End..Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6|Null[False..][12.e12..])] Union All Detach Delete Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End],Case When _usn3 Ends With {#usn7} Then {usn1} Is Null Is Null When `1esn` In 12.e12 In $#usn7 Then 1.0 =~`7esn` =~$`7esn` End In Case When 999 Starts With {``} Then Count(*) In `1esn` In {_usn3} Else {`2esn`} End"),
    octest_legacy:ct_string("Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)._usn3,count(Distinct 1e1[{`3esn`}][True]).`1esn`,[@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].@usn6? Create _usn3=Shortestpath((((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6)))),Shortestpath((((_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})))) With  *,1e1 Contains @usn6 Contains {`8esn`} As `7esn`,Case `8esn` =~{`3esn`} =~9e12 When {#usn8} Is Not Null Is Not Null Then $@usn5[$7..@usn5] End[..(#usn7 :#usn7:`6esn`{1000})-[:`3esn`|``]-(:usn1{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})][..{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null}] Limit 0.e0[#usn7..][$@usn5..] Where {999} =~7 =~{usn1}"),
    octest_legacy:ct_string("Create Unique (`4esn` {@usn5:`3esn`[#usn8]})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}) Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Using Scan _usn4:usn2 Using Index @usn6:@usn6(@usn6) Create Allshortestpaths((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})),((_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})) Union All Load Csv From (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) As `` Fieldterminator 's_str' Remove @usn6(True In `8esn`).#usn7? Start usn2=Relationship:`4esn`(\"d_str\") Where `1esn` In {`4esn`}"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`1esn` :@usn6{_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) On Create Set [usn1 Ends With $@usn6 Ends With $1000].#usn8? =.e12 Contains {`6esn`} Contains .e12,@usn5:_usn4:`1esn`,@usn5 =0X7[..`2esn`][..@usn5] Union All With Distinct *,0X0123456789ABCDEF Is Null As `1esn` Order By @usn5(12e12 In Null In {7}) Contains Case When `5esn`[$123456789][`2esn`] Then $`2esn`[Null][{``}] When {`7esn`}[..0xabc][..0e0] Then {#usn7} =~{usn1} Else #usn8 Is Null End Ascending,[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) Asc,#usn8 Ends With `5esn` Ends With _usn3 Ascending Skip {7} Is Null Is Null Where @usn5 In 00 Optional Match _usn4=(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07}),`6esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Using Scan `6esn`:`2esn` Remove (_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}).`4esn`? Union All Start usn2=Relationship:`6esn`({#usn8}) "),
    octest_legacy:ct_string("Foreach(@usn5 In #usn8(`6esn` Ends With 0x0 Ends With 12,1.0 Starts With 12)[Reduce(`7esn`=123.654[2.12..][{`7esn`}..],`4esn` In False[0.0..{@usn6}]|9e0[..{usn1}])..]| Unwind $`4esn`[9e12..$_usn4][usn1..{`5esn`}] As @usn6 Optional Match Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Join On _usn4,`8esn` Where @usn5[..$`7esn`][..$`6esn`]) Delete {`8esn`} In 12 In 1e1,\"d_str\" Starts With $7 Starts With 2.12 Merge `5esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))))"),
    octest_legacy:ct_string("Foreach(#usn8 In `5esn`[$123456789][`2esn`]| Create (usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) Union All Match #usn7=Shortestpath((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})) Using Join On `7esn`,_usn3,`3esn` Return Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]) Load Csv With Headers From 2.12 Contains {1000} Contains 1.e1 As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match Shortestpath((((:`1esn`{`4esn`:{_usn4} =~0 =~{12}})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`)-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)))),`6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Return Distinct *,{_usn3:9e12[..#usn7][...e0]}[Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010])..Reduce(#usn8=0.e0[$`1esn`..],`1esn` In {``} =~{`2esn`} =~$`8esn`|\"d_str\"[..{`1esn`}][..$`2esn`])][Case When #usn8 Ends With `5esn` Ends With _usn3 Then {`6esn`} Starts With 0xabc End..(:@usn6)<-[:`3esn`|``* 1000]-(`6esn` :usn1)<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})] As ``,`4esn` In \"d_str\" In $`` As usn1 Order By {`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null Ascending Skip Reduce(@usn5={0}[$usn2..0.e0][{`4esn`}..True],`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}|0Xa Contains {`4esn`} Contains {`1esn`})[Reduce(`7esn`=123.654[2.12..][{`7esn`}..],`4esn` In False[0.0..{@usn6}]|9e0[..{usn1}])..Case 0x0[9e0..][$@usn5..] When 0[`6esn`][1e1] Then {`2esn`}[..``] Else {0}[$0][$#usn7] End] Limit $999 Is Not Null Is Not Null Remove Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where usn1[12.e12..$`1esn`][$`2esn`..0Xa]|$1000[999..][0Xa..]).`1esn`! Union Merge `1esn`=((`4esn` {`4esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})<-[`5esn`* 01234567..0Xa]-(`2esn` )-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) On Match Set `4esn` =12[{_usn4}..$_usn3][{`6esn`}..`3esn`],@usn6($usn1 Is Not Null Is Not Null,$123456789 In $7)._usn4? =01[123456789..][$_usn4..],`8esn`+=$12[0xabc..][12e12..] Remove Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {@usn6} Is Null Is Null|`5esn`[$usn1..$7]).@usn6? Union Create Unique `4esn`=Shortestpath(((`8esn` )<-[:`6esn`|:`7esn`]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]}))),@usn6=(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)"),
    octest_legacy:ct_string("Detach Delete Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))],{#usn7} Is Null Is Null,None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Match `1esn`=Allshortestpaths((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))),`8esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) Where $usn1 Ends With {123456789} Ends With 1.e1 Return Distinct {usn1}[..{#usn7}] As `5esn`,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As #usn8,00[0xabc..][`8esn`..] Order By `1esn`[..{`4esn`}][..{0}] Asc Limit {1000}[$``..$`6esn`][{@usn5}..$_usn4] Merge `4esn`=((:usn2{`2esn`:{`3esn`} Is Null Is Null,@usn5:00 =~.e12})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[?$@usn6]-({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})) Union With Distinct *,\"d_str\"[..{`1esn`}][..$`2esn`] As @usn6,Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With {@usn6:00[.e0][010]} Order By 0Xa Is Null Is Null Ascending,{`4esn`} Contains \"d_str\" Asc,01234567 =~{usn1} =~$123456789 Ascending Skip (#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null Where True In `8esn` Load Csv With Headers From $`8esn`[2.12][$_usn4] As #usn8 Fieldterminator \"d_str\" Merge #usn8=Shortestpath(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))) On Match Set `3esn`+='s_str' Ends With $0,usn2 =0[`7esn`..][$12..],Shortestpath((((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]})))).`3esn`! ={`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] On Create Set @usn5+=1.0 Is Null Is Null"),
    octest_legacy:ct_string("Foreach(`` In `2esn`[{_usn3}..9e1][$`7esn`..Count(*)]| Create ((({usn2:.e0 In 9e1 In $_usn3,_usn4:True[12e12..]})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})))) Return Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn2,.e12 Is Not Null As _usn4 Order By {`2esn`}[..{123456789}] Asc,#usn8 Is Null Desc,@usn6 Is Not Null Is Not Null Desc Limit {@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]} Contains Filter(`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0) Contains Case When 01234567[usn1] Then $`4esn`[{@usn5}] End Union All Load Csv From $7[{`7esn`}][12.0] As _usn3 Fieldterminator 's_str' Union All Create Unique Shortestpath((usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})<-[?:`2esn`* ..999{usn1:.e1[..`2esn`],@usn5:12.e12[..9e12][..1000]}]->({`1esn`:{1000}[0e0][{usn1}]})),(@usn5 :@usn5:usn2)<-[`1esn`* ..12]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Merge @usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Remove [@usn5 In 1.0 Starts With 12 Where .e0 Starts With usn2].`3esn`,Shortestpath(((_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})<-[`5esn`:`1esn`|``]->(@usn5 :@usn5:usn2{_usn3:'s_str'[..$123456789][..{1000}],`7esn`:.e12[Count(*)..{`4esn`}][07..$1000]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]->(`1esn` {`3esn`:0.12 In `8esn`}))).`7esn`! Create Unique Allshortestpaths(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) Union All Create Unique ({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}),Allshortestpaths((@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0})) Union Delete {_usn4:$@usn6 Contains 0 Contains 0}[#usn7(Distinct @usn5[..$`7esn`][..$`6esn`])..Shortestpath(((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})))][`6esn`({`1esn`}[`1esn`..123.654][{`4esn`}..$7])..None(#usn8 In True In `8esn` Where {`2esn`}[usn2..][$#usn7..])],{``} In $0"),
    octest_legacy:ct_string("Delete Null Starts With 's_str' Starts With {`1esn`},0.12[`8esn`..],{@usn6}[..0.e0][..$0] Load Csv From $#usn7[$``..{`7esn`}] As _usn3  Create Allshortestpaths((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[`8esn`* 00..999{`5esn`:{`7esn`}[..1000][..#usn7]}]-(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})),`6esn`=(_usn4 {`2esn`:0[{`4esn`}..],`6esn`:{`2esn`}[..{123456789}]})<-[@usn5{@usn5:00 =~.e12}]->(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})"),
    octest_legacy:ct_string("Load Csv With Headers From {`4esn`:$123456789 Ends With 1e1} As #usn7  Foreach(`5esn` In $usn1 Ends With {123456789} Ends With 1.e1| Unwind $`2esn`[usn2][#usn7] As `4esn`) Union All Create Unique (`1esn` {#usn8:@usn6 Contains {0}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000) Foreach(`8esn` In `5esn`[..$_usn3]| Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Remove [_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|{`2esn`} Contains 0.12 Contains 0.0].`3esn`!,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`6esn`}[_usn3]).@usn5?)"),
    octest_legacy:ct_string("Start `1esn`=Node:#usn8(\"d_str\") Where $7[{`7esn`}][12.0] Merge ``=(`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}) Remove (usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]})<-[_usn4?* 00..999{_usn3:9e1[010..][`5esn`..],`1esn`:$@usn6[..{`6esn`}][...e0]}]-(:@usn5:usn2).`6esn`!,$#usn8.`6esn`!,All(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $7 In $usn2 In {1000}).usn2?"),
    octest_legacy:ct_string("With Distinct *,$_usn3 Contains {#usn8} Order By 0[`6esn`][1e1] Asc,.e1[..`2esn`] Desc Limit `1esn`[$``][{`5esn`}] Delete {_usn4} Is Not Null Remove @usn6(Distinct 1e1[1.e1..]).`1esn`,Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|{`7esn`} Starts With 12.0 Starts With 07).@usn5?,usn2(@usn5[123.654..$_usn4][0.12..$@usn6],{#usn7}[$usn2]).`8esn` Union All Start `7esn`=Node:`6esn`({#usn8}) "),
    octest_legacy:ct_string("Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}}))"),
    octest_legacy:ct_string("Foreach(`` In {_usn3} In 010 In 0.e0| With  Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `3esn`,9e0 Starts With 9e1 Starts With 12e12,0e0[$usn2..1e1][$7..12e12] Order By Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Descending,_usn4 Ends With $`3esn` Ends With {`3esn`} Desc Limit {@usn5} Is Null Is Null Where $`7esn` Contains 9e12 Contains `2esn` Create `5esn`=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})))) Create Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654}))) Union All Unwind Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End =~`6esn` =~All(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) As `7esn` Union Load Csv With Headers From Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null As usn2  Merge Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) On Match Set @usn6 =Shortestpath((`4esn` :usn1)-[`4esn`?* 01..]-(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})) Contains (:`2esn`{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1})<-[:usn2|_usn3* 0xabc..01234567]->(:_usn4:`1esn`) Contains (:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(usn1 {_usn3}),_usn4+=0Xa[$#usn8],`8esn`+={123456789}[..Count(*)] On Match Set (_usn4 :_usn3:@usn6{_usn4:Null[False..][12.e12..]})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->(#usn7 {`3esn`:{usn1}[..{#usn7}]}).`3esn` =True =~`5esn`"),
    octest_legacy:ct_string("Match @usn6=Shortestpath(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Using Scan usn2:_usn4 Using Scan #usn7:@usn5 With  `7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True As `6esn`,All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null As `6esn`,0x0[9e0..][$@usn5..] As _usn3 Order By 01234567 Starts With 01 Starts With 1.e1 Desc Skip $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] Limit {12}[{`5esn`}][7] Where {@usn6}[..0.e0][..$0]"),
    octest_legacy:ct_string("Foreach(`3esn` In {@usn5} Contains 0X7 Contains 1e1| Delete $`2esn`[#usn7][01],0Xa[$#usn8] Create Shortestpath((((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[`5esn`?:usn1|:@usn6]-(usn2 :`2esn`)<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null}))))) Create Unique Shortestpath((@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})-[?* 00..999]->(`4esn` :@usn6)),`4esn`=Shortestpath(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Optional Match (_usn3 :`3esn`:@usn5{``:1.0 =~`7esn` =~$`7esn`,`3esn`:{`4esn`} Contains \"d_str\"}),(({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1)) Using Scan @usn6:`1esn` Using Scan `7esn`:`2esn` Union Return *,$_usn3 Contains {#usn8} Skip `2esn` =~$#usn7 =~_usn4 Limit {`7esn`}[..$`8esn`][..{`8esn`}] Union Create @usn6=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))),Shortestpath(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})))"),
    octest_legacy:ct_string("Start `5esn`=Node:usn1(\"d_str\") ,@usn6=Relationship:`8esn`({``})Where #usn7 Starts With {@usn6} Starts With {`1esn`} Union All Foreach(`` In $`7esn` =~#usn8 =~{`7esn`}| Return *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]] Limit 1e1 Is Not Null Is Not Null With  *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Where `1esn` In {`4esn`}) With  *,$_usn4 Ends With False Ends With $#usn8,{``}[$@usn5] As @usn5 Limit 12e12 In Null In {7} Where $12[`6esn`][$#usn8] Union Foreach(usn1 In {usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}} Starts With [$`6esn` Starts With _usn4 Starts With `5esn`,{999} Ends With 1000 Ends With 1e1] Starts With Reduce(`7esn`=$#usn7[$`1esn`..{`1esn`}],`1esn` In {``} =~{`2esn`} =~$`8esn`|`6esn` =~12.e12 =~123456789)| With  Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..],9e12[1000] As `` Where $@usn5[$123456789..][@usn5..]) With  _usn4[12.e12..] As ``,Extract(`5esn` In $999[12] Where False[0.0..{@usn6}]|0Xa Contains {`4esn`} Contains {`1esn`})[Case $@usn5[`2esn`..][#usn7..] When {`6esn`}[$1000] Then {`3esn`} Ends With $123456789 Ends With {12} When $12[{`5esn`}..] Then #usn8 =~$@usn5 End][None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)],{`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5] Order By [0e0 Is Null,$`1esn` Contains usn2 Contains 1.0,1000[9e12][$`1esn`]] Ends With (@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Descending,Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End Asc"),
    octest_legacy:ct_string("Remove [$`7esn` Ends With usn2].@usn6,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where {7} Starts With $usn2 Starts With $usn2).``,`2esn`({@usn5} In 0X0123456789ABCDEF In 1000).#usn7 Return Distinct 7[_usn4..0.12] As usn2,0X0123456789ABCDEF[..$`1esn`] As @usn6 Order By 999 Is Not Null Is Not Null Desc,{``} Ends With `8esn` Ends With {`6esn`} Asc,{`5esn`}[0X7..] Descending"),
    octest_legacy:ct_string("Create Unique `2esn`=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})),`6esn`=({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}) Create ((_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(`5esn` :`5esn`{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]})),Shortestpath((:#usn8:#usn7)-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)) Merge `7esn`=Allshortestpaths((@usn6 $1000)-[:@usn6* 1000{`6esn`:{`6esn`} Is Not Null Is Not Null}]->(@usn5 :`1esn`)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})) On Match Set Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})).#usn7? =Single(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)[..[@usn5[123.654..$_usn4][0.12..$@usn6],00[{999}..$#usn7][$0...e0],0 Is Null]][..@usn6(Distinct {@usn5} =~$`2esn`,@usn5 In 00)] On Create Set `7esn`+=`1esn` In {`4esn`},Any(_usn4 In .e12 Is Not Null Where 999 Is Not Null Is Not Null).`` =[9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) Union Remove Reduce(@usn6=$`5esn` =~`1esn` =~123.654,`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}|9e0[..{usn1}]).`3esn`?,None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where usn1[12.e12..$`1esn`][$`2esn`..0Xa])._usn4 Unwind {`5esn`:12e12[$``..],@usn6:$`3esn` Is Null Is Null} =~{_usn4:`1esn` In 12.e12 In $#usn7} As _usn3 Foreach(`2esn` In {@usn5}[$0][{``}]| Optional Match ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)) Using Scan `2esn`:`7esn` Where 1e1 In $0)"),
    octest_legacy:ct_string("Detach Delete {`3esn`:.e0 Starts With {0} Starts With 0x0}[Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $7 In $usn2 In {1000})][{#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}] Load Csv From Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $`4esn`[{@usn5}]) Contains [usn2 In 999[{123456789}..999] Where .e12 Is Null Is Null|$usn1[01234567]] Contains Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010]) As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Delete $usn2 Is Not Null,$@usn6 Ends With {`6esn`} Ends With 0.e0,{@usn6} In $999 In 01234567 Unwind Allshortestpaths(($#usn7))[..{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}][..Reduce(_usn4=12 Is Null Is Null,`5esn` In $999[12]|{`2esn`}[..``])] As `6esn` Foreach(`7esn` In Reduce(`2esn`=$#usn8 In $0 In {`2esn`},@usn5 In 1.0 Starts With 12|`4esn`[usn2..]) Is Not Null Is Not Null| Detach Delete {`5esn`} Starts With 123456789 Starts With 07,123.654[2.12..][{`7esn`}..] Unwind 1.e1 Is Not Null As `5esn`)"),
    octest_legacy:ct_string("Load Csv From #usn7 Contains `` Contains 0.e0 As `7esn`  Load Csv With Headers From Filter(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6)[Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4})] As _usn4  Union All Remove Single(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1).`3esn` Remove [999,#usn7 Starts With {@usn5} Starts With 07].@usn6! Union Detach Delete 0X0123456789ABCDEF[..`5esn`][..$`3esn`],Null[`8esn`],$`6esn` In $#usn8 Foreach(`4esn` In [@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}]| Return *,$_usn3 Contains {#usn8} Order By usn2[0.e0..] Descending Limit {`1esn`}[01234567..][@usn5..] Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As `6esn`,Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null As _usn4) Create Unique Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6}))"),
    octest_legacy:ct_string("Foreach(`8esn` In Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1.e1 Starts With False Starts With $@usn6) In [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null]| Create `2esn`=(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Create `7esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}),`1esn`=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999})))) Detach Delete [@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}] Union With Distinct *,.e0 Starts With usn2 As ``,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Desc Limit [usn2 In 999[{123456789}..999] Where {usn1} Contains 123.654 Contains {#usn8}|.e12[Count(*)..{`4esn`}][07..$1000]] =~`7esn` =~(:`5esn`{`2esn`:0xabc =~{`8esn`} =~{_usn3}})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}) Detach Delete Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] Load Csv With Headers From {_usn4} =~{`7esn`} =~$#usn7 As ``  Union All Create Unique ((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1})),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Match @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),`1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Using Join On `2esn`,usn2,@usn6 Using Index `6esn`:`2esn`(`3esn`) Where {#usn8}[False..{usn1}][$`6esn`..0Xa]"),
    octest_legacy:ct_string("With Distinct *,{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]} In `6esn`(12.0 Starts With 00 Starts With 9e1) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where False =~9e0 =~{`5esn`}) As `3esn`,Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) Order By {0}[.e12..] Desc Create `1esn`=({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[?{_usn4}]-(:_usn4:`1esn`{_usn3:`3esn` Is Null Is Null}) Union Merge usn1=Allshortestpaths(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[?:usn1|:@usn6{_usn4:$`8esn` In {`2esn`} In $0}]-(usn2 $`3esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [$`4esn` Ends With $12,$`6esn` Is Null Is Null,`8esn` =~{`3esn`} =~9e12] =~Reduce(@usn6=$usn2 =~`6esn` =~{usn1},usn1 In {usn2} Contains {123456789} Contains 0Xa|12.0 Starts With 00 Starts With 9e1) =~Single(`6esn` In {1000} Is Not Null Where Count(*) In {`4esn`}) As @usn6 Fieldterminator 's_str' Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}})) Using Scan _usn3:_usn4 Where {_usn4} In 0.12 In {_usn3}"),
    octest_legacy:ct_string("Unwind 123456789[123.654..{usn1}] As usn1"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((#usn7 :`7esn`:_usn4)<-[?:`5esn`|`3esn`* ..12]->(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})) Using Join On #usn7 Where {999} Ends With 1000 Ends With 1e1 Optional Match Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Using Join On #usn7,`1esn`,_usn4 Using Index `8esn`:#usn8(usn1) Where `7esn`[..{`8esn`}]"),
    octest_legacy:ct_string("Create ({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}),_usn4=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))) With  {`8esn`} Is Null Is Null Order By (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null Ascending,{`4esn`} Contains \"d_str\" Asc,$`8esn`[..`6esn`][..#usn7] Desc Skip $7 Is Not Null Is Not Null Where 2.12 Contains `4esn` Contains .e1 Detach Delete $#usn8[12e12][0X7],Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] Union Optional Match usn1=Shortestpath((`4esn` {@usn5:`3esn`[#usn8]})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})) Using Scan @usn6:`1esn` Using Index @usn5:_usn4(`6esn`) Where 07 Starts With \"d_str\" Starts With $12 Union All Match (@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}),({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}) Using Index @usn5:_usn3(``) Using Index `2esn`:`4esn`(_usn4) Return Distinct @usn5[_usn3..{12}][{999}..$7] As `4esn` Order By 0X7 Is Not Null Is Not Null Asc,{usn1} Starts With #usn8 Desc Skip Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null Limit 1e1 In 0xabc"),
    octest_legacy:ct_string("Match ((@usn5 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[?* 0X7..{`7esn`:$@usn6[..{`6esn`}][...e0]}]-(`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})) Using Scan `8esn`:`1esn` Where 's_str' Ends With 's_str' Ends With $1000 Start @usn5=Relationship:`2esn`(`1esn`=\"d_str\") ,@usn6=Node:``({`2esn`})Where 0.0 Starts With $`6esn` Create usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),(_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Union All Unwind $`3esn` Is Null Is Null As _usn3 Union Merge ((@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 123456789..999]->(:@usn6)<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(`7esn` {`5esn`:$@usn5 Is Not Null})) On Create Set `5esn` ={1000}[..#usn7][..{#usn8}],`5esn` =9e12[..#usn7][...e0],@usn5 =Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Foreach(@usn6 In $`5esn` Starts With 1.0 Starts With $usn2| With Distinct 123.654 Contains $`4esn` Contains .e1,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2,12.0 Starts With 00 Starts With 9e1 As `6esn` Order By Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Ascending,`2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Desc,123456789[$`5esn`] Desc Skip #usn7 Ends With {@usn5} Where 0 Is Null Create ((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})),Allshortestpaths(((`5esn` {999})<-[?:usn2|_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(usn2 :@usn5:usn2))))"),
    octest_legacy:ct_string("Create Unique (`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}) With Distinct {#usn8} In 07 In 0 As @usn5,@usn5[..$`7esn`][..$`6esn`] As _usn3,$#usn7 =~Count(*) =~@usn5 Where $`6esn`[$7..{`3esn`}] Merge `3esn`=(((:@usn6{@usn6:$999[..$`2esn`]})-[_usn4* 0X0123456789ABCDEF]-(`5esn` {usn2:$#usn7 Contains {usn2}})-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`}))) On Create Set usn2+=($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})[..Case 1e1[..12e12] When @usn5[123.654..$_usn4][0.12..$@usn6] Then $@usn5[`2esn`..][#usn7..] End] On Create Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Union All Return *,0X0123456789ABCDEF Starts With #usn7,Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip {`2esn`}[usn2..][$#usn7..] Start `2esn`=Node:`4esn`(`3esn`=\"d_str\") "),
    octest_legacy:ct_string("Remove Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4)).`7esn`!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From #usn7[9e1..$@usn5] As `3esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match `5esn`=Allshortestpaths((({``:{`5esn`} Ends With `2esn`}))),`8esn`=Shortestpath((#usn8 :@usn6)) Using Scan #usn7:@usn5 Using Join On `5esn`,_usn3,`8esn` Where .e1[@usn5] Start @usn6=Node:`8esn`({1000}) ,`8esn`=Node:_usn3('s_str') Remove [9e1 =~{#usn7},{@usn6}[01234567..],00 Is Null]._usn3!,Reduce(`3esn`=$`1esn` Ends With {1000} Ends With $`8esn`,`1esn` In {``} =~{`2esn`} =~$`8esn`|`5esn`).#usn7,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 010[$12..]).usn1?"),
    octest_legacy:ct_string("Detach Delete 0e0[$usn2..1e1][$7..12e12],#usn8[1e1..`1esn`][{1000}..`6esn`],{`4esn`} Is Null Delete #usn7,12 Ends With @usn5 Ends With 1e1,$999 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind usn2(Distinct 12e12[$``..]) Is Not Null As `3esn` With Distinct *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Order By Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) Ascending,$`7esn`[$1000..Null] Ascending Detach Delete 's_str' =~0xabc =~$@usn5,$@usn5[00][0Xa],Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]) Union All Load Csv With Headers From $#usn7 Contains {usn2} As `6esn` Fieldterminator 's_str' With  $usn1[0X0123456789ABCDEF...e12],`2esn` Is Null Is Null As @usn5,$usn1 Contains 12.e12 Contains {@usn5} As `7esn` Order By 999 Starts With {``} Ascending,Case #usn7 Contains 0X0123456789ABCDEF When 's_str' Ends With 's_str' Ends With $1000 Then `3esn` Is Null Is Null End =~Reduce(usn1=2.12 Contains `4esn` Contains .e1,`6esn` In {1000} Is Not Null|`4esn` Starts With $12 Starts With $12) Ascending,`6esn`[$12][{12}] Descending Skip Count(*) In `1esn` In {_usn3} Where $`3esn` In {`1esn`} In 12e12 Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}))))"),
    octest_legacy:ct_string("Return *,$`7esn` Ends With {usn1} Ends With {``},{``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] Order By {usn1} Contains 123.654 Contains {#usn8} Ascending,`` =~{0} Desc,123.654[$12..True] Ascending Skip 's_str'[9e12..][12e12..] Load Csv From {`7esn`} =~01234567 =~`7esn` As usn2  Merge @usn5=(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Union All Load Csv From Any(@usn5 In 1.0 Starts With 12 Where 0.0[.e12..])[Any(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..])..][{`2esn`:9e1[..2.12][..@usn6],usn1:{usn2} Is Not Null Is Not Null}..] As `7esn` Fieldterminator 's_str' Load Csv With Headers From $`8esn`[#usn7..][0X7..] As `7esn`  Union With  0.e0 Starts With 0x0 Starts With {12},$999[$@usn6..] As @usn6,_usn3 In 1.e1 As `5esn` Skip {`3esn`} Ends With $123456789 Ends With {12} Limit .e12 Is Null Is Null"),
    octest_legacy:ct_string("Match `2esn`=(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) Using Join On #usn7,`1esn`,_usn4 Using Index `4esn`:#usn8(`3esn`) Where True Starts With `` Starts With 0.e0 Match `6esn`=Shortestpath((:`1esn`{@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(_usn3 :_usn3:@usn6)) Using Index @usn5:#usn8(`5esn`) Using Join On #usn8,_usn3 Where $`2esn` Ends With $`2esn` Union All Delete $_usn3[@usn6..][{``}..] With Distinct *,#usn8[1e1..],$`3esn`[`3esn`..] Skip {_usn3} In 010 In 0.e0 Unwind False Contains _usn3 Contains {`5esn`} As #usn8 Union All Create usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),`3esn`=(({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1)) Create Unique ((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))"),
    octest_legacy:ct_string("Detach Delete $999[999..][$_usn4..] Union With Distinct {`7esn`} Ends With Count(*) Ends With {`5esn`} As usn1 Order By 2.12[$`7esn`..] Asc,{_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End Ascending,(`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]}) Starts With {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where ``[$7..``]] Ascending Skip $`2esn`[#usn7] Where {#usn7} Contains \"d_str\" Contains {_usn4} Return *,[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Skip {999} Is Not Null Is Not Null Limit $1000 Is Null Is Null Foreach(#usn7 In 0e0 Starts With 's_str'| With Distinct $@usn5[$7..@usn5] Order By $7[.e1] Descending,usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Descending,0x0 Ends With $@usn6 Ends With {usn2} Asc Limit {#usn7}[9e12..] Where $usn1[..$`1esn`]) Union All Merge @usn6=(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]}) On Create Set ['s_str' Ends With 's_str' Ends With $1000].`6esn` ={7}[{`7esn`}][$12] On Match Set usn2 =.e12[0.0..][$#usn8..] Remove count({usn1}[12e12..`6esn`][`7esn`..$`6esn`]).`6esn` Foreach(`4esn` In [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12})| With Distinct All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),[usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|0.12 Is Not Null] Starts With Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|$`1esn`[0..{_usn3}]) Starts With {`1esn`:$`5esn` Starts With 1.0 Starts With $usn2,@usn6:010[.e12]},Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] As `1esn` Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending Limit 's_str' Is Not Null Is Not Null Where Count(*)[{usn1}..][$`7esn`..])"),
    octest_legacy:ct_string("Optional Match `6esn`=((:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]})) Where 0 =~usn1 Union All Remove Single(`4esn` In False[0.0..{@usn6}] Where {`7esn`}).@usn6!,(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1).``!,Shortestpath(((:@usn6{`1esn`:$999[12],@usn5:07[{_usn4}..{`4esn`}]})<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))).`5esn` Match `8esn`=Allshortestpaths((((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`)))) Where {`7esn`} Starts With 12.0 Starts With 07 Unwind (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null As `5esn` Union All Unwind {`3esn`}[`6esn`..] As `8esn` Return Distinct 0 Contains 123.654,Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..] Skip All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]] Limit Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End[All(#usn8 In True In `8esn` Where .e0 Starts With {0} Starts With 0x0)..All(`4esn` In False[0.0..{@usn6}] Where {`7esn`})] Start #usn7=Rel:`8esn`(#usn8='s_str') "),
    octest_legacy:ct_string("Load Csv With Headers From `5esn`[$usn1..$7] As `2esn` Fieldterminator \"d_str\" Start `6esn`=Node:usn1({usn2}) ,@usn5=Rel:usn1(@usn5={`1esn`}) Match `5esn`=Shortestpath((`2esn` :`6esn`:`4esn`)<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})<-[`8esn`:``{`2esn`:01[$`1esn`..\"d_str\"]}]-(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})),(((_usn3 :`5esn`)<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}))) Using Scan usn1:`5esn`"),
    octest_legacy:ct_string("Optional Match #usn7=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Using Index `8esn`:`7esn`(`2esn`) Using Index `2esn`:`4esn`(_usn4) Start @usn6=Node:usn2(`4esn`={`6esn`}) "),
    octest_legacy:ct_string("Optional Match `3esn`=(_usn4 :usn1{`6esn`:{_usn4}})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]}) Using Scan `5esn`:@usn5 Using Join On `6esn`,`3esn`,`1esn` Load Csv With Headers From $_usn4[0X7..{1000}] As @usn6  Unwind Reduce(`1esn`=7 Is Null Is Null,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$#usn8 In {12} In $`4esn`) =~[$123456789 Ends With 1e1,$`4esn` =~{usn1},0.12 In `8esn`] =~[123.654 Starts With `8esn` Starts With @usn5,$`4esn` Is Null] As usn2"),
    octest_legacy:ct_string("Load Csv From None(`7esn` In @usn5[01..`6esn`] Where {1000} Is Not Null)[None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 1e1 In 0xabc)] As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start `8esn`=Node:usn2({`2esn`}) Where 's_str' Is Not Null Create Unique `4esn`=Allshortestpaths(((({`4esn`:01234567[usn1]})-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn1?* 0X7..{`4esn`:12 =~{#usn7},_usn3:`3esn` Starts With @usn5 Starts With {`4esn`}}]-(:#usn8:#usn7{`7esn`})))) Union All Foreach(`4esn` In {#usn7} Contains \"d_str\" Contains {_usn4}| Detach Delete exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In [#usn8[1e1..]] In Case When {#usn8} =~$0 Then $12 Is Null End,$@usn5 Starts With 1e1 Remove `7esn`(Distinct 0xabc[0.e0..][$7..])._usn3!,Reduce(`7esn`=$0 =~_usn3,#usn7 In $@usn6 Contains 0 Contains 0|{`7esn`} Starts With 12.0 Starts With 07)._usn3,Reduce(`3esn`=12 =~{#usn7},usn2 In {@usn5}|{999} =~7 =~{usn1}).usn1!) Create `8esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Union Load Csv From Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) As `3esn` Fieldterminator 's_str' Delete $123456789[$_usn4],0X7 Is Null Is Null,{`3esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove #usn7:`7esn`:_usn4 Union Remove #usn7:usn2"),
    octest_legacy:ct_string("Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})))) On Create Set Single(`5esn` In $999[12] Where `5esn` In 123.654 In {`6esn`})._usn4 =$`4esn`,`` =(`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000,_usn3+={usn2}[{`7esn`}][$usn2] On Create Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}]"),
    octest_legacy:ct_string("Return Distinct Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) As _usn3,`4esn` Ends With 01 Ends With `5esn` As `6esn` Order By $999 Starts With $usn1 Starts With {`3esn`} Descending,0e0[$@usn5..{usn2}] Descending Limit 1.e1 Starts With False Starts With $@usn6 Foreach(`4esn` In 0[1.0..$``]| Unwind `2esn`(_usn4 =~`1esn`) Contains None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 12.e12 =~$`7esn` =~{``}) Contains {`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]} As `4esn` Unwind {@usn6} Contains {_usn3} Contains 1000 As `4esn`) Optional Match @usn5=Allshortestpaths(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})),((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]-(:_usn4:`1esn`{#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]})-[_usn3:_usn3|:`6esn`]-(`3esn` :`3esn`:@usn5)) Using Scan #usn8:#usn8 Where {@usn5} Contains 0X7 Contains 1e1 Union All Detach Delete 7 =~.e1,$`7esn` Contains $_usn4 Contains `8esn` Detach Delete `1esn` In #usn8 Delete {@usn5}[{`6esn`}..$0][1000..$1000],1.0 Starts With 12"),
    octest_legacy:ct_string("Create Unique @usn6=((`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})-[@usn5* ..999]-(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})),_usn4=(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[`4esn`?:`4esn`|`2esn`* 00..999{`1esn`:$usn2 Starts With {`1esn`}}]->({`4esn`:01234567[usn1]}) Return Distinct *,\"d_str\" Ends With 0e0 Ends With {usn2} As usn1 Skip 's_str' Ends With $0 Return Distinct $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Limit `2esn` In `5esn` Union With  *,None(`7esn` In @usn5[01..`6esn`] Where 12e12[$``..]) In `6esn`(123.654 Starts With `8esn` Starts With @usn5) In Single(#usn7 In {`5esn`} Ends With `2esn` Where {`6esn`}[0.e0..$123456789]),[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Order By Allshortestpaths(((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Is Not Null Is Not Null Asc,$usn1[{_usn3}] Descending Skip $``[..`4esn`][..0]"),
    octest_legacy:ct_string("Return Distinct {`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null Limit (#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Ends With `2esn` Ends With [$`8esn`[#usn7..][0X7..],``[..`3esn`][..{@usn6}]] Create #usn7=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))),#usn7=Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))) Create Unique `1esn`=Shortestpath(((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]->(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})-[_usn3?* 0Xa{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`}]-(:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}))),Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})) Union All Start `3esn`=Rel:`5esn`('s_str') "),
    octest_legacy:ct_string("Create Unique (_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`3esn`?* 0xabc..01234567]-(@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]}),Allshortestpaths((:usn2{#usn8:00[{999}..$#usn7][$0...e0]})) Foreach(`3esn` In {`6esn`} Is Not Null| Detach Delete {0}[$usn2..0.e0][{`4esn`}..True],`6esn`({`1esn`}[`1esn`..123.654][{`4esn`}..$7])[Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})))..][Case When {`6esn`}[0.e0..$123456789] Then 's_str' =~0xabc =~$@usn5 When 0X7 Is Null Is Null Then {999} =~7 =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End..] Remove Extract(usn1 In #usn8 =~$@usn5 Where {#usn7}[{`1esn`}..][`1esn`..]|07 Is Null).#usn8?,Allshortestpaths(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))).`4esn`!,Case `1esn`[$``][{`5esn`}] When $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn` Then `5esn` Starts With {999} Else False Is Null Is Null End.usn2?) Union All Create Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Merge _usn3=({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}) On Match Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}] On Create Set usn1+={123456789} Ends With False Ends With {@usn6},#usn7 =.e0 Is Null Is Null,Extract(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]|.e12 Is Not Null).#usn7 ={usn1}[$`8esn`][0.e0] Optional Match usn1=(:`6esn`:`4esn`$7)-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]}),`4esn`=(((`4esn` :#usn8:#usn7)<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[`3esn`{usn1:$`7esn`[_usn3..][{_usn3}..],_usn4:{`3esn`}[`6esn`..]}]->(_usn3 :`7esn`:_usn4))) Using Scan `4esn`:`3esn` Using Index `7esn`:#usn8(@usn5) Where 1e1 Contains @usn6 Contains {`8esn`} Union Remove None(`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0).`3esn`!"),
    octest_legacy:ct_string("Remove Filter(#usn8 In True In `8esn`).``,[$@usn5 Is Not Null].`3esn`!,(`7esn` :``:usn1{#usn8:$999 In $999})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1).`8esn` Merge `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) On Create Set exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0).`5esn`? =All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),Filter(usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]).`6esn`? =01 Union Merge `2esn`=((:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->(`3esn` :@usn6)) On Create Set Extract(usn2 In 999[{123456789}..999] Where {`5esn`} Ends With `2esn`|usn2[01234567..])._usn3 =True =~_usn3,@usn6+=Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] On Match Set Allshortestpaths(($#usn7)).`5esn`? =usn2 Ends With 1.0 Ends With $@usn6,@usn5+={`4esn`} Is Null,@usn5 ={`6esn`} Starts With 0xabc With Distinct usn2[`2esn`] As usn1,$#usn7[01234567],01234567[usn1] As @usn6 Skip 9e1 =~$`4esn` =~{usn2} Limit 1e1 In 0xabc Unwind $123456789 In $7 As `6esn` Union All With  *,0X0123456789ABCDEF Is Null As `1esn`,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By 010[$12..] Asc,_usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Ascending,9e12 Ends With {``} Ends With 0e0 Desc Where $`3esn` Is Null Is Null Match ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]}))) Using Index @usn5:`6esn`(@usn5) Using Index usn1:usn2(@usn5) With Distinct (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}) Is Not Null As `5esn`,[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {@usn6} Starts With 00|#usn7 Ends With {@usn5}] Is Null Is Null Order By {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..] Desc,None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]) Desc Skip #usn8[01..``][`8esn`..@usn6] Limit Case When `1esn` In {`4esn`} Then $0[{``}..`2esn`] When 01234567[usn1] Then {`2esn`} In `5esn` In usn2 End Contains Case When _usn4 Ends With $`3esn` Ends With {`3esn`} Then $``[{#usn7}..{usn2}] End Contains {@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12}"),
    octest_legacy:ct_string("Optional Match ((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[:`3esn`|``* 1000]->(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),Allshortestpaths(({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})) Using Join On `2esn`,#usn8,@usn5 Using Scan `4esn`:`3esn` Where 12.e12 =~$`7esn` =~{``} Foreach(@usn5 In @usn5 Ends With `8esn`| Start _usn4=Rel:`1esn`(usn1=\"d_str\") ,_usn4=Relationship:`7esn`(`8esn`={1000})) Delete 01 =~0X7,All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Union All Return Distinct $`1esn` =~1.0 =~0X7 As usn1,0 Is Null As `1esn`,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999 In $999][..{`1esn`:0xabc Ends With 1.0 Ends With $``}] As `` Skip 1e1[1000] Limit {999} Ends With 12.0 Return Distinct 0xabc[0.e0..][$7..] Order By {``}[2.12] Asc,999 =~0x0 =~2.12 Ascending Skip count(Distinct $`6esn` Is Not Null Is Not Null,010 Ends With 123456789 Ends With .e0) Contains {#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`} Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]|_usn3[$123456789..]) Limit {12}[{`5esn`}][7]"),
    octest_legacy:ct_string("Detach Delete {#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7} In Case When `4esn` Starts With 0x0 Then #usn8 Ends With 0Xa Else 0X0123456789ABCDEF[0e0..$12][00..{12}] End In (:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(usn1 {_usn3}) Foreach(#usn7 In 12.e12 =~$`7esn` =~{``}| Load Csv From Null Starts With {usn1} Starts With #usn7 As _usn3  Return Distinct *,$`4esn` Is Null Is Null Order By None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null)[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..])..][Allshortestpaths(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})))..] Desc,@usn5 In 00 Descending) Union All Foreach(`5esn` In $#usn7 Is Not Null Is Not Null| Create Unique _usn4=(((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})))) Union All Delete usn1 Ends With $@usn6 Ends With $1000,999 =~0x0 =~2.12 Unwind {_usn3}[{#usn7}] As @usn6 Create Unique (`7esn` :`3esn`:@usn5{#usn7:1.0 Starts With 12,`7esn`:$999 =~$999 =~usn2}),Shortestpath(((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})))"),
    octest_legacy:ct_string("Merge _usn3=(({`3esn`:{#usn8} Is Not Null Is Not Null})) On Create Set `5esn` =$`7esn` Ends With $1000 Ends With {999},`8esn` =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),Allshortestpaths((usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`})).`1esn`? =Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] On Create Set `8esn` =(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 Optional Match `4esn`=(:`6esn`:`4esn`{usn1})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 :@usn5:usn2)<-[* 0]-(usn1 :`4esn`:`3esn`),((_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[?:usn1|:@usn6{_usn4:$`8esn` In {`2esn`} In $0}]-(usn2 $`3esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})) Using Join On #usn8,_usn3 Using Join On #usn8,`8esn`,`8esn` Where $7[@usn6][0xabc]"),
    octest_legacy:ct_string("With  `2esn`(9e1 =~$`4esn` =~{usn2},`5esn` Starts With {999}) Ends With $1000 Ends With Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null),[`3esn` =~12e12,$``[..`4esn`][..0],$#usn7 Starts With $`4esn`][Reduce(usn1=0.0 Is Null,#usn8 In True In `8esn`|`2esn`[0Xa][{`8esn`}])..[$`8esn` Contains {`7esn`} Contains $`4esn`,{`7esn`} =~01234567 =~`7esn`,0xabc =~{_usn4}]][Case When 0Xa[0X7..#usn8][_usn3..9e1] Then 00 Starts With 12 Starts With 0e0 End..Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {999} =~7 =~{usn1})] As #usn7,Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}] As _usn4 Order By 1e1[usn1..$123456789][Count(*)..False] Descending Limit [#usn7 In $@usn6 Contains 0 Contains 0 Where {#usn7} =~{usn1}] Ends With Case When {`6esn`} Is Not Null Then 1000 Is Not Null Is Not Null When 1000 In {`4esn`} Then {`4esn`} Is Null End Where 12 =~$`5esn` =~$_usn3 Load Csv With Headers From 2.12 In {123456789} As usn2  Create Unique Allshortestpaths(((@usn6 $1000))),Shortestpath(((`6esn` :#usn7:`6esn`)<-[`8esn`:``{`2esn`:01[$`1esn`..\"d_str\"]}]-(@usn6 $1000))) Union All With  \"d_str\" Ends With 0e0 Ends With {usn2} As usn1 Where `1esn` In `7esn` In {`7esn`} Unwind {1000}[0e0][{usn1}] As usn2 Unwind (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As @usn5 Union All Start #usn8=Node:_usn4({#usn7}) ,@usn6=Rel:#usn7(``={@usn5}) Foreach(_usn4 In {`3esn`:.e0 Starts With {0} Starts With 0x0}[Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $7 In $usn2 In {1000})][{#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}]| Create Unique ((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From usn2[0.e0..] As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start #usn7=Node:`4esn`(usn2='s_str') Where 0.0 Union All Merge @usn6=(`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`}) On Create Set #usn7 ={@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789} Is Null On Create Set `4esn`+=$12[`6esn`][$#usn8],`3esn`+=$0 Starts With `2esn` Starts With {`1esn`},_usn4:#usn7:`6esn` Create Unique `8esn`=((#usn7 :`7esn`:_usn4)-[`7esn`?:#usn7|:``* 0x0..7]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})),`1esn`=(_usn4 :``:usn1)<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})"),
    octest_legacy:ct_string("Unwind `6esn` Ends With 0x0 Ends With 12 As `3esn`"),
    octest_legacy:ct_string("Create `3esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)),(@usn6 $1000)-[:@usn6* 1000{`6esn`:{`6esn`} Is Not Null Is Not Null}]->(@usn5 :`1esn`)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]}) Detach Delete usn2[..`8esn`(Distinct 0.0[0.12])][..usn1],`2esn`(9e1 =~$`4esn` =~{usn2},`5esn` Starts With {999}) Ends With $1000 Ends With Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Union All Remove Case {usn2}[{`7esn`}][$usn2] When $`7esn` =~#usn8 =~{`7esn`} Then 12e12[..1.e1][..$12] When 01[$_usn3..][123.654..] Then $12 Is Null Else $#usn8 In {12} In $`4esn` End._usn4!,Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12|0.12[$0..$``]).@usn6! Foreach(`1esn` In None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`])| Detach Delete Shortestpath((:`6esn`:`4esn`$7)-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]}))[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|0x0 Is Not Null]][(`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})-[?* ..999]-(#usn8 {``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07})<-[`7esn`:`5esn`|`3esn`{`6esn`:1e1[usn1..$123456789][Count(*)..False],`4esn`:$#usn7 =~Count(*) =~@usn5}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})],#usn8 Ends With 0Xa,Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..])"),
    octest_legacy:ct_string("Create Unique usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),#usn8=Shortestpath(((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789}))) Return *,Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) As `7esn` Order By @usn6 Is Not Null Is Not Null Asc Skip $`1esn` Starts With 999 Limit [{``} =~{`2esn`} =~$`8esn`] Ends With Extract(usn2 In {@usn5} Where 999 Is Not Null Is Not Null|0[1.0..$``]) Ends With (:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null}) Start @usn6=Relationship:`2esn`('s_str') ,_usn3=Node:`1esn`(usn1=\"d_str\") Union All Load Csv From Case When 1.0 Ends With {`4esn`} Ends With {`2esn`} Then `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] When 7 Is Null Is Null Then Null[False..][12.e12..] End Starts With {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0} As `5esn`  Start `2esn`=Node:#usn7(@usn5=\"d_str\") "),
    octest_legacy:ct_string("Unwind 0X0123456789ABCDEF Is Not Null Is Not Null As `1esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `5esn`[$usn1..$7] As `2esn` Fieldterminator \"d_str\" Delete `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} Create Unique @usn5=Allshortestpaths((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0})))"),
    octest_legacy:ct_string("Load Csv With Headers From #usn7[9e1..$@usn5] As `3esn` Fieldterminator \"d_str\" Union Load Csv From 1e1 =~{`1esn`} As `` "),
    octest_legacy:ct_string("Return Distinct {`7esn`} Is Not Null Is Not Null,Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..],Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)] Limit _usn4[12.e12..] Merge `7esn`=((({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4))) On Match Set Allshortestpaths(((`` :usn1{``:$999 Is Not Null Is Not Null,`4esn`:.e12 Ends With {`2esn`}})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]}))).`8esn` =$`5esn`[123456789][12],Case When {#usn8} =~$0 Then $12 Is Null When True =~_usn3 Then Count(*)[{usn1}..][$`7esn`..] End.@usn6? =[$`4esn` Ends With $12,$`6esn` Is Null Is Null,`8esn` =~{`3esn`} =~9e12] =~Reduce(@usn6=$usn2 =~`6esn` =~{usn1},usn1 In {usn2} Contains {123456789} Contains 0Xa|12.0 Starts With 00 Starts With 9e1) =~Single(`6esn` In {1000} Is Not Null Where Count(*) In {`4esn`}),_usn4+=Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}] Union Match @usn5=Allshortestpaths((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})))) Create `3esn`=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))),@usn5=((_usn3 :usn2)-[?:`7esn`* ..999]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->(`8esn` :usn1)) Create Unique _usn3=((`` {`2esn`:{``}[$@usn5]}))"),
    octest_legacy:ct_string("Create ((`8esn` :usn1)) Foreach(usn1 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn`) Union Return 0.e0 Ends With $`8esn`,{`4esn`:$123456789 Ends With 1e1} As `3esn` Order By Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] Descending Limit {`3esn`}[{@usn6}..2.12] Remove Shortestpath(((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 00..999{`2esn`:01[$`1esn`..\"d_str\"]}]->(_usn3 :``:usn1{#usn7:0xabc =~{`8esn`} =~{_usn3}})-[?:`4esn`|`2esn`* 01234567..0Xa]->({#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}))).`4esn`,All(usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12)._usn4! Union Merge `2esn`=(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) On Match Set @usn5 =$999 Is Null Is Null Create Unique _usn3=Allshortestpaths(((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})))"),
    octest_legacy:ct_string("Unwind $999[$@usn6..] As usn1 Load Csv From usn1 Contains $999 As `5esn` Fieldterminator \"d_str\" Match `2esn`=(_usn4 :_usn4:`1esn`) Using Join On _usn4,_usn4 Union Return Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12} As `8esn`,@usn5[..$`7esn`][..$`6esn`] As usn2 Order By {#usn7} In 010 In 12 Desc,`1esn` In {999} In $123456789 Ascending Load Csv With Headers From {@usn6:07 Is Null}[Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End][Case When {`6esn`} Is Not Null Is Not Null Then {`2esn`} Contains 0.12 Contains 0.0 End] As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove [True Contains $123456789 Contains {`2esn`},{usn2}[`2esn`..{`4esn`}][_usn4..``]].#usn8!,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {`6esn`} Starts With $1000|0.0[0.12]).usn2!,Reduce(`3esn`=$`2esn` In 0xabc,`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|$_usn3[@usn6..][{``}..])._usn3? Load Csv From [{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])] As `1esn`  Create Unique ((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})),Allshortestpaths(((`5esn` {999})<-[?:usn2|_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(usn2 :@usn5:usn2))) Union All Foreach(`2esn` In $``[..`4esn`][..0]| Return `5esn` In 123.654 In {`6esn`} As `2esn`,9e1 =~$`4esn` =~{usn2},{`2esn`}[{123456789}..$#usn7][_usn3..999] As `7esn` Order By 1000 Contains 12.e12 Ascending,`1esn`[..{`4esn`}][..{0}] Asc,12 Contains 9e1 Contains $`8esn` Ascending Skip Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] Limit {`1esn`} Is Null Is Null Load Csv From {usn2} Is Not Null Is Not Null As @usn5 Fieldterminator \"d_str\") Return *,0X0123456789ABCDEF Is Null,(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Ends With `2esn` Ends With [$`8esn`[#usn7..][0X7..],``[..`3esn`][..{@usn6}]] Order By 9e1[`3esn`][$#usn8] Asc,{`8esn`} Is Not Null Is Not Null Desc,Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}] Descending Skip {@usn5} In 0X0123456789ABCDEF In 1000 Limit Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])] Foreach(@usn5 In Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]}))| Delete @usn6[..{usn2}][..{`5esn`}] Detach Delete {#usn7} =~$0,Reduce(`2esn`={`4esn`} Is Null,#usn8 In True In `8esn`|{@usn5}[{``}][{_usn4}]) =~Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0 Ends With .e0))"),
    octest_legacy:ct_string("Start #usn7=Node:_usn4(`3esn`={`2esn`}) ,@usn5=Node:`6esn`(\"d_str\")Where `1esn` In 9e0 In {7} Unwind ``[{12}] As _usn3"),
    octest_legacy:ct_string("Load Csv With Headers From _usn4 =~$`2esn` As `8esn` Fieldterminator \"d_str\" Load Csv From 01234567 =~{@usn5} =~1e1 As #usn8  Return *,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Limit 9e1 =~{_usn3} =~{`5esn`}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `5esn`[$123456789][`2esn`] As `4esn` Fieldterminator \"d_str\" Create `1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Unwind {7}['s_str'..] As @usn5"),
    octest_legacy:ct_string("Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") ,_usn4=Node:@usn5(`3esn`='s_str') Create Allshortestpaths((@usn6 {@usn6:{0}[$0][$#usn7]})),`8esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Union All Merge `3esn`=Allshortestpaths(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) On Match Set `1esn` =12.0 In $usn1 In True,`4esn`+=#usn7[..$`1esn`][..{`1esn`}],(:usn2{@usn5:usn1 =~1000 =~12})<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}).`7esn`! =9e0 Is Not Null On Create Set `6esn` =.e1[..`2esn`],``+=12.0 Starts With $usn1 Starts With `6esn` Start `6esn`=Rel:#usn7(``={@usn5})  Remove Case When $`7esn` =~#usn8 =~{`7esn`} Then 12e12[..1.e1][..$12] End.``,(`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}).#usn8?,[usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}|9e0[..{usn1}]].`7esn`! Union All With Distinct 12[True] As `3esn`,Case .e1 =~9e12 When $0 Starts With `2esn` Starts With {`1esn`} Then 12.0 In $usn1 In True End Is Null Is Null,Null[.e12..{#usn8}] As `5esn` Order By Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] Asc Skip None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null)[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..])..][Allshortestpaths(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})))..] Where $usn1 Ends With {123456789} Ends With 1.e1"),
    octest_legacy:ct_string("Remove #usn7:`3esn`:@usn5"),
    octest_legacy:ct_string("Load Csv From {`7esn`} =~01234567 =~`7esn` As usn2  With Distinct {7} In 9e1 As #usn7,`4esn`[$999..][1.0..] As @usn5 Order By {@usn6} In $999 In 01234567 Desc Limit All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Where #usn7 Starts With {@usn6} Starts With {`1esn`} Union All Create #usn7=Shortestpath((({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1))),`4esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})"),
    octest_legacy:ct_string("Remove [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999 In $999|$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]].`6esn` Match `1esn`=({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[?{_usn4}]-(:_usn4:`1esn`{_usn3:`3esn` Is Null Is Null}),((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]-(:_usn4:`1esn`{#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]})-[_usn3:_usn3|:`6esn`]-(`3esn` :`3esn`:@usn5)) Return Distinct Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) As _usn3,`4esn` Ends With 01 Ends With `5esn` As `6esn` Order By $999 Starts With $usn1 Starts With {`3esn`} Descending,0e0[$@usn5..{usn2}] Descending Limit 1.e1 Starts With False Starts With $@usn6 Union Match ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]}),(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}))) Using Scan ``:_usn3 Using Index `6esn`:``(_usn3) Where {0}[$usn2..0.e0][{`4esn`}..True]"),
    octest_legacy:ct_string("Remove None(`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0).`3esn`! Union Remove _usn3(Distinct 12 =~$`5esn` =~$_usn3,$`1esn` Contains usn2 Contains 1.0).usn1"),
    octest_legacy:ct_string("Create Unique `6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))"),
    octest_legacy:ct_string("Foreach(`5esn` In [@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null| Create Shortestpath(((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})))),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Load Csv With Headers From {`5esn`} Ends With `2esn` As @usn6 )"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) With  *,_usn3 Starts With $#usn7 Starts With $`` Skip {``} Ends With $`1esn` Ends With {`3esn`} Union All Create Unique `1esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),Shortestpath(((usn1 :`8esn`:_usn3)-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Load Csv From {1000} =~{7} =~{12} As #usn7 Fieldterminator \"d_str\" Union Return Distinct {usn1}[$`8esn`][0.e0] As #usn8 Limit $`3esn`[12.e12...e1] Optional Match `8esn`=(({_usn3:_usn4 =~`1esn`})),`1esn`=Shortestpath((:`4esn`:`3esn`{12})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) Using Scan `6esn`:`2esn` Using Join On `3esn` Start `4esn`=Rel:_usn3({_usn3}) ,_usn4=Rel:`2esn`(`4esn`='s_str')Where False =~Null =~12.0"),
    octest_legacy:ct_string("Create Unique ((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]}))),_usn4=(:#usn8:#usn7{@usn5:@usn5 In 00}) Remove [999,#usn7 Starts With {@usn5} Starts With 07].@usn6! Unwind (`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 As #usn7 Union All Start _usn4=Rel:`4esn`(_usn4=\"d_str\") ,`8esn`=Rel:@usn5('s_str')Where {1000}[..#usn7][..{#usn8}] Foreach(`5esn` In @usn5[..$`7esn`][..$`6esn`]| Remove #usn7:usn2 Optional Match Allshortestpaths(((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))),Allshortestpaths(((#usn8 {`2esn`:'s_str' =~0xabc =~$@usn5,`6esn`:$@usn5 Starts With 1e1})<-[_usn4?:`1esn`|``* 0X7..{`5esn`:123.654 Starts With `8esn` Starts With @usn5,`4esn`:1000 Contains 12.e12}]-(`8esn` :_usn3:@usn6)<-[?* 123456789..999$12]-(:@usn6{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))) Where Count(*) In {`4esn`}) With  *,usn2[..12.e12][..0.0],0x0 =~$`2esn` =~#usn7 As _usn3 Limit $7[\"d_str\"][`8esn`] Where {@usn6} Starts With .e1"),
    octest_legacy:ct_string("Foreach(`5esn` In $999[..$`2esn`]| Unwind 123.654[..$`4esn`] As _usn3 Create Unique `5esn`=((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` ))),((`` :#usn8:#usn7)<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {_usn4} =~{`7esn`} =~$#usn7 As #usn7  With Distinct *,Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Order By 999 Is Not Null Is Not Null Desc,{``} Ends With `8esn` Ends With {`6esn`} Asc,{`5esn`}[0X7..] Descending Limit Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End Is Null Where {1000}[..#usn7][..{#usn8}] Start @usn6=Node:`8esn`('s_str') ,`6esn`=Node:usn1({usn2})"),
    octest_legacy:ct_string("Return Distinct *,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn`,{#usn8}[False..{usn1}][$`6esn`..0Xa] Skip $7[{`7esn`}][12.0] Remove {@usn6:$usn1[{_usn3}],`8esn`:0[{`4esn`}..]}.`4esn`!,(`4esn` :usn2)<-[`3esn`?:`6esn`|:`7esn`* ..999]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]}).`1esn`!,Any(usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000).`7esn`"),
    octest_legacy:ct_string("Merge `2esn`=(:`4esn`:`3esn`{``:@usn6[9e12..],`8esn`:`6esn` Contains `6esn` Contains 9e1})-[`5esn`?:_usn3|:`6esn`]-(@usn5 :`6esn`:`4esn`)-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]}) On Match Set usn1 =$`7esn` Contains $_usn4 Contains `8esn`,usn1 =2.12 Contains `4esn` Contains .e1 On Match Set #usn7+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}[[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null]..][{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}..],Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})).#usn7? =Single(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)[..[@usn5[123.654..$_usn4][0.12..$@usn6],00[{999}..$#usn7][$0...e0],0 Is Null]][..@usn6(Distinct {@usn5} =~$`2esn`,@usn5 In 00)],Extract(#usn7 In {`5esn`} Ends With `2esn` Where {_usn4} =~0 =~{12})._usn3! ={`5esn`}[$1000..`1esn`]"),
    octest_legacy:ct_string("Merge ($`3esn`) Foreach(usn1 In 0Xa Starts With 's_str' Starts With #usn7| Return Distinct Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Load Csv From $_usn4[0X7..{1000}] As `1esn` Fieldterminator \"d_str\") Delete {`4esn`} Ends With 1e1 Ends With @usn6"),
    octest_legacy:ct_string("With  Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)],[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..] Order By 010 Asc,{`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] Desc,`5esn`(Distinct @usn5[01..`6esn`],7[`7esn`..usn2][$`5esn`..0X7]) Is Null Is Null Desc Skip _usn3 Starts With $#usn7 Starts With $`` Limit {`4esn`} Is Null Where $#usn7 Is Null Foreach(`7esn` In {`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5]| Unwind $123456789 Ends With 1e1 As `6esn` Match (((@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)<-[`3esn`?:`6esn`|:`7esn`* ..999]->({#usn8:0xabc =~{_usn4}}))),((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})) Using Scan @usn6:@usn5)"),
    octest_legacy:ct_string("Return Distinct $`3esn` Ends With `8esn` Ends With {`5esn`} As `2esn`,usn2[`2esn`] As usn1 Limit $#usn7[1e1..][07..] Start ``=Relationship:`5esn`(`4esn`=\"d_str\") ,`4esn`=Rel:_usn3({_usn3})Where 9e12 Contains {`4esn`} Union Remove Allshortestpaths((#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})).`5esn`! Create Unique ((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))) Remove [`6esn` In {1000} Is Not Null Where $`1esn` Contains usn2 Contains 1.0|{`4esn`}[..$#usn7]].#usn7!,`4esn`:usn1,Case When 1e1[..12e12] Then {0}[$0][$#usn7] Else $usn1[0X0123456789ABCDEF...e12] End.``"),
    octest_legacy:ct_string("Match ((({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index `2esn`:`6esn`(`1esn`) Optional Match #usn7=Shortestpath((({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1))),`4esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}) Using Index #usn8:`5esn`(@usn5) Where True Starts With 2.12 Starts With {123456789} Foreach(`6esn` In Case {`6esn`}[0.e0..$123456789] When _usn3 In 1.e1 Then $999[$12..][.e0..] Else usn2[01234567..] End In Case $123456789[{`1esn`}][0.12] When 12.0[{`6esn`}..123.654][@usn5..usn1] Then $`7esn` Contains 9e12 Contains `2esn` When 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Then 's_str' =~0xabc =~$@usn5 Else 1e1[..12e12] End In {`7esn`:{12} Is Null}| Start `3esn`=Rel:`5esn`('s_str')  Start `2esn`=Node:`8esn`(#usn8='s_str') ) Union All Detach Delete usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null,{12}[{`5esn`}][7] Merge ``=((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})) On Create Set Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End.usn1 =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),usn1+={``} In $0,Case 2.12 Contains @usn5 Contains {``} When $123456789 In $7 Then _usn4[12.e12..] End.`4esn`? =None(#usn8 In True In `8esn` Where $#usn8[12e12][0X7]) Is Null On Match Set #usn8+=`1esn` In {999} In $123456789,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 =9e1[010..][`5esn`..],`3esn`+={`7esn`} Union Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Create `4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0}))) Create (#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}),Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4)) Union Create ``=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),`1esn`=Shortestpath(((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {@usn6:07 Is Null}[Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End][Case When {`6esn`} Is Not Null Is Not Null Then {`2esn`} Contains 0.12 Contains 0.0 End] As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique #usn7=Allshortestpaths(((usn1 {@usn6:$`4esn` =~{usn1}})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[@usn5:`6esn`|:`7esn`]-(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]}))) Return *,$`7esn`[_usn3][{_usn4}] As `2esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip {`7esn`} Starts With 12.0 Starts With 07 Limit {7} Is Null Is Null Start `1esn`=Node:_usn4(\"d_str\") ,`7esn`=Rel:#usn7(`3esn`={_usn4}) Union All Unwind `6esn`[Null] As usn2 Merge _usn4=Allshortestpaths((`` ))"),
    octest_legacy:ct_string("Optional Match usn1=Allshortestpaths(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})),`8esn`=((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})-[?* 07..]->(:usn1{#usn8:True Ends With usn1})-[?:``]-(`7esn` :@usn6)) Using Scan usn1:`5esn` With Distinct {`7esn`} =~01234567 =~`7esn` As `6esn`,12 Ends With @usn5 Ends With 1e1 As `3esn`,2.12 Contains {1000} Contains 1.e1 Skip {_usn3} In 010 In 0.e0 Limit `7esn`[..{`8esn`}] Foreach(`1esn` In $`6esn` Ends With {`4esn`}| Load Csv With Headers From 01234567 Is Not Null As #usn8  Detach Delete `8esn`($999 Is Not Null Is Not Null,$`5esn` =~`1esn` =~123.654),$123456789 Ends With 1e1)"),
    octest_legacy:ct_string("Unwind _usn3(Distinct 1.0 =~`7esn` =~$`7esn`) Contains Case When 12[0X0123456789ABCDEF..][Count(*)..] Then 0[`6esn`][1e1] When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {999}[`2esn`] End As `` Merge #usn7=(`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000}) On Match Set @usn5+=Count(*)[{usn1}..][$`7esn`..],`4esn` =[@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Is Null Is Null,`8esn`+={#usn7}[{`1esn`}..][`1esn`..] On Create Set _usn4 =$#usn7 =~Count(*) =~@usn5,@usn5+=Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null,`3esn`+=1.0[Extract(usn1 In #usn8 =~$@usn5 Where 0[...e1][..$usn2]|01234567[usn1])][(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1)] Load Csv From usn2 Ends With 1.0 Ends With $@usn6 As `3esn` Fieldterminator 's_str' Union All Return 123456789[$`5esn`] As `1esn`,0x0 Is Null As `4esn` Skip [usn2 In 999[{123456789}..999] Where {usn1} Contains 123.654 Contains {#usn8}|.e12[Count(*)..{`4esn`}][07..$1000]] =~`7esn` =~(:`5esn`{`2esn`:0xabc =~{`8esn`} =~{_usn3}})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}) Limit {`4esn`}[..$#usn7] Create _usn3=Shortestpath((usn2 :usn2{`6esn`:123.654 In {12} In ``})),usn1=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Union All Detach Delete 01 =~_usn4 =~7,.e0 Contains $@usn6,.e1[@usn5]"),
    octest_legacy:ct_string("Load Csv With Headers From Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..] As `1esn`  Optional Match usn2=Allshortestpaths((:_usn3:@usn6{`2esn`:$`2esn`[#usn7][01]})),((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[usn2?:@usn6* 0x0..7]-(_usn4 {`7esn`:0xabc =~{`8esn`} =~{_usn3}})) Remove usn1:`6esn`:`4esn` Union All Return Distinct Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `4esn` Order By Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] Desc,({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[#usn7:``* 0Xa]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[?{_usn4}]-(usn2 :@usn6{_usn3:$7[..999][..`2esn`],`1esn`:12 =~$`5esn` =~$_usn3}) Is Not Null Asc Union Merge (`3esn` )-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]-(:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}) On Match Set #usn7+=Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],Extract(usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|.e12[0.0..][$#usn8..]).@usn6? =#usn8[#usn8..] Remove {`4esn`:#usn7 Ends With {@usn5}}.`3esn`?"),
    octest_legacy:ct_string("Create Shortestpath((((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[?* ..999]->(:@usn5:usn2))))"),
    octest_legacy:ct_string("Foreach(`7esn` In {@usn5} In $`5esn`| Unwind {``} In $0 As _usn3 Optional Match _usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))),#usn7=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Using Join On #usn8,`7esn`,_usn3 Using Scan `2esn`:`3esn` Where 0Xa[$#usn8]) Create usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) Foreach(_usn3 In `5esn`[..$_usn3]| Return *,0X0123456789ABCDEF Is Null,(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Ends With `2esn` Ends With [$`8esn`[#usn7..][0X7..],``[..`3esn`][..{@usn6}]] Order By 9e1[`3esn`][$#usn8] Asc,{`8esn`} Is Not Null Is Not Null Desc,Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}] Descending Skip {@usn5} In 0X0123456789ABCDEF In 1000 Limit Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])] Remove Case When {@usn6}[..0.e0][..$0] Then 0e0 Is Null End._usn4!,Any(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {_usn3}[{#usn7}]).`5esn`?) Union Return Distinct *,(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As `6esn`,Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})] As `8esn` Order By `8esn` =~0 Desc,{@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Descending Skip 010 Ends With 123456789 Ends With .e0 Merge `7esn`=(((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})<-[?:`5esn`|`3esn`* 0Xa{#usn8:{`2esn`}[..$`6esn`][..`3esn`]}]->({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`})))"),
    octest_legacy:ct_string("Foreach(@usn6 In Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12}| With  *,{`4esn`}[..`2esn`][..{@usn5}] As @usn6,0xabc Contains False Contains {1000} Order By Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Ascending,Count(*)[{usn1}..][$`7esn`..] Desc Skip {`5esn`}[$1000..`1esn`] Limit {12}[{`5esn`}][7] Where {@usn6}[01234567..] Detach Delete 1.e1[{1000}..],`1esn` In {`4esn`}) Create Unique Shortestpath((`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]})) Remove `8esn`(Distinct 9e1 Ends With 0xabc Ends With @usn6,9e1 Is Not Null Is Not Null).`1esn`,[00[{999}..$#usn7][$0...e0]].usn1 Union Return $#usn8[$12][`6esn`] As @usn6 Skip 00 Starts With `6esn` Starts With $1000 Limit {usn1} Is Null Is Null Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Index ``:@usn6(`6esn`)"),
    octest_legacy:ct_string("With  Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],'s_str' Contains $_usn4 Contains $`7esn` As `8esn`,$`8esn` Contains {`7esn`} Contains $`4esn` As @usn6 Limit Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Union All Start usn1=Node:`1esn`(\"d_str\") ,@usn5=Node:`6esn`(\"d_str\") Remove Case 0[...e1][..$usn2] When `3esn`[#usn8] Then Count(*)[{usn1}..][$`7esn`..] Else `1esn`[..{`4esn`}][..{0}] End.`3esn`?,Reduce(``={@usn6} Is Null Is Null,#usn8 In True In `8esn`|'s_str' Is Not Null).usn1?,`6esn`(Distinct {#usn8} Ends With {123456789} Ends With #usn8)._usn4! Union All Remove Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End.usn2!,{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}.`3esn`,(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}}).`5esn`? Foreach(`7esn` In #usn8[1e1..]| Remove (usn2 :`6esn`:`4esn`)<-[?* ..999]->(:``:usn1)<-[`2esn`:`5esn`|`3esn`* 07..{_usn3:0X7 =~$`6esn`,`2esn`:999[$_usn3][@usn6]}]->(`` :#usn8:#usn7)._usn3,Case $0 Starts With `2esn` Starts With {`1esn`} When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else True Starts With 2.12 Starts With {123456789} End.#usn7?,None(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]).`7esn`!)"),
    octest_legacy:ct_string("Load Csv From [{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])] As `1esn`  Create @usn6=Shortestpath(({`3esn`:.e12 Is Not Null})),`6esn`=(((usn2 {usn1:0e0 Starts With 's_str',`1esn`:.e1[..`2esn`]})<-[?$@usn6]->(@usn5 :usn1{#usn8:0xabc =~{_usn4}})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) Create (((`5esn` :@usn6)-[?:usn1|:@usn6* ..12$`6esn`]->({#usn7:0xabc In 9e1,`6esn`:$999 =~$999 =~usn2})-[``?:#usn7|:``]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}}))) Union All Unwind {`1esn`} In {``} In 's_str' As `7esn` Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `5esn`,{usn1}[..{#usn7}] Limit {7} =~#usn8 =~0.0 Load Csv With Headers From usn2[$7..``][$``..$_usn3] As _usn4 Fieldterminator \"d_str\" Union Start `4esn`=Node( {usn2}) ,`3esn`=Rel:`4esn`(@usn5={`6esn`})Where $`1esn` Ends With {1000} Ends With $`8esn`"),
    octest_legacy:ct_string("Detach Delete All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null,None(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6)[[$999 Is Not Null Is Not Null,01 Starts With {0} Starts With $`4esn`,0.e0[#usn7..][$@usn5..]]..Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`})][Case Null In {_usn3} In _usn3 When {`6esn`} Is Not Null Is Not Null Then $#usn8[12e12][0X7] End..Reduce(`2esn`=9e0[..{usn1}],@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|9e12 Is Null Is Null)],1.e1[{1000}..] Union All With  `1esn` =~12.0 Order By `3esn`[{`1esn`}] Descending Skip 12[True] Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]) Create Unique ((:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})-[* ..999{_usn4:9e12 In 's_str' In $`4esn`}]-(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})) Union All Foreach(#usn8 In {123456789}[..Count(*)]| Unwind $`2esn`[usn2][#usn7] As usn1) Create Unique ((:`1esn`{@usn5:{`4esn`} Is Null})<-[* 0Xa{@usn5:`2esn`[0Xa][{`8esn`}],`5esn`:0Xa[01..$`1esn`]}]->(`4esn` :`1esn`{`2esn`:1000 Is Not Null}))"),
    octest_legacy:ct_string("Merge ((:#usn8:#usn7{`2esn`:usn2[01234567..],`2esn`:$7[..999][..`2esn`]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})) On Create Set [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|{999} =~7 =~{usn1}].`2esn`! ={`5esn`} Starts With 123456789 Starts With 07,`7esn` =0X0123456789ABCDEF[0e0..$12][00..{12}],``+=Filter(usn2 In {@usn5} Where 07 Starts With \"d_str\" Starts With $12)[[`5esn`[$usn1..$7],0Xa[0X7..#usn8][_usn3..9e1],9e12 Contains {`4esn`}]..] Start #usn8=Node:`2esn`(@usn6={`2esn`}) ,@usn5=Rel:usn1(@usn5={`1esn`}) Union All Remove [{``} Starts With True Starts With True,$@usn6[..{`6esn`}][...e0],12 Ends With @usn5 Ends With 1e1].usn1! Foreach(@usn5 In #usn7(1e1[$@usn5]) In #usn7(Distinct `8esn`[$1000..$#usn8][_usn3..{7}]) In [$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]| Optional Match Allshortestpaths(({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})),(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]->(:usn2{@usn5:usn1 =~1000 =~12})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}) Using Join On #usn7,`1esn`,_usn4 Where 0 Is Not Null Create Unique (`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]})) Create ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Union Create Unique (_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`3esn`?* 0xabc..01234567]-(@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]}),Allshortestpaths((:usn2{#usn8:00[{999}..$#usn7][$0...e0]})) Foreach(`3esn` In {`6esn`} Is Not Null| Detach Delete {0}[$usn2..0.e0][{`4esn`}..True],`6esn`({`1esn`}[`1esn`..123.654][{`4esn`}..$7])[Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})))..][Case When {`6esn`}[0.e0..$123456789] Then 's_str' =~0xabc =~$@usn5 When 0X7 Is Null Is Null Then {999} =~7 =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End..] Remove Extract(usn1 In #usn8 =~$@usn5 Where {#usn7}[{`1esn`}..][`1esn`..]|07 Is Null).#usn8?,Allshortestpaths(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))).`4esn`!,Case `1esn`[$``][{`5esn`}] When $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn` Then `5esn` Starts With {999} Else False Is Null Is Null End.usn2?)"),
    octest_legacy:ct_string("Create Unique (`7esn` :`3esn`:@usn5{#usn7:1.0 Starts With 12,`7esn`:$999 =~$999 =~usn2}),Shortestpath(((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}))) Union All Match (`3esn` :``:usn1)<-[:@usn6]->(`2esn` :_usn4:`1esn`{#usn7:'s_str'[9e12..][12e12..],``:$`1esn` Contains usn2 Contains 1.0}),Shortestpath((:_usn4:`1esn`{`7esn`:{`6esn`} Is Not Null Is Not Null,_usn3:$usn2[`4esn`..]})<-[:`3esn`|``* 1000]-(`6esn` :usn1)-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})) Using Join On `5esn`,`2esn` Where 9e1[010..][`5esn`..] Optional Match ``=Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[#usn8?:`8esn`|:_usn3* 123456789..999]-(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07}))) Where {7} Is Null"),
    octest_legacy:ct_string("Match Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12}))),((#usn8 :`1esn`{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)) Merge @usn5=((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})) Unwind 0x0[{`1esn`}] As `` Union Create `1esn`=(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))),`5esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})) Union With  0xabc In 9e1 Order By 9e1[`3esn`][$#usn8] Asc Unwind ``[$7..``] As `1esn`"),
    octest_legacy:ct_string("Merge (`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]}) On Match Set #usn7+=00[0xabc..][`8esn`..],@usn6+=usn2[..2.12] On Match Set ``+=12[True],(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})<-[`6esn`?:`1esn`|``]-(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}).@usn5? ={@usn5} Contains 0X7 Contains 1e1,usn1 =$12[`6esn`][$#usn8] Foreach(`8esn` In All(#usn7 In {`5esn`} Ends With `2esn` Where {@usn5} =~$`2esn`) =~Shortestpath((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) =~[`5esn`[$usn1..$7],$usn2[`4esn`..]]| With Distinct {1000}[0e0][{usn1}],{@usn5} In 0X0123456789ABCDEF In 1000,$`2esn`[Null][{``}] Where $@usn6[..{`6esn`}][...e0] Load Csv From $7[.e1] As `8esn` Fieldterminator \"d_str\") Union Foreach(`7esn` In Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])]| Load Csv With Headers From Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) As `7esn` Fieldterminator 's_str') Union Return `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} As `6esn` Skip 0x0[{`1esn`}] Create Unique _usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}),`5esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))) Create Unique usn2=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})"),
    octest_legacy:ct_string("Unwind 9e1[12.e12..] As `3esn` Union All With  *,{_usn3:9e12[..#usn7][...e0]}[Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010])..Reduce(#usn8=0.e0[$`1esn`..],`1esn` In {``} =~{`2esn`} =~$`8esn`|\"d_str\"[..{`1esn`}][..$`2esn`])][Case When #usn8 Ends With `5esn` Ends With _usn3 Then {`6esn`} Starts With 0xabc End..(:@usn6)<-[:`3esn`|``* 1000]-(`6esn` :usn1)<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})] As ``,{`2esn`} Contains 0.12 Contains 0.0 Order By Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..] Descending Limit 0.0[.e12..] Union All Unwind `6esn`[Null] As usn2 Merge _usn4=Allshortestpaths((`` ))"),
    octest_legacy:ct_string("Create Unique `6esn`=Allshortestpaths(((_usn4 :usn2)<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}))) Start _usn4=Relationship:`3esn`(#usn8={`5esn`}) ,`6esn`=Node:`1esn`(usn1={`8esn`}) Union All Foreach(#usn8 In $`7esn` =~#usn8 =~{`7esn`}| Create Unique @usn5=((@usn6 {#usn8:$`7esn` Ends With usn2,`8esn`:1.e1[0xabc..][.e12..]})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}))) Start #usn7=Node:#usn8(`4esn`=\"d_str\") ,`5esn`=Relationship:#usn7({``})Where `4esn` Starts With $12 Starts With $12 Union Unwind 123.654[$`5esn`] As _usn4 Merge `7esn`=((usn2 :_usn4:`1esn`)-[?:usn2|_usn3* 7]-(`5esn` {`3esn`:_usn3 In 1.e1})) On Create Set Allshortestpaths(({_usn4:{@usn5} In $`5esn`})).`1esn`? =$#usn7 Is Not Null Is Not Null,`2esn` =Case $7[{`7esn`}][12.0] When 00[$usn2..][0.12..] Then True In `8esn` When $#usn7 Is Not Null Is Not Null Then Count(*) In `1esn` In {_usn3} End Is Null"),
    octest_legacy:ct_string("Foreach(`7esn` In [usn2 In 999[{123456789}..999] Where @usn5[_usn3..{12}][{999}..$7]] Starts With [`6esn` In {1000} Is Not Null Where 01] Starts With None(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)| Create Unique ((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})) Return Distinct 0.12 =~$`7esn` =~`8esn` As @usn6 Skip Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]}) Create (:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Delete $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`"),
    octest_legacy:ct_string("Foreach(`6esn` In usn2[{7}..#usn8][{12}..{``}]| Optional Match (`1esn` :@usn5:usn2) Using Scan ``:_usn3 Where $7[.e1] Unwind {`5esn`} Starts With 123456789 Starts With 07 As `7esn`)"),
    octest_legacy:ct_string("Create Unique @usn5=(:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}),`7esn`=((`8esn` )<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})) Merge ((@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 123456789..999]->(:@usn6)<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(`7esn` {`5esn`:$@usn5 Is Not Null})) On Create Set `5esn` ={1000}[..#usn7][..{#usn8}],`5esn` =9e12[..#usn7][...e0],@usn5 =Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Union Merge Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]}))) On Create Set _usn4+=`3esn`[$`2esn`] Optional Match #usn7=(({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)),(#usn7 :#usn7:`6esn`)<-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]->(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}) Using Scan `7esn`:#usn7 Where .e12 Contains {`6esn`} Contains .e12 Union All Start `1esn`=Rel:#usn7(``={@usn5}) "),
    octest_legacy:ct_string("Remove Filter(usn2 In {@usn5} Where {@usn5}[01234567][{1000}]).usn1?,Any(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]).usn2 With  *,$1000 Is Null Is Null As `3esn` Order By Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] Desc,({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[#usn7:``* 0Xa]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[?{_usn4}]-(usn2 :@usn6{_usn3:$7[..999][..`2esn`],`1esn`:12 =~$`5esn` =~$_usn3}) Is Not Null Asc Skip Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..] Limit #usn7 Starts With {@usn5} Starts With 07 Union All Remove [`4esn` Is Null,12.0 In $usn1 In True,$`3esn` In {`1esn`} In 12e12].`2esn`?,[@usn5 In 07[{_usn4}..{`4esn`}]|.e12[0.0..][$#usn8..]].@usn5 Remove Extract(`6esn` In {1000} Is Not Null Where $`2esn`[Null][{``}]|{``}[$@usn5]).@usn6!,[{@usn6} Starts With .e1,`8esn` =~0,usn2[$7..$`5esn`]].`1esn`?,Reduce(_usn3=$999 Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|{#usn7} Contains {`7esn`} Contains $`3esn`).usn2 With  0xabc In 9e1 Order By 9e1[`3esn`][$#usn8] Asc Union All Create ((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null})) Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`))"),
    octest_legacy:ct_string("Return $1000[{#usn8}..],@usn6[9e12..] As `7esn`,Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `4esn` Order By #usn7(Distinct @usn5[..$`7esn`][..$`6esn`])[Allshortestpaths((usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`}))..][Case When {`5esn`} Ends With `2esn` Then `1esn`[$``][{`5esn`}] End..] Asc Start usn2=Node:`4esn`(usn2='s_str') ,`6esn`=Node:`7esn`(\"d_str\")Where `1esn`[$`8esn`..][True..] Union Load Csv From {12} Is Null As usn2 Fieldterminator \"d_str\" Start `6esn`=Node:`7esn`(\"d_str\") ,#usn7=Relationship:`8esn`({`4esn`})Where .e0 In 9e1 In $_usn3 Merge #usn7=(:usn2{@usn5:usn1 =~1000 =~12})-[@usn5?:`6esn`|:`7esn`]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[?:`6esn`|:`7esn`* 0]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}}) On Match Set `3esn` =[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) Union Merge #usn8=(({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)) Create Unique ``=((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})) Remove Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]).@usn5!,All(usn2 In 999[{123456789}..999] Where 010[$12..])._usn4!"),
    octest_legacy:ct_string("Match Shortestpath((:`7esn`:_usn4{#usn8:$`2esn` Contains `5esn` Contains .e1,@usn6:{999}[`2esn`]})<-[`1esn`* 01..{`5esn`:0xabc =~{_usn4}}]-(`6esn` :#usn7:`6esn`)) Using Join On @usn5 Create Unique Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Create _usn3=((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`)) Union All Unwind `8esn`[12e12][_usn3] As `3esn` Union Load Csv With Headers From {`2esn`} Is Not Null As #usn8 Fieldterminator 's_str' Detach Delete {`5esn`} Starts With 123456789 Starts With 07,123.654[2.12..][{`7esn`}..]"),
    octest_legacy:ct_string("Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where @usn6 Contains {0}].@usn6?,Reduce(_usn3={`1esn`}[\"d_str\"][{1000}],`4esn` In False[0.0..{@usn6}]|0 =~usn1)._usn4? Load Csv From (`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As _usn3 Fieldterminator 's_str' Union All Return *,Case .e1 =~9e12 When $0 Starts With `2esn` Starts With {`1esn`} Then 12.0 In $usn1 In True End Is Null Is Null,1.0 Starts With 12"),
    octest_legacy:ct_string("Remove [`6esn` In {1000} Is Not Null Where `1esn`[$``][{`5esn`}]|{`7esn`}[..0xabc][..0e0]].`4esn`? With Distinct _usn4[12.e12..] As ``,Extract(`5esn` In $999[12] Where False[0.0..{@usn6}]|0Xa Contains {`4esn`} Contains {`1esn`})[Case $@usn5[`2esn`..][#usn7..] When {`6esn`}[$1000] Then {`3esn`} Ends With $123456789 Ends With {12} When $12[{`5esn`}..] Then #usn8 =~$@usn5 End][None(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)],{`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5] Order By [0e0 Is Null,$`1esn` Contains usn2 Contains 1.0,1000[9e12][$`1esn`]] Ends With (@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Descending,Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End Asc Where {`6esn`} Is Not Null Is Not Null Union Foreach(`6esn` In Reduce(`7esn`=0X7[#usn7..][12e12..],`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}|_usn3[..0xabc][..@usn5])[..[{`2esn`} Contains 0.12 Contains 0.0,{12} Is Null,{`2esn`} In `5esn` In usn2]]| With Distinct $`3esn` Ends With `8esn` Ends With {`5esn`} As `6esn` Order By 0.e0 Ends With {@usn5} Ends With 0e0 Ascending,Count(*) In `1esn` In {_usn3} Descending Skip {999}[..{_usn4}][..`6esn`] Limit 0.0[.e12..] Where {12} Is Null Unwind $`2esn` Contains `5esn` Contains .e1 As #usn7) Union Foreach(_usn3 In Reduce(#usn8=01234567 Is Not Null,`6esn` In {1000} Is Not Null|$`2esn` Contains `5esn` Contains .e1)[[$#usn7[$``..{`7esn`}]]..][[#usn8[1e1..]]..]| Start `7esn`=Node:_usn4({#usn7}) ) Create Unique ``=Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Start `6esn`=Relationship( {`7esn`}) Where .e12 Starts With 12"),
    octest_legacy:ct_string("Start `1esn`=Node:usn2('s_str') Where #usn7[999..``] Foreach(`2esn` In Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])]| Create Unique `8esn`=(:@usn5:usn2{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null})-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999}) With Distinct 7 Is Null Is Null As _usn3,{`3esn`} Is Null Is Null Order By 0X0123456789ABCDEF Is Not Null Is Not Null Ascending)"),
    octest_legacy:ct_string("Detach Delete 9e12[{1000}..][1000..],0.0[`5esn`][1.e1],$12 Is Not Null Is Not Null Remove Reduce(usn1=$`3esn` Is Null Is Null,usn1 In #usn8 =~$@usn5|{``}[2.12]).`1esn`?,Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where $12 Is Null).``,Case When $`8esn` Starts With $123456789 Then $#usn7 Is Null When #usn7 Starts With {@usn5} Starts With 07 Then {`1esn`}[01234567..][@usn5..] End.`6esn`! Union Remove All(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $7[{`7esn`}][12.0]).`3esn` Create `5esn`=Shortestpath((@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})),((#usn8 :`1esn`{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)) Return $_usn3[@usn6..][{``}..] As `1esn` Limit {`6esn`} Is Null"),
    octest_legacy:ct_string("Delete $`2esn`[#usn7][01],0Xa[$#usn8] Delete {@usn5}[1000] Start usn2=Node:usn1('s_str')  Union All Create Unique Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),`8esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})) Union All Return [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] As `2esn`,$`1esn` =~1.0 =~0X7 As usn1 Order By [.e1 =~9e12,1e1[1000]] In ``(Distinct `8esn`[$123456789..][$usn1..],010 Is Not Null Is Not Null) Descending,1e1[{`3esn`}][True] Desc Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]]"),
    octest_legacy:ct_string("Start @usn6=Node:usn2(`4esn`={`6esn`}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From ({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)[Extract(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null|Null Starts With {_usn4})..Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`)] As `7esn` Fieldterminator 's_str' Create Unique _usn4=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))))"),
    octest_legacy:ct_string("Optional Match @usn6=({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}),(@usn6 {_usn3:`4esn` Is Null})-[#usn8?:`8esn`|:_usn3* 123456789..999]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}) Using Join On `7esn`,_usn3,`3esn` Using Index `2esn`:`4esn`(_usn4) Where {#usn7} =~{usn1} Union Create Unique usn1=((:`5esn`)<-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]-(:`3esn`:@usn5)),`3esn`=Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Create Unique usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),#usn8=Shortestpath(((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789}))) Union Return *,0X7 Is Not Null Is Not Null As `8esn`,False[0.0..{@usn6}] Order By `` =~_usn3 =~{`6esn`} Asc Skip `2esn` In `5esn` Limit [`3esn`[#usn8],_usn4 Ends With $`3esn` Ends With {`3esn`},1e1[..12e12]][..Shortestpath((({usn1:$@usn5[`2esn`..][#usn7..],@usn5:{1000}[..#usn7][..{#usn8}]})-[]->(:usn1)-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`})))][..Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)]"),
    octest_legacy:ct_string("Unwind #usn7 Contains `` Contains 0.e0 As `2esn` Merge (`4esn` {`4esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}) On Create Set Case _usn3[$123456789..] When `8esn`[{#usn7}..][_usn4..] Then {`2esn`}[..{123456789}] When `5esn`[$usn1..$7] Then 1000 Is Not Null End.#usn7 =$1000[123.654],`3esn`:_usn3:@usn6,`1esn` =0x0[9e0..][$@usn5..] On Match Set None(usn2 In {@usn5})._usn3! ={#usn8}[0.0..$999] Merge (`5esn` {`3esn`:_usn3 In 1.e1}) Union All Create Shortestpath((@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})-[?:``]-(:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[{@usn6:$@usn6}]-(`5esn` {`8esn`:0xabc Is Null})),Allshortestpaths((:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})<-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]-(_usn4 {`2esn`:`8esn`[1000..#usn8]})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Skip `7esn`[{12}] Limit None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null) Where {#usn7}[{`1esn`}..][`1esn`..] Union All Create `5esn`=Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}))) Foreach(`6esn` In {`6esn`} Starts With $1000| Start `7esn`=Rel:#usn8({_usn4}) Where {`3esn`}[`6esn`..] Optional Match `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) Where #usn8 =~$@usn5) Remove None(`5esn` In $999[12] Where False[0.0..{@usn6}]).`6esn`!"),
    octest_legacy:ct_string("Load Csv With Headers From 0.12[$`1esn`] As _usn4  Start _usn4=Rel:`1esn`(usn1=\"d_str\") ,_usn4=Relationship:`7esn`(`8esn`={1000})"),
    octest_legacy:ct_string("Remove [00 Starts With 12 Starts With 0e0].`2esn`,None(@usn5 In 1.0 Starts With 12 Where 12.0 Ends With 0e0 Ends With $123456789).#usn8,Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))).`5esn`! Union All Create Unique `7esn`=Shortestpath(((#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[#usn7?:``]->(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]}))),`6esn`=(((usn2 {usn1:0e0 Starts With 's_str',`1esn`:.e1[..`2esn`]})<-[?$@usn6]->(@usn5 :usn1{#usn8:0xabc =~{_usn4}})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) Unwind 9e12[{1000}..][1000..] As usn1 Union Merge ((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})) On Create Set `3esn`+={#usn7} Is Null Is Null,``+=$`2esn` Contains {#usn7} Contains {usn2} On Create Set _usn4+=`3esn`[$`2esn`] With Distinct 9e12[{1000}..][1000..] Order By `8esn` =~0 Desc Skip `6esn` Contains `6esn` Contains 9e1 Where Count(*) In {`4esn`} Create Unique `5esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})),`8esn`=Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`})))"),
    octest_legacy:ct_string("Foreach(`2esn` In $usn2[`4esn`..]| Create ((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`)),`7esn`=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1}))) Return *,{`7esn`} Ends With Count(*) Ends With {`5esn`} As `1esn` Limit [{``} =~{`2esn`} =~$`8esn`] Ends With Extract(usn2 In {@usn5} Where 999 Is Not Null Is Not Null|0[1.0..$``]) Ends With (:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null}) Load Csv From 123456789 Is Null Is Null As #usn7  Union All Detach Delete `3esn` Starts With @usn5 Starts With {`4esn`},@usn5[123.654..$_usn4][0.12..$@usn6],@usn5 In 00 Foreach(`3esn` In {@usn5}| Create Unique ``=(((:@usn6{@usn6:$999[..$`2esn`]})-[_usn4* 0X0123456789ABCDEF]-(`5esn` {usn2:$#usn7 Contains {usn2}})-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`}))),Shortestpath(((`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]}))) Start ``=Node:`1esn`(_usn3={`4esn`}) ,#usn7=Relationship:`8esn`('s_str')) Union Return Distinct *,7 Is Null Is Null As _usn3 Order By Null Starts With 's_str' Starts With {`1esn`} Asc,Count(*) In {`4esn`} Desc Skip 12e12[$`5esn`..1.0][$`8esn`..$`1esn`] Limit 01 =~0X7 Unwind 0Xa Starts With 's_str' Starts With #usn7 As `` With  0X0123456789ABCDEF Is Null As `1esn`,{#usn8} Is Not Null Is Not Null As @usn6 Skip $#usn8 Is Not Null Limit Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where @usn6[..{usn2}][..{`5esn`}]) Is Null"),
    octest_legacy:ct_string("Start @usn6=Rel:`5esn`({_usn3}) ,`5esn`=Node:`7esn`(`3esn`={`4esn`})Where {#usn8} Is Not Null Is Not Null Union Foreach(#usn8 In (`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]}) Contains Single(#usn8 In True In `8esn` Where @usn5[01..`6esn`]) Contains [`3esn` =~12e12,$``[..`4esn`][..0],$#usn7 Starts With $`4esn`]| Unwind None(`7esn` In @usn5[01..`6esn`] Where 12e12[$``..]) In `6esn`(123.654 Starts With `8esn` Starts With @usn5) In Single(#usn7 In {`5esn`} Ends With `2esn` Where {`6esn`}[0.e0..$123456789]) As `4esn` Start #usn7=Relationship:`1esn`(_usn3={`4esn`}) Where {`6esn`} Starts With 123456789 Starts With 0x0) Foreach(#usn7 In .e1 Starts With #usn7 Starts With 1.e1| Start usn2=Relationship:`6esn`({#usn8}) ,usn2=Node:``({``})Where $1000 Is Null Is Null Optional Match ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)) Using Scan `2esn`:`7esn` Where 1e1 In $0) Union All Return Distinct *,$`4esn` Is Null Is Null Order By None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null)[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..])..][Allshortestpaths(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})))..] Desc,@usn5 In 00 Descending Match `3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Using Join On `7esn`,_usn3,`3esn` Using Join On `8esn`,`4esn`,`1esn` Where $usn1[{_usn3}]"),
    octest_legacy:ct_string("Match ((`7esn` )<-[#usn8:``* 00..999{usn2:{@usn5} Contains 0X7 Contains 1e1}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]})) Using Join On _usn3 Union All Foreach(`8esn` In $999[12]| Return _usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]),$`8esn` =~$`7esn` =~`3esn` As `8esn` Order By 0.e0 Ends With {@usn5} Ends With 0e0 Ascending,Count(*) In `1esn` In {_usn3} Descending Skip 's_str' =~0xabc =~$@usn5 Limit `2esn`[..$`4esn`][..$@usn5] Start #usn8=Node:`4esn`(`3esn`=\"d_str\") ) Create Unique ``=Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]}))"),
    octest_legacy:ct_string("Foreach(#usn7 In $usn1[0X0123456789ABCDEF...e12]| Return *,usn2[..12.e12][..0.0],0x0 =~$`2esn` =~#usn7 As _usn3 Limit $7[\"d_str\"][`8esn`]) Union With  07 Is Null Is Null As _usn3,0.12 Ends With $_usn3 Ends With 07 Order By $@usn5[$7..@usn5] Desc,Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..] Desc Skip $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] Limit {`2esn`}[1.e1][False] Where $`8esn` Starts With $123456789 Return Distinct 0xabc[0.e0..][$7..] Order By {``}[2.12] Asc,999 =~0x0 =~2.12 Ascending Skip count(Distinct $`6esn` Is Not Null Is Not Null,010 Ends With 123456789 Ends With .e0) Contains {#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`} Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]|_usn3[$123456789..]) Limit {12}[{`5esn`}][7]"),
    octest_legacy:ct_string("Create Shortestpath((((_usn3 :`6esn`:`4esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(:`4esn`:`3esn`{12})<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})))),(`3esn` {@usn5:$``[..`4esn`][..0],`8esn`:{@usn5}}) Union Unwind `5esn` =~0e0 As `1esn` Create Unique #usn7=(((usn1 {`8esn`:12e12[..1.e1][..$12]})-[_usn4* 0X0123456789ABCDEF]-(#usn8 {`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[`1esn`* 01..{`5esn`:0xabc =~{_usn4}}]-(`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]}))),`3esn`=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Union All Merge Shortestpath(((@usn5 :`6esn`:`4esn`))) On Create Set $0.`3esn` =0 Is Null Is Null Detach Delete $12 Contains .e1,12e12[..1.e1][..$12] Unwind {`8esn`}[{`6esn`}..1.e1] As `2esn`"),
    octest_legacy:ct_string("Merge _usn3=((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))) Union With  Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `1esn` Order By {1000}[0e0][{usn1}] Desc,Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Ascending Skip \"d_str\"[Count(*)..] Limit $usn1[0X0123456789ABCDEF...e12] Where 9e1 Is Not Null Is Not Null Remove {#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}._usn3! Union All Load Csv From 1e1 Is Not Null Is Not Null As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind $`2esn` In 0xabc As _usn4 Start #usn7=Node:`4esn`(usn2='s_str') Where 0.0 Union All Load Csv With Headers From $12 Contains .e1 As usn2  Merge `8esn`=(:``:usn1{usn2:'s_str' Is Not Null,`4esn`:$`1esn` Contains usn2 Contains 1.0})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})"),
    octest_legacy:ct_string("Load Csv From All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where .e1 Starts With #usn7 Starts With 1.e1) Starts With `4esn`(12[$`8esn`..{_usn4}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1) As `6esn`  Remove Filter(usn2 In {@usn5} Where {@usn5}[01234567][{1000}]).usn1?,Any(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]).usn2"),
    octest_legacy:ct_string("Create _usn3=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}),_usn4=Allshortestpaths((((`6esn` {#usn7:999[1000..]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})))) Start #usn7=Rel:_usn3({_usn3})  Remove None(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]).usn1?,Reduce(`4esn`=.e12[Count(*)..{`4esn`}][07..$1000],#usn7 In $@usn6 Contains 0 Contains 0|0e0 Starts With 's_str')._usn3!,Reduce(`6esn`=`2esn` =~$#usn7 =~_usn4,usn2 In 999[{123456789}..999]|0xabc =~{`8esn`} =~{_usn3}).@usn6? Union Match @usn6=(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`),Shortestpath((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})) Where _usn3[..0xabc][..@usn5] Union All Match Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) Using Join On `5esn`,`2esn` Using Scan _usn4:usn2 Where 7 Is Null Is Null Load Csv From {usn2} Is Not Null Is Not Null As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) Merge `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) On Create Set exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0).`5esn`? =All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),Filter(usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]).`6esn`? =01 With Distinct *,.e0 Is Not Null Is Not Null,@usn5 In 00 Order By (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null Ascending,{`4esn`} Contains \"d_str\" Asc,$`8esn`[..`6esn`][..#usn7] Desc Skip `6esn`[$_usn3.._usn3][usn2..0.0] Limit Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] Union All With Distinct *,00[0xabc..][`8esn`..] As usn2,exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $`5esn` =~`1esn` =~123.654 Asc,Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] Ascending,0.0[``] Asc Skip 00 Is Null Limit {`4esn`}[0xabc..][010..] Remove Case 's_str'[..$123456789][..{1000}] When usn2[$7..$`5esn`] Then `6esn` Contains `6esn` Contains 9e1 When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then True Starts With 2.12 Starts With {123456789} End.`4esn`!,`1esn`:usn2,#usn7({@usn5}[{``}][{_usn4}],123.654 Starts With `8esn` Starts With @usn5).``? Return Distinct $`4esn` Is Null Is Null Order By {#usn8} Starts With {`4esn`} Starts With 00 Desc,2.12 Is Not Null Is Not Null Asc Skip {`3esn`:.e1[@usn5]}[{@usn5:$`4esn`[.e0][9e0]}..None(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)] Limit $999 Starts With $usn1 Starts With {`3esn`}"),
    octest_legacy:ct_string("Merge `1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Foreach(#usn8 In {`6esn`}[0.e0..$123456789]| Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Delete $`2esn`[#usn7][01],0Xa[$#usn8]) Union All Start `1esn`=Rel:@usn5('s_str') ,@usn5=Rel:usn1(@usn5={`1esn`}) Remove [0.0[.e12..],7 Starts With `5esn`,$7[..999][..`2esn`]].usn1?,_usn4:`4esn`:`3esn`,None(#usn8 In True In `8esn`).`5esn`! Merge _usn4=Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`))))"),
    octest_legacy:ct_string("Detach Delete exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In [#usn8[1e1..]] In Case When {#usn8} =~$0 Then $12 Is Null End,9e12[{1000}..][1000..],[$#usn8[12e12][0X7],$`3esn`[$_usn4][True]] Is Not Null Is Not Null Start `1esn`=Rel:@usn5('s_str') ,@usn6=Rel:``(``={_usn4}) Return {_usn4} In 9e0 As @usn6 Limit $1000[{#usn8}..] Union All With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) Ascending,$`7esn`[$1000..Null] Ascending Limit {7} In 9e1 Foreach(`7esn` In @usn5 Contains {#usn8} Contains 010| Return Distinct *,$@usn5 Is Null Is Null As @usn6 Skip 2.12 Contains 0.0 Contains $`6esn` Limit 9e0 Is Null Start `4esn`=Node(*) ,@usn5=Node:`8esn`(`3esn`={999})Where .e1 =~9e12) Start `1esn`=Rel:#usn7(``={@usn5})  Union All Remove Case `6esn` Contains `6esn` Contains 9e1 When {1000} Is Not Null Then 's_str' Ends With 's_str' Ends With $1000 Else 0xabc[0.e0..][$7..] End._usn4! Remove Any(usn2 In {@usn5} Where 9e0[{`8esn`}]).`1esn`"),
    octest_legacy:ct_string("Start @usn6=Relationship:#usn7(@usn5=\"d_str\") ,`2esn`=Relationship:@usn6({`5esn`}) Merge #usn7=Allshortestpaths((`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`)) On Create Set `7esn`+=9e1 Starts With {_usn3} Starts With {_usn3} On Match Set Single(`4esn` In False[0.0..{@usn6}] Where 0 Ends With .e0).@usn6! =False[0e0],[{999}[`2esn`],{usn2} Is Not Null Is Not Null,_usn3 Ends With {`7esn`} Ends With 12].usn1! ={#usn7} In 010 In 12 Union All With Distinct @usn6(07 Contains @usn5) Starts With Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) Starts With Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`}) Limit All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Where $@usn5 =~999 =~0e0 Foreach(`4esn` In (`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]}) Starts With {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where ``[$7..``]]| Start `7esn`=Node:@usn6({7}) ,#usn8=Node:`5esn`({_usn3}) Return Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) As _usn3,`4esn` Ends With 01 Ends With `5esn` As `6esn` Order By `4esn` Ends With 01 Ends With `5esn` Ascending Skip usn2[0.e0..] Limit {`7esn`} Is Not Null Is Not Null) Union All Start @usn5=Relationship:`2esn`(`1esn`=\"d_str\") ,@usn6=Node:``({`2esn`})Where 0.0 Starts With $`6esn`"),
    octest_legacy:ct_string("Merge ``=(`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}) Return `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} As `6esn` Skip 0x0[{`1esn`}] Optional Match ((`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})) Using Join On `7esn`,`4esn` Using Scan `1esn`:`6esn` Union Create Unique (({_usn3:0.0[010..12.e12]})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Optional Match Shortestpath((((`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})))) Where 2.12 Contains {1000} Contains 1.e1 Union Remove Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]).@usn5!,All(usn2 In 999[{123456789}..999] Where 010[$12..])._usn4! Load Csv With Headers From #usn7[9e1..$@usn5] As usn1 "),
    octest_legacy:ct_string("Merge @usn5=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}) Start `3esn`=Relationship:`4esn`(`3esn`=\"d_str\") ,_usn4=Node:@usn5(`3esn`='s_str') Foreach(`2esn` In `5esn`[..$_usn3]| Optional Match (({`8esn`:`1esn` =~12.0})-[`2esn`:`5esn`|`3esn`* 7{`3esn`:1e1[1000]}]->(usn2 )<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})),Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))) Using Index usn1:`7esn`(#usn7) Using Scan `5esn`:@usn5) Union All Detach Delete exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In [#usn8[1e1..]] In Case When {#usn8} =~$0 Then $12 Is Null End,9e12[{1000}..][1000..],[$#usn8[12e12][0X7],$`3esn`[$_usn4][True]] Is Not Null Is Not Null Start `1esn`=Rel:@usn5('s_str') ,@usn6=Rel:``(``={_usn4}) Return {_usn4} In 9e0 As @usn6 Limit $1000[{#usn8}..] Union All With  Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null As _usn4,`1esn`($0 Ends With `2esn`,#usn7[999..``]) =~[$usn2 =~`6esn` =~{usn1},$`5esn` =~`1esn` =~123.654,12.0 In $usn1 In True] Where 0xabc Is Null With  *,$_usn4 Ends With False Ends With $#usn8,{``}[$@usn5] As @usn5 Limit 12e12 In Null In {7} Where $12[`6esn`][$#usn8]"),
    octest_legacy:ct_string("Create Unique `2esn`=((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[@usn5?* 00..999]->(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})),`1esn`=(((_usn3 :`5esn`)<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}))) Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Index ``:@usn6(`6esn`) Union All Merge #usn7=Allshortestpaths((((`8esn` :@usn5:usn2)-[`5esn`]->(:#usn8:#usn7)-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`)))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set `8esn`+={usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}),[{`1esn`}[01234567..][@usn5..]].`3esn` =$123456789[.e12..][$999..] Delete $_usn3 Is Not Null Is Not Null,$#usn7[$``..{`7esn`}],0e0 Ends With 0 Ends With {`6esn`} Union Remove Extract(usn2 In {@usn5} Where {1000}[0e0][{usn1}]).`6esn`,(_usn4 :usn2)-[_usn3* 0X0123456789ABCDEF{`7esn`:0xabc =~{`8esn`} =~{_usn3}}]->(:`2esn`{`4esn`:$999[$12..][.e0..]}).`2esn`?,{@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc}.`5esn`?"),
    octest_legacy:ct_string("With  *,`2esn` Ends With $`6esn` Ends With 12.0,{``}[2.12] As usn2 Order By 9e1 Contains {#usn8} Contains `5esn` Asc,$`5esn`[$1000..][0e0..] Descending Where $7[.e1] Unwind {`5esn`} Starts With 123456789 Starts With 07 As `7esn` Union All With  Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Where $`7esn` In $999 In {123456789} Union All Create `1esn`=(usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}),Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Shortestpath((:@usn6{`7esn`:{12} Is Null}))..[12 =~{#usn7},$7[..999][..`2esn`],$`4esn`[{@usn5}]]][usn2(Distinct 12e12[$``..])..Filter(`5esn` In $999[12] Where $999 =~$999 =~usn2)] As #usn7 Fieldterminator 's_str' Return *,False =~9e0 =~{`5esn`} As `7esn`,1e1 =~{`1esn`}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $usn1 Ends With {123456789} Ends With 1.e1 As #usn8 Fieldterminator \"d_str\" Remove Allshortestpaths((((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[?:`1esn`|``* 123456789..999]->(_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})))).`7esn`,#usn8(Distinct $0[{``}..`2esn`]).`1esn`? Unwind 9e0 Is Not Null As _usn3"),
    octest_legacy:ct_string("Remove None(`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0).`3esn`!,Filter(`5esn` In `5esn` In 123.654 In {`6esn`} Where $12 Is Null).`7esn`!,{`5esn`:{#usn7} =~{usn1}}.usn2 Create Unique `6esn`=(({`8esn`:`1esn` =~12.0})-[`2esn`:`5esn`|`3esn`* 7{`3esn`:1e1[1000]}]->(usn2 )<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})),usn1=Shortestpath((((@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})<-[`4esn`?:#usn7|:``* 07..]->({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]}))))"),
    octest_legacy:ct_string("Merge `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Unwind 0xabc =~{`8esn`} =~{_usn3} As @usn5 Union All Foreach(`7esn` In {#usn7} Is Not Null| Create Unique ($`3esn`),((:``:usn1{@usn5:999[$_usn3][@usn6]}))) Start @usn5=Node:_usn4(\"d_str\") Where 0Xa Is Null Is Null Union Create ((:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})) Remove (usn2 {`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[* ..999]-(`8esn` :`5esn`).#usn8?"),
    octest_legacy:ct_string("Merge Shortestpath((({_usn4:Null[False..][12.e12..]}))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null Start #usn8=Node:`4esn`(`3esn`=\"d_str\")  Union All With  *,0Xa[$#usn8] As usn1,[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $`4esn`['s_str'..1000][.e12..010]][Reduce(usn1=07[0X0123456789ABCDEF],usn1 In #usn8 =~$@usn5|0xabc =~{`8esn`} =~{_usn3})] Order By 0.0[``] Asc,Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] Descending Limit {999}[0..{`7esn`}][9e0..{`3esn`}] Where 00 Is Null Merge _usn3=Allshortestpaths((({_usn4:Null[False..][12.e12..]}))) On Match Set Case When .e12[$``..] Then 0.0 Starts With $`6esn` Else $`3esn`[12.e12...e1] End.@usn5? =$#usn7[$usn2..@usn6][$`7esn`..{7}],`1esn` =Null[`1esn`..00],`` =0.e0[#usn7..][$@usn5..] Create @usn6=({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}),((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))"),
    octest_legacy:ct_string("Return Distinct *,[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] As `6esn` Limit Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null Union All Remove All(`4esn` In False[0.0..{@usn6}] Where 12.0 Starts With 00 Starts With 9e1).`8esn`!,Case 0x0[{`1esn`}] When 1e1[1.e1..] Then 999[$_usn3][@usn6] End.#usn7"),
    octest_legacy:ct_string("Merge ((`1esn` :`3esn`:@usn5{_usn3:{`5esn`} Ends With `2esn`,_usn3:{#usn7} Contains {`7esn`} Contains $`3esn`})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) On Create Set #usn7+=Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],Extract(usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|.e12[0.0..][$#usn8..]).@usn6? =#usn8[#usn8..] Load Csv From {usn1} Contains $@usn5 As _usn4 Fieldterminator 's_str' Match @usn6=(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}),_usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))))"),
    octest_legacy:ct_string("Foreach(#usn7 In $@usn6| Load Csv From (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12} As `5esn` ) Optional Match #usn8=(`3esn` :`3esn`:@usn5)<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}) Using Index `7esn`:`1esn`(`7esn`) Where {`2esn`} Union Merge #usn8=(`6esn` :usn1)-[`2esn`?* 0X7..]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})<-[usn1?:`5esn`|`3esn`]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3}) On Match Set `` =0X0123456789ABCDEF[0e0..$12][00..{12}],usn2 =.e0[.e0..][$``..] Create Unique ((usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}))"),
    octest_legacy:ct_string("Merge _usn4=(((`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`8esn`:_usn4|`5esn`* 0{`5esn`:$`8esn`[#usn7..][0X7..]}]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[usn2:#usn8|_usn3]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]}))) On Match Set Case .e12[$``..] When $usn2 =~`6esn` =~{usn1} Then $usn1 Ends With {123456789} Ends With 1.e1 End.`3esn` =00[{999}..$#usn7][$0...e0],(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]-(:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12}).`6esn`! =(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})<-[?{`4esn`:$`4esn` =~{usn1}}]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``}) Is Null Is Null"),
    octest_legacy:ct_string("Create @usn5=((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]})) Return Distinct *,Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},{#usn8:9e1 Ends With 0xabc Ends With @usn6} Is Null Is Null As usn1 Order By $`3esn`[$_usn4][True] Desc,[False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending,Filter(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5])[All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..] Asc Skip Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Limit _usn3 In 1.e1 Start `2esn`=Node:`4esn`(`3esn`=\"d_str\") Where 1e1 In 0xabc Union All Optional Match _usn3=({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3}),({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})-[#usn7?:usn2|_usn3* 7{_usn4}]->(:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}}) Using Join On `5esn`,`3esn`,usn1"),
    octest_legacy:ct_string("Create (((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))),`7esn`=((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Create Unique usn1=(usn2 :_usn4:`1esn`),`1esn`=((`1esn` :`3esn`:@usn5{_usn3:{`5esn`} Ends With `2esn`,_usn3:{#usn7} Contains {`7esn`} Contains $`3esn`})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) Union All Optional Match usn1=Shortestpath((#usn7 :#usn7:`6esn`)<-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]->(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Using Index `4esn`:`8esn`(usn1) Using Index `3esn`:`3esn`(#usn8) Where $7 =~{`7esn`} =~$`6esn`"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})) On Create Set `3esn`+=0xabc[{@usn5}],`3esn` =0.e0 Ends With 12.e12 Ends With $usn2 Match @usn6=Shortestpath(((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))),((`` :#usn8:#usn7)) Using Join On `2esn`,``,`` Where {usn2}[{`7esn`}][$usn2] Union All Return Distinct {`6esn`}[{usn2}..$`3esn`][12.0..0xabc] Order By `5esn` Descending Foreach(_usn3 In Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null| Remove ({@usn5:0[...e1][..$usn2]})<-[`8esn`:_usn4|`5esn`* 0{`5esn`:$`8esn`[#usn7..][0X7..]}]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}).#usn7,`7esn`:``:usn1,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..])._usn4?) Match ((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`)),`7esn`=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1}))"),
    octest_legacy:ct_string("Return Distinct *,0X0123456789ABCDEF[..`5esn`][..$`3esn`],usn1 Contains `6esn` Contains 1000 Order By `6esn` Contains {`3esn`} Asc,$`4esn` Descending Limit 1e1[1000] Create Unique usn1=Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}))) Union All Detach Delete 2.12 =~9e1 =~{_usn4},010[.e12],0e0 In .e1 Create @usn5=((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]})) Create Unique #usn7=Shortestpath((({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $`4esn`['s_str'..1000][.e12..010]][Reduce(usn1=07[0X0123456789ABCDEF],usn1 In #usn8 =~$@usn5|0xabc =~{`8esn`} =~{_usn3})] As `1esn`  Create Unique `3esn`=Shortestpath((((_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[@usn6:`5esn`|`3esn`* 07..]->({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``* 7]-(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})))),(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Create @usn5=Shortestpath((((`3esn` :_usn4:`1esn`)<-[`1esn`?* 0Xa]-(@usn5 :`1esn`)-[?* 00..999]-(:``:usn1{@usn6:07 Is Null}))))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((:``:usn1{@usn6:07 Is Null})) Union Foreach(`5esn` In $@usn6 Is Null Is Null| Remove usn1:`1esn` Delete 7 Is Null Is Null,.e12 Starts With $@usn5 Starts With $@usn5) Foreach(#usn7 In 12e12[0X0123456789ABCDEF..{`2esn`}]| Load Csv With Headers From Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) As `7esn` Fieldterminator 's_str' Return *,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),@usn6[9e12..] As `7esn` Order By 0X0123456789ABCDEF[..$`1esn`] Asc,$`5esn` =~`1esn` =~123.654 Desc Skip {`7esn`} =~01234567 =~`7esn`)"),
    octest_legacy:ct_string("With  *,.e12[Count(*)..{`4esn`}][07..$1000] Skip {1000}[..#usn7][..{#usn8}] Limit $7 In $usn2 In {1000} Where 12.0 Ends With 0e0 Ends With $123456789 Union Return $usn1[0X0123456789ABCDEF...e12],`2esn` Is Null Is Null As @usn5,$usn1 Contains 12.e12 Contains {@usn5} As `7esn` Skip {@usn5}[Case 010 Ends With 123456789 Ends With .e0 When {#usn8} Is Not Null Is Not Null Then $`6esn` Is Null Is Null End..Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6|Null[False..][12.e12..])] With  *,0X0123456789ABCDEF =~$@usn6 =~$`8esn`,Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As _usn3 Order By 00 Is Null Asc,{#usn7} Contains \"d_str\" Contains {_usn4} Descending Skip 9e1 Contains {#usn8} Contains `5esn` Limit 's_str' Is Not Null Union Create (((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}))) Load Csv With Headers From $`5esn` Starts With 1.0 Starts With $usn2 As `2esn` Fieldterminator 's_str' Foreach(`4esn` In `5esn`[$12..][`2esn`..]| Unwind usn1 Contains $999 As _usn3 Return *,0X0123456789ABCDEF Starts With #usn7,Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip {`2esn`}[usn2..][$#usn7..])"),
    octest_legacy:ct_string("Return *,0xabc[{@usn5}] As @usn5,Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) As usn1 Skip Reduce(@usn5=$`7esn` Ends With usn2,usn1 In {usn2} Contains {123456789} Contains 0Xa|{999}[`2esn`]) =~($`4esn`)-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2) =~{`4esn`:`3esn` Is Null Is Null} Foreach(`5esn` In Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})))| Unwind `1esn` In 12.e12 In $#usn7 As `5esn`)"),
    octest_legacy:ct_string("Match `8esn`=Shortestpath((_usn4 {`2esn`:0[{`4esn`}..],`6esn`:{`2esn`}[..{123456789}]})-[#usn7:_usn3|:`6esn`{@usn6:{12} Is Null}]-({_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[`7esn`?* 0xabc..01234567]-(`1esn` {_usn3:7 Is Null Is Null})),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On usn2,`2esn`,`4esn` Load Csv With Headers From 12.0[{`6esn`}..123.654][@usn5..usn1] As usn2  Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),Allshortestpaths((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[`8esn`* 00..999{`5esn`:{`7esn`}[..1000][..#usn7]}]-(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Union All Load Csv With Headers From [@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}] As usn2 Fieldterminator \"d_str\" Create Unique `6esn`=(({`8esn`:`1esn` =~12.0})-[`2esn`:`5esn`|`3esn`* 7{`3esn`:1e1[1000]}]->(usn2 )<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})),(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}) Foreach(@usn5 In `5esn`| Optional Match _usn3=Allshortestpaths((()<-[?$@usn6]->(@usn5 :usn1{#usn8:0xabc =~{_usn4}}))),#usn8=((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`))) Using Scan _usn3:`8esn`) Union Match usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),@usn5=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) Where 00 Starts With 12 Starts With 0e0 Remove None(usn2 In 999[{123456789}..999] Where {@usn5}[{``}][{_usn4}]).#usn7? With Distinct *,$7 In $usn2 In {1000} Order By {`4esn`} Starts With $12 Starts With 0Xa Desc,{7} Is Null Is Null Desc,$@usn5[00][0Xa] Asc Where $usn1 Ends With {123456789} Ends With 1.e1"),
    octest_legacy:ct_string("Start usn1=Node:`1esn`(\"d_str\") Where {`7esn`} =~01234567 =~`7esn` Foreach(`5esn` In $7 =~{`7esn`} =~$`6esn`| Start usn1=Node:@usn6({7}) Where `8esn`[1000..#usn8] Load Csv With Headers From $#usn7[$usn2..@usn6][$`7esn`..{7}] As `5esn` ) Return {``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] As #usn8 Order By 1000 Starts With {7} Starts With $7 Descending Limit 07 Starts With \"d_str\" Starts With $12 Union All Remove (`8esn` :`2esn`{`5esn`:0 Is Not Null})<-[* ..999]-(`5esn` {_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]}).`4esn` Union Unwind Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As `2esn` Foreach(`3esn` In _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])]| Start `8esn`=Node:usn2({`2esn`}) Where 's_str' Is Not Null Create Unique ((`1esn` :@usn6{@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4)))"),
    octest_legacy:ct_string("Create `5esn`=Allshortestpaths(((`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})<-[`6esn`:@usn5|``{usn2}]-(@usn5 )<-[:``* 010]-(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})))"),
    octest_legacy:ct_string("Unwind 999[.e1..{`5esn`}][{#usn7}..{`1esn`}] As `1esn` Create #usn7=((usn2 )-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})),`2esn`=Allshortestpaths((((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[?:`1esn`|``* 123456789..999]->(_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))))"),
    octest_legacy:ct_string("Delete .e1[$`6esn`..] Create usn2=Shortestpath((({_usn3:_usn4 =~`1esn`}))),((`1esn` :@usn6{@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4)) Merge usn1=((`3esn` {@usn5:$``[..`4esn`][..0],`8esn`:{@usn5}})) On Create Set `` =07 Is Null Union Return Distinct *,1.0 As usn2,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip $7[\"d_str\"][`8esn`] Start @usn6=Rel:#usn7(``={@usn5}) ,#usn7=Node:#usn8(_usn3=\"d_str\")Where 1000 In {`4esn`} Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)._usn3,count(Distinct 1e1[{`3esn`}][True]).`1esn`,[@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].@usn6?"),
    octest_legacy:ct_string("With  (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) As @usn5,[#usn7 In {`5esn`} Ends With `2esn` Where {#usn7} Starts With $`1esn` Starts With 07|Count(*)[#usn8][$usn1]][{_usn4:0x0[9e0..][$@usn5..]}] As _usn3,010[$12..] Order By 999[1000..] Descending,`1esn`[{usn1}][{12}] Desc,{@usn5:00 =~.e12}[(`8esn` :usn2)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(usn1 :`7esn`:_usn4)-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})..] Descending Skip usn2[$7..$`5esn`] Where $7 =~{`7esn`} =~$`6esn` Union All Create (((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[?:usn2|_usn3* 07..]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Union All Match _usn3=Shortestpath((((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6)))),Allshortestpaths(((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[:`3esn`|``* 1000]->(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]}))) Using Scan @usn6:usn1 Unwind $`4esn` Is Null Is Null As usn2 Start `7esn`=Node:_usn3('s_str') Where .e1 Is Not Null"),
    octest_legacy:ct_string("Remove {`3esn`:010 Is Not Null Is Not Null,_usn3:0xabc In {`6esn`} In $@usn6}.@usn5?,{usn2:010 Contains $`5esn`}.`1esn`,Reduce(`2esn`={usn1} Ends With {#usn7} Ends With 12.0,@usn5 In 1.0 Starts With 12|@usn6[9e12..]).@usn5! Union All Load Csv From usn2[0.e0..] As usn2 Fieldterminator 's_str' Load Csv From usn2[01234567..] As @usn5 Fieldterminator \"d_str\" Union Unwind $`1esn` Contains $#usn7 As `3esn` Match `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`8esn`=Allshortestpaths((((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`)))) Using Index `2esn`:`6esn`(`1esn`) Using Scan #usn7:_usn3 Where 00[$usn2..][0.12..] Merge _usn4=Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) On Create Set _usn4+=`3esn`[$`2esn`] On Create Set {``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}}.`3esn`! =07 Starts With 7,_usn3 =`2esn`[0Xa][{`8esn`}]"),
    octest_legacy:ct_string("Optional Match ((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})),((#usn8 :`1esn`{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]})) Where @usn6[9e12..] Union Unwind {_usn3:9e12[..#usn7][...e0]}[Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010])..Reduce(#usn8=0.e0[$`1esn`..],`1esn` In {``} =~{`2esn`} =~$`8esn`|\"d_str\"[..{`1esn`}][..$`2esn`])][Case When #usn8 Ends With `5esn` Ends With _usn3 Then {`6esn`} Starts With 0xabc End..(:@usn6)<-[:`3esn`|``* 1000]-(`6esn` :usn1)<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})] As `2esn` Match Shortestpath((`5esn` )-[_usn3?:`6esn`|:`7esn`]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})),(`4esn` :usn1)<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]}) Using Join On `7esn`,_usn3,`3esn` Using Index `5esn`:`6esn`(usn2) Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6! Union Delete 123.654[2.12..][{`7esn`}..],123456789[`8esn`..][{999}..] Optional Match _usn4=(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[`4esn`?:`4esn`|`2esn`* 00..999{`1esn`:$usn2 Starts With {`1esn`}}]->({`4esn`:01234567[usn1]}),``=(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})<-[`5esn`?{`3esn`:{@usn6}[..0.e0][..$0]}]-(:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})<-[* 01..{_usn4:Count(*)[#usn8][$usn1]}]->($`3esn`) Using Index _usn4:`1esn`(`8esn`) Where #usn7 Ends With {@usn5} Delete {1000}[..#usn7][..{#usn8}],@usn5[01..`6esn`]"),
    octest_legacy:ct_string("Return Distinct 07 Is Null Is Null As _usn3,{`2esn`}[..$`6esn`][..`3esn`] Order By {#usn7} In 010 In 12 Desc,`1esn` In {999} In $123456789 Ascending Skip Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12} Limit usn2 Contains \"d_str\" Contains 123.654 Foreach(#usn7 In {@usn5:00 =~.e12}[(`8esn` :usn2)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(usn1 :`7esn`:_usn4)-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})..]| Create Unique `6esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) With  *,@usn5[123.654..$_usn4][0.12..$@usn6],9e1 Ends With 0xabc Ends With @usn6 As `7esn` Limit 2.12[$`7esn`..] Where .e12[0.0..][$#usn8..]) Union All Create ((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`)),`7esn`=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1})) Create usn2=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Detach Delete 999[{123456789}..999],{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc),@usn5 Ends With `8esn` Union Delete 12[True]"),
    octest_legacy:ct_string("Start `7esn`=Rel:`7esn`(`3esn`={`4esn`})  Start `6esn`=Rel:`4esn`(usn2='s_str') ,usn2=Relationship:`6esn`({#usn8})Where 0x0 Is Not Null Foreach(`4esn` In Null[`8esn`]| Create Unique #usn7=(_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]}),(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`) Unwind {`1esn`} =~{@usn6} =~`2esn` As `2esn`) Union All Return @usn5[_usn3..{12}][{999}..$7],`5esn` As usn2,123456789[`8esn`..][{999}..] Order By $@usn5[$``..][$`8esn`..] Descending Skip {#usn8:9e1 Ends With 0xabc Ends With @usn6} Is Null Is Null Remove [123.654 In {12} In ``,#usn7].`6esn`!,Any(usn2 In 999[{123456789}..999]).`6esn` Union Foreach(`7esn` In [usn2 In 999[{123456789}..999] Where @usn5[_usn3..{12}][{999}..$7]] Starts With [`6esn` In {1000} Is Not Null Where 01] Starts With None(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)| Create Unique ((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})) Return Distinct 0.12 =~$`7esn` =~`8esn` As @usn6 Skip Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]}) Create (:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Delete $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`"),
    octest_legacy:ct_string("Remove [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|{`1esn`} =~{@usn6} =~`2esn`].`5esn`!,[`6esn` In {1000} Is Not Null Where `1esn`[$``][{`5esn`}]|{`7esn`}[..0xabc][..0e0]].`4esn`?,All(usn2 In 999[{123456789}..999] Where 010[$12..])._usn4! Union With  0xabc In 9e1 Where `1esn` In 12.e12 In $#usn7 With Distinct 's_str' Is Not Null,999[{12}..][$1000..],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Skip 12e12[$``..] Limit {`4esn`}[.e0][0Xa] Union Start `7esn`=Node:@usn5(usn1='s_str') Where {@usn5} In $`5esn` Return *,'s_str' =~9e12 =~0.0 As `4esn` Skip $@usn5 =~{`8esn`} =~\"d_str\" Limit 0X0123456789ABCDEF[.e1..`2esn`]"),
    octest_legacy:ct_string("Unwind {7} Is Null As `5esn` Create `1esn`=Allshortestpaths((($7)-[``?:#usn7|:``]-(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))),_usn4=(:``:usn1{@usn6:07 Is Null}) Union All Unwind All(_usn4 In .e12 Is Not Null Where 0X0123456789ABCDEF Is Null) Ends With [999[1000..]] Ends With [usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]] As `7esn` Return Distinct *,1.e1[$`3esn`] Remove Shortestpath(((`` :usn2)-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-(`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})<-[usn1:#usn8|_usn3]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654}))).`6esn`?,[123456789[123.654..{usn1}],0X7 =~$`6esn`,010 Is Not Null Is Not Null].`6esn`! Union Remove @usn6(True In `8esn`).#usn7? Detach Delete [#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),$1000[{#usn8}..]"),
    octest_legacy:ct_string("Start `5esn`=Node:`4esn`(`2esn`={7}) ,`8esn`=Node:_usn3('s_str')Where .e1 Is Not Null Remove @usn5(Distinct $_usn4 Ends With False Ends With $#usn8)._usn3"),
    octest_legacy:ct_string("Remove (usn2 :`6esn`:`4esn`)<-[?* ..999]->(:``:usn1)<-[`2esn`:`5esn`|`3esn`* 07..{_usn3:0X7 =~$`6esn`,`2esn`:999[$_usn3][@usn6]}]->(`` :#usn8:#usn7)._usn3,Case $0 Starts With `2esn` Starts With {`1esn`} When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else True Starts With 2.12 Starts With {123456789} End.#usn7?,None(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]).`7esn`! Optional Match Shortestpath(((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))) Where $`7esn` Ends With usn2 Union Create (`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`),(((`4esn` :``:usn1)-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[:_usn3|:`6esn`* 0Xa]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))) Create (`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Union All Optional Match ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]}))) Using Index _usn4:`1esn`(`8esn`)"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}}))) On Create Set usn1+=usn2[01234567..] On Create Set _usn3+=Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End[[$0 =~_usn3,010]..],usn2+=Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] Optional Match (({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})),`8esn`=Allshortestpaths(((:`8esn`:_usn3{_usn3:{999}[..{999}]})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Join On `7esn`,`2esn`,@usn6 Using Scan ``:@usn5 Where {_usn4} In 9e0 Unwind Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As `` Union Return Distinct *,Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},{#usn8:9e1 Ends With 0xabc Ends With @usn6} Is Null Is Null As usn1 Order By @usn5[01..`6esn`] Descending Skip {`4esn`}[.e0][0Xa] Union Detach Delete {1000}[..`3esn`] Remove `1esn`:`7esn`:_usn4,All(usn2 In 999[{123456789}..999] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`])._usn4,[@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4}|$0 Starts With `2esn` Starts With {`1esn`}].`2esn`!"),
    octest_legacy:ct_string("Foreach(`7esn` In {#usn7} Is Not Null| Create Unique ($`3esn`),((:``:usn1{@usn5:999[$_usn3][@usn6]}))) Start @usn5=Node:_usn4(\"d_str\") Where 0Xa Is Null Is Null Union All Load Csv With Headers From 12.0[{`6esn`}..123.654][@usn5..usn1] As usn2  Detach Delete (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12},0x0 In {`3esn`} Merge Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) On Match Set @usn5 =$999 Is Null Is Null Union All With Distinct {1000} Is Not Null Is Not Null Order By {`3esn`} Is Not Null Is Not Null Ascending,Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]] Asc,`4esn` Ends With 01 Ends With `5esn` Desc Create Unique Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Unwind 's_str' Is Not Null Is Not Null As _usn4"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) Match #usn8=Shortestpath((:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]})),usn1=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Using Join On `6esn`,`3esn`,`1esn` Where $_usn3 Is Not Null Create Unique @usn5=Shortestpath(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})))"),
    octest_legacy:ct_string("Remove Case .e12[$``..] When $usn2 =~`6esn` =~{usn1} Then $usn1 Ends With {123456789} Ends With 1.e1 End._usn3,Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {@usn5} Contains 0X7 Contains 1e1|`2esn`[0Xa][{`8esn`}]).`1esn`! Load Csv From True =~_usn3 As `4esn`  Optional Match `7esn`=(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}),_usn4=(`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[?:@usn6* 123456789..999]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]}) Union All Remove Filter(usn2 In {@usn5} Where {@usn5}[01234567][{1000}]).`3esn`!,{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}.`1esn` Remove All(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]).usn1?,Reduce(`6esn`=12 Is Null Is Null,usn2 In 999[{123456789}..999]|$999 Is Not Null Is Not Null).`8esn`?"),
    octest_legacy:ct_string("Merge Shortestpath((@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})-[?* 00..999]->(`4esn` :@usn6)) On Match Set $@usn6._usn4 =12 =~$`5esn` =~$_usn3 On Create Set #usn8+=2.12 Contains 0.0 Contains $`6esn` Foreach(`3esn` In $`2esn` Ends With 9e1 Ends With ``| Load Csv From Allshortestpaths((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|{`5esn`} Contains 0)][Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4})] As `1esn` Fieldterminator 's_str' Create `1esn`=(`6esn` :#usn8:#usn7)-[?* 0{``:0[1.0..][.e0..]}]-(#usn7 {``:1.0 =~`7esn` =~$`7esn`})-[@usn6:@usn5|``* 07..]-(`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})) Return Distinct [0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1) As #usn8 Order By 0e0 Descending,[{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])] Asc"),
    octest_legacy:ct_string("Create _usn3=Shortestpath((((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6)))),`4esn`=(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[#usn8* 01234567..0Xa{#usn8:$`6esn` Starts With _usn4 Starts With `5esn`}]-(`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789}) Load Csv With Headers From `8esn`[$123456789..][$usn1..] As `6esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete 9e1 Is Not Null,Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] With  {`8esn`} Is Null Is Null Where 010 Contains $`5esn` Union Start #usn7=Relationship:`8esn`('s_str') ,`3esn`=Rel:`8esn`({_usn3}) Remove None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null).`2esn`,Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).#usn8?,All(@usn6 In 0xabc Ends With 1.0 Ends With $``).`2esn`?"),
    octest_legacy:ct_string("Unwind 7 Is Null Is Null As `4esn` Union All Remove Filter(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7 In $usn2 In {1000}).`` Optional Match (({_usn3:_usn4 =~`1esn`})),`4esn`=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Using Index `6esn`:``(_usn3) Using Scan `6esn`:`7esn` Where .e12 Is Not Null"),
    octest_legacy:ct_string("Return Distinct $#usn7 Is Null,$usn2[`4esn`..],\"d_str\" Ends With 0e0 Ends With {usn2} As usn1 Order By 2.12 Contains @usn5 Contains {``} Descending,Filter(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})[None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 9e12 In 's_str' In $`4esn`)..] Asc,_usn3(Distinct 1.0 =~`7esn` =~$`7esn`) Contains Case When 12[0X0123456789ABCDEF..][Count(*)..] Then 0[`6esn`][1e1] When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {999}[`2esn`] End Descending Create Unique ((`` :usn1{``:$999 Is Not Null Is Not Null,`4esn`:.e12 Ends With {`2esn`}})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]})),`6esn`=Shortestpath((`8esn` :_usn3:@usn6)<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Optional Match Shortestpath((`2esn` :`5esn`)<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})),@usn5=(`5esn` {`3esn`:_usn3 In 1.e1}) Using Join On @usn5,@usn5,`` Using Join On `5esn`,`2esn` Union Load Csv With Headers From {#usn7} Contains \"d_str\" Contains {_usn4} As `` Fieldterminator 's_str' With Distinct 0xabc Is Null As _usn4 Limit 12[$`8esn`..{_usn4}] Where $`2esn` Contains `5esn` Contains .e1 Delete Reduce(#usn8=01234567 Is Not Null,`6esn` In {1000} Is Not Null|$`2esn` Contains `5esn` Contains .e1)[[$#usn7[$``..{`7esn`}]]..][[#usn8[1e1..]]..],Null In 1e1 In {999},2.12[0..@usn5]"),
    octest_legacy:ct_string("Detach Delete 7 =~.e1,$`7esn` Contains $_usn4 Contains `8esn` Detach Delete `1esn` In #usn8 Delete {@usn5}[{`6esn`}..$0][1000..$1000],1.0 Starts With 12 Union Return Distinct {usn1} Contains $@usn5 As usn2 Limit (:#usn7:`6esn`{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})-[#usn7:`5esn`|`3esn`]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})<-[usn1?:@usn5|``* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})[Filter(#usn7 In $@usn6 Contains 0 Contains 0 Where 00[usn2..`3esn`][0X0123456789ABCDEF..$7])..All(usn2 In {@usn5} Where $1000 Is Null Is Null)][{`5esn`:12e12[..Count(*)][..$usn2],`6esn`:010 Starts With `3esn` Starts With {usn1}}..Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)] Create Unique Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})) Unwind {`6esn`}[$1000] As `2esn` Union Merge @usn6=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) On Create Set [{`7esn`}[{#usn7}..],0e0 Starts With 's_str',`1esn` In 9e0 In {7}]._usn4? ={1000}[0e0][{usn1}] Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Create `4esn`=Allshortestpaths(((`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `2esn` Ends With $`6esn` Ends With 12.0 As `8esn`  Detach Delete Reduce(`2esn`=$#usn8 In $0 In {`2esn`},@usn5 In 1.0 Starts With 12|`4esn`[usn2..]) Is Not Null Is Not Null,{usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}),0X7 =~$`6esn`"),
    octest_legacy:ct_string("Create Unique usn2=Shortestpath(((_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:`8esn`|:_usn3]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Union Merge Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})-[?{`5esn`:9e0 =~$usn1 =~{@usn6}}]->(_usn4 :_usn3:@usn6)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})))) On Match Set _usn4+=`3esn`[$`2esn`] On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] Unwind [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) As `8esn` Match ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Using Join On #usn8,_usn3 Using Scan `7esn`:#usn7 Where 01234567 Is Not Null"),
    octest_legacy:ct_string("Create Unique ``=Shortestpath((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})) Union Foreach(@usn6 In None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 0X0123456789ABCDEF[0e0..$12][00..{12}]) Contains Case When 0[0xabc] Then {@usn6}[..0.e0][..$0] End Contains Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)| Return Distinct *,$usn2 Is Not Null Is Not Null As `8esn` Order By 1e1[usn1..$123456789][Count(*)..False] Descending,Any(@usn5 In 1.0 Starts With 12 Where .e0 Starts With {0} Starts With 0x0) =~(:``:usn1)<-[`6esn`?:`1esn`|``]-(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}) =~None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $usn2 =~`6esn` =~{usn1}) Asc Skip {`5esn`}[$1000..`1esn`] Limit [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] With Distinct `5esn` In 123.654 In {`6esn`} As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Desc,{0}[$usn2..0.e0][{`4esn`}..True] Descending Skip All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Limit All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Where 0Xa[0X7..#usn8][_usn3..9e1]) Optional Match (({_usn3:_usn4 =~`1esn`})),`4esn`=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Using Index `6esn`:``(_usn3) Using Scan `6esn`:`7esn` Where .e12 Is Not Null Union Remove Allshortestpaths((@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})-[?:``]-(:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[{@usn6:$@usn6}]-(`5esn` {`8esn`:0xabc Is Null})).usn2!"),
    octest_legacy:ct_string("Load Csv With Headers From Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} As #usn8 Fieldterminator \"d_str\" Remove @usn5:`1esn`,{`6esn`:12.e12[..9e12][..1000],_usn3:{@usn5}[01234567][{1000}]}._usn4!"),
    octest_legacy:ct_string("Load Csv With Headers From $`7esn` Ends With {usn1} Ends With {``} As `3esn` Fieldterminator 's_str' Union All Create Unique Allshortestpaths((((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))),((:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[_usn4?:``]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Remove [$usn1[{_usn3}],Count(*) In {`4esn`}].`3esn`?,Case When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] When #usn7 Starts With {@usn5} Starts With 07 Then {`2esn`} Else 0.0[`5esn`][1.e1] End.`7esn`!"),
    octest_legacy:ct_string("Remove Reduce(`6esn`=12.0 Starts With 00 Starts With 9e1,usn1 In #usn8 =~$@usn5|{999} Ends With 1000 Ends With 1e1).`3esn` Load Csv From $`2esn`[usn2][#usn7] As `` Fieldterminator \"d_str\" Create Unique @usn6=(:usn2{usn1:1.e1 =~123.654 =~$`3esn`}) Union Unwind $0 Starts With `2esn` Starts With {`1esn`} As usn2 Delete Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3} In 010 In 0.e0][..Case {`5esn`} Contains 0 When {_usn4} Then 1e1[1.e1..] When {_usn3} In 010 In 0.e0 Then $0 End][..[@usn5 In 07[{_usn4}..{`4esn`}] Where {`7esn`} =~01234567 =~`7esn`|$7 =~{`7esn`} =~$`6esn`]],True In `8esn` Unwind Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where 7 Is Null Is Null) Ends With @usn5(010 Starts With `3esn` Starts With {usn1},{`2esn`}[@usn6][{_usn3}]) As `1esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] As _usn4  Remove Extract(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`).usn2! Merge @usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Detach Delete {`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5],[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]] Starts With Extract(usn2 In 999[{123456789}..999] Where 9e1 Is Not Null|$_usn3[$usn2..]),$`5esn` Ends With $#usn8 With  *,`2esn` Is Null Is Null As @usn5,999[{12}..][$1000..] As @usn5 Order By {`5esn`}[$`8esn`..$`1esn`] Asc,.e12[{1000}] Asc,9e0 Is Not Null Ascending Skip `1esn`[$`8esn`..][True..] Limit {#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) Union Create `8esn`=Shortestpath(((:_usn4:`1esn`{#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`6esn` :`4esn`:`3esn`)<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(_usn3 :_usn3:@usn6))),Allshortestpaths(((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})))"),
    octest_legacy:ct_string("Load Csv With Headers From [`7esn` In @usn5[01..`6esn`] Where $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`|$12 Contains .e1][..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 0X0123456789ABCDEF[0e0..$12][00..{12}]|{7}['s_str'..]]][..[1.0 Is Not Null,$`1esn`[0..{_usn3}]]] As `7esn` Fieldterminator \"d_str\" Foreach(#usn8 In {`6esn`}[0.e0..$123456789]| Create Unique ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Delete $`2esn`[#usn7][01],0Xa[$#usn8]) Union All Load Csv With Headers From Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null As `8esn`  Create Unique (`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6}),((#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[?* 07..]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]})<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(:@usn5:usn2{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}))"),
    octest_legacy:ct_string("Detach Delete 12 Ends With @usn5 Ends With 1e1,123456789[123.654..{usn1}] Optional Match `3esn`=Shortestpath((((`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})))),Shortestpath((({_usn3:_usn4 =~`1esn`}))) Using Index _usn4:#usn8(_usn4) Using Scan `6esn`:`2esn` Union All Match #usn7=Shortestpath((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})) Using Join On `7esn`,_usn3,`3esn` Return Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]) Load Csv With Headers From 2.12 Contains {1000} Contains 1.e1 As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create @usn6=Allshortestpaths(((:#usn7:`6esn`{999}))) Unwind {1000}[0e0][{usn1}] As `7esn`"),
    octest_legacy:ct_string("Unwind Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) As #usn7 Remove [@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].`4esn`!"),
    octest_legacy:ct_string("Delete `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} Load Csv From _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] As `5esn` Fieldterminator \"d_str\" With Distinct *,1.0 As usn2,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip $7[\"d_str\"][`8esn`] Where 1000 Contains 12.e12 Union All Detach Delete 9e12[{1000}..][1000..],0.0[`5esn`][1.e1],$12 Is Not Null Is Not Null Remove Reduce(usn1=$`3esn` Is Null Is Null,usn1 In #usn8 =~$@usn5|{``}[2.12]).`1esn`?,Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where $12 Is Null).``,Case When $`8esn` Starts With $123456789 Then $#usn7 Is Null When #usn7 Starts With {@usn5} Starts With 07 Then {`1esn`}[01234567..][@usn5..] End.`6esn`!"),
    octest_legacy:ct_string("Remove All(`6esn` In {1000} Is Not Null Where Count(*) In {`4esn`}).@usn5?,Reduce(`2esn`=123.654 Starts With `8esn` Starts With @usn5,#usn8 In True In `8esn`|010[$12..]).usn2?,{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}.`7esn`! Foreach(`` In $`7esn` =~#usn8 =~{`7esn`}| Return *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]] Limit 1e1 Is Not Null Is Not Null With  *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Where `1esn` In {`4esn`})"),
    octest_legacy:ct_string("Match Shortestpath(((`1esn` {`3esn`:0.12 In `8esn`})<-[`8esn`?:_usn4|`5esn`]->(usn2 $`3esn`))),(({@usn5:0[...e1][..$usn2]})) Using Scan `4esn`:`6esn` Using Index _usn3:`4esn`(usn2) Create `6esn`=Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})) Union Remove {@usn6:1e1[{`3esn`}][True]}.@usn6!,[usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..]|'s_str' =~0x0 =~{#usn8}]._usn3 Union All With Distinct 0X0123456789ABCDEF[0e0..$12][00..{12}],$@usn6 Ends With {`6esn`} Ends With 0.e0,7 Starts With $1000 As @usn6 Order By $usn2 Is Not Null Asc,0e0 In .e1 Descending"),
    octest_legacy:ct_string("Optional Match ((({`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[usn1?:usn2|_usn3* 1000{#usn8:00 Is Null}]-({`8esn`:12e12[..1.e1][..$12]})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))),_usn3=((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Where 0xabc Contains False Contains {1000} Foreach(_usn4 In Reduce(`7esn`=$123456789 In $7,@usn5 In 1.0 Starts With 12|`3esn`[{`1esn`}])[(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[`4esn`:_usn4|`5esn`* 0{@usn6:$usn1[0X0123456789ABCDEF...e12]}]-({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 1.e1 Starts With False Starts With $@usn6)]| Remove {usn2:$`7esn` =~#usn8 =~{`7esn`},`8esn`:`1esn` In {`4esn`}}.`7esn`,{usn2:$#usn7 Contains {usn2}}.`8esn`?)"),
    octest_legacy:ct_string("Unwind {_usn3}[..$usn2][..$`6esn`] As usn2 Union Return *,$`1esn` Ends With {1000} Ends With $`8esn` As `2esn` Order By Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] Desc,Null[..010][..$@usn6] Desc,Case $usn1[0X0123456789ABCDEF...e12] When 00[$usn2..][0.12..] Then True In `8esn` When $`1esn`[0..{_usn3}] Then usn1 =~1000 =~12 End Ends With Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Ends With (:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}})-[?* 00..999]->(#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}}) Descending Skip [`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] With Distinct Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}],0X0123456789ABCDEF[..`5esn`][..$`3esn`] As _usn4,Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Ascending,0.12 Is Not Null Desc Skip {`2esn`} Is Not Null Union Create Unique usn2=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]][Case $#usn7 Is Null When {`7esn`} Contains 's_str' Contains 01 Then $`6esn` Is Null Is Null Else usn2[$7..$`5esn`] End] As `6esn` Fieldterminator 's_str' Start `6esn`=Rel:`3esn`(`4esn`={123456789}) ,_usn4=Rel:`3esn`(_usn3={_usn4})"),
    octest_legacy:ct_string("Start `3esn`=Node:#usn8(`4esn`=\"d_str\") ,@usn5=Node:@usn5(_usn4='s_str') Unwind `1esn` In 12.e12 In $#usn7 As `7esn` With  usn1[#usn8..0.0] Order By Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Ascending,0xabc Is Not Null Is Not Null Asc Where {`6esn`}[_usn3] Union Create Unique `4esn`=(((usn2 :@usn6{usn1:0.0[0.12]})-[?:``]-(_usn3 :@usn5:usn2)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))),@usn6=Shortestpath(((:@usn6{`1esn`:$999[12],@usn5:07[{_usn4}..{`4esn`}]})<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})))"),
    octest_legacy:ct_string("Merge _usn3=Allshortestpaths((@usn5 :`3esn`:@usn5{`1esn`:{#usn7} =~$0})<-[:`5esn`|`3esn`{@usn5:usn1 =~1000 =~12}]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})) Union All Load Csv From (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) As `` Fieldterminator 's_str' Remove @usn6(True In `8esn`).#usn7? Start usn2=Relationship:`4esn`(\"d_str\") Where `1esn` In {`4esn`}"),
    octest_legacy:ct_string("Unwind $`5esn`[$1000..][0e0..] As usn2 Remove Case {999}[`2esn`] When _usn4 =~`1esn` Then {`6esn`} Starts With 0xabc When .e1 Starts With #usn7 Starts With 1.e1 Then `8esn`[{#usn7}..][_usn4..] End.@usn6!,Any(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]).#usn8! Match @usn5=Shortestpath(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))),#usn8=Shortestpath(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))) Union All Return *,999 Starts With {``} As `4esn`,0.12[..0][..{``}] As usn1 Order By {`4esn`}[0xabc..][010..] Descending,`2esn` Desc Skip .e12 Is Not Null Match `1esn`=Allshortestpaths((($7)-[``?:#usn7|:``]-(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))),_usn4=(:``:usn1{@usn6:07 Is Null}) Detach Delete All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where .e1 Starts With #usn7 Starts With 1.e1) Starts With `4esn`(12[$`8esn`..{_usn4}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)"),
    octest_legacy:ct_string("Return Distinct $`4esn` Is Null Is Null Order By {#usn8} Starts With {`4esn`} Starts With 00 Desc,2.12 Is Not Null Is Not Null Asc Skip {`3esn`:.e1[@usn5]}[{@usn5:$`4esn`[.e0][9e0]}..None(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)] Limit $999 Starts With $usn1 Starts With {`3esn`} Union Merge #usn7=Allshortestpaths((`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`)) On Create Set `7esn`+=9e1 Starts With {_usn3} Starts With {_usn3} On Match Set Single(`4esn` In False[0.0..{@usn6}] Where 0 Ends With .e0).@usn6! =False[0e0],[{999}[`2esn`],{usn2} Is Not Null Is Not Null,_usn3 Ends With {`7esn`} Ends With 12].usn1! ={#usn7} In 010 In 12 Merge (usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) On Match Set Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})).`1esn`! =Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3)[{`3esn`:{#usn8} Is Not Null Is Not Null}..][Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`)..],[usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|{`5esn`} Ends With `2esn`].`` =$123456789 In $7 On Create Set `3esn` =2.12 Is Not Null Is Not Null,`2esn`($`1esn`[_usn3..],123.654 In {12} In ``).@usn6 =Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))] Load Csv From @usn5[123.654][12.e12] As #usn7 "),
    octest_legacy:ct_string("Return *,0x0 =~$`2esn` =~#usn7 As _usn3 Order By Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Ascending,0e0 Is Null Descending,12 Contains 9e1 Contains $`8esn` Desc Union Merge ((usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})) On Match Set usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]).usn1 =$12 Starts With $`3esn` Starts With $_usn3 On Match Set `1esn` =12.0 In $usn1 In True,`4esn`+=#usn7[..$`1esn`][..{`1esn`}],(:usn2{@usn5:usn1 =~1000 =~12})<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}).`7esn`! =9e0 Is Not Null Foreach(usn1 In 0xabc In 9e1| Unwind $999 In $999 As `` Delete (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..],Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00})))) Start `3esn`=Node:#usn8({_usn4}) Where .e0 Starts With {0} Starts With 0x0 Union Unwind $`1esn` Contains $#usn7 As `3esn` Match `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`8esn`=Allshortestpaths((((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`)))) Using Index `2esn`:`6esn`(`1esn`) Using Scan #usn7:_usn3 Where 00[$usn2..][0.12..] Merge _usn4=Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) On Create Set _usn4+=`3esn`[$`2esn`] On Create Set {``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}}.`3esn`! =07 Starts With 7,_usn3 =`2esn`[0Xa][{`8esn`}]"),
    octest_legacy:ct_string("Create Unique @usn6=(({`3esn`:_usn3 In 1.e1})),`3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Create @usn6=({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}),((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})) Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]})) Union All Start usn1=Relationship:_usn3(`6esn`='s_str') ,`2esn`=Rel:`4esn`(usn2='s_str') Delete 0xabc Is Not Null Is Not Null With  `3esn` =~12e12 As `4esn` Skip `` Contains True Limit #usn8 =~$@usn5"),
    octest_legacy:ct_string("Load Csv With Headers From $`1esn` Contains usn2 Contains 1.0 As usn1  With  $999 Starts With $usn1 Starts With {`3esn`} As _usn3 Order By 0.e0 Ends With {@usn5} Ends With 0e0 Descending Skip [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Union Foreach(`1esn` In _usn4 In usn2| With  *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Where `1esn` In {`4esn`} Remove Extract(#usn7 In {`5esn`} Ends With `2esn` Where {@usn5} =~$`2esn`|9e1 Ends With 0xabc Ends With @usn6).usn2!) Create Unique Allshortestpaths(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})),``=(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(`8esn` ) Start `6esn`=Rel:`4esn`(usn2='s_str') ,usn2=Relationship:`6esn`({#usn8})Where 0x0 Is Not Null Union Create ((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})),``=Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})) Load Csv With Headers From True Starts With `` Starts With 0.e0 As ``  Create Unique Allshortestpaths(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})),``=(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(`8esn` )"),
    octest_legacy:ct_string("Foreach(`` In {usn1} Starts With #usn8| Match usn2=((`7esn` :@usn6)-[_usn3:`5esn`|`3esn`]-(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})),`6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On #usn8,`3esn`,`1esn` Where {`7esn`}) With  0xabc In 9e1 Order By 9e1[`3esn`][$#usn8] Asc Delete Reduce(#usn8=12.0 =~0.12 =~999,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} Starts With 00) Is Not Null,{@usn6}[01234567..],Reduce(@usn5=0Xa[01..$`1esn`],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|0Xa Is Null Is Null) Ends With Reduce(usn2=12 =~$`5esn` =~$_usn3,`5esn` In `5esn` In 123.654 In {`6esn`}|$7[..999][..`2esn`]) Union All Return $usn2 Starts With {`1esn`} As `5esn`,{`2esn`} Contains 0.12 Contains 0.0,.e1[..`2esn`] Order By `4esn` Starts With 0x0 Desc With  123.654 Contains $`4esn` Contains .e1,$`3esn` Contains .e1 As `3esn` Skip `7esn` Ends With {@usn5} Ends With `5esn` Delete 01 Is Null Union All Foreach(@usn5 In @usn6 Is Null| Create Unique (usn1 :`4esn`:`3esn`)<-[?{`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6}]-({_usn4:7[`7esn`..usn2][$`5esn`..0X7]}),({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})) Load Csv From $999 =~$999 =~usn2 As `2esn`  Foreach(usn2 In 0X0123456789ABCDEF Is Not Null Is Not Null| With Distinct @usn5[_usn3..{12}][{999}..$7] As `4esn` Order By 0X7 Is Not Null Is Not Null Asc,{usn1} Starts With #usn8 Desc Skip Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null Limit 1e1 In 0xabc Where #usn7[9e1..$@usn5] Unwind Single(`4esn` In False[0.0..{@usn6}] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`]) In {_usn4:0.12 In `8esn`,@usn5:`7esn`[..{`8esn`}]} As usn1)"),
    octest_legacy:ct_string("Create Unique ``=Shortestpath(((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})))) Create Shortestpath((:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Create Unique #usn8=((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))"),
    octest_legacy:ct_string("Create `7esn`=((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union All Return {`8esn`} Is Null Is Null Create Unique _usn4=({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}),#usn8=((`3esn` {`8esn`:Null In {_usn3} In _usn3,`4esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})-[@usn5{@usn5:0 =~usn1,`1esn`:0.0[010..12.e12]}]->(`5esn` :`6esn`:`4esn`)) Union Match ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]}),(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}))) Using Scan ``:_usn3 Using Index `6esn`:``(_usn3) Where {0}[$usn2..0.e0][{`4esn`}..True]"),
    octest_legacy:ct_string("Create usn2=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) Union All Start `6esn`=Rel:#usn7(``={@usn5})  Create Unique usn2=Allshortestpaths(({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),((:@usn5:usn2))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `7esn`[`5esn`..][0.12..] As `5esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Unique @usn5=Shortestpath((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})),((`` :#usn8:#usn7)<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]}))"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath((({@usn5:0[...e1][..$usn2]}))) Create Unique @usn5=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})),Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6)))) Merge Shortestpath(((`5esn` {usn1:{``} =~{`2esn`} =~$`8esn`})<-[`6esn`:@usn5|``{usn2}]-(@usn5 )<-[:``* 010]-(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) On Match Set `3esn`+=$999[$12..][.e0..],[$#usn8[12e12][0X7],@usn6[..{usn2}][..{`5esn`}],{`1esn`}[`1esn`..123.654][{`4esn`}..$7]].`7esn`? =0xabc Contains False Contains {1000},[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {999} =~7 =~{usn1}].usn2 =@usn5[..$`7esn`][..$`6esn`] On Create Set Reduce(`6esn`=0xabc =~{_usn4},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|{_usn3} In 010 In 0.e0).usn1? =Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],`3esn`+=1.0 Ends With {`4esn`} Ends With {`2esn`} Union Delete All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),_usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]) Return _usn3 Ends With {`7esn`} Ends With 12 Order By {`1esn`}[..{_usn4}] Descending,0.12[$0..$``] Descending Skip $`6esn` Ends With {`4esn`} Limit $`8esn`[$usn1][0X7] Foreach(usn2 In usn2 Ends With 1.0 Ends With $@usn6| Create Unique #usn8=({`3esn`:{#usn8} Is Not Null Is Not Null})) Union All Foreach(usn2 In `7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True| With Distinct *,{@usn6} Starts With .e1 As `3esn`,{#usn8} =~$0 Order By 's_str' Ends With 's_str' Ends With $1000 Asc,'s_str' In {1000} In 010 Descending Skip #usn8[#usn8..]) Load Csv From 12.e12[..9e12][..1000] As `` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn7 Contains `` Contains 0.e0 As `7esn` "),
    octest_legacy:ct_string("Merge Shortestpath(((`4esn` )-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`))) On Create Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7 On Create Set usn2 =.e0 In 9e1 In $_usn3,`2esn`+={`7esn`},_usn3+={@usn6} Starts With .e1 Start `3esn`=Node:`1esn`(\"d_str\") ,`7esn`=Rel:#usn8({_usn4})Where {`2esn`}[{123456789}..$#usn7][_usn3..999] Union All Foreach(#usn7 In `3esn`[#usn8]| Optional Match usn2=Shortestpath((:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)),@usn5=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})) Using Join On @usn6,usn2,`5esn`)"),
    octest_legacy:ct_string("Merge (#usn7 :`7esn`:_usn4)<-[?:`5esn`|`3esn`* ..12]->(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]}) On Match Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7 Match _usn4=Shortestpath(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[`5esn`* 01234567..0Xa]-(`2esn` ))),usn2=Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) Using Index _usn4:`1esn`(`8esn`) Using Scan @usn6:`1esn` Start _usn3=Node( {usn1}) ,`5esn`=Rel:`5esn`({_usn3})Where 0 Is Not Null"),
    octest_legacy:ct_string("Start _usn4=Relationship:`7esn`(_usn3={0})  Union Detach Delete {`3esn`}[{@usn6}..2.12],Null[2.12][$``],Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) In [999[1000..]] Return Distinct [`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3][`2esn`(9e1 =~$`4esn` =~{usn2},`5esn` Starts With {999})..Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`])],Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `4esn`"),
    octest_legacy:ct_string("Load Csv With Headers From $@usn5[$7..@usn5] As _usn3  Create Unique `6esn`=(({`8esn`:`1esn` =~12.0})-[`2esn`:`5esn`|`3esn`* 7{`3esn`:1e1[1000]}]->(usn2 )<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})),(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}) Unwind (`2esn` :``:usn1)<-[`3esn`* 7{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]->(`` ) Is Not Null Is Not Null As `6esn` Union Start usn1=Rel:_usn4(_usn4='s_str') ,`1esn`=Node:_usn3(usn2=\"d_str\")Where ``[..`3esn`][..{@usn6}]"),
    octest_legacy:ct_string("Unwind `8esn`[12e12][_usn3] As `3esn` Union All Create @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))"),
    octest_legacy:ct_string("Optional Match usn1=Shortestpath((`4esn` {@usn5:`3esn`[#usn8]})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})) Using Scan @usn6:`1esn` Using Index @usn5:_usn4(`6esn`) Where 07 Starts With \"d_str\" Starts With $12"),
    octest_legacy:ct_string("Start usn1=Relationship:`7esn`(_usn3={0})  Start `4esn`=Relationship(,) ,`7esn`=Node:``({12})Where {`8esn`} Is Not Null Is Not Null Load Csv From [9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With  False[Count(*)] Skip 0xabc In $999 Unwind $_usn4[123456789..][$`6esn`..] As @usn5 Detach Delete Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)[..{@usn6:.e1 =~9e12}][..Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}])] Union Return *,None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] As _usn3 Skip 07[{_usn4}..{`4esn`}] Foreach(_usn3 In $0 Ends With `2esn`| Unwind {``}[2.12] As `5esn`) With Distinct 123.654 Contains $`4esn` Contains .e1,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2,12.0 Starts With 00 Starts With 9e1 As `6esn` Order By Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] Ascending,`2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Desc,123456789[$`5esn`] Desc Skip #usn7 Ends With {@usn5} Where 0 Is Null"),
    octest_legacy:ct_string("Start usn2=Rel:`7esn`(`3esn`={`4esn`}) ,`6esn`=Rel:#usn7(``={@usn5})Where $12 Is Null Detach Delete _usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc),All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 Ends With 0e0 Ends With $123456789)[Case $`2esn`[Null][{``}] When @usn6[..{usn2}][..{`5esn`}] Then 0 Contains 123.654 End..Shortestpath(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})))][{`5esn`:{@usn5} In 0X0123456789ABCDEF In 1000}..Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})))],#usn8 Ends With `5esn` Ends With _usn3 Union All With  False[Count(*)] Skip 0xabc In $999 Unwind $_usn4[123456789..][$`6esn`..] As @usn5 Detach Delete Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)[..{@usn6:.e1 =~9e12}][..Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}])]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 07 Starts With \"d_str\" Starts With $12 As usn1 Fieldterminator \"d_str\" Create Unique #usn7=Shortestpath((({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})))"),
    octest_legacy:ct_string("Delete $_usn3[@usn6..][{``}..] With Distinct *,#usn8[1e1..],$`3esn`[`3esn`..] Skip {_usn3} In 010 In 0.e0 Unwind False Contains _usn3 Contains {`5esn`} As #usn8 Union Return Distinct *,1.e1[$`3esn`] Detach Delete 0.e0[$`1esn`..] Optional Match (`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[usn1?:@usn5|``]-(:`1esn`{@usn5:{`4esn`} Is Null}),usn1=Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}))) Where $`8esn`[2.12][$_usn4]"),
    octest_legacy:ct_string("Foreach(@usn5 In {`8esn`} In 12 In 1e1| Start usn2=Node( {`6esn`}) ,`4esn`=Rel:_usn3({_usn3})Where 0.e0 Ends With {@usn5} Ends With 0e0 Start `5esn`=Node:`7esn`(`3esn`={`4esn`}) ,usn2=Node:`1esn`(@usn6={_usn3})Where 1.0) Unwind [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999 In $999][..{`1esn`:0xabc Ends With 1.0 Ends With $``}] As `7esn`"),
    octest_legacy:ct_string("Create Unique Shortestpath(((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})))),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Foreach(`7esn` In Reduce(`2esn`=$#usn8 In $0 In {`2esn`},@usn5 In 1.0 Starts With 12|`4esn`[usn2..]) Is Not Null Is Not Null| Detach Delete {`5esn`} Starts With 123456789 Starts With 07,123.654[2.12..][{`7esn`}..] Unwind 1.e1 Is Not Null As `5esn`) Return *,{1000} Is Not Null As ``,{1000} Is Not Null As `` Order By `1esn` In #usn8 Ascending,.e12 Contains {`6esn`} Contains .e12 Desc,$`3esn` Is Null Is Null Asc Skip $`1esn` Is Not Null Limit Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})]"),
    octest_legacy:ct_string("Detach Delete 12e12[..Count(*)][..$usn2],\"d_str\" Starts With $`` Starts With $usn1 Create Unique `7esn`=Allshortestpaths((:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(`8esn` :usn1)),Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))"),
    octest_legacy:ct_string("Optional Match `1esn`=(usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}),Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})))) Using Join On `3esn`,`6esn`,_usn3 Where {`7esn`} Contains 's_str' Contains 01 Load Csv With Headers From Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null As usn2  Merge Shortestpath(((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))) Union Create `1esn`=(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))),`5esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Create Unique `8esn`=(:``:usn1{usn2:'s_str' Is Not Null,`4esn`:$`1esn` Contains usn2 Contains 1.0})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null}),`1esn`=(((usn1 :`4esn`:`3esn`)-[@usn5* 0x0..7]-(`8esn` :_usn3:@usn6)<-[:`5esn`|`3esn`$usn1]-(#usn8 :@usn5:usn2))) Union Load Csv With Headers From $123456789[{`1esn`}][0.12] As `8esn` Fieldterminator \"d_str\" With Distinct $_usn4 Contains Null Contains $0 As `3esn`,[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null] In Filter(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) In [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where `4esn` Starts With 0x0],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By `1esn`[$`8esn`..][True..] Desc Skip `6esn` =~12.e12 =~123456789 Merge `1esn`=Shortestpath((:`4esn`:`3esn`{12})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) On Match Set {_usn3:$`3esn` Is Null Is Null}.usn2? =Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Union Optional Match _usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))),#usn7=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Using Join On #usn8,`7esn`,_usn3 Using Scan `2esn`:`3esn` Where 0Xa[$#usn8] Return Distinct 0xabc In {`6esn`} In $@usn6 As ``,0.e0 Starts With 0x0 Starts With {12} As _usn4,`5esn`[$usn1..$7] As `` Order By {`2esn`}[..{123456789}] Asc,#usn8 Is Null Desc,@usn6 Is Not Null Is Not Null Desc Skip {1000} Contains 0.e0 Contains $123456789"),
    octest_legacy:ct_string("Detach Delete 00[usn1..\"d_str\"][{0}..$`8esn`],Case When {1000}[..#usn7][..{#usn8}] Then 12.0 In $usn1 In True End[(:`4esn`:`3esn`{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[@usn5{@usn5:0 =~usn1,`1esn`:0.0[010..12.e12]}]->(`5esn` :`6esn`:`4esn`)..] Remove All(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 9e12 In 's_str' In $`4esn`).`3esn`?,Reduce(usn1=12.0 =~0.12 =~999,`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|$_usn3[$usn2..]).`4esn`! Union All Start ``=Node:`2esn`({1000}) Where Null Starts With {_usn4} Remove {_usn3:999 Starts With {``},@usn5:0Xa[01..$`1esn`]}._usn3! Union All Load Csv With Headers From [0X0123456789ABCDEF Starts With #usn7,``[{12}],{999} =~7 =~{usn1}] =~Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn7[999..``]) =~[usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`] As `5esn`  Delete 1.0 Starts With 12 With  Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],'s_str' Contains $_usn4 Contains $`7esn` As `8esn`,$`8esn` Contains {`7esn`} Contains $`4esn` As @usn6 Limit Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Start `1esn`=Node:usn2('s_str') ,usn1=Relationship:@usn6({`5esn`})Where 010 Delete 00[.e0][010] Load Csv With Headers From [usn1 In {usn2} Contains {123456789} Contains 0Xa Where {@usn6} Starts With 00|#usn7 Ends With {@usn5}] Is Null Is Null As `4esn` "),
    octest_legacy:ct_string("With  *,0X0123456789ABCDEF =~$@usn6 =~$`8esn`,Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) As _usn3 Order By 00 Is Null Asc,{#usn7} Contains \"d_str\" Contains {_usn4} Descending Skip 9e1 Contains {#usn8} Contains `5esn` Limit 's_str' Is Not Null Merge @usn6=(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]}) On Create Set ['s_str' Ends With 's_str' Ends With $1000].`6esn` ={7}[{`7esn`}][$12] On Match Set usn2 =.e12[0.0..][$#usn8..]"),
    octest_legacy:ct_string("With Distinct {`8esn`} Is Not Null Is Not Null As `5esn` Skip None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] Load Csv From 01234567 =~{@usn5} =~1e1 As #usn8  Unwind [$`4esn` =~{usn1}] Is Not Null As `3esn` Union With Distinct *,usn1 =~1000 =~12 As `3esn` Order By {7} In 9e1 Asc,Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End Ascending,{`1esn`}[01234567..][@usn5..] Desc Limit 0[`2esn`..12] Unwind 0xabc Ends With 1.0 Ends With $`` As `` Create Unique (:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}})"),
    octest_legacy:ct_string("Create Unique `8esn`=(:@usn5:usn2{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null})-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999}),`3esn`=(({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1)) Return Distinct `5esn` In 123.654 In {`6esn`} As `2esn`,9e1 =~$`4esn` =~{usn2},{`2esn`}[{123456789}..$#usn7][_usn3..999] As `7esn` Order By 1000 Contains 12.e12 Ascending,`1esn`[..{`4esn`}][..{0}] Asc,12 Contains 9e1 Contains $`8esn` Ascending Skip Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] Limit {`1esn`} Is Null Is Null Union Match @usn5=Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})) Using Scan #usn8:`1esn` Using Index usn2:usn1(#usn7) Where $0 Ends With 12.0 Ends With _usn4"),
    octest_legacy:ct_string("With  .e0[.e0..][$``..] As `8esn`,usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null,True Contains $123456789 Contains {`2esn`} As @usn5 Order By 999 Desc Limit {`7esn`} Ends With Count(*) Ends With {`5esn`}"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths(((#usn8 {`2esn`:'s_str' =~0xabc =~$@usn5,`6esn`:$@usn5 Starts With 1e1})<-[_usn4?:`1esn`|``* 0X7..{`5esn`:123.654 Starts With `8esn` Starts With @usn5,`4esn`:1000 Contains 12.e12}]-(`8esn` :_usn3:@usn6)<-[?* 123456789..999$12]-(:@usn6{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))) Load Csv With Headers From $`4esn` Is Null Is Null As usn1 Fieldterminator \"d_str\" Union Return Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Skip `7esn`[{12}] Limit None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null) Foreach(#usn8 In (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..]| Load Csv With Headers From $999[$@usn6..] As `4esn` )"),
    octest_legacy:ct_string("Optional Match Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Using Join On #usn7,`1esn`,_usn4 Using Index `8esn`:#usn8(usn1) Where `7esn`[..{`8esn`}] Foreach(`7esn` In $@usn5 =~999 =~0e0| With Distinct *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3 With Distinct 0xabc Is Null As _usn4 Limit 0.e0 In 9e0 In 0e0 Where 9e12 Contains {`4esn`}) Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]}))"),
    octest_legacy:ct_string("Foreach(`` In $12 Contains .e1| Create `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`8esn`=Allshortestpaths((((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`)))) Create Unique (({usn2:'s_str' Is Not Null,`4esn`:$`1esn` Contains usn2 Contains 1.0})),_usn3=(`3esn` {`1esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})<-[?* ..999]->(_usn4 :usn1{`6esn`:{_usn4}})-[usn2?:@usn6* 0x0..7]->({#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}))"),
    octest_legacy:ct_string("Load Csv With Headers From {1000}[07][{usn1}] As _usn4 Fieldterminator \"d_str\" Union Load Csv From (#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null As `5esn` Fieldterminator 's_str' Start _usn4=Node:_usn3({_usn3}) Where {@usn5}[{``}][{_usn4}] Return $999 Starts With $usn1 Starts With {`3esn`} As _usn3,$@usn6[..{`6esn`}][...e0] As #usn8,`1esn` In {999} In $123456789 As `3esn` Order By Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))] Descending"),
    octest_legacy:ct_string("Return Distinct *,$``[..{_usn4}][..{@usn6}] As `3esn` Skip $usn2 Is Not Null Limit Reduce(#usn8=12.0 =~0.12 =~999,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} Starts With 00) Starts With {#usn7:{999} Ends With 1000 Ends With 1e1} Starts With Single(#usn8 In True In `8esn` Where Count(*) =~0e0 =~0x0) Create ((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`)),`7esn`=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1})) Unwind {`1esn`}[`1esn`..123.654][{`4esn`}..$7] As `3esn` Union Return Distinct $`6esn` In $#usn8 Limit `1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] Remove {`5esn`:{#usn7} =~{usn1}}.usn2,Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {`6esn`} Is Not Null|999 =~0x0 =~2.12).`7esn`!"),
    octest_legacy:ct_string("Match Shortestpath((`5esn` )-[_usn3?:`6esn`|:`7esn`]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})),(`4esn` :usn1)<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]}) Using Index `2esn`:#usn8(@usn5) Where 01234567 Is Not Null Start @usn6=Rel:`5esn`({_usn3}) ,``=Node:`2esn`({1000})Where False[Count(*)] Union All Match @usn6=Shortestpath(((({`3esn`:123456789 Is Not Null})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[:`2esn`{_usn3:$@usn5[`2esn`..][#usn7..]}]-({`3esn`:_usn3 In 1.e1})))),#usn8=((`7esn` )-[:usn1|:@usn6{`4esn`:{_usn4} In 9e0,_usn4:$1000[123.654]}]-(`` {`2esn`:{``}[$@usn5]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Using Index `3esn`:`3esn`(#usn8) Unwind (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null As `7esn` With Distinct {7}[{`7esn`}][$12] As `8esn`,#usn8 Ends With `5esn` Ends With _usn3,Reduce(usn2=0xabc In {`6esn`} In $@usn6,`7esn` In @usn5[01..`6esn`]|#usn7[$7..{_usn4}]) =~Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End As #usn8 Order By $1000[999..][0Xa..] Descending,0X7 =~$`6esn` Desc,True =~`5esn` Ascending Limit {usn1}[12e12..`6esn`][`7esn`..$`6esn`]"),
    octest_legacy:ct_string("Remove None(_usn4 In .e12 Is Not Null Where 999 Is Not Null Is Not Null).``!,exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0).`5esn`?,{`1esn`:$usn1 Is Not Null Is Not Null}.`2esn` Return Distinct *,$1000[123.654] As `1esn`,False =~9e0 =~{`5esn`} Order By $usn2 =~`6esn` =~{usn1} Asc Skip 7 Is Null Limit `1esn`[..{`4esn`}][..{0}] Merge (`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]->(:usn2{@usn5:usn1 =~1000 =~12})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}) Union With  *,$usn2 Starts With {`1esn`} As `1esn`,{`8esn`} Is Null Is Null As #usn8 Skip usn2[$7..``][$``..$_usn3] Limit Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789} Where \"d_str\" Ends With 0e0 Ends With {usn2} Optional Match ((@usn5 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[?* 0X7..{`7esn`:$@usn6[..{`6esn`}][...e0]}]-(`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})),`8esn`=Allshortestpaths(((`8esn` )<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}))) Using Index usn2:#usn8(_usn3) Using Index usn2:`4esn`(`5esn`) Where {_usn3}[{#usn7}] Union All With Distinct {0}[$usn2..0.e0][{`4esn`}..True],Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)] As `1esn` Limit $usn1 Is Not Null Is Not Null Where 0[0xabc] Remove Allshortestpaths(((`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[usn1?:usn2|_usn3* 1000{#usn8:00 Is Null}]-({`8esn`:12e12[..1.e1][..$12]}))).`1esn`!,@usn6:#usn8:#usn7,(`` {_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[@usn5?:`3esn`|``* 01..]->(#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`}).`8esn`! Load Csv From Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) Contains [{`1esn`}[`1esn`..123.654][{`4esn`}..$7],True Starts With 2.12 Starts With {123456789},123456789 Is Not Null Is Not Null] As `5esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind {`7esn`}[..0xabc][..0e0] As `8esn` With  *,$#usn7 =~`5esn` As _usn4,{@usn5}[{`6esn`}..$0][1000..$1000] As `4esn` Order By usn1[#usn8..0.0] Ascending,{`7esn`}[..0xabc][..0e0] Asc,Reduce(#usn7=$999 In $999,#usn8 In True In `8esn`|$#usn8 Is Not Null) Is Not Null Is Not Null Desc Skip [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Limit 0[...e1][..$usn2] Union All Unwind Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) As #usn7 Remove [@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].`4esn`!"),
    octest_legacy:ct_string("Remove {``:$`7esn` Ends With $1000 Ends With {999}}.usn2!,Single(@usn5 In 1.0 Starts With 12 Where .e0 Starts With usn2).`1esn`!,[#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6].@usn6? Remove [00 Starts With 12 Starts With 0e0].`2esn`,None(@usn5 In 1.0 Starts With 12 Where 12.0 Ends With 0e0 Ends With $123456789).#usn8,Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))).`5esn`! Remove Reduce(`8esn`='s_str' Is Not Null,#usn7 In {`5esn`} Ends With `2esn`|$#usn8 Is Not Null).`5esn`!,[`3esn` Contains {`6esn`},{@usn5}[01234567][{1000}],$12[`6esn`][$#usn8]].`4esn`?,{`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]}.`6esn`! Union All Load Csv With Headers From 0xabc Is Not Null Is Not Null As #usn7 "),
    octest_legacy:ct_string("Merge #usn7=Allshortestpaths((({usn1:$@usn5[`2esn`..][#usn7..],@usn5:{1000}[..#usn7][..{#usn8}]})-[]->(:usn1)-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) On Match Set (`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[?:`6esn`|:`7esn`* 0x0..7{usn2:usn1 =~1000 =~12}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 {_usn4:1000 Starts With {7} Starts With $7}).usn1! =$@usn6[#usn8..] Load Csv With Headers From {#usn7} Contains \"d_str\" Contains {_usn4} As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4)).`7esn`!,Reduce(``=$999 =~$999 =~usn2,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|{_usn4} In 9e0).usn2?,Single(#usn7 In {`5esn`} Ends With `2esn` Where {@usn5} =~$`2esn`)._usn4? Create `7esn`=Shortestpath((((`5esn` :@usn6)-[?:usn1|:@usn6* ..12$`6esn`]->({#usn7:0xabc In 9e1,`6esn`:$999 =~$999 =~usn2})-[``?:#usn7|:``]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})))) Union Optional Match ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]}),(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}))) Using Join On `5esn`,`2esn` Using Index _usn3:`8esn`(#usn8) Where True Starts With 2.12 Starts With {123456789} Create Unique usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),(_usn3 :`2esn`) Merge ((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]}))) On Match Set (`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})<-[`2esn`?]->(:#usn8:#usn7{`7esn`})<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}).@usn6? =$@usn6 Ends With {`6esn`} Ends With 0.e0,`1esn` =Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]] Union Remove None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e0 Starts With usn2).@usn5! Start `2esn`=Relationship:`8esn`({``}) Where `3esn` Starts With @usn5 Starts With {`4esn`} Remove [1e1 In 0xabc,$999[12]].`4esn`?,None(usn1 In {usn2} Contains {123456789} Contains 0Xa).@usn5,All(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12).`2esn`!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)[{#usn8:{``} Starts With True Starts With True,`7esn`:{`2esn`}[..``]}..] As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove `4esn`:`3esn`:@usn5,Any(`5esn` In `5esn` In 123.654 In {`6esn`} Where usn2[..$`8esn`][..``]).usn2 Union All Return $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Limit `2esn` In `5esn` Foreach(@usn6 In {7}[{`7esn`}][$12]| Create ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`))) Foreach(`2esn` In {`4esn`}[usn1..``]| With Distinct {usn1}[..{#usn7}],{123456789} Ends With False Ends With {@usn6} As usn1 Limit 0X7[{12}..$``] Where `3esn` Starts With @usn5 Starts With {`4esn`} Detach Delete {``} Contains 12e12 Contains Null)"),
    octest_legacy:ct_string("Load Csv From {#usn7}[$usn2] As `8esn`  With  *,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Limit #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] Union Start `2esn`=Node:@usn5('s_str') ,`7esn`=Relationship( {7}) With  Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip {_usn4} Ends With 12.0 Ends With $@usn6 Foreach(usn2 In {`3esn`:0 =~usn1,usn2:010 Ends With 123456789 Ends With .e0} In Case When {_usn3} In 010 In 0.e0 Then 0xabc =~{`8esn`} =~{_usn3} When 123456789 Is Not Null Is Not Null Then 9e12 Contains {`4esn`} End In Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`)| Remove Case When $7[0X0123456789ABCDEF] Then #usn8 Ends With 0Xa When {12} Is Null Then $#usn8 Is Not Null Else 123.654 In {`6esn`} In `6esn` End.@usn5) Union All Return Distinct *,Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},{#usn8:9e1 Ends With 0xabc Ends With @usn6} Is Null Is Null As usn1 Order By $`3esn`[$_usn4][True] Desc,[False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending,Filter(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5])[All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..] Asc Skip Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Limit _usn3 In 1.e1 Load Csv With Headers From 0e0 In .e1 As `6esn` Fieldterminator \"d_str\" With  *,$``[..{_usn4}][..{@usn6}] As `3esn` Where 01234567 Is Not Null"),
    octest_legacy:ct_string("Create usn2=(`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4),#usn7=Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))) Create Allshortestpaths(((:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0}))) Merge Allshortestpaths(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}}))) On Match Set Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).`2esn` =0.12 In `8esn`,{usn2:usn1 Ends With $@usn6 Ends With $1000}.`5esn`? =#usn7[9e1..$@usn5],`4esn`(9e1 =~$`4esn` =~{usn2}).``? =`3esn`[Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]|1e1 In 0xabc)..] On Match Set `8esn` =$``[..`4esn`][..0] Union All Remove Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End.usn2!,{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}.`3esn`,(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}}).`5esn`? Foreach(`7esn` In #usn8[1e1..]| Remove (usn2 :`6esn`:`4esn`)<-[?* ..999]->(:``:usn1)<-[`2esn`:`5esn`|`3esn`* 07..{_usn3:0X7 =~$`6esn`,`2esn`:999[$_usn3][@usn6]}]->(`` :#usn8:#usn7)._usn3,Case $0 Starts With `2esn` Starts With {`1esn`} When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else True Starts With 2.12 Starts With {123456789} End.#usn7?,None(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]).`7esn`!)"),
    octest_legacy:ct_string("Optional Match usn1=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1})) Using Join On #usn7,`6esn` Using Scan `2esn`:`5esn` Union Unwind [@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null As `2esn` Remove All(`4esn` In False[0.0..{@usn6}] Where 12.0 Starts With 00 Starts With 9e1).`8esn`!,Case 0x0[{`1esn`}] When 1e1[1.e1..] Then 999[$_usn3][@usn6] End.#usn7 Union Optional Match ((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan usn2:@usn6 Using Scan @usn5:`8esn` Create Unique `7esn`=(({`5esn`:9e0 =~$usn1 =~{@usn6}})),`4esn`=(((`2esn` :_usn4:`1esn`{#usn7:'s_str'[9e12..][12e12..],``:$`1esn` Contains usn2 Contains 1.0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[@usn5?:`8esn`|:_usn3* 0]->(_usn3 :@usn5:usn2))) Optional Match `6esn`=((:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]})) Where 0 =~usn1"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] As `8esn` Fieldterminator \"d_str\" Unwind #usn7 As _usn3 Delete $`7esn` In $999 In {123456789},12.0 Ends With 0e0 Ends With $123456789"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From .e0 Is Not Null Is Not Null As #usn8 Fieldterminator 's_str' With Distinct 0xabc Is Null As _usn4 Limit 12[$`8esn`..{_usn4}] Where $`2esn` Contains `5esn` Contains .e1"),
    octest_legacy:ct_string("Merge `7esn`=Shortestpath(((usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`3esn`?:`7esn`]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))) On Match Set `1esn` =`4esn`[$999..][1.0..] On Match Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])] Union Foreach(`5esn` In $usn1 Ends With {123456789} Ends With 1.e1| Unwind $`2esn`[usn2][#usn7] As `4esn`) Detach Delete 9e1 Is Not Null,Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Return `4esn` In \"d_str\" In $``,usn1 Contains `6esn` Contains 1000,{`5esn`}[0X7..] As `5esn` Order By 123456789[{@usn6}..][9e0..] Ascending,9e1 Contains {#usn8} Contains `5esn` Ascending,`4esn`[$999..][1.0..] Asc Skip usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Limit 0X0123456789ABCDEF Starts With #usn7 Union Load Csv With Headers From {`1esn`}[\"d_str\"][{1000}] As `2esn` "),
    octest_legacy:ct_string("Unwind {#usn7} Is Not Null As `1esn` Load Csv With Headers From 12.0 Is Null Is Null As `8esn` Fieldterminator 's_str' Remove [@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].`4esn`!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 's_str' Ends With 's_str' Ends With $1000 As @usn5 Fieldterminator \"d_str\" Delete False[Count(*)],$`8esn`[..`6esn`][..#usn7],All(_usn4 In .e12 Is Not Null Where 0X0123456789ABCDEF Is Null) Ends With [999[1000..]] Ends With [usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]] Optional Match `5esn`=Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})))),`5esn`=Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})))) Where $usn1[0X0123456789ABCDEF...e12]"),
    octest_legacy:ct_string("Create Unique (({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})) Match `8esn`=Shortestpath((_usn4 {`2esn`:0[{`4esn`}..],`6esn`:{`2esn`}[..{123456789}]})-[#usn7:_usn3|:`6esn`{@usn6:{12} Is Null}]-({_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[`7esn`?* 0xabc..01234567]-(`1esn` {_usn3:7 Is Null Is Null})),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On usn2,`2esn`,`4esn`"),
    octest_legacy:ct_string("Create Unique ((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})),_usn4=Allshortestpaths((((`6esn` {#usn7:999[1000..]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})))) Merge Shortestpath((((_usn3 :`5esn`)<-[?:usn2|_usn3* 07..]-({`3esn`:_usn3 In 1.e1})<-[?:@usn5|``* 123456789..999{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})))) On Match Set {`8esn`:Null In {_usn3} In _usn3,`4esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]}.usn1? =$`8esn` Starts With $123456789,`8esn` =#usn7 Contains $#usn8 Contains {`4esn`} Start `7esn`=Node:`6esn`({#usn8}) "),
    octest_legacy:ct_string("With  usn1[#usn8..0.0] Order By Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Ascending,0xabc Is Not Null Is Not Null Asc Where {`6esn`}[_usn3] Union Match Shortestpath(((@usn5 :`3esn`:@usn5{`1esn`:{#usn7} =~$0})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]}))),(:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Using Index #usn8:`2esn`(`3esn`) Where 12[True]"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6)))) Unwind $123456789 Ends With 1e1 As #usn8 Start `5esn`=Relationship:``(``=\"d_str\") ,_usn4=Relationship:`3esn`(#usn8={`5esn`})Where @usn5[..$`7esn`][..$`6esn`] Union All Remove {#usn8:$999 In $999}.`7esn`?,``({`1esn`}[\"d_str\"][{1000}]).`8esn`? Detach Delete 0e0 Is Null,`8esn`($999 Is Not Null Is Not Null,$`5esn` =~`1esn` =~123.654),Count(*) In {`4esn`} Union With Distinct *,$`` Ends With _usn3 Ends With $@usn5 As `7esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip 0.e0[True..][True..] Limit {`5esn`}[$1000..`1esn`] Where $#usn8 In $0 In {`2esn`} Foreach(`2esn` In `3esn` Contains {`6esn`}| Delete `4esn` Is Not Null,0xabc Starts With 1.0 Starts With {`2esn`})"),
    octest_legacy:ct_string("Match Shortestpath(((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]}))) Where {usn1}[12e12..`6esn`][`7esn`..$`6esn`] Unwind Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}] As @usn6 Optional Match _usn3=Shortestpath((((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6)))),Shortestpath((((_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})))) Using Join On `7esn`,_usn3,`3esn` Using Index `2esn`:#usn8(@usn5) Where $`3esn`[$_usn4][True] Union Detach Delete Shortestpath((:`6esn`:`4esn`$7)-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]}))[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|0x0 Is Not Null]][(`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})-[?* ..999]-(#usn8 {``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07})<-[`7esn`:`5esn`|`3esn`{`6esn`:1e1[usn1..$123456789][Count(*)..False],`4esn`:$#usn7 =~Count(*) =~@usn5}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})],#usn8 Ends With 0Xa,Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..]"),
    octest_legacy:ct_string("Load Csv From $@usn5 =~999 =~0e0 As `1esn` Fieldterminator \"d_str\" Delete Case `4esn` Starts With 0x0 When $#usn7 Is Not Null Is Not Null Then {`5esn`} Contains 0 End[[#usn7 In $@usn6 Contains 0 Contains 0 Where `6esn` Contains `6esn` Contains 9e1|12[True]]][Reduce(usn2=Count(*) In {`4esn`},@usn5 In 07[{_usn4}..{`4esn`}]|0xabc Ends With 1.0 Ends With $``)] Union All Create Unique Allshortestpaths(((`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]})-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[usn1?:`8esn`|:_usn3]->(_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`}))) Match (usn1 :`4esn`:`3esn`)-[* 0X0123456789ABCDEF]-(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]}) Using Index `5esn`:`1esn`(@usn6)"),
    octest_legacy:ct_string("Detach Delete `1esn` In `7esn` In {`7esn`},$#usn7[$``..{`7esn`}],1e1 Ends With {usn1} Ends With `2esn` Unwind #usn7 Contains $#usn8 Contains {`4esn`} As `6esn` Create Unique Allshortestpaths(({_usn4:{@usn5} In $`5esn`})) Union All Start usn2=Relationship:`4esn`(\"d_str\") Where 0.0[010..12.e12] Remove {#usn8:$999 In $999}.`7esn`?,``({`1esn`}[\"d_str\"][{1000}]).`8esn`? Union All Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6! With Distinct Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Order By $`7esn` Ends With $1000 Ends With {999} Asc,{999}[{0}][$#usn8] Asc"),
    octest_legacy:ct_string("Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})))) Match @usn6=Allshortestpaths(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))),`3esn`=((@usn5 :`6esn`:`4esn`)) Using Scan `8esn`:@usn6 Where $`8esn`[2.12][$_usn4] Union All Create Unique `3esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})),#usn8=((@usn6 {@usn6:{0}[$0][$#usn7]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) Merge `3esn`=Shortestpath(((@usn5 :`3esn`:@usn5{`1esn`:{#usn7} =~$0})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]}))) On Create Set (_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}).`4esn`? =usn2 Contains \"d_str\" Contains 123.654 Unwind 1000[{`8esn`}..][$_usn3..] As `6esn`"),
    octest_legacy:ct_string("Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Foreach(_usn4 In 010 Ends With 123456789 Ends With .e0| Unwind $#usn7 Is Not Null Is Not Null As _usn3) Optional Match `1esn`=(usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}),Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})))) Using Join On `3esn`,`6esn`,_usn3 Where {`7esn`} Contains 's_str' Contains 01"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 1e1[usn1..$123456789][Count(*)..False] As `7esn` Fieldterminator \"d_str\" Remove Case When 123456789 Is Not Null Is Not Null Then 9e12 Contains {`4esn`} End.#usn7!,`6esn`:`7esn`:_usn4"),
    octest_legacy:ct_string("Load Csv From Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] As `2esn`  Union All Remove Extract(_usn4 In .e12 Is Not Null Where $#usn7 Is Null|0[{`4esn`}..]).`5esn`?,[#usn7 In {`5esn`} Ends With `2esn` Where 9e1[..2.12][..@usn6]|$`1esn` Ends With {1000} Ends With $`8esn`].@usn6?,[`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}|0x0[9e0..][$@usn5..]].#usn8 With  $#usn8 In {12} In $`4esn`,`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True,00[{999}..$#usn7][$0...e0] Order By {#usn8:9e1 =~{#usn7}} In Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 Contains {`6esn`} Contains .e12) In Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {``} =~{`2esn`} =~$`8esn`|True In `8esn`) Descending,`1esn` In 12.e12 In $#usn7 Desc,{#usn8} =~$0 Asc Limit `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Remove Reduce(`6esn`=0xabc =~{_usn4},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|{_usn3} In 010 In 0.e0).usn1?,Case When 0Xa[..0.12] Then Null[..010][..$@usn6] Else {`4esn`}[..$#usn7] End.#usn7,Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True In `8esn`)._usn4! Union All Create Unique `3esn`=((@usn5 :`6esn`:`4esn`))"),
    octest_legacy:ct_string("Create usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),#usn8=Shortestpath(((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789}))) Return Distinct *,None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null As _usn3,False[0.0..{@usn6}] As `` Order By Allshortestpaths((((:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]})))) Is Null Is Null Desc,Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null Asc,.e0[.e0..][$``..] Descending Limit None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`) Ends With [_usn4 In .e12 Is Not Null Where $`8esn` Contains 12] Ends With All(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`})"),
    octest_legacy:ct_string("Detach Delete 1e1[999..],$#usn7 Contains {usn2} Union All Return _usn3 Ends With {`7esn`} Ends With 12 Order By {`1esn`}[..{_usn4}] Descending,0.12[$0..$``] Descending Skip $`6esn` Ends With {`4esn`} Limit $`8esn`[$usn1][0X7] Load Csv With Headers From 9e0 Is Not Null Is Not Null As `5esn`  Create @usn6=(({`3esn`:_usn3 In 1.e1})),`3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $12 Contains .e1 As usn2 "),
    octest_legacy:ct_string("Create Unique _usn4=(:``:usn1{@usn6:07 Is Null}),`3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))"),
    octest_legacy:ct_string("Return Distinct *,`4esn` Is Not Null As _usn4,[`3esn`[#usn8],_usn4 Ends With $`3esn` Ends With {`3esn`},1e1[..12e12]][..Shortestpath((({usn1:$@usn5[`2esn`..][#usn7..],@usn5:{1000}[..#usn7][..{#usn8}]})-[]->(:usn1)-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`})))][..Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)] As @usn6 Order By {1000} Starts With {_usn4} Asc,{0}[$usn2..0.e0][{`4esn`}..True] Desc,0[`7esn`..][$12..] Ascending Return Distinct *,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn`,{#usn8}[False..{usn1}][$`6esn`..0Xa] Skip $7[{`7esn`}][12.0] Merge `7esn`=((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) On Create Set `6esn` ={7}[{`7esn`}][$12] On Match Set {_usn4:`1esn` In 12.e12 In $#usn7}.`8esn`? =0[`7esn`..][$12..],`8esn` =$999 In $999,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End.@usn6! =usn2[{7}..#usn8][{12}..{``}] Union Merge Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})-[?{`5esn`:9e0 =~$usn1 =~{@usn6}}]->(_usn4 :_usn3:@usn6)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})))) On Match Set _usn4+=`3esn`[$`2esn`] On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] Unwind [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) As `8esn` Match ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Using Join On #usn8,_usn3 Using Scan `7esn`:#usn7 Where 01234567 Is Not Null"),
    octest_legacy:ct_string("Unwind (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12} As @usn6 Foreach(#usn7 In 0 Is Null Is Null| Create #usn7=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})))) Match Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Using Index @usn5:_usn3(``) Where 9e1 Is Not Null Union Merge `5esn`=((`4esn` :`6esn`:`4esn`)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->(usn2 $`2esn`)) On Create Set `5esn`+=07[{_usn4}..{`4esn`}] Match `6esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Create Unique ``=(:`7esn`:_usn4{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})<-[_usn3?:_usn3|:`6esn`]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Union Foreach(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2}| Return {usn1}[..{#usn7}] As `5esn`,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As #usn8,00[0xabc..][`8esn`..] Order By usn2[..$`8esn`][..``] Desc,@usn5 In 00 Descending Limit $7[\"d_str\"][`8esn`]) With  *,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Limit #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] Start usn2=Node:#usn8(`4esn`=\"d_str\") Where 123456789 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Return Distinct *,0x0 Is Null As `4esn`,9e1[`3esn`][$#usn8] As `3esn` Order By None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null)[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..])..][Allshortestpaths(((:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)-[`7esn`?:`3esn`|``]->(#usn7 :`8esn`:_usn3{@usn6:9e1[010..][`5esn`..],`3esn`:0.e0[$`1esn`..]})))..] Desc,@usn5 In 00 Descending Delete 00 Starts With `6esn` Starts With $1000 Union All Delete #usn8[1e1..],`8esn`[1000..#usn8],Null =~`4esn` =~9e0 Delete 01234567[``..$`1esn`][True..$#usn7],{@usn5}[1000]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {`4esn`} Ends With 1e1 Ends With @usn6 As `1esn`  Remove Reduce(usn1=Count(*)[0.0..{12}][{`8esn`}..{`8esn`}],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|12.e12 =~$`7esn` =~{``}).`5esn`?,Extract(#usn7 In {`5esn`} Ends With `2esn` Where `5esn` =~@usn6 =~$`7esn`|{`6esn`} Starts With $1000).usn2! Start `1esn`=Node:_usn4(\"d_str\") ,`7esn`=Rel:#usn7(`3esn`={_usn4})"),
    octest_legacy:ct_string("Start _usn4=Rel:`7esn`(`6esn`=\"d_str\") ,`7esn`=Node:`6esn`({#usn8})Where 00[usn1..\"d_str\"][{0}..$`8esn`] Load Csv From `1esn`(Distinct)[..Allshortestpaths((:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[``?{_usn4:$``[{#usn7}..{usn2}],`3esn`:$12 Contains .e1}]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))] As @usn5 Fieldterminator 's_str' Merge ((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`})) On Match Set `1esn`+=Case #usn8 Starts With {_usn3} Starts With 123.654 When $`2esn`[Null][{``}] Then $@usn6[..{`6esn`}][...e0] End[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 Ends With 0 Ends With {`6esn`})..(@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(`3esn` :@usn6)<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})],#usn8+={999} Is Not Null Is Not Null,Case @usn6[2.12..$123456789][$`8esn`..{123456789}] When @usn6 Contains {0} Then Count(*) Is Not Null Is Not Null When 0[0xabc] Then {`4esn`}[0xabc..][010..] End.`3esn`? ={@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12}[..7][.._usn4(Distinct)]"),
    octest_legacy:ct_string("Remove (`1esn` {`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]})<-[usn2:#usn8|_usn3]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`).@usn5! Unwind Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As _usn4 Foreach(`8esn` In _usn4($`6esn`[`5esn`..][$12..])[Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))][All(`5esn` In $999[12] Where $`8esn` Contains 12)]| Return 0Xa Is Null Is Null Order By {`8esn`}[{`6esn`}..1.e1] Ascending)"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567}))),(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}) Using Scan #usn7:@usn5 Where 01234567 Starts With 01 Starts With 1.e1 Union Optional Match `5esn`=((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` ))),`8esn`=Allshortestpaths(((({`4esn`:01234567[usn1]})-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn1?* 0X7..{`4esn`:12 =~{#usn7},_usn3:`3esn` Starts With @usn5 Starts With {`4esn`}}]-(:#usn8:#usn7{`7esn`})))) Using Join On @usn5,@usn5,`` Using Index @usn5:_usn3(``) Merge ((usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[#usn7:`5esn`|`3esn`]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})) On Match Set {usn1:0.e0[$`1esn`..]}._usn3? =Allshortestpaths(((#usn7 {`7esn`:010 Ends With 123456789 Ends With .e0,`7esn`:$`8esn` Starts With $123456789})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))[..{#usn8:0.0}][..{`4esn`:`3esn` Is Null Is Null}],_usn4+=\"d_str\"[Count(*)..],`7esn` =01234567 =~{@usn5} =~1e1 On Match Set `4esn` =12[{_usn4}..$_usn3][{`6esn`}..`3esn`],@usn6($usn1 Is Not Null Is Not Null,$123456789 In $7)._usn4? =01[123456789..][$_usn4..],`8esn`+=$12[0xabc..][12e12..] With Distinct Null[.e12..{#usn8}],9e1[`3esn`][$#usn8] As `3esn` Order By 0Xa Is Null Is Null Ascending,{`4esn`} Contains \"d_str\" Asc,01234567 =~{usn1} =~$123456789 Ascending"),
    octest_legacy:ct_string("Load Csv From 07 Starts With \"d_str\" Starts With $12 As usn1 Fieldterminator \"d_str\" Union Load Csv With Headers From Filter(@usn5 In 1.0 Starts With 12 Where 0.0 Starts With $`6esn`) Ends With (#usn7 :usn1)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2) As @usn6  Unwind 12.0 In $usn1 In True As `8esn`"),
    octest_legacy:ct_string("Create `2esn`=(_usn4 :_usn4:`1esn`) Return Distinct *,{7}[$@usn5][123456789] As @usn5,Case When $#usn7 Is Null Then $`1esn`[0..{_usn3}] When 999 Starts With {``} Then 0.e0 Ends With $`8esn` Else `3esn` Is Null Is Null End Is Not Null As `` Skip `8esn`($999 Is Not Null Is Not Null,$`5esn` =~`1esn` =~123.654) Detach Delete Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))],{#usn7} Is Null Is Null,None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null) Union All Match ((`7esn` )<-[#usn8:``* 00..999{usn2:{@usn5} Contains 0X7 Contains 1e1}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]})) Using Join On _usn3"),
    octest_legacy:ct_string("Foreach(#usn7 In 0 Is Null Is Null| Create #usn7=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})))) Delete {0}[123456789..$`8esn`],$`8esn` In {`2esn`} In $0 Optional Match ((:usn2{usn1:1.e1 =~123.654 =~$`3esn`})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})),@usn5=(:@usn6) Using Index `2esn`:#usn8(@usn5) Using Scan `5esn`:`` Union All Create Unique Allshortestpaths(((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]})))"),
    octest_legacy:ct_string("Delete {1000}[`2esn`..9e12][{`7esn`}..{`3esn`}],{999} Ends With 12.0 Load Csv With Headers From {@usn6} In $999 In 01234567 As `` Fieldterminator 's_str' Unwind exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End In None(usn2 In 999[{123456789}..999] Where `5esn` In 123.654 In {`6esn`}) As `6esn`"),
    octest_legacy:ct_string("Delete Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}]"),
    octest_legacy:ct_string("Remove Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0.0).`7esn`!,(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1}).`2esn`?,usn2:`8esn`:_usn3 Union All Unwind 9e0 Is Not Null As _usn3 Load Csv From [usn2 In 999[{123456789}..999]][[$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]..][{usn2:#usn7[$7..{_usn4}],`7esn`:$`1esn` Ends With {1000} Ends With $`8esn`}..] As `8esn` Fieldterminator \"d_str\" Merge Shortestpath(((`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:``]-(`2esn` :#usn7:`6esn`{`7esn`:0xabc =~{`8esn`} =~{_usn3}})))"),
    octest_legacy:ct_string("Merge ((usn1 :`1esn`)) On Create Set [usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000].`2esn` =$#usn8[12e12][0X7],`2esn` =0.e0 Ends With {@usn5} Ends With 0e0,`2esn`+={usn1} Is Null Is Null Union All Foreach(`6esn` In None(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)| Load Csv With Headers From usn2[..12.e12][..0.0] As usn2  Create Unique #usn8=Allshortestpaths(({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})),Allshortestpaths(((@usn6 $1000)))) Return *,True Starts With 2.12 Starts With {123456789} As usn1,$_usn4[123456789..][$`6esn`..] As `4esn` Limit {#usn8}[False..{usn1}][$`6esn`..0Xa]"),
    octest_legacy:ct_string("Start usn2=Node:`4esn`(usn2='s_str') Where @usn6[2.12..$123456789][$`8esn`..{123456789}] Unwind (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null As `5esn` Foreach(_usn4 In $`2esn`[{@usn5}..12.e12][9e0..$`8esn`]| Start ``=Node:`2esn`({1000}) ,`8esn`=Node:#usn7('s_str')Where $999 In $999) Union Foreach(`` In [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..])| Delete Null[..010][..$@usn6],123.654 Contains `` Contains 0e0,_usn4[$123456789]) With Distinct {``:'s_str'[..$123456789][..{1000}],`3esn`:`4esn`[`1esn`][{`8esn`}]} Ends With {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Ends With [9e1 =~$`4esn` =~{usn2}] As #usn8 Order By 1000 Starts With {7} Starts With $7 Descending Limit 07 Starts With \"d_str\" Starts With $12 Where _usn4 In usn2 Union All Start `6esn`=Relationship:#usn7(usn2=\"d_str\") ,`5esn`=Rel:`5esn`({_usn3}) Start `6esn`=Relationship:`4esn`(`3esn`=\"d_str\")  Load Csv From `1esn`[..{`4esn`}][..{0}] As `2esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Optional Match #usn8=(((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})<-[_usn4?:``]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654}))) Using Index #usn8:usn1(`2esn`) Using Join On `7esn` Where $7[@usn6][0xabc]"),
    octest_legacy:ct_string("Unwind 0x0[$7..] As @usn6"),
    octest_legacy:ct_string("Merge #usn7=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Unwind Null[`1esn`..00] As `8esn` Match (:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}) Using Index `5esn`:`1esn`(@usn6) Using Index _usn4:`1esn`(`8esn`) Where 12.e12[..9e12][..1000] Union Match `4esn`=Shortestpath(((:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})-[* ..999{_usn4:9e12 In 's_str' In $`4esn`}]-(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12}))) Using Join On #usn7,`1esn`,_usn4 Where .e0 Starts With usn2 Start `6esn`=Node:`7esn`(\"d_str\") Where 's_str' Is Not Null Foreach(`` In {usn1}[..{123456789}]| Unwind {`4esn`}[.e0][0Xa] As `8esn`)"),
    octest_legacy:ct_string("Remove [`6esn` In {1000} Is Not Null Where $`1esn` Contains usn2 Contains 1.0|{`4esn`}[..$#usn7]].#usn7!,`4esn`:usn1,Case When 1e1[..12e12] Then {0}[$0][$#usn7] Else $usn1[0X0123456789ABCDEF...e12] End.`` Detach Delete $#usn7 Contains {usn2},.e0 Starts With {0} Starts With 0x0"),
    octest_legacy:ct_string("Optional Match (`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})<-[`3esn`{usn1:$`7esn`[_usn3..][{_usn3}..],_usn4:{`3esn`}[`6esn`..]}]->(_usn3 :`7esn`:_usn4) Using Scan @usn5:`8esn` Using Index `1esn`:`2esn`(`6esn`) Where $usn1 Is Not Null Is Not Null Optional Match `7esn`=({`3esn`:_usn3 In 1.e1}),((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan `6esn`:`7esn` Using Join On `3esn`,`4esn` Start usn1=Node( {#usn7})  Union All With Distinct `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] As `6esn` Skip $`3esn` Ends With `8esn` Ends With {`5esn`} Limit {999}[`2esn`] Union All Remove [`4esn`[usn2..],999[{123456789}..999]].`3esn`?,{`6esn`:$0 Starts With `2esn` Starts With {`1esn`}}.usn2,(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}).usn1"),
    octest_legacy:ct_string("Return {`5esn`} Starts With 123456789 Starts With 07 As _usn3 Order By `8esn`[12e12][_usn3] Desc,@usn6 In {@usn5} In 123.654 Desc,01234567 =~{usn1} =~$123456789 Ascending Return *,None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] As _usn3 Skip 07[{_usn4}..{`4esn`}] Detach Delete 1.e1[`8esn`..Count(*)],[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] Union Start `2esn`=Rel:`1esn`(`7esn`='s_str') ,_usn3=Node:usn1(\"d_str\") Create Unique ({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})-[@usn5?* 01..]-({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}),Shortestpath((_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})) Union All Unwind Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]] As `7esn`"),
    octest_legacy:ct_string("Match #usn7=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Index `8esn`:`3esn`(`6esn`) Using Scan _usn3:_usn4 Where 1000 Is Not Null Return *,`5esn` In 123.654 In {`6esn`} As `2esn`,$0 Ends With `2esn` Order By $usn2 Is Not Null Is Not Null Desc,9e1 Contains {#usn8} Contains `5esn` Ascending,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..] Ascending Limit {usn1:$0 =~_usn3,_usn3:1.0 Starts With 12} Detach Delete {`7esn`}[..$`8esn`][..{`8esn`}],Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) In Case usn1[{123456789}..][010..] When {usn1} Contains 123.654 Contains {#usn8} Then 0xabc Contains False Contains {1000} When @usn5[_usn3..{12}][{999}..$7] Then 0X7[#usn7..][12e12..] Else $`8esn` Starts With $123456789 End In (usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 01..]-(`5esn` {#usn8:True Ends With usn1})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}),$@usn5 =~{`8esn`} =~\"d_str\""),
    octest_legacy:ct_string("Create Allshortestpaths((`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:_usn3:@usn6{#usn7:0xabc =~{`8esn`} =~{_usn3}})) With  *,`2esn` Is Null Is Null As @usn5,999[{12}..][$1000..] As @usn5 Order By {`5esn`}[$`8esn`..$`1esn`] Asc,.e12[{1000}] Asc,9e0 Is Not Null Ascending Skip `1esn`[$`8esn`..][True..] Limit {#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) Union Optional Match ``=((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})) Using Scan _usn3:usn1 Using Join On _usn4,`1esn` Union With Distinct *,#usn8[1e1..],$`3esn`[`3esn`..] Skip {_usn3} In 010 In 0.e0 Create Unique (((_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `6esn` In _usn3 In 0.0 As `7esn`  Return Distinct usn2[01234567..],$`2esn`[#usn7][01] As @usn6,#usn7[..$`1esn`][..{`1esn`}] As `1esn` Skip `3esn` Is Null Is Null Limit {usn1}[Null..][Null..]"),
    octest_legacy:ct_string("Unwind Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End =~`6esn` =~All(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) As `7esn`"),
    octest_legacy:ct_string("Unwind Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})] As `5esn` Merge @usn5=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})) On Create Set (:@usn6{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12})<-[`4esn`?* 010]-(`7esn` :`6esn`:`4esn`)<-[:`7esn`{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`}).`6esn`? =00 Is Null,{usn2:$`3esn`[12.e12...e1],`8esn`:0xabc In {`6esn`} In $@usn6}.`4esn` =0x0 In {`3esn`},#usn8 =Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End =~Shortestpath((_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})) =~Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) On Create Set `5esn`:`7esn`:_usn4,Extract(`7esn` In @usn5[01..`6esn`] Where 0Xa[..0.12]).@usn6 =0.0[Count(*)],Case {999} =~7 =~{usn1} When .e12 Is Not Null Then 0X0123456789ABCDEF[1.0..] When $12[{`5esn`}..] Then `6esn` =~12.e12 =~123456789 End.`2esn`? =Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Load Csv From 999 Starts With {``} As ``  Union All Optional Match Shortestpath((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})),Allshortestpaths((:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})<-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]-(_usn4 {`2esn`:`8esn`[1000..#usn8]})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Using Join On #usn8 Using Join On `2esn`,`1esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {#usn8} Starts With {`4esn`} Starts With 00 As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return 0.e0 Starts With 0x0 Starts With {12},123456789[{_usn3}] As `6esn`,$@usn6 As `5esn`"),
    octest_legacy:ct_string("Start _usn4=Rel:`1esn`(usn1=\"d_str\") ,_usn4=Relationship:`7esn`(`8esn`={1000}) Merge #usn8=Allshortestpaths(((`7esn` )<-[#usn8:``* 00..999{usn2:{@usn5} Contains 0X7 Contains 1e1}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}))) Load Csv With Headers From Filter(`4esn` In False[0.0..{@usn6}] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`])[Reduce(`4esn`=False[Count(*)],usn2 In 999[{123456789}..999]|$0 Ends With `2esn`)..] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge ({`8esn`:12e12[..1.e1][..$12]})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(`2esn` :`6esn`:`4esn`)<-[@usn5?* 01..]->(#usn7 {`3esn`:{usn1}[..{#usn7}]}) On Match Set `1esn`+=9e0[..{usn1}],@usn5+=$@usn5 Is Not Null,`` =$999[999..][$_usn4..] On Create Set ``+=Reduce(`6esn`=9e12 In 's_str' In $`4esn`,usn2 In 999[{123456789}..999]|07[{_usn4}..{`4esn`}]) =~Single(usn2 In {@usn5} Where `1esn` In 9e0 In {7}) =~[usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]],_usn3 =Single(@usn5 In 1.0 Starts With 12 Where #usn7 Starts With {@usn6} Starts With {`1esn`})[Reduce(`4esn`={#usn8} =~$0,usn2 In 999[{123456789}..999]|$`8esn` In {`2esn`} In $0)..[{12}[{_usn3}..0X7][$7..0]]] Unwind \"d_str\" In 2.12 As `8esn` Create Unique `4esn`=Allshortestpaths(((`1esn` :@usn6{_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))),`4esn`=Shortestpath(((`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[?* 010]->(@usn6 {@usn6:{0}[$0][$#usn7]}))) Union Unwind Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As `` Merge ``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Start `8esn`=Node:usn2({`2esn`}) ,`3esn`=Node:#usn8(`4esn`=\"d_str\")Where `1esn` In 9e0 In {7}"),
    octest_legacy:ct_string("Return *,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Limit 9e1 =~{_usn3} =~{`5esn`} Merge Allshortestpaths((_usn4 )) On Create Set `4esn` =1e1[usn1..$123456789][Count(*)..False],`1esn` =`8esn`[{`5esn`}..$12],_usn4 =\"d_str\" Ends With 0e0 Ends With {usn2} Union All Optional Match `2esn`=((:usn2)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})),Allshortestpaths(((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) With Distinct Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..],$`1esn` Is Not Null,0.0 Is Null As `3esn` Limit 07 Starts With \"d_str\" Starts With $12 Detach Delete {#usn8} Is Not Null Is Not Null Union All Return {1000}[0e0][{usn1}],{@usn5} In 0X0123456789ABCDEF In 1000,$`2esn`[Null][{``}] Create Unique #usn8=Allshortestpaths(({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})),Allshortestpaths(((@usn6 $1000)))"),
    octest_legacy:ct_string("Merge Allshortestpaths((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]})) Unwind {1000}[..`3esn`] As `5esn` Start `5esn`=Node:`4esn`(`2esn`={7})  Union All Remove None(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]).`4esn`,Extract(_usn4 In .e12 Is Not Null Where {#usn8} =~$0).`7esn`! Foreach(`1esn` In Null[..010][..$@usn6]| Create Unique usn1=Shortestpath((`4esn` {@usn5:`3esn`[#usn8]})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}))) Optional Match Shortestpath((({@usn5:0[...e1][..$usn2]}))),(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[#usn8* 01234567..0Xa{#usn8:$`6esn` Starts With _usn4 Starts With `5esn`}]-(`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789}) Using Index usn2:usn1(#usn7) Where True Contains $123456789 Contains {`2esn`} Union Load Csv With Headers From usn2[0.e0..] As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`1esn` =~1.0 =~0X7 As `8esn`  Remove _usn4(Distinct $#usn7 Is Not Null Is Not Null).`2esn`,[{7}['s_str'..]].`1esn`!"),
    octest_legacy:ct_string("Foreach(@usn6 In @usn5 In 00| Match usn2=Allshortestpaths((_usn3 :`4esn`:`3esn`)-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})-[@usn6?:`2esn`* 01..{``:2.12 Contains @usn5 Contains {``},``:{#usn8} In 07 In 0}]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})),Shortestpath(((#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[#usn7?:``]->(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]}))) Using Join On _usn4 Using Index @usn5:`4esn`(`5esn`) Create (({@usn5:0[...e1][..$usn2]}))) Create @usn6=(({`3esn`:_usn3 In 1.e1})),`3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}))"),
    octest_legacy:ct_string("Unwind $`4esn` Is Null Is Null As usn2 Union All Create (({_usn3:_usn4 =~`1esn`})),`4esn`=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Detach Delete All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null,None(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6)[[$999 Is Not Null Is Not Null,01 Starts With {0} Starts With $`4esn`,0.e0[#usn7..][$@usn5..]]..Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`})][Case Null In {_usn3} In _usn3 When {`6esn`} Is Not Null Is Not Null Then $#usn8[12e12][0X7] End..Reduce(`2esn`=9e0[..{usn1}],@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|9e12 Is Null Is Null)],1.e1[{1000}..] With Distinct $`4esn` Is Null Is Null Order By $#usn7 Ends With $999 Ends With {`5esn`} Desc,_usn3 Ends With {`7esn`} Ends With 12 Ascending Skip $@usn5 Is Null Is Null Where $123456789 In $7 Union Detach Delete $`3esn`[$_usn4][True] With  *,{_usn4} =~{`7esn`} =~$#usn7 As usn1,$`2esn` Ends With $`2esn` As `6esn` Order By 0xabc Contains False Contains {1000} Descending,{0}[123456789..$`8esn`] Descending"),
    octest_legacy:ct_string("Merge `5esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))) Union Remove {``:999[$_usn3][@usn6]}.`2esn`?,(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}).`3esn`! Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6!"),
    octest_legacy:ct_string("Merge `4esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}) On Create Set #usn7 ={@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789} Is Null On Create Set _usn4 ={`2esn`}[{`3esn`}..][.e1..],`8esn`+=$`7esn`[..`4esn`],usn2 =Extract(@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`) In [`7esn`[`5esn`..][0.12..],{`2esn`} Contains 0.12 Contains 0.0] In {@usn5:{#usn7} Starts With $`1esn` Starts With 07,`5esn`:$#usn7 Is Null} Foreach(`2esn` In 1e1[1.e1..]| Return Distinct *,`3esn` =~12e12,@usn5[..$`7esn`][..$`6esn`] Order By {`4esn`} Is Null Desc) Union Unwind $`1esn` Contains $#usn7 As `3esn` Match `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),`8esn`=Allshortestpaths((((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`)))) Using Index `2esn`:`6esn`(`1esn`) Using Scan #usn7:_usn3 Where 00[$usn2..][0.12..] Merge _usn4=Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) On Create Set _usn4+=`3esn`[$`2esn`] On Create Set {``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}}.`3esn`! =07 Starts With 7,_usn3 =`2esn`[0Xa][{`8esn`}] Union All Delete #usn8[1e1..],`8esn`[1000..#usn8],Null =~`4esn` =~9e0 Delete 01234567[``..$`1esn`][True..$#usn7],{@usn5}[1000]"),
    octest_legacy:ct_string("Merge `8esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) On Create Set _usn4 =$#usn7 =~Count(*) =~@usn5,@usn5+=Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null,`3esn`+=1.0[Extract(usn1 In #usn8 =~$@usn5 Where 0[...e1][..$usn2]|01234567[usn1])][(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1)] Remove Extract(@usn5 In 1.0 Starts With 12 Where True =~_usn3).#usn8! Union All Start usn2=Relationship:`4esn`(\"d_str\") Where 0.0[010..12.e12] Remove {#usn8:$999 In $999}.`7esn`?,``({`1esn`}[\"d_str\"][{1000}]).`8esn`?"),
    octest_legacy:ct_string("Load Csv With Headers From 12.0 =~0.12 =~999 As `7esn`  Start usn2=Rel:`7esn`(`3esn`={`4esn`}) ,`6esn`=Rel:#usn7(``={@usn5})Where $12 Is Null Detach Delete [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Starts With Single(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))),$999 Contains $999 Contains $999,{``}[2.12] Union Start @usn6=Rel:@usn5({_usn3}) ,`8esn`=Node:`5esn`({123456789})Where 9e12[{1000}..][1000..] Create `7esn`=Shortestpath((((`5esn` :@usn6)-[?:usn1|:@usn6* ..12$`6esn`]->({#usn7:0xabc In 9e1,`6esn`:$999 =~$999 =~usn2})-[``?:#usn7|:``]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}}))))"),
    octest_legacy:ct_string("Start `2esn`=Node:`4esn`(`3esn`=\"d_str\") Where 1e1 In 0xabc Merge Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))))"),
    octest_legacy:ct_string("With Distinct *,$``[..{_usn4}][..{@usn6}] As `3esn` Load Csv From {`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] As `7esn` Fieldterminator \"d_str\" Start `3esn`=Node:`3esn`('s_str') Where 00 =~.e12 Union All Return Distinct Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null As #usn8,12[True] As `3esn` Order By {#usn7} =~$0 Ascending,$usn2 Is Not Null Is Not Null Asc Skip 01234567[``..$`1esn`][True..$#usn7] With  @usn6 In {@usn5} In 123.654 As `5esn`,0[...e1][..$usn2] As usn2,{7} In 9e1 As #usn7 Order By 12[0Xa][07] Descending,010[$12..] Ascending Skip {12}[{@usn6}..``][7..`1esn`] Where @usn5[..$`7esn`][..$`6esn`] Union All With  *,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip ($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`}) Is Not Null Is Not Null Limit #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {#usn7}[9e12..] As #usn8  Load Csv From `6esn` In _usn3 In 0.0 As `7esn` "),
    octest_legacy:ct_string("Detach Delete $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,[{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])],1.e1 Is Not Null Return *,@usn5[123.654][12.e12],Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) As `5esn` Skip (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..] Limit 123.654[$`5esn`] With Distinct $`4esn`[{@usn5}],{`5esn`} Starts With 123456789 Starts With 07 As _usn3,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn` Order By 1000 In {`4esn`} Asc,$`7esn`[_usn3..][{_usn3}..] Desc Skip Reduce(#usn8='s_str'[..$123456789][..{1000}],`5esn` In $999[12]|12.e12 =~$`7esn` =~{``}) =~Shortestpath((#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Where _usn4 =~$#usn7 =~`8esn` Union Detach Delete `1esn` =~12.0,Case #usn8 Starts With {_usn3} Starts With 123.654 When $`2esn`[Null][{``}] Then $@usn6[..{`6esn`}][...e0] End[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 Ends With 0 Ends With {`6esn`})..(@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(`3esn` :@usn6)<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})],All(_usn4 In .e12 Is Not Null Where $@usn5 =~999 =~0e0)[Reduce(_usn3=`5esn` In 123.654 In {`6esn`},_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])] Match @usn5=Shortestpath(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))),#usn8=Shortestpath(((#usn7 )-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}))) Merge @usn6=(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn2?:`6esn`|:`7esn`]-({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12}) Union All With Distinct $_usn4 Contains Null Contains $0 As `3esn`,[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null] In Filter(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) In [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where `4esn` Starts With 0x0],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By `1esn`[$`8esn`..][True..] Desc Skip `6esn` =~12.e12 =~123456789 Foreach(`8esn` In `2esn`[..$`4esn`][..$@usn5]| Delete $@usn6 Ends With {`6esn`} Ends With 0.e0,#usn7 Contains $#usn8 Contains {`4esn`} Start ``=Rel:`1esn`(usn2={@usn6}) Where {#usn7} =~{usn1})"),
    octest_legacy:ct_string("With  00[$`2esn`..{7}][usn2..\"d_str\"] Skip {`2esn`}[@usn6][{_usn3}] Limit 123.654 Contains $`4esn` Contains .e1 Union With Distinct *,`5esn`[$12..][`2esn`..] As _usn3,'s_str' Contains $_usn4 Contains $`7esn` Skip $`8esn`[$usn1][0X7] Limit $#usn8[$12][`6esn`] With  *,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn`,{#usn8}[False..{usn1}][$`6esn`..0Xa] Skip #usn8(0.e0 Ends With $`8esn`,{#usn7}[{`1esn`}..][`1esn`..])[{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}..{_usn4:$`8esn` Contains {`7esn`} Contains $`4esn`}] Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]) Where Count(*) =~0e0 =~0x0 Foreach(usn1 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn`) Union All With  *,$`1esn` =~1.0 =~0X7 As `4esn` Limit {999}[0..{`7esn`}][9e0..{`3esn`}] Where {12}[{_usn3}..0X7][$7..0] Merge usn2=Shortestpath(((`2esn` :``:usn1)<-[usn1?:`7esn`* 0x0..7]->(_usn4 {usn2:0[1.0..$``],#usn7:0.0})))"),
    octest_legacy:ct_string("Optional Match #usn8=Shortestpath(((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}}))),#usn8=Allshortestpaths(((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1}))) Using Join On #usn8,`7esn`,_usn3 Using Index `2esn`:`6esn`(`1esn`) Union All Unwind 9e12 Contains {`4esn`} As `2esn` Create @usn6=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[:`5esn`|`3esn`$usn1]-(#usn8 :@usn5:usn2)),((#usn8 :@usn5:usn2)-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Load Csv From 999 Starts With {``} As `` "),
    octest_legacy:ct_string("Unwind $999 =~$999 =~usn2 As `1esn` Union Remove {`7esn`:`3esn` Is Null Is Null,`1esn`:01234567 Is Not Null}._usn4?,[#usn7 In $@usn6 Contains 0 Contains 0 Where 0x0[9e0..][$@usn5..]].@usn5!"),
    octest_legacy:ct_string("Create Unique _usn3=Shortestpath((usn2 :usn2{`6esn`:123.654 In {12} In ``})) Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})))) On Create Set Single(`5esn` In $999[12] Where `5esn` In 123.654 In {`6esn`})._usn4 =$`4esn`,`` =(`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000,_usn3+={usn2}[{`7esn`}][$usn2] On Create Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}] Union Detach Delete {`3esn`:.e0 Starts With {0} Starts With 0x0}[Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $7 In $usn2 In {1000})][{#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}] Load Csv From Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $`4esn`[{@usn5}]) Contains [usn2 In 999[{123456789}..999] Where .e12 Is Null Is Null|$usn1[01234567]] Contains Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010]) As `1esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match `3esn`=(({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1)) Where 9e12[{1000}..][1000..]"),
    octest_legacy:ct_string("Load Csv With Headers From 0x0 Is Not Null As ``  Union All Merge #usn8=((`7esn` )-[:usn1|:@usn6{`4esn`:{_usn4} In 9e0,_usn4:$1000[123.654]}]-(`` {`2esn`:{``}[$@usn5]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Create @usn5=Allshortestpaths(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})),((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]-(:_usn4:`1esn`{#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]})-[_usn3:_usn3|:`6esn`]-(`3esn` :`3esn`:@usn5)) Detach Delete $`1esn` Contains $#usn7,@usn6[2.12..$123456789][$`8esn`..{123456789}],0X0123456789ABCDEF[0e0..0xabc]"),
    octest_legacy:ct_string("Foreach(usn1 In 2.12 =~9e1 =~{_usn4}| Create ((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})) Create Unique Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Delete 's_str'[..'s_str'][..{#usn7}],Case 12.e12 =~$`7esn` =~{``} When 0Xa[0X7..#usn8][_usn3..9e1] Then 00 Starts With 12 Starts With 0e0 When 010[``..][{_usn3}..] Then .e12[$``..] End =~Reduce(`4esn`=False[Count(*)],usn2 In 999[{123456789}..999]|$0 Ends With `2esn`) =~Case 0[...e1][..$usn2] When `3esn`[#usn8] Then Count(*)[{usn1}..][$`7esn`..] Else `1esn`[..{`4esn`}][..{0}] End"),
    octest_legacy:ct_string("Foreach(_usn3 In 010[``..][{_usn3}..]| With Distinct *,0X0123456789ABCDEF =~2.12 =~True As ``,.e12[Count(*)..{`4esn`}][07..$1000] As `8esn` Order By Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] Ascending,`8esn`[12e12][_usn3] Desc Skip {#usn7} Starts With $`1esn` Starts With 07 Limit #usn8 Is Null With  Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Skip {usn2}[{`7esn`}][$usn2] Where 12[0X0123456789ABCDEF..][Count(*)..]) With  00 Starts With 12 Starts With 0e0 As @usn6,Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789},False[0e0] As `4esn` Where 1000 Is Not Null Unwind {`5esn`:12e12[$``..],@usn6:$`3esn` Is Null Is Null} =~{_usn4:`1esn` In 12.e12 In $#usn7} As _usn3 Union Remove Shortestpath((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))).@usn5,exists($`2esn`[#usn7][01]).`2esn`! Remove Extract(#usn7 In {`5esn`} Ends With `2esn` Where 1.e1 =~123.654 =~$`3esn`).@usn5?,Shortestpath(((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}))).`4esn`?,{@usn5:{#usn8} Ends With {123456789} Ends With #usn8,_usn3:$`1esn` Is Not Null}._usn3!"),
    octest_legacy:ct_string("Delete (:#usn7:`6esn`{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})-[#usn7:`5esn`|`3esn`]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})<-[usn1?:@usn5|``* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})[Filter(#usn7 In $@usn6 Contains 0 Contains 0 Where 00[usn2..`3esn`][0X0123456789ABCDEF..$7])..All(usn2 In {@usn5} Where $1000 Is Null Is Null)][{`5esn`:12e12[..Count(*)][..$usn2],`6esn`:010 Starts With `3esn` Starts With {usn1}}..Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)],'s_str'[..$123456789][..{1000}],Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] Remove Reduce(``=$usn1[{_usn3}],`1esn` In {``} =~{`2esn`} =~$`8esn`|False Is Null Is Null).`1esn`! Create Unique (({_usn3:0.0[010..12.e12]})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Union Return *,$#usn7 Is Null,#usn8 =~$@usn5 As usn1 Skip Null In {_usn3} In _usn3 Limit `5esn` =~0e0 Unwind 1.0[{#usn8}..] As `` Optional Match usn1=Allshortestpaths(((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]}))) Using Index `4esn`:_usn4(`1esn`) Where {1000} Is Not Null"),
    octest_legacy:ct_string("Foreach(`5esn` In 12 Contains 9e1 Contains $`8esn`| Optional Match `4esn`=(:`6esn`:`4esn`{usn1})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 :@usn5:usn2)<-[* 0]-(usn1 :`4esn`:`3esn`),((_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[?:usn1|:@usn6{_usn4:$`8esn` In {`2esn`} In $0}]-(usn2 $`3esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})) Using Join On #usn8,_usn3 Using Join On #usn8,`8esn`,`8esn` Where $7[@usn6][0xabc] Load Csv From {_usn4} =~{`7esn`} =~$#usn7 As #usn7 ) Return Distinct *,$`7esn`[_usn3][{_usn4}] As `2esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]}"),
    octest_legacy:ct_string("Foreach(_usn3 In {@usn5} =~$`2esn`| Start `8esn`=Node( {`8esn`}) Where 0[1.0..$``]) Start `5esn`=Node:``(``=\"d_str\") ,``=Rel:`5esn`({123456789}) Create Unique Shortestpath((({_usn3:_usn4 =~`1esn`}))) Union Load Csv From {12}[{_usn3}..0X7][$7..0] As usn1 Fieldterminator 's_str' Merge Shortestpath(((@usn5 :`6esn`:`4esn`))) On Create Set $0.`3esn` =0 Is Null Is Null Union Create `2esn`=((#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]->(:``:usn1{`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1})),`4esn`=Allshortestpaths(((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`}))) Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0|#usn8 Ends With 0Xa].usn1 Load Csv With Headers From $_usn4[0X7..{1000}] As @usn6 "),
    octest_legacy:ct_string("With  `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] As usn2,0x0[9e0..][$@usn5..] As _usn3,@usn5[_usn3..{12}][{999}..$7] Order By {`4esn`} Contains \"d_str\" Asc,{`2esn`}[usn2..][$#usn7..] Desc,{`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] Asc Skip Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End Is Null Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)._usn3,count(Distinct 1e1[{`3esn`}][True]).`1esn`,[@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].@usn6? Merge `7esn`=((({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4))) On Create Set `3esn` =(usn1 :usn2)-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`5esn` :``:usn1)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12) Is Null,@usn6+={`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null,`5esn`+=_usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] Union All Load Csv From _usn4[$123456789] As `8esn` Fieldterminator 's_str' Merge Shortestpath((((`8esn` :#usn7:`6esn`{`2esn`:`1esn` =~12.0,_usn4:$#usn8 In $0 In {`2esn`}})-[usn1?:usn2|_usn3* 1000{#usn8:00 Is Null}]-({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})))) Union Unwind 0X0123456789ABCDEF[{12}..`6esn`][{usn2}..$7] As `7esn`"),
    octest_legacy:ct_string("Foreach(@usn6 In Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))]| Start `8esn`=Node( {`8esn`}) Where 0[1.0..$``] Create _usn4=((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`}))) With Distinct *,Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})] As usn1,{#usn7} =~$0 Order By {`3esn`}[`6esn`..] Desc,Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) Asc,7 Starts With `5esn` Desc Limit 0x0[9e0..][$@usn5..] Where #usn7 =~{7} Start `1esn`=Rel:@usn5('s_str') ,@usn6=Rel:``(``={_usn4}) Union All Unwind Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] As #usn7 Unwind {_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End As _usn4 Match @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),`1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Using Join On `2esn`,usn2,@usn6 Using Index `6esn`:`2esn`(`3esn`) Where {#usn8}[False..{usn1}][$`6esn`..0Xa]"),
    octest_legacy:ct_string("Unwind `` =~_usn3 =~{`6esn`} As #usn7"),
    octest_legacy:ct_string("Detach Delete {`8esn`} In 12 In 1e1 Match #usn7=(usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1),Allshortestpaths((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]->(`1esn` {`3esn`:0.12 In `8esn`})<-[* 0]-(usn1 :`4esn`:`3esn`)) Union Match usn1=Allshortestpaths(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]})),`8esn`=((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})-[?* 07..]->(:usn1{#usn8:True Ends With usn1})-[?:``]-(`7esn` :@usn6)) Create #usn7=(((@usn5 :`6esn`:`4esn`)<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}))) Union All Start `6esn`=Relationship:#usn7(usn2=\"d_str\") ,`5esn`=Rel:`5esn`({_usn3}) Start `6esn`=Relationship:`4esn`(`3esn`=\"d_str\")  Load Csv From `1esn`[..{`4esn`}][..{0}] As `2esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End =~Shortestpath((_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})) =~Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) Order By 9e0 Is Not Null Is Not Null Descending,9e1 Ends With 0xabc Ends With @usn6 Ascending Skip `3esn` Contains {`6esn`} Limit Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End Is Null Optional Match (`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`) Detach Delete Case When 999 Then #usn7 =~{7} End Is Null,$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn` Union Unwind $`7esn` Ends With usn2 As `4esn` Union Detach Delete {_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null} =~[010,0X7 Is Null Is Null] Start `2esn`=Node:`8esn`(#usn8='s_str') "),
    octest_legacy:ct_string("Start #usn7=Relationship:usn2(`5esn`={_usn3}) ,_usn4=Rel:`4esn`(_usn4=\"d_str\")Where $#usn7 Starts With $`4esn` Create Unique (#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[:`4esn`|`2esn`* 00..999]->(:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1) Union All Start `7esn`=Node:#usn7(usn2=\"d_str\") ,``=Relationship:`6esn`({#usn8})"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]}))) On Create Set _usn4+=`3esn`[$`2esn`] Optional Match #usn7=(({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)),(#usn7 :#usn7:`6esn`)<-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]->(:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}) Using Scan `7esn`:#usn7 Where .e12 Contains {`6esn`} Contains .e12"),
    octest_legacy:ct_string("Foreach(`3esn` In {`1esn`}[..{_usn4}]| Create `1esn`=(usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}),Shortestpath((((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})))) Remove All(@usn5 In 1.0 Starts With 12 Where 010 Contains $`5esn`).usn2!)"),
    octest_legacy:ct_string("With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) Ascending,$`7esn`[$1000..Null] Ascending Limit {7} In 9e1 Foreach(`7esn` In @usn5 Contains {#usn8} Contains 010| Return Distinct *,$@usn5 Is Null Is Null As @usn6 Skip 2.12 Contains 0.0 Contains $`6esn` Limit 9e0 Is Null Start `4esn`=Node(*) ,@usn5=Node:`8esn`(`3esn`={999})Where .e1 =~9e12) Start `1esn`=Rel:#usn7(``={@usn5}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Extract(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) Contains Case When $`1esn`[0..{_usn3}] Then $_usn3[@usn6..][{``}..] When 999[1000..] Then {1000}[..#usn7][..{#usn8}] Else Count(*) =~0e0 =~0x0 End Contains Reduce(#usn7=$#usn7 =~Count(*) =~@usn5,@usn5 In 1.0 Starts With 12|2.12 Contains 0.0 Contains $`6esn`) As @usn5 Fieldterminator 's_str' Load Csv From 12e12[$`5esn`..1.0][$`8esn`..$`1esn`] As @usn5  Unwind `6esn` Ends With 0x0 Ends With 12 As `2esn`"),
    octest_legacy:ct_string("Merge `1esn`=Shortestpath((:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]})) On Match Set Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End.usn1 =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),usn1+={``} In $0,Case 2.12 Contains @usn5 Contains {``} When $123456789 In $7 Then _usn4[12.e12..] End.`4esn`? =None(#usn8 In True In `8esn` Where $#usn8[12e12][0X7]) Is Null Start `7esn`=Rel:`7esn`(`3esn`={`4esn`}) ,_usn3=Rel:`1esn`(`7esn`={_usn3}) Union Return Distinct 's_str' Contains $_usn4 Contains $`7esn`,'s_str' In {1000} In 010 As `4esn`,Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `2esn` Skip Single(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]) In [#usn8 In True In `8esn` Where 1e1[{`3esn`}][True]] In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 07 Contains @usn5] Remove {usn2:$`7esn` =~#usn8 =~{`7esn`},`8esn`:`1esn` In {`4esn`}}.`7esn`,{usn2:$#usn7 Contains {usn2}}.`8esn`? Union All Load Csv From 0X7 In $@usn6 In {`2esn`} As _usn3  Foreach(`3esn` In #usn8[#usn8..]| Load Csv With Headers From 0.12 Is Not Null As @usn6 Fieldterminator 's_str' With Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]))"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?:`4esn`|`2esn`* 07..]->(`7esn` :_usn3:@usn6)-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))),({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})-[#usn7?:usn2|_usn3* 7{_usn4}]->(:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}}) Using Join On `1esn` Using Scan `8esn`:@usn6 Where $`7esn` In $999 In {123456789} Union All Create Unique @usn5=Shortestpath(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))) Unwind 01[$`1esn`..\"d_str\"] As `4esn` Union All Create Allshortestpaths((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})),(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[`8esn`?:#usn8|_usn3* 01..{_usn3:999 Is Not Null Is Not Null}]->(`6esn` :#usn7:`6esn`)-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}))) Foreach(`4esn` In {1000} Ends With 00 Ends With ``| Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}})) Load Csv With Headers From False =~Null =~12.0 As usn1 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("With  *,{_usn4} =~{`7esn`} =~$#usn7 As usn1,$`2esn` Ends With $`2esn` As `6esn` Order By 0xabc Contains False Contains {1000} Descending,{0}[123456789..$`8esn`] Descending Return Distinct usn2[01234567..],$`2esn`[#usn7][01] As @usn6,#usn7[..$`1esn`][..{`1esn`}] As `1esn` Skip `3esn` Is Null Is Null Limit {usn1}[Null..][Null..] Union Match Shortestpath(((#usn7 :`2esn`))) Using Join On `2esn`,_usn4,`1esn` Using Index `6esn`:``(_usn3) Unwind {@usn6}[{usn2}..] As `7esn` Remove Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[#usn8?:`8esn`|:_usn3* 123456789..999]-(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07})))._usn3!"),
    octest_legacy:ct_string("With  [0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1) As #usn8 Order By 0e0 Descending,[{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])] Asc Where {usn1} Is Null Is Null Unwind False Contains _usn3 Contains {`5esn`} As #usn8 Union Unwind {12} Is Null As `8esn`"),
    octest_legacy:ct_string("With Distinct *,$`` Ends With _usn3 Ends With $@usn5 As `7esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Order By 0xabc Is Not Null Is Not Null Asc,@usn5[..$`7esn`][..$`6esn`] Asc,Shortestpath(((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654}))) Contains Shortestpath((`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn2?:`6esn`|:`7esn`]-({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})) Contains [`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0|$`3esn` Contains .e1] Desc Where {`4esn`}[0xabc..][010..] Remove Extract(_usn4 In .e12 Is Not Null|``[..`3esn`][..{@usn6}])._usn4!,Case @usn5[123.654..$_usn4][0.12..$@usn6] When 1.e1 Starts With False Starts With $@usn6 Then $`5esn` Starts With 1.0 Starts With $usn2 When @usn6[9e12..] Then $`7esn` Contains 9e12 Contains `2esn` Else .e1 =~9e12 End.usn2 Optional Match `6esn`=Shortestpath((`7esn` :`3esn`:@usn5{#usn7:1.0 Starts With 12,`7esn`:$999 =~$999 =~usn2})),usn2=(({_usn4:Null[False..][12.e12..]})) Using Scan `1esn`:`6esn` Using Join On _usn4 Where 123.654 In {`6esn`} In `6esn` Union Load Csv With Headers From {_usn4} =~{`7esn`} =~$#usn7 As `` "),
    octest_legacy:ct_string("Remove {#usn8:123.654 Contains $`4esn` Contains .e1}.``?,Reduce(`2esn`=$`1esn`[_usn3..],`5esn` In `5esn` In 123.654 In {`6esn`}|$#usn8 Is Not Null).`5esn`?,7.`2esn`! Foreach(`4esn` In True Starts With `` Starts With 0.e0| Start `1esn`=Node:`1esn`(`7esn`={_usn3}) ,``=Node:#usn7({#usn7})Where $`2esn` In 0xabc) Foreach(#usn7 In usn2[{7}..#usn8][{12}..{``}]| Load Csv With Headers From $#usn7[$``..{`7esn`}] As `5esn` Fieldterminator \"d_str\" With Distinct *,1.0 As usn2,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip $7[\"d_str\"][`8esn`] Where 1000 Contains 12.e12) Union Detach Delete @usn5[123.654][12.e12] Match Shortestpath((`3esn` )-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]-(:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})),Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})) Using Index @usn5:`4esn`(`5esn`) Where 0xabc[$`2esn`..] Delete {#usn7} Contains {`7esn`} Contains $`3esn`,{usn1} Contains 123.654 Contains {#usn8},{#usn8} Starts With {`4esn`} Starts With 00"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1))),(((@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)<-[`3esn`?:`6esn`|:`7esn`* ..999]->({#usn8:0xabc =~{_usn4}}))) Where usn1 =~1000 =~12 With  *,$_usn4 Ends With False Ends With $#usn8,{``}[$@usn5] As @usn5 Limit 12e12 In Null In {7} Where $12[`6esn`][$#usn8] Union All Match (((:#usn8:#usn7{@usn5:@usn5 In 00})-[usn1?:`2esn`]->(:`4esn`:`3esn`)-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index `2esn`:`6esn`(`1esn`) Using Join On `8esn`,`4esn`,`1esn` Where $_usn4 Ends With False Ends With $#usn8 Union Remove [`6esn` Contains `6esn` Contains 9e1]._usn4?,Extract(usn2 In 999[{123456789}..999] Where $1000[999..][0Xa..]).`7esn`! Remove {`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1}.@usn6!,`2esn`:`2esn` Create Unique @usn5=Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))),_usn4=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})))"),
    octest_legacy:ct_string("Detach Delete 's_str'[..$123456789][..{1000}] Load Csv From @usn5[123.654][12.e12] As `2esn`  Start `4esn`=Node:usn1(@usn5={`1esn`}) ,`8esn`=Node:`5esn`({123456789})Where 9e1 =~{#usn7} Union Foreach(`7esn` In {@usn5} In $`5esn`| Unwind {``} In $0 As _usn3 Optional Match _usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))),#usn7=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Using Join On #usn8,`7esn`,_usn3 Using Scan `2esn`:`3esn` Where 0Xa[$#usn8]) Create usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) Foreach(_usn3 In `5esn`[..$_usn3]| Return *,0X0123456789ABCDEF Is Null,(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Ends With `2esn` Ends With [$`8esn`[#usn7..][0X7..],``[..`3esn`][..{@usn6}]] Order By 9e1[`3esn`][$#usn8] Asc,{`8esn`} Is Not Null Is Not Null Desc,Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}] Descending Skip {@usn5} In 0X0123456789ABCDEF In 1000 Limit Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])] Remove Case When {@usn6}[..0.e0][..$0] Then 0e0 Is Null End._usn4!,Any(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {_usn3}[{#usn7}]).`5esn`?) Union Remove Filter(`4esn` In False[0.0..{@usn6}] Where {1000} Is Not Null).usn2! Create Unique `2esn`=((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[@usn5?* 00..999]->(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})),`1esn`=(((_usn3 :`5esn`)<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}))) Start ``=Node:`2esn`({1000}) ,`8esn`=Node:#usn7('s_str')Where $999 In $999"),
    octest_legacy:ct_string("Load Csv From [9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) As usn2 Fieldterminator \"d_str\" Return Distinct [usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000|`2esn` =~$#usn7 =~_usn4] Starts With Extract(`6esn` In {1000} Is Not Null|12e12 In Null In {7}) Starts With {_usn4:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,usn1:9e1[..2.12][..@usn6]} As usn2,#usn7 Ends With {@usn5} Order By {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Ascending,{#usn7} Is Null Is Null Ascending Skip `5esn` In 123.654 In {`6esn`}"),
    octest_legacy:ct_string("Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `5esn`,{usn1}[..{#usn7}] Limit {7} =~#usn8 =~0.0"),
    octest_legacy:ct_string("Foreach(usn1 In {_usn4}[`8esn`..\"d_str\"]| Load Csv With Headers From 12.0[{`6esn`}..123.654][@usn5..usn1] As #usn7 ) Detach Delete Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567),0x0 Is Not Null Is Not Null,{usn2} =~{0} Create Allshortestpaths((((_usn3 )-[* ..12]-(:`4esn`:`3esn`{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[_usn4{#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]}]->(`4esn` :@usn6)))) Union Return Distinct *,1.0 As usn2,Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Skip $7[\"d_str\"][`8esn`] Start @usn6=Rel:#usn7(``={@usn5}) ,#usn7=Node:#usn8(_usn3=\"d_str\")Where 1000 In {`4esn`} Remove None(#usn7 In {`5esn`} Ends With `2esn` Where 0X0123456789ABCDEF =~$@usn6 =~$`8esn`)._usn3,count(Distinct 1e1[{`3esn`}][True]).`1esn`,[@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].@usn6? Union Return $1000[{#usn8}..],@usn6[9e12..] As `7esn`,Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `4esn` Order By #usn7(Distinct @usn5[..$`7esn`][..$`6esn`])[Allshortestpaths((usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`}))..][Case When {`5esn`} Ends With `2esn` Then `1esn`[$``][{`5esn`}] End..] Asc Start usn2=Node:`4esn`(usn2='s_str') ,`6esn`=Node:`7esn`(\"d_str\")Where `1esn`[$`8esn`..][True..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn8 Ends With `5esn` Ends With _usn3 As #usn8  Create usn2=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})"),
    octest_legacy:ct_string("Merge @usn6=((:`3esn`:@usn5{`5esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})) On Create Set @usn6 =#usn7[999..``] On Create Set `8esn` =(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 Match #usn7=((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]})) Using Join On @usn6,usn2,`5esn` Load Csv With Headers From 's_str' Contains $_usn4 Contains $`7esn` As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create ((({usn2:.e0 In 9e1 In $_usn3,_usn4:True[12e12..]})-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}))) Remove `7esn`(Distinct 0xabc[0.e0..][$7..])._usn3!,Reduce(`7esn`=$0 =~_usn3,#usn7 In $@usn6 Contains 0 Contains 0|{`7esn`} Starts With 12.0 Starts With 07)._usn3,Reduce(`3esn`=12 =~{#usn7},usn2 In {@usn5}|{999} =~7 =~{usn1}).usn1!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {`2esn`} Is Not Null As `7esn` "),
    octest_legacy:ct_string("Unwind {usn1}[..{123456789}] As usn1 Union Unwind .e12[0.0..][$#usn8..] As `6esn` Unwind Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))] As `6esn` Union All Create (@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})-[?:``]-({`3esn`:.e12 Is Not Null})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}),(({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})) Match Shortestpath(((#usn8 :`1esn`{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}))),@usn5=Shortestpath((({`8esn`:999 Starts With {``}})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))) Using Index _usn4:#usn8(_usn4) Using Join On `4esn` Detach Delete 0x0[{`1esn`}],Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})],0Xa[01..$`1esn`]"),
    octest_legacy:ct_string("Return Distinct *,123.654 In {12} In `` As `1esn`,Null[False..][12.e12..] Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Delete {`5esn`:01[$`1esn`..\"d_str\"],`4esn`:#usn8[#usn8..]}[..[`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0|$0 =~_usn3]][..$@usn5] Union Foreach(usn2 In $`5esn` Ends With $#usn8| Unwind 01[$`1esn`..\"d_str\"] As `4esn`) With  7 Is Null Is Null As _usn3,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) As usn2,[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Skip 12.0 In $usn1 In True Limit {`7esn`}[{#usn7}..] Where {`1esn`}[\"d_str\"][{1000}] Union Return *,{@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]},$@usn6 Ends With {`6esn`} Ends With 0.e0 Skip 2.12 Contains {1000} Contains 1.e1"),
    octest_legacy:ct_string("Delete 7 Is Null Is Null,.e12 Starts With $@usn5 Starts With $@usn5 Foreach(`5esn` In $usn2[`4esn`..]| Detach Delete {@usn6} Contains {_usn3} Contains 1000,{1000}[`2esn`..9e12][{`7esn`}..{`3esn`}] Match usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),@usn5=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) Where 00 Starts With 12 Starts With 0e0) Optional Match `6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Using Join On usn2,`2esn`,`4esn` Where $@usn6[..{`6esn`}][...e0] Union All Start `3esn`=Node:`1esn`(\"d_str\") ,`7esn`=Rel:#usn8({_usn4})Where {`2esn`}[{123456789}..$#usn7][_usn3..999] Match ({_usn3:1000 Is Not Null Is Not Null,usn2:$#usn8[12e12][0X7]}),(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}))) Using Scan ``:_usn3 Using Index `6esn`:``(_usn3) Where {0}[$usn2..0.e0][{`4esn`}..True] Merge @usn6=Allshortestpaths(((:#usn7:`6esn`{999})))"),
    octest_legacy:ct_string("Unwind #usn8 Is Null As @usn5 Optional Match `7esn`=(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}),Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]}))) Using Index @usn5:_usn4(@usn6) Where 's_str' Is Not Null Match ((`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})),Shortestpath(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) Using Index `5esn`:`1esn`(@usn6) Where {0}[123456789..$`8esn`]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Case $`6esn` Starts With _usn4 Starts With `5esn` When _usn4 =~`1esn` Then {`6esn`} Starts With 0xabc When $7[{`7esn`}][12.0] Then $``[{#usn7}..{usn2}] Else 0xabc Is Not Null Is Not Null End[Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..])..(_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})][{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}..Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End] As `4esn`  Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),`5esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Load Csv From {`2esn`}[1.e1][False] As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind 01 =~0X7 As #usn8"),
    octest_legacy:ct_string("Remove Reduce(usn1=Count(*)[0.0..{12}][{`8esn`}..{`8esn`}],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|12.e12 =~$`7esn` =~{``}).`5esn`?,Extract(#usn7 In {`5esn`} Ends With `2esn` Where `5esn` =~@usn6 =~$`7esn`|{`6esn`} Starts With $1000).usn2! Return Distinct Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Order By {7}[0X0123456789ABCDEF..][{123456789}..] Descending Limit Case When `1esn` In {`4esn`} Then $0[{``}..`2esn`] When 01234567[usn1] Then {`2esn`} In `5esn` In usn2 End Contains Case When _usn4 Ends With $`3esn` Ends With {`3esn`} Then $``[{#usn7}..{usn2}] End Contains {@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12} Union Delete 0.12[$0..$``],Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] Load Csv With Headers From Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..] As `1esn`  Detach Delete $`2esn`[#usn7],.e0 Is Null Is Null,00[$`2esn`..{7}][usn2..\"d_str\"]"),
    octest_legacy:ct_string("Unwind 0.12 In `8esn` As usn1 Union Load Csv From $_usn3 Starts With $@usn5 Starts With {``} As usn2 "),
    octest_legacy:ct_string("Unwind $`8esn`[$usn1][0X7] As `2esn` With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By {`1esn`} =~{``} =~$`8esn` Desc,$`2esn`[#usn7] Ascending,(`7esn` :``:usn1{#usn7:0[...e1][..$usn2],_usn3:`8esn` =~0})<-[{_usn3:$`3esn` Is Null Is Null}]-(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}) Contains {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Contains Reduce(#usn7=1000 Contains 12.e12,`5esn` In $999[12]|True[..{_usn3}][..999]) Descending Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Where 00[usn1..\"d_str\"][{0}..$`8esn`] With  *,[#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1] As `7esn` Order By $#usn8 Is Not Null Is Not Null Descending,_usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]) Descending Skip 0.12 Is Not Null Is Not Null Limit {#usn8}[False..{usn1}][$`6esn`..0Xa] Where $12[{`5esn`}..] Union Create #usn8=(({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)),`5esn`=(({`3esn`:123456789 Is Not Null})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))"),
    octest_legacy:ct_string("Create @usn6=(`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`}) Merge _usn3=Shortestpath((usn2 :usn2{`6esn`:123.654 In {12} In ``})) On Create Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}] On Match Set #usn8 =$`4esn`,Case 0xabc Contains False Contains {1000} When $`5esn` =~`1esn` =~123.654 Then $_usn3[$usn2..] Else .e12 Is Null Is Null End.`7esn` ={7} In 01234567 In {``} With Distinct usn2[..12.e12][..0.0] As `4esn`,$`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As `1esn`,None(@usn5 In 1.0 Starts With 12)[..(@usn5 :`8esn`:_usn3)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)][..Single(`5esn` In $999[12] Where Count(*) Is Not Null Is Not Null)] As _usn3 Order By 1000 Contains 12.e12 Ascending,0x0 =~0.12 =~$_usn4 Descending Skip _usn3 Ends With {`7esn`} Ends With 12 Where $``[{#usn7}..{usn2}] Union All Unwind #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``) As `3esn` Create Unique `8esn`=(:@usn5:usn2{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null})-[?:usn1|:@usn6* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999}) Foreach(#usn8 In {123456789}[..Count(*)]| Unwind $`2esn`[usn2][#usn7] As usn1)"),
    octest_legacy:ct_string("Load Csv With Headers From $usn1 Ends With {123456789} Ends With 1.e1 As #usn8 Fieldterminator \"d_str\" Union Optional Match (({_usn3:_usn4 =~`1esn`})),`4esn`=Shortestpath(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Using Index `6esn`:``(_usn3) Using Scan `6esn`:`7esn` Where .e12 Is Not Null Union Create ``=(((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(`` :usn2)<-[?:`1esn`|``* 01234567..0Xa{`7esn`:0.0 Starts With $`6esn`,`8esn`:12 Ends With @usn5 Ends With 1e1}]->(`5esn` {usn2:$#usn7 Contains {usn2}}))),({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}}) Foreach(`` In {usn1} Starts With #usn8| Match usn2=((`7esn` :@usn6)-[_usn3:`5esn`|`3esn`]-(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})),`6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Join On #usn8,`3esn`,`1esn` Where {`7esn`}) Create `5esn`=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})))"),
    octest_legacy:ct_string("Load Csv From 01234567 =~{@usn5} =~1e1 As #usn8  Load Csv With Headers From {#usn7} Is Not Null As `5esn`  Union Optional Match Shortestpath((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})),_usn3=(({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`})) Where .e12[$``..] Return *,999[{12}..][$1000..] As @usn6 Order By `4esn` Is Null Desc Return $999 Starts With $usn1 Starts With {`3esn`} As _usn3,$@usn6[..{`6esn`}][...e0] As #usn8,`1esn` In {999} In $123456789 As `3esn` Order By Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End[..Shortestpath((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}))] Descending"),
    octest_legacy:ct_string("Load Csv From [`4esn` Is Not Null,$`6esn`[$7..{`3esn`}],@usn6[9e12..]] =~Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End As usn1 Fieldterminator \"d_str\" Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),`5esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}) Union All Start @usn6=Node:@usn6('s_str') ,`5esn`=Node:#usn7('s_str')Where $`1esn` Ends With {1000} Ends With $`8esn`"),
    octest_legacy:ct_string("Return (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null,{#usn7} Is Null Is Null,{1000}[9e0][`3esn`] Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Limit `6esn` Contains {`3esn`} Union All Unwind {1000} Is Not Null As _usn4 Merge @usn6=Shortestpath((((`3esn` :_usn4:`1esn`)<-[`1esn`?* 0Xa]-(@usn5 :`1esn`)-[?* 00..999]-(:``:usn1{@usn6:07 Is Null})))) Union All Foreach(`2esn` In usn1 Is Not Null Is Not Null| Create Unique ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)),`6esn`=Shortestpath((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ))) Remove {_usn3:`3esn` Starts With @usn5 Starts With {`4esn`},`6esn`:0.12[True..{`4esn`}]}.`3esn`!,Reduce(`6esn`=`1esn` =~12.0,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$12[0xabc..][12e12..]).usn1,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|010].`4esn` Create Shortestpath((@usn5 :usn1{#usn8:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Delete 12.0 In $usn1 In True,{`3esn`} Is Not Null Is Not Null Delete {#usn8}[0.0..$999] Union All Create `5esn`=(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})"),
    octest_legacy:ct_string("Optional Match `7esn`=(({`5esn`:9e0 =~$usn1 =~{@usn6}})),`4esn`=(((`2esn` :_usn4:`1esn`{#usn7:'s_str'[9e12..][12e12..],``:$`1esn` Contains usn2 Contains 1.0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[@usn5?:`8esn`|:_usn3* 0]->(_usn3 :@usn5:usn2))) Using Scan #usn7:_usn3 Using Join On _usn3,`` Union All Foreach(`5esn` In 0x0 Ends With $@usn6 Ends With {usn2}| Unwind `` =~_usn3 =~{`6esn`} As #usn7 Unwind `` =~{0} As #usn7)"),
    octest_legacy:ct_string("Unwind 123.654 Contains $`4esn` Contains .e1 As _usn4 Detach Delete {_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null} =~[010,0X7 Is Null Is Null] With Distinct $`6esn`[`5esn`..][$12..] As `5esn`,$_usn4[0X7..{1000}] As #usn8,Extract(@usn5 In 1.0 Starts With 12 Where True =~_usn3|0.12 In `8esn`) Contains [12[`3esn`..][0X0123456789ABCDEF..]] Contains Filter(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0]) Order By $1000[{#usn8}..] Descending,123.654[12.0..{123456789}] Descending,`1esn` In 12.e12 In $#usn7 Asc Skip Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) Limit False[Count(*)] Union All Remove Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where #usn7[999..``]).usn2,Case 1e1[{`3esn`}][True] When 1.e1[0xabc..][.e12..] Then 0xabc Is Not Null Is Not Null When {#usn7} =~$0 Then 07[0X0123456789ABCDEF] End.usn2,Reduce(_usn3={`1esn`}[\"d_str\"][{1000}],`4esn` In False[0.0..{@usn6}]|0 =~usn1).`3esn` Union All Create Unique _usn3=Shortestpath((((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6)))),Allshortestpaths(((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[:`3esn`|``* 1000]->(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]}))) Merge _usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))) Return $7 Is Null Is Null As _usn3,@usn5(12e12 In Null In {7}) Contains Case When `5esn`[$123456789][`2esn`] Then $`2esn`[Null][{``}] When {`7esn`}[..0xabc][..0e0] Then {#usn7} =~{usn1} Else #usn8 Is Null End Skip $#usn8 Is Not Null Is Not Null Limit $`8esn` Contains 12"),
    octest_legacy:ct_string("Merge _usn4=(_usn4 )<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`4esn`:`3esn`{12})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}) On Create Set {``:$`3esn`[12.e12...e1],`1esn`:0xabc =~{`8esn`} =~{_usn3}}.`3esn`! =07 Starts With 7,_usn3 =`2esn`[0Xa][{`8esn`}] On Create Set usn1+=$#usn8[12e12][0X7],`6esn`+=$``[..{_usn4}][..{@usn6}] Create Unique @usn5=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Union Remove {``:999[$_usn3][@usn6]}.`2esn`?,(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}).`3esn`! Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6!"),
    octest_legacy:ct_string("Unwind `` =~_usn3 =~{`6esn`} As _usn3 Union All Unwind Case @usn5[_usn3..{12}][{999}..$7] When 0xabc =~{`8esn`} =~{_usn3} Then @usn6 In {@usn5} In 123.654 Else $`8esn`[..`6esn`][..#usn7] End Is Not Null As `8esn` Unwind Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})] As @usn6"),
    octest_legacy:ct_string("With Distinct usn1 Starts With {@usn5},_usn4($`6esn`[`5esn`..][$12..])[Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))][All(`5esn` In $999[12] Where $`8esn` Contains 12)] As `2esn` Limit $7[@usn6][0xabc] Where 0xabc[$`2esn`..] Union Start _usn3=Node:usn1(\"d_str\") Where $`7esn` In $999 In {123456789} Foreach(_usn4 In $`3esn` In {`1esn`} In 12e12| Create Unique `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 )) Union Start `6esn`=Relationship:`8esn`({`4esn`}) "),
    octest_legacy:ct_string("With Distinct $@usn5[$7..@usn5] Order By $7[.e1] Descending,usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Descending,0x0 Ends With $@usn6 Ends With {usn2} Asc Limit {#usn7}[9e12..] Where $usn1[..$`1esn`] Remove (usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}}).@usn6 Union All Unwind {7} In 9e1 As _usn4 Delete 0x0 Ends With 123.654 Ends With 01,01[@usn5..{_usn4}] Remove Reduce(usn1=$_usn3[$usn2..],_usn4 In .e12 Is Not Null|12 Ends With 0.e0)._usn3,(:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]})<-[`6esn`?:`1esn`|``]->(`8esn` {`8esn`:12.0[$999..][$@usn6..],``:0.0[`5esn`][1.e1]}).`6esn`"),
    octest_legacy:ct_string("Start `6esn`=Relationship:#usn7(usn2=\"d_str\") ,`5esn`=Rel:`5esn`({_usn3}) Start `6esn`=Relationship:`4esn`(`3esn`=\"d_str\")  Load Csv From `1esn`[..{`4esn`}][..{0}] As `2esn` Fieldterminator 's_str' Union Foreach(`1esn` In {`2esn`} Is Not Null| Start usn1=Node:usn2(_usn3=\"d_str\") Where _usn4 In usn2 Remove Reduce(#usn7=01234567 Is Not Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|$`1esn` Contains $#usn7).`7esn`?,[@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3].usn1) Merge `6esn`=Shortestpath((({@usn5:0[...e1][..$usn2]}))) Union Optional Match Allshortestpaths(((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))) Match (#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[:`4esn`|`2esn`* 00..999]->(:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1),(((:``:usn1{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[?* ..999]->(:@usn5:usn2))) Using Join On `2esn`,#usn8,@usn5 Foreach(`2esn` In $usn2[`4esn`..]| Create ((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`)),`7esn`=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1})))"),
    octest_legacy:ct_string("Detach Delete (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12},0x0 In {`3esn`} Create `1esn`=(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))),`5esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})) Load Csv With Headers From {`6esn`} Is Null As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {`7esn`} =~01234567 =~`7esn` As usn2  Foreach(#usn8 In {999} =~7 =~{usn1}| Create Unique @usn5=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Create ``=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From usn1 Starts With {@usn5} As _usn3 Fieldterminator 's_str' Remove (_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}).`4esn`?"),
    octest_legacy:ct_string("Detach Delete Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null),Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})],1.0 Return *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3 Union Start `8esn`=Relationship:#usn7({``}) Where {_usn4} Is Not Null Unwind $`8esn` Ends With 12 Ends With 0xabc As usn2"),
    octest_legacy:ct_string("With Distinct {#usn7}[..`1esn`],{`4esn`}[..$#usn7] As _usn3,(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As usn2 Order By Case `8esn` =~{`3esn`} =~9e12 When {#usn8} Is Not Null Is Not Null Then $@usn5[$7..@usn5] End[..(#usn7 :#usn7:`6esn`{1000})-[:`3esn`|``]-(:usn1{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})][..{`5esn`:#usn8[#usn8..],#usn7:$_usn3 Is Not Null}] Ascending,Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Asc Where $usn1[..$`1esn`] Foreach(`4esn` In (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`})| Start #usn7=Relationship:@usn6(\"d_str\") Where 's_str' Ends With 's_str' Ends With $1000) Union With  *,`3esn`[#usn8] Skip Reduce(`4esn`=False Contains {``} Contains $`2esn`,`1esn` In {``} =~{`2esn`} =~$`8esn`|#usn8[#usn8..]) Ends With {`7esn`:0[...e1][..$usn2]} Ends With (:_usn3:@usn6{usn2:usn1 =~1000 =~12})-[usn2?:`5esn`|`3esn`* ..999]-(`6esn` :#usn7:`6esn`)<-[`8esn`?:_usn4|`5esn`]->(usn2 $`3esn`) Foreach(usn2 In {usn1}[..{#usn7}]| Delete Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) In Case usn1[{123456789}..][010..] When {usn1} Contains 123.654 Contains {#usn8} Then 0xabc Contains False Contains {1000} When @usn5[_usn3..{12}][{999}..$7] Then 0X7[#usn7..][12e12..] Else $`8esn` Starts With $123456789 End In (usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 01..]-(`5esn` {#usn8:True Ends With usn1})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}),.e1 In $123456789 In _usn3,0Xa Is Not Null Is Not Null Create Unique ``=Shortestpath((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]}))) Union Start @usn5=Rel:`5esn`('s_str') Where 0X7 Is Null Is Null Match Shortestpath((((`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})-[?{`5esn`:9e0 =~$usn1 =~{@usn6}}]->(_usn4 :_usn3:@usn6)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})))),((()<-[_usn4?* 00..999{_usn3:9e1[010..][`5esn`..],`1esn`:$@usn6[..{`6esn`}][...e0]}]-(#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})<-[@usn6?:_usn4|`5esn`* ..12]->({`3esn`:_usn3 In 1.e1}))) Using Join On `6esn`,``,`5esn` Merge #usn7=(`7esn` :_usn3:@usn6) On Create Set `2esn` =Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null"),
    octest_legacy:ct_string("Merge ``=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))) On Create Set [`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]|0.e0[#usn7..][$@usn5..]].`3esn`? =[@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}],`3esn` =Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null On Match Set usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]).usn1 =$12 Starts With $`3esn` Starts With $_usn3 Load Csv With Headers From {@usn6} In $999 In 01234567 As `` Fieldterminator 's_str' Union All Foreach(#usn8 In $`7esn` =~#usn8 =~{`7esn`}| Create Unique @usn5=((@usn6 {#usn8:$`7esn` Ends With usn2,`8esn`:1.e1[0xabc..][.e12..]})<-[#usn8?]-(`7esn` :`6esn`:`4esn`)-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}))) Start #usn7=Node:#usn8(`4esn`=\"d_str\") ,`5esn`=Relationship:#usn7({``})Where `4esn` Starts With $12 Starts With $12 Union Create #usn8=((#usn8 :@usn6)<-[`6esn`{``:$0,`4esn`:`4esn` Starts With 9e12 Starts With 00}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]})),`2esn`=(_usn4 :_usn4:`1esn`) Merge `5esn`=Shortestpath((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0})))"),
    octest_legacy:ct_string("Start `7esn`=Node:`6esn`({#usn8})  Union Merge ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}})) On Match Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])] Union Create ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})"),
    octest_legacy:ct_string("Load Csv From 999[.e1..{`5esn`}][{#usn7}..{`1esn`}] As `6esn` Fieldterminator 's_str' Foreach(`5esn` In Case {`4esn`} Contains \"d_str\" When 01234567[usn1] Then $`4esn`[{@usn5}] When $12[{`5esn`}..] Then {@usn6} Starts With 00 Else `3esn` =~12e12 End Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null]| Return Distinct Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),$12 Contains .e1,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn1 Order By Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) Descending Limit #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``)) Detach Delete `8esn` =~{`3esn`} =~9e12 Union Load Csv With Headers From Case {`4esn`} Contains \"d_str\" When 01234567[usn1] Then $`4esn`[{@usn5}] When $12[{`5esn`}..] Then {@usn6} Starts With 00 Else `3esn` =~12e12 End Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null] As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return Distinct `8esn` =~0 As `8esn`,`2esn` =~$#usn7 =~_usn4 Order By False[0.0..{@usn6}] Ascending,{`3esn`:0 =~usn1,usn2:010 Ends With 123456789 Ends With .e0} In Case When {_usn3} In 010 In 0.e0 Then 0xabc =~{`8esn`} =~{_usn3} When 123456789 Is Not Null Is Not Null Then 9e12 Contains {`4esn`} End In Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`) Ascending,usn2[..$`8esn`][..``] Desc Skip Case #usn7 Contains 0X0123456789ABCDEF When 's_str' Ends With 's_str' Ends With $1000 Then `3esn` Is Null Is Null End =~Reduce(usn1=2.12 Contains `4esn` Contains .e1,`6esn` In {1000} Is Not Null|`4esn` Starts With $12 Starts With $12) Limit 123456789[$`5esn`] Return Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],'s_str' Contains $_usn4 Contains $`7esn` As `8esn`,$`8esn` Contains {`7esn`} Contains $`4esn` As @usn6 Limit Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Union All Match Allshortestpaths(((#usn7 {_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}))),((`1esn` {`3esn`:0.12 In `8esn`})<-[`8esn`?:_usn4|`5esn`]->(usn2 $`3esn`)) Using Join On #usn8 Where .e12 Contains {`6esn`} Contains .e12 Return Distinct *,$12[`6esn`][$#usn8] Order By {`6esn`} Is Null Asc Skip 12e12 Delete @usn6(Distinct _usn4 In usn2)[..Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654)][..#usn8(0.12 Is Not Null,0.e0[True..][True..])],.e0[..@usn5][..usn2] Union All With  $#usn7[$usn2..@usn6][$`7esn`..{7}],0x0 Is Null As `4esn` Skip $`2esn` Contains `5esn` Contains .e1 Limit _usn4(Null[..010][..$@usn6])[..Any(`4esn` In False[0.0..{@usn6}] Where $7[.e1])] Where $#usn7 Starts With $`4esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Is Not Null Is Not Null As usn2 Fieldterminator \"d_str\" Load Csv From Filter(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc)[Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))][[9e1 =~$`4esn` =~{usn2}]] As `1esn`  Unwind 01 =~_usn4 =~7 As _usn3"),
    octest_legacy:ct_string("Remove Case .e0 Contains $@usn6 When 0.0[010..12.e12] Then {`2esn`} Else {`2esn`}[@usn6][{_usn3}] End.`2esn`!,(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[`4esn`?* 01..{#usn7:1.0 Is Not Null}]-(:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12}).#usn7,(`4esn` {@usn5:`3esn`[#usn8]})<-[_usn3?:_usn3|:`6esn`]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}]-(`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3}).`6esn`! Start `3esn`=Node:#usn8({_usn4})  Create ((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`})),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Union Detach Delete 0.e0 In 9e0 In 0e0,0[`6esn`][1e1],`4esn`(12[$`8esn`..{_usn4}])[Reduce(`1esn`=7 Is Null Is Null,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$#usn8 In {12} In $`4esn`)..] Create usn1=((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0})),(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[?:usn2|_usn3* 07..]-(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Create @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))"),
    octest_legacy:ct_string("With Distinct *,$12[`6esn`][$#usn8] Order By {`6esn`} Is Null Asc Skip 12e12 Union Merge `6esn`=((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) On Create Set (:#usn8:#usn7{usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(:@usn5:usn2{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}})-[`1esn`?* 0Xa]->(_usn3 :`3esn`:@usn5).`2esn`? =0Xa Is Null Is Null On Match Set #usn8+=False[0e0],usn2+=[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]] Contains Case 12e12 In Null In {7} When 12e12[``..][$`3esn`..] Then .e12 Is Null Is Null Else {_usn4} End Contains None(`5esn` In $999[12] Where False[0.0..{@usn6}]),Case {usn1} Ends With {#usn7} Ends With 12.0 When 0[{`4esn`}..] Then $#usn7 =~Count(*) =~@usn5 When $``[..{_usn4}][..{@usn6}] Then @usn6[..{usn2}][..{`5esn`}] Else 1.0 Starts With 12 End.`2esn` =0X0123456789ABCDEF Starts With #usn7"),
    octest_legacy:ct_string("Optional Match `4esn`=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})),((`5esn` :@usn6)-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Where True =~_usn3"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $@usn6 As `2esn` Fieldterminator 's_str' Return Distinct *,`3esn` =~12e12,@usn5[..$`7esn`][..$`6esn`] Order By {`4esn`} Is Null Desc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) As `3esn` Fieldterminator 's_str' Unwind `6esn` Contains {`3esn`} As usn1"),
    octest_legacy:ct_string("Load Csv From Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) As `2esn` Fieldterminator \"d_str\" Return *,[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Skip {999} Is Not Null Is Not Null Limit $1000 Is Null Is Null Create (((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn6?:_usn4|`5esn`* ..12]->(_usn3 :`4esn`:`3esn`)<-[`6esn`:@usn5|``{usn2}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}))),_usn3=Shortestpath((((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})<-[?:`1esn`|``* 123456789..999]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`}))))"),
    octest_legacy:ct_string("Merge @usn5=Shortestpath((((`7esn` :`7esn`:_usn4)-[?* ..999]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))) On Match Set `5esn`+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Remove [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7 In $usn2 In {1000}].#usn8! Start #usn7=Relationship:usn2(`5esn`={_usn3}) ,_usn4=Rel:`4esn`(_usn4=\"d_str\")Where $#usn7 Starts With $`4esn` Union All Start ``=Relationship:`5esn`(`4esn`=\"d_str\")  Return Distinct *,123.654 In {12} In `` As `1esn`,Null[False..][12.e12..] Order By {1000} Starts With {_usn4} Descending Skip 0X7 =~$`6esn`"),
    octest_legacy:ct_string("Start #usn7=Relationship:usn2(`5esn`={_usn3}) Where $usn1[0X0123456789ABCDEF...e12]"),
    octest_legacy:ct_string("Remove (:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})-[#usn7{`2esn`:01[$`1esn`..\"d_str\"]}]->(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}).`4esn`,Allshortestpaths((((`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn3?:`6esn`|:`7esn`]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(`1esn` {_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})))).`2esn`!,[0X7 =~$`6esn`,$`1esn` Contains usn2 Contains 1.0,0Xa Contains {`4esn`} Contains {`1esn`}].usn1 Merge `2esn`=((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[@usn5?* 00..999]->(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})) Unwind Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))[Case When 0.0[.e12..] Then `4esn` Is Not Null When `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] Then $`1esn` Starts With 999 End][Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`})] As `5esn` Union All Return *,12[$`8esn`..{_usn4}] As #usn8,0Xa[$#usn8] As usn1 Return 1.0 Ends With {`4esn`} Ends With {`2esn`} As `1esn` Order By None(@usn5 In 07[{_usn4}..{`4esn`}] Where {`2esn`}[..``]) Is Null Is Null Desc,$`6esn`[$7..{`3esn`}] Asc Skip 0.12 Ends With $_usn3 Ends With 07 Load Csv From $1000[999..][0Xa..] As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 999[{123456789}..999] As `5esn`  Create ``=Shortestpath(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})),`7esn`=((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}}))"),
    octest_legacy:ct_string("Load Csv With Headers From 0.12[{usn1}..{1000}][{0}..{#usn8}] As `5esn`  Merge usn2=Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) On Create Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Union All Remove Allshortestpaths((((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[?:`1esn`|``* 123456789..999]->(_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})))).`7esn`,#usn8(Distinct $0[{``}..`2esn`]).`1esn`? Start `7esn`=Rel:`7esn`(`3esn`={`4esn`}) ,_usn3=Rel:`1esn`(`7esn`={_usn3}) Create Shortestpath((@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[`5esn`?:`5esn`|`3esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})-[?* 00..999]->(`4esn` :@usn6)),`4esn`=Shortestpath(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Union Detach Delete 0xabc In 9e1,All(usn2 In {@usn5} Where 0[`6esn`][1e1])[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 9e12 Is Null Is Null|@usn5[..$`7esn`][..$`6esn`]]..()<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})],{`7esn`:$@usn5[$123456789..][@usn5..]} Contains [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Contains Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4])"),
    octest_legacy:ct_string("Start usn2=Node( {`6esn`}) ,`4esn`=Node(*) Union All Merge `1esn`=Shortestpath((:`4esn`:`3esn`{12})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) On Match Set {_usn3:$`3esn` Is Null Is Null}.usn2? =Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] Start `5esn`=Node:`4esn`(`2esn`={7}) ,`8esn`=Node:_usn3('s_str')Where .e1 Is Not Null Union All Merge (`3esn` :``:usn1)<-[:@usn6]->(`2esn` :_usn4:`1esn`{#usn7:'s_str'[9e12..][12e12..],``:$`1esn` Contains usn2 Contains 1.0}) Create Unique Shortestpath((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})-[?:``]-({`3esn`:.e12 Is Not Null})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})),@usn5=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Unwind Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] As `4esn`"),
    octest_legacy:ct_string("Remove [{`3esn`} Ends With $123456789 Ends With {12},9e12 In 's_str' In $`4esn`].`5esn`?,Extract(`6esn` In {1000} Is Not Null|12e12 In Null In {7}).`3esn`!,Filter(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}).@usn5? Remove $1000.`6esn`!,Case When `6esn` =~12.e12 =~123456789 Then 1000 Starts With {7} Starts With $7 End.`5esn`! Union Merge _usn3=(({`3esn`:{#usn8} Is Not Null Is Not Null})) On Create Set `5esn` =$`7esn` Ends With $1000 Ends With {999},`8esn` =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),Allshortestpaths((usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`})).`1esn`? =Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] On Create Set `8esn` =(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}) Starts With Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $`6esn`[`5esn`..][$12..]) Starts With 1.e1 Optional Match `4esn`=(:`6esn`:`4esn`{usn1})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 :@usn5:usn2)<-[* 0]-(usn1 :`4esn`:`3esn`),((_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[?:usn1|:@usn6{_usn4:$`8esn` In {`2esn`} In $0}]-(usn2 $`3esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})) Using Join On #usn8,_usn3 Using Join On #usn8,`8esn`,`8esn` Where $7[@usn6][0xabc]"),
    octest_legacy:ct_string("Create Unique `6esn`=Shortestpath((:`1esn`{@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(_usn3 :_usn3:@usn6)) Match ``=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),`1esn`=Shortestpath(((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]}))) Using Index `7esn`:`1esn`(`7esn`) Using Join On _usn4 Union Merge Shortestpath(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) Merge (({`2esn`:$`2esn`[#usn7][01]})<-[?{_usn4}]-(usn2 :@usn6{_usn3:$7[..999][..`2esn`],`1esn`:12 =~$`5esn` =~$_usn3})<-[?:`4esn`|`2esn`* 07..{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}]-(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})) On Create Set `1esn`+=`6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] Create `2esn`=(:`4esn`:`3esn`{``:@usn6[9e12..],`8esn`:`6esn` Contains `6esn` Contains 9e1})-[`5esn`?:_usn3|:`6esn`]-(@usn5 :`6esn`:`4esn`)-[_usn4* 0x0..7{``:{`6esn`} Is Not Null}]-(_usn3 {_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]}),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]}) Union All Load Csv With Headers From $0 Ends With 12.0 Ends With _usn4 As _usn3  Foreach(_usn4 In $`1esn`[0..{_usn3}]| With Distinct `8esn`[$123456789..][$usn1..] As @usn6,0.12 Ends With $_usn3 Ends With 07 As `4esn` Order By `4esn`[0X0123456789ABCDEF..{999}][True..{_usn3}] Desc Where 9e0[..{usn1}]) Merge #usn7=(({`5esn`:9e0 =~$usn1 =~{@usn6}})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[:`4esn`|`2esn`* 00..999]->(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})) On Create Set @usn5 =.e1 In $123456789 In _usn3,`7esn`+=.e0 In 9e1 In $_usn3 On Create Set @usn6 =All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null)[($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})..Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End]"),
    octest_legacy:ct_string("Merge usn1=Allshortestpaths(((_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[?:usn1|:@usn6{_usn4:$`8esn` In {`2esn`} In $0}]-(usn2 $`3esn`)-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}))) Union Load Csv With Headers From `8esn`[$123456789..][$usn1..] As `6esn` Fieldterminator \"d_str\" Return Distinct *,$12 =~{12} As #usn8,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) Skip [`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0|$`3esn` Contains .e1][(_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})..] Limit All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]]"),
    octest_legacy:ct_string("Load Csv With Headers From `8esn`({`8esn`} In 12 In 1e1) In Allshortestpaths((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})) In {`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]} As usn1  Load Csv From 0e0 Ends With 0x0 Ends With $@usn5 As `1esn`  Merge #usn7=(`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000}) On Match Set @usn5+=Count(*)[{usn1}..][$`7esn`..],`4esn` =[@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Is Null Is Null,`8esn`+={#usn7}[{`1esn`}..][`1esn`..] On Create Set _usn4 =$#usn7 =~Count(*) =~@usn5,@usn5+=Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null,`3esn`+=1.0[Extract(usn1 In #usn8 =~$@usn5 Where 0[...e1][..$usn2]|01234567[usn1])][(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1)] Union Start `4esn`=Rel:@usn6(`8esn`={`7esn`}) ,`4esn`=Rel:_usn3({_usn3})Where 1e1 In $0 Remove Reduce(@usn5=#usn8[#usn8..],@usn5 In 1.0 Starts With 12|`4esn`[usn2..]).usn1!,{`2esn`:0xabc Ends With 1.0 Ends With $``,`3esn`:.e12 Ends With {`2esn`}}.@usn5 Union All With  Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789},{`2esn`} Contains `7esn` Contains {`4esn`} As `5esn` Limit $0[.e0][.e1] Where .e12[$``..] Return Distinct {`6esn`}[{usn2}..$`3esn`][12.0..0xabc] Order By `5esn` Descending"),
    octest_legacy:ct_string("Load Csv With Headers From 7 Is Null Is Null As `4esn` Fieldterminator 's_str' Union All Start @usn6=Rel:``(``={_usn4}) ,#usn8=Node:`5esn`({_usn3})Where {#usn8} Ends With {123456789} Ends With #usn8"),
    octest_legacy:ct_string("Detach Delete Filter(@usn5 In 1.0 Starts With 12 Where 0.0 Starts With $`6esn`) Ends With (#usn7 :usn1)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2) Create Unique usn2=Allshortestpaths((:_usn3:@usn6{`2esn`:$`2esn`[#usn7][01]})) Union All Load Csv With Headers From $`1esn` Contains $#usn7 As `7esn` Fieldterminator 's_str' Return 0Xa[01..$`1esn`] Order By 123456789[{@usn6}..][9e0..] Ascending,Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Asc,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Is Not Null Is Not Null Ascending Skip Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) Union Merge @usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})"),
    octest_legacy:ct_string("Detach Delete Case When @usn6 Contains {0} Then 12 =~$`5esn` =~$_usn3 When {usn2}[{`7esn`}][$usn2] Then $12[`6esn`][$#usn8] Else \"d_str\" Ends With 0e0 Ends With {usn2} End Is Null Is Null,`2esn` Ends With $`6esn` Ends With 12.0 Load Csv With Headers From {@usn6} Contains {_usn3} Contains 1000 As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From 123456789 Is Not Null As `5esn` Fieldterminator \"d_str\" Create Unique Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Start @usn5=Node:@usn6(\"d_str\") "),
    octest_legacy:ct_string("Remove Case When 0[0xabc] Then {@usn6}[..0.e0][..$0] End.`3esn`?,{usn2:$`7esn` =~#usn8 =~{`7esn`},`8esn`:`1esn` In {`4esn`}}.`7esn`"),
    octest_legacy:ct_string("Return *,'s_str' =~9e12 =~0.0 As `4esn` Skip $@usn5 =~{`8esn`} =~\"d_str\" Limit 0X0123456789ABCDEF[.e1..`2esn`]"),
    octest_legacy:ct_string("Detach Delete 010[$12..],$`2esn`[#usn7] Unwind 0 Is Null Is Null As _usn4 Union All Merge `1esn`=Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 's_str'[..'s_str'][..{#usn7}]).`3esn`? =123456789 Is Null Is Null,@usn5+=12.0 Ends With 0e0 Ends With $123456789 Remove [`7esn` In @usn5[01..`6esn`] Where 1.0].`7esn`? Start @usn6=Rel:``(``={_usn4}) ,#usn8=Node:`5esn`({_usn3})Where {#usn8} Ends With {123456789} Ends With #usn8"),
    octest_legacy:ct_string("Detach Delete `8esn`[$123456789..][$usn1..] Return *,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),@usn6[9e12..] As `7esn` Order By 0X0123456789ABCDEF[..$`1esn`] Asc,$`5esn` =~`1esn` =~123.654 Desc Skip {`7esn`} =~01234567 =~`7esn` Union Foreach(@usn5 In Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0 Ends With .e0) Is Not Null Is Not Null| Start `6esn`=Node:usn1(@usn5={`1esn`})  Optional Match Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Using Scan @usn6:@usn5) Start `1esn`=Node:_usn3(usn2=\"d_str\") ,usn2=Node:@usn6(`7esn`={#usn7}) Match `6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Where $@usn5[$123456789..][@usn5..] Union Return Distinct *,1.e1[$`3esn`] Detach Delete 0.e0[$`1esn`..] Optional Match (`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[usn1?:@usn5|``]-(:`1esn`{@usn5:{`4esn`} Is Null}),usn1=Allshortestpaths(((:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}))) Where $`8esn`[2.12][$_usn4]"),
    octest_legacy:ct_string("Match usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),@usn5=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) Where 00 Starts With 12 Starts With 0e0 Remove None(usn2 In 999[{123456789}..999] Where {@usn5}[{``}][{_usn4}]).#usn7? With Distinct *,$7 In $usn2 In {1000} Order By {`4esn`} Starts With $12 Starts With 0Xa Desc,{7} Is Null Is Null Desc,$@usn5[00][0Xa] Asc Where $usn1 Ends With {123456789} Ends With 1.e1 Union All With Distinct *,$`8esn` In Count(*) In $usn1,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) Union All Foreach(usn2 In 0X0123456789ABCDEF Is Not Null Is Not Null| With Distinct @usn5[_usn3..{12}][{999}..$7] As `4esn` Order By 0X7 Is Not Null Is Not Null Asc,{usn1} Starts With #usn8 Desc Skip Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null Limit 1e1 In 0xabc Where #usn7[9e1..$@usn5] Unwind Single(`4esn` In False[0.0..{@usn6}] Where $`2esn`[{@usn5}..12.e12][9e0..$`8esn`]) In {_usn4:0.12 In `8esn`,@usn5:`7esn`[..{`8esn`}]} As usn1)"),
    octest_legacy:ct_string("Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Using Scan _usn4:usn2 Using Index @usn6:@usn6(@usn6) Unwind 1.0[Extract(usn1 In #usn8 =~$@usn5 Where 0[...e1][..$usn2]|01234567[usn1])][(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1)] As `6esn` Start usn1=Node:`1esn`(`7esn`={_usn3}) ,@usn6=Node:@usn5('s_str') Union Unwind @usn6[9e12..] As `1esn` Foreach(`5esn` In [@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null| Create Shortestpath(((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]})))),@usn6=((:``:usn1)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1})) Load Csv With Headers From {`5esn`} Ends With `2esn` As @usn6 )"),
    octest_legacy:ct_string("Load Csv From `1esn`(Distinct)[..Allshortestpaths((:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[``?{_usn4:$``[{#usn7}..{usn2}],`3esn`:$12 Contains .e1}]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))] As @usn5 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove #usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True).`5esn` Create Unique Allshortestpaths(({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})) Union All Start #usn7=Rel:`7esn`(`6esn`=\"d_str\") Where 0xabc Is Not Null Is Not Null Create Unique usn2=Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}) Union Create Unique ``=((({#usn8:{`2esn`}[..$`6esn`][..`3esn`]})-[?:`1esn`|``* 01234567..0Xa]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]}))),`4esn`=Allshortestpaths(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))) Create Unique `2esn`=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})))"),
    octest_legacy:ct_string("Start ``=Rel:`1esn`(usn2={@usn6}) Where {#usn7} =~{usn1} Detach Delete [usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3|0.12 Is Not Null] Starts With Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0|$`1esn`[0..{_usn3}]) Starts With {`1esn`:$`5esn` Starts With 1.0 Starts With $usn2,@usn6:010[.e12]},`4esn` Starts With $12 Starts With $12,`3esn`()[Extract(`7esn` In @usn5[01..`6esn`] Where False Is Null Is Null)..] Detach Delete {`7esn`}[..$`8esn`][..{`8esn`}],Allshortestpaths(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) In Case usn1[{123456789}..][010..] When {usn1} Contains 123.654 Contains {#usn8} Then 0xabc Contains False Contains {1000} When @usn5[_usn3..{12}][{999}..$7] Then 0X7[#usn7..][12e12..] Else $`8esn` Starts With $123456789 End In (usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[* 01..]-(`5esn` {#usn8:True Ends With usn1})-[?:usn1|:@usn6* ..12$`6esn`]-({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}),$@usn5 =~{`8esn`} =~\"d_str\" Union All Load Csv With Headers From Count(*) In {`4esn`} As `5esn` Fieldterminator 's_str' Union Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e0 Starts With usn2|#usn7 Ends With {@usn5}).usn1! Remove _usn3({usn2} Is Not Null Is Not Null).`8esn`! Unwind All(`4esn` In False[0.0..{@usn6}] Where {`7esn`})[Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null)..[`7esn`[`5esn`..][0.12..],{`2esn`} Contains 0.12 Contains 0.0]] As usn1"),
    octest_legacy:ct_string("Load Csv From $123456789[{`1esn`}][0.12] As @usn6 Fieldterminator \"d_str\" Optional Match usn2=(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[`5esn`* 0Xa]->(:usn1{_usn3:.e0 Starts With {0} Starts With 0x0}),((`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})-[`3esn`?* 0xabc..01234567]-(usn2 {`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})) Using Index `5esn`:`6esn`(usn2) Using Index `3esn`:`3esn`(#usn8) Where `1esn` =~12.0"),
    octest_legacy:ct_string("Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6! With Distinct Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Order By $`7esn` Ends With $1000 Ends With {999} Asc,{999}[{0}][$#usn8] Asc Union Load Csv With Headers From {_usn4} As `8esn`  Remove #usn7:usn2 Load Csv From [0xabc[$`2esn`..],.e1 Is Not Null,{_usn4} Ends With 12.0 Ends With $@usn6] Is Not Null Is Not Null As `3esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {1000}[$``..$`6esn`][{@usn5}..$_usn4] As `4esn` "),
    octest_legacy:ct_string("Load Csv With Headers From (`7esn` :``:usn1{#usn7:0[...e1][..$usn2],_usn3:`8esn` =~0})<-[{_usn3:$`3esn` Is Null Is Null}]-(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}) Contains {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Contains Reduce(#usn7=1000 Contains 12.e12,`5esn` In $999[12]|True[..{_usn3}][..999]) As _usn3  Return Distinct $`3esn` Ends With `8esn` Ends With {`5esn`} As `2esn`,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Skip 9e0 Ends With `` Ends With 010 Limit $`7esn` Is Null Detach Delete {`8esn`} Is Null Is Null,1e1 In @usn6 In 0X0123456789ABCDEF,{999}[..{_usn4}][..`6esn`]"),
    octest_legacy:ct_string("Remove (`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})<-[`5esn`* 01234567..0Xa]->(_usn3 :`1esn`{`3esn`:.e12[0.0..][$#usn8..],``:12 Is Null Is Null})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}).`7esn`? Union Delete (:#usn7:`6esn`{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})-[#usn7:`5esn`|`3esn`]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})<-[usn1?:@usn5|``* 0X0123456789ABCDEF]->(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})[Filter(#usn7 In $@usn6 Contains 0 Contains 0 Where 00[usn2..`3esn`][0X0123456789ABCDEF..$7])..All(usn2 In {@usn5} Where $1000 Is Null Is Null)][{`5esn`:12e12[..Count(*)][..$usn2],`6esn`:010 Starts With `3esn` Starts With {usn1}}..Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)],'s_str'[..$123456789][..{1000}],Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] Remove Reduce(``=$usn1[{_usn3}],`1esn` In {``} =~{`2esn`} =~$`8esn`|False Is Null Is Null).`1esn`! Create Unique (({_usn3:0.0[010..12.e12]})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Union All Load Csv With Headers From (@usn5 :@usn5:usn2{`1esn`:{`3esn`}[`6esn`..],`1esn`:1.e1[0xabc..][.e12..]})-[@usn6?:`2esn`* 01..{``:2.12 Contains @usn5 Contains {``},``:{#usn8} In 07 In 0}]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(`` :usn1)[[usn2 In {@usn5} Where 0.0|Count(*)[#usn8][$usn1]]][All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)] As #usn7  Delete {@usn5}[{`6esn`}..$0][1000..$1000],1.0 Starts With 12 Optional Match Allshortestpaths(((:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567}))),(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}) Using Scan #usn7:@usn5 Where 01234567 Starts With 01 Starts With 1.e1"),
    octest_legacy:ct_string("Detach Delete $7 In $usn2 In {1000},[{@usn6} Contains {_usn3} Contains 1000,$usn1[..$`1esn`]][{`5esn`:Null[False..][12.e12..]}..[`4esn` Is Null]],Reduce(#usn7=0[1.0..$``],@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|010 Ends With 123456789 Ends With .e0)[Shortestpath((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[`6esn`?:`1esn`|``]->(`8esn` {`8esn`:12.0[$999..][$@usn6..],``:0.0[`5esn`][1.e1]}))..Reduce(_usn4=12 Is Null Is Null,`5esn` In $999[12]|{`2esn`}[..``])][Case Null In {_usn3} In _usn3 When {`6esn`} Is Not Null Is Not Null Then $#usn8[12e12][0X7] End..Reduce(usn2={`2esn`}[{123456789}..$#usn7][_usn3..999],usn1 In {usn2} Contains {123456789} Contains 0Xa|{usn1}[..{#usn7}])] Return `4esn` In \"d_str\" In $``,usn1 Contains `6esn` Contains 1000,{`5esn`}[0X7..] As `5esn` Order By 123456789[{@usn6}..][9e0..] Ascending,9e1 Contains {#usn8} Contains `5esn` Ascending,`4esn`[$999..][1.0..] Asc Skip usn1(False[0.0..{@usn6}]) Is Not Null Is Not Null Limit 0X0123456789ABCDEF Starts With #usn7 Union Load Csv From Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]) As _usn4 Fieldterminator \"d_str\" Match (`1esn` :@usn5:usn2),Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Join On _usn3,`8esn` With  Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)],[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..] Order By 010 Asc,{`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] Desc,`5esn`(Distinct @usn5[01..`6esn`],7[`7esn`..usn2][$`5esn`..0X7]) Is Null Is Null Desc Skip _usn3 Starts With $#usn7 Starts With $`` Limit {`4esn`} Is Null Where $#usn7 Is Null"),
    octest_legacy:ct_string("Unwind #usn7[..$`1esn`][..{`1esn`}] As `2esn` Merge ``=(`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}) On Create Set `1esn`+=0 Contains 123.654 On Match Set `4esn` =12[0X0123456789ABCDEF..][Count(*)..],#usn7+=9e0 Is Not Null Is Not Null Union Load Csv With Headers From Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As _usn3  Optional Match ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)) Using Scan `2esn`:`7esn` Where 1e1 In $0 Foreach(`4esn` In `5esn`[$12..][`2esn`..]| Unwind usn1 Contains $999 As _usn3 Return *,0X0123456789ABCDEF Starts With #usn7,Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Skip {`2esn`}[usn2..][$#usn7..])"),
    octest_legacy:ct_string("Remove Filter(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]).usn2!,(`` :usn1)-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]})-[?:`6esn`|:`7esn`* 1000]-(_usn4 :_usn3:@usn6{_usn4:Null[False..][12.e12..]}).`4esn`!,None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 7 Is Null Is Null).`2esn` Load Csv With Headers From {_usn4} =~{`7esn`} =~$#usn7 As ``  Create ((`8esn` :usn1)),(:#usn7:`6esn`{`5esn`:@usn5 In 00,`6esn`:0.e0[$`1esn`..]})<-[@usn5?* 00..999]->(`3esn` :#usn8:#usn7{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1}) Union Optional Match `1esn`=Shortestpath((`` )),(:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->(`3esn` :@usn6)<-[`4esn`?:`8esn`|:_usn3* 01..{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}) Remove All(`6esn` In {1000} Is Not Null Where Count(*) In {`4esn`}).@usn5?,Reduce(`2esn`=123.654 Starts With `8esn` Starts With @usn5,#usn8 In True In `8esn`|010[$12..]).usn2?,{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}.`7esn`! With Distinct *,$`3esn`[`3esn`..],{``}[$`4esn`..`8esn`][$_usn4..$`3esn`] As usn2 Order By 0[`6esn`][1e1] Asc,.e1[..`2esn`] Desc Skip 0 =~usn1 Limit {12} Is Null Union Create Allshortestpaths((((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))),((:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[_usn4?:``]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Unwind $`1esn` Contains $#usn7 As `3esn` Create Allshortestpaths(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)),@usn5=(_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})"),
    octest_legacy:ct_string("Start @usn6=Node:`2esn`({`6esn`}) ,usn1=Node:usn2(_usn3=\"d_str\")Where 0 Contains 123.654 Merge (`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}) Union All Remove Case When $`6esn` Is Not Null Is Not Null Then $@usn6 Else `4esn` Is Null End._usn3?,Single(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]).`` Start `1esn`=Node:_usn4(\"d_str\") ,`7esn`=Rel:#usn7(`3esn`={_usn4}) Unwind {usn1}[..{123456789}] As usn1 Union All Load Csv From {`2esn`}[1.e1][False] As `4esn` Fieldterminator \"d_str\" Create Unique (({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})),`6esn`=Allshortestpaths((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Remove (#usn8 {`1esn`:$7 In $usn2 In {1000},@usn6:1e1 In $0})<-[`6esn`:@usn5|``{usn2}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})<-[`2esn`?* 7{@usn5:@usn5 In 00}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}).`2esn`?,(:`8esn`:_usn3)-[#usn7{`2esn`:01[$`1esn`..\"d_str\"]}]->(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})._usn3"),
    octest_legacy:ct_string("Unwind All(`4esn` In False[0.0..{@usn6}] Where {`7esn`})[Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null)..[`7esn`[`5esn`..][0.12..],{`2esn`} Contains 0.12 Contains 0.0]] As usn1 Create _usn3=(:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2),@usn5=((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]})-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)) Union All Return Distinct $`3esn` Ends With `8esn` Ends With {`5esn`} As `2esn`,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Skip {`7esn`} Return *,{999} =~0.0 =~$`` As usn1"),
    octest_legacy:ct_string("Start `3esn`=Node:_usn4({`5esn`}) Where $@usn5[`2esn`..][#usn7..] Foreach(`` In [{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])]| With Distinct *,Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) As `5esn` Order By {`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] Asc,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} Asc Skip $_usn3 Ends With 1e1 Ends With 12e12 Limit `5esn` In 123.654 In {`6esn`} Where $`4esn` Contains @usn5 Contains {`8esn`}) Foreach(`4esn` In {#usn7} Contains \"d_str\" Contains {_usn4}| Detach Delete exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In [#usn8[1e1..]] In Case When {#usn8} =~$0 Then $12 Is Null End,$@usn5 Starts With 1e1 Remove `7esn`(Distinct 0xabc[0.e0..][$7..])._usn3!,Reduce(`7esn`=$0 =~_usn3,#usn7 In $@usn6 Contains 0 Contains 0|{`7esn`} Starts With 12.0 Starts With 07)._usn3,Reduce(`3esn`=12 =~{#usn7},usn2 In {@usn5}|{999} =~7 =~{usn1}).usn1!)"),
    octest_legacy:ct_string("Remove All(`4esn` In False[0.0..{@usn6}] Where 12.0 Starts With 00 Starts With 9e1).`8esn`!,Case 0x0[{`1esn`}] When 1e1[1.e1..] Then 999[$_usn3][@usn6] End.#usn7 Union Start _usn3=Relationship:#usn8(#usn7=\"d_str\") ,``=Node:`2esn`({1000})"),
    octest_legacy:ct_string("With  *,{1000} Is Not Null As ``,{1000} Is Not Null As `` Order By usn1[#usn8..0.0] Ascending,{`7esn`}[..0xabc][..0e0] Asc,Reduce(#usn7=$999 In $999,#usn8 In True In `8esn`|$#usn8 Is Not Null) Is Not Null Is Not Null Desc Skip .e0 Contains $@usn6 Where False Contains {``} Contains $`2esn` Union All Start usn2=Node:#usn7({`2esn`})  Match #usn7=Allshortestpaths(((#usn7 :`7esn`:_usn4)-[`7esn`?:#usn7|:``* 0x0..7]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`}))),(((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}}))) Using Scan ``:_usn3 Using Index `8esn`:#usn8(usn1) Where {`2esn`}[..$`6esn`][..`3esn`] Merge usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))) Union Start usn1=Node:usn2(_usn3=\"d_str\") Where _usn4 In usn2 Delete $@usn5[`2esn`..][#usn7..],'s_str' Is Not Null"),
    octest_legacy:ct_string("Merge `6esn`=Shortestpath((`7esn` :`3esn`:@usn5{#usn7:1.0 Starts With 12,`7esn`:$999 =~$999 =~usn2})) Create usn1=Shortestpath(((_usn3 :`4esn`:`3esn`)-[`7esn`?:#usn7|:``* 0x0..7]-(:#usn7:`6esn`{999}))),#usn8=Shortestpath(((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789}))) Optional Match ((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan usn2:@usn6 Using Scan @usn5:`8esn` Union Create Unique Shortestpath((({_usn3:_usn4 =~`1esn`}))),((`1esn` :``:usn1{#usn7:Count(*)[#usn8][$usn1]})) Merge `4esn`=(`1esn` {#usn8:@usn6 Contains {0}}) Create ({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}),_usn4=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})))"),
    octest_legacy:ct_string("Unwind 0 Is Null Is Null As _usn4"),
    octest_legacy:ct_string("Return Distinct {@usn5}[01234567][{1000}] As `4esn` Order By {0}[$0][$#usn7] Ascending,0.e0 Starts With 0x0 Starts With {12} Desc With Distinct *,$1000 Is Null Is Null As `3esn` Order By Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] Desc,({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[#usn7:``* 0Xa]->({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12})<-[?{_usn4}]-(usn2 :@usn6{_usn3:$7[..999][..`2esn`],`1esn`:12 =~$`5esn` =~$_usn3}) Is Not Null Asc Skip Extract(usn2 In {@usn5} Where $1000 Is Null Is Null|#usn8[1e1..])[Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1])..] Limit #usn7 Starts With {@usn5} Starts With 07 Where 999[{123456789}..999] Foreach(`` In @usn6 Is Null| With Distinct Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null As `6esn`,$#usn7 Is Not Null Is Not Null Skip $7[\"d_str\"][`8esn`] Limit usn1 Is Not Null Is Not Null Where {`7esn`} Ends With $usn2 Ends With 9e0 Unwind {#usn8}[0.0..$999] As `3esn`)"),
    octest_legacy:ct_string("Create `7esn`=Allshortestpaths((_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})) Load Csv With Headers From usn1 Ends With $@usn6 Ends With $1000 As #usn7  Create ``=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))) Union All Create Unique `5esn`=Shortestpath((({@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})-[#usn7?:`3esn`|``* 01..{@usn6:07[{_usn4}..{`4esn`}],usn1:``[$7..``]}]->(`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0}))) Create @usn5=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})),Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6))))"),
    octest_legacy:ct_string("Load Csv With Headers From {`2esn`} Is Not Null As #usn8 Fieldterminator 's_str' Detach Delete {`5esn`} Starts With 123456789 Starts With 07,123.654[2.12..][{`7esn`}..] Union Optional Match ((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null})) Using Join On usn2,`` Using Join On _usn4 Where `1esn`[..{`4esn`}][..{0}]"),
    octest_legacy:ct_string("Return *,False =~9e0 =~{`5esn`} As `7esn`,1e1 =~{`1esn`} Union Delete $_usn3 Is Not Null Is Not Null,$#usn7[$``..{`7esn`}],0e0 Ends With 0 Ends With {`6esn`} Detach Delete {#usn7}[$usn2]"),
    octest_legacy:ct_string("Start #usn8=Relationship(*) Where $12[{`5esn`}..] Merge `8esn`=((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(`1esn` {_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}}))"),
    octest_legacy:ct_string("Detach Delete 0X0123456789ABCDEF Contains {_usn3:{`2esn`} Contains 0.12 Contains 0.0} Contains Allshortestpaths(((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))),@usn5 Is Null Create ((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})),((#usn8 :`1esn`{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]})) Foreach(#usn8 In 010 Is Not Null Is Not Null| Delete 1e1 Is Not Null Is Not Null Create (((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))),(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))) Union All Start #usn8=Node:`4esn`(`3esn`=\"d_str\") Where \"d_str\" Ends With 0e0 Ends With {usn2}"),
    octest_legacy:ct_string("Foreach(_usn3 In Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End Is Not Null Is Not Null| Remove ({@usn5:0[...e1][..$usn2]})<-[`8esn`:_usn4|`5esn`* 0{`5esn`:$`8esn`[#usn7..][0X7..]}]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}).#usn7,`7esn`:``:usn1,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..])._usn4?) Merge `7esn`=(((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})<-[?:`5esn`|`3esn`* 0Xa{#usn8:{`2esn`}[..$`6esn`][..`3esn`]}]->({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`}))) Merge @usn5=((`3esn` {`1esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[usn1?:@usn5|``* 1000]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}))"),
    octest_legacy:ct_string("Remove `2esn`(`4esn` Starts With 0x0).``?,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12 In `1esn` In `3esn`|0.12[$0..$``]).usn1? Foreach(`3esn` In [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))| Create `2esn`=((#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]->(:``:usn1{`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1})),`4esn`=Allshortestpaths(((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})))) Union All Create Shortestpath(((({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})))),({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999}) Delete {`2esn`}[@usn6][{_usn3}],01234567 Starts With 01 Starts With 1.e1,#usn8 Ends With `5esn` Ends With _usn3 Union Load Csv From [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1] =~Reduce(`6esn`=9e1[..2.12][..@usn6],usn1 In {usn2} Contains {123456789} Contains 0Xa|{`6esn`} Is Not Null Is Not Null) =~(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})-[`8esn`?:`8esn`|:_usn3* 01..]->(:#usn8:#usn7)<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(:#usn7:`6esn`{`6esn`:0[{`4esn`}..],`7esn`:{``}[$@usn5]}) As _usn3 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind {`1esn`} In {``} In 's_str' As `7esn` Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null As `5esn`,{usn1}[..{#usn7}] Limit {7} =~#usn8 =~0.0 Load Csv With Headers From usn2[$7..``][$``..$_usn3] As _usn4 Fieldterminator \"d_str\" Union Remove {`7esn`:`3esn` Is Null Is Null,`1esn`:01234567 Is Not Null}._usn4?,[#usn7 In $@usn6 Contains 0 Contains 0 Where 0x0[9e0..][$@usn5..]].@usn5! Union All With  *,Case When $#usn7 Is Null Then $`1esn`[0..{_usn3}] When 999 Starts With {``} Then 0.e0 Ends With $`8esn` Else `3esn` Is Null Is Null End Is Not Null As `` Order By Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Descending,_usn4 Ends With $`3esn` Ends With {`3esn`} Desc Unwind Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]] As _usn4 Foreach(`2esn` In 0e0 Is Null| Create `2esn`=(_usn4 :_usn4:`1esn`) Load Csv With Headers From {`6esn`} Is Null As `8esn` Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Return Distinct 123.654 Is Null Is Null Skip $@usn5[$``..][$`8esn`..] Limit $7[..999][..`2esn`] Union With  *,[#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1] As `7esn` Order By $#usn8 Is Not Null Is Not Null Descending,_usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]) Descending Skip 0.12 Is Not Null Is Not Null Limit {#usn8}[False..{usn1}][$`6esn`..0Xa] Where $12[{`5esn`}..] Unwind {999} Is Not Null Is Not Null As _usn4 Create _usn3=Allshortestpaths(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})-[`4esn`* 1000]-(`3esn` :_usn3:@usn6{`6esn`:7 Starts With `5esn`})),`1esn`=(((usn1 :`4esn`:`3esn`)-[@usn5* 0x0..7]-(`8esn` :_usn3:@usn6)<-[:`5esn`|`3esn`$usn1]-(#usn8 :@usn5:usn2))) Union All With Distinct *,$`3esn`[`3esn`..],{``}[$`4esn`..`8esn`][$_usn4..$`3esn`] As usn2 Order By 0[`6esn`][1e1] Asc,.e1[..`2esn`] Desc Skip 0 =~usn1 Limit {12} Is Null With Distinct #usn8[1e1..],00[{999}..$#usn7][$0...e0] Order By [usn2 In 999[{123456789}..999]][[$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]..][{usn2:#usn7[$7..{_usn4}],`7esn`:$`1esn` Ends With {1000} Ends With $`8esn`}..] Desc,9e1[`3esn`][$#usn8] Asc,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Asc Skip False =~Null =~12.0 Limit 0e0[00..7][$#usn7..7] With  $999 Starts With $usn1 Starts With {`3esn`} As _usn3 Order By 0.e0 Ends With {@usn5} Ends With 0e0 Descending Skip [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)]"),
    octest_legacy:ct_string("Load Csv With Headers From #usn8(0.e0 Ends With $`8esn`,{#usn7}[{`1esn`}..][`1esn`..])[{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}..{_usn4:$`8esn` Contains {`7esn`} Contains $`4esn`}] As _usn3 Fieldterminator \"d_str\" Union Load Csv With Headers From Case {`4esn`} Contains \"d_str\" When 01234567[usn1] Then $`4esn`[{@usn5}] When $12[{`5esn`}..] Then {@usn6} Starts With 00 Else `3esn` =~12e12 End Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null] As `6esn` Fieldterminator 's_str' Union Return *,usn2[..12.e12][..0.0],0x0 =~$`2esn` =~#usn7 As _usn3 Limit $7[\"d_str\"][`8esn`] Detach Delete {#usn8} Starts With 01 Starts With {0}"),
    octest_legacy:ct_string("Unwind Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With {@usn6:00[.e0][010]} As `8esn` Foreach(`7esn` In $@usn5 =~999 =~0e0| With Distinct *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3 With Distinct 0xabc Is Null As _usn4 Limit 0.e0 In 9e0 In 0e0 Where 9e12 Contains {`4esn`}) With  *,{7}['s_str'..] As `2esn` Order By {_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End Desc,123456789[{@usn6}..][9e0..] Ascending Limit Allshortestpaths(($#usn7))[..{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}][..Reduce(_usn4=12 Is Null Is Null,`5esn` In $999[12]|{`2esn`}[..``])] Where $#usn8[12e12][0X7] Union With  `1esn` =~12.0 Order By `3esn`[{`1esn`}] Descending Skip 12[True] Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]) Where $`7esn` =~#usn8 =~{`7esn`} Return Distinct Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Skip {usn2}[{`7esn`}][$usn2]"),
    octest_legacy:ct_string("Merge `7esn`=((({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})<-[:`6esn`|:`7esn`* 07..]->(`7esn` :`7esn`:_usn4))) On Create Set `3esn` =(usn1 :usn2)-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`5esn` :``:usn1)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12) Is Null,@usn6+={`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null,`5esn`+=_usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] Foreach(usn1 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Load Csv From 1.0 Is Not Null As _usn4 Fieldterminator \"d_str\" Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn`) Union Create Unique Shortestpath(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)) Union Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}}))"),
    octest_legacy:ct_string("Merge Allshortestpaths(((@usn6 {@usn6:{0}[$0][$#usn7]})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`))) On Create Set @usn6 =All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null)[($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})..Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End] On Match Set Allshortestpaths(($#usn7)).`5esn`? =usn2 Ends With 1.0 Ends With $@usn6,@usn5+={`4esn`} Is Null,@usn5 ={`6esn`} Starts With 0xabc Start #usn7=Relationship( {7}) ,#usn8=Relationship:`7esn`(`8esn`={1000}) Merge ``=((:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})) On Create Set Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End.usn1 =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),usn1+={``} In $0,Case 2.12 Contains @usn5 Contains {``} When $123456789 In $7 Then _usn4[12.e12..] End.`4esn`? =None(#usn8 In True In `8esn` Where $#usn8[12e12][0X7]) Is Null On Match Set #usn8+=`1esn` In {999} In $123456789,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 =9e1[010..][`5esn`..],`3esn`+={`7esn`} Union Create Shortestpath((((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[`5esn`?:usn1|:@usn6]-(usn2 :`2esn`)<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})))) Unwind Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End] As `` Remove Reduce(@usn5=@usn6 Contains {0},`1esn` In {``} =~{`2esn`} =~$`8esn`|$1000[999..][0Xa..]).``?,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2 Union All Return Distinct *,Case When $#usn7 Is Null Then $`1esn`[0..{_usn3}] When 999 Starts With {``} Then 0.e0 Ends With $`8esn` Else `3esn` Is Null Is Null End Is Not Null As `` Order By Allshortestpaths(((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}))) Starts With Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Descending,_usn4 Ends With $`3esn` Ends With {`3esn`} Desc Return Distinct *,[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] As `6esn` Limit Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null"),
    octest_legacy:ct_string("Foreach(@usn6 In Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})| With  `3esn`[#usn8] Order By $`3esn`[`3esn`..] Ascending,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Ascending,{usn1}[$`8esn`][0.e0] Asc Skip `3esn`[{`1esn`}] With  Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`}) Starts With (`4esn` {`4esn`:01,@usn6:0X7 =~$`6esn`})<-[`4esn`?* 07..]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})<-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Starts With (@usn6 :@usn6)-[`3esn`?:`4esn`|`2esn`* 0x0..7{`2esn`:0.e0[$`1esn`..]}]->(`4esn` :#usn8:#usn7)-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:usn1{`6esn`:{12}[{_usn3}..0X7][$7..0]}),Case {usn2}[{`7esn`}][$usn2] When $_usn3[@usn6..][{``}..] Then $`4esn` Is Null When {`2esn`} In `5esn` In usn2 Then #usn7[9e1..$@usn5] End[Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End][Reduce(_usn3=$1000 Is Null Is Null,#usn7 In $@usn6 Contains 0 Contains 0|False[0.0..{@usn6}])],$`4esn` Contains @usn5 Contains {`8esn`} As `5esn` Order By 0e0[00..7][$#usn7..7] Asc,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Starts With Single(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Desc,$`2esn`[{@usn5}..12.e12][9e0..$`8esn`] Desc Limit {_usn4} In 0.12 In {_usn3} Where `5esn` In 123.654 In {`6esn`}) Create Unique usn1=(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})"),
    octest_legacy:ct_string("Remove Shortestpath(((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 00..999{`2esn`:01[$`1esn`..\"d_str\"]}]->(_usn3 :``:usn1{#usn7:0xabc =~{`8esn`} =~{_usn3}})-[?:`4esn`|`2esn`* 01234567..0Xa]->({#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}))).`4esn`,All(usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12)._usn4! Remove Allshortestpaths(((`6esn` :#usn7:`6esn`)<-[`8esn`?:usn1|:@usn6]->(`8esn` :`1esn`)-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]}))).`5esn`,Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1).`1esn`! Create `1esn`=Shortestpath(((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})))"),
    octest_legacy:ct_string("Merge `4esn`=Shortestpath((:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)) Start #usn8=Rel:`3esn`(`4esn`={123456789})  Return Distinct {_usn4} In 9e0 As @usn6 Limit $1000[{#usn8}..] Union All Foreach(`2esn` In 0e0 Is Null| Create `2esn`=(_usn4 :_usn4:`1esn`) Load Csv With Headers From {`6esn`} Is Null As `8esn` Fieldterminator \"d_str\") Merge (((:`3esn`:@usn5{_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(`7esn` {`2esn`:0.e0[$`1esn`..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) On Match Set All(usn2 In 999[{123456789}..999] Where False[Count(*)]).`1esn`! =`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..],usn2+=0.12 =~$`7esn` =~`8esn` On Match Set Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})).`1esn`! =Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where #usn8 Ends With `5esn` Ends With _usn3)[{`3esn`:{#usn8} Is Not Null Is Not Null}..][Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`)..],[usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|{`5esn`} Ends With `2esn`].`` =$123456789 In $7 Match usn2=Shortestpath((:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)),#usn8=(:`7esn`:_usn4{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})<-[_usn3?:_usn3|:`6esn`]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Union All Load Csv With Headers From `1esn`[$``][{`5esn`}] As _usn3 Fieldterminator 's_str' Load Csv From Extract(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) Contains Case When $`1esn`[0..{_usn3}] Then $_usn3[@usn6..][{``}..] When 999[1000..] Then {1000}[..#usn7][..{#usn8}] Else Count(*) =~0e0 =~0x0 End Contains Reduce(#usn7=$#usn7 =~Count(*) =~@usn5,@usn5 In 1.0 Starts With 12|2.12 Contains 0.0 Contains $`6esn`) As `8esn`  Foreach(_usn3 In $#usn7[$usn2..@usn6][$`7esn`..{7}]| Create _usn3=Shortestpath((((#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})<-[?:`1esn`|``* 123456789..999]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})))),_usn3=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})))"),
    octest_legacy:ct_string("With  exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $#usn7 Ends With $999 Ends With {`5esn`} Desc,{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}[[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null]..][{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}..] Ascending,{`5esn`} Contains 0 Desc Skip {``} =~{`2esn`} =~$`8esn` Limit `2esn` In `5esn` Where `1esn` =~12.0 Return [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..],{12}[{_usn3}..0X7][$7..0] As @usn5,07 Is Null Is Null As _usn3 Order By {`3esn`:0 =~usn1,usn2:010 Ends With 123456789 Ends With .e0} In Case When {_usn3} In 010 In 0.e0 Then 0xabc =~{`8esn`} =~{_usn3} When 123456789 Is Not Null Is Not Null Then 9e12 Contains {`4esn`} End In Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`) Desc,$12 Contains {`7esn`} Descending Union Merge Allshortestpaths(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}}))) On Match Set Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).`2esn` =0.12 In `8esn`,{usn2:usn1 Ends With $@usn6 Ends With $1000}.`5esn`? =#usn7[9e1..$@usn5],`4esn`(9e1 =~$`4esn` =~{usn2}).``? =`3esn`[Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]|1e1 In 0xabc)..] On Match Set `8esn` =$``[..`4esn`][..0] Detach Delete `2esn` Ends With $`6esn` Ends With 12.0,$1000[{#usn8}..],#usn7 Contains `` Contains 0.e0 Remove [`1esn` In 12.e12 In $#usn7,07 Contains @usn5].#usn8,Reduce(`3esn`={#usn8} Is Not Null Is Not Null,`6esn` In {1000} Is Not Null|True[..{_usn3}][..999]).`4esn`! Union Delete {`8esn`} In 12 In 1e1,\"d_str\" Starts With $7 Starts With 2.12 Create _usn3=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}),_usn4=Allshortestpaths((((`6esn` {#usn7:999[1000..]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})))) Remove `2esn`(Distinct $@usn5 =~999 =~0e0)._usn4,Extract(usn2 In 999[{123456789}..999] Where {`5esn`} Ends With `2esn`|usn2[01234567..]).`2esn`!"),
    octest_legacy:ct_string("Merge `8esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) On Match Set usn2+={`4esn`} Contains \"d_str\",usn2 =[@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null On Create Set usn1+=usn2[01234567..] Union Start ``=Rel:usn1(usn1={usn2}) ,`4esn`=Node:usn1(@usn5={`1esn`}) Remove {``:$`7esn` Ends With $1000 Ends With {999}}.usn2!,Single(@usn5 In 1.0 Starts With 12 Where .e0 Starts With usn2).`1esn`!,[#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6].@usn6? Remove None(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null).`2esn`,Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).#usn8?,All(@usn6 In 0xabc Ends With 1.0 Ends With $``).`2esn`? Union Return {1000}[0e0][{usn1}],{@usn5} In 0X0123456789ABCDEF In 1000,$`2esn`[Null][{``}] Order By [{@usn6} Contains {_usn3} Contains 1000,$usn1[..$`1esn`]][{`5esn`:Null[False..][12.e12..]}..[`4esn` Is Null]] Descending Skip Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Is Not Null Is Not Null Limit Count(*)[#usn8][$usn1] Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})) Optional Match (usn1 :`4esn`:`3esn`)-[* 0X0123456789ABCDEF]-(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]}) Using Index ``:#usn7(_usn4) Where $`2esn` In 0xabc"),
    octest_legacy:ct_string("Merge `3esn`=(((:@usn6{@usn6:$999[..$`2esn`]})-[_usn4* 0X0123456789ABCDEF]-(`5esn` {usn2:$#usn7 Contains {usn2}})-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`}))) On Match Set usn1+=0[...e1][..$usn2] On Create Set #usn8+=$_usn3[$usn2..],``+={``} Ends With `8esn` Ends With {`6esn`},`2esn` =Reduce(`3esn`=0.e0 Ends With $`8esn`,usn2 In 999[{123456789}..999]|2.12 =~9e1 =~{_usn4}) =~Case When Null In 1e1 In {999} Then 12 Is Null Is Null When 0[`6esn`][1e1] Then @usn6 In {@usn5} In 123.654 Else $7[..999][..`2esn`] End =~({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}) Create @usn6=((:`3esn`:@usn5{`5esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})),(({@usn5:0[...e1][..$usn2]})) Union With  $999 Starts With $usn1 Starts With {`3esn`} As _usn3 Order By 0.e0 Ends With {@usn5} Ends With 0e0 Descending Skip [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Create Unique Shortestpath((((:`1esn`{`4esn`:{_usn4} =~0 =~{12}})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`)-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)))) Foreach(usn2 In $`4esn` Is Null| With Distinct *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3) Union Start #usn8=Node:`7esn`(_usn3={0}) ,@usn5=Node:@usn6(\"d_str\") Foreach(_usn4 In {999}[..{999}]| Create Unique usn1=((:`5esn`)<-[`7esn`* 010{`3esn`:$`7esn` Ends With usn2}]-(:`3esn`:@usn5)) With Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],`2esn` =~$#usn7 =~_usn4 As `7esn` Skip {123456789}[..Count(*)] Limit 2.12 Contains $#usn7 Contains {`6esn`} Where .e1[@usn5])"),
    octest_legacy:ct_string("Merge Shortestpath(((usn2 $`2esn`))) On Match Set `` =0e0 Is Null On Create Set `8esn`+={usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}),[{`1esn`}[01234567..][@usn5..]].`3esn` =$123456789[.e12..][$999..] Start ``=Node:`1esn`(_usn3={`4esn`})  Unwind 12.0 In $usn1 In True As `8esn` Union Load Csv With Headers From $`2esn` In 0xabc As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create usn2=({#usn7:$_usn4[0X7..{1000}]})-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}) Return Distinct *,$12 =~{12} As #usn8,Case 0x0 =~$`2esn` =~#usn7 When {#usn7} =~$0 Then #usn8 Ends With 0Xa Else $0 Ends With 12.0 Ends With _usn4 End =~Reduce(#usn8=0xabc Is Null,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} In $999 In 01234567) Skip [`4esn` In False[0.0..{@usn6}] Where $@usn6 Contains 0 Contains 0|$`3esn` Contains .e1][(_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})..] Limit All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]] Union Foreach(`1esn` In 's_str' In {1000} In 010| Delete $@usn5[$7..@usn5]) Match `6esn`=Allshortestpaths((`6esn` :usn1)-[`2esn`?* 0X7..]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})<-[usn1?:`5esn`|`3esn`]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})),#usn8=({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999}) Where 0X7 Is Null Is Null With  (:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[@usn5?:#usn8|_usn3{``:{7} Starts With $usn2 Starts With $usn2,`3esn`:9e12[{1000}..][1000..]}]->(:``:usn1{usn2:010 Contains $`5esn`}) Contains [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|{`7esn`} Starts With 12.0 Starts With 07] Contains Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) As _usn3,1.e1 =~123.654 =~$`3esn` Where {`2esn`}[{123456789}..$#usn7][_usn3..999]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`2esn`} Contains 0.12 Contains 0.0 As @usn5 Fieldterminator 's_str' Start _usn3=Node:`1esn`(usn1=\"d_str\") Where $`8esn` Starts With $123456789 Unwind $`1esn`[_usn3..] As _usn4"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))) Using Join On `5esn`,_usn3,`8esn` Using Scan `6esn`:_usn3 Create Unique ((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]}))),@usn6=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}) Union All Merge @usn6=Allshortestpaths(((:#usn7:`6esn`{999}))) Return Distinct 123.654 Is Null Is Null Skip $@usn5[$``..][$`8esn`..] Limit $7[..999][..`2esn`] Start `3esn`=Node( {1000}) ,@usn5=Node:usn2(@usn5=\"d_str\")"),
    octest_legacy:ct_string("With  $1000 Contains $`2esn` Contains 12 As `2esn`,{@usn5} In $`5esn` As #usn7,[`8esn`[{#usn7}..][_usn4..]] Contains All(@usn5 In 07[{_usn4}..{`4esn`}] Where $`3esn` In {`1esn`} In 12e12) Contains Extract(`6esn` In {1000} Is Not Null Where 0X0123456789ABCDEF[1.0..]|0.0 Is Null) As usn1 Skip (`3esn` {`7esn`:12[`3esn`..][0X0123456789ABCDEF..]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}) Is Null Is Null Limit `1esn`[..{`4esn`}][..{0}] Where $0 Detach Delete 0X0123456789ABCDEF[..`5esn`][..$`3esn`],Null[`8esn`],$`6esn` In $#usn8 Union All Foreach(@usn6 In 123.654[2.12..][{`7esn`}..]| With Distinct {@usn5:00 =~.e12}[(`8esn` :usn2)<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(usn1 :`7esn`:_usn4)-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})..] Skip {`2esn`}[usn2..][$#usn7..] Limit $`6esn` Is Null Is Null Remove Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where True In $#usn8|0.0).#usn8?,Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))).`5esn`?) With Distinct {#usn8} Starts With {usn1} Starts With 9e12,$@usn5 =~999 =~0e0 As @usn5 Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Limit @usn5[01..`6esn`] Where $999[999..][$_usn4..] Union All Remove [{``} Starts With True Starts With True,$@usn6[..{`6esn`}][...e0],12 Ends With @usn5 Ends With 1e1].usn1! Foreach(@usn5 In #usn7(1e1[$@usn5]) In #usn7(Distinct `8esn`[$1000..$#usn8][_usn3..{7}]) In [$#usn7 Starts With $`4esn`,usn2[01234567..],`5esn`]| Optional Match Allshortestpaths(({_usn4:{@usn5} In $`5esn`})-[:`1esn`|``{`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07}]-(`1esn` :`5esn`{usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})),(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}})-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]->(:usn2{@usn5:usn1 =~1000 =~12})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]}) Using Join On #usn7,`1esn`,_usn4 Where 0 Is Not Null Create Unique (`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]})) Create ``=((`7esn` {`3esn`:1000 Is Not Null Is Not Null,`7esn`:12.0 Ends With 0e0 Ends With $123456789})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})),#usn7=(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})"),
    octest_legacy:ct_string("Load Csv From Null Starts With 's_str' Starts With {`1esn`} As _usn3 Fieldterminator 's_str' Delete [{`3esn`} Is Null Is Null][(@usn6 :`8esn`:_usn3)<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]->(usn2 :@usn5:usn2)-[`6esn`:@usn5|``{usn2}]-(@usn6 $12)..Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where $@usn5 Starts With 1e1)][Extract(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]|$`3esn`[12.e12...e1])..None(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2])],123456789[{@usn6}..][9e0..] Union All Start `2esn`=Relationship:`8esn`({``}) Where $`8esn` Starts With $123456789 Create Unique `4esn`=(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0}),`1esn`=(((_usn3 :`5esn`)<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True}))) Detach Delete [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]][Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})))..] Union Foreach(_usn4 In Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End]| Create #usn8=(`3esn` :`3esn`:@usn5)<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})) Optional Match Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654}))) Remove [0.0[.e12..],12.0 In $usn1 In True,$999[$12..][.e0..]].#usn8"),
    octest_legacy:ct_string("Unwind Filter(usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5) Starts With Extract(usn2 In {@usn5} Where $#usn7 =~Count(*) =~@usn5|`8esn`[$1000..$#usn8][_usn3..{7}]) As `3esn` Return Distinct $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As usn1 Order By $12 =~{12} Ascending Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1] =~Reduce(`6esn`=9e1[..2.12][..@usn6],usn1 In {usn2} Contains {123456789} Contains 0Xa|{`6esn`} Is Not Null Is Not Null) =~(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})-[`8esn`?:`8esn`|:_usn3* 01..]->(:#usn8:#usn7)<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(:#usn7:`6esn`{`6esn`:0[{`4esn`}..],`7esn`:{``}[$@usn5]}) Limit {`3esn`} Ends With $123456789 Ends With {12} Union All Optional Match _usn4=Allshortestpaths(((`` :`7esn`:_usn4{`4esn`:2.12 Contains 0.0 Contains $`6esn`})-[{_usn3:$`3esn` Ends With `8esn` Ends With {`5esn`}}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})-[{@usn5:{`7esn`} =~01234567 =~`7esn`,`7esn`:12e12[..1.e1][..$12]}]-(`5esn` :``:usn1))) Using Join On `2esn`,``,`` Where $12 Contains .e1 Union Delete {#usn8}[0.0..$999] Unwind 123456789[`8esn`..][{999}..] As `5esn` Merge `1esn`=Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 's_str'[..'s_str'][..{#usn7}]).`3esn`? =123456789 Is Null Is Null,@usn5+=12.0 Ends With 0e0 Ends With $123456789"),
    octest_legacy:ct_string("Merge `7esn`=Allshortestpaths((@usn6 $1000)-[:@usn6* 1000{`6esn`:{`6esn`} Is Not Null Is Not Null}]->(@usn5 :`1esn`)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})) On Match Set Shortestpath((`6esn` :@usn5:usn2{`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})<-[?* 0xabc..01234567]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})).#usn7? =Single(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)[..[@usn5[123.654..$_usn4][0.12..$@usn6],00[{999}..$#usn7][$0...e0],0 Is Null]][..@usn6(Distinct {@usn5} =~$`2esn`,@usn5 In 00)] On Create Set `7esn`+=`1esn` In {`4esn`},Any(_usn4 In .e12 Is Not Null Where 999 Is Not Null Is Not Null).`` =[9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) Load Csv From usn1 Starts With {@usn5} As _usn3 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv With Headers From 7[`7esn`..usn2][$`5esn`..0X7] As `2esn` Fieldterminator \"d_str\" Union Load Csv With Headers From True In $#usn8 As _usn4  Unwind {``}[2.12] As usn1 Start `3esn`=Node:`3esn`('s_str') ,`3esn`=Node:@usn6({7})Where @usn5[_usn3..{12}][{999}..$7] Union Remove Shortestpath(((`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]}))).#usn7?,Reduce(usn2=`1esn` =~12.0,#usn7 In {`5esn`} Ends With `2esn`|07 Is Null).`1esn`?,Case 12 =~{#usn7} When $usn1 Ends With {123456789} Ends With 1.e1 Then 9e1 =~{#usn7} Else $12[`6esn`][$#usn8] End.`8esn`? Create Shortestpath((_usn3 :usn2{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]})<-[:`7esn`{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}))"),
    octest_legacy:ct_string("Unwind $1000[999..][0Xa..] As `6esn` Union Create usn1=Shortestpath(((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789}))),_usn4=Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Match ((({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))) Using Index `2esn`:`4esn`(_usn4) Using Join On `7esn`,`2esn`,@usn6 Where #usn8[1e1..] Merge (((:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[{@usn5:0.12 In `8esn`}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``})-[* 123456789..999]-(`` ))) Union Remove Filter(#usn8 In True In `8esn`).``,[$@usn5 Is Not Null].`3esn`!,(`7esn` :``:usn1{#usn8:$999 In $999})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1).`8esn` Merge `5esn`=Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) On Create Set exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0).`5esn`? =All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),Filter(usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]).`6esn`? =01"),
    octest_legacy:ct_string("Detach Delete Count(*) =~0e0 =~0x0 Merge ((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`})) On Match Set `1esn`+=Case #usn8 Starts With {_usn3} Starts With 123.654 When $`2esn`[Null][{``}] Then $@usn6[..{`6esn`}][...e0] End[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 Ends With 0 Ends With {`6esn`})..(@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(`3esn` :@usn6)<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})],#usn8+={999} Is Not Null Is Not Null,Case @usn6[2.12..$123456789][$`8esn`..{123456789}] When @usn6 Contains {0} Then Count(*) Is Not Null Is Not Null When 0[0xabc] Then {`4esn`}[0xabc..][010..] End.`3esn`? ={@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12}[..7][.._usn4(Distinct)] Union Detach Delete [{`1esn`}[01234567..][@usn5..],9e0[..{usn1}]] =~{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]},`2esn` =~$0,`4esn` Is Null Union All Create usn2=Allshortestpaths(((:#usn7:`6esn`{`5esn`:@usn5 In 00,`6esn`:0.e0[$`1esn`..]})))"),
    octest_legacy:ct_string("Create Allshortestpaths((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})),((_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})) Union All Detach Delete Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..],Reduce(#usn7={`7esn`} Ends With $usn2 Ends With 9e0,usn1 In {usn2} Contains {123456789} Contains 0Xa|$`3esn` Contains .e1)[Case When 999 =~0x0 =~2.12 Then 0[...e1][..$usn2] When `6esn` Contains `6esn` Contains 9e1 Then 01234567 Starts With 01 Starts With 1.e1 End..[#usn7 In $@usn6 Contains 0 Contains 0 Where Count(*) In `1esn` In {_usn3}]] Detach Delete $usn2 =~`6esn` =~{usn1},[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999 In $999][..{`1esn`:0xabc Ends With 1.0 Ends With $``}] Union All Foreach(usn1 In $usn2[`4esn`..]| Load Csv With Headers From $#usn8[$12][`6esn`] As _usn4  Remove {#usn8:#usn7[999..``]}.usn1?)"),
    octest_legacy:ct_string("Start usn1=Node:usn2(_usn3=\"d_str\") ,usn1=Node:`1esn`(usn2={@usn6})Where `8esn` =~{`3esn`} =~9e12 Union All Merge @usn6=((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})) On Create Set `5esn` =$`7esn` Ends With $1000 Ends With {999},`8esn` =Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]),Allshortestpaths((usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`})).`1esn`? =Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] On Create Set [{`7esn`}[{#usn7}..],0e0 Starts With 's_str',`1esn` In 9e0 In {7}]._usn4? ={1000}[0e0][{usn1}] Unwind [0e0 Is Null,$`1esn` Contains usn2 Contains 1.0,1000[9e12][$`1esn`]] Ends With (@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) As #usn8 Union Unwind count(Distinct $`6esn` Is Not Null Is Not Null,010 Ends With 123456789 Ends With .e0) Contains {#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`} Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]|_usn3[$123456789..]) As _usn3 Detach Delete Case When @usn6 Contains {0} Then 12 =~$`5esn` =~$_usn3 When {usn2}[{`7esn`}][$usn2] Then $12[`6esn`][$#usn8] Else \"d_str\" Ends With 0e0 Ends With {usn2} End Is Null Is Null"),
    octest_legacy:ct_string("Detach Delete {#usn8} Is Not Null Is Not Null Unwind $`2esn` In 0xabc As _usn4 With Distinct *,$7 In $usn2 In {1000} Order By {`4esn`} Starts With $12 Starts With 0Xa Desc,{7} Is Null Is Null Desc,$@usn5[00][0Xa] Asc Where $usn1 Ends With {123456789} Ends With 1.e1 Union All Merge (({`2esn`:$`2esn`[#usn7][01]})<-[?{_usn4}]-(usn2 :@usn6{_usn3:$7[..999][..`2esn`],`1esn`:12 =~$`5esn` =~$_usn3})<-[?:`4esn`|`2esn`* 07..{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}]-(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})) On Create Set `1esn`+=`6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] Foreach(#usn7 In 0 Is Null Is Null| Create #usn7=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})))) Start `3esn`=Node:#usn8({_usn4}) Where .e0 Starts With {0} Starts With 0x0 Union With Distinct `5esn` In 123.654 In {`6esn`} As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Desc,{0}[$usn2..0.e0][{`4esn`}..True] Descending Skip All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) Limit All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Where 0Xa[0X7..#usn8][_usn3..9e1]"),
    octest_legacy:ct_string("Start `8esn`=Node:#usn7('s_str') Where $7[@usn6][0xabc]"),
    octest_legacy:ct_string("Return usn1 =~9e0 As `` Order By {`6esn`} Starts With $1000 Ascending,True[12e12..] Ascending Skip $_usn4[$_usn4..01234567] Limit Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null"),
    octest_legacy:ct_string("Foreach(`5esn` In 0x0 Ends With $@usn6 Ends With {usn2}| Unwind `` =~_usn3 =~{`6esn`} As #usn7 Unwind `` =~{0} As #usn7)"),
    octest_legacy:ct_string("Merge _usn3=Allshortestpaths((({_usn4:Null[False..][12.e12..]}))) On Match Set Case When .e12[$``..] Then 0.0 Starts With $`6esn` Else $`3esn`[12.e12...e1] End.@usn5? =$#usn7[$usn2..@usn6][$`7esn`..{7}],`1esn` =Null[`1esn`..00],`` =0.e0[#usn7..][$@usn5..] Unwind [usn1 In #usn8 =~$@usn5 Where #usn8 =~$@usn5|usn1 Ends With $@usn6 Ends With $1000] Is Null Is Null As usn1 Return 0.e0 Starts With 0x0 Starts With {12},123456789[{_usn3}] As `6esn`,$@usn6 As `5esn` Skip 0[`6esn`][1e1] Limit 0e0[00..7][$#usn7..7] Union Return Distinct *,0X0123456789ABCDEF Is Null As `1esn` Return Distinct *,$_usn4 Ends With False Ends With $#usn8,07 Is Null As usn2 Order By _usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Descending Skip 0x0 =~$`2esn` =~#usn7 Limit $@usn6[..{`6esn`}][...e0] Union All Remove Allshortestpaths((((_usn3 )-[* ..12]-(:`4esn`:`3esn`{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[_usn4{#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]}]->(`4esn` :@usn6))))._usn4! Merge @usn6=(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[usn2?:`6esn`|:`7esn`]-({@usn6:{usn1}[12e12..`6esn`][`7esn`..$`6esn`],@usn6:_usn3 Ends With {`7esn`} Ends With 12}) Start #usn7=Rel:`7esn`(`6esn`=\"d_str\") Where 0xabc Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind {123456789} Ends With False Ends With {@usn6} As usn1 Remove Extract(usn1 In #usn8 =~$@usn5 Where {`6esn`} Starts With $1000|$`3esn` Contains .e1).`6esn`!,Reduce(`8esn`=.e0 Starts With usn2,`5esn` In `5esn` In 123.654 In {`6esn`}|Count(*) =~0e0 =~0x0).``! Union All Create Unique Allshortestpaths(((usn2 $`2esn`))) Start @usn6=Node:usn1(usn1={usn2}) Where 0.0[`5esn`][1.e1] Create ((_usn3 :_usn3:@usn6)<-[?:`1esn`|``* 0x0..7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]}]->(`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})),Allshortestpaths((({`8esn`:12e12[..1.e1][..$12]})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))) Union All Create Unique @usn5=(:@usn6) Return Distinct {`4esn`:$123456789 Ends With 1e1} As `3esn`,#usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] As _usn4 Skip $7[..999][..`2esn`] Limit 0x0 In {`3esn`} Create _usn3=(({`3esn`:{#usn8} Is Not Null Is Not Null})),`5esn`=((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1}))"),
    octest_legacy:ct_string("Load Csv From `8esn` =~0 As @usn6  Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..]|0e0 In .e1]._usn4?,Single(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]).@usn5 Union All Foreach(_usn3 In Filter(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc)[Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))][[9e1 =~$`4esn` =~{usn2}]]| Remove Reduce(``=$`7esn` Contains 9e12 Contains `2esn`,@usn5 In 07[{_usn4}..{`4esn`}]|True[..{_usn3}][..999]).`5esn`,Case When $`6esn`[$7..{`3esn`}] Then #usn8 Ends With 0Xa Else 999[{123456789}..999] End._usn4!,[#usn7 In {`5esn`} Ends With `2esn` Where 1e1[usn1..$123456789][Count(*)..False]|$#usn7 Contains {usn2}].`3esn` Optional Match _usn4=Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) Using Index `1esn`:`2esn`(`6esn`)) Foreach(usn2 In Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})]| Create Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``}))) Union All Return Distinct *,0x0 =~$`2esn` =~#usn7 As _usn3 Skip Null =~`4esn` =~9e0 Limit 0.12 In `8esn` Load Csv With Headers From 0X7 Is Not Null Is Not Null As `4esn` Fieldterminator \"d_str\" With  Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]] Skip {usn2}[{`7esn`}][$usn2] Where 12[0X0123456789ABCDEF..][Count(*)..]"),
    octest_legacy:ct_string("With  {`7esn`} =~01234567 =~`7esn`,0 Is Null Is Null Order By _usn4[12.e12..] Ascending,$123456789[{`4esn`}..123456789][`1esn`..False] Descending,$@usn5[$7..@usn5] Desc Limit 00 Starts With 12 Starts With 0e0 Return Distinct *,{_usn4} Is Not Null,1.e1[{@usn5}..123.654] As @usn6 Order By 1e1[usn1..$123456789][Count(*)..False] Asc,(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null Asc Skip 01[123456789..][$_usn4..] Union Merge ((`1esn` :`3esn`:@usn5{_usn3:{`5esn`} Ends With `2esn`,_usn3:{#usn7} Contains {`7esn`} Contains $`3esn`})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) On Create Set #usn7+=Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],Extract(usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|.e12[0.0..][$#usn8..]).@usn6? =#usn8[#usn8..] Load Csv From {usn1} Contains $@usn5 As _usn4 Fieldterminator 's_str' Match @usn6=(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}),_usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))))"),
    octest_legacy:ct_string("Create (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0}),`6esn`=(((`4esn` {@usn6:1000 In {`4esn`}})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->({``:{`5esn`} Ends With `2esn`})-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]}))) Start usn1=Relationship:_usn3(`6esn`='s_str') ,_usn3=Rel:_usn3(usn2=\"d_str\") Union Create Unique Shortestpath(((`` :`5esn`{#usn8:`4esn` Starts With 0x0}))) Union All Remove [True In `8esn`,0xabc Is Null,1.0[{#usn8}..]].`6esn`,Reduce(#usn8={#usn7} Contains \"d_str\" Contains {_usn4},`5esn` In `5esn` In 123.654 In {`6esn`}|1.e1 =~123.654 =~$`3esn`).``!"),
    octest_legacy:ct_string("Foreach(_usn4 In $`1esn` Is Not Null| With  [usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000|`2esn` =~$#usn7 =~_usn4] Starts With Extract(`6esn` In {1000} Is Not Null|12e12 In Null In {7}) Starts With {_usn4:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,usn1:9e1[..2.12][..@usn6]} As usn2,#usn7 Ends With {@usn5} Order By {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]} Ascending,{#usn7} Is Null Is Null Ascending Skip `5esn` In 123.654 In {`6esn`} Where 0 =~usn1 Match `6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Where $@usn5[$123456789..][@usn5..]) Union All Load Csv With Headers From 0Xa Starts With 's_str' Starts With #usn7 As `2esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Unwind {usn1}[..{#usn7}] As _usn4 Start ``=Relationship:_usn4(`3esn`='s_str')  Union All Start ``=Relationship:`5esn`(`4esn`=\"d_str\") ,`4esn`=Rel:_usn3({_usn3})Where 9e12 Contains {`4esn`} Start usn2=Node:`4esn`(usn2='s_str')  Remove (usn1 {`8esn`:12e12[..1.e1][..$12]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]->(`` :`5esn`{#usn8:`4esn` Starts With 0x0}).usn1!,Extract(`5esn` In $999[12] Where $999[999..][$_usn4..]|{`4esn`} Is Null).`3esn`? Union All Start `3esn`=Relationship:`7esn`(@usn6=\"d_str\") Where 00[usn1..\"d_str\"][{0}..$`8esn`] Unwind `1esn`[$`2esn`..$#usn8][\"d_str\"..False] As usn1 With  *,Filter(@usn5 In 1.0 Starts With 12 Where 0.0 Starts With $`6esn`) Ends With (#usn7 :usn1)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2) As _usn4 Where $`4esn` Is Null"),
    octest_legacy:ct_string("Return @usn5[_usn3..{12}][{999}..$7],`5esn` As usn2,123456789[`8esn`..][{999}..] Order By $@usn5[$``..][$`8esn`..] Descending Skip {#usn8:9e1 Ends With 0xabc Ends With @usn6} Is Null Is Null Remove [123.654 In {12} In ``,#usn7].`6esn`!,Any(usn2 In 999[{123456789}..999]).`6esn` Union Unwind [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]][Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})))..] As `4esn` Union All With  *,None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null As _usn3,False[0.0..{@usn6}] As `` Order By Allshortestpaths((((:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]})))) Is Null Is Null Desc,Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null Asc,.e0[.e0..][$``..] Descending Limit None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`) Ends With [_usn4 In .e12 Is Not Null Where $`8esn` Contains 12] Ends With All(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Where {`2esn`}[@usn6][{_usn3}] Load Csv From 1e1 Is Not Null Is Not Null As @usn6 Fieldterminator 's_str' Create @usn5=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})),Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6))))"),
    octest_legacy:ct_string("Return *,{1000} Ends With $123456789 Ends With 12 As @usn6 Order By 999[{123456789}..999] Ascending,Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End] Ascending,$@usn5 Is Not Null Ascending Union All Optional Match (({_usn3:0.0[010..12.e12]})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Using Scan @usn6:`1esn` Using Join On `5esn`,`2esn` Return Distinct *,[$#usn8[12e12][0X7],$`3esn`[$_usn4][True]] Is Not Null Is Not Null As @usn6,Shortestpath((`3esn` {`1esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})<-[?* ..999]->(_usn4 :usn1{`6esn`:{_usn4}})-[usn2?:@usn6* 0x0..7]->({#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1})) Is Null Is Null Order By {`1esn`} In {``} In 's_str' Asc,[#usn7 In $@usn6 Contains 0 Contains 0 Where {#usn7} =~{usn1}] Ends With Case When {`6esn`} Is Not Null Then 1000 Is Not Null Is Not Null When 1000 In {`4esn`} Then {`4esn`} Is Null End Desc,$#usn7[$`1esn`..{`1esn`}] Desc Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Union Load Csv From $`6esn`[`5esn`..][$12..] As _usn4 "),
    octest_legacy:ct_string("Foreach(usn1 In 0Xa Starts With 's_str' Starts With #usn7| Return Distinct Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Load Csv From $_usn4[0X7..{1000}] As `1esn` Fieldterminator \"d_str\") Union Remove (:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)-[* 010]->(:#usn8:#usn7).#usn8!,{`6esn`:$0 Starts With `2esn` Starts With {`1esn`}}.usn2,Any(#usn7 In {`5esn`} Ends With `2esn` Where {999}[`2esn`]).``? Delete Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End],{1000}[9e0][`3esn`] Union All Optional Match @usn6=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Using Index `1esn`:`2esn`(`6esn`) Where 999[1000..]"),
    octest_legacy:ct_string("Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Return *,$`1esn` Ends With {1000} Ends With $`8esn` As `2esn` Order By Reduce(#usn7=999[{12}..][$1000..],usn1 In #usn8 =~$@usn5|Null In 1e1 In {999})[Reduce(``=9e12[..#usn7][...e0],#usn8 In True In `8esn`|`7esn`[..{`8esn`}])..Single(#usn7 In $@usn6 Contains 0 Contains 0 Where #usn7[9e1..$@usn5])][Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..Case `8esn`[$123456789..][$usn1..] When {`3esn`}[`6esn`..] Then {#usn7}[$usn2] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then $`4esn` =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End] Desc,Null[..010][..$@usn6] Desc,Case $usn1[0X0123456789ABCDEF...e12] When 00[$usn2..][0.12..] Then True In `8esn` When $`1esn`[0..{_usn3}] Then usn1 =~1000 =~12 End Ends With Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Ends With (:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}})-[?* 00..999]->(#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}}) Descending Skip [`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] With Distinct Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}],0X0123456789ABCDEF[..`5esn`][..$`3esn`] As _usn4,Reduce(`7esn`='s_str'[9e12..][12e12..],#usn7 In {`5esn`} Ends With `2esn`|Null In {_usn3} In _usn3)[Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End][Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}])] As `2esn` Order By {``} Ends With `8esn` Ends With {`6esn`} Ascending,0.12 Is Not Null Desc Skip {`2esn`} Is Not Null Union Return Distinct Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)],[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..] Order By {#usn7} Starts With $`1esn` Starts With 07 Ascending,{1000} =~01234567 =~`4esn` Descending Load Csv From [usn2 In 999[{123456789}..999] Where {usn1} Contains 123.654 Contains {#usn8}|.e12[Count(*)..{`4esn`}][07..$1000]] =~`7esn` =~(:`5esn`{`2esn`:0xabc =~{`8esn`} =~{_usn3}})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}})<-[`4esn`* 1000]->(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}) As `7esn` Fieldterminator 's_str' Detach Delete $`8esn` Contains 12,{@usn5} Is Null Is Null Union Load Csv From Filter(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc)[Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))][[9e1 =~$`4esn` =~{usn2}]] As `1esn` "),
    octest_legacy:ct_string("Remove @usn5:`4esn`:`3esn` Merge Shortestpath((((_usn3 :`5esn`)<-[?:usn2|_usn3* 07..]-({`3esn`:_usn3 In 1.e1})<-[?:@usn5|``* 123456789..999{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})))) On Match Set {`8esn`:Null In {_usn3} In _usn3,`4esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]}.usn1? =$`8esn` Starts With $123456789,`8esn` =#usn7 Contains $#usn8 Contains {`4esn`} Union With Distinct *,Single(#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null)[{usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]}] As _usn4 Order By {#usn7} In 010 In 12 Desc,`1esn` In {999} In $123456789 Ascending Skip `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] Union Merge (((:`2esn`{#usn7:$usn2 Starts With {`1esn`},@usn5:$12 Contains .e1})-[:`6esn`|:`7esn`{usn2:1e1[1000]}]->({@usn5:0[...e1][..$usn2]})-[`5esn`* 0Xa]->(`3esn` :#usn7:`6esn`))) On Match Set @usn5+=1.0 Is Null Is Null On Match Set _usn4+=Case .e1 =~9e12 When $0 Starts With `2esn` Starts With {`1esn`} Then 12.0 In $usn1 In True End Is Null Is Null,(@usn5 )-[`3esn`?* 0xabc..01234567]-(:`8esn`:_usn3)-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`}).`8esn` ={_usn4} Ends With 12.0 Ends With $@usn6"),
    octest_legacy:ct_string("Start `6esn`=Node:`7esn`(\"d_str\") Where $`5esn` Starts With 1.0 Starts With $usn2 Start `7esn`=Node:@usn5(usn1='s_str') Where {@usn5} In $`5esn` With Distinct *,$_usn4 Ends With False Ends With $#usn8,{``}[$@usn5] As @usn5 Limit 12e12 In Null In {7} Where $`1esn` Starts With 999 Union Unwind All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As `8esn` Detach Delete $7[.e1],{_usn4} Ends With 12.0 Ends With $@usn6"),
    octest_legacy:ct_string("Delete 01 Is Null Return Distinct [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]),1.0 =~`7esn` =~$`7esn` Order By `4esn` Starts With 9e12 Starts With 00 Descending,`1esn` In {999} In $123456789 Ascending,usn1 =~9e0 Asc Skip Null Starts With {usn1} Starts With #usn7 Limit Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End Ends With Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End Ends With All(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1}) With Distinct *,{`4esn`}[..`2esn`][..{@usn5}] As @usn6,0xabc Contains False Contains {1000} Order By Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Ascending,Count(*)[{usn1}..][$`7esn`..] Desc Skip {`5esn`}[$1000..`1esn`] Limit {12}[{`5esn`}][7] Where 0Xa Contains {`4esn`} Contains {`1esn`}"),
    octest_legacy:ct_string("Create `3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) Return Distinct Count(*) Is Not Null Is Not Null,Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null As @usn5 Order By $`2esn`[#usn7] Ascending,Null In 1e1 In {999} Desc Limit `7esn`[`5esn`..][0.12..] Union Foreach(`7esn` In (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}) Is Not Null| Remove All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 In .e1).@usn6?,Case When 0.e0 Ends With $`8esn` Then {`7esn`} Contains 's_str' Contains 01 End.@usn6?,Shortestpath(((`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))).`2esn`?)"),
    octest_legacy:ct_string("Detach Delete $999[999..][$_usn4..],`4esn`[usn2..],{12}[{@usn6}..``][7..`1esn`] Detach Delete 1.e1[`8esn`..Count(*)],[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] Foreach(usn1 In All(_usn4 In .e12 Is Not Null Where 0xabc Contains False Contains {1000}) Is Null Is Null| Load Csv From [`4esn` Is Not Null,$`6esn`[$7..{`3esn`}],@usn6[9e12..]] =~Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End As usn1 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Create Unique (`8esn` {#usn8:`4esn`[usn2..]})<-[* ..999]-(`8esn` :`5esn`) Match `8esn`=Allshortestpaths(((`8esn` )<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[?{`2esn`:`8esn`[1000..#usn8]}]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]}))) Using Join On `2esn`,#usn8,@usn5 Where {@usn5} Union All Unwind {``}[2.12] As `5esn` Union All Remove [True In `8esn`,0xabc Is Null,1.0[{#usn8}..]].`6esn`,Reduce(#usn8={#usn7} Contains \"d_str\" Contains {_usn4},`5esn` In `5esn` In 123.654 In {`6esn`}|1.e1 =~123.654 =~$`3esn`).``!"),
    octest_legacy:ct_string("Load Csv From $`4esn` Contains @usn5 Contains {`8esn`} As `5esn` Fieldterminator \"d_str\" Merge `4esn`=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) On Match Set #usn8 =$#usn8 In {12} In $`4esn`,@usn6+=[#usn7 In {`5esn`} Ends With `2esn` Where 1.e1 =~123.654 =~$`3esn`|$#usn7[$`1esn`..{`1esn`}]] Ends With Shortestpath((`3esn` {`1esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})<-[?* ..999]->(_usn4 :usn1{`6esn`:{_usn4}})-[usn2?:@usn6* 0x0..7]->({#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1})) Ends With Any(usn2 In 999[{123456789}..999] Where False[Count(*)]),All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where #usn7 Starts With {@usn6} Starts With {`1esn`}).`` =$_usn4[0X7..{1000}] On Match Set `2esn`+=Filter(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5])[All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)..],`5esn`+=_usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] With  `7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True As `6esn`,All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null As `6esn`,0x0[9e0..][$@usn5..] As _usn3 Order By 01234567 Starts With 01 Starts With 1.e1 Desc Skip $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] Limit {12}[{`5esn`}][7] Where {@usn6}[..0.e0][..$0] Union Remove (_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}).`4esn`? Unwind $`5esn`[$1000..][0e0..] As usn2"),
    octest_legacy:ct_string("Merge ``=Allshortestpaths((`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:_usn3:@usn6{#usn7:0xabc =~{`8esn`} =~{_usn3}})) On Match Set `6esn`+=Count(*) In `1esn` In {_usn3},#usn7+=[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..],_usn3+={``}[2.12] On Create Set `8esn`+=1e1 Is Not Null Is Not Null,`1esn` =[0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1),[$#usn7 Is Null,Count(*) In {`4esn`},{`7esn`} Contains 's_str' Contains 01].@usn5! =0.12[`8esn`..] Optional Match _usn3=Allshortestpaths(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})-[`4esn`* 1000]-(`3esn` :_usn3:@usn6{`6esn`:7 Starts With `5esn`})) Using Scan @usn5:`7esn` Using Scan _usn4:usn2 Where $`6esn` Starts With _usn4 Starts With `5esn` Union All Create Unique (`1esn` {#usn8:@usn6 Contains {0}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000) Foreach(`8esn` In `5esn`[..$_usn3]| Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Remove [_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|{`2esn`} Contains 0.12 Contains 0.0].`3esn`!,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`6esn`}[_usn3]).@usn5?) Union All Unwind {usn1}[..{123456789}] As usn1"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})))),((:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[_usn4?:``]-(:`4esn`:`3esn`{``:{1000}[..#usn7][..{#usn8}],`2esn`:@usn6 In {@usn5} In 123.654})-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(#usn8 :`7esn`:_usn4{@usn6:{0}[.e12..]})) Remove [$usn1[{_usn3}],Count(*) In {`4esn`}].`3esn`?,Case When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] When #usn7 Starts With {@usn5} Starts With 07 Then {`2esn`} Else 0.0[`5esn`][1.e1] End.`7esn`!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Filter(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc)[Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))][[9e1 =~$`4esn` =~{usn2}]] As _usn3 Fieldterminator 's_str' With  *,$`7esn`[_usn3][{_usn4}] As `2esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip {`7esn`} Starts With 12.0 Starts With 07 Limit {7} Is Null Is Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From True In $#usn8 As _usn4  Return *,{#usn7} Contains \"d_str\" Contains {_usn4} As `6esn`,$`7esn` =~#usn8 =~{`7esn`} As ``"),
    octest_legacy:ct_string("Merge (:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})<-[_usn3:`7esn`]-(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})<-[@usn5]-(:``:usn1{@usn5:999[$_usn3][@usn6]}) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null"),
    octest_legacy:ct_string("Load Csv From Case .e1 =~9e12 When $0 Starts With `2esn` Starts With {`1esn`} Then 12.0 In $usn1 In True End Is Null Is Null As _usn3 Fieldterminator 's_str' With Distinct *,123.654 Contains `` Contains 0e0,9e12 Ends With {``} Ends With 0e0 As #usn7 Skip [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Starts With Single(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) Starts With Allshortestpaths(((`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[?:`6esn`|:`7esn`{#usn8:9e1 =~{#usn7}}]-(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Limit @usn5 Contains {#usn8} Contains 010 Match #usn8=(((_usn4 :usn2)-[#usn8?* 0X0123456789ABCDEF{_usn4:usn1[{123456789}..][010..]}]->({`8esn`:12.0 =~0.12 =~999,``:'s_str' Contains $_usn4 Contains $`7esn`})<-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(:_usn3:@usn6{@usn6:1e1[{`3esn`}][True]}))) Using Scan `7esn`:#usn7 Using Scan @usn6:`1esn` Where @usn5[01..`6esn`]"),
    octest_legacy:ct_string("Unwind Reduce(usn2=0xabc In {`6esn`} In $@usn6,`7esn` In @usn5[01..`6esn`]|#usn7[$7..{_usn4}]) =~Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End As _usn3 Optional Match `7esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}),_usn3=(({`3esn`:{#usn8} Is Not Null Is Not Null})) Using Index `8esn`:`8esn`(usn1) Using Scan `7esn`:@usn5 Where 0[1.0..][.e0..] Start `1esn`=Relationship:@usn5({#usn8}) Where usn1 =~1000 =~12"),
    octest_legacy:ct_string("Return *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3 Union Merge (`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]})"),
    octest_legacy:ct_string("Detach Delete Single(@usn5 In 1.0 Starts With 12 Where #usn7 Starts With {@usn6} Starts With {`1esn`})[Reduce(`4esn`={#usn8} =~$0,usn2 In 999[{123456789}..999]|$`8esn` In {`2esn`} In $0)..[{12}[{_usn3}..0X7][$7..0]]],{#usn8} Ends With {123456789} Ends With #usn8 Foreach(usn1 In 123456789[$`5esn`]| Unwind {``}[2.12] As usn1 Match ((usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})),_usn4=Shortestpath(((:`6esn`:`4esn`{#usn7:999[$_usn3][@usn6],`4esn`:`4esn` Starts With $12 Starts With $12})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]-(:@usn5:usn2{@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,#usn8:0xabc Is Not Null Is Not Null}))) Where 's_str' Is Not Null) Delete $usn1[..$`1esn`],`8esn`[{`5esn`}..$12],Case {usn2}[{`7esn`}][$usn2] When $_usn3[@usn6..][{``}..] Then $`4esn` Is Null When {`2esn`} In `5esn` In usn2 Then #usn7[9e1..$@usn5] End[Case When {#usn7} =~{usn1} Then 1.0 Ends With {`4esn`} Ends With {`2esn`} Else #usn8[#usn8..] End][Reduce(_usn3=$1000 Is Null Is Null,#usn7 In $@usn6 Contains 0 Contains 0|False[0.0..{@usn6}])] Union All Foreach(#usn8 In {usn2:00 =~.e12} Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {usn2}[$usn2]) Starts With (:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6})| Create Unique _usn3=((_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:`8esn`|:_usn3]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]})))"),
    octest_legacy:ct_string("Return 0Xa[01..$`1esn`] Order By 123456789[{@usn6}..][9e0..] Ascending,Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Asc,Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Is Not Null Is Not Null Ascending Skip Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) Union Foreach(_usn3 In [$`4esn` =~{usn1}] Is Not Null| Return Distinct *,#usn8 =~{#usn7},123.654 In {`6esn`} In `6esn` As `8esn` Skip Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) Limit $`7esn`[$1000..Null] Unwind False Is Null Is Null As usn2) Unwind All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null)[($`3esn`)<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(@usn5 {`3esn`:'s_str'[..$123456789][..{1000}],_usn4:_usn4 =~$#usn7 =~`8esn`})..Case $999[..$`2esn`] When `8esn`[1000..#usn8] Then 0xabc[{@usn5}] When {@usn6}[01234567..] Then 0e0 Is Null End] As usn1 Load Csv From $`8esn`[$usn1][0X7] As `7esn`  Union All Start usn2=Node:`1esn`(@usn6={_usn3}) ,#usn8=Node:`5esn`(_usn4={7})Where `1esn` =~12.0 Return 0.e0 Ends With $`8esn`,{`4esn`:$123456789 Ends With 1e1} As `3esn` Order By Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] Descending Limit {`3esn`}[{@usn6}..2.12]"),
    octest_legacy:ct_string("Return Case When {#usn7} =~{usn1} Then `1esn` In 9e0 In {7} When {`6esn`}[0.e0..$123456789] Then 7[`7esn`..usn2][$`5esn`..0X7] End Is Null Is Null As `6esn`,$#usn7 Is Not Null Is Not Null Skip $7[\"d_str\"][`8esn`] Limit usn1 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Foreach(@usn5 In $7 =~{`7esn`} =~$`6esn`| Start usn2=Node:`4esn`(usn2='s_str') ,`6esn`=Node:`7esn`(\"d_str\")Where `1esn`[$`8esn`..][True..]) Delete 01234567[``..$`1esn`][True..$#usn7],{@usn5}[1000] Merge @usn5=(:@usn6) On Create Set `7esn`+=1000[9e12][$`1esn`] Union Optional Match _usn4=Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) Using Index `1esn`:`2esn`(`6esn`) Union All Unwind $1000[123.654] As @usn5"),
    octest_legacy:ct_string("With  Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..],$`1esn` Is Not Null,0.0 Is Null As `3esn` Limit 07 Starts With \"d_str\" Starts With $12 Where `4esn` Ends With 01 Ends With `5esn` Start usn1=Node:`1esn`(\"d_str\") Where {`7esn`} =~01234567 =~`7esn` Remove Single(usn2 In {@usn5} Where True =~`5esn`).`2esn`? Union Optional Match Shortestpath((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))) Using Join On #usn7,`1esn`,_usn4 Using Index `8esn`:#usn8(usn1) Where `7esn`[..{`8esn`}] Foreach(`7esn` In $@usn5 =~999 =~0e0| With Distinct *,`1esn`(Distinct 0Xa[01..$`1esn`])[{`1esn`:#usn7 =~{7}}..][Case When True[12e12..] Then @usn5[_usn3..{12}][{999}..$7] When True =~`5esn` Then 1e1 In $0 End..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As _usn3 With Distinct 0xabc Is Null As _usn4 Limit 0.e0 In 9e0 In 0e0 Where 9e12 Contains {`4esn`}) Create Unique _usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))),(({`4esn`:01234567[usn1]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0.0[`5esn`][1.e1] As #usn8 "),
    octest_legacy:ct_string("With Distinct `8esn`[$123456789..][$usn1..] As @usn6,0.12 Ends With $_usn3 Ends With 07 As `4esn` Order By `4esn`[0X0123456789ABCDEF..{999}][True..{_usn3}] Desc Where 9e0[..{usn1}] Return *,7 Is Null Is Null As _usn3,`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Order By $usn1[0X0123456789ABCDEF...e12] Descending,{_usn3}[..$usn2][..$`6esn`] Ascending,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) Ascending Skip [Count(*) In {`4esn`},usn2[$7..$`5esn`]][Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1)] Limit [`7esn` In @usn5[01..`6esn`] Where $123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`|$12 Contains .e1][..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 0X0123456789ABCDEF[0e0..$12][00..{12}]|{7}['s_str'..]]][..[1.0 Is Not Null,$`1esn`[0..{_usn3}]]] Start #usn8=Relationship(*)  Union Start _usn3=Rel( {#usn7})  Foreach(_usn4 In $`3esn` In {`1esn`} In 12e12| Create Unique `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 )) Union With  12e12[$``..] As #usn7,$#usn7 Contains Count(*) Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending,_usn4 In usn2 Desc,9e1 Contains {#usn8} Contains `5esn` Asc Skip 0.e0[#usn7..][$@usn5..] Limit {``} Contains 12e12 Contains Null Where `4esn` Ends With 01 Ends With `5esn` Merge ((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))) On Create Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])]"),
    octest_legacy:ct_string("Create Unique `7esn`=(`` :`5esn`)"),
    octest_legacy:ct_string("Create `1esn`=({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[?{_usn4}]-(:_usn4:`1esn`{_usn3:`3esn` Is Null Is Null}) Unwind exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End In None(usn2 In 999[{123456789}..999] Where `5esn` In 123.654 In {`6esn`}) As `6esn`"),
    octest_legacy:ct_string("Return Distinct $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Limit `2esn` In `5esn` Merge `3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})) On Create Set `3esn` =usn1 =~9e0 On Create Set usn1+=0[...e1][..$usn2] Union Detach Delete $`4esn`[.e0][9e0],`2esn` =~$#usn7 =~_usn4,@usn6 Contains {0} Union Load Csv With Headers From 12e12 Contains {@usn6} Contains {usn1} As #usn7 Fieldterminator 's_str' Load Csv From {`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge ((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})-[usn2?:`1esn`|``* 0x0..7]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})) On Create Set `3esn` =[{`7esn`}[..0xabc][..0e0],_usn3[$123456789..],{@usn5} In $`5esn`] Ends With Allshortestpaths((`7esn` :`4esn`:`3esn`{`3esn`:0.12 In `8esn`})) On Match Set `4esn` =12[{_usn4}..$_usn3][{`6esn`}..`3esn`],@usn6($usn1 Is Not Null Is Not Null,$123456789 In $7)._usn4? =01[123456789..][$_usn4..],`8esn`+=$12[0xabc..][12e12..] Detach Delete $`2esn` Contains `5esn` Contains .e1 Load Csv With Headers From 12.0 =~0.12 =~999 As `7esn` "),
    octest_legacy:ct_string("With  0xabc In 9e1,Single(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]) Contains {#usn7:1000[9e12][$`1esn`]} Order By {_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])] Ascending,2.12 Is Not Null Is Not Null Descending,7 Starts With $1000 Asc Limit {`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] Where {0}[.e12..]"),
    octest_legacy:ct_string("Create `1esn`=(`6esn` :#usn8:#usn7)-[?* 0{``:0[1.0..][.e0..]}]-(#usn7 {``:1.0 =~`7esn` =~$`7esn`})-[@usn6:@usn5|``* 07..]-(`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]}) Unwind 0.e0 In 9e0 In 0e0 As `3esn` Union Merge `4esn`=Allshortestpaths(((({_usn3:0Xa Contains {`4esn`} Contains {`1esn`}})-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})<-[#usn7{`3esn`:$@usn6 Contains 0 Contains 0,`1esn`:1.e1 Is Not Null}]-(:`2esn`{@usn5:{``} =~{`2esn`} =~$`8esn`,`1esn`:#usn8[1e1..]})))) On Create Set `5esn`+={_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1} In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) On Create Set _usn4+=1e1[$@usn5],[$@usn5 Is Not Null,12.e12[..9e12][..1000]]._usn3! =$_usn4[$_usn4..01234567],_usn4+=Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $`4esn`[{@usn5}]) Contains [usn2 In 999[{123456789}..999] Where .e12 Is Null Is Null|$usn1[01234567]] Contains Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010]) Optional Match Shortestpath((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`1esn`?]-(usn1 :`4esn`:`3esn`)),usn1=Shortestpath(((`2esn` :`6esn`:`4esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Index usn2:usn1(#usn7) Using Join On `3esn`,`4esn` Where $#usn8[12e12][0X7] Start `4esn`=Rel:`2esn`({1000}) Where {`8esn`} In 12 In 1e1"),
    octest_legacy:ct_string("Merge `1esn`=((`4esn` {`4esn`:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)]})<-[`5esn`* 01234567..0Xa]-(`2esn` )-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)) On Match Set `4esn` =12[{_usn4}..$_usn3][{`6esn`}..`3esn`],@usn6($usn1 Is Not Null Is Not Null,$123456789 In $7)._usn4? =01[123456789..][$_usn4..],`8esn`+=$12[0xabc..][12e12..] Remove Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {@usn6} Is Null Is Null|`5esn`[$usn1..$7]).@usn6? Union Load Csv From #usn8(0.12 Is Not Null,0.e0[True..][True..])[Reduce(`8esn`=@usn5[123.654..$_usn4][0.12..$@usn6],`6esn` In {1000} Is Not Null|{@usn6} Starts With .e1)..[`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null]][Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] Else {_usn4} Ends With 12.0 Ends With $@usn6 End..(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]-(:`7esn`:_usn4)-[]->(:usn1)] As `8esn` Fieldterminator \"d_str\" Remove #usn7:_usn4:`1esn`,Single(_usn4 In .e12 Is Not Null Where 0X0123456789ABCDEF Is Null).`8esn`,`1esn`:_usn4:`1esn` Detach Delete $#usn7[$usn2..@usn6][$`7esn`..{7}] Union All Unwind Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] As #usn7 Unwind {_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End As _usn4 Match @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),`1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Using Join On `2esn`,usn2,@usn6 Using Index `6esn`:`2esn`(`3esn`) Where {#usn8}[False..{usn1}][$`6esn`..0Xa]"),
    octest_legacy:ct_string("Return Distinct .e0 Starts With {0} Starts With 0x0,_usn4 =~$`2esn` As #usn8 Skip $`7esn` Ends With {usn1} Ends With {``}"),
    octest_legacy:ct_string("With  *,$`7esn`[_usn3][{_usn4}] As `2esn`,Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null Skip {`7esn`} Starts With 12.0 Starts With 07 Limit {7} Is Null Is Null Return Distinct 999 Contains $`` Contains {`1esn`} As `1esn` Order By .e1 Ends With $usn2 Ends With $7 Ascending Limit 123456789 Starts With 9e0 Union With Distinct *,7 Is Null Is Null As _usn3 Order By Null Starts With 's_str' Starts With {`1esn`} Asc,Count(*) In {`4esn`} Desc Skip 12e12[$`5esn`..1.0][$`8esn`..$`1esn`] Limit 01 =~0X7 Where 9e1 =~$`4esn` =~{usn2} Create Unique @usn6=(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}),usn2=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))"),
    octest_legacy:ct_string("Merge ((`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]})-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[usn1?:`8esn`|:_usn3]->(_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`}))"),
    octest_legacy:ct_string("Delete {#usn8:9e1 =~{#usn7}} In Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 Contains {`6esn`} Contains .e12) In Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {``} =~{`2esn`} =~$`8esn`|True In `8esn`) Return Reduce(#usn8=`8esn`[$123456789..][$usn1..],`6esn` In {1000} Is Not Null|$@usn5[$7..@usn5])[Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})))..(_usn4 {`2esn`:`8esn`[1000..#usn8]})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(`5esn` :`5esn`{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2})][{usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}}..0e0],$999 In $999 As _usn3,9e0[{`8esn`}] Skip $123456789 Contains $123456789 Contains 0.e0 Limit `` Contains True Union Return Distinct *,{@usn5} =~$`2esn`,999[{12}..][$1000..] Limit .e12 Is Not Null Create ((@usn5 :_usn4:`1esn`)-[:`4esn`|`2esn`* 00..999]->(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})),Allshortestpaths(((:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999})-[?:``]-({`3esn`:.e12 Is Not Null})<-[usn1?:`7esn`* 0x0..7]->(_usn4 {usn2:0[1.0..$``],#usn7:0.0}))) Union All Match ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),`4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0}))) Using Join On #usn8 Start @usn6=Node:`8esn`({1000}) ,_usn3=Node:`1esn`(usn1=\"d_str\")Where $`1esn`[`6esn`..$12][{usn2}..07]"),
    octest_legacy:ct_string("Return *,0X0123456789ABCDEF Is Null,(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Ends With `2esn` Ends With [$`8esn`[#usn7..][0X7..],``[..`3esn`][..{@usn6}]] Order By 9e1[`3esn`][$#usn8] Asc,{`8esn`} Is Not Null Is Not Null Desc,Reduce(usn1=0xabc In 9e1,#usn8 In True In `8esn`|123456789 Is Not Null Is Not Null) Ends With [$0 =~_usn3,010] Ends With [{`7esn`} =~01234567 =~`7esn`,`3esn` Contains {`6esn`}] Descending Skip {@usn5} In 0X0123456789ABCDEF In 1000 Limit Extract(`7esn` In @usn5[01..`6esn`] Where True In `8esn`)[Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12)..Filter(usn2 In {@usn5} Where 12[0X0123456789ABCDEF..][Count(*)..])] Union Merge _usn4=(usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) On Match Set #usn8 =$`1esn` Contains usn2 Contains 1.0,`3esn`+={_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])],``+=0.e0[$`1esn`..] On Create Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Load Csv From $`4esn` As `7esn` Fieldterminator 's_str' Load Csv From {`4esn`} Is Null As `4esn` "),
    octest_legacy:ct_string("Create `5esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}),Allshortestpaths((((:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(`` :usn2)<-[?:`1esn`|``* 01234567..0Xa{`7esn`:0.0 Starts With $`6esn`,`8esn`:12 Ends With @usn5 Ends With 1e1}]->(`5esn` {usn2:$#usn7 Contains {usn2}}))))"),
    octest_legacy:ct_string("Load Csv From $999[$@usn6..] As `8esn`  Foreach(`5esn` In 12.e12[0xabc][$`6esn`]| Detach Delete #usn7 Ends With {@usn5},`4esn` In \"d_str\" In $``,{7} Is Null Unwind 0.e0[#usn7..][$@usn5..] As `7esn`) With Distinct *,Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null Order By {`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] Desc Limit [01234567[``..$`1esn`][True..$#usn7]] =~Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {7} Starts With $usn2 Starts With $usn2) Union Delete {@usn5}[$@usn6][`1esn`],0[{`4esn`}..],01234567[..'s_str'][..1.0] With  `6esn`(123.654 Starts With `8esn` Starts With @usn5)[#usn7(usn1[{123456789}..][010..])] As usn2,0x0[9e0..][$@usn5..] As _usn3,@usn5[_usn3..{12}][{999}..$7] Order By {`4esn`} Contains \"d_str\" Asc,{`2esn`}[usn2..][$#usn7..] Desc,{`4esn`:$`4esn` =~{usn1}}[Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}|01 Starts With {0} Starts With $`4esn`)] Asc Skip Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End Is Null Create Unique usn2=Allshortestpaths((:_usn3:@usn6{`2esn`:$`2esn`[#usn7][01]}))"),
    octest_legacy:ct_string("Return *,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null),@usn6[9e12..] As `7esn` Delete 0Xa[01..$`1esn`],.e0 Contains $@usn6 Union Detach Delete Filter(@usn5 In 1.0 Starts With 12 Where 0.0 Starts With $`6esn`) Ends With (#usn7 :usn1)-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2) Create Unique usn2=Allshortestpaths((:_usn3:@usn6{`2esn`:$`2esn`[#usn7][01]}))"),
    octest_legacy:ct_string("Remove _usn3(Distinct 12 =~$`5esn` =~$_usn3,$`1esn` Contains usn2 Contains 1.0).usn1,[\"d_str\"[..{`1esn`}][..$`2esn`],{0}[.e12..],12[0X0123456789ABCDEF..][Count(*)..]].`2esn`,(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}).@usn5 Detach Delete {`7esn`}[{#usn7}..] Return Distinct $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Limit `2esn` In `5esn`"),
    octest_legacy:ct_string("Create Unique Shortestpath((:@usn5:usn2{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Remove Allshortestpaths((({``:{`5esn`} Ends With `2esn`}))).`7esn` Union All Start @usn6=Node:`2esn`({`6esn`}) ,usn1=Node:usn2(_usn3=\"d_str\")Where 0 Contains 123.654 Merge (`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]})-[`4esn`* 07..]-(usn1 :@usn5:usn2{`5esn`:$7[0X0123456789ABCDEF]})-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->({`3esn`:$_usn3[@usn6..][{``}..],usn2:00[usn2..`3esn`][0X0123456789ABCDEF..$7]})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0.e0 Starts With 0x0 Starts With {12} As _usn3 Fieldterminator \"d_str\" Remove Extract(_usn4 In .e12 Is Not Null Where $#usn7 Is Null|0[{`4esn`}..]).`5esn`?,[#usn7 In {`5esn`} Ends With `2esn` Where 9e1[..2.12][..@usn6]|$`1esn` Ends With {1000} Ends With $`8esn`].@usn6?,[`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}|0x0[9e0..][$@usn5..]].#usn8"),
    octest_legacy:ct_string("Foreach(usn2 In Filter(`7esn` In @usn5[01..`6esn`] Where `6esn` Contains `6esn` Contains 9e1) Is Null| Return Distinct *,7 Is Null Is Null As _usn3,`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Order By [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending,1e1[{`3esn`}][True] Desc Limit 0xabc Starts With {``} Starts With 0xabc Optional Match `2esn`=Shortestpath(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[@usn6* ..12{`1esn`:{`6esn`} Starts With 123456789 Starts With 0x0}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))),((:#usn7:`6esn`{`4esn`:12.0[$999..][$@usn6..],_usn3:`5esn`[$usn1..$7]})<-[:`3esn`|``* 1000]->(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})) Using Index _usn3:`4esn`(usn2)) Foreach(`3esn` In {`7esn`}[{#usn7}..]| Create Shortestpath((usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)))"),
    octest_legacy:ct_string("Remove Extract(usn2 In {@usn5} Where {1000}[0e0][{usn1}]).`6esn`,(_usn4 :usn2)-[_usn3* 0X0123456789ABCDEF{`7esn`:0xabc =~{`8esn`} =~{_usn3}}]->(:`2esn`{`4esn`:$999[$12..][.e0..]}).`2esn`?,{@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc}.`5esn`? Union Start #usn7=Relationship:usn2(`5esn`={_usn3}) Where {@usn5} In 0X0123456789ABCDEF In 1000 Merge `5esn`=((:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567}))"),
    octest_legacy:ct_string("Foreach(`3esn` In $`2esn` Ends With 9e1 Ends With ``| Load Csv From Allshortestpaths((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|{`5esn`} Contains 0)][Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4})] As `1esn` Fieldterminator 's_str' Create `1esn`=(`6esn` :#usn8:#usn7)-[?* 0{``:0[1.0..][.e0..]}]-(#usn7 {``:1.0 =~`7esn` =~$`7esn`})-[@usn6:@usn5|``* 07..]-(`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})) Create Unique ((:`1esn`{@usn5:{`4esn`} Is Null})<-[* 0Xa{@usn5:`2esn`[0Xa][{`8esn`}],`5esn`:0Xa[01..$`1esn`]}]->(`4esn` :`1esn`{`2esn`:1000 Is Not Null})) Union Foreach(#usn8 In {`7esn`:$@usn5[$123456789..][@usn5..]} In Case #usn7[999..``] When 010 Contains $`5esn` Then {`7esn`}[..$`8esn`][..{`8esn`}] End In `3esn`(Distinct $#usn7 =~Count(*) =~@usn5)| Load Csv With Headers From 12.0 =~0.12 =~999 As `7esn` )"),
    octest_legacy:ct_string("Start `7esn`=Node:#usn7(usn2=\"d_str\") ,`5esn`=Node:`4esn`(`2esn`={7}) Start ``=Relationship:`8esn`({``}) "),
    octest_legacy:ct_string("Delete $`8esn` Contains {`7esn`} Contains $`4esn` Unwind Reduce(`3esn`=0.e0 Ends With $`8esn`,usn2 In 999[{123456789}..999]|2.12 =~9e1 =~{_usn4}) =~Case When Null In 1e1 In {999} Then 12 Is Null Is Null When 0[`6esn`][1e1] Then @usn6 In {@usn5} In 123.654 Else $7[..999][..`2esn`] End =~({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}) As `2esn` Union All Merge Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`}))) On Create Set None(`5esn` In `5esn` In 123.654 In {`6esn`} Where $7[0X0123456789ABCDEF]).`8esn` ={`7esn`} Contains 's_str' Contains 01,`5esn`+=Allshortestpaths(((`7esn` :_usn4:`1esn`{usn1:$#usn7 Starts With {`2esn`} Starts With @usn6,`3esn`:$_usn3[@usn6..][{``}..]})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`5esn` :``:usn1)))[Extract(`4esn` In False[0.0..{@usn6}] Where {`7esn`}|0.e0 Ends With $`8esn`)],[0.e0[$`1esn`..],@usn5[01..`6esn`],{12}[{_usn3}..0X7][$7..0]].#usn7? =Any(`6esn` In {1000} Is Not Null Where {999}[`2esn`])[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|`8esn`[{#usn7}..][_usn4..])..{``:{`6esn`} Is Not Null Is Not Null,#usn8:{@usn5}[01234567][{1000}]}][{`4esn`:0X0123456789ABCDEF[0e0..0xabc],``:1e1 In 0xabc}..None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {`2esn`}[..{123456789}])] Merge `5esn`=Shortestpath((((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[#usn8?:#usn7|:``* 0xabc..01234567]-(`4esn` {@usn5:`3esn`[#usn8]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(`8esn` )))) On Match Set #usn7 =123.654 In {`6esn`} In `6esn`,@usn5 =Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Foreach(usn2 In 0Xa[01..$`1esn`]| Create `7esn`=(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}),_usn4=(`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[?:@usn6* 123456789..999]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]}) Optional Match ``=Allshortestpaths(((#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})-[?* 0X7..{#usn8:2.12 =~9e1 =~{_usn4},_usn4:1000 Starts With {7} Starts With $7}]-(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[#usn8?:`8esn`|:_usn3* 123456789..999]-(:`6esn`:`4esn`{``:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],_usn4:{`5esn`} Starts With 123456789 Starts With 07}))) Where {7} Is Null) Union All Foreach(#usn7 In 12.e12 =~$`7esn` =~{``}| Unwind _usn3 In 1.e1 As `7esn`) Load Csv From `8esn` =~0 As @usn6  Return *,{@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]},$@usn6 Ends With {`6esn`} Ends With 0.e0 Limit Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {@usn5} =~$`2esn`|1e1[1000]) Starts With Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1.0 =~`7esn` =~$`7esn`) Starts With Extract(usn2 In 999[{123456789}..999] Where 12e12[..Count(*)][..$usn2]|$999[999..][$_usn4..])"),
    octest_legacy:ct_string("Load Csv From 1e1 Is Not Null Is Not Null As @usn6 Fieldterminator 's_str' Union All Foreach(`` In 2.12 Is Not Null Is Not Null| With  *,0.12 In `8esn`,{7} In 9e1 As #usn7 Order By {`7esn`}[..$`8esn`][..{`8esn`}] Descending,Case 12.0 In $usn1 In True When `4esn`[usn2..] Then #usn7 =~{7} When 00[usn1..\"d_str\"][{0}..$`8esn`] Then {#usn8} In 07 In 0 Else 12 Is Null Is Null End[usn2(Distinct 010 Starts With `3esn` Starts With {usn1})..Case When $0 Ends With 12.0 Ends With _usn4 Then $0 =~_usn3 When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else 0.e0 Ends With $`8esn` End][Case When 0.e0[#usn7..][$@usn5..] Then $`1esn` Ends With {1000} Ends With $`8esn` When `3esn` Contains {`6esn`} Then False Is Null Is Null End..Reduce(#usn7=$#usn7 Is Null,usn1 In {usn2} Contains {123456789} Contains 0Xa|`8esn`[$1000..$#usn8][_usn3..{7}])] Desc,`3esn` Starts With @usn5 Starts With {`4esn`} Asc Skip `3esn`()[Extract(`7esn` In @usn5[01..`6esn`] Where False Is Null Is Null)..] Where 0 =~usn1 Remove {@usn6:$usn1[{_usn3}],`8esn`:0[{`4esn`}..]}.`4esn`!,(`4esn` :usn2)<-[`3esn`?:`6esn`|:`7esn`* ..999]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]}).`1esn`!,Any(usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000).`7esn`) Return Distinct $`3esn`[12.e12...e1] As `6esn`,0xabc In {`6esn`} In $@usn6 As #usn8,$_usn3 Contains {#usn8} As @usn6 Skip Case 2.12 In {123456789} When 9e1 =~{#usn7} Then 0e0 Starts With 's_str' When 0 Is Null Then $`8esn`[..`6esn`][..#usn7] End =~`6esn` =~All(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) Limit Count(*)[0.0..{12}][{`8esn`}..{`8esn`}] With Distinct Reduce(#usn8=`8esn`[$123456789..][$usn1..],`6esn` In {1000} Is Not Null|$@usn5[$7..@usn5])[Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})))..(_usn4 {`2esn`:`8esn`[1000..#usn8]})<-[`7esn`?* ..12{@usn5:{`6esn`}[_usn3]}]->(`5esn` :`5esn`{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2})][{usn2:9e0[..{usn1}],`4esn`:{999} =~7 =~{usn1}}..0e0],$999 In $999 As _usn3,9e0[{`8esn`}] Order By True[{#usn8}..][1000..] Asc,usn2[{7}..#usn8][{12}..{``}] Descending,123.654[12.0..{123456789}] Descending Union All Unwind 's_str'[9e12..][12e12..] As #usn7"),
    octest_legacy:ct_string("With Distinct *,.e1 Starts With #usn7 Starts With 1.e1 As usn2 Skip 12 =~$`5esn` =~$_usn3"),
    octest_legacy:ct_string("Load Csv With Headers From 999[{123456789}..999] As `5esn`  Remove [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|{`1esn`} =~{@usn6} =~`2esn`].`5esn`!,[`6esn` In {1000} Is Not Null Where `1esn`[$``][{`5esn`}]|{`7esn`}[..0xabc][..0e0]].`4esn`?,All(usn2 In 999[{123456789}..999] Where 010[$12..])._usn4! Detach Delete 0[{`4esn`}..],{`5esn`}[$`8esn`..$`1esn`] Union Create Unique `5esn`=Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Optional Match `7esn`=({`3esn`:_usn3 In 1.e1}),((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan `6esn`:`7esn` Using Join On `3esn`,`4esn` Union Merge `4esn`=(usn2 :`2esn`) On Match Set [{@usn5} In 0X0123456789ABCDEF In 1000].`8esn`! ={999} =~0.0 =~$``,Shortestpath(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-(#usn7 :usn1)<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})))).@usn5! =$`8esn` Contains 12 Foreach(usn1 In Case When @usn6 Contains {0} Then 12 =~$`5esn` =~$_usn3 When {usn2}[{`7esn`}][$usn2] Then $12[`6esn`][$#usn8] Else \"d_str\" Ends With 0e0 Ends With {usn2} End Is Null Is Null| Unwind {`1esn`}[`2esn`..] As #usn7)"),
    octest_legacy:ct_string("Unwind [@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null As `2esn` Remove All(`4esn` In False[0.0..{@usn6}] Where 12.0 Starts With 00 Starts With 9e1).`8esn`!,Case 0x0[{`1esn`}] When 1e1[1.e1..] Then 999[$_usn3][@usn6] End.#usn7"),
    octest_legacy:ct_string("With Distinct 0Xa[01..$`1esn`],.e12 Is Not Null Order By Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`2esn` Contains `5esn` Contains .e1)[Reduce(usn2={usn2}[`2esn`..{`4esn`}][_usn4..``],#usn7 In {`5esn`} Ends With `2esn`|.e1[07..`5esn`][$12...e0])..] Descending Skip `4esn` In \"d_str\" In $`` Where {``} Starts With True Starts With True Load Csv From $``[..{_usn4}][..{@usn6}] As `8esn` Fieldterminator 's_str' Foreach(`1esn` In usn2[{7}..#usn8][{12}..{``}]| Match `6esn`=((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` ))),Allshortestpaths(((:`8esn`:_usn3{_usn3:{999}[..{999}]})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index ``:#usn7(_usn4) Remove Filter(`4esn` In False[0.0..{@usn6}] Where {1000} Is Not Null).usn2!)"),
    octest_legacy:ct_string("Detach Delete {`5esn`:12e12[$``..],@usn6:$`3esn` Is Null Is Null} =~{_usn4:`1esn` In 12.e12 In $#usn7},Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End],7[_usn4..0.12] Union Load Csv With Headers From 0xabc Is Not Null Is Not Null As _usn3 Fieldterminator 's_str' Union All Load Csv With Headers From $`7esn` Ends With {usn1} Ends With {``} As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Allshortestpaths((usn1 :usn2)).usn1!,Case $0 Starts With `2esn` Starts With {`1esn`} When 12.0 Starts With 00 Starts With 9e1 Then usn2[..$`8esn`][..``] Else True Starts With 2.12 Starts With {123456789} End.usn1,`7esn`:`8esn`:_usn3 Start `2esn`=Node:`8esn`(#usn8='s_str')  Match (:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}) Using Index `5esn`:`1esn`(@usn6) Using Index _usn4:`1esn`(`8esn`) Where 12.e12[..9e12][..1000] Union All Create (usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}) Create Unique _usn3=Allshortestpaths(((`5esn` :#usn7:`6esn`{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[?:`1esn`|``* 123456789..999]-(_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Match (((@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(@usn6 :_usn3:@usn6{`5esn`:07 Starts With \"d_str\" Starts With $12})<-[`4esn`?:#usn7|:``* 07..]->({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]}))),(`` :#usn8:#usn7) Using Scan `2esn`:`3esn` Using Scan #usn8:usn1 Where @usn6 In {@usn5} In 123.654"),
    octest_legacy:ct_string("Create #usn7=((`6esn` {_usn3:999 Is Not Null Is Not Null})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Foreach(#usn8 In 0.e0[$`1esn`..]| Create Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))) Return *,Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) As `7esn` Order By @usn6 Is Not Null Is Not Null Asc Skip $`1esn` Starts With 999 Limit [{``} =~{`2esn`} =~$`8esn`] Ends With Extract(usn2 In {@usn5} Where 999 Is Not Null Is Not Null|0[1.0..$``]) Ends With (:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null}) Union All With Distinct {usn1}[..{#usn7}],{123456789} Ends With False Ends With {@usn6} As usn1 Limit 0X7[{12}..$``] Where `3esn` Starts With @usn5 Starts With {`4esn`} Union Merge usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ) On Create Set #usn8 =Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},Reduce(#usn7=`3esn`[{`1esn`}],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|`1esn` In {`4esn`}).usn1? =$`6esn` Is Not Null Is Not Null On Create Set @usn5 =.e1 In $123456789 In _usn3,`7esn`+=.e0 In 9e1 In $_usn3 Start `5esn`=Rel:`5esn`({_usn3}) ,`6esn`=Node:``({`2esn`})Where _usn3[$123456789..]"),
    octest_legacy:ct_string("Create Unique `6esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})) Remove [{1000} Is Not Null Is Not Null].`7esn`?,(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})-[_usn4?]-(usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(`` :usn1)._usn4,Case When 07 Contains @usn5 Then 0.0[0.12] End.@usn6"),
    octest_legacy:ct_string("Create Unique #usn8=Shortestpath((:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)-[?:`3esn`|``{usn1:$#usn8 Is Not Null}]->(usn1 {`8esn`:12e12[..1.e1][..$12]})),usn1=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Unwind $`1esn` Contains usn2 Contains 1.0 As usn1 Create `7esn`=((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union All Return 0.e0 Starts With 0x0 Starts With {12},123456789[{_usn3}] As `6esn`,$@usn6 As `5esn` Union Merge @usn6=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) On Create Set [{`7esn`}[{#usn7}..],0e0 Starts With 's_str',`1esn` In 9e0 In {7}]._usn4? ={1000}[0e0][{usn1}] Match usn2=Allshortestpaths((($`3esn`)<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),((`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Start #usn8=Node:`2esn`(`1esn`=\"d_str\") ,@usn5=Node:usn2(@usn5=\"d_str\")Where ``[..`3esn`][..{@usn6}] Merge `4esn`=Shortestpath((:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2))"),
    octest_legacy:ct_string("Unwind $`3esn` Is Null Is Null As _usn4 Merge Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) Merge Allshortestpaths(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}}))) On Match Set Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))).`2esn` =0.12 In `8esn`,{usn2:usn1 Ends With $@usn6 Ends With $1000}.`5esn`? =#usn7[9e1..$@usn5],`4esn`(9e1 =~$`4esn` =~{usn2}).``? =`3esn`[Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]|1e1 In 0xabc)..] On Match Set `8esn` =$``[..`4esn`][..0] Union All Remove Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where True Ends With usn1).`8esn`?,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`].`3esn` Union With  0xabc In 9e1 Where `1esn` In 12.e12 In $#usn7 With Distinct 's_str' Is Not Null,999[{12}..][$1000..],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Skip 12e12[$``..] Limit {`4esn`}[.e0][0Xa]"),
    octest_legacy:ct_string("Create Unique ((#usn7 :`7esn`:_usn4)<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]-(`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})<-[usn2:#usn8|_usn3]->(`8esn` :`4esn`:`3esn`)),#usn7=((_usn3 :`6esn`:`4esn`)) Union Delete All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) =~Filter(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {0}[$0][$#usn7]),_usn4(Distinct `5esn`,{_usn4} Is Not Null) Contains Extract(`5esn` In `5esn` In 123.654 In {`6esn`} Where _usn3 In 1.e1|$7[..999][..`2esn`]) Return _usn3 Ends With {`7esn`} Ends With 12 Order By {`1esn`}[..{_usn4}] Descending,0.12[$0..$``] Descending Skip $`6esn` Ends With {`4esn`} Limit $`8esn`[$usn1][0X7] Foreach(usn2 In usn2 Ends With 1.0 Ends With $@usn6| Create Unique #usn8=({`3esn`:{#usn8} Is Not Null Is Not Null})) Union Start `3esn`=Node:#usn8({_usn4}) ,`6esn`=Node:``({`2esn`}) Optional Match @usn5=({usn1:1e1[1.e1..],@usn6:`4esn` Ends With 01 Ends With `5esn`})<-[`1esn`?:`2esn`* 01234567..0Xa{`4esn`:00[usn2..`3esn`][0X0123456789ABCDEF..$7]}]->(#usn8 :`4esn`:`3esn`) Using Scan #usn8:`1esn` Using Scan `2esn`:`7esn`"),
    octest_legacy:ct_string("Create @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})) Union Create ((@usn6 $1000)) Return Distinct {usn1}[..{#usn7}] As `5esn`,All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As #usn8,00[0xabc..][`8esn`..] Order By usn2[..$`8esn`][..``] Desc,@usn5 In 00 Descending Limit $7[\"d_str\"][`8esn`] Delete $@usn6 Ends With {`6esn`} Ends With 0.e0,#usn7 Contains $#usn8 Contains {`4esn`}"),
    octest_legacy:ct_string("Merge ((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]}))) On Match Set (`3esn` {#usn7:$`1esn` Starts With 999,_usn3:`4esn`[usn2..]})<-[`2esn`?]->(:#usn8:#usn7{`7esn`})<-[?{`3esn`:`3esn` Starts With @usn5 Starts With {`4esn`}}]->({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]}).@usn6? =$@usn6 Ends With {`6esn`} Ends With 0.e0,`1esn` =Single(@usn5 In 07[{_usn4}..{`4esn`}] Where $#usn8[12e12][0X7]) Contains [$7[0X0123456789ABCDEF],$`4esn`['s_str'..1000][.e12..010]] Unwind `` =~_usn3 =~{`6esn`} As #usn7"),
    octest_legacy:ct_string("Start `7esn`=Node:``({12}) ,`1esn`=Node:usn2('s_str')Where `4esn` Starts With 9e12 Starts With 00 Start `3esn`=Relationship:`7esn`(@usn6=\"d_str\") ,_usn4=Rel:`7esn`(`6esn`=\"d_str\") Union All With Distinct 0xabc Is Null As _usn4 Limit 0.e0 In 9e0 In 0e0 Where 9e12 Contains {`4esn`} Union All Remove usn1(Distinct $@usn5[$123456789..][@usn5..],0.0[010..12.e12])._usn4 Remove {#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}._usn3!"),
    octest_legacy:ct_string("With  $`2esn`[{@usn5}..12.e12][9e0..$`8esn`],{`7esn`} Ends With Count(*) Ends With {`5esn`} As `1esn`,7 Starts With $1000 Skip `3esn` Is Null Is Null Foreach(`6esn` In $`8esn`[..`6esn`][..#usn7]| Delete $#usn7 Contains Count(*) Remove Case When $`6esn`[$7..{`3esn`}] Then #usn8 Ends With 0Xa Else 999[{123456789}..999] End.@usn6!) Remove (:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})-[?:``]-(`2esn` :#usn7:`6esn`{`7esn`:0xabc =~{`8esn`} =~{_usn3}}).@usn6!,`5esn`:@usn5:usn2,Reduce(`1esn`={`7esn`}[..0xabc][..0e0],@usn5 In 1.0 Starts With 12|{@usn5}).`7esn`! Union Start `1esn`=Relationship:@usn5({#usn8}) ,usn2=Relationship:`4esn`(\"d_str\")Where 7 Is Null Is Null Merge `6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Union Create `6esn`=(((`8esn` :`4esn`:`3esn`)-[`5esn`?:@usn5|``* 1000]-(:`7esn`:_usn4)-[?:``]-(`7esn` :@usn6))) Match `7esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))),`6esn`=Allshortestpaths(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})) Using Index #usn8:usn1(`2esn`) Using Scan `8esn`:@usn6 Where {usn2}[`2esn`..{`4esn`}][_usn4..``] Return *,0Xa Contains 7 Contains $@usn5 Order By `7esn` Ends With {@usn5} Ends With `5esn` Desc,0Xa Contains {`4esn`} Contains {`1esn`} Ascending,Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12})))[Extract(#usn7 In {`5esn`} Ends With `2esn` Where $@usn5[$123456789..][@usn5..])..][All(#usn7 In $@usn6 Contains 0 Contains 0 Where $0 Starts With `2esn` Starts With {`1esn`})..] Ascending Skip $`` Ends With _usn3 Ends With $@usn5 Limit 1e1[..12e12]"),
    octest_legacy:ct_string("With  0xabc In 9e1 Order By 9e1[`3esn`][$#usn8] Asc Unwind ``[$7..``] As `1esn`"),
    octest_legacy:ct_string("Start `6esn`=Rel:@usn6(`8esn`={`7esn`}) Where {999} Ends With 1000 Ends With 1e1"),
    octest_legacy:ct_string("Unwind 2.12 =~$`1esn` =~0X7 As `6esn` Match `7esn`=Allshortestpaths((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[_usn4?:`1esn`|``{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->({`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))),`6esn`=Allshortestpaths(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})) Using Index #usn8:usn1(`2esn`) Using Scan `8esn`:@usn6 Where {usn2}[`2esn`..{`4esn`}][_usn4..``] Union All Load Csv With Headers From Filter(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc)[Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))][[9e1 =~$`4esn` =~{usn2}]] As _usn3 Fieldterminator 's_str' With  *,#usn8 =~{#usn7},123.654 In {`6esn`} In `6esn` As `8esn` Skip {`7esn`} Is Not Null Is Not Null Limit 0X0123456789ABCDEF Is Not Null Is Not Null"),
    octest_legacy:ct_string("Start `2esn`=Node:``(@usn6='s_str') ,#usn7=Rel:`1esn`(`7esn`={_usn3})Where 0X0123456789ABCDEF Is Null Merge `8esn`=((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})-[?* 07..]->(:usn1{#usn8:True Ends With usn1})-[?:``]-(`7esn` :@usn6)) On Match Set usn2+={`4esn`} Contains \"d_str\",usn2 =[@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null On Create Set [usn1 Ends With $@usn6 Ends With $1000].#usn8? =.e12 Contains {`6esn`} Contains .e12,@usn5:_usn4:`1esn`,@usn5 =0X7[..`2esn`][..@usn5]"),
    octest_legacy:ct_string("Unwind 01[$`1esn`..\"d_str\"] As `4esn` With Distinct $#usn8[$12][`6esn`] As @usn6 Skip 00 Starts With `6esn` Starts With $1000 Limit {usn1} Is Null Is Null Where `1esn`[$`8esn`..][True..] Merge @usn5=Allshortestpaths(((`5esn` :``:usn1{`2esn`:$usn2 Starts With {`1esn`},`5esn`:$_usn3[@usn6..][{``}..]})-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]-(usn1 :`1esn`)-[?:`6esn`|:`7esn`{`4esn`:01234567[usn1]}]-(@usn6 $12))) On Create Set Reduce(`6esn`=0xabc =~{_usn4},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|{_usn3} In 010 In 0.e0).usn1? =Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],`3esn`+=1.0 Ends With {`4esn`} Ends With {`2esn`} On Match Set Extract(#usn7 In {`5esn`} Ends With `2esn` Where {_usn3}[{#usn7}]|_usn4 =~$#usn7 =~`8esn`).#usn7! =Case When 12[0X0123456789ABCDEF..][Count(*)..] Then 's_str'[..$123456789][..{1000}] End[Reduce(usn2={`6esn`} Is Not Null Is Not Null,#usn7 In {`5esn`} Ends With `2esn`|07[_usn3][123456789])..Reduce(@usn6=$`7esn` =~#usn8 =~{`7esn`},#usn7 In {`5esn`} Ends With `2esn`|{@usn5})],usn1 ={`7esn`}[..$`8esn`][..{`8esn`}],`8esn`+=Reduce(`6esn`=9e12 In 's_str' In $`4esn`,usn2 In 999[{123456789}..999]|07[{_usn4}..{`4esn`}]) =~Single(usn2 In {@usn5} Where `1esn` In 9e0 In {7}) =~[usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]]"),
    octest_legacy:ct_string("Foreach(`6esn` In [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12][Case 0xabc Is Not Null Is Not Null When `4esn`[`1esn`][{`8esn`}] Then usn1[12.e12..$`1esn`][$`2esn`..0Xa] When 12e12[$``..] Then _usn4 =~`1esn` End..Shortestpath(((:`7esn`:_usn4{#usn7:$`3esn` Ends With `8esn` Ends With {`5esn`}})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000)))]| Start @usn6=Node:usn1(usn1={usn2}) Where 0.0[`5esn`][1.e1]) With  exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $#usn7 Ends With $999 Ends With {`5esn`} Desc,{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}[[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null]..][{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}..] Ascending,{`5esn`} Contains 0 Desc Skip {``} =~{`2esn`} =~$`8esn` Limit `2esn` In `5esn` Where `1esn` =~12.0 Union All Remove Filter(usn2 In {@usn5} Where {@usn5}[01234567][{1000}]).usn1?,{`7esn`:$usn1[01234567]}.`1esn`,All(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..]).`4esn`! Optional Match Shortestpath(((:#usn7:`6esn`{`1esn`:`8esn`[$123456789..][$usn1..]}))) Using Index `3esn`:`7esn`(`4esn`) Where `1esn` =~12.0"),
    octest_legacy:ct_string("Delete {usn1} Is Null Is Null,Reduce(_usn3=$#usn8 In {12} In $`4esn`,_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])[..`1esn`(Distinct {`4esn`} Contains \"d_str\")],Reduce(#usn8=12.0 =~0.12 =~999,@usn6 In 0xabc Ends With 1.0 Ends With $``|{@usn6} Starts With 00) Starts With {#usn7:{999} Ends With 1000 Ends With 1e1} Starts With Single(#usn8 In True In `8esn` Where Count(*) =~0e0 =~0x0)"),
    octest_legacy:ct_string("Remove All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn2..`3esn`][0X0123456789ABCDEF..$7]).`7esn` Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})))) Union All Unwind $`1esn`[0..{_usn3}] As `1esn` Union Remove count({usn1}[12e12..`6esn`][`7esn`..$`6esn`]).`6esn`"),
    octest_legacy:ct_string("Load Csv From Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Shortestpath((:@usn6{`7esn`:{12} Is Null}))..[12 =~{#usn7},$7[..999][..`2esn`],$`4esn`[{@usn5}]]][usn2(Distinct 12e12[$``..])..Filter(`5esn` In $999[12] Where $999 =~$999 =~usn2)] As #usn7 Fieldterminator 's_str' Union All With Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc[$`2esn`..]) Contains None(#usn8 In True In `8esn` Where 01234567[usn1]) Contains Reduce(usn1=999,`5esn` In `5esn` In 123.654 In {`6esn`}|#usn8 Starts With {_usn3} Starts With 123.654) Ascending,$`7esn`[$1000..Null] Ascending Limit {7} In 9e1 Foreach(`7esn` In @usn5 Contains {#usn8} Contains 010| Return Distinct *,$@usn5 Is Null Is Null As @usn6 Skip 2.12 Contains 0.0 Contains $`6esn` Limit 9e0 Is Null Start `4esn`=Node(*) ,@usn5=Node:`8esn`(`3esn`={999})Where .e1 =~9e12) Start `1esn`=Rel:#usn7(``={@usn5}) "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 01[$_usn3..][123.654..] As `4esn` Fieldterminator \"d_str\" Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Return 123.654 Is Null Is Null Skip $@usn5[$``..][$`8esn`..] Limit $7[..999][..`2esn`]"),
    octest_legacy:ct_string("Match ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)),(({@usn5:0[...e1][..$usn2]})-[@usn6:`1esn`|``* 0]->(`4esn` :`6esn`:`4esn`)<-[#usn8{@usn6:07 Is Null}]-({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})) Using Scan usn2:_usn4"),
    octest_legacy:ct_string("Load Csv From 1e1 Is Not Null Is Not Null As `6esn`  Union Return Distinct Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Order By $`2esn`[#usn7] Ascending,1.e1[$`3esn`] Desc Union All Load Csv From Single(`6esn` In {1000} Is Not Null Where 1000 In {`4esn`}) Starts With (`4esn` {`4esn`:01,@usn6:0X7 =~$`6esn`})<-[`4esn`?* 07..]-(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})<-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Starts With (@usn6 :@usn6)-[`3esn`?:`4esn`|`2esn`* 0x0..7{`2esn`:0.e0[$`1esn`..]}]->(`4esn` :#usn8:#usn7)-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:usn1{`6esn`:{12}[{_usn3}..0X7][$7..0]}) As usn2  Load Csv With Headers From Null In 1e1 In {999} As `5esn` "),
    octest_legacy:ct_string("Match Allshortestpaths(((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)<-[_usn4?:``]-(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})))"),
    octest_legacy:ct_string("Match Allshortestpaths(((`6esn` :#usn7:`6esn`)<-[`8esn`?:usn1|:@usn6]->(`8esn` :`1esn`)-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]}))) Where False[Count(*)] Match `5esn`=((({usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`2esn`?* 010{`2esn`:$``[{#usn7}..{usn2}],`6esn`:$999 Is Not Null Is Not Null}]-(`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`2esn`?{#usn8:2.12 =~9e1 =~{_usn4},`3esn`:$1000[123.654]}]-(:`4esn`:`3esn`{@usn6:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:12.0[$999..][$@usn6..]}))) Union Merge (()) On Create Set `4esn`+=Shortestpath(({`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}))[Case When .e12 Is Null Is Null Then `1esn` In 9e0 In {7} End..][All(_usn4 In .e12 Is Not Null Where 0X0123456789ABCDEF Is Null)..] On Create Set #usn8 =$`1esn` Contains usn2 Contains 1.0,`3esn`+={_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])],``+=0.e0[$`1esn`..] Union Delete {#usn7} Starts With $`1esn` Starts With 07,$`6esn` Is Not Null Is Not Null,01[$`1esn`..\"d_str\"] Unwind 1.e1[0xabc..][.e12..] As _usn3"),
    octest_legacy:ct_string("Match `4esn`=Shortestpath(((:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})-[* ..999{_usn4:9e12 In 's_str' In $`4esn`}]-(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12}))) Using Join On #usn7,`1esn`,_usn4 Where .e0 Starts With usn2 Start `6esn`=Node:`7esn`(\"d_str\") Where 's_str' Is Not Null Foreach(`` In {usn1}[..{123456789}]| Unwind {`4esn`}[.e0][0Xa] As `8esn`)"),
    octest_legacy:ct_string("With  #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``) As @usn5 Order By {_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])] Ascending,2.12 Is Not Null Is Not Null Descending,7 Starts With $1000 Asc Skip Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) Optional Match (`2esn` {usn1:0X0123456789ABCDEF[0e0..0xabc],`4esn`:9e1[12.e12..]})<-[`3esn`{usn1:$`7esn`[_usn3..][{_usn3}..],_usn4:{`3esn`}[`6esn`..]}]->(_usn3 :`7esn`:_usn4) Using Scan @usn5:`8esn` Using Index `1esn`:`2esn`(`6esn`) Where $usn1 Is Not Null Is Not Null Foreach(@usn6 In Null Starts With {_usn4}| Start usn1=Node:`1esn`(\"d_str\") ,usn1=Node:`1esn`(\"d_str\")Where $0[{``}..`2esn`])"),
    octest_legacy:ct_string("Unwind usn2[0.e0..] As `4esn` Union Return _usn3 Starts With #usn7 As @usn5,(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Is Null Is Null,usn2[$7..$`5esn`] As #usn8 Order By $`7esn` =~#usn8 =~{`7esn`} Asc,{7}[$@usn5][123456789] Ascending,usn2[..`8esn`(Distinct 0.0[0.12])][..usn1] Descending Create Unique `2esn`=Allshortestpaths((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})) Start `4esn`=Node:usn1(@usn5={`1esn`}) ,`8esn`=Node:`5esn`({123456789})Where 9e1 =~{#usn7} Union All Remove {`3esn`:0.12 In `8esn`}.`8esn` Foreach(`1esn` In 12e12[``..][$`3esn`..]| Remove Extract(`5esn` In `5esn` In 123.654 In {`6esn`}).`3esn`!,{@usn6:True Ends With usn1,usn2:$`4esn` =~{usn1}}.`1esn` Start `5esn`=Node:`7esn`(`3esn`={`4esn`}) ,usn2=Node:`1esn`(@usn6={_usn3})Where 1.0) With  $1000 Contains $`2esn` Contains 12 As `2esn`,{@usn5} In $`5esn` As #usn7,[`8esn`[{#usn7}..][_usn4..]] Contains All(@usn5 In 07[{_usn4}..{`4esn`}] Where $`3esn` In {`1esn`} In 12e12) Contains Extract(`6esn` In {1000} Is Not Null Where 0X0123456789ABCDEF[1.0..]|0.0 Is Null) As usn1 Skip (`3esn` {`7esn`:12[`3esn`..][0X0123456789ABCDEF..]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}) Is Null Is Null Limit `1esn`[..{`4esn`}][..{0}] Where $0"),
    octest_legacy:ct_string("Start `7esn`=Relationship:#usn7(@usn5=\"d_str\") Where 1.e1 Is Not Null Create `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) Union Detach Delete #usn7[..$`1esn`][..{`1esn`}],999 Starts With {``}"),
    octest_legacy:ct_string("Match @usn6=Allshortestpaths(((@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[?{`3esn`:123.654 Starts With `8esn` Starts With @usn5,``:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]}]->(:@usn5:usn2{@usn6:0x0 Is Null,`2esn`:0x0[{`1esn`}]}))),`3esn`=((@usn5 :`6esn`:`4esn`)) Using Scan `8esn`:@usn6 Where $`8esn`[2.12][$_usn4] Union All Load Csv From _usn3(Distinct {@usn5}[01234567][{1000}])[#usn8({#usn7} =~{usn1})..Single(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..])] As `5esn` Fieldterminator \"d_str\" Start @usn6=Node:``({`2esn`}) "),
    octest_legacy:ct_string("Detach Delete $`8esn`[#usn7..][0X7..] Detach Delete 1e1[999..],$#usn7 Contains {usn2} Union Unwind Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`) Ends With Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where #usn8[1e1..`1esn`][{1000}..`6esn`]) As `` Merge ``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Start `8esn`=Node:usn2({`2esn`}) ,`3esn`=Node:#usn8(`4esn`=\"d_str\")Where `1esn` In 9e0 In {7} Union Load Csv From Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999]) As _usn4 Fieldterminator \"d_str\" Match (`1esn` :@usn5:usn2),Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))) Using Join On _usn3,`8esn` With  Any(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)[[`7esn` In @usn5[01..`6esn`] Where True In `8esn`|{usn1} Contains 123.654 Contains {#usn8}]..{`5esn`:0Xa Is Null Is Null}][None(#usn7 In {`5esn`} Ends With `2esn` Where 12.e12 Starts With `8esn` Starts With 9e12)..Extract(`5esn` In $999[12] Where $`8esn` Contains 12)],[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}][({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)..] Order By 010 Asc,{`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] Desc,`5esn`(Distinct @usn5[01..`6esn`],7[`7esn`..usn2][$`5esn`..0X7]) Is Null Is Null Desc Skip _usn3 Starts With $#usn7 Starts With $`` Limit {`4esn`} Is Null Where $#usn7 Is Null"),
    octest_legacy:ct_string("Delete {#usn8} Ends With {123456789} Ends With #usn8,$`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}],{7}[0X0123456789ABCDEF..][{123456789}..] Union Optional Match `1esn`=Allshortestpaths((((`` {`2esn`:{``}[$@usn5]})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[usn1?:`7esn`* 0x0..7]->(@usn6 {@usn6:{0}[$0][$#usn7]})))),`8esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})) Start `6esn`=Relationship:`4esn`(`3esn`=\"d_str\") "),
    octest_legacy:ct_string("Foreach(`4esn` In Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)]| Load Csv With Headers From $_usn4[0X7..{1000}] As @usn6  Create Unique Shortestpath((((`` {#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0}))))) Unwind $123456789 Ends With 1e1 As #usn8 Delete {_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])],$999[999..][$_usn4..],0.12[{usn1}..{1000}][{0}..{#usn8}]"),
    octest_legacy:ct_string("Start _usn3=Node:`4esn`({`7esn`}) Where 's_str'[..'s_str'][..{#usn7}] Create Shortestpath((`1esn` {`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000)<-[:`1esn`|``{@usn5:@usn6[9e12..]}]->(`8esn` {#usn8:`4esn`[usn2..]})),Allshortestpaths(((`5esn` {999})<-[?:usn2|_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}]->(usn2 :@usn5:usn2))) Create Unique Allshortestpaths((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[`1esn`?]-(`` :`5esn`))),`8esn`=((`` {@usn6:0.12 Is Not Null})<-[`7esn`* 01..]-(@usn6 )<-[?* 0{`1esn`:{`6esn`} Is Not Null}]-(usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})) Union All Remove [0Xa[01..$`1esn`],01234567[usn1]].usn1?,Shortestpath((((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})<-[`2esn`?* 7{@usn5:@usn5 In 00}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(#usn7 :_usn4:`1esn`{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`}))))._usn4?,None(#usn8 In True In `8esn`).`6esn`! Load Csv From $7[.e1] As `8esn` Fieldterminator \"d_str\" Optional Match Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})),`7esn`=(@usn6 :`7esn`:_usn4) Using Index usn2:usn1(#usn7) Using Join On @usn5 Union Unwind $@usn5 =~999 =~0e0 As `7esn`"),
    octest_legacy:ct_string("Unwind [usn2 In {@usn5} Where {1000}[0e0][{usn1}]|123.654[2.12..][{`7esn`}..]] Starts With Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With All(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]) As `` Merge ``=(`4esn` {@usn6:1000 In {`4esn`}})<-[usn2:#usn8|_usn3]->(:`8esn`:_usn3{`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}) On Create Set `1esn`+=0 Contains 123.654 On Match Set `4esn` =12[0X0123456789ABCDEF..][Count(*)..],#usn7+=9e0 Is Not Null Is Not Null Union All Create (:#usn8:#usn7)-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`),(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1) Detach Delete {#usn7} =~$0,Reduce(`2esn`={`4esn`} Is Null,#usn8 In True In `8esn`|{@usn5}[{``}][{_usn4}]) =~Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 0 Ends With .e0)"),
    octest_legacy:ct_string("Create Unique `7esn`=Allshortestpaths(((`` :#usn8:#usn7))),@usn6=Shortestpath(((:@usn6{`1esn`:$999[12],@usn5:07[{_usn4}..{`4esn`}]})<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Detach Delete @usn5[123.654][12.e12] Union With  $`5esn`[$1000..][0e0..],'s_str'[..'s_str'][..{#usn7}] As `5esn`,$_usn4[0X7..{1000}] Order By 010 Contains $`5esn` Ascending Limit $#usn7 Ends With $999 Ends With {`5esn`} Create Unique ``=Shortestpath(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})),`7esn`=((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}}))"),
    octest_legacy:ct_string("Optional Match `6esn`=({_usn4:Null[False..][12.e12..]})-[@usn6:`1esn`|``{usn2:$`3esn` Contains .e1,`6esn`:07[{_usn4}..{`4esn`}]}]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})<-[_usn3:`5esn`|`3esn`]->(#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]}),``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Using Index `4esn`:_usn4(`1esn`) Where $`8esn`[2.12][$_usn4] Union All Create _usn3=(usn2 :`4esn`:`3esn`{`8esn`:@usn5[_usn3..{12}][{999}..$7],`6esn`:$`2esn`[#usn7][01]}),_usn4=Allshortestpaths((((`6esn` {#usn7:999[1000..]})<-[`2esn`?* 0Xa{usn1:1e1[usn1..$123456789][Count(*)..False]}]->({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})))) Start #usn7=Rel:_usn3({_usn3})  Remove None(`4esn` In False[0.0..{@usn6}] Where 9e1[12.e12..]).usn1?,Reduce(`4esn`=.e12[Count(*)..{`4esn`}][07..$1000],#usn7 In $@usn6 Contains 0 Contains 0|0e0 Starts With 's_str')._usn3!,Reduce(`6esn`=`2esn` =~$#usn7 =~_usn4,usn2 In 999[{123456789}..999]|0xabc =~{`8esn`} =~{_usn3}).@usn6? Union Remove Filter(_usn4 In .e12 Is Not Null Where 9e1 Is Not Null).`4esn`!"),
    octest_legacy:ct_string("Return Distinct *,.e1 Starts With #usn7 Starts With 1.e1 As usn2 Order By $#usn7[$``..{`7esn`}] Descending,0X7 Is Not Null Is Not Null Asc Limit {_usn4} Ends With 12.0 Ends With $@usn6 Union All Unwind `` Contains True As `3esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Merge #usn8=Allshortestpaths(((`7esn` )<-[#usn8:``* 00..999{usn2:{@usn5} Contains 0X7 Contains 1e1}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}))) Load Csv From {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..] As `6esn`  Union Delete 01234567 Contains 010 Contains _usn4 Merge @usn5=((`3esn` {`1esn`:{`2esn`}[{123456789}..$#usn7][_usn3..999]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[usn1?:@usn5|``* 1000]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})) Union All Create #usn7=((`6esn` {_usn3:999 Is Not Null Is Not Null})-[`3esn`?* 0{`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]}]-(_usn3 :`5esn`)),Allshortestpaths((`2esn` {`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`?{`3esn`:`5esn` =~@usn6 =~$`7esn`,usn2:$0 Ends With 12.0 Ends With _usn4}]->({`4esn`:01234567[``..$`1esn`][True..$#usn7],`5esn`:010[$12..]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(#usn7 :#usn7:`6esn`{1000})) Foreach(#usn8 In 0.e0[$`1esn`..]| Create Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))) Return *,Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) As `7esn` Order By @usn6 Is Not Null Is Not Null Asc Skip $`1esn` Starts With 999 Limit [{``} =~{`2esn`} =~$`8esn`] Ends With Extract(usn2 In {@usn5} Where 999 Is Not Null Is Not Null|0[1.0..$``]) Ends With (:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})"),
    octest_legacy:ct_string("Merge Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4)) Merge Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) On Match Set usn2+={`4esn`} Contains \"d_str\",usn2 =[@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null On Create Set `` =$_usn4[$_usn4..01234567],(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}).`3esn` =`6esn`[$12][{12}] Optional Match Shortestpath((`8esn` :_usn3:@usn6)<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Union All Optional Match `7esn`=({`3esn`:_usn3 In 1.e1}),((usn2 {`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]})) Using Scan `6esn`:`7esn` Using Join On `3esn`,`4esn` Unwind exists(Distinct $7 =~{`7esn`} =~$`6esn`,$`5esn` Starts With 1.0 Starts With $usn2) In Case When $#usn8 In {12} In $`4esn` Then `3esn` Starts With @usn5 Starts With {`4esn`} When $@usn5[$7..@usn5] Then $`1esn`[0..{_usn3}] Else {`1esn`}[`1esn`..123.654][{`4esn`}..$7] End In None(usn2 In 999[{123456789}..999] Where `5esn` In 123.654 In {`6esn`}) As usn1 Start usn1=Node:`1esn`(\"d_str\") ,usn1=Node:`1esn`(\"d_str\")Where $0[{``}..`2esn`]"),
    octest_legacy:ct_string("Match @usn6=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Using Index `4esn`:#usn8(`3esn`) Where {#usn8} Is Not Null Is Not Null Union With  *,Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) Order By 0 =~usn1 Descending Foreach(`7esn` In `7esn`[`5esn`..][0.12..]| Return Distinct $_usn3[@usn6..][{``}..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Order By Reduce(``=$`7esn` Contains 9e12 Contains `2esn`,@usn5 In 07[{_usn4}..{`4esn`}]|True[..{_usn3}][..999]) In Reduce(`6esn`=#usn8 Ends With 0Xa,usn1 In #usn8 =~$@usn5|$7[.e1]) In Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`}) Asc,Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] Descending Limit 01[0.0..9e0][`3esn`..$`1esn`]) Union Foreach(@usn5 In _usn3 Starts With $#usn7 Starts With $``| Start _usn3=Rel:_usn3(usn2=\"d_str\") Where 0x0 =~$`2esn` =~#usn7)"),
    octest_legacy:ct_string("Detach Delete {@usn5} =~$`2esn` Load Csv From [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] As `3esn` "),
    octest_legacy:ct_string("Create (()<-[?$@usn6]->(@usn5 :usn1{#usn8:0xabc =~{_usn4}})) Load Csv From [9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) As usn2 Fieldterminator \"d_str\" Union All Load Csv With Headers From $#usn7[$``..{`7esn`}] As `5esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(`7esn` In {`1esn`} Is Null Is Null| Match `6esn`=((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[* 010{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` ))),Allshortestpaths(((:`8esn`:_usn3{_usn3:{999}[..{999}]})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index ``:#usn7(_usn4) Load Csv With Headers From True In $#usn8 As _usn4 ) Union All Load Csv With Headers From `1esn`[$`8esn`..][True..] As `5esn`  Start #usn8=Relationship(*)  Create Shortestpath((`8esn` :_usn3:@usn6)<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})),`1esn`=(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?* ..999]-(_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null}) Union All With Distinct $#usn8[$12][`6esn`] As @usn6 Order By $`7esn` =~#usn8 =~{`7esn`} Asc,{7}[$@usn5][123456789] Ascending,usn2[..`8esn`(Distinct 0.0[0.12])][..usn1] Descending Skip `2esn` =~$#usn7 =~_usn4 Limit Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Load Csv With Headers From Case When _usn3 Ends With {#usn7} Then {usn1} Is Null Is Null When `1esn` In 12.e12 In $#usn7 Then 1.0 =~`7esn` =~$`7esn` End In Case When 999 Starts With {``} Then Count(*) In `1esn` In {_usn3} Else {`2esn`} End As `2esn` "),
    octest_legacy:ct_string("Unwind (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As @usn5 Remove Reduce(@usn5=@usn6 Contains {0},`1esn` In {``} =~{`2esn`} =~$`8esn`|$1000[999..][0Xa..]).``?,(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[{`1esn`:{usn2}[$usn2],`4esn`:Null Starts With {_usn4}}]-(:_usn4:`1esn`).usn2"),
    octest_legacy:ct_string("Load Csv From $`2esn`[usn2][#usn7] As `` Fieldterminator \"d_str\" Create (`1esn` {#usn8:@usn6 Contains {0}}),`3esn`=((:#usn8:#usn7)-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})) Return 12e12[$``..] As #usn7,$#usn7 Contains Count(*) Order By $#usn7[$usn2..@usn6][$`7esn`..{7}] Ascending,_usn4 In usn2 Desc,9e1 Contains {#usn8} Contains `5esn` Asc Skip 0.e0[#usn7..][$@usn5..] Limit {``} Contains 12e12 Contains Null"),
    octest_legacy:ct_string("Optional Match Shortestpath((`8esn` :_usn3:@usn6)<-[`5esn`?:`5esn`|`3esn`* 123456789..999{@usn6:07 Is Null}]-(:usn2{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) With Distinct *,{1000} Is Not Null Order By {usn1} Contains $usn1 Contains $usn1 Descending,{@usn5}[12.0..][$999..] Descending,_usn4 =~$`2esn` Desc Skip {`2esn`} Is Not Null Where .e12[0.0..][$#usn8..] Union Load Csv From $@usn5[`2esn`..][#usn7..] As ``  Delete Count(*) Is Not Null Is Not Null,9e1 =~{#usn7} Union All Detach Delete {0}[$usn2..0.e0][{`4esn`}..True],`6esn`({`1esn`}[`1esn`..123.654][{`4esn`}..$7])[Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})))..][Case When {`6esn`}[0.e0..$123456789] Then 's_str' =~0xabc =~$@usn5 When 0X7 Is Null Is Null Then {999} =~7 =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End..]"),
    octest_legacy:ct_string("Start usn2=Relationship:`6esn`({#usn8}) ,@usn6=Rel:``(``={_usn4}) Return Distinct `3esn`[#usn8] Order By $`3esn`[`3esn`..] Ascending,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Ascending,{usn1}[$`8esn`][0.e0] Asc Skip `3esn`[{`1esn`}] Create Unique (((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[usn1:#usn8|_usn3]->(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}))),_usn3=Allshortestpaths((@usn5 :`3esn`:@usn5{`1esn`:{#usn7} =~$0})<-[:`5esn`|`3esn`{@usn5:usn1 =~1000 =~12}]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}}))"),
    octest_legacy:ct_string("Match usn2=Shortestpath(((_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:`8esn`|:_usn3]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Where 0xabc =~{_usn4}"),
    octest_legacy:ct_string("Foreach(_usn3 In {`2esn`} Contains 0.12 Contains 0.0| Load Csv With Headers From 12.0 =~0.12 =~999 As `7esn`  Unwind $@usn5[$7..@usn5] As usn1) Union Start `3esn`=Node:#usn8({_usn4})  Return *,#usn8 Starts With {_usn3} Starts With 123.654 Order By 0X7 Is Not Null Is Not Null Asc,{usn1} Starts With #usn8 Desc Skip (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}) Is Not Null Limit {_usn3}[False][#usn7] Unwind [@usn5 In 07[{_usn4}..{`4esn`}] Where 12.0 Ends With 0e0 Ends With $123456789|$`2esn` Ends With $`2esn`] Contains Reduce(@usn6=`7esn`[`5esn`..][0.12..],`1esn` In {``} =~{`2esn`} =~$`8esn`|$1000[999..][0Xa..]) Contains Extract(usn2 In 999[{123456789}..999] Where 9e1 Is Not Null) As `4esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From .e0 In 9e1 In $_usn3 As `3esn`  Unwind {`6esn`:`2esn`[0Xa][{`8esn`}],@usn6:.e1 =~9e12} Is Null Is Null As @usn6"),
    octest_legacy:ct_string("Match (`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})-[usn1:`8esn`|:_usn3* 0Xa{`1esn`:`8esn`[$123456789..][$usn1..]}]->(usn2 :`6esn`:`4esn`),`8esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Using Scan `6esn`:`1esn` Using Join On `3esn`,`6esn`,_usn3 Where $`3esn`[12.e12...e1]"),
    octest_legacy:ct_string("Create Unique (((_usn3 :@usn5:usn2)-[`2esn`]-(:`4esn`:`3esn`{`8esn`:@usn6[..{usn2}][..{`5esn`}],`2esn`:$`1esn` Starts With 999})<-[* 01..{`4esn`:`3esn` Is Null Is Null}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}}))) Return $123456789 Ends With 1e1 As `5esn`,Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Is Not Null Is Not Null As `` Skip 00[$usn2..][0.12..] Union Create Unique (((_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0}))),(#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}) Union Unwind Case When `5esn` Starts With {999} Then 0.e0 Ends With $`8esn` When {_usn4} Ends With 12.0 Ends With $@usn6 Then 9e0[..{usn1}] End As _usn3"),
    octest_legacy:ct_string("Match ((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(`1esn` {_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})),`3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]})) Return [12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null] In Filter(`4esn` In False[0.0..{@usn6}] Where 0xabc In 9e1) In [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where `4esn` Starts With 0x0] As `4esn`,0.12 In `8esn` Order By @usn6 In {@usn5} In 123.654 Desc Union Detach Delete Case When @usn6 Contains {0} Then 12 =~$`5esn` =~$_usn3 When {usn2}[{`7esn`}][$usn2] Then $12[`6esn`][$#usn8] Else \"d_str\" Ends With 0e0 Ends With {usn2} End Is Null Is Null,`2esn` Ends With $`6esn` Ends With 12.0 Load Csv With Headers From {@usn6} Contains {_usn3} Contains 1000 As #usn7 Fieldterminator \"d_str\" Union With  `3esn`[#usn8] Order By $`3esn`[`3esn`..] Ascending,{`1esn`}[`1esn`..123.654][{`4esn`}..$7] Ascending,{usn1}[$`8esn`][0.e0] Asc Skip `3esn`[{`1esn`}] Foreach(`5esn` In Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})))| Unwind `1esn` In 12.e12 In $#usn7 As `5esn`) Create @usn6=({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'}),(@usn6 {_usn3:`4esn` Is Null})-[#usn8?:`8esn`|:_usn3* 123456789..999]->(_usn3 {usn1:{`5esn`} Starts With 123456789 Starts With 07,#usn8:@usn5[_usn3..{12}][{999}..$7]})<-[?:#usn8|_usn3{_usn4:{usn2} Contains {123456789} Contains 0Xa}]->(`2esn` :`6esn`:`4esn`{`5esn`:0xabc =~{_usn4}})"),
    octest_legacy:ct_string("Unwind 0x0 =~$`2esn` =~#usn7 As `` Load Csv From Case When 1.0 Ends With {`4esn`} Ends With {`2esn`} Then `2esn`[{_usn3}..9e1][$`7esn`..Count(*)] When 7 Is Null Is Null Then Null[False..][12.e12..] End Starts With {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0} As `5esn`  Union All Remove Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where .e12 In `1esn` In `3esn`|12 =~$`5esn` =~$_usn3).``?,All(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).@usn6! With Distinct Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null Order By $`7esn` Ends With $1000 Ends With {999} Asc,{999}[{0}][$#usn8] Asc"),
    octest_legacy:ct_string("With Distinct *,{@usn6} Starts With .e1 As `3esn`,{#usn8} =~$0 Order By 's_str' Ends With 's_str' Ends With $1000 Asc,'s_str' In {1000} In 010 Descending Skip #usn8[#usn8..]"),
    octest_legacy:ct_string("Create _usn3=Shortestpath((:`6esn`:`4esn`{usn1})-[?:`8esn`|:_usn3]-(`` :`2esn`)) Load Csv From {#usn8} Starts With {`4esn`} Starts With 00 As _usn3 Fieldterminator 's_str' Union Create _usn3=Allshortestpaths((_usn4 :usn1{`6esn`:{_usn4}})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]})),``=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Delete $999 In $999,$7 =~{`7esn`} =~$`6esn`"),
    octest_legacy:ct_string("Unwind 0e0 Ends With 0x0 Ends With $@usn5 As `4esn` Create `3esn`=Shortestpath(((_usn4 :_usn3:@usn6{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}))) Load Csv From $`7esn` Ends With $1000 Ends With {999} As _usn4 Fieldterminator 's_str' Union All Match #usn8=(:`5esn`{`3esn`:999[{123456789}..999],`5esn`:123.654 In {12} In ``})<-[?* ..999]->(:@usn5:usn2),`7esn`=Allshortestpaths((_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})) Foreach(`3esn` In {@usn5} Contains 0X7 Contains 1e1| Delete $`2esn`[#usn7][01],0Xa[$#usn8] Create Shortestpath((((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[`5esn`?:usn1|:@usn6]-(usn2 :`2esn`)<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null}))))) Match ((({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Using Index `2esn`:`6esn`(`1esn`)"),
    octest_legacy:ct_string("Remove All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 In .e1).@usn6?,Case When 0.e0 Ends With $`8esn` Then {`7esn`} Contains 's_str' Contains 01 End.@usn6?,Shortestpath(((`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))).`2esn`? Foreach(#usn8 In Shortestpath((({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})-[`3esn`* 1000]-(:`3esn`:@usn5{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`}))) Is Null| Create _usn3=Allshortestpaths(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})-[`4esn`* 1000]-(`3esn` :_usn3:@usn6{`6esn`:7 Starts With `5esn`})),`1esn`=(((usn1 :`4esn`:`3esn`)-[@usn5* 0x0..7]-(`8esn` :_usn3:@usn6)<-[:`5esn`|`3esn`$usn1]-(#usn8 :@usn5:usn2))) Create Unique `2esn`=((:usn2)-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`2esn` {@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})<-[usn2?:`5esn`|`3esn`]->(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})),((`7esn` :@usn5:usn2)<-[:``* 010{`2esn`:'s_str'[..'s_str'][..{#usn7}]}]-(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{@usn5:{7} Starts With $usn2 Starts With $usn2}]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12}))) Union All Merge @usn6=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) On Create Set {#usn8:$`7esn` In $999 In {123456789}}.`2esn` ={`6esn`}[_usn3],`6esn` =1.e1 =~9e12 =~$`3esn`,`8esn`+=$@usn6 Is Null Is Null On Match Set Case _usn3[$123456789..] When `8esn`[{#usn7}..][_usn4..] Then {`2esn`}[..{123456789}] When `5esn`[$usn1..$7] Then 1000 Is Not Null End.#usn7 =$1000[123.654],`3esn`:_usn3:@usn6,`1esn` =0x0[9e0..][$@usn5..]"),
    octest_legacy:ct_string("Foreach(`` In Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])| Remove [0.0[.e12..],12.0 In $usn1 In True,$999[$12..][.e0..]].#usn8,[usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12|00[{999}..$#usn7][$0...e0]]._usn3! Remove ['s_str' =~0x0 =~{#usn8},0.e0 Ends With {@usn5} Ends With 0e0].`5esn`!) Return (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null,{#usn7} Is Null Is Null,{1000}[9e0][`3esn`] Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Limit `6esn` Contains {`3esn`} Create Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})"),
    octest_legacy:ct_string("Foreach(#usn7 In All(_usn4 In .e12 Is Not Null Where 0X0123456789ABCDEF Is Null) Ends With [999[1000..]] Ends With [usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]]| Remove [`4esn` Is Null,12.0 In $usn1 In True,$`3esn` In {`1esn`} In 12e12].`2esn`?,[@usn5 In 07[{_usn4}..{`4esn`}]|.e12[0.0..][$#usn8..]].@usn5 Unwind {@usn6} Contains {_usn3} Contains 1000 As `4esn`) Start _usn4=Relationship:`3esn`(#usn8={`5esn`}) ,`6esn`=Node:`1esn`(usn1={`8esn`}) Create Unique _usn4=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})))) Union Remove Any(usn2 In {@usn5} Where `7esn` Is Null).#usn8? Union Remove [0.0[.e12..],7 Starts With `5esn`,$7[..999][..`2esn`]].@usn5,Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 9e12 In 's_str' In $`4esn`).#usn7! Detach Delete 999[{12}..][$1000..],Allshortestpaths(((@usn6 $1000)))[..Allshortestpaths((`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]}))],True In $#usn8 Merge ((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})) On Create Set {`3esn`:9e12[1000]}.`6esn`? =1e1 In @usn6 In 0X0123456789ABCDEF,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $@usn5[`2esn`..][#usn7..]|$`4esn` Is Null].usn1! =$`7esn`[_usn3..][{_usn3}..] On Create Set (_usn4 :_usn3:@usn6{_usn4:Null[False..][12.e12..]})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->(#usn7 {`3esn`:{usn1}[..{#usn7}]}).`3esn` =True =~`5esn`"),
    octest_legacy:ct_string("Foreach(_usn4 In 010[$12..]| Unwind {``}[2.12] As usn1) Foreach(`1esn` In 0X0123456789ABCDEF[1.0..]| Remove [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 00[$usn2..][0.12..]|0e0 In .e1]._usn4?,Single(`6esn` In {1000} Is Not Null Where {`7esn`}[{#usn7}..]).@usn5) Union All Return Distinct False[Count(*)],`4esn` Is Not Null As _usn4 Skip All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]] Limit (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) Create `7esn`=((`6esn` :`5esn`{@usn5:{`7esn`}[..$`8esn`][..{`8esn`}],`3esn`:usn2[..$`8esn`][..``]})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[#usn8?:#usn7|:``* 0xabc..01234567]-(_usn4 :#usn7:`6esn`{`7esn`:$``[{#usn7}..{usn2}]})),(((`7esn` :`6esn`:`4esn`)-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(`2esn` :#usn7:`6esn`)-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`` {`2esn`:{``}[$@usn5]}))) Union Unwind $`2esn` Contains `5esn` Contains .e1 As #usn7 Remove {@usn6:$usn1[{_usn3}],`8esn`:0[{`4esn`}..]}.`4esn`!,(`4esn` :usn2)<-[`3esn`?:`6esn`|:`7esn`* ..999]->(:#usn7:`6esn`{usn1:$#usn8 Is Not Null})-[`5esn`?:`8esn`|:_usn3* 0x0..7{usn2:$#usn7 Contains {usn2}}]-({@usn5:usn2[$7..$`5esn`]}).`1esn`!,Any(usn2 In 999[{123456789}..999] Where usn1 Ends With $@usn6 Ends With $1000).`7esn` Start @usn6=Rel:``(``={_usn4}) Where {`7esn`}"),
    octest_legacy:ct_string("Return (`2esn` :``:usn1)<-[`3esn`* 7{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]->(`` ) Is Not Null Is Not Null As _usn3 Limit {999} =~7 =~{usn1}"),
    octest_legacy:ct_string("Create Unique `8esn`=Allshortestpaths((:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})),(usn1 :`8esn`:_usn3)<-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]-({``:`1esn` In {`4esn`},`6esn`:1e1[{`3esn`}][True]})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})"),
    octest_legacy:ct_string("Match `3esn`=Shortestpath((`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})) Using Join On `7esn`,_usn3,`3esn` Using Join On `8esn`,`4esn`,`1esn` Where $usn1[{_usn3}] Detach Delete Allshortestpaths((`5esn` :`6esn`:`4esn`{`4esn`:01234567[usn1]})) Contains [1000 Contains 12.e12,{usn2}[{`7esn`}][$usn2],$7[0X0123456789ABCDEF]] Contains All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4}),$123456789 Ends With 1e1,999 Is Not Null Is Not Null Union Load Csv With Headers From $`1esn` Contains usn2 Contains 1.0 As usn1  With  $999 Starts With $usn1 Starts With {`3esn`} As _usn3 Order By 0.e0 Ends With {@usn5} Ends With 0e0 Descending Skip [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Union Load Csv With Headers From False =~9e0 =~{`5esn`} As #usn7 Fieldterminator \"d_str\" Merge `3esn`=(((:@usn6{@usn6:$999[..$`2esn`]})-[_usn4* 0X0123456789ABCDEF]-(`5esn` {usn2:$#usn7 Contains {usn2}})-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`}))) On Match Set usn1+=0[...e1][..$usn2] On Create Set #usn8+=$_usn3[$usn2..],``+={``} Ends With `8esn` Ends With {`6esn`},`2esn` =Reduce(`3esn`=0.e0 Ends With $`8esn`,usn2 In 999[{123456789}..999]|2.12 =~9e1 =~{_usn4}) =~Case When Null In 1e1 In {999} Then 12 Is Null Is Null When 0[`6esn`][1e1] Then @usn6 In {@usn5} In 123.654 Else $7[..999][..`2esn`] End =~({@usn6:{_usn4} Ends With 12.0 Ends With $@usn6,`4esn`:0e0 Starts With 's_str'})-[#usn7{usn1:00 =~.e12}]->(`8esn` {@usn5:{`4esn`} Contains \"d_str\",`7esn`:0Xa[$#usn8]})<-[`1esn`?{`2esn`:$7[0X0123456789ABCDEF]}]->(_usn3 {_usn4:Null[False..][12.e12..]}) With Distinct *,.e1 Starts With #usn7 Starts With 1.e1 As usn2"),
    octest_legacy:ct_string("Match (:_usn3:@usn6{usn2:.e0 In 9e1 In $_usn3,_usn4:True[12e12..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})<-[* ..12]->(`5esn` :`5esn`)"),
    octest_legacy:ct_string("Return Distinct $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] As usn1 Order By $12 =~{12} Ascending Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 12.0 Starts With 00 Starts With 9e1] =~Reduce(`6esn`=9e1[..2.12][..@usn6],usn1 In {usn2} Contains {123456789} Contains 0Xa|{`6esn`} Is Not Null Is Not Null) =~(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})-[`8esn`?:`8esn`|:_usn3* 01..]->(:#usn8:#usn7)<-[?{`2esn`:$`6esn` Is Null Is Null,`8esn`:True Starts With 2.12 Starts With {123456789}}]->(:#usn7:`6esn`{`6esn`:0[{`4esn`}..],`7esn`:{``}[$@usn5]}) Limit {`3esn`} Ends With $123456789 Ends With {12} Remove None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True).``?,Filter(`4esn` In False[0.0..{@usn6}]).#usn8 Union All Start #usn8=Node:`2esn`(`1esn`=\"d_str\") ,@usn5=Node:usn2(@usn5=\"d_str\")Where ``[..`3esn`][..{@usn6}] Merge `4esn`=Shortestpath((:`4esn`:`3esn`{usn1:0e0 Starts With 's_str',_usn4:$@usn6[..{`6esn`}][...e0]})-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)) Union All Create (:`8esn`:_usn3{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12}) Foreach(`5esn` In $`1esn`[0..{_usn3}]| Start @usn6=Rel:#usn7(``={@usn5}) Where {`3esn`} Ends With $123456789 Ends With {12} Unwind $@usn5 =~999 =~0e0 As `7esn`)"),
    octest_legacy:ct_string("Start `1esn`=Relationship:`1esn`(#usn7={999}) Where $`2esn`[#usn7][01] Union Delete False =~9e0 =~{`5esn`},$12 Starts With $`3esn` Starts With $_usn3 Union Remove {`7esn`:`3esn` Is Null Is Null,`1esn`:01234567 Is Not Null}._usn4?,[#usn7 In $@usn6 Contains 0 Contains 0 Where 0x0[9e0..][$@usn5..]].@usn5!"),
    octest_legacy:ct_string("Unwind $0 Starts With `2esn` Starts With {`1esn`} As usn2 Delete Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3} In 010 In 0.e0][..Case {`5esn`} Contains 0 When {_usn4} Then 1e1[1.e1..] When {_usn3} In 010 In 0.e0 Then $0 End][..[@usn5 In 07[{_usn4}..{`4esn`}] Where {`7esn`} =~01234567 =~`7esn`|$7 =~{`7esn`} =~$`6esn`]],True In `8esn` Unwind Filter(usn1 In {usn2} Contains {123456789} Contains 0Xa Where 7 Is Null Is Null) Ends With @usn5(010 Starts With `3esn` Starts With {usn1},{`2esn`}[@usn6][{_usn3}]) As `1esn` Union All Remove Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`)<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))).`5esn`?,{``:{@usn5}[{``}][{_usn4}],`3esn`:{0}[123456789..$`8esn`]}.@usn5?,[_usn3[..0xabc][..@usn5],$#usn7 Starts With $`4esn`,{`7esn`} Ends With $usn2 Ends With 9e0].@usn6! Return Distinct {`6esn`} Is Not Null Order By .e12[$``..] Desc Skip {`2esn`}[..``] Create `4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})))"),
    octest_legacy:ct_string("Remove (`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(`2esn` :`6esn`:`4esn`)<-[_usn4?:_usn3|:`6esn`]->(@usn5 ).`1esn`!,[_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]|True Starts With 2.12 Starts With {123456789}].`6esn`?,Case $usn1[..$`1esn`] When True[..{_usn3}][..999] Then {7}['s_str'..] When `6esn` Ends With 0x0 Ends With 12 Then 9e1 Ends With 0xabc Ends With @usn6 Else `1esn` In {`4esn`} End.`2esn` Union Return *,$#usn7 Is Null Skip 0.e0 Ends With $`8esn` Limit .e12 Is Null Is Null Unwind {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Is Not Null Is Not Null As _usn4 Return 999 Contains $`` Contains {`1esn`} As `1esn` Order By .e1 Ends With $usn2 Ends With $7 Ascending Limit 123456789 Starts With 9e0"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath((:`6esn`:`4esn`{usn1})-[?:`8esn`|:_usn3]-(`` :`2esn`)) Using Scan `7esn`:`2esn` Using Join On `5esn`,`2esn` Create Shortestpath(((({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})))),({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999}) Return {`3esn`}[`6esn`..],.e12 Is Not Null As _usn4,{12}[{_usn3}..0X7][$7..0] As @usn5 Order By 0e0 Is Null Descending,{`8esn`}[{`6esn`}..1.e1] Asc,.e12 Starts With 12 Descending Limit Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 123.654 In {`6esn`} In `6esn`) Starts With Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))"),
    octest_legacy:ct_string("Create Allshortestpaths((@usn6 {@usn6:{0}[$0][$#usn7]})),`8esn`=Allshortestpaths(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Delete $`1esn`,0xabc =~{_usn4} Load Csv From 123456789 Is Null Is Null As #usn7  Union Foreach(#usn7 In $@usn6| Load Csv From (`5esn` {`8esn`:1e1 In 0xabc})-[`8esn`?:`1esn`|``* 0X7..{`1esn`:{`2esn`}[..``],`8esn`:$999[12]}]-(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}) In Any(@usn5 In 07[{_usn4}..{`4esn`}] Where `6esn` =~12.e12 =~123456789) In {usn2:00 =~.e12} As `5esn` ) Optional Match #usn8=(`3esn` :`3esn`:@usn5)<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}) Using Index `7esn`:`1esn`(`7esn`) Where {`2esn`}"),
    octest_legacy:ct_string("Start @usn6=Rel:#usn7(`3esn`={_usn4}) ,`1esn`=Node:_usn3(usn2=\"d_str\")Where $0[{``}..`2esn`] Load Csv From $7[.e1] As `8esn` Fieldterminator \"d_str\" Union All Match #usn8=((:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})-[_usn4?* 0Xa{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]->(_usn3 {``:\"d_str\" Starts With $`` Starts With $usn1})),(((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})<-[{@usn6:{usn1}[..{#usn7}]}]->(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}))) Using Join On `7esn`,`2esn`,@usn6 Return $7 Is Null Is Null As _usn3,@usn5(12e12 In Null In {7}) Contains Case When `5esn`[$123456789][`2esn`] Then $`2esn`[Null][{``}] When {`7esn`}[..0xabc][..0e0] Then {#usn7} =~{usn1} Else #usn8 Is Null End Skip $#usn8 Is Not Null Is Not Null Limit $`8esn` Contains 12 Union Start @usn6=Node:@usn6('s_str') ,usn1=Relationship:`7esn`(_usn3={0})Where usn1[#usn8..0.0] Unwind Reduce(#usn8=01234567 Is Not Null,`6esn` In {1000} Is Not Null|$`2esn` Contains `5esn` Contains .e1)[[$#usn7[$``..{`7esn`}]]..][[#usn8[1e1..]]..] As `5esn` Foreach(@usn5 In `5esn` Starts With {999}| Load Csv With Headers From Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where @usn6[..{usn2}][..{`5esn`}]) Is Null As `5esn` )"),
    octest_legacy:ct_string("Foreach(usn1 In (`3esn` {`7esn`:12[`3esn`..][0X0123456789ABCDEF..]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}) Is Null Is Null| Delete $`4esn`[9e12..$_usn4][usn1..{`5esn`}],Reduce(`1esn`=$`7esn` Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|$#usn7[$usn2..@usn6][$`7esn`..{7}]) In Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) In Case _usn3 In 1.e1 When $`4esn` Ends With $12 Then #usn8 Starts With {_usn3} Starts With 123.654 When $`6esn` Is Not Null Is Not Null Then $@usn6 End Create Unique ((:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})-[* ..999{_usn4:9e12 In 's_str' In $`4esn`}]-(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})),`2esn`=Allshortestpaths((({`2esn`:1000 Is Not Null})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1)))) Union Foreach(`5esn` In $`8esn` In {`2esn`} In $0| Match Allshortestpaths(((usn2 $`2esn`))),#usn8=({`3esn`:{#usn8} Is Not Null Is Not Null}) Using Index @usn6:@usn6(@usn6))"),
    octest_legacy:ct_string("Foreach(#usn8 In {`1esn`}[01234567..][@usn5..]| Delete {`1esn`}[01234567..][@usn5..],123.654[2.12..][{`7esn`}..] Remove Single(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999})._usn4?) Load Csv From All(`7esn` In @usn5[01..`6esn`] Where Count(*) In {`4esn`}) As `2esn`  Unwind 12.0 In $usn1 In True As `8esn` Union Merge `1esn`=Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) Start ``=Node:`1esn`(_usn3={`4esn`})  Create `6esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}}))"),
    octest_legacy:ct_string("Delete $`4esn` Ends With $12,`1esn`[$`8esn`..][True..] Load Csv With Headers From `4esn`[0X0123456789ABCDEF..{999}][True..{_usn3}] As `5esn` Fieldterminator \"d_str\" Delete {`3esn`:0 =~usn1,usn2:010 Ends With 123456789 Ends With .e0} In Case When {_usn3} In 010 In 0.e0 Then 0xabc =~{`8esn`} =~{_usn3} When 123456789 Is Not Null Is Not Null Then 9e12 Contains {`4esn`} End In Reduce(`4esn`=usn1 Ends With $@usn6 Ends With $1000,_usn4 In .e12 Is Not Null|{@usn5} In $`5esn`),0X0123456789ABCDEF[{12}..`6esn`][{usn2}..$7],{`2esn`}[..{123456789}]"),
    octest_legacy:ct_string("Remove Reduce(@usn5=$_usn3[$usn2..],@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$0 Starts With `2esn` Starts With {`1esn`}).`5esn`?,Extract(usn1 In {usn2} Contains {123456789} Contains 0Xa Where 7[`7esn`..usn2][$`5esn`..0X7]|$@usn5 Starts With 1e1).`5esn`?,{_usn4:$`3esn`[$_usn4][True],usn2:{``}[$@usn5]}.@usn5! Merge ((_usn4 {@usn6:0Xa[0X7..#usn8][_usn3..9e1],``:123456789 Is Not Null})) On Create Set Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 07[{_usn4}..{`4esn`}]|$@usn6 Contains 0 Contains 0).`6esn`? =9e1 Is Not Null,`3esn`+=All(@usn5 In 07[{_usn4}..{`4esn`}] Where 2.12 Contains @usn5 Contains {``}) Ends With Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where 7 Is Null Is Null) Ends With None(usn2 In {@usn5} Where {0}[$usn2..0.e0][{`4esn`}..True]),[_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|$usn2[`4esn`..]].``! =`6esn` In _usn3 In 0.0 Unwind `1esn` In 12.e12 In $#usn7 As `7esn` Union Return Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Is Not Null Is Not Null As @usn5,Null[.e12..{#usn8}] As _usn4 Skip Null[..{@usn5}] Limit {`2esn`}[0] Remove ($7)<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]})<-[`3esn`{usn1:$`7esn`[_usn3..][{_usn3}..],_usn4:{`3esn`}[`6esn`..]}]->(_usn3 :`7esn`:_usn4).`5esn`?,(`6esn` :usn1)<-[?:`4esn`|`2esn`* 07..{`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]}]-(:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[usn1:#usn8|_usn3]->(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}).`3esn`?,Case 1000 Starts With {7} Starts With $7 When 1.e1 =~123.654 =~$`3esn` Then {#usn7}[$usn2] When 999[$_usn3][@usn6] Then $#usn7[$usn2..@usn6][$`7esn`..{7}] Else 1e1[..12e12] End._usn4!"),
    octest_legacy:ct_string("Create Unique Shortestpath((#usn7 {#usn8:$`7esn` In $999 In {123456789}})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]})) Load Csv With Headers From .e0 Is Not Null Is Not Null As #usn8 Fieldterminator 's_str' Union All Start `1esn`=Node:#usn8(\"d_str\") ,`2esn`=Node:_usn3({_usn3})Where $#usn7 Is Null Remove _usn4:`1esn`,(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[?* 0{``:0[1.0..][.e0..]}]->(`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})._usn3?,Allshortestpaths(((:``:usn1{_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(:`4esn`:`3esn`{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1}))).`6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `4esn`[usn2..] As #usn8 Fieldterminator \"d_str\" Return Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..] As `` Skip None(`6esn` In {1000} Is Not Null Where 01) Contains (_usn3 :`6esn`:`4esn`)<-[usn1:#usn8|_usn3]-(:`2esn`)<-[@usn6* 0X0123456789ABCDEF{#usn7:@usn5[_usn3..{12}][{999}..$7]}]->({`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}) Contains Any(#usn7 In {`5esn`} Ends With `2esn` Where \"d_str\"[..{`1esn`}][..$`2esn`]) Create Unique Shortestpath((@usn5 :usn1{#usn8:0xabc =~{_usn4}}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0.12 Is Not Null As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Delete {usn2}[`2esn`..{`4esn`}][_usn4..``],.e12[Count(*)..{`4esn`}][07..$1000],Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)] With Distinct 0X0123456789ABCDEF[0e0..$12][00..{12}],$@usn6 Ends With {`6esn`} Ends With 0.e0,7 Starts With $1000 As @usn6 Order By $usn2 Is Not Null Asc,0e0 In .e1 Descending Union Remove [{1000} Is Not Null Is Not Null].`7esn`?,(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})-[_usn4?]-(usn1 :``:usn1{_usn3:#usn8[1e1..],_usn3:123.654 In {`6esn`} In `6esn`})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(`` :usn1)._usn4,Case When 07 Contains @usn5 Then 0.0[0.12] End.@usn6 Remove Extract(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`).usn2! Merge (`3esn` :_usn4:`1esn`)<-[#usn8?:`2esn`{#usn8:@usn6 Contains {0}}]->(usn2 :``:usn1{_usn3:$@usn5[`2esn`..][#usn7..]}) On Match Set #usn7+=00[0xabc..][`8esn`..],@usn6+=usn2[..2.12] On Match Set ``+=12[True],(`1esn` :`4esn`:`3esn`{`1esn`:{`2esn`}[..{123456789}]})<-[`6esn`?:`1esn`|``]-(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}).@usn5? ={@usn5} Contains 0X7 Contains 1e1,usn1 =$12[`6esn`][$#usn8] Union All Start @usn5=Node( {`1esn`}) ,`2esn`=Rel:`1esn`(usn1={`8esn`})Where $1000[999..][0Xa..] Merge Allshortestpaths(((:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) On Match Set usn2+={`4esn`} Contains \"d_str\",usn2 =[@usn5 In 1.0 Starts With 12 Where 01 Starts With {0} Starts With $`4esn`] Is Null Is Null On Create Set `` =$_usn4[$_usn4..01234567],(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}).`3esn` =`6esn`[$12][{12}]"),
    octest_legacy:ct_string("Foreach(_usn4 In {@usn6} Contains [9e1 =~$`4esn` =~{usn2}] Contains {`2esn`:\"d_str\"[..{`1esn`}][..$`2esn`]}| Detach Delete {`2esn`}[..$`6esn`][..`3esn`],0 Ends With .e0,`7esn`[123.654..][{123456789}..]) Remove Any(@usn5 In 07[{_usn4}..{`4esn`}]).`6esn`?,Reduce(`4esn`={usn2} Contains {123456789} Contains 0Xa,@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`}|$123456789[{`1esn`}][0.12]).@usn5!,(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})<-[`7esn`* 01..]-(@usn6 ).#usn7! Return *,Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) As `7esn` Order By @usn6 Is Not Null Is Not Null Asc Skip $`1esn` Starts With 999 Limit [{``} =~{`2esn`} =~$`8esn`] Ends With Extract(usn2 In {@usn5} Where 999 Is Not Null Is Not Null|0[1.0..$``]) Ends With (:`5esn`{usn2:{#usn7}[{`1esn`}..][`1esn`..],@usn6:{@usn6} In $999 In 01234567})-[* ..12]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})"),
    octest_legacy:ct_string("Remove Reduce(`6esn`=12 Is Null Is Null,usn2 In 999[{123456789}..999]|$999 Is Not Null Is Not Null).`8esn`?,{`7esn`:0[`6esn`][1e1]}.`2esn`?,Reduce(`2esn`=1000 In {`4esn`},`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|False[0.0..{@usn6}]).#usn8! Remove [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|{`1esn`} =~{@usn6} =~`2esn`].`5esn`!,[`6esn` In {1000} Is Not Null Where `1esn`[$``][{`5esn`}]|{`7esn`}[..0xabc][..0e0]].`4esn`?,All(usn2 In 999[{123456789}..999] Where 010[$12..])._usn4! Union Create @usn5=(@usn5 :`6esn`:`4esn`)<-[:`6esn`|:`7esn`]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3}) Union Start `3esn`=Relationship:`7esn`(@usn6=\"d_str\") "),
    octest_legacy:ct_string("Create Unique ((:`5esn`{@usn5:{@usn6}[0e0..0.0][{`7esn`}..0.e0]})-[* ..999{_usn4:9e12 In 's_str' In $`4esn`}]-(_usn3 {`8esn`:{`7esn`},usn2:1000 Contains 12.e12})) Detach Delete usn2[$7..``][$``..$_usn3],{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]}[{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}..][Case $7[{`7esn`}][12.0] When $@usn5[$7..@usn5] Then 1.e1 Starts With False Starts With $@usn6 Else {`7esn`} Contains 's_str' Contains 01 End..],$`6esn` Is Null Is Null Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),Allshortestpaths((:`8esn`:_usn3{``:$7 =~{`7esn`} =~$`6esn`,@usn6:$`8esn` Starts With $123456789})-[`8esn`* 00..999{`5esn`:{`7esn`}[..1000][..#usn7]}]-(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})) Union Remove Extract(@usn5 In 1.0 Starts With 12 Where #usn8 =~$@usn5)._usn4?,Reduce(`3esn`=$12 Is Null,`5esn` In $999[12]|@usn5[_usn3..{12}][{999}..$7]).`4esn`?,Reduce(_usn3=$#usn7 Starts With {`2esn`} Starts With @usn6,@usn6 In 0xabc Ends With 1.0 Ends With $``|1e1[..12e12]).usn1 Start `7esn`=Relationship( {7}) ,`6esn`=Relationship:`2esn`(@usn6=\"d_str\")Where $123456789 Ends With 1e1"),
    octest_legacy:ct_string("With  Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..],9e12[1000] As `` Where $@usn5[$123456789..][@usn5..] Detach Delete 0Xa Contains 7 Contains $@usn5 Union Remove (_usn4 :#usn7:`6esn`{``:{@usn5} =~$`2esn`})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})-[`3esn`?* 0xabc..01234567]-(:_usn4:`1esn`{#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]}).`4esn`? Unwind $`5esn`[$1000..][0e0..] As usn2"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 2.12[0..@usn5] As `` Fieldterminator \"d_str\" Delete usn2 Ends With 1.0 Ends With $@usn6,0x0[{`1esn`}] Start @usn6=Node:`2esn`({`6esn`}) ,usn1=Rel( {usn1})"),
    octest_legacy:ct_string("Delete $`1esn`[_usn3..],Allshortestpaths((`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}}))[Extract(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True]|{`5esn`} Contains 0)][Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0xabc =~{_usn4})] Union All Remove Case @usn5[123.654..$_usn4][0.12..$@usn6] When 1.e1 Starts With False Starts With $@usn6 Then $`5esn` Starts With 1.0 Starts With $usn2 When @usn6[9e12..] Then $`7esn` Contains 9e12 Contains `2esn` Else .e1 =~9e12 End.#usn8 Union All Remove Any(#usn7 In {`5esn`} Ends With `2esn` Where {usn1}[$`8esn`][0.e0]).`6esn` Load Csv With Headers From All(`7esn` In @usn5[01..`6esn`] Where Count(*) In {`4esn`}) As `4esn` Fieldterminator \"d_str\" Create Unique usn2=Shortestpath(((`4esn` :@usn6)<-[usn2?:`1esn`|``* 0x0..7]->(:#usn7:`6esn`{`5esn`:Null[..010][..$@usn6],@usn5:1000 Is Not Null Is Not Null})<-[`4esn`* 1000]-(#usn7 :#usn7:`6esn`))),@usn6=Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})))"),
    octest_legacy:ct_string("Load Csv From $`7esn` Ends With $1000 Ends With {999} As _usn4 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(`5esn` In {_usn4} Is Not Null| Return Distinct *,7 Is Null Is Null As _usn3,`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Order By [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Descending,1e1[{`3esn`}][True] Desc Limit 0xabc Starts With {``} Starts With 0xabc With Distinct usn2[0.e0..] As #usn8 Order By {@usn6} In $999 In 01234567 Desc) Start ``=Relationship:_usn4(`3esn`='s_str')  With  *,{_usn4} =~{`7esn`} =~$#usn7 As usn1,$`2esn` Ends With $`2esn` As `6esn` Order By 0xabc Contains False Contains {1000} Descending,{0}[123456789..$`8esn`] Descending Union Return *,$@usn5[$7..@usn5] As `2esn` Order By 123456789[{@usn6}..][9e0..] Ascending Skip Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Match Shortestpath((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa})))) Using Join On `1esn`,usn1,`3esn` Using Join On `5esn`,_usn3,`8esn` Return Distinct 9e12 In 's_str' In $`4esn` As `3esn`,[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999 In $999][..{`1esn`:0xabc Ends With 1.0 Ends With $``}] As `` Order By Reduce(`6esn`=9e12 In 's_str' In $`4esn`,usn2 In 999[{123456789}..999]|07[{_usn4}..{`4esn`}]) =~Single(usn2 In {@usn5} Where `1esn` In 9e0 In {7}) =~[usn1 In #usn8 =~$@usn5 Where $_usn4[0X7..{1000}]|{usn1}[..{#usn7}]] Descending Return Distinct *,.e1 Starts With #usn7 Starts With 1.e1 As usn2 Order By $#usn7[$``..{`7esn`}] Descending,0X7 Is Not Null Is Not Null Asc Limit {_usn4} Ends With 12.0 Ends With $@usn6 Union All Remove Reduce(usn1=Count(*)[0.0..{12}][{`8esn`}..{`8esn`}],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|12.e12 =~$`7esn` =~{``}).`5esn`?,Extract(#usn7 In {`5esn`} Ends With `2esn` Where `5esn` =~@usn6 =~$`7esn`|{`6esn`} Starts With $1000).usn2! Return Distinct Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Order By {7}[0X0123456789ABCDEF..][{123456789}..] Descending Limit Case When `1esn` In {`4esn`} Then $0[{``}..`2esn`] When 01234567[usn1] Then {`2esn`} In `5esn` In usn2 End Contains Case When _usn4 Ends With $`3esn` Ends With {`3esn`} Then $``[{#usn7}..{usn2}] End Contains {@usn6:Count(*)[#usn8][$usn1],`4esn`:.e12 Starts With 12} Union All Optional Match `8esn`=((`` {``:{_usn4} In 0.12 In {_usn3},`2esn`:{_usn4} In 9e0})-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})) Using Join On `3esn`,`6esn`,_usn3 Where 12e12[..1.e1][..$12] Foreach(`7esn` In Case $usn1[0X0123456789ABCDEF...e12] When 00[$usn2..][0.12..] Then True In `8esn` When $`1esn`[0..{_usn3}] Then usn1 =~1000 =~12 End Ends With Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Ends With (:#usn7:`6esn`{`6esn`:_usn4 Ends With $`3esn` Ends With {`3esn`}})-[?* 00..999]->(#usn8 :`4esn`:`3esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})| Return Distinct *,Shortestpath((usn2 {_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]}))[#usn7(`8esn` =~{`3esn`} =~9e12,{``} Starts With True Starts With True)..][{_usn3:$999 =~$999 =~usn2}..] As `7esn`,{#usn8}[False..{usn1}][$`6esn`..0Xa] Skip #usn8(0.e0 Ends With $`8esn`,{#usn7}[{`1esn`}..][`1esn`..])[{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}..{_usn4:$`8esn` Contains {`7esn`} Contains $`4esn`}] Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0) Ends With Filter(_usn4 In .e12 Is Not Null Where {0}[$usn2..0.e0][{`4esn`}..True])) Merge `8esn`=Allshortestpaths(({_usn4:$7[{`7esn`}][12.0],@usn5:{`1esn`}[\"d_str\"][{1000}]})) On Create Set `` =$1000 Contains $`2esn` Contains 12,Reduce(usn1=0Xa[01..$`1esn`],@usn5 In 1.0 Starts With 12|{`1esn`}[`1esn`..123.654][{`4esn`}..$7]).`8esn` =.e12 Is Not Null,Reduce(_usn4=9e1 =~$`4esn` =~{usn2},`5esn` In `5esn` In 123.654 In {`6esn`}|{`1esn`} =~{@usn6} =~`2esn`).usn1? =Count(*)[{usn1}..][$`7esn`..]"),
    octest_legacy:ct_string("Detach Delete usn2[..`8esn`(Distinct 0.0[0.12])][..usn1],`2esn`(9e1 =~$`4esn` =~{usn2},`5esn` Starts With {999}) Ends With $1000 Ends With Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) With Distinct *,Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) With  Case When $`5esn` =~`1esn` =~123.654 Then 123.654 Contains $`4esn` Contains .e1 When $`1esn` Starts With 999 Then {`2esn`}[..``] End =~[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]] =~{@usn6:00 =~.e12},12.0 =~0.12 =~999 As usn1 Where @usn5[_usn3..{12}][{999}..$7] Union Optional Match ``=((`5esn` :@usn6{`3esn`:'s_str' =~0x0 =~{#usn8}})) Using Scan _usn3:_usn4 Where {_usn4} In 0.12 In {_usn3} Load Csv With Headers From True Starts With `` Starts With 0.e0 As `5esn`  Union All Match ((#usn7 {#usn8:$`7esn` In $999 In {123456789}})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[* 01..{`5esn`:$`7esn` Contains $_usn4 Contains `8esn`,`1esn`:#usn7 Ends With {@usn5}}]->(usn1 {`8esn`:{1000}[..#usn7][..{#usn8}],_usn3:{#usn8} In 07 In 0})),`4esn`=Shortestpath((({`3esn`:_usn3 In 1.e1})-[* ..12{_usn3:{999}[..{999}]}]-({`5esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa],usn2:#usn7 Starts With {@usn5} Starts With 07})<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0}))) Using Join On #usn8 Start @usn6=Node:`8esn`({1000}) ,_usn3=Node:`1esn`(usn1=\"d_str\")Where $`1esn`[`6esn`..$12][{usn2}..07]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [9e1[..2.12][..@usn6],999,{`4esn`}[..$#usn7]] =~Extract(@usn5 In 07[{_usn4}..{`4esn`}] Where {999}[`2esn`]) As usn2 Fieldterminator \"d_str\" Remove [@usn5 Contains {#usn8} Contains 010,1000 Is Not Null Is Not Null].`4esn`!"),
    octest_legacy:ct_string("With  *,None(`4esn` In False[0.0..{@usn6}] Where 0.12[$0..$``]) Is Null As _usn3,False[0.0..{@usn6}] As `` Order By Allshortestpaths((((:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})-[`6esn`{`6esn`:{@usn6} In $999 In 01234567}]->(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]})))) Is Null Is Null Desc,Case .e12[0.0..][$#usn8..] When {`2esn`} Contains 0.12 Contains 0.0 Then 's_str'[9e12..][12e12..] When 010 Ends With 123456789 Ends With .e0 Then 12[True] Else {_usn3}[{#usn7}] End Is Null Is Null Asc,.e0[.e0..][$``..] Descending Limit None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`) Ends With [_usn4 In .e12 Is Not Null Where $`8esn` Contains 12] Ends With All(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Where {`2esn`}[@usn6][{_usn3}] Load Csv From 1e1 Is Not Null Is Not Null As @usn6 Fieldterminator 's_str' Create @usn5=((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[usn1?:`8esn`|:_usn3* 01234567..0Xa{`1esn`:{#usn7} =~$0}]->(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})-[`5esn`* 123456789..999{usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12}]->({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})),Allshortestpaths((((@usn6 :`1esn`{#usn8:0xabc Is Not Null Is Not Null,`7esn`:7 Starts With `5esn`})-[`7esn`:`5esn`|`3esn`* 7{``:1e1 In $0}]-(:usn1{`8esn`:$12[{`5esn`}..]})-[* 123456789..999]->(:@usn6)))) Union All Match @usn6=Shortestpath(({`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* ..12]->(`5esn` :`5esn`)) Using Scan usn2:_usn4 Using Scan #usn7:@usn5 With  `7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True As `6esn`,All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null As `6esn`,0x0[9e0..][$@usn5..] As _usn3 Order By 01234567 Starts With 01 Starts With 1.e1 Desc Skip $`5esn`[$`6esn`..{_usn3}][$usn2..{@usn5}] Limit {12}[{`5esn`}][7] Where {@usn6}[..0.e0][..$0]"),
    octest_legacy:ct_string("Return Distinct [0xabc Ends With 1.0 Ends With $``,`1esn` In 12.e12 In $#usn7] Starts With Single(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]) Starts With (:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[usn1?:@usn5|``* 1000]->(@usn6 )<-[`7esn`* 7]->(`` :usn1) As #usn8,9e12[1000] Order By {@usn5}[Case 010 Ends With 123456789 Ends With .e0 When {#usn8} Is Not Null Is Not Null Then $`6esn` Is Null Is Null End..Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6|Null[False..][12.e12..])] Ascending,Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4])[None(usn2 In 999[{123456789}..999] Where 12[0X0123456789ABCDEF..][Count(*)..])] Descending Skip $#usn8 Is Not Null Is Not Null Limit Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null Create Unique @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),Shortestpath((((:`1esn`{`4esn`:{_usn4} =~0 =~{12}})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`)-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7)))) Union All Remove [123.654 In {12} In ``,#usn7].`6esn`!,Any(usn2 In 999[{123456789}..999]).`6esn` Match @usn6=Shortestpath(((({`3esn`:123456789 Is Not Null})-[?:usn1|:@usn6{_usn4:$`2esn` In 0xabc,`3esn`:$`8esn` Contains 12}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})-[:`2esn`{_usn3:$@usn5[`2esn`..][#usn7..]}]-({`3esn`:_usn3 In 1.e1})))),#usn8=((`7esn` )-[:usn1|:@usn6{`4esn`:{_usn4} In 9e0,_usn4:$1000[123.654]}]-(`` {`2esn`:{``}[$@usn5]})-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Using Index `3esn`:`3esn`(#usn8) Match _usn3=Allshortestpaths((_usn4 :usn1{`6esn`:{_usn4}})-[@usn6?:_usn4|`5esn`* ..12]->(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})<-[`7esn`?:@usn6{`2esn`:{`5esn`} Ends With `2esn`}]-(usn1 :#usn8:#usn7{@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]})),``=Shortestpath((({`5esn`:9e0 =~$usn1 =~{@usn6}})-[@usn5:`6esn`|:`7esn`* ..999]->(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}))) Union All Start `5esn`=Relationship:``(``=\"d_str\") ,@usn6=Rel:#usn7(`3esn`={_usn4})Where $usn1 Is Not Null Is Not Null Create `2esn`=((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[@usn6{@usn5:999[1000..],`7esn`:12 =~$`5esn` =~$_usn3}]->(`8esn` :usn2{_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}}))"),
    octest_legacy:ct_string("Unwind None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) As @usn6 Merge (#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:`4esn`:`3esn`{12}) Union All Create Unique (`1esn` {#usn8:@usn6 Contains {0}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000) Foreach(`8esn` In `5esn`[..$_usn3]| Unwind 01[0.0..9e0][`3esn`..$`1esn`] As @usn6 Remove [_usn4 In .e12 Is Not Null Where $``[{#usn7}..{usn2}]|{`2esn`} Contains 0.12 Contains 0.0].`3esn`!,None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`6esn`}[_usn3]).@usn5?) Union All Create (#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}),Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4)) Create (#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]}),Shortestpath((`6esn` {@usn6:{#usn7}[$usn2],`6esn`:12[True]})<-[`3esn`?:#usn7|:``]-(usn1 :`7esn`:_usn4))"),
    octest_legacy:ct_string("Unwind Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0])[Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0[1.0..][.e0..])..][None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`])..] As #usn7 Unwind {_usn3:`2esn`[{_usn3}..9e1][$`7esn`..Count(*)],`4esn`:True In `8esn`} In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..]] In Case .e12 Contains {`6esn`} Contains .e12 When 1000 In {`4esn`} Then {`4esn`} Is Null Else {`2esn`}[@usn6][{_usn3}] End As _usn4 Match @usn5=((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})),`1esn`=(#usn8 {usn2:{`1esn`} =~{@usn6} =~`2esn`})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(#usn7 :`2esn`)-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null}) Using Join On `2esn`,usn2,@usn6 Using Index `6esn`:`2esn`(`3esn`) Where {#usn8}[False..{usn1}][$`6esn`..0Xa]"),
    octest_legacy:ct_string("Remove Shortestpath((:_usn4:`1esn`)).`` Detach Delete 12 Ends With @usn5 Ends With 1e1,123456789[123.654..{usn1}] Union All Detach Delete Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]}))) Foreach(`3esn` In .e1 In $123456789 In _usn3| Unwind 07 Is Null As `8esn` Create (({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})),(((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[usn2?* 00..999]->(_usn4 :usn1{usn2:Count(*)[#usn8][$usn1]})))) Detach Delete $_usn4[123456789..][$`6esn`..],Count(*) =~0e0 =~0x0"),
    octest_legacy:ct_string("Foreach(`5esn` In False =~9e0 =~{`5esn`}| With  *,{`4esn`}[..`2esn`][..{@usn5}] As @usn6,0xabc Contains False Contains {1000} Order By Case 999 Starts With {``} When #usn8[1e1..`1esn`][{1000}..`6esn`] Then #usn7 =~{7} When `5esn`[$usn1..$7] Then {`8esn`} Is Not Null Is Not Null Else $12 Contains .e1 End[{usn1}..[`5esn` In 123.654 In {`6esn`}]][[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where {#usn7} Contains \"d_str\" Contains {_usn4})] Ascending,Count(*)[{usn1}..][$`7esn`..] Desc Skip {`5esn`}[$1000..`1esn`] Limit {12}[{`5esn`}][7] Where {@usn6}[01234567..] Unwind Null[`1esn`..00] As `8esn`) Match Allshortestpaths(((`3esn` :`1esn`{`8esn`:12e12[$`5esn`..1.0][$`8esn`..$`1esn`]})-[?* 07..]->(:usn1{#usn8:True Ends With usn1})-[?:``]-(`7esn` :@usn6))),Shortestpath(((({_usn4:7[`7esn`..usn2][$`5esn`..0X7]})<-[usn1:`8esn`|:_usn3* 010]->(@usn6 {@usn6:\"d_str\" Starts With $`` Starts With $usn1,`7esn`:{0}[$0][$#usn7]})-[* 0X0123456789ABCDEF]-(usn2 :`2esn`)))) Using Index `5esn`:@usn5(``) Using Join On `5esn`,_usn3,`8esn` Union Delete Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where $0 Ends With `2esn`) In Single(`5esn` In `5esn` In 123.654 In {`6esn`} Where 2.12 Contains 0.0 Contains $`6esn`) In [_usn3[$123456789..]],[usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3} In 010 In 0.e0][..Case {`5esn`} Contains 0 When {_usn4} Then 1e1[1.e1..] When {_usn3} In 010 In 0.e0 Then $0 End][..[@usn5 In 07[{_usn4}..{`4esn`}] Where {`7esn`} =~01234567 =~`7esn`|$7 =~{`7esn`} =~$`6esn`]],True In `8esn` Detach Delete Extract(usn2 In {@usn5} Where $usn2 =~`6esn` =~{usn1})[[`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0|.e12 Starts With 12]..] Start @usn5=Node:`6esn`(\"d_str\") ,`1esn`=Rel:usn2(`4esn`={`6esn`})"),
    octest_legacy:ct_string("Unwind \"d_str\" In 2.12 As `8esn` Optional Match ``=Shortestpath(((usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})-[`6esn`:@usn5|``{usn2}]-(#usn7 :`2esn`))) Foreach(usn1 In _usn4 In usn2| Load Csv From $`1esn` =~1.0 =~0X7 As `8esn` )"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath((usn2 :usn2{`6esn`:123.654 In {12} In ``})),usn1=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}))) Using Scan `7esn`:@usn5 Where 12.0[{`6esn`}..123.654][@usn5..usn1] Union Foreach(_usn4 In Case 2.12 In {123456789} When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 123456789 Is Not Null Is Not Null Then _usn4[12.e12..] End[..{_usn3:123456789[123.654..{usn1}]}][..Case When _usn4 In usn2 Then 0X7[#usn7..][12e12..] When {@usn5} In 0X0123456789ABCDEF In 1000 Then 0[0xabc] Else .e1[..`2esn`] End]| Create #usn8=(`3esn` :`3esn`:@usn5)<-[usn2?:@usn6* 0x0..7]-(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})) Optional Match Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654}))) Remove [0.0[.e12..],12.0 In $usn1 In True,$999[$12..][.e0..]].#usn8"),
    octest_legacy:ct_string("With Distinct Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),$12 Contains .e1,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn1 Order By Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) Descending Limit #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``) Union Foreach(_usn3 In {`1esn`} Is Null| Load Csv With Headers From $#usn7[$usn2..@usn6][$`7esn`..{7}] As `3esn` Fieldterminator 's_str' Remove Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {@usn6} Starts With 00).#usn8!) Union All Create Unique Shortestpath((((:`1esn`{`4esn`:{_usn4} =~0 =~{12}})-[:usn1|:@usn6{usn1:$`7esn` Is Not Null Is Not Null}]->(`2esn` :`6esn`:`4esn`)-[#usn7?:`2esn`* 0Xa{`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}]->(`` :#usn8:#usn7))))"),
    octest_legacy:ct_string("Unwind $#usn7 Is Not Null Is Not Null As _usn3 Create Unique usn2=Shortestpath(((_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:`8esn`|:_usn3]-(:@usn5:usn2{#usn8:12.e12 Starts With `8esn` Starts With 9e12})<-[@usn6{_usn4:@usn5 Contains {#usn8} Contains 010,usn1:\"d_str\"[..{`1esn`}][..$`2esn`]}]-(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Foreach(`4esn` In 9e0 Ends With `` Ends With 010| Load Csv With Headers From $999[$@usn6..] As `4esn`  Detach Delete {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..],(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null) Union All Load Csv From 12.e12[..9e12][..1000] As `` "),
    octest_legacy:ct_string("Unwind $7 =~{`7esn`} =~$`6esn` As `5esn`"),
    octest_legacy:ct_string("With  0xabc[0.e0..][$7..] Skip {`3esn`} Ends With $123456789 Ends With {12} Limit All(`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e12[{1000}..][1000..]) Is Not Null Is Not Null Match usn2=(`` {@usn6:0.12 Is Not Null})<-[`4esn`?:`4esn`|`2esn`* 07..{`5esn`:{usn1} Ends With {#usn7} Ends With 12.0}]-({`1esn`:{#usn8} In 07 In 0,#usn8:{`1esn`}[01234567..][@usn5..]})<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]}),`3esn`=Shortestpath(((#usn8 :usn1)-[?* 0X0123456789ABCDEF]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12}))) Using Join On #usn8,_usn3 Using Join On #usn7,`6esn` Create usn2=({#usn7:$_usn4[0X7..{1000}]})-[`2esn`?:usn1|:@usn6* 0X7..{`6esn`:999 Is Not Null Is Not Null,``:$`1esn`[_usn3..]}]-(`7esn` {`2esn`:0.e0[$`1esn`..]}) Union Load Csv With Headers From .e0 In 9e1 In $_usn3 As `3esn`  Create Unique Allshortestpaths(((`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))),`3esn`=Shortestpath(({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}})) Load Csv From All(`7esn` In @usn5[01..`6esn`] Where Count(*) In {`4esn`}) As `2esn`  Union Remove Case 12.0[$999..][$@usn6..] When 0X0123456789ABCDEF[..`5esn`][..$`3esn`] Then True Starts With 2.12 Starts With {123456789} End.``!"),
    octest_legacy:ct_string("Merge ``=Allshortestpaths(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) On Match Set ``+={`7esn`:$@usn5[$123456789..][@usn5..]} Contains [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Contains Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]),`` =0x0[{`1esn`}],Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {`6esn`} Is Not Null).`6esn` =12.e12[..9e12][..1000] Return $123456789 Ends With 1e1 As `5esn`,Shortestpath(((:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]}))) Is Not Null Is Not Null As `` Skip 00[$usn2..][0.12..] Return Distinct *,1.e1[$`3esn`] Union All Unwind 's_str'[9e12..][12e12..] As #usn7 Union All Return Distinct Single(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where @usn6[9e12..]) Contains [#usn8 In True In `8esn` Where 0Xa[$#usn8]|0X0123456789ABCDEF =~$@usn6 =~$`8esn`] Contains {@usn5:.e1[07..`5esn`][$12...e0],@usn5:12.0 Ends With 0e0 Ends With $123456789},{`2esn`} Contains `7esn` Contains {`4esn`} As `5esn` Order By [12 Ends With @usn5 Ends With 1e1,`4esn` Starts With 01] Contains All(@usn5 In 1.0 Starts With 12 Where 0xabc Contains False Contains {1000}) Contains Extract(#usn7 In {`5esn`} Ends With `2esn` Where {usn1}[$`8esn`][0.e0]|`1esn` In {`4esn`}) Descending,$usn2 Is Not Null Asc,$1000[999..][0Xa..] Descending Skip {7}[$@usn5][123456789] Limit \"d_str\"[..{`1esn`}][..$`2esn`] Start #usn8=Relationship(*)  Remove {#usn8:$999 In $999}.`7esn`?,``({`1esn`}[\"d_str\"][{1000}]).`8esn`?"),
    octest_legacy:ct_string("With Distinct *,$`6esn` In $#usn8 As `7esn` Order By $`4esn` Is Null Descending,Extract(usn2 In 999[{123456789}..999] Where 12[0X0123456789ABCDEF..][Count(*)..]|$@usn5[`2esn`..][#usn7..]) Contains Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where 00[{999}..$#usn7][$0...e0]) Contains [0Xa[..0.12],usn1[#usn8..0.0]] Descending,999 Starts With {``} Ascending Union With  *,Reduce(_usn3=$usn1 Is Not Null Is Not Null,`4esn` In False[0.0..{@usn6}]|0xabc[0.e0..][$7..]) Ends With Shortestpath(((#usn7 :`2esn`)-[usn2:#usn8|_usn3{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}]-({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(`6esn` :usn1{@usn6:$_usn4[0X7..{1000}]}))) Ends With (_usn3 :usn2{#usn8:0xabc =~{_usn4}})-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`4esn`?* 010{`3esn`:.e12 Is Not Null}]->(usn2 :usn2{`6esn`:123.654 In {12} In ``}) Order By 0 =~usn1 Descending Foreach(`7esn` In `7esn`[`5esn`..][0.12..]| Return Distinct $_usn3[@usn6..][{``}..] As `1esn`,None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where _usn3[..0xabc][..@usn5]) =~Reduce(_usn4=True Contains $123456789 Contains {`2esn`},#usn7 In $@usn6 Contains 0 Contains 0|07[0X0123456789ABCDEF]) Order By Reduce(``=$`7esn` Contains 9e12 Contains `2esn`,@usn5 In 07[{_usn4}..{`4esn`}]|True[..{_usn3}][..999]) In Reduce(`6esn`=#usn8 Ends With 0Xa,usn1 In #usn8 =~$@usn5|$7[.e1]) In Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`}) Asc,Extract(#usn7 In {`5esn`} Ends With `2esn` Where 's_str' Contains $_usn4 Contains $`7esn`)[{`1esn`:0xabc Ends With 1.0 Ends With $``}][Case When 010[``..][{_usn3}..] Then $`1esn` Contains usn2 Contains 1.0 End] Descending Limit 01[0.0..9e0][`3esn`..$`1esn`])"),
    octest_legacy:ct_string("Match ((_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})<-[`5esn`* 01234567..0Xa]->(usn2 $`2esn`)),`6esn`=Shortestpath((:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 )) Using Join On `8esn`,`4esn`,`1esn` Using Scan `7esn`:`2esn` Where $usn1[01234567] Load Csv With Headers From $#usn8 Is Not Null Is Not Null As usn2 Fieldterminator \"d_str\" Union Return Distinct $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Skip `7esn`[{12}] Limit None(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null) Foreach(#usn8 In (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..]| Load Csv With Headers From $999[$@usn6..] As `4esn` )"),
    octest_legacy:ct_string("Remove [{@usn5} In 0X0123456789ABCDEF In 1000].`4esn`"),
    octest_legacy:ct_string("With Distinct [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] As #usn7,$usn2[`4esn`..],{`6esn`} Is Not Null Is Not Null Order By .e1 Ends With $usn2 Ends With $7 Desc Skip 0.12[`8esn`..] Detach Delete 12.e12 =~$`7esn` =~{``},.e12 Contains {`6esn`} Contains .e12 Remove count({usn1}[12e12..`6esn`][`7esn`..$`6esn`]).`6esn` Union All Start `7esn`=Node:`6esn`({#usn8}) Where 12.0[{`6esn`}..123.654][@usn5..usn1] Match ``=(`8esn` :_usn3:@usn6)-[`3esn`?:`7esn`{usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12}]-(:`1esn`{#usn8:0e0 In .e1}) Where `7esn`[`5esn`..][0.12..] Create ``=Shortestpath(({`2esn`:'s_str'[..'s_str'][..{#usn7}]})),`7esn`=((`7esn` :`6esn`:`4esn`)<-[?:usn2|_usn3{``:#usn7,`4esn`:$12[`6esn`][$#usn8]}]-(`4esn` :`6esn`:`4esn`)-[@usn5:_usn4|`5esn`{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]}]-(_usn3 {@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})) Union All Start `4esn`=Node:`7esn`(\"d_str\") ,@usn5=Node:@usn6(\"d_str\")Where {`3esn`} Ends With $123456789 Ends With {12} Unwind $`7esn`[_usn3..][{_usn3}..] As usn2 Match `1esn`=(_usn4 :`3esn`:@usn5{`2esn`:00[$usn2..][0.12..],_usn3:123456789 Is Not Null})-[usn1:#usn8|_usn3]->(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`}),`6esn`=Allshortestpaths((({#usn7:True Ends With usn1,usn1:True =~`5esn`})-[?:``{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null}]-({`2esn`:{`2esn`}[@usn6][{_usn3}],#usn7:$999 In $999})<-[:#usn7|:``{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]->(:``:usn1{#usn7:0x0[9e0..][$@usn5..],`5esn`:{@usn6}[..0.e0][..$0]}))) Using Scan `7esn`:@usn5 Using Index `3esn`:`7esn`(#usn7) Where $`1esn` Is Not Null"),
    octest_legacy:ct_string("Start `2esn`=Node:`8esn`(#usn8='s_str')  Remove count(Distinct 1e1[{`3esn`}][True]).`1esn` Unwind $#usn7 Ends With $999 Ends With {`5esn`} As #usn7 Union All Load Csv With Headers From 0.12 Is Not Null As @usn6 Fieldterminator 's_str' Load Csv From $@usn5 =~999 =~0e0 As `1esn` Fieldterminator \"d_str\" Delete $#usn7 Contains Count(*)"),
    octest_legacy:ct_string("Remove [`1esn` In 12.e12 In $#usn7,07 Contains @usn5].#usn8,Reduce(`3esn`={#usn8} Is Not Null Is Not Null,`6esn` In {1000} Is Not Null|True[..{_usn3}][..999]).`4esn`! Return Extract(`6esn` In {1000} Is Not Null Where Null In 1e1 In {999}|7 Starts With `5esn`) In Any(#usn7 In $@usn6 Contains 0 Contains 0 Where $`4esn` Ends With $12) In (`5esn` :`7esn`:_usn4)-[?:`8esn`|:_usn3]-(#usn8 :@usn5:usn2)<-[:`6esn`|:`7esn`* 0x0..7{`2esn`:0xabc =~{`8esn`} =~{_usn3}}]-(`5esn` {#usn8:True Ends With usn1}) As _usn3,`4esn` Ends With 01 Ends With `5esn` As `6esn` Order By `4esn` Ends With 01 Ends With `5esn` Ascending Skip usn2[0.e0..] Limit {`7esn`} Is Not Null Is Not Null Start @usn6=Node:`8esn`({1000}) ,`8esn`=Node:_usn3('s_str') Union All Unwind `6esn` Ends With 0x0 Ends With 12 As `3esn` Union Foreach(`7esn` In `6esn`({`1esn`}[`1esn`..123.654][{`4esn`}..$7])[Allshortestpaths(((#usn8 {`5esn`:0X0123456789ABCDEF[1.0..],`4esn`:{`5esn`} Starts With 123456789 Starts With 07})<-[* 0]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})))..][Case When {`6esn`}[0.e0..$123456789] Then 's_str' =~0xabc =~$@usn5 When 0X7 Is Null Is Null Then {999} =~7 =~{usn1} Else {_usn3}[..$usn2][..$`6esn`] End..]| Remove (usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}}).@usn6,Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End.`1esn`,Case When `4esn` Starts With 0x0 Then #usn8 Ends With 0Xa When $7 =~{`7esn`} =~$`6esn` Then 010 Ends With 123456789 Ends With .e0 End.`4esn`?)"),
    octest_legacy:ct_string("Create Shortestpath(((usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]})-[`6esn`:@usn5|``{usn2}]-(#usn7 :`2esn`))) Return Distinct *,`5esn` Starts With {999} Skip 's_str' Contains .e1 Contains #usn8 Limit {_usn3}[{#usn7}] Optional Match (:``:usn1{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})<-[`3esn`?:_usn4|`5esn`]->({#usn7:True Ends With usn1,usn1:True =~`5esn`}) Using Index `4esn`:`8esn`(usn1)"),
    octest_legacy:ct_string("Unwind Reduce(#usn8=01234567 Is Not Null,`6esn` In {1000} Is Not Null|$`2esn` Contains `5esn` Contains .e1)[[$#usn7[$``..{`7esn`}]]..][[#usn8[1e1..]]..] As `5esn` Union Create Unique ``=(:`7esn`:_usn4{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})<-[_usn3?:_usn3|:`6esn`]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})<-[#usn7:_usn3|:`6esn`* 0{`7esn`:{999} =~7 =~{usn1}}]->(@usn5 :usn1{usn2}) Remove Extract(`5esn` In `5esn` In 123.654 In {`6esn`}).`3esn`!,{@usn6:True Ends With usn1,usn2:$`4esn` =~{usn1}}.`1esn` Foreach(#usn8 In (:#usn8:#usn7{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[_usn4?{`7esn`:0[...e1][..$usn2]}]-(`1esn` :#usn7:`6esn`{@usn6:07[{_usn4}..{`4esn`}],`4esn`:07[_usn3][123456789]})[Reduce(`6esn`=`4esn` Starts With $12 Starts With $12,usn1 In {usn2} Contains {123456789} Contains 0Xa|999)..]| Load Csv With Headers From $999[$@usn6..] As `4esn` ) Union Unwind 00[$usn2..][0.12..] As `3esn` Create Unique Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})) Load Csv With Headers From #usn7[999..``] As `3esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(_usn3 In [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1]| Create _usn3=(:_usn4:`1esn`{`5esn`:010 Ends With 123456789 Ends With .e0,_usn4:9e1[..2.12][..@usn6]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`)) Optional Match _usn4=((@usn5 :``:usn1{`7esn`:0.e0[#usn7..][$@usn5..],usn2:'s_str' Contains $_usn4 Contains $`7esn`})) Union Unwind Single(#usn7 In {`5esn`} Ends With `2esn` Where 1000 Is Not Null Is Not Null)[..[@usn5[123.654..$_usn4][0.12..$@usn6],00[{999}..$#usn7][$0...e0],0 Is Null]][..@usn6(Distinct {@usn5} =~$`2esn`,@usn5 In 00)] As usn2 Unwind (`3esn` {`7esn`:12[`3esn`..][0X0123456789ABCDEF..]})<-[#usn7:_usn4|`5esn`]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}}) Is Null Is Null As `` Merge `3esn`=(({`2esn`:1000 Is Not Null})) On Create Set {`5esn`:12e12[..Count(*)][..$usn2],`6esn`:010 Starts With `3esn` Starts With {usn1}}._usn4! =0Xa Is Not Null Is Not Null"),
    octest_legacy:ct_string("Create Unique (({_usn3:0.0[010..12.e12]})),_usn3=(({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})) Optional Match Shortestpath((((`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})-[?* 0X0123456789ABCDEF]-({_usn3:9e12[..#usn7][...e0]})))) Where 2.12 Contains {1000} Contains 1.e1 Union Remove ({@usn5:0[...e1][..$usn2]})<-[`8esn`:_usn4|`5esn`* 0{`5esn`:$`8esn`[#usn7..][0X7..]}]-({_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[`6esn`?:usn2|_usn3* 1000{#usn7:{#usn7} Starts With $`1esn` Starts With 07,`4esn`:_usn4 In usn2}]-(`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``}).#usn7,`7esn`:``:usn1,Extract(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where .e12[0.0..][$#usn8..])._usn4? Merge (`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?* 1000]-({`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]-(:_usn3:@usn6{#usn7:0xabc =~{`8esn`} =~{_usn3}}) On Create Set (:@usn6{`4esn`:False Contains {``} Contains $`2esn`,`1esn`:1000 Contains 12.e12})<-[`4esn`?* 010]-(`7esn` :`6esn`:`4esn`)<-[:`7esn`{`5esn`:1.0 =~`7esn` =~$`7esn`,#usn8:0.0 Is Null}]->(#usn8 {@usn5:_usn4 =~$#usn7 =~`8esn`}).`6esn`? =00 Is Null,{usn2:$`3esn`[12.e12...e1],`8esn`:0xabc In {`6esn`} In $@usn6}.`4esn` =0x0 In {`3esn`},#usn8 =Case When #usn7 Starts With {@usn6} Starts With {`1esn`} Then $`3esn`[$_usn4][True] When 0.0[010..12.e12] Then {`2esn`} End =~Shortestpath((_usn3 :`3esn`:@usn5)-[`3esn`* ..12{`8esn`:$7[@usn6][0xabc],#usn8:#usn8 Ends With 0Xa}]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})) =~Extract(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $`1esn` Ends With {1000} Ends With $`8esn`|{`7esn`} Starts With 12.0 Starts With 07) Union Return {usn1}[$`8esn`][0.e0] As #usn8 Order By [{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Ascending,_usn3(Distinct usn2[..$`8esn`][..``],@usn5[..$`7esn`][..$`6esn`])[None(@usn5 In 1.0 Starts With 12)..] Descending,[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 0 Is Null|010[.e12]][Allshortestpaths(((`` :`5esn`{#usn8:`4esn` Starts With 0x0})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})))..] Desc With  Case $usn1 Is Not Null Is Not Null When $@usn6[..{`6esn`}][...e0] Then $999[..$`2esn`] End[Case usn1 Ends With $@usn6 Ends With $1000 When .e1 =~9e12 Then $`3esn` Ends With `8esn` Ends With {`5esn`} When `2esn`[0Xa][{`8esn`}] Then {``}[$@usn5] Else {999} Ends With 1000 Ends With 1e1 End..],9e12[1000] As `` Where $@usn5[$123456789..][@usn5..]"),
    octest_legacy:ct_string("Remove None(usn1 In #usn8 =~$@usn5 Where #usn7 Starts With {@usn6} Starts With {`1esn`}).@usn6 Foreach(#usn7 In {@usn6:`4esn`[`1esn`][{`8esn`}],`6esn`:$7[0X0123456789ABCDEF]} Contains Filter(`7esn` In @usn5[01..`6esn`] Where 00 Starts With 12 Starts With 0e0) Contains Case When 01234567[usn1] Then $`4esn`[{@usn5}] End| With Distinct Filter(usn2 In {@usn5} Where {1000}[0e0][{usn1}]),$12 Contains .e1,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn1 Order By Allshortestpaths((`` :`5esn`{#usn8:`4esn` Starts With 0x0})-[`5esn`* ..999]-(:`3esn`:@usn5{#usn7:1000[9e12][$`1esn`]})) Starts With Null Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where .e1 Is Not Null) Descending Limit #usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2) =~Reduce(_usn4=0e0 Starts With 's_str',@usn6 In 0xabc Ends With 1.0 Ends With $``|#usn7[$7..{_usn4}]) =~Extract(usn2 In {@usn5} Where 010|0xabc Ends With 1.0 Ends With $``)) Create ((`2esn` {_usn3:2.12 Contains @usn5 Contains {``},`8esn`:{7} Is Null})-[?:`4esn`|`2esn`* 0X0123456789ABCDEF{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(`1esn` {_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})),`3esn`=Allshortestpaths(({`3esn`:_usn3 In 1.e1})<-[`7esn`* 01..]-(usn1 {`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}))"),
    octest_legacy:ct_string("Start _usn3=Node:usn1(\"d_str\") Where $`7esn` In $999 In {123456789} Foreach(_usn4 In $`3esn` In {`1esn`} In 12e12| Create Unique `2esn`=Allshortestpaths((usn2 :usn2{`6esn`:123.654 In {12} In ``})<-[?* 010{usn2:{``}[2.12]}]->(_usn4 :usn1{`6esn`:{_usn4}})),usn2=(:#usn7:`6esn`{``:{999} =~7 =~{usn1},usn1:{7} Starts With $usn2 Starts With $usn2})<-[`7esn`:``]->(_usn3 :@usn6{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})-[_usn4?* 0X7..{`2esn`:{#usn7} =~$0,_usn4:$@usn5[`2esn`..][#usn7..]}]-(#usn7 ))"),
    octest_legacy:ct_string("Match (`` :`2esn`)<-[`2esn`?]->(:#usn8:#usn7{`7esn`}),((:#usn8:#usn7{`2esn`:usn2[01234567..],`2esn`:$7[..999][..`2esn`]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})) Merge _usn3=({`2esn`:12e12[$``..],_usn3:0xabc =~{_usn4}}) On Match Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}] On Create Set usn1+={123456789} Ends With False Ends With {@usn6},#usn7 =.e0 Is Null Is Null,Extract(usn2 In {@usn5} Where 12e12[..Count(*)][..$usn2]|.e12 Is Not Null).#usn7 ={usn1}[$`8esn`][0.e0] Union Merge (({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})) Foreach(#usn7 In 0e0| With Distinct 07 Is Null As usn2,.e12 Is Null Is Null As @usn5,{7}[{`7esn`}][$12] As `8esn` Skip All(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where .e1 Starts With #usn7 Starts With 1.e1) Starts With `4esn`(12[$`8esn`..{_usn4}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1) Limit 0.e0[$`1esn`..] Optional Match (({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})),`8esn`=Allshortestpaths(((:`8esn`:_usn3{_usn3:{999}[..{999}]})-[* 010]->(`4esn` :#usn8:#usn7{`4esn`:12.e12 =~$`7esn` =~{``}}))) Where #usn8[1e1..`1esn`][{1000}..`6esn`]) Foreach(`8esn` In Extract(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12|{_usn3}[..$usn2][..$`6esn`]) Is Null Is Null| Detach Delete `1esn` =~12.0,Case #usn8 Starts With {_usn3} Starts With 123.654 When $`2esn`[Null][{``}] Then $@usn6[..{`6esn`}][...e0] End[Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 0e0 Ends With 0 Ends With {`6esn`})..(@usn5 {@usn5:{@usn5} =~$`2esn`,`5esn`:01[$`1esn`..\"d_str\"]})<-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(`3esn` :@usn6)<-[`4esn`?:`5esn`|`3esn`* 0X0123456789ABCDEF]->({usn1:9e1[12.e12..],_usn3:`5esn`[$usn1..$7]})],All(_usn4 In .e12 Is Not Null Where $@usn5 =~999 =~0e0)[Reduce(_usn3=`5esn` In 123.654 In {`6esn`},_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])] Create Unique ({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1),`5esn`=(_usn4 :`5esn`{`5esn`:@usn5[..$`7esn`][..$`6esn`]})-[@usn6?{`1esn`:12.e12 =~$`7esn` =~{``},@usn6:`4esn`[usn2..]}]->(:#usn7:`6esn`{``:1.0 Ends With {`4esn`} Ends With {`2esn`}}))"),
    octest_legacy:ct_string("Foreach(`5esn` In Case When {``} =~{`2esn`} =~$`8esn` Then {@usn5}[{``}][{_usn4}] When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 Else {`2esn`} End In Filter(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5) In Allshortestpaths(((@usn5 :`8esn`:_usn3)-[`2esn`?:usn2|_usn3]->(usn1 {usn1:$`4esn` =~{usn1},@usn5:999 =~0x0 =~2.12})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})))| Unwind `1esn` In 12.e12 In $#usn7 As `5esn`) Merge ((usn1 )-[* 0X0123456789ABCDEF]-(`6esn` :_usn4:`1esn`{`1esn`:2.12 Contains $#usn7 Contains {`6esn`},`6esn`:.e12 Ends With {`2esn`}})<-[`4esn`?:#usn7|:``* 07..]->({@usn6:12e12[..1.e1][..$12],`5esn`:{`7esn`}[..$`8esn`][..{`8esn`}]})) On Create Set `` =$_usn4[$_usn4..01234567],(:`2esn`{`5esn`:9e1[..2.12][..@usn6]})-[#usn7?]->(`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}).`3esn` =`6esn`[$12][{12}] On Match Set `5esn`+=07[{_usn4}..{`4esn`}] Union All Load Csv From 07 Is Null Is Null As @usn5 "),
    octest_legacy:ct_string("Create ({`3esn`:_usn3 In 1.e1})"),
    octest_legacy:ct_string("Start `6esn`=Relationship:`4esn`(`3esn`=\"d_str\")  Delete $_usn3 Is Not Null Is Not Null,$#usn7[$``..{`7esn`}],0e0 Ends With 0 Ends With {`6esn`}"),
    octest_legacy:ct_string("Start usn1=Node:`1esn`(`7esn`={_usn3})  Union Optional Match `4esn`=((_usn4 :@usn5:usn2{``:True[12e12..]})<-[:@usn5|``* 1000{`2esn`:#usn8[1e1..],`1esn`:$#usn8 In $0 In {`2esn`}}]->(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[:`4esn`|`2esn`* 00..999]->(:`2esn`{@usn6:{`6esn`} Is Not Null,``:Null Starts With {_usn4}})),((`5esn` :@usn6)-[usn1?:#usn7|:``* 7{usn2:0xabc Starts With 1.0 Starts With {`2esn`}}]->(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Where True =~_usn3 Union Merge ((`1esn` :`3esn`:@usn5{_usn3:{`5esn`} Ends With `2esn`,_usn3:{#usn7} Contains {`7esn`} Contains $`3esn`})-[`7esn`?:#usn7|:``* 0x0..7]-(#usn8 {`8esn`:$`1esn` Contains usn2 Contains 1.0,`4esn`:`5esn`})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) On Create Set #usn7+=Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],Extract(usn1 In #usn8 =~$@usn5 Where .e1 Starts With #usn7 Starts With 1.e1|.e12[0.0..][$#usn8..]).@usn6? =#usn8[#usn8..] Load Csv From {usn1} Contains $@usn5 As _usn4 Fieldterminator 's_str' Match @usn6=(`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[`5esn`:`8esn`|:_usn3{`3esn`:'s_str' =~0x0 =~{#usn8}}]->(@usn6 :``:usn1{@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})<-[#usn8?:@usn6{`4esn`:999 =~0x0 =~2.12,`7esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(:`3esn`:@usn5{`8esn`:$`7esn` Contains 9e12 Contains `2esn`,`3esn`:$usn1[0X0123456789ABCDEF...e12]}),_usn3=Allshortestpaths((((#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})-[`2esn`:`1esn`|``* 123456789..999]->(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})<-[#usn7?:usn2|_usn3* 7{_usn4}]-(:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7}))))"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) On Match Set Case When $`1esn` Contains $#usn7 Then #usn8 Starts With {_usn3} Starts With 123.654 End._usn4? =_usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) On Match Set @usn6 =All(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where {@usn6} Starts With .e1)[..Any(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0)][..[#usn8 In True In `8esn` Where {`5esn`} Ends With `2esn`|.e1[@usn5]]],`5esn`:@usn5:usn2 Create Unique #usn8=Shortestpath(((`6esn` {_usn4:{_usn4} Ends With 12.0 Ends With $@usn6}))) Union All Load Csv With Headers From Case {`4esn`} Contains \"d_str\" When 01234567[usn1] Then $`4esn`[{@usn5}] When $12[{`5esn`}..] Then {@usn6} Starts With 00 Else `3esn` =~12e12 End Starts With [#usn7 In $@usn6 Contains 0 Contains 0 Where 123456789 Is Not Null Is Not Null] As `4esn` Fieldterminator 's_str' Return [`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] As #usn7,$usn2[`4esn`..],{`6esn`} Is Not Null Is Not Null Order By .e1 Ends With $usn2 Ends With $7 Desc Skip 0.12[`8esn`..] Load Csv From {1000}[$``..$`6esn`][{@usn5}..$_usn4] As `6esn` "),
    octest_legacy:ct_string("With Distinct *,$123456789[.e12..][$999..],Case When {`1esn`}[`1esn`..123.654][{`4esn`}..$7] Then 0xabc[$`2esn`..] Else `4esn`[`1esn`][{`8esn`}] End Starts With Reduce(`6esn`=$`2esn` In 0xabc,`5esn` In `5esn` In 123.654 In {`6esn`}|0.0[`5esn`][1.e1]) Starts With Shortestpath(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) Skip #usn8 Is Null Unwind $@usn5 =~999 =~0e0 As `4esn` Union All Start _usn4=Relationship:#usn7(@usn5=\"d_str\") ,#usn7=Relationship( {7}) With Distinct 0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$_usn4 Contains Null Contains $0 As `3esn` Order By `4esn` Is Not Null Descending Limit False =~9e0 =~{`5esn`}"),
    octest_legacy:ct_string("Unwind 0xabc Is Null As `4esn`"),
    octest_legacy:ct_string("Detach Delete 0X0123456789ABCDEF[..`5esn`][..$`3esn`],Null[`8esn`],$`6esn` In $#usn8 Foreach(`4esn` In [@usn5 In 07[{_usn4}..{`4esn`}]|123.654 In {`6esn`} In `6esn`][..Extract(@usn5 In 1.0 Starts With 12 Where Null In {_usn3} In _usn3)][..{#usn8:$999 In $999}]| Return *,$_usn3 Contains {#usn8} Order By usn2[0.e0..] Descending Limit {`1esn`}[01234567..][@usn5..] Return [#usn8[1e1..],$7[@usn6][0xabc]] In [$@usn5 Starts With 1e1,$@usn5[$7..@usn5],{7} Is Null] In [#usn8 In True In `8esn` Where 2.12 Contains `4esn` Contains .e1],(`8esn` {_usn3:`3esn` =~12e12,#usn8:#usn8[1e1..`1esn`][{1000}..`6esn`]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})-[?:usn2|_usn3{`7esn`:010[``..][{_usn3}..]}]->(usn1 :`8esn`:_usn3) Is Null Is Null As `6esn`,Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End Is Not Null Is Not Null As _usn4) Create Unique Allshortestpaths((`5esn` {`4esn`:$#usn7 Starts With {`2esn`} Starts With @usn6})) Union Foreach(`` In Allshortestpaths(({#usn8:$@usn5 Is Not Null,_usn3:0.12[$0..$``]})<-[* 01..{`7esn`:{#usn7} =~{usn1},`7esn`:0x0 Is Null}]-(#usn7 {@usn6:00[usn1..\"d_str\"][{0}..$`8esn`],`6esn`:{`8esn`} In 12 In 1e1})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})) =~All(`5esn` In `5esn` In 123.654 In {`6esn`} Where True[..{_usn3}][..999])| Remove [0.0[.e12..],12.0 In $usn1 In True,$999[$12..][.e0..]].#usn8,[usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12|00[{999}..$#usn7][$0...e0]]._usn3! Remove ['s_str' =~0x0 =~{#usn8},0.e0 Ends With {@usn5} Ends With 0e0].`5esn`!) Return (@usn6 )<-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`1esn`?:`5esn`|`3esn`]->(`` {`7esn`:$@usn5[$123456789..][@usn5..]}) Is Not Null Is Not Null,{#usn7} Is Null Is Null,{1000}[9e0][`3esn`] Skip [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Limit `6esn` Contains {`3esn`} Create Allshortestpaths((:_usn4:`1esn`{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]})-[@usn6:_usn3|:`6esn`{_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}]->(_usn3 {_usn4:Null[False..][12.e12..]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``})),@usn6=({`8esn`:0xabc[$`2esn`..],#usn8:{_usn3}[..$usn2][..$`6esn`]})"),
    octest_legacy:ct_string("Unwind `1esn`[$`2esn`..$#usn8][\"d_str\"..False] As _usn4 Union All With  \"d_str\" Ends With 0e0 Ends With {usn2} As usn1 Where `1esn` In `7esn` In {`7esn`} Unwind {1000}[0e0][{usn1}] As usn2 Unwind (:_usn3:@usn6{#usn8:0.0 Is Null,``:$`1esn` Contains $#usn7})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[usn2?:`5esn`|`3esn`]->(`7esn` {`2esn`:0.e0[$`1esn`..]}) Contains {``:0X0123456789ABCDEF Starts With #usn7,`7esn`:010 Contains $`5esn`} Contains Filter(`6esn` In {1000} Is Not Null Where .e12 Ends With {`2esn`}) As @usn5"),
    octest_legacy:ct_string("Start _usn4=Relationship:`3esn`(#usn8={`5esn`}) ,`6esn`=Node:`1esn`(usn1={`8esn`}) With  .e12[{1000}] As `7esn` Order By Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $`6esn` Starts With _usn4 Starts With `5esn`)[..{@usn6:.e1 =~9e12}][..Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}])] Ascending,0xabc In 9e1 Desc,True[..{_usn3}][..999] Ascending Skip [usn2 In {@usn5} Where 12.e12 Starts With `8esn` Starts With 9e12|00[{999}..$#usn7][$0...e0]] Contains `2esn`(9e1 =~$`4esn` =~{usn2},`5esn` Starts With {999}) Where @usn6[..{usn2}][..{`5esn`}] Foreach(#usn8 In 7 Is Null Is Null| Unwind 's_str'[..'s_str'][..{#usn7}] As `2esn`)"),
    octest_legacy:ct_string("Unwind {`1esn`}[\"d_str\"][{1000}] As `2esn` Unwind All(usn2 In {@usn5} Where 999 Is Not Null Is Not Null) As `8esn` Unwind False Contains _usn3 Contains {`5esn`} As #usn8 Union Merge `3esn`=((:`4esn`:`3esn`{12})<-[`8esn`:_usn4|`5esn`* 0Xa{usn1:00 =~.e12}]->(`4esn` :`3esn`:@usn5{`5esn`:$7[0X0123456789ABCDEF],`6esn`:1e1[1000]})) On Match Set `6esn`+=Count(*) In `1esn` In {_usn3},#usn7+=[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..],_usn3+={``}[2.12] On Match Set Extract(`6esn` In {1000} Is Not Null Where $`1esn`[`6esn`..$12][{usn2}..07]).`6esn` =`5esn` =~0e0 Union Detach Delete $999[999..][$_usn4..],`4esn`[usn2..],{12}[{@usn6}..``][7..`1esn`] Detach Delete 1.e1[`8esn`..Count(*)],[`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where _usn3[..0xabc][..@usn5]|{#usn8} Ends With {123456789} Ends With #usn8] Contains [@usn5 In 07[{_usn4}..{`4esn`}] Where 9e0[..{usn1}]|1000 Is Not Null Is Not Null] Contains [12.e12[..9e12][..1000],True[..{_usn3}][..999]] Foreach(usn1 In All(_usn4 In .e12 Is Not Null Where 0xabc Contains False Contains {1000}) Is Null Is Null| Load Csv From [`4esn` Is Not Null,$`6esn`[$7..{`3esn`}],@usn6[9e12..]] =~Case $``[{#usn7}..{usn2}] When #usn8[1e1..] Then $_usn3[$usn2..] End As usn1 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Optional Match Shortestpath((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})),Allshortestpaths((:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})<-[`1esn`:`1esn`|``{``:$`7esn`[_usn3..][{_usn3}..]}]-(_usn4 {`2esn`:`8esn`[1000..#usn8]})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})) Using Scan `4esn`:`6esn` Where $`1esn` Contains usn2 Contains 1.0 Create Unique `1esn`=Allshortestpaths(((({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`4esn`?* 01..]-(_usn4 :_usn3:@usn6{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})<-[`1esn`?* 0xabc..01234567{_usn3:$`7esn` Ends With usn2,_usn4:$`5esn` Starts With 1.0 Starts With $usn2}]-(_usn4 {@usn6:$`8esn` Starts With $123456789,@usn5:.e1[..`2esn`]})))) Load Csv From {7}[0X0123456789ABCDEF..][{123456789}..] As `6esn` Fieldterminator 's_str' Union All Return *,`5esn` Starts With {999} Skip Reduce(_usn3=$#usn8 In {12} In $`4esn`,_usn4 In .e12 Is Not Null|0X0123456789ABCDEF[..`5esn`][..$`3esn`])[Single(@usn5 In 1.0 Starts With 12 Where True =~_usn3)] Limit 1.e1 Starts With False Starts With $@usn6 Load Csv With Headers From 01 =~0X7 As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Match ((({`4esn`:01234567[usn1]})<-[usn2?:@usn6* 0x0..7]->({_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]})<-[?]->(:usn1{`8esn`:$12[{`5esn`}..]}))) Using Index @usn5:`6esn`(@usn5) Using Index usn1:usn2(@usn5)"),
    octest_legacy:ct_string("Return Distinct *,`3esn`[#usn8] Order By {#usn7} In 010 In 12 Desc,$`2esn` Contains {#usn7} Contains {usn2} Ascending Unwind {7} Is Null As `6esn`"),
    octest_legacy:ct_string("Create (:`4esn`:`3esn`{`4esn`:$`1esn`[`6esn`..$12][{usn2}..07]}) Detach Delete $`8esn` In Count(*) In $usn1,0xabc =~{_usn4},{1000}[07][{usn1}] Union All Merge `6esn`=(_usn4 {`4esn`:0[...e1][..$usn2]}) Remove Filter(#usn8 In True In `8esn`).``,[$@usn5 Is Not Null].`3esn`!,(`7esn` :``:usn1{#usn8:$999 In $999})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]->(`` :usn1).`8esn` Create `8esn`=Shortestpath((_usn4 {`2esn`:0[{`4esn`}..],`6esn`:{`2esn`}[..{123456789}]})-[#usn7:_usn3|:`6esn`{@usn6:{12} Is Null}]-({_usn3:#usn7 Starts With {@usn6} Starts With {`1esn`},`6esn`:9e1 =~{#usn7}})<-[`7esn`?* 0xabc..01234567]-(`1esn` {_usn3:7 Is Null Is Null})),(`1esn` {#usn8:@usn6 Contains {0}})<-[?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(@usn6 $1000)"),
    octest_legacy:ct_string("With  0.e0 Starts With 0x0 Starts With {12},$999[$@usn6..] As @usn6,_usn3 In 1.e1 As `5esn` Skip {`3esn`} Ends With $123456789 Ends With {12} Limit .e12 Is Null Is Null Union Foreach(`6esn` In Case {`6esn`}[0.e0..$123456789] When _usn3 In 1.e1 Then $999[$12..][.e0..] Else usn2[01234567..] End In Case $123456789[{`1esn`}][0.12] When 12.0[{`6esn`}..123.654][@usn5..usn1] Then $`7esn` Contains 9e12 Contains `2esn` When 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Then 's_str' =~0xabc =~$@usn5 Else 1e1[..12e12] End In {`7esn`:{12} Is Null}| Start `3esn`=Rel:`5esn`('s_str')  Start `2esn`=Node:`8esn`(#usn8='s_str') ) Delete {999} Is Not Null Is Not Null,[`3esn`[#usn8],_usn4 Ends With $`3esn` Ends With {`3esn`},1e1[..12e12]][..Shortestpath((({usn1:$@usn5[`2esn`..][#usn7..],@usn5:{1000}[..#usn7][..{#usn8}]})-[]->(:usn1)-[@usn5?:`8esn`|:_usn3* ..999]->(:`5esn`{``:{`5esn`} Ends With `2esn`})))][..Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {_usn4} In 9e0)] Union Detach Delete {_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:{`8esn`} Is Not Null Is Not Null} =~[010,0X7 Is Null Is Null] Start `2esn`=Node:`8esn`(#usn8='s_str') "),
    octest_legacy:ct_string("With Distinct *,.e1 Starts With #usn7 Starts With 1.e1 As usn2 Skip 12 =~$`5esn` =~$_usn3 Where 123.654 Contains $`4esn` Contains .e1 Union Return *,{#usn7:1000[9e12][$`1esn`]} =~Single(_usn4 In .e12 Is Not Null Where `8esn`[$123456789..][$usn1..]) As `4esn`,Null[.e12..{#usn8}] Limit 's_str' Is Not Null Is Not Null Delete 123.654[$`5esn`],[`5esn` In $999[12] Where $`8esn`[2.12][$_usn4]|_usn3 In 1.e1][Case When 1000 Is Not Null Then `4esn` Starts With 01 End..] Remove (`8esn` :`2esn`{`5esn`:0 Is Not Null})<-[* ..999]-(`5esn` {_usn3:0 Is Null,#usn7:$_usn3[@usn6..][{``}..]}).`4esn`"),
    octest_legacy:ct_string("Foreach(_usn3 In 01234567 Contains 010 Contains _usn4| Match `6esn`=Allshortestpaths(((#usn7 {_usn4:.e1[..`2esn`],`5esn`:usn2[01234567..]}))),#usn7=(({`5esn`:9e0 =~$usn1 =~{@usn6}})-[?* 07..]->(`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[:`4esn`|`2esn`* 00..999]->(:`4esn`:`3esn`{`8esn`:True Starts With 2.12 Starts With {123456789}})) Where _usn3 Ends With {`7esn`} Ends With 12 Detach Delete 0xabc In 9e1,All(usn2 In {@usn5} Where 0[`6esn`][1e1])[[@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 9e12 Is Null Is Null|@usn5[..$`7esn`][..$`6esn`]]..()<-[`8esn`* 01234567..0Xa{usn2:9e1[12.e12..]}]->(:`7esn`:_usn4{_usn4:$`8esn` In {`2esn`} In $0})],{`7esn`:$@usn5[$123456789..][@usn5..]} Contains [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Contains Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4])) Start `8esn`=Node( {`8esn`}) ,`5esn`=Node:``(``=\"d_str\")Where $`3esn` Contains .e1 Merge `8esn`=(:``:usn1{usn2:'s_str' Is Not Null,`4esn`:$`1esn` Contains usn2 Contains 1.0})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})"),
    octest_legacy:ct_string("Detach Delete Count(*) In `1esn` In {_usn3} Return *,Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] As usn2 Skip Reduce(`1esn`=$#usn7 =~Count(*) =~@usn5,#usn8 In True In `8esn`|1.e1 Is Not Null) Starts With None(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {`3esn`} Is Null Is Null) Starts With [$#usn7[$`1esn`..{`1esn`}]] Limit 1e1 Is Not Null Is Not Null Match #usn7=Allshortestpaths(((#usn7 :`7esn`:_usn4)-[`7esn`?:#usn7|:``* 0x0..7]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`}))),(((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})-[_usn4:``{`3esn`:`8esn`[1000..#usn8]}]->(:@usn5:usn2{`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})<-[_usn4:_usn4|`5esn`* ..999]->(`4esn` {@usn6:1000 In {`4esn`}}))) Using Scan ``:_usn3 Using Index `8esn`:#usn8(usn1) Where {`2esn`}[..$`6esn`][..`3esn`]"),
    octest_legacy:ct_string("Create ((`8esn` :usn1)),(:#usn7:`6esn`{`5esn`:@usn5 In 00,`6esn`:0.e0[$`1esn`..]})<-[@usn5?* 00..999]->(`3esn` :#usn8:#usn7{@usn6:{#usn7} =~$0,_usn3:2.12 Contains {1000} Contains 1.e1}) Union All Unwind $`2esn` In 0xabc As `2esn` Start #usn7=Node:#usn8(`4esn`=\"d_str\") Where 999[{123456789}..999] With  *,0X0123456789ABCDEF Is Null As `1esn`,0X0123456789ABCDEF[0e0..$12][00..{12}] Order By 010[$12..] Asc,_usn4($`6esn`[`5esn`..][$12..]) In [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 01234567 Is Not Null|999[{123456789}..999]] In None(`7esn` In @usn5[01..`6esn`] Where 1e1 In 0xabc) Ascending,9e12 Ends With {``} Ends With 0e0 Desc Where $`3esn` Is Null Is Null"),
    octest_legacy:ct_string("Create Allshortestpaths(((`2esn` {@usn5:_usn4[12.e12..],`3esn`:123.654 In {12} In ``})-[`5esn`?:_usn3|:`6esn`]-(#usn8 :@usn5:usn2)<-[_usn4?:``]-(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]}))) Foreach(#usn8 In 0Xa Contains {`4esn`} Contains {`1esn`}| Unwind $1000[999..][0Xa..] As `6esn` With  *,$`1esn` =~1.0 =~0X7 As `4esn` Limit {999}[0..{`7esn`}][9e0..{`3esn`}] Where {12}[{_usn3}..0X7][$7..0]) Start @usn6=Relationship( {`7esn`}) ,``=Relationship:usn1({usn2}) Union All Merge ({`2esn`:'s_str'[..'s_str'][..{#usn7}]})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}) Create Unique ((usn2 $`2esn`)),`3esn`=Allshortestpaths(((`2esn` :`2esn`{`6esn`:`4esn` Starts With $12 Starts With $12,`3esn`:False Contains {``} Contains $`2esn`})<-[``?:#usn8|_usn3* ..12{@usn6:0.e0 Ends With {@usn5} Ends With 0e0}]->(`4esn` :_usn3:@usn6{`3esn`:$0 Ends With 12.0 Ends With _usn4})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null}))) Union All Detach Delete {`6esn`}[$1000],Any(#usn8 In True In `8esn` Where 01234567[usn1])[Filter(`1esn` In {``} =~{`2esn`} =~$`8esn`)..]"),
    octest_legacy:ct_string("Unwind 0xabc =~{`8esn`} =~{_usn3} As @usn5"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $_usn4[$_usn4..01234567] As @usn5 Fieldterminator \"d_str\" Remove {`7esn`:12.0[$999..][$@usn6..]}._usn4 With Distinct 1.0 Ends With {`4esn`} Ends With {`2esn`} As `1esn`,9e1 Ends With 0xabc Ends With @usn6 As `7esn`,0.12 Ends With $_usn3 Ends With 07 As usn2 Order By Null[`1esn`..00] Ascending,$_usn4 Ends With False Ends With $#usn8 Asc Skip exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) Limit {#usn7}[{`1esn`}..][`1esn`..] Where $`6esn`[$7..{`3esn`}]"),
    octest_legacy:ct_string("Return Distinct *,$usn2 Is Not Null Is Not Null As `8esn` Order By 1e1[usn1..$123456789][Count(*)..False] Descending,Any(@usn5 In 1.0 Starts With 12 Where .e0 Starts With {0} Starts With 0x0) =~(:``:usn1)<-[`6esn`?:`1esn`|``]-(`1esn` {`4esn`:False =~9e0 =~{`5esn`}}) =~None(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $usn2 =~`6esn` =~{usn1}) Asc Skip {`5esn`}[$1000..`1esn`] Limit [False Contains _usn3 Contains {`5esn`},0X0123456789ABCDEF =~$@usn6 =~$`8esn`,$@usn5[`2esn`..][#usn7..]][Reduce(@usn5=@usn5 Contains {#usn8} Contains 010,_usn4 In .e12 Is Not Null|`5esn` In 123.654 In {`6esn`})..#usn8(Distinct @usn5 In 00,$999 =~$999 =~usn2)][(`6esn` :`3esn`:@usn5{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]})<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})-[?:`6esn`|:`7esn`* 0X0123456789ABCDEF{usn1:`4esn`[$999..][1.0..]}]-(`1esn` {`1esn`:`5esn`,#usn8:00[.e0][010]})..All(`1esn` In {``} =~{`2esn`} =~$`8esn` Where $@usn5 Starts With 1e1)] Merge `8esn`=Allshortestpaths((usn2 :`3esn`:@usn5)) On Match Set `3esn`+='s_str' Ends With $0,usn2 =0[`7esn`..][$12..],Shortestpath((((@usn5 :`1esn`{_usn4:.e12[0.0..][$#usn8..]})<-[#usn7?:_usn3|:`6esn`* 0Xa{#usn7:$_usn4[0X7..{1000}]}]->({`3esn`:00[{999}..$#usn7][$0...e0],`5esn`:True =~_usn3})<-[`3esn`* ..12{#usn7:`1esn`[..{`4esn`}][..{0}],`2esn`:$``[..{_usn4}][..{@usn6}]}]->(`4esn` {_usn4:0X0123456789ABCDEF[..`5esn`][..$`3esn`]})))).`3esn`! ={`5esn`:$`1esn`[_usn3..],`3esn`:0[...e1][..$usn2]}[usn2({1000}[0e0][{usn1}])..Reduce(@usn5=1000[9e12][$`1esn`],#usn8 In True In `8esn`|1.e1 Starts With False Starts With $@usn6)] On Match Set Extract(_usn4 In .e12 Is Not Null|{`1esn`} =~{``} =~$`8esn`).`4esn` =Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654})))[..Filter(`7esn` In @usn5[01..`6esn`] Where $`1esn` Contains usn2 Contains 1.0)],[usn2 In 999[{123456789}..999] Where 12e12[..Count(*)][..$usn2]|0xabc[0.e0..][$7..]].``? =None(`5esn` In $999[12] Where $`8esn`[2.12][$_usn4])[Shortestpath((usn2 {`1esn`:{`2esn`} Contains 0.12 Contains 0.0,`4esn`:{`5esn`} Contains 0})<-[usn1:#usn7|:``{#usn8:9e1 Ends With 0xabc Ends With @usn6}]->(`3esn` :``:usn1))][All(@usn5 In 1.0 Starts With 12 Where .e0 Starts With {0} Starts With 0x0)],`7esn`:``:usn1 Create Unique usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),(_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})"),
    octest_legacy:ct_string("Start #usn8=Node:`4esn`(`3esn`=\"d_str\")  Create @usn6=Allshortestpaths((_usn3 {@usn6:$usn1[0X0123456789ABCDEF...e12]})-[`3esn`?* 0xabc..01234567]-(@usn6 :#usn7:`6esn`{`2esn`:00[$usn2..][0.12..]})),`6esn`=(({`8esn`:`1esn` =~12.0})-[`2esn`:`5esn`|`3esn`* 7{`3esn`:1e1[1000]}]->(usn2 )<-[_usn3?:_usn3|:`6esn`]->(:#usn8:#usn7{``:usn1[#usn8..0.0],`7esn`:{_usn3} In 010 In 0.e0})) Start _usn4=Node:_usn3({_usn3}) Where {@usn5}[{``}][{_usn4}]"),
    octest_legacy:ct_string("Create _usn3=Shortestpath((usn2 :usn2{`6esn`:123.654 In {12} In ``})),usn1=Shortestpath((({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})))"),
    octest_legacy:ct_string("Remove All(`6esn` In {1000} Is Not Null Where {999} Ends With 1000 Ends With 1e1).``?,Single(@usn5 In 07[{_usn4}..{`4esn`}] Where True =~_usn3)._usn3,All(`4esn` In False[0.0..{@usn6}] Where {`7esn`}).`4esn`? With Distinct *,{@usn6} Starts With .e1 As `3esn`,{#usn8} =~$0 Order By 's_str' Ends With 's_str' Ends With $1000 Asc,'s_str' In {1000} In 010 Descending Skip #usn8[#usn8..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`7esn` Is Not Null Is Not Null As @usn5 Fieldterminator 's_str' Return Distinct 0X0123456789ABCDEF Is Null As `1esn` Order By `1esn` In 12.e12 In $#usn7 Desc Skip 0.12[{usn1}..{1000}][{0}..{#usn8}] Create `3esn`=Shortestpath((:_usn4:`1esn`{`5esn`:010 Ends With 123456789 Ends With .e0,_usn4:9e1[..2.12][..@usn6]})<-[?:`8esn`|:_usn3* 01234567..0Xa{`4esn`:`6esn` Ends With 0x0 Ends With 12}]-(usn2 :_usn4:`1esn`))"),
    octest_legacy:ct_string("Create Shortestpath(({`1esn`:{1000}[0e0][{usn1}]})<-[* 123456789..999{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1}]-(#usn7 )<-[#usn7?:usn2|_usn3* 7{_usn4}]-(#usn7 :usn1)),Allshortestpaths(((`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]}))) Return usn1 =~9e0 As `` Order By {`6esn`} Starts With $1000 Ascending,True[12e12..] Ascending Skip $_usn4[$_usn4..01234567] Limit Any(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12.0 In $usn1 In True) Is Null Is Null"),
    octest_legacy:ct_string("Create _usn3=((`` {`2esn`:{``}[$@usn5]})),`5esn`=Shortestpath((:#usn8:#usn7{usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[`6esn`?:`5esn`|`3esn`* 01..{`4esn`:00 Starts With 12 Starts With 0e0,`5esn`:{usn1}[..{#usn7}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})<-[usn1?:`7esn`* 0x0..7]->(@usn6 :`5esn`{_usn4:True Starts With `` Starts With 0.e0})) Start _usn4=Relationship:#usn7(@usn5=\"d_str\") Where _usn4[12.e12..] Load Csv From (`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000 As usn1 Fieldterminator 's_str' Union With Distinct *,Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])],`2esn` =~$#usn7 =~_usn4 As `7esn` Skip {123456789}[..Count(*)] Limit 2.12 Contains $#usn7 Contains {`6esn`} Where _usn4 =~$#usn7 =~`8esn`"),
    octest_legacy:ct_string("Create #usn7=Shortestpath((({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1))),`4esn`=(:#usn8:#usn7{``:$0 Starts With `2esn` Starts With {`1esn`},@usn6:.e12 Is Not Null})<-[* 07..{`6esn`:{0}[.e12..]}]->(@usn5 {#usn8:0.12[True..{`4esn`}],#usn7:{``} Starts With True Starts With True})"),
    octest_legacy:ct_string("Create `2esn`=Shortestpath((((usn2 :``:usn1{`6esn`:$`8esn`[2.12][$_usn4]})<-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(`7esn` {_usn3:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`]})-[@usn5?:`2esn`* 7{`7esn`:$@usn6[..{`6esn`}][...e0]}]->(usn1 :usn2)))) Start `8esn`=Node:`7esn`(`4esn`=\"d_str\") Where \"d_str\" Ends With 0e0 Ends With {usn2} Delete 00[.e0][010] Union With  *,1.0 =~`7esn` =~$`7esn`,0xabc In $999 Order By 12e12[$``..] Desc,{``} Ends With `8esn` Ends With {`6esn`} Ascending,Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Is Not Null Is Not Null Asc Where {`6esn`}[_usn3] Start usn2=Relationship:`6esn`({#usn8})  Merge Shortestpath((((:_usn3:@usn6{`5esn`:.e12[0.0..][$#usn8..],usn1:07 Is Null})<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(`7esn` {`8esn`:_usn4 In usn2})-[* 0x0..7{@usn6:$0 Ends With `2esn`}]->(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6})))) On Create Set Single(`5esn` In $999[12] Where `5esn` In 123.654 In {`6esn`})._usn4 =$`4esn`,`` =(`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000,_usn3+={usn2}[{`7esn`}][$usn2] On Create Set `3esn`+=@usn6[usn2...e1][9e0..{@usn6}] Union Start @usn6=Node:@usn6('s_str') ,`7esn`=Node:@usn6({7})"),
    octest_legacy:ct_string("Remove {usn2:$`7esn` =~#usn8 =~{`7esn`},`8esn`:`1esn` In {`4esn`}}.`7esn`,{usn2:$#usn7 Contains {usn2}}.`8esn`? Union Remove [_usn4 In .e12 Is Not Null Where 2.12 Contains $#usn7 Contains {`6esn`}].`6esn` Create Unique Shortestpath((@usn5 :usn1{#usn8:0xabc =~{_usn4}})) Union With Distinct 's_str' Is Not Null,999[{12}..][$1000..],Extract(usn1 In #usn8 =~$@usn5 Where {``}[$@usn5]|9e12 In 's_str' In $`4esn`) Starts With (:usn1{_usn3:.e0 Starts With {0} Starts With 0x0})<-[:`8esn`|:_usn3{@usn5:9e1 =~{#usn7},_usn4:1.e1 =~123.654 =~$`3esn`}]-(#usn8 {`1esn`:@usn5[..$`7esn`][..$`6esn`],_usn3:`4esn` Starts With 01})<-[#usn8?* ..999{#usn7:0xabc =~{`8esn`} =~{_usn3}}]->(:`8esn`:_usn3{_usn3:{999}[..{999}]}) Starts With Filter(@usn5 In 07[{_usn4}..{`4esn`}] Where `1esn` In `7esn` In {`7esn`}) Skip 12e12[$``..] Limit {`4esn`}[.e0][0Xa] Merge `6esn`=(({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})<-[:_usn3|:`6esn`* 0Xa]->(:`7esn`:_usn4{usn1:$`8esn` In {`2esn`} In $0})<-[#usn7:``* 0Xa]->(:_usn3:@usn6{usn2:usn1 =~1000 =~12})) On Create Set usn2+=Allshortestpaths((((@usn5 :`6esn`:`4esn`)-[`5esn`?{usn2:.e12 Starts With 12,_usn4:0X0123456789ABCDEF[0e0..0xabc]}]->(:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})-[?:`4esn`|`2esn`* 07..]->(_usn3 {_usn4:{usn2} Contains {123456789} Contains 0Xa}))))[None(`6esn` In {1000} Is Not Null Where {999}[`2esn`])][Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $7[{`7esn`}][12.0])] On Create Set (`2esn` :#usn8:#usn7{_usn3:`8esn`[$1000..$#usn8][_usn3..{7}]})-[?:`6esn`|:`7esn`* 0x0..7{usn2:usn1 =~1000 =~12}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})<-[#usn7?:`8esn`|:_usn3{`4esn`:{#usn8}[False..{usn1}][$`6esn`..0Xa]}]->(_usn3 {_usn4:1000 Starts With {7} Starts With $7}).usn1! =$@usn6[#usn8..] Delete 1.0[Extract(usn1 In #usn8 =~$@usn5 Where 0[...e1][..$usn2]|01234567[usn1])][(`` :@usn5:usn2{@usn6:`7esn`[..{`8esn`}],#usn7:{usn2}[{`7esn`}][$usn2]})<-[?:`4esn`|`2esn`* 123456789..999{#usn8:$999 In $999}]-(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`})<-[usn1?:`5esn`|`3esn`]->(`4esn` :``:usn1)]"),
    octest_legacy:ct_string("Detach Delete 0x0 Ends With $@usn6 Ends With {usn2},{`3esn`:.e0 Starts With {0} Starts With 0x0}[Single(usn1 In {usn2} Contains {123456789} Contains 0Xa Where $7 In $usn2 In {1000})][{#usn8:`6esn` =~12.e12 =~123456789,#usn8:{@usn5} Contains 0X7 Contains 1e1}],Shortestpath((((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})))) Is Not Null Is Not Null Load Csv With Headers From `4esn` Starts With 0x0 As #usn8 Fieldterminator 's_str' Union All Return Distinct 0X0123456789ABCDEF Is Null As `1esn` Order By `1esn` In 12.e12 In $#usn7 Desc Skip 0.12[{usn1}..{1000}][{0}..{#usn8}] Union Detach Delete {usn2:$#usn8 In $0 In {`2esn`},_usn3:$`3esn` In {`1esn`} In 12e12}[Reduce(`6esn`=07[_usn3][123456789],`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn`|'s_str' =~0x0 =~{#usn8})..],(#usn7 :usn1)<-[`7esn`?* 0xabc..01234567]-(usn1 :`4esn`:`3esn`{`1esn`:{`4esn`}[0xabc..][010..]})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}) Is Null Is Null"),
    octest_legacy:ct_string("Remove None(@usn5 In 1.0 Starts With 12 Where 07 Contains @usn5).`6esn`"),
    octest_legacy:ct_string("Merge `8esn`=Shortestpath((((_usn3 :usn2{#usn8:0xabc =~{_usn4}})<-[`5esn`?:usn1|:@usn6]-(usn2 :`2esn`)<-[#usn8?:`4esn`|`2esn`]-(:`2esn`{_usn4:$999 Is Not Null Is Not Null})))) On Match Set @usn6 =0x0 Is Null,``+=Shortestpath((`4esn` :usn1)-[`4esn`?* 01..]-(#usn8 {_usn3:$999 In $999,usn1:0X0123456789ABCDEF Is Null})) Contains (:`2esn`{`4esn`:{@usn5} In $`5esn`,`7esn`:{`8esn`} In 12 In 1e1})<-[:usn2|_usn3* 0xabc..01234567]->(:_usn4:`1esn`) Contains (:usn2{usn1:1.e1 =~123.654 =~$`3esn`})-[?:`4esn`|`2esn`* 01234567..0Xa{`8esn`:{`7esn`},usn2:1000 Contains 12.e12}]-(`3esn` :#usn8:#usn7{usn2:$usn1[0X0123456789ABCDEF...e12],@usn6:False =~9e0 =~{`5esn`}})-[@usn6?:usn1|:@usn6* 0xabc..01234567]->(usn1 {_usn3}),Reduce(`7esn`=999 =~0x0 =~2.12,`4esn` In False[0.0..{@usn6}]|{@usn5} In 0X0123456789ABCDEF In 1000).#usn7 =`7esn`[2.12] On Match Set Case When {usn1}[12e12..`6esn`][`7esn`..$`6esn`] Then usn1 Ends With $@usn6 Ends With $1000 When 12.0 Starts With 00 Starts With 9e1 Then 12.0 Starts With 00 Starts With 9e1 End.`6esn`? =#usn7 Starts With {@usn5} Starts With 07,`` ={_usn4} =~0 =~{12},Single(`7esn` In @usn5[01..`6esn`] Where True In `8esn`).`4esn`! =[@usn5 In 07[{_usn4}..{`4esn`}] Where 12.0 Ends With 0e0 Ends With $123456789|$`2esn` Ends With $`2esn`] Contains Reduce(@usn6=`7esn`[`5esn`..][0.12..],`1esn` In {``} =~{`2esn`} =~$`8esn`|$1000[999..][0Xa..]) Contains Extract(usn2 In 999[{123456789}..999] Where 9e1 Is Not Null) Union All Merge Shortestpath((((`8esn` :#usn7:`6esn`{`2esn`:`1esn` =~12.0,_usn4:$#usn8 In $0 In {`2esn`}})-[usn1?:usn2|_usn3* 1000{#usn8:00 Is Null}]-({#usn7:_usn3[..0xabc][..@usn5],`3esn`:`4esn`[$999..][1.0..]})<-[:@usn5|``{`6esn`:{@usn6} Contains {_usn3} Contains 1000}]-(:`4esn`:`3esn`{`3esn`:{1000}[0e0][{usn1}],`1esn`:{`7esn`}})))) Union Create Unique usn1=Shortestpath((`5esn` {`3esn`:_usn3 In 1.e1})) With  exists(Distinct 0.e0[#usn7..][$@usn5..],12 Ends With 0.e0) As `3esn` Order By $#usn7 Ends With $999 Ends With {`5esn`} Desc,{_usn4:1000 Is Not Null Is Not Null,@usn6:$12 Contains .e1}[[12 Is Null Is Null,12.0[{`6esn`}..123.654][@usn5..usn1],$`1esn` Is Not Null]..][{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}..] Ascending,{`5esn`} Contains 0 Desc Skip {``} =~{`2esn`} =~$`8esn` Limit `2esn` In `5esn` Where `1esn` =~12.0 Unwind $`1esn`[_usn3..] As _usn4"),
    octest_legacy:ct_string("Return Distinct @usn5[..$`7esn`][..$`6esn`] As _usn3 Order By {_usn3:$usn2 Starts With {`1esn`}}[Single(usn1 In #usn8 =~$@usn5 Where {`6esn`}[0.e0..$123456789])] Asc Limit 0Xa[0X7..#usn8][_usn3..9e1] Union All Return Distinct {`6esn`} Is Not Null Order By .e12[$``..] Desc Skip {`2esn`}[..``] Create usn1=Shortestpath((((#usn7 {`2esn`:{`1esn`} =~{``} =~$`8esn`})<-[usn2:`5esn`|`3esn`{`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07}]->(@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[:_usn3|:`6esn`* 0Xa]->(`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})))) Create Allshortestpaths((({`8esn`:12e12[..1.e1][..$12]})-[usn2?:`6esn`|:`7esn`]-(`3esn` :_usn4:`1esn`{@usn6:$#usn8 Is Not Null,`1esn`:9e0[..{usn1}]}))) Union All Start `2esn`=Node:``(@usn6='s_str') ,usn2=Rel:`5esn`({123456789}) Load Csv From 01234567 =~{@usn5} =~1e1 As `2esn`  Load Csv With Headers From 9e0 Is Not Null Is Not Null As `5esn` "),
    octest_legacy:ct_string("Create Shortestpath(((`5esn` {usn1:usn2[$7..$`5esn`],`5esn`:1000 Is Not Null Is Not Null})<-[?* 0{`2esn`:$#usn8[12e12][0X7],`8esn`:9e1[..2.12][..@usn6]}]->(`1esn` :@usn5:usn2)-[#usn8?:#usn7|:``* 0xabc..01234567]->(:`1esn`{`8esn`:$#usn7 Contains {usn2},`7esn`:@usn6 In {@usn5} In 123.654}))),Allshortestpaths(((#usn7 :`7esn`:_usn4)-[`7esn`?:#usn7|:``* 0x0..7]->(`6esn` {@usn6:{`1esn`}[`1esn`..123.654][{`4esn`}..$7],usn1:7 Starts With `5esn`}))) Merge Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-(`5esn` :``:usn1)<-[#usn8?:_usn4|`5esn`{_usn3:12[`3esn`..][0X0123456789ABCDEF..],`3esn`:12.0 Ends With 0e0 Ends With $123456789}]->(`` :_usn4:`1esn`)) On Create Set `2esn`+=`7esn`(Distinct 1.e1[0xabc..][.e12..]) In None(usn1 In {usn2} Contains {123456789} Contains 0Xa Where {_usn3}[..$usn2][..$`6esn`]) In True Union Return Case When .e0 Contains $@usn6 Then $`8esn`[2.12][$_usn4] Else {`3esn`}[`6esn`..] End[..(`2esn` :usn1{_usn4:'s_str' =~0x0 =~{#usn8},`6esn`:01})<-[_usn3:`7esn`]-(`4esn` :`8esn`:_usn3{`6esn`:1.0[{#usn8}..]})][..(usn2 :`2esn`)-[]-(usn2 :`3esn`:@usn5)<-[`2esn`{`6esn`:@usn6[..{usn2}][..{`5esn`}],`4esn`:$#usn7[$usn2..@usn6][$`7esn`..{7}]}]->(`2esn` :``:usn1{`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})] As usn1,Reduce(`1esn`=$`7esn` Is Not Null Is Not Null,`1esn` In {``} =~{`2esn`} =~$`8esn`|$#usn7[$usn2..@usn6][$`7esn`..{7}]) In Shortestpath((@usn6 {``:{``} Ends With $`1esn` Ends With {`3esn`}})) In Case _usn3 In 1.e1 When $`4esn` Ends With $12 Then #usn8 Starts With {_usn3} Starts With 123.654 When $`6esn` Is Not Null Is Not Null Then $@usn6 End As _usn4,_usn4[..{`3esn`}][..{@usn6}] Order By {`6esn`}[{usn2}..$`3esn`][12.0..0xabc] Descending Skip {@usn5}[Case 010 Ends With 123456789 Ends With .e0 When {#usn8} Is Not Null Is Not Null Then $`6esn` Is Null Is Null End..Extract(#usn7 In $@usn6 Contains 0 Contains 0 Where $#usn7 Starts With {`2esn`} Starts With @usn6|Null[False..][12.e12..])] Union Start `8esn`=Rel:@usn5(usn1='s_str') ,`2esn`=Node:`2esn`({`3esn`})"),
    octest_legacy:ct_string("Start @usn5=Rel:`5esn`('s_str')  Foreach(`3esn` In [`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where 1000 Contains 12.e12] Contains Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 00[usn1..\"d_str\"][{0}..$`8esn`]) Contains Shortestpath(((@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]})))| Create `2esn`=((#usn8 :_usn4:`1esn`{`4esn`:{``}[2.12],_usn4:{12}[{_usn3}..0X7][$7..0]})<-[?:`2esn`* 123456789..999{_usn4:$999 Is Not Null Is Not Null}]->(:``:usn1{`5esn`:$`3esn` Is Null Is Null,`4esn`:\"d_str\" Starts With $`` Starts With $usn1})),`4esn`=Allshortestpaths(((_usn3 {``:1e1 Contains @usn6 Contains {`8esn`},`1esn`:{``} =~{`2esn`} =~$`8esn`})))) Remove (usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}}).@usn6,Case When $`2esn`[Null][{``}] Then {`1esn`} =~{``} =~$`8esn` When `8esn` =~0 Then {#usn8} Ends With {123456789} Ends With #usn8 Else _usn4 =~$#usn7 =~`8esn` End.`1esn`,Case When `4esn` Starts With 0x0 Then #usn8 Ends With 0Xa When $7 =~{`7esn`} =~$`6esn` Then 010 Ends With 123456789 Ends With .e0 End.`4esn`?"),
    octest_legacy:ct_string("Delete Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End Remove Filter(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where .e1[07..`5esn`][$12...e0]).`3esn`?,Reduce(`4esn`=.e12 Is Not Null,#usn7 In $@usn6 Contains 0 Contains 0|{#usn7} Starts With $`1esn` Starts With 07).usn2! Union All Unwind `7esn`(Distinct)[[12[`3esn`..][0X0123456789ABCDEF..]]..[12.0 In $usn1 In True,@usn5[..$`7esn`][..$`6esn`]]][Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where 07[{_usn4}..{`4esn`}]|`4esn` Starts With 9e12 Starts With 00)..None(`1esn` In {``} =~{`2esn`} =~$`8esn` Where #usn7 Starts With {@usn6} Starts With {`1esn`})] As _usn4 With Distinct (`2esn` :#usn8:#usn7)-[:`5esn`|`3esn`* ..999]-(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}})<-[* ..12{_usn3:{999}[..{999}]}]->(`2esn` :`1esn`{``:{_usn3}[..$usn2][..$`6esn`]}) =~Reduce(#usn7=12.0 Ends With 0e0 Ends With $123456789,`5esn` In $999[12]|07 Is Null) =~Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {``} Starts With True Starts With True) As `6esn`,`4esn` Is Not Null As _usn4 Order By 999[1000..] Descending Limit {`2esn`}[usn2..][$#usn7..] Where 9e1[12.e12..] Load Csv From {7} Is Null As `4esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Return $#usn7 Starts With $`4esn`,0.0 Is Null As `3esn` Order By {`1esn`} =~{``} =~$`8esn` Desc,$`2esn`[#usn7] Ascending,(`7esn` :``:usn1{#usn7:0[...e1][..$usn2],_usn3:`8esn` =~0})<-[{_usn3:$`3esn` Is Null Is Null}]-(:usn1{`4esn`:{`2esn`}[..{123456789}],@usn6:$#usn7 Starts With {`2esn`} Starts With @usn6}) Contains {#usn7:$`3esn`[12.e12...e1],#usn7:{1000}[..#usn7][..{#usn8}]} Contains Reduce(#usn7=1000 Contains 12.e12,`5esn` In $999[12]|True[..{_usn3}][..999]) Descending Limit Single(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where _usn4 In usn2) In [0Xa[0X7..#usn8][_usn3..9e1],Count(*) In {`4esn`}] In [`5esn` In `5esn` In 123.654 In {`6esn`} Where 9e1 Is Not Null Is Not Null] Optional Match ((`7esn` {`5esn`:$@usn5 Is Not Null})-[?* ..999]-(`8esn` :#usn7:`6esn`{``:1.0 =~`7esn` =~$`7esn`})) Where \"d_str\"[..{`1esn`}][..$`2esn`] Union All Create Unique @usn6=Shortestpath((@usn6 :`8esn`:_usn3)-[?* 00..999]-(:`5esn`{`4esn`:12.0 Ends With 0e0 Ends With $123456789})-[`8esn`:usn2|_usn3* ..999{#usn7:1000[9e12][$`1esn`]}]-(`2esn` :`3esn`:@usn5{`7esn`:0[...e1][..$usn2]})),(({`1esn`:{1000}[0e0][{usn1}]})-[`7esn`?:#usn7|:``* 0x0..7]->(_usn3 :`5esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000})) Delete 0[`6esn`][1e1],Any(usn1 In {usn2} Contains {123456789} Contains 0Xa) Ends With Extract(`7esn` In \"d_str\" Ends With 0e0 Ends With {usn2} Where $0|usn2 Contains {usn1}) Ends With [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where 12 Contains 9e1 Contains $`8esn`|`1esn` In 9e0 In {7}],Extract(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $`4esn`[{@usn5}]) Contains [usn2 In 999[{123456789}..999] Where .e12 Is Null Is Null|$usn1[01234567]] Contains Extract(@usn5 In 1.0 Starts With 12 Where $`4esn`['s_str'..1000][.e12..010]) Union Delete {#usn8}[0.0..$999] Unwind 123456789[`8esn`..][{999}..] As `5esn` Merge `1esn`=Allshortestpaths(((:@usn5:usn2{``:1e1[1.e1..],@usn6:12[0X0123456789ABCDEF..][Count(*)..]})-[?{usn2:.e12[0.0..][$#usn8..]}]-(:#usn8:#usn7{`3esn`:{`7esn`} Contains 's_str' Contains 01,`6esn`:$usn2[`4esn`..]}))) On Create Set Filter(@usn5 In 1.0 Starts With 12 Where _usn4 =~`1esn`).``? =Reduce(`5esn`=010[``..][{_usn3}..],`6esn` In {1000} Is Not Null|{0}[123456789..$`8esn`]) Starts With Reduce(usn2=$`1esn` Contains usn2 Contains 1.0,usn2 In 999[{123456789}..999]|{`6esn`} Is Not Null Is Not Null) Starts With Case When `1esn` =~12.0 Then @usn5 In 00 When $0 =~_usn3 Then $`1esn` Ends With {1000} Ends With $`8esn` Else 0xabc[$`2esn`..] End,_usn4 =$7 =~{`7esn`} =~$`6esn`,[`5esn` In `5esn` In 123.654 In {`6esn`} Where .e0 Starts With {0} Starts With 0x0].#usn8 ='s_str' Is Not Null On Match Set Single(@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 's_str'[..'s_str'][..{#usn7}]).`3esn`? =123456789 Is Null Is Null,@usn5+=12.0 Ends With 0e0 Ends With $123456789"),
    octest_legacy:ct_string("Return *,None(`7esn` In @usn5[01..`6esn`] Where 12e12[$``..]) In `6esn`(123.654 Starts With `8esn` Starts With @usn5) In Single(#usn7 In {`5esn`} Ends With `2esn` Where {`6esn`}[0.e0..$123456789]),[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Order By Allshortestpaths(((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Is Not Null Is Not Null Asc,$usn1[{_usn3}] Descending Skip $``[..`4esn`][..0] With  *,Case $999 =~$999 =~usn2 When {0}[123456789..$`8esn`] Then 01[$_usn3..][123.654..] When True In `8esn` Then $usn1[0X0123456789ABCDEF...e12] End Ends With None(`7esn` In @usn5[01..`6esn`] Where {_usn3}[..$usn2][..$`6esn`]) Ends With {`7esn`:`6esn` Ends With 0x0 Ends With 12} As usn2 Skip 0 =~usn1 Limit [01234567[``..$`1esn`][True..$#usn7]] =~Filter(`` In 0X0123456789ABCDEF =~$@usn6 =~$`8esn` Where {7} Starts With $usn2 Starts With $usn2) Where {``}[2.12] Create Unique usn2=Shortestpath(((`1esn` :`8esn`:_usn3{@usn6:$0 =~_usn3})-[_usn3?:`7esn`* 0x0..7{`7esn`:010 Starts With `3esn` Starts With {usn1},`4esn`:{999}[`2esn`]}]->(`2esn` :`2esn`{#usn7:.e0 Starts With {0} Starts With 0x0,usn2:0xabc Contains False Contains {1000}})-[:@usn6* 0X0123456789ABCDEF{#usn8:$999 In $999}]->(:`2esn`))),(_usn4 :`1esn`)-[#usn7?:@usn5|``{`5esn`:{0}[123456789..$`8esn`]}]->(#usn7 :`4esn`:`3esn`{#usn7:999 Is Not Null Is Not Null,`4esn`:12.e12 =~$`7esn` =~{``}})<-[?:`4esn`|`2esn`{`7esn`:$#usn8 In $0 In {`2esn`},`7esn`:'s_str' Is Not Null}]->({#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`5esn` =~`1esn` =~123.654 As `8esn` "),
    octest_legacy:ct_string("Delete Any(`7esn` In @usn5[01..`6esn`] Where {`2esn`}[@usn6][{_usn3}]) Starts With Single(`1esn` In {``} =~{`2esn`} =~$`8esn` Where 123.654 In {`6esn`} In `6esn`) Starts With Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`})),(`5esn` :usn1{`6esn`:07 Starts With \"d_str\" Starts With $12,`3esn`:0Xa Is Null Is Null})<-[?:`6esn`|:`7esn`* 0]->(:``:usn1{`5esn`:1e1 In $0,@usn5:#usn8[1e1..`1esn`][{1000}..`6esn`]}) Starts With #usn8 Starts With 1000 Foreach(@usn6 In Reduce(`2esn`=$#usn8 In $0 In {`2esn`},@usn5 In 1.0 Starts With 12|`4esn`[usn2..]) Is Not Null Is Not Null| Delete $#usn8[12e12][0X7],$`2esn`[usn2][#usn7],01[123456789..][$_usn4..] Delete Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Shortestpath((:@usn6{`7esn`:{12} Is Null}))..[12 =~{#usn7},$7[..999][..`2esn`],$`4esn`[{@usn5}]]][usn2(Distinct 12e12[$``..])..Filter(`5esn` In $999[12] Where $999 =~$999 =~usn2)],{1000}[9e0][`3esn`]) Create Unique `1esn`=(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})-[_usn3?:#usn8|_usn3{`3esn`:12.0[{`6esn`}..123.654][@usn5..usn1],`8esn`:$`6esn`[`5esn`..][$12..]}]->(#usn7 {usn1:$`4esn` Contains @usn5 Contains {`8esn`},`1esn`:`4esn` Starts With $12 Starts With $12})<-[?:`3esn`|``* 0xabc..01234567{_usn4:@usn6[..{usn2}][..{`5esn`}],#usn7:010[.e12]}]->(@usn6 {`4esn`:$`8esn` Starts With $123456789,`3esn`:{usn2}[{`7esn`}][$usn2]}))) Union Unwind 0 Contains 123.654 As `4esn` Create ``=Shortestpath((@usn5 :_usn4:`1esn`{#usn8:#usn7[999..``]})<-[usn1?:usn2|_usn3* 01234567..0Xa]-({#usn7:\"d_str\"[..{`1esn`}][..$`2esn`],`8esn`:123456789[123.654..{usn1}]})) Create #usn8=Shortestpath((`4esn` {`1esn`:{#usn7}[{`1esn`}..][`1esn`..],`1esn`:{`5esn`} Starts With 123456789 Starts With 07})-[`5esn`]->(:#usn8:#usn7)<-[?{`7esn`:{@usn5} In 0X0123456789ABCDEF In 1000,#usn8:9e12[..#usn7][...e0]}]-({`3esn`:{#usn8} Is Not Null Is Not Null})) Union All Create (((:_usn3:@usn6{@usn6:.e0 In 9e1 In $_usn3,usn1:{usn1} Contains 123.654 Contains {#usn8}})<-[_usn4?]->(#usn7 :`2esn`)-[`2esn`?:_usn3|:`6esn`* 0X7..]-(`` {@usn6:.e0 Contains $@usn6,`1esn`:usn1 Ends With $@usn6 Ends With $1000}))) Remove Extract(@usn5 In 1.0 Starts With 12 Where #usn8 =~$@usn5)._usn4?,Reduce(`3esn`=$12 Is Null,`5esn` In $999[12]|@usn5[_usn3..{12}][{999}..$7]).`4esn`?,Reduce(_usn3=$#usn7 Starts With {`2esn`} Starts With @usn6,@usn6 In 0xabc Ends With 1.0 Ends With $``|1e1[..12e12]).usn1"),
    octest_legacy:ct_string("Foreach(_usn3 In `2esn` =~$0| Optional Match `7esn`=(#usn7 :#usn8:#usn7)<-[?:usn1|:@usn6* 0{_usn3:123456789[123.654..{usn1}]}]->(:`1esn`{@usn5:{`4esn`} Is Null}),_usn4=(`5esn` {`8esn`:@usn5 In 00,`2esn`:$usn1[..$`1esn`]})<-[`5esn`?:#usn7|:``* 0{usn1:0.0[0.12]}]-(:_usn4:`1esn`{`7esn`:$@usn6[..{`6esn`}][...e0]})-[?:@usn6* 123456789..999]->({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]}) Load Csv With Headers From 's_str' Ends With 's_str' Ends With $1000 As @usn5 Fieldterminator \"d_str\") Union Foreach(@usn6 In Single(#usn7 In {`5esn`} Ends With `2esn` Where $123456789[{`1esn`}][0.12]) In [#usn8 In True In `8esn` Where 1e1[{`3esn`}][True]] In [@usn6 In `3esn` Starts With @usn5 Starts With {`4esn`} Where 07 Contains @usn5]| Create Unique ((({@usn6:0.e0 Ends With {@usn5} Ends With 0e0})<-[?:@usn6* 00..999{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}]-({`3esn`:.e12 Is Not Null})<-[`4esn`?* 010]-(usn2 :#usn8:#usn7{`2esn`:0x0[9e0..][$@usn5..],`2esn`:01234567[``..$`1esn`][True..$#usn7]}))),_usn4=(:#usn8:#usn7{@usn5:@usn5 In 00})) Detach Delete $#usn8[12e12][0X7],Shortestpath(((:`4esn`:`3esn`{12})<-[* 07..{`6esn`:{0}[.e12..]}]->({`3esn`:{#usn8} Is Not Null Is Not Null})<-[* 0X0123456789ABCDEF{``:$0 Ends With `2esn`,@usn6:12[True]}]-(usn2 $`3esn`)))[Allshortestpaths((`6esn` :`8esn`:_usn3{#usn7:$0 Starts With `2esn` Starts With {`1esn`},`2esn`:`6esn` Contains `6esn` Contains 9e1})<-[:``{usn2:{`6esn`} Starts With $1000,`4esn`:$#usn7 Starts With $`4esn`}]->(:@usn6{@usn6:$999[..$`2esn`]})<-[{#usn8:$`2esn`[{@usn5}..12.e12][9e0..$`8esn`],`8esn`:12e12[..1.e1][..$12]}]->())..{`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}][(:_usn4:`1esn`{#usn7:999 Starts With {``},usn2:.e12[0.0..][$#usn8..]})-[`8esn`{usn1:$999 Is Not Null Is Not Null}]->(`8esn` )<-[`4esn`?:`8esn`|:_usn3* 123456789..999{_usn3:999 Is Not Null Is Not Null}]-(:`4esn`:`3esn`{#usn7:{`6esn`} Starts With 0xabc,usn1:True[12e12..]})..Extract(usn2 In {@usn5} Where {`4esn`}[..$#usn7]|{`6esn`}[0.e0..$123456789])] Load Csv With Headers From Any(`6esn` In {1000} Is Not Null Where 01 Starts With {0} Starts With $`4esn`)[Allshortestpaths((`7esn` {`5esn`:{@usn6} In $999 In 01234567,`2esn`:{`5esn`} Ends With `2esn`}))..][[`5esn` In `5esn` In 123.654 In {`6esn`} Where {`2esn`}[..{123456789}]|0e0 Is Null]..] As _usn4  Union All Delete usn2[..12.e12][..0.0] Create Unique ((_usn4 :``:usn1))"),
    octest_legacy:ct_string("Start `3esn`=Node:#usn8({_usn4}) Where 12e12[..1.e1][..$12] Union Match ((:``:usn1{@usn5:999[$_usn3][@usn6]})<-[_usn3?{usn2:0.0[0.12],#usn8:9e12 Contains {`4esn`}}]->(:`8esn`:_usn3{_usn3:$@usn5[$7..@usn5],#usn8:0.12[$0..$``]})-[@usn6?* 123456789..999{`3esn`:$`3esn` Ends With `8esn` Ends With {`5esn`}}]-(:`5esn`{``:{`5esn`} Ends With `2esn`})),Shortestpath((({`3esn`:_usn3 In 1.e1})<-[?{usn1:#usn8 Ends With `5esn` Ends With _usn3,``:{7}['s_str'..]}]->({`4esn`:#usn7 Starts With {@usn6} Starts With {`1esn`}})-[_usn4?* 01..]->({`8esn`:$`4esn`[{@usn5}],`4esn`:'s_str'[..'s_str'][..{#usn7}]}))) Where True Starts With 2.12 Starts With {123456789} Merge ``=Allshortestpaths(((@usn6 :`7esn`:_usn4)<-[{@usn5:0.12 In `8esn`}]-(`3esn` :@usn6{`3esn`:{``} Starts With True Starts With True,`8esn`:@usn5 In 00}))) On Match Set ``+={`7esn`:$@usn5[$123456789..][@usn5..]} Contains [@usn6 In 0xabc Ends With 1.0 Ends With $`` Where $999[..$`2esn`]|{`5esn`} Ends With `2esn`] Contains Any(`4esn` In False[0.0..{@usn6}] Where $`8esn`[2.12][$_usn4]),`` =0x0[{`1esn`}],Single(@usn6 In 0xabc Ends With 1.0 Ends With $`` Where {`6esn`} Is Not Null).`6esn` =12.e12[..9e12][..1000] Union All Detach Delete Allshortestpaths(((#usn8 :`8esn`:_usn3{`2esn`:#usn8 Ends With `5esn` Ends With _usn3})-[@usn5?* 00..999]->(_usn3 :@usn6{`4esn`:{`2esn`}[..{123456789}],@usn5:{`4esn`}[0xabc..][010..]}))) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Return Distinct *,None(`7esn` In @usn5[01..`6esn`] Where 12e12[$``..]) In `6esn`(123.654 Starts With `8esn` Starts With @usn5) In Single(#usn7 In {`5esn`} Ends With `2esn` Where {`6esn`}[0.e0..$123456789]),[{@usn5} Contains 0X7 Contains 1e1] Ends With Reduce(`5esn`={`2esn`} Contains 0.12 Contains 0.0,usn1 In {usn2} Contains {123456789} Contains 0Xa|01234567[usn1]) Ends With None(usn2 In {@usn5} Where {`3esn`} Ends With $123456789 Ends With {12}) Order By Allshortestpaths(((:_usn4:`1esn`{`8esn`:$12[{`5esn`}..]})<-[* 0xabc..01234567]->(`7esn` :`6esn`:`4esn`{`2esn`:0.e0[$`1esn`..]}))) Is Not Null Is Not Null Asc,$usn1[{_usn3}] Descending Skip $``[..`4esn`][..0] Start `5esn`=Node:`7esn`(`3esn`={`4esn`}) ,usn2=Node:`1esn`(@usn6={_usn3})Where 1.0 Union Match #usn7=Shortestpath((({`4esn`:01234567[usn1]})<-[`7esn`* 7]->(#usn8 {`3esn`:{``} Starts With True Starts With True,#usn8:00 Starts With 12 Starts With 0e0})-[`8esn`?* 0x0..7{`4esn`:12.0 Ends With 0e0 Ends With $123456789}]-(`6esn` :usn1))) Using Join On `6esn`,usn2,`4esn` Remove Reduce(`1esn`=#usn7[9e1..$@usn5],@usn5 In 1.0 Starts With 12|True Starts With `` Starts With 0.e0).`3esn`,Allshortestpaths(((`6esn` :`4esn`:`3esn`))).`8esn`? Create (({`3esn`:01234567 Starts With 01 Starts With 1.e1,usn2:`8esn`[{#usn7}..][_usn4..]})<-[?* ..999]->(`1esn` {`4esn`:False =~9e0 =~{`5esn`}})),(((#usn8 :_usn3:@usn6{`4esn`:.e0 In 9e1 In $_usn3})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[usn2?* 00..999]->(_usn4 :usn1{usn2:Count(*)[#usn8][$usn1]})))"),
    octest_legacy:ct_string("Detach Delete $7[.e1],{_usn4} Ends With 12.0 Ends With $@usn6 Load Csv From [{`1esn`}[01234567..][@usn5..],9e0[..{usn1}]] =~{`3esn`:7 Is Null Is Null,`7esn`:$`8esn`[#usn7..][0X7..]} As `7esn` Fieldterminator \"d_str\" Create `7esn`=Allshortestpaths(((`` :#usn8:#usn7))),@usn6=Shortestpath(((:@usn6{`1esn`:$999[12],@usn5:07[{_usn4}..{`4esn`}]})<-[?* 07..{#usn8:Null[..010][..$@usn6]}]->(`` {`4esn`:0.0})<-[?* 010]->(usn1 :`4esn`:`3esn`{`7esn`:$`7esn` =~#usn8 =~{`7esn`}}))) Union All Unwind 2.12 Is Not Null As usn2 Create Unique `2esn`=(`` :usn1)-[`5esn`?:#usn8|_usn3{`8esn`:`3esn` Is Null Is Null,@usn6:0x0 =~$`2esn` =~#usn7}]-(`5esn` :`3esn`:@usn5{@usn5:0.0[010..12.e12]})<-[:`6esn`|:`7esn`]->(:`3esn`:@usn5{`6esn`:123.654 In {12} In ``}),Allshortestpaths(((_usn3 {_usn4:2.12 Contains 0.0 Contains $`6esn`})<-[usn2?:@usn6* 0x0..7]-(_usn4 {`7esn`:0xabc =~{`8esn`} =~{_usn3}})))"),
    octest_legacy:ct_string("Start _usn4=Rel:`3esn`(_usn3={_usn4}) ,`6esn`=Relationship:#usn7(usn2=\"d_str\")Where _usn4 =~$#usn7 =~`8esn`"),
    octest_legacy:ct_string("Unwind `1esn` =~12.0 As usn2 Union All Load Csv From $_usn4[0X7..{1000}] As `1esn` Fieldterminator \"d_str\" Union Remove (usn1 {_usn3:@usn5[_usn3..{12}][{999}..$7],@usn6:_usn4 =~`1esn`})-[@usn5* 0x0..7]-({`5esn`:.e12[Count(*)..{`4esn`}][07..$1000],usn1:{#usn7} Contains \"d_str\" Contains {_usn4}})._usn4?"),
    octest_legacy:ct_string("Return *,$#usn7 Is Null Skip 0.e0 Ends With $`8esn` Limit .e12 Is Null Is Null Unwind {#usn7:$123456789 Ends With 0X0123456789ABCDEF Ends With `7esn`,`3esn`:$999 Is Not Null Is Not Null} Is Not Null Is Not Null As _usn4 Return 999 Contains $`` Contains {`1esn`} As `1esn` Order By .e1 Ends With $usn2 Ends With $7 Ascending Limit 123456789 Starts With 9e0 Union All Match #usn7=((`4esn` {@usn5:`3esn`[#usn8],`5esn`:{`6esn`} Starts With 0xabc})<-[`8esn`:`6esn`|:`7esn`{@usn6:$_usn4[0X7..{1000}]}]->(_usn4 :`3esn`:@usn5{``:True =~_usn3,`7esn`:`4esn` Is Null})-[?:``]-(_usn3 {`5esn`:{0}[123456789..$`8esn`]})) Using Join On @usn6,usn2,`5esn`").
