%%%-------------------------------------------------------------------
%%% File        : performance_query_legacy_SUITE.erl
%%% Description : Test Suite for rule: query.
%%%
%%% Created     : 03.10.2016
%%%-------------------------------------------------------------------
-module(performance_query_legacy_SUITE).

-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - SUITE
%%--------------------------------------------------------------------

suite() ->
    [
        {timetrap, {minutes, 10}}
    ].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

%%--------------------------------------------------------------------
%% COMMON TEST CALLBACK FUNCTIONS - ALL
%%--------------------------------------------------------------------

all() ->
    [test_query].

%%--------------------------------------------------------------------
%% TEST CASES
%%--------------------------------------------------------------------

test_query(_Config) ->
    octest_legacy:ct_string("Unwind 9e1 In 2.12 As @usn6 Return Distinct Case #usn7 Starts With {#usn7} Starts With `7esn` When $#usn7 Is Null Then Count(*) Is Null Is Null End =~Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) =~Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {_usn4}[...e1][..$7]),Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..],{123456789} Contains $#usn8 As `3esn` Order By {`4esn`}[$123456789..][$#usn7..] Ascending Skip Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:usn1|@usn6 *00]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})))[..{_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]}] Load Csv From @usn6 Starts With `6esn` Starts With $`1esn` As _usn3  Union Remove {`3esn`:2.12 Contains usn2 Contains True}.`6esn`! Union All With  12[..$`4esn`] As `7esn`,(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Order By ({``:$`8esn` =~{1000}})-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[`4esn`]->(:`6esn`$123456789) Contains Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]) Asc,{@usn6}[..$7][..$`7esn`] Desc,None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where $_usn3[.e0..$usn2]|{#usn7}[9e1..][{123456789}..]) Ends With Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}]) Desc Skip (`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})[Single(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where Count(*) In $12)] Where $_usn3[{#usn7}] Foreach(`7esn` In $`3esn`[..$123456789][..$`1esn`]| Unwind [`` Is Not Null Is Not Null,`1esn` Contains {usn2} Contains $#usn8] Is Not Null As _usn4)"),
    octest_legacy:ct_string("With Distinct $12[True..][{0}..],$@usn5[010..$#usn8][12..$`4esn`] As `6esn` Order By Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`))[(:`5esn`{``:1.0[0e0..0.e0]})-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})] Ascending,0e0 Starts With `2esn` Starts With $`` Descending,usn2[9e12] Desc Skip $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Load Csv From 9e12[0.0..][$12..] As _usn4 Fieldterminator \"d_str\" Union All Optional Match ((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Using Scan _usn3:_usn3 Where Count ( * ) Ends With $@usn5 Return {#usn7}[`2esn`..],Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End,0.0 =~999 As `4esn`"),
    octest_legacy:ct_string("Create Unique `5esn`=Shortestpath((((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})))) With Distinct $`3esn`[0.12..`8esn`][$#usn7..`5esn`],Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6 Limit 7[$`4esn`][0x0] Where 7[$`2esn`..{`5esn`}] Union All Return {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),Shortestpath((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[:#usn8|`1esn`*{`8esn`:0Xa[usn2..]}]-(`3esn` :_usn3:_usn3{@usn5:False})) Ends With {@usn5:$12[Null..Count(*)][{`5esn`}..{999}],#usn7:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4]} Ends With Case {123456789}[0xabc..] When $0[..9e1] Then 0.e0 Ends With $#usn7 Ends With $7 End As _usn3 Skip Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] Start #usn7=Rel:@usn6(`7esn`={`8esn`}) ,``=Node:`2esn`(usn2='s_str')"),
    octest_legacy:ct_string("Load Csv From All(#usn7 In {``} Is Not Null Where .e0 Starts With $`` Starts With $usn2)[..``(`8esn`[`4esn`..{#usn8}][$12..2.12],{0} In _usn4)] As `6esn`  Foreach(`8esn` In 12.e12[``][{`2esn`}]| Unwind 1e1[1.e1..7][{12}...e12] As #usn8 Remove Reduce(`4esn`=12.e12[$_usn3..],`2esn` In `1esn` =~\"d_str\"|0x0[`4esn`..'s_str']).#usn8!,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn2[{7}]|.e1 Ends With 1e1 Ends With @usn5).`8esn`?) Union All Start usn1=Relationship:`8esn`(#usn8={`2esn`}) ,`7esn`=Node:`6esn`({_usn3}) Unwind 12e12 Ends With `5esn` Ends With {@usn6} As `3esn` Remove ({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]})<-[?:_usn3|_usn3{`3esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],#usn8:False Starts With {`5esn`}}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(@usn6 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})._usn3?,Any(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}]).`6esn`! Union Detach Delete 12[..$`4esn`]"),
    octest_legacy:ct_string("Optional Match ((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})),Shortestpath((`7esn` :``:#usn8)<-[#usn8:`6esn`|`5esn`]-(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})) Using Index `2esn`:`1esn`(`4esn`) Using Scan `3esn`:_usn4 Where {`7esn`}[`6esn`][#usn7]"),
    octest_legacy:ct_string("Merge `4esn`=Allshortestpaths((((#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)-[@usn5?:`4esn`]-(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})))) On Match Set _usn3+=2.12 =~False =~`5esn` Union All Return Distinct #usn7 Contains usn2 Contains @usn5 As `1esn` Order By 1.e1 Is Null Is Null Asc,12.e12 Starts With {999} Starts With {`1esn`} Desc,Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) Contains Filter(`` In `` Is Not Null Is Not Null Where 0e0 Starts With 1000 Starts With #usn7) Contains Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]}))) Asc Skip 0e0 Starts With 1000 Starts With #usn7"),
    octest_legacy:ct_string("Create Unique _usn3=((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`2esn`?:`7esn` *0X7..]-(@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})) Remove `8esn`:`5esn`,_usn4:#usn7,(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[`7esn`:#usn8|`1esn` *..0x0$`3esn`]-(:`3esn`:@usn5)-[`7esn` *..0x0]-(`2esn` :_usn4).`2esn`? Optional Match `4esn`=Allshortestpaths((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))) Using Join On @usn5,_usn3,_usn3 Using Join On `2esn` Where $_usn3['s_str'][07] Union All Unwind $`3esn`[0.12..`8esn`][$#usn7..`5esn`] As `6esn`"),
    octest_legacy:ct_string("Optional Match Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})),(({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})) Using Index usn2:@usn6(`5esn`) Using Join On `6esn`,`8esn`,`4esn` Create Unique (((`6esn` :@usn5)-[usn1?:_usn3|_usn3]-(usn2 :#usn7)<-[#usn8:@usn6|`6esn`{`8esn`:True[00][0Xa]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}))),Allshortestpaths((((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)))) Union Load Csv From [.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) As usn1  With  07[$123456789..] Order By {`2esn`} Ends With 12.0 Desc,`6esn`[12..$usn2][{#usn8}..{usn2}] Asc,9e1[..$`2esn`] Ascending Create `3esn`=Allshortestpaths((usn2 :`4esn`)),`2esn`=Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) Union All Return {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}])"),
    octest_legacy:ct_string("Load Csv With Headers From 00 Starts With 0xabc As @usn5 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Case When Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Then {`2esn`} Is Not Null Is Not Null When `3esn`[{usn1}] Then `5esn` Starts With $`2esn` Starts With $1000 End._usn3!,Allshortestpaths((((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})))).``! Foreach(_usn3 In usn2 Ends With 999 Ends With .e1| Match `4esn`=Allshortestpaths((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))),((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})) Create `8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})),`8esn`=Allshortestpaths(((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})))) Detach Delete $1000 =~$`2esn`,00[Count(*)..]"),
    octest_legacy:ct_string("Merge @usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) On Match Set #usn8+={#usn8}[1.e1...e12] Remove {`3esn`:Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},@usn6:$`8esn` Contains 123456789 Contains $usn2}._usn3,`5esn`(Distinct {usn2}[$`3esn`..][{#usn7}..]).@usn6?,_usn4:`5esn`"),
    octest_legacy:ct_string("Create Unique (((`6esn` :@usn5)-[usn1?:_usn3|_usn3]-(usn2 :#usn7)<-[#usn8:@usn6|`6esn`{`8esn`:True[00][0Xa]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}))),Allshortestpaths((((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)))) Optional Match ({`3esn`:usn1 Is Null Is Null})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`4esn` {@usn6:{12}[..0X7]}) Using Join On _usn3,@usn5 Union All Delete `7esn` In {123456789} In `1esn` Union Create Unique ({`3esn`:usn1 Is Null Is Null})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`4esn` {@usn6:{12}[..0X7]}) Return Reduce(`7esn`=$`5esn` In $`` In 123.654,`` In 123456789 Ends With 12.e12 Ends With $`7esn`|{`7esn`} Is Null)[Reduce(_usn3=#usn8 Is Not Null,`` In 123456789 Ends With 12.e12 Ends With $`7esn`|1.0 Starts With 12e12 Starts With {`5esn`})] As `8esn`,$`8esn` Is Not Null Is Not Null As `1esn`,\"d_str\" Starts With $123456789 Order By `` Ends With $1000 Desc,Case {`8esn`} Ends With `6esn` When False Is Null Is Null Then 's_str' In 00 Else 123456789 Ends With $`6esn` Ends With $#usn7 End Starts With Case `1esn` =~0 =~$#usn7 When $#usn8[9e12..][.e1..] Then False =~$7 =~2.12 When {123456789}[9e12][{0}] Then 12.0 =~999 =~$_usn3 End Desc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0Xa[..{`4esn`}][..12.0] As `7esn` Fieldterminator \"d_str\" Detach Delete 1.0 =~7 =~{usn2},{`1esn`}[{123456789}][{0}],{_usn4}[{`5esn`}..{1000}][9e1..{1000}]"),
    octest_legacy:ct_string("Load Csv From Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where _usn4 Contains 2.12|{_usn3}[..\"d_str\"]) Contains Shortestpath((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Contains [$123456789 Ends With $999 Ends With {999},12.0 Contains #usn7] As _usn4  Merge _usn3=Shortestpath(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))) On Create Set `5esn`+=999 In {`3esn`} In usn2 On Match Set _usn4 =[`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null,@usn6+=Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 Contains 0X7 Contains $`8esn`) Is Not Null Is Not Null Union Return {0} As `7esn`,1000[..$0][..True] Limit Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End] Create Allshortestpaths((`3esn` :#usn8:#usn8)),`4esn`=Allshortestpaths(((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}))) With Distinct *,$@usn5 Is Not Null,Count ( * ) Is Null Skip Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where _usn4 Contains 2.12|{_usn3}[..\"d_str\"]) Contains Shortestpath((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Contains [$123456789 Ends With $999 Ends With {999},12.0 Contains #usn7] Limit {1000} Is Null Is Null Where usn2 Is Null"),
    octest_legacy:ct_string("Merge (`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]}) On Create Set `4esn`+=(`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)],Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! ={@usn6}[{999}..][00..] Unwind $12 Starts With {`1esn`} Starts With Null As `6esn` Union All Unwind $#usn7 Contains 0x0 Contains 1000 As `4esn` Remove Extract(`8esn` In 01[2.12..`8esn`] Where {999} Starts With {0}|01 Contains {`8esn`} Contains 2.12).usn2?,Shortestpath((`4esn` :#usn7)-[@usn5?:`4esn`]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]})).`6esn`!,Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn1[9e12..][$7..]).usn2? Create Unique ({`8esn`:`3esn`[{0}][usn1]})-[_usn4?:_usn4|:usn2 *00]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``})<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8}),(#usn8 :@usn6:#usn8) Union Foreach(`3esn` In {7} Is Null Is Null| Load Csv With Headers From $_usn4 Contains Null Contains #usn8 As #usn7 Fieldterminator \"d_str\") Start _usn3=Node:usn1(`6esn`={7}) Where 0X7[1000..{`1esn`}]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From [`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999}] Ends With usn1(Distinct 1000 In {`8esn`} In 01,{_usn3}[..\"d_str\"][..`5esn`]) Ends With Reduce(_usn4=1000[Null..{123456789}],`5esn` In $999[0.0..]|9e1 In $`3esn` In $@usn6) As _usn4 Fieldterminator \"d_str\" Return 12 Ends With 0x0 Ends With 0.e0,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7),0e0[..010] As `` Skip False =~$7 =~2.12"),
    octest_legacy:ct_string("With  All(`` In `` Is Not Null Is Not Null Where $_usn4 Starts With 1e1)[Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}})))][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)] As ``,Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`))[(:`5esn`{``:1.0[0e0..0.e0]})-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})] Order By `1esn`($123456789 Starts With 9e0 Starts With 's_str',{usn2}[.e0..$999])[{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {usn1} In 2.12 In 1000)][Case 0[`7esn`..] When 123456789 Is Null Then .e12 Is Not Null Is Not Null Else $@usn5 =~1000 =~1000 End..[`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|{`3esn`}[`2esn`]]] Desc,(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]}) Is Not Null Is Not Null Descending Limit [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null Start `8esn`=Node:@usn6({_usn4}) Where `3esn`[`3esn`..][#usn8..]"),
    octest_legacy:ct_string("Merge #usn8=Allshortestpaths((#usn8 :@usn5)) On Create Set $`1esn`.``? =[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12)"),
    octest_legacy:ct_string("Remove Shortestpath(({`7esn`:{999}})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})).@usn5 Create Allshortestpaths(((usn2 :@usn5)<-[? *00]->(@usn5 :usn1))) Union All Remove (:usn1{_usn3:{#usn7}[`2esn`..]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(#usn7 ).`2esn`,Case `5esn` Starts With $`2esn` Starts With $1000 When 123.654 =~$usn2 =~{999} Then Count ( * ) Contains `8esn` Contains .e1 End._usn3!,exists($12[$1000..123456789],123456789[0xabc..'s_str'][``..`1esn`]).@usn5 Return {#usn8} Starts With 00 Starts With {`6esn`} As ``,7[{0}..{_usn4}] As #usn8,`4esn`[$999..{`1esn`}][{@usn6}.._usn3] Order By `8esn` Is Not Null Is Not Null Desc Limit {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Create usn2=Shortestpath((usn2 :#usn7)) Union All Detach Delete $7 In $7 In $7,0X7[1000..{`1esn`}],.e1 Is Null Is Null Optional Match _usn3=Allshortestpaths((`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})-[usn1:_usn3|_usn3 *..999{`2esn`:'s_str'[00][{`5esn`}],@usn6:999 Is Not Null Is Not Null}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})) Using Index `3esn`:@usn5(`8esn`) Where 0X7[$999][_usn4] Create ((:usn2{usn2:123.654[$`1esn`],@usn6:123456789[$@usn5..]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`` {usn2:9e0[..999],`2esn`:0e0 In @usn5})<-[]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})),#usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`4esn` Is Null Is Null As @usn6  Unwind Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null As @usn5 Delete 2.12 Ends With $_usn3 Ends With `3esn`,usn1 Ends With $@usn6 Ends With `3esn`"),
    octest_legacy:ct_string("With Distinct Case #usn7 Starts With {#usn7} Starts With `7esn` When $#usn7 Is Null Then Count(*) Is Null Is Null End =~Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) =~Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {_usn4}[...e1][..$7]),Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..],{123456789} Contains $#usn8 As `3esn` Order By {`4esn`}[$123456789..][$#usn7..] Ascending Skip Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:usn1|@usn6 *00]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})))[..{_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]}] Union All Merge (@usn6 :`6esn`)-[`6esn`?:#usn7]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) On Create Set None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]).#usn8? =123.654[`3esn`..] Create `6esn`=Shortestpath((((`2esn` :`8esn`:`7esn`)<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})))) Foreach(`1esn` In Count ( * ) Ends With $@usn5| With Distinct {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),Count ( * ) Is Null As @usn6,123.654[...e0] Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc Limit $@usn5 Starts With #usn7 Where {123456789}[0xabc..]) Union All Unwind $`1esn`[{`2esn`}..] As `7esn` Unwind [#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn2 Is Null|@usn6[$`3esn`..{`3esn`}]] In Filter(_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`) As _usn3 With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..]"),
    octest_legacy:ct_string("Remove `4esn`({12} Ends With 1.0 Ends With .e0).`3esn`!,_usn4:`2esn`:usn1,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null|Null[$`5esn`][False]].`3esn`? Foreach(`2esn` In $@usn5 Starts With {@usn5} Starts With 9e0| Return Distinct 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Skip $`5esn`[2.12..] Limit {_usn4}[`3esn`][12.0] Create Unique ((({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))),Allshortestpaths((@usn6 :_usn3:_usn3)-[?{`3esn`:7[{0}..{_usn4}]}]->(`7esn` :_usn3:_usn3)-[?:usn2|`` *..010{`4esn`:{`4esn`} Starts With $usn2 Starts With $1000,`7esn`:$@usn6 Contains 07}]->(:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})))"),
    octest_legacy:ct_string("Match @usn6=Allshortestpaths((`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),`8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})) Using Index `6esn`:`8esn`(``) Using Join On `5esn`,#usn7 Where 1.0[0e0..0.e0] Create Unique Allshortestpaths((_usn3 :@usn5)-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})),`4esn`=Allshortestpaths(({@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})-[`6esn`?:``]-(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})) Load Csv With Headers From Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As @usn5 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Unique `7esn`=Allshortestpaths(((`1esn` ))) Union All Start @usn5=Rel:#usn8(\"d_str\") ,`2esn`=Rel:#usn8({``})Where 0X0123456789ABCDEF[123456789] Foreach(#usn8 In {123456789}[0.e0..$123456789][0Xa..`6esn`]| Remove Case When `2esn` Is Null Then 1000 =~@usn6 =~0x0 Else \"d_str\"[#usn8] End.`1esn` Start usn2=Node:usn1(`4esn`='s_str') ,_usn3=Node:`7esn`(`3esn`='s_str')) With Distinct [01[2.12..`8esn`],{7} In `2esn`,123456789 Ends With $`6esn` Ends With $#usn7] Starts With Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With `7esn`(Distinct {_usn4} Ends With `6esn`,{@usn6}[7]),$1000 =~$`2esn` As `6esn`"),
    octest_legacy:ct_string("Foreach(`2esn` In 7[..999][..{#usn8}]| Delete {#usn8}[.._usn4][..$`3esn`],$123456789 Ends With `3esn` Ends With 123456789)"),
    octest_legacy:ct_string("Load Csv From $`2esn` Is Null Is Null As `3esn`  Merge #usn8=Allshortestpaths((#usn8 :@usn5)) On Create Set $`1esn`.``? =[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Union All Start _usn3=Relationship:`8esn`({`1esn`}) ,`6esn`=Relationship:`2esn`({0}) With Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7 Limit {_usn3}[12.e12] Where 0e0 Starts With 2.12 Starts With $12 Load Csv From {_usn3}[..\"d_str\"] As `3esn`  Union Create `8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})) Load Csv From 1000 =~@usn6 =~0x0 As #usn7  Remove Reduce(_usn4=12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],#usn7 In {``} Is Not Null|$`8esn`).@usn5,Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]|{7}[$``][{@usn6}]).#usn7"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $@usn5 Starts With $1000 As `2esn`  Foreach(#usn7 In (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12}| Return Distinct 0e0 =~`6esn` =~123456789 As @usn5,Count ( * )[True..][{#usn7}..],2.12 =~{7} As `6esn` Order By {`2esn`}[1e1..1.0][{#usn8}..$`1esn`] Ascending,0X0123456789ABCDEF Is Null Is Null Asc Skip \"d_str\"[#usn8] Match `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),Shortestpath(({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null})) Using Join On `5esn`,#usn7 Using Scan `2esn`:`6esn` Where `7esn`[..2.12][..{usn1}]) Merge usn1=(#usn7 :`8esn`:`7esn`) On Create Set Single(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``).`2esn` =Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}),[@usn6 Ends With {_usn3},12.0 Contains #usn7,$_usn3[..1000]].`2esn`? =0e0 Contains Null,`5esn`+=7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12)"),
    octest_legacy:ct_string("Match ``=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),usn2=Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Using Join On #usn7,_usn4 Where $#usn8 Contains $`1esn` Contains {`6esn`} Return *,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` As `7esn` Limit 9e12[`6esn`..12.0] Union Optional Match Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=(usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4) Where {123456789} Is Null Is Null Union Return *,12[..$`4esn`],Case When 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Then {1000} =~0 =~123.654 When `8esn`[`4esn`..{#usn8}][$12..2.12] Then 00[$`7esn`] End Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`7esn` =~{`8esn`} =~$usn1) Contains [0.12 =~`5esn` =~`5esn`] Order By False[_usn3..`8esn`][$`8esn`..{`3esn`}] Ascending Limit _usn3 Starts With 12.e12 Starts With 0.12 Return Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1),$_usn4[0e0..][False..] As ``,$`6esn` Ends With Count(*) Order By {usn1} Is Not Null Is Not Null Desc,{usn2}[$`3esn`..][{#usn7}..] Ascending Limit {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]) Match Allshortestpaths((((#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)-[@usn5?:`4esn`]-(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})))) Using Scan ``:`2esn` Where 12.e12[$_usn3..]"),
    octest_legacy:ct_string("Create Unique (`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`) Merge @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`) Unwind $`4esn`[`7esn`] As _usn4 Union All Create Unique #usn8=(:`4esn`{``:2.12 Is Not Null Is Not Null}),Allshortestpaths(({_usn3:$`5esn`[`3esn`..]})-[usn1? *0X0123456789ABCDEF]->(:`8esn`:`7esn`)) Union Create Unique ((`3esn` )) Unwind {`5esn`}[0..`8esn`][0..Null] As usn1"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Single(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])[Reduce(`8esn`=$#usn8 Ends With $`2esn` Ends With $@usn6,`2esn` In `1esn` =~\"d_str\"|$`8esn`[1000..0Xa])][[$123456789 =~{`6esn`} =~\"d_str\",01234567 Ends With .e12 Ends With $#usn7]] As `` Fieldterminator 's_str' Load Csv From {#usn7}[True][.e1] As `` Fieldterminator \"d_str\" Return Distinct @usn6 Starts With `6esn` Starts With $`1esn` As `7esn`,usn1 In 7 In {123456789} As `5esn`,`8esn` Ends With 999 Ends With .e12 Order By 0.12[..False][..{1000}] Asc"),
    octest_legacy:ct_string("Merge (`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) On Match Set Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! =$#usn8[..{`2esn`}][..1.0],#usn7+={@usn5:`1esn` =~0 =~$#usn7,usn2:{7} In `2esn`} Ends With ({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}) Ends With Case False[..``] When 0.12 Starts With $`5esn` Starts With 12 Then `4esn` =~$`5esn` When 's_str' In 00 Then $0[..9e1] Else 1e1 In \"d_str\" In `7esn` End Foreach(`2esn` In Shortestpath(((({`4esn`:`7esn` Is Null})<-[`4esn`? *..12{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7}]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3))))[(`4esn` {`6esn`:#usn8[..{#usn7}]})<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[`1esn`:usn2|``]->(`3esn` {@usn5:$usn2[9e0]})]| Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0 Unwind 12.e12 Starts With {999} Starts With {`1esn`} As `4esn`) Union All Foreach(`3esn` In Reduce(usn2=01[{`2esn`}..{@usn6}][$`2esn`..0.0],usn1 In @usn5 =~{`5esn`} =~`5esn`|$#usn8 Ends With $`2esn` Ends With $@usn6) =~[#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] =~(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})| Unwind All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] As @usn6) With Distinct *,`4esn` =~$`5esn` As usn1,{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Order By $`5esn` Starts With `` Descending,2.12 Is Null Asc Skip None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Is Null Is Null Where 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Create Unique `5esn`=(_usn4 :`5esn`)-[ *0..]->(`` :usn2)"),
    octest_legacy:ct_string("Unwind Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] As _usn4 Optional Match ((usn2 :#usn8:#usn8)-[`2esn`?{_usn3:$_usn4[Count ( * )..],#usn7:{`3esn`}[..07][..{`5esn`}]}]-({_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})),Allshortestpaths(((:_usn4{_usn4:{7} In `2esn`})<-[#usn8?:usn1|@usn6]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]}))) Using Scan @usn5:#usn7 Using Index #usn8:`2esn`(`5esn`) Unwind $#usn8 As `6esn`"),
    octest_legacy:ct_string("Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..] Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8? Union All Start usn2=Rel:_usn4(\"d_str\") Where {`6esn`} Union Unwind All(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])[..Allshortestpaths((`5esn` :`4esn`))] As `2esn` Merge ((`3esn` :usn2)) On Match Set _usn3+=$`3esn` Is Not Null Is Not Null,`3esn` ={`4esn`} Ends With {usn2} Ends With {999},{@usn6:{999} Starts With $999,`4esn`:$usn1[{`5esn`}][$`6esn`]}.@usn5? =$usn1[..{`6esn`}] Create Unique `5esn`=Shortestpath((_usn3 :#usn7)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})),((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}}))"),
    octest_legacy:ct_string("Start `5esn`=Rel:`8esn`({usn1}) Where {@usn6}[{999}..][00..] Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Unwind 0X7[1000..{`1esn`}] As `4esn` Union Start usn2=Relationship( {`5esn`})  Foreach(`8esn` In 0X0123456789ABCDEF[123456789]| Delete 07[..True][..9e12]) Match (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}) Using Index `6esn`:`8esn`(``) Using Scan `2esn`:`7esn` Where 0.e0 Contains 9e1 Contains {`7esn`}"),
    octest_legacy:ct_string("Delete Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null,7[..123456789][..{@usn6}] Start `4esn`=Relationship:`3esn`({`1esn`})  Foreach(#usn8 In 12.e12 Is Null Is Null| Optional Match ((usn2 :#usn8:#usn8)-[`2esn`?{_usn3:$_usn4[Count ( * )..],#usn7:{`3esn`}[..07][..{`5esn`}]}]-({_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})),Allshortestpaths(((:_usn4{_usn4:{7} In `2esn`})<-[#usn8?:usn1|@usn6]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]}))) Using Scan @usn5:#usn7 Using Index #usn8:`2esn`(`5esn`)) Union All Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Foreach(`` In $`8esn`| Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7) Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5) Match `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))),Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Index @usn5:`2esn`(@usn5) Using Scan `7esn`:usn1 Where Null[$#usn7]"),
    octest_legacy:ct_string("Foreach(`7esn` In 12.0 In {`2esn`}| Unwind $123456789[_usn3][{#usn7}] As `3esn` Optional Match (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null}),(({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Union Start `6esn`=Node:`8esn`(\"d_str\") ,`4esn`=Relationship:``(@usn6={usn1}) Union All Optional Match (:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})-[?:`5esn`]->(:usn2),`2esn`=Shortestpath((({usn2:7[..999][..{#usn8}]}))) Using Join On @usn6,@usn6"),
    octest_legacy:ct_string("Return Distinct (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null,$#usn8[Count ( * )] As `4esn` Order By Case When Count(*) In $12 Then .e0 Starts With 0 Starts With 0.e0 When {usn1}[0X0123456789ABCDEF] Then $`6esn`[123456789..12][True..{`3esn`}] Else 7 Starts With {@usn6} Starts With $`` End[Case @usn6 Contains $1000 Contains {`7esn`} When 0.12 =~$0 =~$0 Then $usn1[.._usn4][..False] When {0} Ends With $_usn3 Ends With $`7esn` Then 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] End..] Desc,False Ascending Skip `2esn`[{`4esn`}][$_usn3] Limit Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null Load Csv With Headers From Case When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else $1000 Is Null Is Null End Starts With `7esn`(Distinct $#usn7[..{`5esn`}][..9e12]) Starts With {`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`} As _usn3 Fieldterminator \"d_str\" Return Distinct .e0 Ends With 0.12,{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] As `8esn`,{`6esn`} =~$999 As usn1 Skip {`4esn`}[#usn7..$123456789][{7}..usn2] Limit Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Starts With {#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0} Union Remove Case When 1.0 Starts With 12e12 Starts With {`5esn`} Then {0} End.usn1!,Case When 1.0 Contains $_usn4 Then {999} Contains .e0 Contains 12.0 Else `5esn`[_usn4..] End.#usn8! Start _usn4=Node:`3esn`(`2esn`={usn1}) ,`6esn`=Node:``('s_str') Unwind 999 In {`3esn`} In usn2 As `6esn` Union Return *,$`7esn`['s_str'] As #usn8,Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As `` Limit {@usn5} =~Count ( * ) =~12.0"),
    octest_legacy:ct_string("Foreach(`2esn` In `5esn`(Distinct {_usn4} Ends With `6esn`,$`4esn` In Null In 0xabc) Ends With Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Ends With All(`3esn` In {7} Is Null Where Count ( * ) Contains 07)| Delete {`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])) With  {usn2}[$`3esn`..][{#usn7}..] As `1esn`,[$0] In [`2esn` In `1esn` =~\"d_str\" Where {0} Ends With $_usn3 Ends With $`7esn`|{999} Contains .e0 Contains 12.0] In None(`2esn` In `1esn` =~\"d_str\" Where {`7esn`}[..$@usn5][..$#usn8]) As usn1,0X7[123.654..@usn6] As _usn3 Limit usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..] Where $#usn7 Is Null Merge _usn4=Shortestpath(((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789}))) On Match Set `2esn` =$``[1.0],`8esn` =010[..12e12][..12e12],`5esn` =Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End] On Match Set `` =[Count(*) Ends With 12.0 Ends With 12,9e0[{0}..{`3esn`}][\"d_str\"..0Xa]][..Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``])][..{usn1:$_usn3[..1000],`7esn`:{1000} =~0 =~123.654}],`5esn`+=Count ( * )[0.12...e1] Union All Load Csv From `5esn`[_usn4..] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create Unique #usn8=Allshortestpaths(((:`1esn`{@usn6:$usn1 Ends With $`` Ends With $12})-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}))) Merge `6esn`=({usn1:$`3esn` In $_usn4 In {_usn3}})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})-[``?]-(#usn8 :@usn6:#usn8{`2esn`:$7 Is Not Null Is Not Null,`1esn`:`1esn` =~\"d_str\"}) Remove Shortestpath(((_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})-[`6esn`?:`3esn`|:#usn8{usn1:$usn1 In {999} In $#usn7}]-({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``}))).@usn6?,[{usn2}[.e0..$999],123456789[{123456789}..'s_str'],{`4esn`} Starts With $usn2 Starts With $1000].`5esn` Union Remove None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`3esn`} Is Not Null Is Not Null).`` Load Csv From {999}[1000..{usn2}] As @usn6  Union Create _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),({`4esn`:`7esn` Is Null})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789)) Is Null As _usn3 Fieldterminator \"d_str\" Start usn2=Rel:#usn8({``})  Foreach(`3esn` In usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..]| Unwind [_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} As #usn7 Remove Reduce(#usn8=01 =~{_usn3} =~`3esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{12} Is Null Is Null).@usn6,Extract(`4esn` In $`3esn` Is Not Null Where 12[1.e1..{_usn3}][1.e1..1.0]).`1esn`!,@usn5(#usn8,{`3esn`} In 0X7).`7esn`?)"),
    octest_legacy:ct_string("Start `7esn`=Node:`7esn`(`3esn`={``}) "),
    octest_legacy:ct_string("Foreach(usn1 In 0Xa[2.12]| Unwind `3esn`[$`1esn`..999][``..$123456789] As usn1) Return #usn7 As `8esn`,0.12[..False][..{1000}] Order By Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..] Desc,[{@usn6} Ends With 's_str' Ends With 12.0,{12} Contains {123456789} Contains `4esn`] Starts With Filter(_usn3 In {`3esn`}[`2esn`] Where {1000} =~0 =~123.654) Starts With Case When Count ( * )[0.12...e1] Then $@usn5 =~1000 =~1000 When Null Ends With `2esn` Ends With $usn1 Then $usn2[{@usn5}] End Ascending,{12}[{7}][$123456789] Asc Skip `7esn` Ends With 0x0 Start `7esn`=Node:`6esn`({_usn3}) Where 123456789 Ends With 12.e12 Ends With $`7esn` Union All Create Unique @usn5=Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=Allshortestpaths(((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`8esn`?:@usn6|`6esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))) Unwind Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})] As `3esn` Delete (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null Union Foreach(@usn5 In None(`5esn` In $999[0.0..] Where {``}[010..][0xabc..])[{`3esn`:False Is Null Is Null,`8esn`:2.12}]| Return *,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By $12[Null..Count(*)][{`5esn`}..{999}] Desc,12.e12[7..$`6esn`] Desc Skip {`4esn`} Ends With {123456789} Ends With $`4esn` Return Distinct {``}[`8esn`..],{`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Limit `8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))))"),
    octest_legacy:ct_string("With Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Where _usn3 Contains $123456789 Contains `` Merge Shortestpath((((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1)))) On Create Set `1esn`+=0.0 =~999,Case When `8esn` Ends With 999 Ends With .e12 Then 12.e12[7..$`6esn`] When 1000 In {`8esn`} In 01 Then `2esn` Starts With $_usn4 Else 0Xa Starts With {`6esn`} Starts With $usn1 End.`3esn`! =Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where `3esn`[{0}][usn1]) Starts With Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))),@usn5 =`3esn` Is Null On Create Set `` =$#usn7 Contains 0x0 Contains 1000,#usn7+={``} Is Not Null,Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``).`6esn`! ={0} Contains 0.0 Contains $@usn5 Foreach(`7esn` In Single(#usn8 In {`5esn`}[.e1..``] Where 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4])[All(`5esn` In \"d_str\" Is Null Is Null Where {`6esn`}[..$@usn6][..`7esn`])..][Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`])..]| Load Csv From .e1 =~$usn2 =~999 As @usn5 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Unwind 's_str' =~$`7esn` As `4esn` Unwind [_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|`` Is Not Null Is Not Null] Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where {_usn3}[..\"d_str\"][..`5esn`]) Ends With Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8) As _usn3 Union All Load Csv From All(#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']) Starts With 123456789 As usn2  Load Csv From {usn1} In 2.12 In 1000 As _usn4  Foreach(#usn8 In False[$usn1.._usn4][_usn4..{`3esn`}]| Create `3esn`=({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null})-[usn1? *0X0123456789ABCDEF]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}),Allshortestpaths((((@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:_usn3|_usn3 *01234567..0Xa{@usn5:123.654[True..$#usn8][0.12..Count(*)]}]-(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})))))"),
    octest_legacy:ct_string("Create @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) Create Unique Allshortestpaths((`1esn` :#usn7)),(({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}})) Create `8esn`=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Union Create `1esn`=Allshortestpaths((((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[? *0Xa]-({`7esn`:{999}})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From usn2 Ends With 999 Ends With .e1 As `2esn` Fieldterminator 's_str' Merge Shortestpath((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}))"),
    octest_legacy:ct_string("Load Csv With Headers From 0Xa[2.12] As `1esn` Fieldterminator 's_str' Union With Distinct 1e1 In 123.654 In `3esn` As `8esn` Skip Reduce(`6esn`=0X7[$999][_usn4],`8esn` In 01[2.12..`8esn`]|{1000} =~0 =~123.654) Is Null Is Null Where `3esn`[{usn1}]"),
    octest_legacy:ct_string("Return Distinct (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As @usn5,`8esn`[$`8esn`..{`4esn`}],None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `5esn` Starts With 010 Starts With 0.0) Ends With Reduce(usn2=False =~1e1 =~0.e0,`` In `` Is Not Null Is Not Null|#usn8[`3esn`..][{#usn7}..]) Order By @usn6 Is Null Is Null Descending,{_usn3} Is Null Is Null Desc,Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1) Descending"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0e0[$1000][{usn1}] As usn2  Create _usn3=Allshortestpaths((((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))),``=(:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}) Match Allshortestpaths((:@usn5$`5esn`)<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[ *1000..00{#usn7:Count ( * ) Contains 07}]->(usn1 :`3esn`:@usn5)),(`3esn` {@usn5:$usn2[9e0]})<-[usn1?:`7esn` *0xabc..{`3esn`:$#usn8[$`8esn`..{`8esn`}]}]->(:`4esn`{`8esn`:0.e0 In $#usn7 In $_usn3})-[`4esn`?:@usn5{`7esn`:{_usn4}[1000..{@usn5}],`5esn`:$@usn5 Is Not Null}]->({`8esn`:`3esn`[{0}][usn1]}) Where 12.e12[0xabc]"),
    octest_legacy:ct_string("With Distinct $@usn5,{`5esn`} Starts With @usn5 Starts With `7esn`,$1000 =~$`2esn` As `6esn` Skip 9e12[{123456789}..#usn8][{_usn3}..{#usn7}] Limit 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] Where `1esn` Contains {usn2} Contains $#usn8 Union Foreach(@usn5 In $`5esn` In $`6esn`| Start `8esn`=Rel:`7esn`(_usn4={12}) Where 0.12 Starts With $`5esn` Starts With 12 Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..])"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}] As `5esn`  Foreach(@usn5 In 1.0 Starts With 12e12 Starts With {`5esn`}| Optional Match `3esn`=((`1esn` {#usn7:{_usn4} In {12} In $0})-[{#usn8:$#usn8 =~{@usn5},`8esn`:0X0123456789ABCDEF[{_usn4}..00]}]-(_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) Using Scan `3esn`:`8esn` Using Scan `6esn`:`2esn` Where {0}[01][`7esn`] Start #usn7=Node:@usn5(usn2='s_str') Where 9e1[2.12..{#usn8}])"),
    octest_legacy:ct_string("Create (`3esn` :#usn8:#usn8) Return #usn8 In $@usn6,1.e1[`8esn`][00] Optional Match `7esn`=Allshortestpaths(((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[`1esn`?:usn2|``{_usn4:$`4esn`[..$`3esn`][..0.0],@usn6:0e0 Starts With 2.12 Starts With $12}]->(:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`8esn` *0X0123456789ABCDEF]->(usn2 :_usn4))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3)) Using Scan `4esn`:`2esn` Where $usn1[{`5esn`}][$`6esn`] Union With Distinct *,Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))[[{_usn4} In {12} In $0,$`5esn`[2.12..],12[1.e1..{_usn3}][1.e1..1.0]]][[12e12 Is Not Null Is Not Null]] Order By $_usn3 In {1000} In 0.12 Desc Remove Case True[{`7esn`}..] When .e1 Is Null Is Null Then `3esn`[..$12][..{`7esn`}] When {_usn3}[..$12][..0.12] Then $7[0.12][usn1] End.`5esn`,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $123456789 Is Null Is Null|{`6esn`}[..$@usn6][..`7esn`]]._usn4,Single(`3esn` In {7} Is Null Where {`3esn`} In 01).`5esn` Union Remove Reduce(_usn4=01234567[usn2..$12][{`7esn`}..$usn2],@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$@usn5 =~1000 =~1000).`8esn`?,[$1000 Is Null,$`1esn`[{`2esn`}..],.e1[{`7esn`}..{_usn4}]].@usn5,Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 123.654[$`1esn`])._usn3 Return *,$`4esn` Is Not Null Is Not Null As `6esn`,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`])[Any(`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`})..][Extract(`2esn` In `1esn` =~\"d_str\" Where $_usn4[1.e1]['s_str']|usn1[`5esn`..$7])..] Skip Reduce(`8esn`={@usn5}[{#usn8}][9e0],`3esn` In {7} Is Null|0e0 Starts With 1000 Starts With #usn7)[Single(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null)] Limit $usn2[$@usn6][True]"),
    octest_legacy:ct_string("Delete $`7esn` Is Not Null,`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) Load Csv With Headers From 9e0 As `1esn`  Load Csv From [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null As usn2 Fieldterminator 's_str' Union All Create Allshortestpaths((:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1)) Foreach(@usn5 In 2.12 Is Null| Load Csv With Headers From `5esn`[.e0..][07..] As `6esn` Fieldterminator \"d_str\" Match _usn4=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})) Detach Delete 010[..12e12][..12e12],Allshortestpaths((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) Contains Filter(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]) Contains Shortestpath(({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})),Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] Union All Start usn1=Node:#usn8(\"d_str\") "),
    octest_legacy:ct_string("Merge Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01})))) On Create Set `3esn`+=Count(*) In $12,#usn7+=Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..],``+=7[$`8esn`..123456789][$usn1..$usn1] On Match Set [$usn1 =~``].`5esn`! =0e0 Starts With `2esn` Starts With $``,usn1 =0.e0[123.654][01],Case {#usn7}[`2esn`..] When $0 Ends With 12.0 Then $`` Is Not Null End.`6esn`! =Extract(`` In `` Is Not Null Is Not Null Where {``}[...e12]|12 Ends With 0x0 Ends With 0.e0) Is Null Is Null Union Create (`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}),@usn5=(({`2esn`:Count(*)[..usn2][..usn2]})-[`7esn`:#usn8|`1esn` *..0x0$`3esn`]-(:`3esn`:@usn5)-[usn1? *0X0123456789ABCDEF]->(`6esn` {_usn4:0Xa =~Null =~$``})) Return Distinct Reduce(usn2={`6esn`} Contains \"d_str\",`8esn` In 01[2.12..`8esn`]|7[..999][..{#usn8}]) Starts With All(#usn8 In 7[..999][..{#usn8}] Where $#usn7 Contains 0x0 Contains 1000) Skip 7 =~{`8esn`} =~$`6esn` Foreach(`8esn` In [$`1esn` =~0X7] =~[{7}[..1.0][..9e0],7 Is Not Null Is Not Null] =~{_usn3:`1esn` Contains {usn2} Contains $#usn8}| Return Distinct .e0 Ends With 0.12,{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] As `8esn`,{`6esn`} =~$999 As usn1 Skip {`4esn`}[#usn7..$123456789][{7}..usn2] Limit Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Starts With {#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0} Remove 2.12.`7esn`!,{`1esn`:$0[..9e1]}.usn2!,Reduce(usn2=#usn7 Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{_usn3}[12.e12]).@usn6?)"),
    octest_legacy:ct_string("Foreach(#usn8 In 9e1[1000][{123456789}]| Load Csv With Headers From Case `7esn`[9e0..] When 1.0 =~'s_str' =~{`2esn`} Then 0xabc[01..{999}][{7}..{`7esn`}] When 0X7[$999][_usn4] Then 010 In Count(*) Else usn2[{7}] End =~Reduce(@usn6=usn2[9e12],#usn8 In 7[..999][..{#usn8}]|{999} Is Null Is Null) =~(:`1esn`{_usn4:$@usn6 Ends With $_usn4 Ends With 0.12})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})-[`7esn` *..0x0]-(`2esn` :_usn4) As `1esn` ) Load Csv From `3esn` In $0 In `1esn` As `8esn` Fieldterminator \"d_str\" Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))) Union Unwind {7}[$7..$``][{``}..{7}] As `3esn` Start usn1=Node:``(@usn6={usn1}) ,usn1=Relationship:`3esn`(`6esn`='s_str')"),
    octest_legacy:ct_string("Load Csv With Headers From `8esn`[$`8esn`..{`4esn`}] As @usn6 Fieldterminator 's_str' Create @usn6=((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Start `6esn`=Rel:#usn8(@usn6={_usn4}) ,`4esn`=Relationship:`6esn`(#usn8={_usn3})"),
    octest_legacy:ct_string("Unwind $#usn7[..{`5esn`}][..9e12] As #usn7 Merge Shortestpath((:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})) On Create Set None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]).#usn8? =123.654[`3esn`..] Start `2esn`=Node:@usn5({`1esn`}) ,`1esn`=Rel:``({`1esn`}) Union With Distinct {#usn7} In 0x0 In $0 As ``,`4esn`[`5esn`..12][@usn6..False],$@usn5 As @usn5 Where {`1esn`}[12.0..`2esn`][@usn6..{usn1}]"),
    octest_legacy:ct_string("Unwind (:_usn4{@usn6})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})[[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn` Contains 123456789 Contains $usn2|123456789 Ends With 01234567 Ends With 1.e1]..{usn2:1.0 =~7 =~{usn2},`8esn`:$_usn3[.e0..$usn2]}][None(_usn3 In {`3esn`}[`2esn`] Where 7 Ends With $`4esn`)..Case {`2esn`} Starts With 123456789 When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) End] As usn1 Union Return Distinct [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] Ends With None(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) As `5esn`,07[$123456789..],Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As `` Limit {`7esn`}[..{`4esn`}] Return 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By Case 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] When 12e12[$`3esn`] Then {`5esn`} Contains $0 Contains {``} Else usn1 Starts With usn1 Starts With $`` End[usn2(Distinct 0.12 In _usn3 In {0},@usn6 Is Null Is Null).._usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)][[{7}[$``][{@usn6}],0.0 Ends With 010 Ends With 1.e1]..$`4esn`] Asc,01[{@usn5}] Asc Union Create Unique ((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`)) Return Distinct 010[Count(*)..12][$_usn3..{`8esn`}],Filter(_usn3 In {`3esn`}[`2esn`] Where False =~$7 =~2.12)[Case When .e12 Is Not Null Is Not Null Then `1esn` In .e0 In {`3esn`} When 7 Starts With {@usn6} Starts With $`` Then 0X0123456789ABCDEF =~1e1 =~{`4esn`} Else {`4esn`}[$123456789..][$#usn7..] End] As `5esn`,9e1[2.12] As _usn3 Foreach(`8esn` In $_usn3[.e0..$usn2]| Match Shortestpath((`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})),``=Allshortestpaths((`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})) Using Scan _usn3:`1esn` Where 12.0[123.654][Count(*)] Unwind .e1 =~$usn2 =~999 As `7esn`)"),
    octest_legacy:ct_string("Merge (`` :@usn5{`1esn`:2.12 Contains usn2 Contains True}) Match ({`5esn`:\"d_str\" Starts With 01})-[_usn3:@usn5 *7..12{`2esn`:12.0 =~999 =~$_usn3}]->(`3esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]}) Using Scan @usn5:_usn4"),
    octest_legacy:ct_string("Delete False[$usn1.._usn4][_usn4..{`3esn`}],{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],$`1esn` Ends With 9e1 Ends With $123456789"),
    octest_legacy:ct_string("Optional Match Shortestpath((`2esn` :#usn7{`5esn`:\"d_str\" Starts With $123456789}))"),
    octest_legacy:ct_string("Load Csv From {usn1} In 2.12 In 1000 As _usn4  Merge Shortestpath((((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1)))) On Create Set `1esn`+=0.0 =~999,Case When `8esn` Ends With 999 Ends With .e12 Then 12.e12[7..$`6esn`] When 1000 In {`8esn`} In 01 Then `2esn` Starts With $_usn4 Else 0Xa Starts With {`6esn`} Starts With $usn1 End.`3esn`! =Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where `3esn`[{0}][usn1]) Starts With Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))),@usn5 =`3esn` Is Null On Create Set `` =$#usn7 Contains 0x0 Contains 1000,#usn7+={``} Is Not Null,Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``).`6esn`! ={0} Contains 0.0 Contains $@usn5 Union Remove Single(_usn3 In {`3esn`}[`2esn`] Where `3esn`[`3esn`..][#usn8..]).`1esn`?,[0.e0 Ends With $#usn7 Ends With $7].`6esn`!,(`2esn` :`8esn`:`7esn`)<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]}).`1esn` Foreach(`6esn` In [#usn8 In {`5esn`}[.e1..``] Where {`1esn`}[12.0..`2esn`][@usn6..{usn1}]] Is Not Null| With Distinct True[..$`6esn`],{@usn6} Ends With 's_str' Ends With 12.0 As `1esn` Order By Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`3esn` =~{#usn8}|12.0 Ends With True)[..usn2(Distinct)] Ascending Skip Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End[None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)..[`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1]] Load Csv With Headers From `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) As `6esn` Fieldterminator 's_str')"),
    octest_legacy:ct_string("Remove (:usn1{usn1:{`6esn`}})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(@usn6 :`1esn`)<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]}).`7esn`!,Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,#usn8:`4esn` Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Union All Detach Delete 's_str' =~{_usn4} =~$`7esn`,(:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0}) In [`4esn`[..Count ( * )][..{#usn7}]],$`5esn` Starts With `` Union Match `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))),Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Index @usn5:`2esn`(@usn5) Using Scan `7esn`:usn1 Where Null[$#usn7] Start `7esn`=Rel:`6esn`(\"d_str\") "),
    octest_legacy:ct_string("Foreach(@usn5 In {`3esn`} In 01| Load Csv With Headers From {0}[\"d_str\"..07][0..'s_str'] As @usn5 Fieldterminator \"d_str\" Remove Case When $#usn8[$`8esn`..{`8esn`}] Then $#usn8[$`8esn`..{`8esn`}] Else #usn8 Is Not Null Is Not Null End.@usn6!) Return Distinct *,9e1[2.12],$_usn4 Contains Null Contains #usn8 As #usn7 Order By (usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})<-[ *123456789..]-(:@usn5) Is Null Is Null Desc,False[..{`1esn`}] Desc Skip 1e1[$`5esn`][{`3esn`}] Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]]"),
    octest_legacy:ct_string("Load Csv With Headers From Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] As `5esn` Fieldterminator \"d_str\" Union Foreach(_usn3 In 1e1 In 123.654 In `3esn`| Remove Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null|{123456789}[9e12][{0}]).``!,Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}).@usn5) Detach Delete {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12),$_usn4 Is Null Is Null"),
    octest_legacy:ct_string("Start usn2=Node:_usn4(``={#usn7}) ,`8esn`=Node:@usn6({_usn4})Where 12.0 =~1.0 =~9e12 Start #usn7=Node:`6esn`(`3esn`=\"d_str\")  Union Start `5esn`=Node:@usn5({usn1}) ,``=Node:usn2(#usn8=\"d_str\") Delete {`4esn`:`7esn` Is Null}[{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]}..],0.0[$0][{@usn5}],{`4esn`}[$usn2..07] Union All With  123.654 Is Not Null,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}} Where $@usn5 Starts With $1000 Create Unique `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Merge ((`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})) On Match Set `2esn`+=Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null} Union Match #usn8=((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})),usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null})) Using Scan `4esn`:`2esn` Using Join On `1esn` Where {1000} =~0 =~123.654 Union All Create Unique `5esn`=(((_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 {@usn5:$`8esn` =~{1000}})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]}))),usn2=Shortestpath((usn2 :#usn7)) Create Unique @usn6=((usn2 :@usn5)-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Merge `3esn`=Allshortestpaths((((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5)))) On Match Set _usn4:usn1,@usn5 =0.e0[#usn8],`4esn` =`7esn`[$12..][$`8esn`..]"),
    octest_legacy:ct_string("Merge usn1=Shortestpath(((`7esn` {`4esn`:{usn1} Ends With $0})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null}))) On Create Set (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(:usn2{usn2:7[..999][..{#usn8}]}).`3esn` ={_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} Return {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),Shortestpath((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[:#usn8|`1esn`*{`8esn`:0Xa[usn2..]}]-(`3esn` :_usn3:_usn3{@usn5:False})) Ends With {@usn5:$12[Null..Count(*)][{`5esn`}..{999}],#usn7:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4]} Ends With Case {123456789}[0xabc..] When $0[..9e1] Then 0.e0 Ends With $#usn7 Ends With $7 End As _usn3 Skip Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] Union All Start `2esn`=Node:``({`1esn`}) "),
    octest_legacy:ct_string("Load Csv From {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])][..(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})] As `8esn` Fieldterminator \"d_str\" Union All Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:_usn4(_usn4) Where {#usn7}[9e1..][{123456789}..] Union All Merge @usn6=Shortestpath((#usn7 {`5esn`:00 Starts With 0xabc,`6esn`:0Xa =~Null =~$``})) On Create Set `4esn`+=(`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)],Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! ={@usn6}[{999}..][00..] Create Unique #usn8=Shortestpath((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"}))"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),({`4esn`:`7esn` Is Null}) Union Remove Allshortestpaths((:@usn5{_usn3:07 =~01}))._usn4 Foreach(`` In .e0[..0X0123456789ABCDEF][...e12]| Return *,12.0 Ends With True Skip {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] Return Distinct *,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` As `7esn` Limit 9e12[`6esn`..12.0]) Union Load Csv With Headers From $`6esn`[010..] As `7esn` Fieldterminator \"d_str\" With  12 Ends With $usn2 As #usn8,$`3esn` In Null As @usn6 Create Unique Shortestpath(((({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[`8esn`*..{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]}]-(#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1}))))"),
    octest_legacy:ct_string("Foreach(`2esn` In Null Is Not Null Is Not Null| With  {``} Is Not Null As #usn7,{#usn7}[`2esn`..],Count ( * ) Contains {`1esn`} Contains 07 Order By `8esn` Is Not Null Is Not Null Desc Limit $123456789[_usn3][{#usn7}] Where Count ( * ) Ends With 12.0) Create usn2=Shortestpath((({_usn3:.e12[@usn5..$12]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null}))),`5esn`=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Union Create `7esn`=Allshortestpaths(((`1esn` :#usn7))),((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})) Remove {`4esn`:01 Is Null}.#usn7?,(:`3esn`:@usn5{``:12.e12[$_usn3..],_usn3:$`6esn`[010..]})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07}).`3esn`,Single(`8esn` In 01[2.12..`8esn`] Where {usn2}).`7esn` Start _usn3=Node:@usn6({#usn7}) Where `5esn` Starts With 010 Starts With 0.0 Union All Create Unique Allshortestpaths((`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})),(:@usn6:#usn8{`7esn`:0x0[`4esn`..'s_str']}) Remove usn1(Distinct {`3esn`} In 01,0X7 =~9e1).`3esn`?,Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}).`1esn`!,Filter(`5esn` In $999[0.0..] Where $`3esn`[..$123456789][..$`1esn`]).@usn6 Start usn1=Node:`7esn`(`3esn`={``}) "),
    octest_legacy:ct_string("Delete True[{_usn4}..][False..],$#usn7[@usn5..{1000}][1.e1..7],#usn7 Contains usn2 Contains @usn5 Unwind [_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} As #usn7 Union Return Distinct [$`5esn`[..$`5esn`][..$12],9e12[`6esn`..12.0],Null[$`5esn`][False]] Is Null Is Null As #usn8 Skip Case #usn7 Starts With {#usn7} Starts With `7esn` When $#usn7 Is Null Then Count(*) Is Null Is Null End =~Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) =~Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {_usn4}[...e1][..$7]) Limit exists({#usn7}[`2esn`..],$`3esn`[..$123456789][..$`1esn`])[All(`5esn` In \"d_str\" Is Null Is Null Where #usn8)..] Create _usn4=Allshortestpaths(({`7esn`:{999}})) Create `6esn`=((`2esn` :_usn4)) Union All Remove [_usn3[_usn3..][12.e12..]].`8esn`!,All(`8esn` In 01[2.12..`8esn`])._usn4! Create usn2=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})))"),
    octest_legacy:ct_string("Create Unique ((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})),Allshortestpaths(((`2esn` :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0}))) Merge ((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})) On Match Set `3esn` =Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End On Match Set Case When $_usn3[Count(*)] Then 010[#usn7..True] End.`6esn` =(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])],All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where $_usn4 Ends With usn1 Ends With $0).@usn5? =Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End"),
    octest_legacy:ct_string("With Distinct $`3esn`[0.12..`8esn`][$#usn7..`5esn`],Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6 Limit 7[$`4esn`][0x0] Where 7[$`2esn`..{`5esn`}] With  0.e0 In $#usn7 In $_usn3,(usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8)[Reduce(usn2=`2esn` Starts With $_usn4,#usn7 In {``} Is Not Null|{7} Is Null)..][Single(#usn7 In {``} Is Not Null Where $1000[0Xa][{#usn7}])..] As `2esn` Order By $usn1 Ends With $`` Ends With $12 Desc,1e1[1000..] Ascending,{123456789}[0.e0..$123456789][0Xa..`6esn`] Descending Limit {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Where `4esn` Ends With 07 Ends With {`3esn`}"),
    octest_legacy:ct_string("Load Csv With Headers From 0X7[1000..{`1esn`}] As usn1  Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF] Start `7esn`=Node:`7esn`(_usn4={@usn6})  Union All Delete 12.e12[9e12..{`6esn`}] Union Unwind 0.0[$0][{@usn5}] As `5esn`"),
    octest_legacy:ct_string("Optional Match `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) Using Join On `8esn`,@usn5 Using Index _usn3:`4esn`(`2esn`) Where 0 In `2esn` In 010 Union Foreach(`8esn` In (`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)]| Remove [usn1 Ends With $@usn6 Ends With `3esn`,0xabc[.e0],{``}[010..][0xabc..]].``?) With Distinct 9e0 Starts With 01 As `2esn`,`` Ends With 123456789 Ends With 123.654 As usn2,Count ( * ) Contains 07 Skip {`4esn`} =~{7} =~{`7esn`} Where 0X7[0e0..`7esn`][1000..0e0] Unwind $`3esn` Is Not Null Is Not Null As _usn3 Union All Unwind @usn5 In $7 As `` With  Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End] As `2esn` Order By Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) Asc,Shortestpath(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))[#usn7(Distinct $`5esn`[`3esn`..])..{``:0Xa Starts With {`6esn`} Starts With $usn1}] Ascending,All(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0[{usn2}..][$`6esn`..]) Is Not Null Asc Where {usn2}[.e0..$999] Start #usn7=Node( {`8esn`}) "),
    octest_legacy:ct_string("Start _usn4=Rel:#usn8({_usn3}) ,`8esn`=Rel:`1esn`(@usn5='s_str') Create Unique ((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))[#usn7(Distinct $`5esn`[`3esn`..])..{``:0Xa Starts With {`6esn`} Starts With $usn1}] As #usn8 "),
    octest_legacy:ct_string("Foreach(`3esn` In {123456789} Contains $#usn8| Create `7esn`=Shortestpath((((:`7esn`:_usn3{@usn5:07 Contains 0X7 Contains $`8esn`,`6esn`:{1000}[{_usn3}..]})<-[`3esn`? *..01]->(@usn5 :`5esn`)-[`8esn`?:usn1|@usn6{`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}}]-(@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})))) Match `2esn`=(({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->({`1esn`:{1000}[{_usn3}..],`1esn`:{123456789}[9e12][{0}]})),``=Shortestpath(((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[?{`1esn`:$0[..9e1]}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]}))) Using Index `7esn`:usn2(`6esn`) Using Scan _usn3:_usn3 Where @usn6 Ends With {_usn3})"),
    octest_legacy:ct_string("Return Distinct [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..]) As `1esn`,Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})))[Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where usn1 Ends With $@usn6 Ends With `3esn`)..],{#usn7}[True][.e1] Order By $_usn4[Count ( * )..] Descending,$123456789 In 0X0123456789ABCDEF In 0.e0 Asc Skip 0x0[`4esn`..'s_str'] Foreach(_usn4 In _usn3 In 0xabc| Unwind 123.654[$`1esn`] As `2esn` Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8?) Delete 12.e12 Starts With {999} Starts With {`1esn`} Union All Remove Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `5esn` Starts With 010 Starts With 0.0).`3esn`?,(`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]}).`2esn`?,(:`1esn`)<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`3esn`?:`3esn`|:#usn8]->(`8esn` :_usn4)._usn4! Union All Return Distinct [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..]) As `1esn`,0.0[Null][$`2esn`],`6esn` Is Not Null Is Not Null As `3esn` Skip (usn2 :_usn4)-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})[$`2esn`] Merge (:`1esn`{})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789) On Create Set usn2 =All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null) Is Null On Match Set @usn6 ='s_str' Starts With 123.654"),
    octest_legacy:ct_string("Foreach(_usn4 In Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})]| Create Unique @usn5=Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=Allshortestpaths(((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`8esn`?:@usn6|`6esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))))"),
    octest_legacy:ct_string("Load Csv With Headers From {`5esn`}[{usn2}..1000][$`8esn`..{`3esn`}] As #usn8 Fieldterminator \"d_str\" Union Merge Allshortestpaths((#usn8 :@usn5)) On Create Set `1esn` =12.e12[``][{`2esn`}],`8esn`+=00[{`8esn`}..][{`8esn`}..],#usn7+={_usn4} Ends With `6esn`"),
    octest_legacy:ct_string("Create `6esn`=((`2esn` :_usn4)),(((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}))) Union All Load Csv With Headers From `8esn`[$`8esn`..{`4esn`}] As _usn4 Fieldterminator 's_str' Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8? Union Return $`5esn` Starts With $0 Starts With {0},0e0 Starts With 1000 Starts With #usn7 As _usn3,$@usn5 Is Not Null Order By [0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]] Desc,``[12.0..0e0][{`5esn`}..`7esn`] Ascending Match ((:usn1{usn1:{`6esn`}})),`2esn`=(:`4esn`{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[#usn8:@usn5 *..01]-(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null}) Using Join On `8esn`,@usn6 Using Index `6esn`:_usn4(``) Where usn2 Is Not Null Is Not Null Create Unique _usn3=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})),usn2=({@usn5:usn1 Is Not Null})<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})"),
    octest_legacy:ct_string("Create #usn8=(`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12}),(:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Union Match usn2=Allshortestpaths(((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]}))) Using Join On ``,#usn7,`` Using Scan `5esn`:usn2 Optional Match (`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`5esn`=Allshortestpaths(((:`1esn`{``:.e1 Is Null Is Null})<-[usn1?:`7esn` *0xabc..{`3esn`:$#usn8[$`8esn`..{`8esn`}]}]->(:`4esn`{`8esn`:0.e0 In $#usn7 In $_usn3}))) Where {`5esn`} Contains $0 Contains {``} Remove [9e1[1000][{123456789}],$usn2[{@usn5}],0Xa Starts With {`6esn`} Starts With $usn1].`3esn`?,[`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]].#usn7?"),
    octest_legacy:ct_string("With Distinct $_usn3 In {1000} In 0.12,$_usn3[..1000] Order By `7esn`[$12..][$`8esn`..] Descending,9e1[2.12] Ascending,$`1esn` Starts With {`8esn`} Descending Limit @usn6 Contains Null Contains $`7esn` Remove 0Xa.`6esn`?,[`1esn` =~0 =~$#usn7,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,0.12 In _usn3 In {0}].`4esn`? Union With Distinct Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End] As `2esn` Skip {12}[..0X7] Limit 1e1 Contains Count ( * ) Where {`3esn`}[`2esn`]"),
    octest_legacy:ct_string("Delete [`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\"] Is Null Union Create `5esn`=((`` :`2esn`:usn1)<-[usn2?:``]-(usn2 :``:#usn8)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Delete $#usn8[..{`2esn`}][..1.0],`4esn`[1.0]"),
    octest_legacy:ct_string("Merge `3esn`=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))) Create `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})) Union All Foreach(@usn6 In #usn7 =~Count ( * ) =~``| With  `5esn`[.e0..][07..] As `7esn` Order By {usn2}[$`3esn`..][{#usn7}..] Ascending,{@usn6} In {123456789} In 0xabc Asc Skip {999} Limit Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)[None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Starts With $1000)..{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}][Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8)..None(#usn8 In {`5esn`}[.e1..``] Where $`3esn` Is Not Null)] Where usn2 Is Null Optional Match ((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})),`7esn`=(@usn6 :_usn3:_usn3)-[?{`3esn`:7[{0}..{_usn4}]}]->(`7esn` :_usn3:_usn3)-[?:usn2|`` *..010{`4esn`:{`4esn`} Starts With $usn2 Starts With $1000,`7esn`:$@usn6 Contains 07}]->(:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}) Where {123456789}[9e12][{0}]) Remove [$1000 Is Null,$`1esn`[{`2esn`}..],.e1[{`7esn`}..{_usn4}]].@usn5 Delete 1000 In {`8esn`} In 01,1.0 Contains $_usn4 Union All Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Foreach(usn1 In (:_usn4{@usn6})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})[[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn` Contains 123456789 Contains $usn2|123456789 Ends With 01234567 Ends With 1.e1]..{usn2:1.0 =~7 =~{usn2},`8esn`:$_usn3[.e0..$usn2]}][None(_usn3 In {`3esn`}[`2esn`] Where 7 Ends With $`4esn`)..Case {`2esn`} Starts With 123456789 When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) End]| Optional Match Shortestpath(((({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)))),@usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)) Using Index `7esn`:usn2(`6esn`)) Start `1esn`=Node:usn2({12}) ,usn1=Node:`7esn`(`3esn`={``})Where {usn2}"),
    octest_legacy:ct_string("Foreach(@usn6 In Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null| Unwind {1000}[$`4esn`][\"d_str\"] As `3esn`) Unwind [$`5esn`[..$`5esn`][..$12],01[2.12..`8esn`],_usn3 Contains $123456789 Contains ``] As `1esn` Union Start #usn7=Node:``(\"d_str\") ,_usn3=Relationship:`3esn`('s_str')Where $@usn5 =~1000 =~1000 Union All Return Distinct 12 Ends With 0x0 Ends With 0.e0,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7),0e0[..010] As `` Limit $@usn5[010..$#usn8][12..$`4esn`] Match @usn6=Allshortestpaths((`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),`8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})) Using Index `6esn`:`8esn`(``) Using Join On `5esn`,#usn7 Where 1.0[0e0..0.e0] Merge _usn3=({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})-[@usn5?:`4esn`]-(:usn1{usn1:{`6esn`}})<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`}) On Match Set `4esn`+=$_usn4 Starts With 1e1,_usn3 =(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}) =~Shortestpath(((`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[usn2?]-(`7esn` :`5esn`)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8})))"),
    octest_legacy:ct_string("Delete 0xabc[.e0],(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}] Create Unique Allshortestpaths((_usn3 :@usn5)-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})),`4esn`=Allshortestpaths(({@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})-[`6esn`?:``]-(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}))"),
    octest_legacy:ct_string("With  Allshortestpaths(((`8esn` ))) Ends With (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}),$_usn3['s_str'][07] As @usn5 Skip $_usn4[0e0..][False..] Return 12 Ends With $usn2 As #usn8,$`3esn` In Null As @usn6 Unwind ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)[Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))))..][{usn2:{7}[..1.0][..9e0]}..] As `8esn` Union Start #usn7=Node:`5esn`(\"d_str\")  With Distinct None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,01 Is Null As `2esn`,{1000} =~$_usn4 Detach Delete Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})]"),
    octest_legacy:ct_string("Remove {usn1:$usn1[{`5esn`}][$`6esn`]}.usn2?,Reduce(`1esn`=True =~010,`8esn` In 01[2.12..`8esn`]|{_usn3}[..\"d_str\"][..`5esn`]).#usn8?,Case 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] When $`1esn` =~0X7 Then $`2esn`[2.12..'s_str'][{@usn6}.._usn4] When $1000[`2esn`..`5esn`][1e1..1.e1] Then {`3esn`}[`2esn`] Else 0[..usn2][..{@usn5}] End.@usn5! Unwind {`3esn`}[..$`3esn`][..12.e12] As _usn3 Foreach(usn1 In 0.0[`7esn`..][12.e12..]| Create Allshortestpaths((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`4esn`:False,_usn4:$`7esn` Is Null Is Null}[..Reduce(`4esn`={`4esn`} Ends With {123456789} Ends With $`4esn`,`2esn` In `1esn` =~\"d_str\"|7[..123456789][..{@usn6}])][..None(`5esn` In \"d_str\" Is Null Is Null Where {``} Ends With `7esn` Ends With 0.0)] As `8esn` Fieldterminator 's_str' Match `7esn`=Allshortestpaths((({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}}))) Using Scan _usn4:@usn6 Start `7esn`=Rel:`6esn`(\"d_str\") ,#usn7=Node:@usn6(`7esn`={`8esn`})Where {#usn7} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Load Csv From {#usn7}[True][.e1] As `` Fieldterminator \"d_str\" Remove (:usn2{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})-[`2esn`:`7esn`]-(`2esn` :usn1).`8esn`!,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]|0 In `2esn` In 010).`1esn`!,{#usn8:$123456789 Is Null Is Null,`8esn`:Count ( * )[0.12...e1]}._usn4 With Distinct False Is Null Is Null,Count(*) Is Null Is Null As usn2,0Xa[9e1..][$`6esn`..] As @usn6 Order By 123.654 Is Not Null Is Not Null Descending,{123456789} Starts With 0.0 Starts With `5esn` Desc,Case 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] When 12e12[$`3esn`] Then {`5esn`} Contains $0 Contains {``} Else usn1 Starts With usn1 Starts With $`` End[usn2(Distinct 0.12 In _usn3 In {0},@usn6 Is Null Is Null).._usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)][[{7}[$``][{@usn6}],0.0 Ends With 010 Ends With 1.e1]..$`4esn`] Asc Skip 0.0[Null][$`2esn`]"),
    octest_legacy:ct_string("Foreach(`6esn` In `7esn`[..2.12][..{usn1}]| Start `2esn`=Node:@usn6({_usn4}) ,_usn3=Relationship:`8esn`({`1esn`}) Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null) With Distinct .e0 Ends With 0.12 As _usn3 Order By .e1 =~{@usn6} =~Null Asc,usn2(Distinct Null In $7 In .e1,`1esn` Contains {usn2} Contains $#usn8) In All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8) Asc,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] Ascending Skip _usn3[..`8esn`][..2.12] Limit Reduce(`1esn`={`8esn`} Ends With `6esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|1e1 In 123.654 In `3esn`)[[#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]]] Foreach(`4esn` In {usn1} Is Not Null Is Not Null| With Distinct $`8esn`[1000..0Xa],({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) As ``,usn1 Starts With $usn1 As `1esn` Order By Null[``] Descending,1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Limit {`4esn`} Starts With 1e1 Where 0Xa[usn2..]) Union Unwind Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End] As usn1 Return (_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})[[{@usn6}[{999}..][00..],@usn5 =~{`5esn`} =~`5esn`,`7esn` Is Null]][Reduce(`7esn`=0X0123456789ABCDEF Is Null Is Null,`5esn` In $999[0.0..]|$1000[Null][`4esn`])] As @usn6,9e0 Is Not Null Is Not Null Skip {7}[$`5esn`][{_usn3}] Limit Shortestpath(((`1esn` )))[Case 7[$`2esn`..{`5esn`}] When 0e0[..010] Then {123456789} Is Null Is Null Else `6esn`[..$@usn6] End..][Shortestpath(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]})))..] Remove Reduce(``=2.12 Contains usn2 Contains True,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|`4esn`[..Count ( * )][..{#usn7}]).@usn6?,[Null Ends With `2esn` Ends With $usn1,0X0123456789ABCDEF[123456789],0Xa[$123456789..123.654][.e12..0.e0]].`3esn`! Union All Remove {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null}.`4esn`?,usn1:#usn7,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|$_usn3[..1000]).``"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Join On `8esn`,`2esn` Where 0e0 In @usn5 Merge `6esn`=Allshortestpaths(((_usn3 :`3esn`:@usn5))) On Create Set Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]).`4esn`? =(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End,`8esn` =All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]],_usn4 =$#usn8 In 0Xa In `6esn` On Match Set `2esn`+=#usn7 Contains _usn3 Contains {`3esn`},Reduce(`8esn`={usn1} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0xabc[.e0]).`3esn`! =$@usn5 Starts With 01 Starts With .e0 Union Foreach(`5esn` In 0.12 Contains 0X0123456789ABCDEF Contains .e0| Return None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Limit #usn7[010..False]) Load Csv From usn2 Is Not Null As @usn6 Fieldterminator \"d_str\" Load Csv From Shortestpath(((:`8esn`:`7esn`$#usn7)-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) In [_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..]|1.0 Is Null Is Null] In Case When Count ( * ) Contains 07 Then 123.654[$`1esn`] End As `3esn` Fieldterminator \"d_str\" Union All Start `3esn`=Relationship:_usn3(`8esn`={123456789}) ,#usn7=Node:@usn5('s_str') Unwind $`4esn` Starts With $`5esn` Starts With False As #usn8 Remove Extract(`5esn` In \"d_str\" Is Null Is Null Where 12.e12 Starts With {999} Starts With {`1esn`}).`5esn`,{_usn3:$@usn5 Starts With 01 Starts With .e0,@usn6:123456789[$@usn5..]}.usn2?,[#usn8 In 7[..999][..{#usn8}] Where `5esn`[{`4esn`}..`2esn`]|1.0[0X0123456789ABCDEF]].`7esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Remove Case {#usn7}[`2esn`..] When {1000}[$999...e12][`7esn`..'s_str'] Then 0x0 Ends With $12 When $`5esn`[{`3esn`}] Then $#usn7 Contains 0x0 Contains 1000 Else {@usn6}[7] End.`2esn`!,Reduce(@usn6=1000 In {`8esn`} In 01,#usn7 In `2esn`[..$#usn8][..Count(*)]|$`4esn`[Null..]).usn2,Case {123456789} =~`8esn` =~@usn5 When $#usn8[9e12..][.e1..] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] When 0x0[{`7esn`}..][$usn2..] Then @usn5 Is Null Else 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] End.`2esn` Start @usn6=Rel:@usn6(usn1={999}) Where 0e0 Ends With 1.e1 Ends With $`4esn`"),
    octest_legacy:ct_string("Merge Shortestpath(((:_usn4{usn2:0X7 =~9e1})<-[? *..0x0]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}}))) On Match Set Reduce(`8esn`=Count ( * ) Contains 07,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|\"d_str\"[#usn8])._usn3! =[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12),Reduce(@usn6={`8esn`} Ends With `6esn`,`4esn` In $`3esn` Is Not Null|False =~$7 =~2.12).`8esn` =$`4esn`[`7esn`] On Create Set #usn8 =Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End],#usn7+=`4esn`[..Count ( * )][..{#usn7}],@usn5 =@usn6 In 1000 In $``"),
    octest_legacy:ct_string("Foreach(`5esn` In $`8esn`[..00]| Load Csv From .e0 =~`6esn` =~{12} As usn1 Fieldterminator \"d_str\" Start `3esn`=Relationship:#usn7('s_str') ,#usn7=Rel:_usn3({@usn5})) Foreach(`5esn` In \"d_str\" Contains {123456789} Contains 01| Match #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}),Allshortestpaths((_usn4 :usn1)<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) With Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Where _usn3 Contains $123456789 Contains ``) Union Create Unique Shortestpath(((({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[#usn8?:usn1|@usn6]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})-[#usn7?:_usn4|:usn2 *00]-(`7esn` :`4esn`)))) Load Csv From Case 1.0 In Count(*) When $_usn4[Count ( * )..] Then Null[``] When $1000[`2esn`..`5esn`][1e1..1.e1] Then .e12[@usn5..#usn7][010..{usn1}] Else 1.0[$`1esn`..][$123456789..] End As `6esn`  Union Create `6esn`=(usn2 {``:01[{@usn5}]})<-[{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`2esn`:usn1{`8esn`:9e12[`6esn`..12.0],``:01[{@usn5}]})<-[`8esn`:`2esn` *..07]->({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]}),Allshortestpaths((((`4esn` )<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`8esn`?]->(`1esn` :#usn8:#usn8))))"),
    octest_legacy:ct_string("Unwind {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] As ``"),
    octest_legacy:ct_string("Unwind $usn1[.._usn4][..False] As @usn6 Return Distinct *,2.12 Ends With $_usn3 Ends With `3esn` As `7esn`,0 In `2esn` In 010 Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc Skip [{`3esn`} Is Not Null Is Not Null] Limit Single(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`) Contains Case When {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Then 's_str'[00][{`5esn`}] Else $#usn7 Is Null End Contains None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) Detach Delete `6esn`[2.12..01][{``}..False]"),
    octest_legacy:ct_string("Delete `5esn`(Distinct $0,$_usn4 Contains Null Contains #usn8) In Case 12.0[123.654][Count(*)] When $_usn3[Count(*)] Then 0e0 =~`6esn` =~123456789 End In {`8esn`:False Is Null Is Null},`6esn`[2.12..01][{``}..False],[_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} Merge (`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})"),
    octest_legacy:ct_string("Create `2esn`=Shortestpath(((usn2 :`6esn`{#usn7:Count ( * ) Contains 07})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),Allshortestpaths(((`8esn` )-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})<-[ *..12]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) Union Optional Match Shortestpath((({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6})<-[`4esn`?:usn2|`` *0X7..]->({_usn3:$`5esn`[`3esn`..]})-[@usn5?:`4esn`]-(:usn1{usn1:{`6esn`}}))) Create Unique @usn5=((`5esn` {`8esn`:1000[Null..{123456789}]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})),`4esn`=Allshortestpaths(((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})))"),
    octest_legacy:ct_string("Return *,Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))[[{_usn4} In {12} In $0,$`5esn`[2.12..],12[1.e1..{_usn3}][1.e1..1.0]]][[12e12 Is Not Null Is Not Null]] Order By $_usn3 In {1000} In 0.12 Desc Merge ((@usn5 :`4esn`)) On Match Set `3esn`+=.e1[..$@usn6][..`2esn`] On Create Set Shortestpath((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})).`1esn` =[$0] In [`2esn` In `1esn` =~\"d_str\" Where {0} Ends With $_usn3 Ends With $`7esn`|{999} Contains .e0 Contains 12.0] In None(`2esn` In `1esn` =~\"d_str\" Where {`7esn`}[..$@usn5][..$#usn8]) Foreach(`` In {`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])| Load Csv With Headers From 123.654[0e0..$``][$`1esn`..$`8esn`] As _usn4 ) Union Create Unique (`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]}) Match #usn8=Shortestpath((#usn8 :@usn5)) With  True[..$`6esn`],(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})[[{@usn6}[{999}..][00..],@usn5 =~{`5esn`} =~`5esn`,`7esn` Is Null]][Reduce(`7esn`=0X0123456789ABCDEF Is Null Is Null,`5esn` In $999[0.0..]|$1000[Null][`4esn`])] As @usn5 Skip Count ( * ) Is Null Limit 07 =~01 Where 0X0123456789ABCDEF[123456789]"),
    octest_legacy:ct_string("Optional Match (`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),_usn4=({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Where {usn1}[0X0123456789ABCDEF] Start usn1=Node:`3esn`(`2esn`={usn1}) ,@usn5=Relationship:`6esn`(`8esn`='s_str') Union Unwind 's_str' In $usn1 In False As `6esn` Union All Merge _usn3=((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})) On Create Set `2esn` =$``[1.0],`8esn` =010[..12e12][..12e12],`5esn` =Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End] Remove ({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[ *123456789..]-(:@usn5).`1esn`!"),
    octest_legacy:ct_string("Foreach(@usn5 In `5esn` Starts With 010 Starts With 0.0| Create Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))),Shortestpath((({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]}))) Create ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))))) Delete 0.0 Is Not Null Is Not Null,None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],Reduce(#usn7=$1000 Is Null,#usn7 In {``} Is Not Null|$`1esn` Ends With 9e1 Ends With $123456789) In Case When `5esn` Is Null Then True[..$`6esn`] Else `3esn`[`3esn`..][#usn8..] End Create Unique `8esn`=((:@usn6:#usn8)<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]})) Union Return Distinct $`5esn`[$`4esn`..{@usn6}][07..$@usn6] As usn2 Order By [usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Ascending,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7) Descending Skip Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null Match Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:usn1(@usn5) Using Index `3esn`:`5esn`(#usn7) Where $`5esn`[2.12..] Unwind $_usn4 In usn1 In $7 As usn1 Union All Foreach(usn2 In $12[True..][{0}..]| Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null Load Csv With Headers From {1000}[$`4esn`][\"d_str\"] As _usn3 ) Create Unique (:``:#usn8{_usn3:$`7esn` Is Null Is Null}),`5esn`=Shortestpath((((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})))) Remove [`2esn` In `1esn` =~\"d_str\" Where usn2[9e12]|usn2 Ends With 999 Ends With .e1].`5esn`,(`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})-[ *7..12{`2esn`:.e12 Ends With _usn4}]->(:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})._usn4?,Extract(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`|1e1 In 123.654 In `3esn`).`6esn`!"),
    octest_legacy:ct_string("Return *,Reduce(`2esn`=12[1.e1..{_usn3}][1.e1..1.0],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{#usn8}[010]) Is Not Null Is Not Null Skip Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] Limit {`5esn`} =~`4esn` =~{_usn4} Foreach(`7esn` In {#usn8} Is Not Null| Start `1esn`=Rel:_usn4(``={#usn7}) ,`3esn`=Relationship:#usn7('s_str')Where 's_str'[00][{`5esn`}]) Detach Delete Shortestpath((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0}))[Single(`5esn` In $999[0.0..] Where usn2 Ends With 999 Ends With .e1)..],{0}[{`8esn`}..`4esn`],Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null Union All Foreach(`2esn` In 9e1[True]| Create Unique @usn6=((usn2 :@usn5)-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Load Csv With Headers From 0e0[07] As _usn4 Fieldterminator 's_str') Unwind 0x0[{`7esn`}..][$usn2..] As `7esn` Union Remove Case When 1.0 Starts With 12e12 Starts With {`5esn`} Then {0} End.usn1!,Case When 1.0 Contains $_usn4 Then {999} Contains .e0 Contains 12.0 Else `5esn`[_usn4..] End.#usn8! Start _usn4=Node:`3esn`(`2esn`={usn1}) ,`6esn`=Node:``('s_str') Unwind 999 In {`3esn`} In usn2 As `6esn`"),
    octest_legacy:ct_string("Merge `5esn`=(_usn4 :`5esn`)-[ *0..]->(`` :usn2) With Distinct *,1e1 Contains 0e0 Skip @usn6 Contains Null Contains $`7esn` Limit $0 Where 0Xa Starts With {`6esn`} Starts With $usn1 Foreach(`2esn` In 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3]| Create (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})) Union Optional Match (({`7esn`:\"d_str\" Starts With $123456789})-[`6esn`? *0..]-(`5esn` :`2esn`:usn1)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(_usn3 {@usn5:`5esn`[{`4esn`}..`2esn`],_usn3:07 =~01}) Using Scan `6esn`:`2esn` Using Index _usn4:`5esn`(`6esn`) With  *,#usn7(usn2 Is Not Null Is Not Null,$`6esn` Ends With Count(*)) Is Null Is Null As `6esn`,#usn8 In $@usn6 Skip 0e0 Contains Null Where $1000[Null][`4esn`] Union Remove Reduce(@usn5={@usn6}[{999}..][00..],`2esn` In `1esn` =~\"d_str\"|1.0 =~7 =~{usn2}).`8esn`? Return *,1e1 Contains 0e0 Order By `6esn`({usn1} Ends With $0) Is Not Null Desc,$#usn7 Is Not Null Desc Limit None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Load Csv With Headers From Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..]) As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] As `2esn` Fieldterminator \"d_str\" With  *,$``[1.0] As `6esn`,12.0[123.654][Count(*)] Where 0.12[$`3esn`..$_usn3][12.0..usn1] Union All Detach Delete 7[{0}..{_usn4}] Remove ({@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(#usn7 :usn1).#usn7!,All(`` In `` Is Not Null Is Not Null Where `1esn` =~0 =~$#usn7).#usn7! Match _usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))),(:``:#usn8{_usn3:$`7esn` Is Null Is Null}) Using Scan `4esn`:#usn7 Using Scan `5esn`:usn2"),
    octest_legacy:ct_string("Start _usn4=Node:`6esn`(\"d_str\") Where {_usn3}[..$12][..0.12] Start `7esn`=Relationship:`3esn`(`6esn`='s_str') Where 0Xa =~123456789 =~_usn4 Union All Return Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]) =~({``:$`8esn` =~{1000}})<-[#usn8? *0..]->(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}) =~Shortestpath((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) As #usn8,Reduce(`8esn`={@usn5}[{#usn8}][9e0],`3esn` In {7} Is Null|0e0 Starts With 1000 Starts With #usn7)[Single(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null)] Order By 's_str' In 00 Desc,{1000}[{_usn3}..] Descending,$usn1[...e0][..$_usn3] Asc Union All Create `1esn`=Shortestpath((((`2esn` :`8esn`:`7esn`)<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``}))))"),
    octest_legacy:ct_string("Create Unique (:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null}) Optional Match @usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)),(({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})) Using Scan `1esn`:`1esn` Using Index `8esn`:`1esn`(@usn5) Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:_usn4(_usn4) Where {#usn7}[9e1..][{123456789}..]"),
    octest_legacy:ct_string("Foreach(`4esn` In 1000[0X7..2.12]| Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4?) Foreach(`3esn` In 0.0[Null][$`2esn`]| Remove (:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:_usn3|_usn3{`3esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],#usn8:False Starts With {`5esn`}}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)._usn3,[@usn6[$`3esn`..{`3esn`}]].#usn7!,Reduce(@usn5='s_str' Ends With 7 Ends With {_usn4},`8esn` In 01[2.12..`8esn`]|{999}).#usn8!) Optional Match _usn3=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))),(({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})) Using Scan _usn4:usn1 Where 12e12 Ends With {usn1} Union All Merge Allshortestpaths((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) On Match Set Filter(`4esn` In $`3esn` Is Not Null Where `7esn`[..2.12][..{usn1}]).@usn6? =123456789 Ends With $`6esn` Ends With $#usn7,`1esn`+=(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])],#usn7 =$123456789 In $#usn7 In `4esn` Union All Load Csv From {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] As #usn8  Create Unique Allshortestpaths(({_usn3:{_usn4} Is Not Null Is Not Null})),(({_usn3:{_usn4} Is Not Null Is Not Null})) With Distinct 123.654 Is Not Null As `1esn`,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) As `4esn` Order By 0.0 =~999 Asc,1e1 In \"d_str\" In `7esn` Descending"),
    octest_legacy:ct_string("Remove (:_usn4{@usn6})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})<-[#usn7?:`8esn` *0Xa]-({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]}).#usn8,Reduce(`2esn`={123456789}[9e12][{0}],@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|False[..``]).`6esn`?,Case 2.12 =~Count(*) When $`4esn`[`7esn`] Then usn1 Ends With $@usn6 Ends With `3esn` End.#usn8!"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(_usn4 {`5esn`:\"d_str\" Starts With 01})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2)),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Union Detach Delete $`` Ends With 0.0 Ends With {1000},$`1esn` =~0X7,All(`3esn` In {7} Is Null)[{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]}..] Match Shortestpath((`3esn` :`8esn`:`7esn`)-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[`3esn`? *123456789..]-(`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})),Shortestpath((`5esn` :`4esn`)) Using Index _usn4:usn1(`1esn`) Using Index `1esn`:_usn3(_usn4) Where True[00][0Xa] Load Csv From [`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]|`8esn` Contains $usn1 Contains $12][Filter(_usn3 In {`3esn`}[`2esn`] Where #usn7 Contains _usn3 Contains {`3esn`})..(:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[usn2?:`7esn` *123456789..{_usn4:$@usn5 Starts With {0} Starts With 12,`2esn`:{7}[..12e12][..Count ( * )]}]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})] As `6esn` Fieldterminator \"d_str\" Union Merge Shortestpath(((`2esn` :#usn7{`5esn`:\"d_str\" Starts With $123456789})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`)<-[`6esn`?:_usn4|:usn2 *1000..00{`6esn`:@usn5 In {`7esn`} In `2esn`,@usn5:0.0 =~999}]->($#usn8))) On Create Set @usn6+=None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End],`3esn` ={`7esn`}[0e0][1.e1],usn1+=Reduce(`8esn`=$@usn5[..12e12][..$123456789],@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|@usn5 In {`7esn`} In `2esn`) Is Not Null Is Not Null On Match Set Case usn1 In 7 In {123456789} When _usn3[_usn3..][12.e12..] Then 0x0 Ends With $12 Else `7esn`[..2.12][..00] End.`7esn`? =Reduce(`8esn`=0[..usn2][..{@usn5}],#usn8 In {`5esn`}[.e1..``]|Count ( * )[True..][{#usn7}..])[2.12..][{999}..],`` ={`3esn`} Is Null Is Null,(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})._usn4? =Reduce(`1esn`={0} Ends With $_usn3 Ends With $`7esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|010 In Count(*))[9e12..(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})][0X7..Case $_usn4 Starts With 1e1 When {12} Ends With 1.0 Ends With .e0 Then {`2esn`} Is Not Null Else \"d_str\"[..{@usn5}][..``] End] Detach Delete (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12},{`4esn`} Starts With $usn2 Starts With $1000"),
    octest_legacy:ct_string("Create Unique ((:@usn6:#usn8)<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]})),@usn6=Shortestpath((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})) Merge Allshortestpaths(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) On Match Set None(`2esn` In `1esn` =~\"d_str\" Where $`1esn`[1.0..][_usn3..]).`1esn`? =.e12 Contains 0X7 Contains {0} On Create Set Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {@usn6}[7]|`8esn` =~0xabc =~010).#usn8! =Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)[None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Starts With $1000)..{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}][Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8)..None(#usn8 In {`5esn`}[.e1..``] Where $`3esn` Is Not Null)]"),
    octest_legacy:ct_string("Load Csv With Headers From ({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})<-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})[(@usn5 :`6esn`)-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]->(:@usn6:#usn8)..{`2esn`:{_usn4} Starts With 0.e0 Starts With 0x0}] As `1esn`  Detach Delete $7 In $7 In $7,0X7[1000..{`1esn`}],.e1 Is Null Is Null Union All With Distinct *,9e1[2.12],$_usn4 Contains Null Contains #usn8 As #usn7 Order By (usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})<-[ *123456789..]-(:@usn5) Is Null Is Null Desc,False[..{`1esn`}] Desc Skip 1e1[$`5esn`][{`3esn`}] Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]] Where 123.654 Contains $`4esn` Contains 1.0"),
    octest_legacy:ct_string("Merge (:`8esn`:`7esn`) Create Unique ((`4esn` :@usn6:#usn8)-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`3esn`=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)})))"),
    octest_legacy:ct_string("Unwind 123.654[$`1esn`] As `2esn` Remove [$1000 Is Null,$`1esn`[{`2esn`}..],.e1[{`7esn`}..{_usn4}]].@usn5 Union All Merge (`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]}) On Create Set `4esn`+=(`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)],Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! ={@usn6}[{999}..][00..] Unwind $12 Starts With {`1esn`} Starts With Null As `6esn` Union All Foreach(`5esn` In $#usn7[..{`5esn`}][..9e12]| Delete `5esn`(Distinct `2esn` Is Null,123456789[{123456789}..'s_str'])[.._usn3(.e0[..$`8esn`])][..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]) Return Distinct 2.12[$`5esn`][$#usn8],$7 Ends With `4esn` As `5esn` Order By ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}) Asc,{#usn8} Starts With 00 Starts With {`6esn`} Desc Skip `1esn`[{usn1}..``][7..$#usn8]"),
    octest_legacy:ct_string("Merge `2esn`=Shortestpath((:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`4esn`]->(:`6esn`$123456789)) On Create Set usn2 =`3esn` In $0 In `1esn`,@usn6:`1esn`,count(Distinct {`1esn`}[usn1][.e1]).`1esn`? =01 Contains {`8esn`} Contains 2.12 Union Remove @usn6:`5esn`,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where $usn1 Ends With $`` Ends With $12|`5esn` Starts With `3esn`].`8esn`,(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn2 ).`7esn`? Union Optional Match ``=(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}}),`3esn`=(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8}) Using Index `3esn`:`5esn`(#usn7) Using Join On `8esn`,`2esn` Where $`6esn`[{999}..9e0] With Distinct All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Limit $12[`5esn`..] Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Allshortestpaths((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}))))[{`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null}][Allshortestpaths(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))] As `2esn`  Optional Match @usn6=(({#usn7:2.12 Contains usn2 Contains True})<-[`7esn`?:@usn5{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]}]-(`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[`7esn`?*..]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})),((`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]-(`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})) Start `5esn`=Rel:`8esn`({usn1}) ,`7esn`=Node:`6esn`({_usn3})"),
    octest_legacy:ct_string("Delete 0[07..{123456789}][999...e12],0Xa[9e1..][$`6esn`..],Extract(#usn7 In {``} Is Not Null Where 123456789[0xabc..'s_str'][``..`1esn`])[Reduce(usn1=False,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$_usn4 Starts With 1e1)] Foreach(`8esn` In [_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|`` Is Not Null Is Not Null] Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where {_usn3}[..\"d_str\"][..`5esn`]) Ends With Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8)| Remove (:#usn7)-[?:_usn3|_usn3]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[:#usn7 *..010]->(#usn8 :usn1)._usn4!,{_usn4:0.12 Contains 0X0123456789ABCDEF Contains .e0}.`1esn`! Remove None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01).`5esn`!) Union All Create Unique @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) Merge `2esn`=Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) On Match Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn` On Match Set @usn5 =Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null"),
    octest_legacy:ct_string("Foreach(usn2 In Case {999} Is Null Is Null When 1000[Null..{123456789}] Then 9e12[`6esn`..12.0] Else `` Ends With $1000 End[Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}])..(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})]| Return Distinct 010[Count(*)..12][$_usn3..{`8esn`}],Filter(_usn3 In {`3esn`}[`2esn`] Where False =~$7 =~2.12)[Case When .e12 Is Not Null Is Not Null Then `1esn` In .e0 In {`3esn`} When 7 Starts With {@usn6} Starts With $`` Then 0X0123456789ABCDEF =~1e1 =~{`4esn`} Else {`4esn`}[$123456789..][$#usn7..] End] As `5esn`,9e1[2.12] As _usn3 Delete 010 In Count(*),Count(*)[..usn2][..usn2]) Create usn1=(((@usn5 :`8esn`:`7esn`{`6esn`:`7esn`[$0][9e12],`4esn`:.e1 Is Null Is Null})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`))),(((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}))) Match usn1=Allshortestpaths(((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})) Using Join On @usn5,_usn3,_usn3 Using Scan #usn7:@usn6"),
    octest_legacy:ct_string("Delete 123456789[#usn8..False],9e1 In 2.12 Load Csv From Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789)) Is Null As `7esn`  Merge (`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}) On Create Set usn1+=Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End],`7esn` =[12.0,2.12 Is Not Null Is Not Null][Case When usn1 In 7 In {123456789} Then `5esn`[_usn4..] When `7esn`[9e0..] Then {`3esn`} In 01 End..999] On Match Set Shortestpath(({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[`6esn`? *0..]-(:usn1{`3esn`:{123456789} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})).`6esn` =$`8esn`[1000..0Xa],`4esn`+=1e1[1000..],(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`).#usn7! =1000 =~@usn6 =~0x0 Union All Foreach(#usn8 In $`7esn` Is Not Null| Create #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Create `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))) Delete Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})],Case $1000[999] When `4esn`[`5esn`..12][@usn6..False] Then {0} Ends With $_usn3 Ends With $`7esn` When $usn1 In {999} In $#usn7 Then Count ( * )[True..][{#usn7}..] End Ends With {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null},`7esn` In 00 Start _usn4=Relationship:`1esn`({12}) ,@usn6=Relationship:`8esn`({`3esn`})"),
    octest_legacy:ct_string("Detach Delete _usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)[Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End..],(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]}) Is Not Null Is Not Null Merge ((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})) On Match Set `6esn`:`8esn`:`7esn` On Match Set `7esn`+=$1000 Is Not Null,`8esn`+=$_usn4 Is Not Null Is Not Null Foreach(_usn4 In {@usn6} Ends With 's_str' Ends With 12.0| Return `6esn`[2.12..01][{``}..False] As @usn5 Skip 1.0[$`1esn`..][$123456789..] Limit Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[{_usn3:01[{@usn5}]}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where True In 0e0)][Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0.12 In _usn3 In {0})..None(`3esn` In {7} Is Null Where 0Xa[2.12])] Delete Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`})) Union All With Distinct *,$`7esn`['s_str'] Limit Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Where .e12 In 0.e0 In {12} Load Csv From #usn7[usn1][$`5esn`] As `6esn`  Foreach(`2esn` In 123456789[_usn3]| Start _usn4=Node( {123456789}) ,`8esn`=Relationship:usn2('s_str')Where {_usn3}[12.e12]) Union All Create Unique `1esn`=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-({#usn8:0xabc[.e0]})))) Match `1esn`=(((_usn4 :#usn7)-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})-[usn1?:`4esn` *..01]-({``:.e1 Is Null Is Null}))) Using Join On `1esn`,_usn3,_usn3 Using Scan ``:`7esn` Where {``} Is Not Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`5esn`[2.12..{_usn3}][_usn3..{1000}] As `5esn`  With Distinct [{`3esn`} Is Not Null Is Not Null] As `2esn`,Count ( * )[True..][{#usn7}..] As usn2,Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null As `2esn` Skip {`4esn`} Starts With 1e1 Return {`4esn`:`7esn` Is Null}[{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]}..] As #usn8 Order By 9e12[`1esn`..][$`1esn`..] Ascending,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] Ascending,9e1 Is Not Null Asc"),
    octest_legacy:ct_string("Load Csv From {1000} =~0 =~123.654 As @usn6 Fieldterminator 's_str' Remove Case When Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Then {`2esn`} Is Not Null Is Not Null When `3esn`[{usn1}] Then `5esn` Starts With $`2esn` Starts With $1000 End._usn3!,Allshortestpaths((((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})))).``! Foreach(_usn3 In Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Is Not Null Is Not Null| Create Unique @usn6=(((@usn6 :`3esn`:@usn5)<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null}))),((:`1esn`{`5esn`:1.0 In Count(*)})) Create Unique _usn3=(({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 :`7esn`:_usn3))) Union All Load Csv With Headers From 123456789[{123456789}..'s_str'] As `5esn`  Merge #usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999}))) Optional Match `2esn`=((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]})-[{`7esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4]}]-(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)),`6esn`=Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null}))) Using Index `3esn`:usn1(@usn6) Using Scan `4esn`:`5esn` Where {`5esn`}[.e1..``] Union All Create @usn6=Shortestpath((usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})),(((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]}))) Load Csv With Headers From (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With  (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Optional Match Shortestpath(((`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}))) Using Join On `8esn`,`2esn` Where `7esn`[..{usn1}] Delete Shortestpath((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))) In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}),[0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]],1.0[`3esn`..][9e0..]"),
    octest_legacy:ct_string("Merge _usn3=((@usn5 {usn2:0.e0[123.654][01]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})) On Match Set `2esn`+=`8esn`[9e12][$`1esn`] Union All Delete .e0 Ends With 0.12 Unwind {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] As `2esn` Union All Remove 0xabc.`1esn`?,Allshortestpaths(((($#usn8)-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})))).``?,(_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}).`2esn`!"),
    octest_legacy:ct_string("Delete exists()[..[`5esn` In $999[0.0..] Where $`3esn`[..$123456789][..$`1esn`]]][..Reduce(`2esn`={123456789} Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4])],`3esn`[`3esn`..][#usn8..],1.0 Starts With 12e12 Starts With {`5esn`} Start `6esn`=Rel:`7esn`(`3esn`=\"d_str\") Where 1.0[0X7][{`5esn`}] Union All Return 123456789[0xabc..'s_str'][``..`1esn`] As `4esn` Skip `4esn`[`5esn`..12][@usn6..False] Limit $_usn4[Count ( * )..] Detach Delete 1.e1[$`1esn`..@usn6][$0..$_usn3],$@usn6[..{#usn7}][..{@usn6}] Create `1esn`=Shortestpath((usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[ *..010{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}}]->(:_usn4$@usn5)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})),((:_usn4{@usn6})) Union All Detach Delete Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End,1.0[$`1esn`..][$123456789..]"),
    octest_legacy:ct_string("Optional Match `6esn`=(({``})<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(usn2 {#usn7:2.12 =~Count(*),_usn4:$usn2[9e0]})),@usn5=Allshortestpaths((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})) Using Index @usn5:`4esn`(`3esn`) Using Scan _usn3:`1esn` Where $123456789 =~{`6esn`} =~\"d_str\""),
    octest_legacy:ct_string("Return *,Reduce(`2esn`=12[1.e1..{_usn3}][1.e1..1.0],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{#usn8}[010]) Is Not Null Is Not Null,usn1 In 7 In {123456789} As `5esn` Return Distinct 07 Is Not Null Is Not Null As `6esn`,(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})[[{@usn6}[{999}..][00..],@usn5 =~{`5esn`} =~`5esn`,`7esn` Is Null]][Reduce(`7esn`=0X0123456789ABCDEF Is Null Is Null,`5esn` In $999[0.0..]|$1000[Null][`4esn`])] As @usn6 Limit Shortestpath((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]}))[None(#usn7 In `2esn`[..$#usn8][..Count(*)])][(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})] Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..] Union All Create _usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))),(:``:#usn8{_usn3:$`7esn` Is Null Is Null})"),
    octest_legacy:ct_string("Start usn2=Node:`4esn`('s_str')  Union Create Allshortestpaths((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))) Delete $_usn4[0e0..][False..],01234567 Is Null Is Null Start `6esn`=Node:``('s_str') Where 12.e12[7..$`6esn`] Union Foreach(#usn7 In .e1 =~{@usn6} =~Null| Create (:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}) Start `6esn`=Node:@usn5({0}) Where $#usn7[#usn7..]) Optional Match (((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[#usn7:@usn5 *0X7..]->(`2esn` ))),Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where `7esn` In {123456789} In `1esn`"),
    octest_legacy:ct_string("Optional Match `7esn`=Allshortestpaths(((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[`1esn`?:usn2|``{_usn4:$`4esn`[..$`3esn`][..0.0],@usn6:0e0 Starts With 2.12 Starts With $12}]->(:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`8esn` *0X0123456789ABCDEF]->(usn2 :_usn4))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3)) Using Join On `6esn`,`8esn`,`4esn` Using Scan `4esn`:`2esn` Where 0.12 Starts With $`5esn` Starts With 12 Load Csv With Headers From Filter(`8esn` In 01[2.12..`8esn`] Where 1e1 In 123.654 In `3esn`) Is Not Null As usn2  Union All Return Distinct {`5esn`}[0..`8esn`][0..Null] As `7esn`,usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010]) Is Not Null Is Not Null As `7esn`,{0}[{`8esn`}..`4esn`] As #usn8 Skip {_usn4} Is Not Null Is Not Null Limit 9e12[`6esn`..12.0] Union All Load Csv With Headers From 0Xa[2.12] As `7esn` Fieldterminator \"d_str\" Start `2esn`=Relationship:usn2(`8esn`={`8esn`}) ,usn2=Node:`4esn`('s_str')Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Unwind Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] As `6esn`"),
    octest_legacy:ct_string("Create `7esn`=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),((:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))"),
    octest_legacy:ct_string("Load Csv From Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] As `2esn` Fieldterminator 's_str' Start #usn8=Rel:`7esn`(`6esn`={_usn4})  Foreach(#usn8 In $`8esn`| Remove Reduce(usn2=#usn7 Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{_usn3}[12.e12]).@usn6?,#usn8(Distinct $#usn7[@usn5..{1000}][1.e1..7]).#usn7!,Reduce(#usn7=usn1 Is Null,`8esn` In 01[2.12..`8esn`]|{_usn3}[..\"d_str\"][..`5esn`])._usn4? Remove `4esn`(Distinct usn1 Is Not Null).@usn5,Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where False Starts With {`5esn`}).#usn7,Reduce(`8esn`=123456789 Ends With 01234567 Ends With 1.e1,_usn3 In {`3esn`}[`2esn`]|0X7 =~9e1)._usn3!) Union All Unwind 010[#usn7..True] As _usn4 Delete $`8esn` In {`1esn`} In 12,Reduce(`4esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|False[..``]) Is Null Is Null,Reduce(`6esn`=@usn5 Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{12} Ends With 1.0 Ends With .e0)[Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|`7esn`[..2.12][..00])] Union With Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Limit {7} In `2esn` Where 0e0 Contains Null Foreach(#usn8 In .e12 Ends With $`2esn` Ends With {``}| Start `3esn`=Node:@usn5({0}) ,`2esn`=Relationship:`3esn`(\"d_str\")) Merge (:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]})"),
    octest_legacy:ct_string("Unwind $0[$`1esn`..07] As usn2 With  .e0 Ends With 0.12 As `6esn` Order By 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Asc,[#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Descending Skip 0.0[Null][$`2esn`] Where 1000 In {`8esn`} In 01 Foreach(`8esn` In {#usn8}[$@usn5..usn1][$1000..0xabc]| Detach Delete Count(*) Contains $#usn7 Contains 1e1 Return Distinct *,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn`,`5esn` Is Null Order By Reduce(@usn6=$1000[999],`8esn` In 01[2.12..`8esn`]|#usn7 Is Null Is Null)[_usn3(0.12 =~$0 =~$0)..][count($12 Ends With 07 Ends With $123456789,`8esn`[{123456789}..])..] Desc Skip `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) Limit {@usn5} =~Count ( * ) =~12.0)"),
    octest_legacy:ct_string("Start #usn7=Node:`5esn`(\"d_str\")  With Distinct None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,01 Is Null As `2esn`,{1000} =~$_usn4 Detach Delete Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] Union All Detach Delete $#usn7 Is Not Null Merge ({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Union All Start `8esn`=Node:`7esn`({_usn3}) Where 1.0 Contains $_usn4 Remove Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]).`2esn`,({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4? Delete Case {`8esn`} Ends With `6esn` When False Is Null Is Null Then 's_str' In 00 Else 123456789 Ends With $`6esn` Ends With $#usn7 End Starts With Case `1esn` =~0 =~$#usn7 When $#usn8[9e12..][.e1..] Then False =~$7 =~2.12 When {123456789}[9e12][{0}] Then 12.0 =~999 =~$_usn3 End,{`7esn`} Starts With $123456789 Starts With $@usn6"),
    octest_legacy:ct_string("Unwind Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null As usn2 Merge `8esn`=(#usn7 :`6esn`$1000)<-[`6esn`? *..010]-(`` :`1esn`)"),
    octest_legacy:ct_string("Start `8esn`=Node:@usn6({_usn4}) Where `3esn`[`3esn`..][#usn8..] Start #usn7=Node:`6esn`(`3esn`=\"d_str\") ,`7esn`=Node:``(@usn6={usn1})Where 9e12 Is Not Null Is Not Null Create Unique ((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})),_usn3=(({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 :`7esn`:_usn3)) Union Foreach(_usn4 In {@usn6} Ends With 's_str' Ends With 12.0| With Distinct @usn6 Contains $1000 Contains {`7esn`} Unwind 999 Ends With Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 1.0 In Count(*)) As `5esn`) Foreach(@usn6 In $usn1 Ends With $`` Ends With $12| Create `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))),#usn8=(:`2esn`:usn1)-[`1esn`:@usn6|`6esn`*..{`7esn`:7[{0}..{_usn4}]}]->(`8esn` {_usn4:`4esn`[1.0],`5esn`:0e0 Ends With 1.e1 Ends With $`4esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})) Foreach(`6esn` In [#usn8 In {`5esn`}[.e1..``] Where {`1esn`}[12.0..`2esn`][@usn6..{usn1}]] Is Not Null| With Distinct True[..$`6esn`],{@usn6} Ends With 's_str' Ends With 12.0 As `1esn` Order By Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`3esn` =~{#usn8}|12.0 Ends With True)[..usn2(Distinct)] Ascending Skip Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End[None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)..[`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1]] Load Csv With Headers From `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) As `6esn` Fieldterminator 's_str') Union Delete 7[..999][..{#usn8}],`1esn`[{usn1}..``][7..$#usn8] Unwind Case When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else $1000 Is Null Is Null End Starts With `7esn`(Distinct $#usn7[..{`5esn`}][..9e12]) Starts With {`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`} As usn1"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As usn2 Fieldterminator \"d_str\" Foreach(_usn4 In 9e0[1.e1..][0Xa..]| Match Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))) Using Index `1esn`:@usn5(#usn8))"),
    octest_legacy:ct_string("Load Csv With Headers From Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] As @usn6 Fieldterminator 's_str' Load Csv With Headers From {`2esn`} Ends With 12.0 As _usn4  Unwind {`6esn`} =~$999 As `8esn` Union Merge ((#usn7 :``:#usn8{`2esn`})<-[usn1?:#usn8|`1esn`]->({@usn5:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],@usn6:$0})<-[@usn6?:`5esn`]-(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})) On Create Set #usn7+=01 =~{_usn3} =~`3esn` On Match Set #usn7:@usn5 Union Delete $_usn4 Is Null Is Null,.e0 Starts With 0 Starts With 0.e0,$`1esn`[1.0..][_usn3..] Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))))) Create Unique _usn4=(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[ *..010{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}}]->(:_usn4$@usn5)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc}),(((usn1 :`7esn`:_usn3{_usn4:{999}})-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]-(:`1esn`{`4esn`:12e12 Ends With {usn1}})-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})))"),
    octest_legacy:ct_string("Load Csv With Headers From {`1esn`}[12.0..`2esn`][@usn6..{usn1}] As `8esn` Fieldterminator 's_str' Detach Delete (:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null})-[:`8esn` *0..{_usn3:`4esn` Ends With 07 Ends With {`3esn`}}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})[..[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]|{7}[..12e12][..Count ( * )]]],({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})[[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 0 In `2esn` In 010]..][{_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null}..] With  *,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8) Is Not Null Is Not Null As `2esn`,Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) =~(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}) =~{#usn8:{`3esn`}[@usn6..0Xa][{12}..0Xa],@usn5:False Is Null Is Null} Order By [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null Ascending,0.0 =~0 =~`6esn` Ascending Skip $_usn3[.e0..$usn2] Union Remove Reduce(#usn7=`7esn` Starts With $#usn7 Starts With $`7esn`,#usn8 In 7[..999][..{#usn8}]|`1esn` Ends With {_usn3} Ends With `2esn`).`8esn`,Any(`8esn` In 01[2.12..`8esn`] Where {usn2}).`1esn`!,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|$#usn8 Ends With $`2esn` Ends With $@usn6].usn1? Union With Distinct 12.e12[`3esn`] As #usn7,{12} Ends With 1.0 Ends With .e0 As `5esn` Skip Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} Where 0X7[..2.12] Detach Delete 12.0 Ends With {``}"),
    octest_legacy:ct_string("Create Unique Shortestpath((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})),(((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}))) Merge @usn6=((`7esn` {`7esn`:{123456789} Contains $#usn8})) On Match Set `` =2.12 =~False,#usn7+=$usn1[..{`6esn`}],#usn7+=(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} With Distinct $_usn3 In {1000} In 0.12,$_usn3[..1000] Order By `7esn`[$12..][$`8esn`..] Descending,9e1[2.12] Ascending,$`1esn` Starts With {`8esn`} Descending Limit @usn6 Contains Null Contains $`7esn` Union Remove Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 7[..999][..{#usn8}]).usn1!,_usn4:`7esn`:_usn3 Create `7esn`=((:`3esn`:@usn5$7))"),
    octest_legacy:ct_string("Foreach(`5esn` In 0.0[`7esn`..][12.e12..]| Load Csv With Headers From {`6esn`}[..$@usn6][..`7esn`] As @usn6 Fieldterminator \"d_str\") Remove @usn6:usn2 Union Optional Match Allshortestpaths(((`` :usn2)<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})-[`2esn`?:usn2|``{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}]-({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}))) Where `7esn`[$0][9e12] Start _usn4=Node:``(\"d_str\") Where `6esn`[12..$usn2][{#usn8}..{usn2}] Union Foreach(`3esn` In Reduce(usn2=01[{`2esn`}..{@usn6}][$`2esn`..0.0],usn1 In @usn5 =~{`5esn`} =~`5esn`|$#usn8 Ends With $`2esn` Ends With $@usn6) =~[#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] =~(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})| Detach Delete 's_str' =~{_usn4} =~$`7esn`,(:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0}) In [`4esn`[..Count ( * )][..{#usn7}]],$`5esn` Starts With `` Unwind [#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn2 Is Null|@usn6[$`3esn`..{`3esn`}]] In Filter(_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`) As _usn3) Delete 010 In Count(*),Count(*)[..usn2][..usn2]"),
    octest_legacy:ct_string("Foreach(@usn5 In 1.0 Starts With 12e12 Starts With {`5esn`}| Optional Match `3esn`=((`1esn` {#usn7:{_usn4} In {12} In $0})-[{#usn8:$#usn8 =~{@usn5},`8esn`:0X0123456789ABCDEF[{_usn4}..00]}]-(_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) Using Scan `3esn`:`8esn` Using Scan `6esn`:`2esn` Where {0}[01][`7esn`] Start #usn7=Node:@usn5(usn2='s_str') Where 9e1[2.12..{#usn8}])"),
    octest_legacy:ct_string("Start _usn4=Node( {123456789}) ,`8esn`=Relationship:usn2('s_str')Where {_usn3}[12.e12] Union Foreach(@usn5 In $_usn4[1.e1]['s_str']| Delete $12[$1000..123456789] With Distinct *,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As _usn3 Order By 1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null Asc Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] =~Reduce(_usn3=$``,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{#usn8} Is Null) =~Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit {usn1} Ends With $0) Merge `3esn`=(((:`5esn`)<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`3esn`:#usn7]-({@usn6:$usn1 Ends With $`` Ends With $12}))) On Match Set usn1+=Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End],`7esn` =[12.0,2.12 Is Not Null Is Not Null][Case When usn1 In 7 In {123456789} Then `5esn`[_usn4..] When `7esn`[9e0..] Then {`3esn`} In 01 End..999] Union With Distinct *,(:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As `` Skip (:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]}) Is Null Limit $`8esn` In {`1esn`} In 12 Create @usn6=((`` :`7esn`:_usn3)),((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->())"),
    octest_legacy:ct_string("Foreach(`8esn` In $`3esn` Is Not Null Is Not Null| With Distinct *,{``}[$#usn8..$usn1] As `3esn` Order By $usn2[$`2esn`..`4esn`] Ascending,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Asc,True[{_usn4}..][False..] Ascending Where \"d_str\" Contains {123456789} Contains 01 Start `3esn`=Relationship:#usn7('s_str') ) Union Load Csv From All(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])[..Allshortestpaths((`5esn` :`4esn`))] As @usn5  Load Csv From None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) Ends With Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Ends With Reduce(_usn3={7}[..1.0][..9e0],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`1esn` Contains {usn2} Contains $#usn8) As `` Fieldterminator 's_str' Union Create Unique (((`6esn` :@usn5)-[usn1?:_usn3|_usn3]-(usn2 :#usn7)<-[#usn8:@usn6|`6esn`{`8esn`:True[00][0Xa]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}))),Allshortestpaths((((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)))) Optional Match ({`3esn`:usn1 Is Null Is Null})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`4esn` {@usn6:{12}[..0X7]}) Using Join On _usn3,@usn5"),
    octest_legacy:ct_string("Remove [@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 01[2.12..`8esn`]].@usn6?,Any(#usn7 In {``} Is Not Null Where {`1esn`}[usn1][.e1]).#usn8? Union All Delete (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case `8esn` Contains $usn1 Contains $12 When 12.e12[7..$`6esn`] Then {12} Contains {123456789} Contains `4esn` When $`1esn`[1.0..][_usn3..] Then `7esn`[$0][9e12] End,Case usn2 Is Null When 1000[0X7..2.12] Then `7esn`[9e0..] End Starts With Reduce(@usn6=$@usn5 Is Not Null,`2esn` In `1esn` =~\"d_str\"|{999} Starts With $999),$@usn6[12.0..][#usn7..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 9e1[2.12..{#usn8}] As `2esn` "),
    octest_legacy:ct_string("Start usn1=Node:`3esn`(`2esn`={usn1}) ,@usn5=Relationship:`6esn`(`8esn`='s_str') Merge ``=((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) On Match Set All(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`).`6esn`! =_usn4 Contains 2.12 On Match Set `1esn`+=Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Union Unwind `7esn`[..{usn1}] As `4esn` Create Unique @usn5=Allshortestpaths((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Merge Shortestpath(((`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}))) Union Start _usn3=Node:`6esn`('s_str')  With  Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] As _usn4,Allshortestpaths((:@usn5{_usn3:07 =~01})) Starts With [`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`}] Starts With ({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:_usn4|:usn2]-(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}) Skip 7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Where $_usn4 Starts With 1e1"),
    octest_legacy:ct_string("Create @usn6=((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Unwind Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As `8esn` Union Start #usn7=Node:`6esn`(`3esn`=\"d_str\") ,`7esn`=Node:``(@usn6={usn1})Where 9e12 Is Not Null Is Not Null With Distinct {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Where {1000}[{_usn3}..] Detach Delete 12[1.e1..{_usn3}][1.e1..1.0],{_usn4:`` Ends With 0Xa Ends With `2esn`}[[{`4esn`} Ends With {123456789} Ends With $`4esn`,$#usn7[#usn7..]]],Extract(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``)[Extract(`5esn` In \"d_str\" Is Null Is Null Where 00[$`7esn`]|$`6esn` Is Null)] Union With Distinct {#usn7}[`2esn`..],Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End,0.0 =~999 As `4esn` Detach Delete [0x0[{`7esn`}..][$usn2..],{`4esn`} =~{7} =~{`7esn`},usn1 In 7 In {123456789}] Is Null Is Null,Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..],1000 =~@usn6 =~0x0"),
    octest_legacy:ct_string("Unwind All(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])[..Allshortestpaths((`5esn` :`4esn`))] As `2esn` Merge ((`3esn` :usn2)) On Match Set _usn3+=$`3esn` Is Not Null Is Not Null,`3esn` ={`4esn`} Ends With {usn2} Ends With {999},{@usn6:{999} Starts With $999,`4esn`:$usn1[{`5esn`}][$`6esn`]}.@usn5? =$usn1[..{`6esn`}] Create Unique `5esn`=Shortestpath((_usn3 :#usn7)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})),((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}})) Union Remove Reduce(usn2=#usn7 Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{_usn3}[12.e12]).@usn6?,#usn8(Distinct $#usn7[@usn5..{1000}][1.e1..7]).#usn7!,Reduce(#usn7=usn1 Is Null,`8esn` In 01[2.12..`8esn`]|{_usn3}[..\"d_str\"][..`5esn`])._usn4? Return *,$12 Starts With $`8esn` Starts With $`1esn` As `1esn`,$_usn4 Contains Null Contains #usn8 Skip [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null Match usn2=Shortestpath(((_usn4 :``:#usn8)-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8))) Using Index `8esn`:@usn6(`5esn`) Union All Merge (`5esn` {`8esn`:1000[Null..{123456789}]})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[`8esn`?:usn1|@usn6{`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}}]-(`6esn` {`7esn`:$`6esn`[010..]}) Foreach(`5esn` In .e0[12.e12..]| Optional Match `5esn`=(((_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 {@usn5:$`8esn` =~{1000}})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]}))),usn1=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Using Index `1esn`:_usn3(_usn4) Using Index `2esn`:`3esn`(@usn6) Where #usn8 With  ()-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[@usn6?$0]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})[{#usn8:_usn4 Starts With $_usn4 Starts With 12.e12}..Allshortestpaths(((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})))][(usn2 :usn2)<-[@usn5? *..01]-(`8esn` :@usn6:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})..Case When #usn8 Is Not Null Is Not Null Then `3esn`[{usn1}] Else 0.12 Starts With $`5esn` Starts With 12 End],0Xa[..{`4esn`}][..12.0],$`` Ends With 0.0 Ends With {1000} Order By 0.0 =~999 Asc,1e1 In \"d_str\" In `7esn` Descending Skip {123456789}[{`8esn`}][$`8esn`] Limit Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789])[`7esn`(Distinct Count ( * ) =~$usn2 =~$usn2)])"),
    octest_legacy:ct_string("Foreach(`7esn` In `1esn`(Distinct $@usn5[..12e12][..$123456789],{#usn7} Is Not Null Is Not Null)[{`7esn`:\"d_str\" Starts With $123456789}..]| Load Csv With Headers From `7esn` In 00 As @usn5 )"),
    octest_legacy:ct_string("Create Shortestpath(((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[`7esn`? *7..12]->({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[{`6esn`:2.12 Contains `1esn`,`1esn`:9e12[`6esn`..12.0]}]-(`4esn` {`6esn`:#usn8[..{#usn7}]}))) Union All Load Csv With Headers From 0.0 In $usn1 As `5esn` Fieldterminator 's_str' Create usn2=((`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(#usn8 {@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)),(#usn8 :@usn6:#usn8) Union All Create Unique `1esn`=Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`}))"),
    octest_legacy:ct_string("Remove None(`2esn` In `1esn` =~\"d_str\" Where 0e0 Ends With 1.e1 Ends With $`4esn`)._usn4? Create #usn8=Shortestpath(((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})))"),
    octest_legacy:ct_string("Merge @usn6=((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) On Match Set Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {`6esn`} =~$999).`7esn`! =Extract(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``)[Extract(`5esn` In \"d_str\" Is Null Is Null Where 00[$`7esn`]|$`6esn` Is Null)],``+=`` Ends With 0Xa Ends With `2esn`,`` =`3esn`[{0}][usn1] On Match Set `6esn`:`8esn`:`7esn` Union All Remove usn1:`5esn` Load Csv With Headers From $_usn4 Contains Null Contains #usn8 As #usn7 Fieldterminator \"d_str\" Union All Merge Allshortestpaths(((`` :usn2)<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})-[`2esn`?:usn2|``{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}]-({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}))) On Match Set [#usn8 In {`5esn`}[.e1..``] Where {7}[..12e12][..Count ( * )]|$123456789 Ends With {`1esn`} Ends With $`4esn`].`6esn`! =Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] On Match Set Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0).``? ={@usn6}[{999}..][00..]"),
    octest_legacy:ct_string("Foreach(_usn4 In [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..])| Unwind $12[`5esn`..] As `7esn` With  *,`7esn` Is Null As `7esn`,None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc,(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null Descending,.e0[..0X0123456789ABCDEF][...e12] Descending Limit {``}[...e12]) Union All Unwind {usn2} Starts With $`8esn` Starts With Count ( * ) As @usn5 Start usn1=Rel:@usn6(#usn7='s_str') ,`4esn`=Relationship:`3esn`({`1esn`})Where {123456789} Is Null Is Null"),
    octest_legacy:ct_string("With  *,@usn6(`5esn`[.e0..][07..]) Is Null Is Null,Count(*) In $12 As @usn6 Order By @usn6 In 1000 In $`` Desc,usn1[..00][..$#usn8] Descending Where `` Ends With 0Xa Ends With `2esn` Unwind 9e0[..999] As #usn8"),
    octest_legacy:ct_string("Foreach(`3esn` In $`7esn` Is Null Is Null| Create Unique usn2=Allshortestpaths((:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]})),((({@usn5:{usn2}[.e0..$999]})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1}))) Detach Delete Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8)[{`7esn`:$`6esn`[010..]}..],01 Ends With 999 Ends With {`7esn`},All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)])"),
    octest_legacy:ct_string("Start @usn5=Node:#usn8(#usn7=\"d_str\") ,`8esn`=Rel:`1esn`(@usn5='s_str')Where {@usn6}[{999}..][00..] Optional Match (#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}),usn2=(@usn6 :``:#usn8)<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Using Index _usn4:`5esn`(`6esn`) Using Scan `6esn`:`2esn` Union All With Distinct *,Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) Order By {_usn3}[{12}..$_usn4][`5esn`..$`5esn`] Asc,123.654 Contains $`4esn` Contains 1.0 Descending Limit $1000[999] Match (usn2 :#usn7)"),
    octest_legacy:ct_string("Create Unique `5esn`=(#usn7 :`8esn`:`7esn`)<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[_usn4?:`1esn` *7..12]->(:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`}) With Distinct $`8esn` Contains 123456789 Contains $usn2,{_usn4} In {12} In $0,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] Skip _usn3[..`8esn`][..2.12] Limit 0X7[0e0..`7esn`][1000..0e0] Foreach(`2esn` In [@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null] Is Null Is Null| Create Allshortestpaths(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) With Distinct 0.0 Is Not Null Is Not Null As `8esn` Skip $`3esn` Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Return Distinct *,Case {#usn8} Is Not Null When {`4esn`} =~9e0 =~{12} Then _usn3[_usn3..][12.e12..] Else 123.654 Contains $`4esn` Contains 1.0 End[(`6esn` {`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})<-[? *..0x0]->(`3esn` :`7esn`:_usn3)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8})..][Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1)..] As `4esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By #usn8 Starts With `6esn` Starts With 12.e12 Desc Optional Match usn2=((`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(#usn8 {@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)),Shortestpath(({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})) Using Index #usn8:`2esn`(`5esn`)"),
    octest_legacy:ct_string("Return Distinct {``} =~12 =~`` As `2esn`,Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} Skip 1.0[00..] Limit 12.e12 Starts With {999} Starts With {`1esn`} Union All Merge (@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[:#usn8|`1esn`*{`8esn`:0Xa[usn2..]}]-(`3esn` :_usn3:_usn3{@usn5:False}) On Match Set #usn8+={#usn8}[1.e1...e12]"),
    octest_legacy:ct_string("With  $@usn6 Contains 07 As @usn5 Order By [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null] Asc,010 =~{usn2} Asc,$12 Is Not Null Is Not Null Ascending Skip {usn2} =~12 Create Unique usn2=Allshortestpaths((:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]})),((({@usn5:{usn2}[.e0..$999]})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1}))) Union Merge _usn4=Shortestpath(((#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]}))) Unwind @usn5 =~{`5esn`} =~`5esn` As _usn4"),
    octest_legacy:ct_string("Start `6esn`=Node:``('s_str') ,usn2=Relationship( {`5esn`}) Delete $@usn5 Starts With #usn7"),
    octest_legacy:ct_string("Foreach(_usn4 In \"d_str\" Is Null Is Null| Detach Delete {#usn8}[{``}..] Remove Single(`` In `` Is Not Null Is Not Null Where 1.0 In Count(*)).`6esn`!,All(#usn8 In 7[..999][..{#usn8}] Where `4esn`[1.0]).@usn6)"),
    octest_legacy:ct_string("Create ``=Allshortestpaths(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})) Match usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}) Union All Unwind 0e0 Starts With 2.12 Starts With $12 As _usn3 Create Unique ((_usn3 :`7esn`:_usn3)-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))"),
    octest_legacy:ct_string("Merge #usn8=(:`2esn`:usn1)-[`1esn`:@usn6|`6esn`*..{`7esn`:7[{0}..{_usn4}]}]->(`8esn` {_usn4:`4esn`[1.0],`5esn`:0e0 Ends With 1.e1 Ends With $`4esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12}) On Create Set `5esn` =$`` Is Not Null,{usn2:usn2 Is Not Null Is Not Null}.usn1? =Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null,[{_usn4}[...e1][..$7],_usn4 Starts With $_usn4 Starts With 12.e12].#usn8? =0X7[0e0..`7esn`][1000..0e0] Union With Distinct *,(:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As `` Skip (:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]}) Is Null Limit $`8esn` In {`1esn`} In 12 Create @usn6=((`` :`7esn`:_usn3)),((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->()) Union Load Csv With Headers From (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $1000[`2esn`..`5esn`][1e1..1.e1] As `4esn` Fieldterminator \"d_str\" Return *,0.0 =~999 As `4esn` Limit 9e1[..$`2esn`] Detach Delete Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}..Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)],0.12 In _usn3 In {0},Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]|123456789 Ends With 12.e12 Ends With $`7esn`) Is Not Null"),
    octest_legacy:ct_string("Load Csv From .e0 Starts With 0 Starts With 0.e0 As _usn3 Fieldterminator 's_str' Optional Match ``=Shortestpath((`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})),Allshortestpaths(((:_usn4))) Remove Case {_usn4} Is Not Null Is Not Null When {#usn8} Is Not Null Then $`8esn`[..00] When $#usn7[..{`5esn`}][..9e12] Then `7esn`[$0][9e12] End.`5esn` Union All Foreach(`2esn` In [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][Case 1.0 In Count(*) When $_usn4[Count ( * )..] Then Null[``] When $1000[`2esn`..`5esn`][1e1..1.e1] Then .e12[@usn5..#usn7][010..{usn1}] Else 1.0[$`1esn`..][$123456789..] End][All(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)]| Detach Delete $usn1[_usn4],.e1[..usn2][..`8esn`],$123456789 Ends With `3esn` Ends With 123456789 Load Csv From {``} Starts With $`2esn` Starts With `1esn` As `` ) Delete {`3esn`} In 01,.e1 In 0,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] Union Return #usn7 As `8esn`,0.12[..False][..{1000}] Order By Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..] Desc,[{@usn6} Ends With 's_str' Ends With 12.0,{12} Contains {123456789} Contains `4esn`] Starts With Filter(_usn3 In {`3esn`}[`2esn`] Where {1000} =~0 =~123.654) Starts With Case When Count ( * )[0.12...e1] Then $@usn5 =~1000 =~1000 When Null Ends With `2esn` Ends With $usn1 Then $usn2[{@usn5}] End Ascending,{12}[{7}][$123456789] Asc Skip `7esn` Ends With 0x0"),
    octest_legacy:ct_string("Create Unique #usn8=Shortestpath((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Foreach(`6esn` In $`5esn` In $`` In 123.654| Return $`8esn`[1000..0Xa],({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) As ``,usn1 Starts With $usn1 As `1esn` Order By Null[``] Descending,1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Limit {`4esn`} Starts With 1e1 Unwind {`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}[@usn5(Distinct {`5esn`} Contains $0 Contains {``},12.e12 Starts With {999} Starts With {`1esn`})] As _usn4) Union All Merge usn2=Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) On Create Set _usn3:`7esn`:_usn3,`8esn` ={1000}[$999...e12][`7esn`..'s_str'] Foreach(usn2 In $12[True..][{0}..]| Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null Load Csv With Headers From {1000}[$`4esn`][\"d_str\"] As _usn3 )"),
    octest_legacy:ct_string("Load Csv From 12e12 Ends With `5esn` Ends With {@usn6} As `` Fieldterminator \"d_str\" Create Shortestpath((({@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))) Merge `7esn`=Shortestpath(((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`))) On Create Set `1esn` =12.e12[``][{`2esn`}],`8esn`+=00[{`8esn`}..][{`8esn`}..],#usn7+={_usn4} Ends With `6esn` Union Match Allshortestpaths((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`)),(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) Where True In 0e0 Load Csv With Headers From _usn4 Contains 2.12 As #usn8  Foreach(@usn5 In `5esn` Starts With 010 Starts With 0.0| Create Shortestpath((:`4esn`{``:2.12 Is Not Null Is Not Null})),Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))) Optional Match ``=Shortestpath((`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})),Allshortestpaths(((:_usn4)))) Union Start _usn4=Node:usn2(`8esn`='s_str') ,#usn7=Node:usn2({12})Where $`3esn` Is Not Null"),
    octest_legacy:ct_string("Load Csv From [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As @usn6  With Distinct *,{#usn8} Is Not Null,$`5esn`[2.12..{_usn3}][_usn3..{1000}] As usn2 Order By 9e0[1.e1..][0Xa..] Descending,{_usn3:`4esn`[..Count ( * )][..{#usn7}]}[Any(_usn3 In {`3esn`}[`2esn`] Where 1e1 In \"d_str\" In `7esn`)..(:usn1{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`2esn`:_usn4|:usn2]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[`6esn`{`6esn`:Count(*) Ends With 12.0 Ends With 12}]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})][Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7|123.654[{7}..])..Filter(`3esn` In {7} Is Null Where usn1 Is Null Is Null)] Asc With Distinct 0e0[..010] As _usn3,Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) As `` Skip {12}[{7}][$123456789] Union All Foreach(_usn3 In (_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})<-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :`3esn`:@usn5)<-[? *..999]-(#usn8 :`5esn`{#usn8:0xabc[.e0]})[Shortestpath(({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[`6esn`? *0..]-(:usn1{`3esn`:{123456789} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))..Allshortestpaths((_usn4 :#usn7)<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))]| Delete `4esn`[$999..{`1esn`}][{@usn6}.._usn3] Create #usn8=Shortestpath(((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]}))))"),
    octest_legacy:ct_string("Create @usn5=(((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1)))"),
    octest_legacy:ct_string("Match (({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})) Using Index @usn5:`2esn`(@usn5) Where $123456789 Is Null Is Null Foreach(`4esn` In None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}]| Remove [@usn5 In {`7esn`} In `2esn`,9e0,$`5esn`[..$`5esn`][..$12]].`4esn`!,Reduce(usn2=$usn2[{@usn5}],`4esn` In $`3esn` Is Not Null|$7[{usn2}..][{usn2}..]).usn2,[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 01[2.12..`8esn`]|{0} Ends With $_usn3 Ends With $`7esn`].`6esn`!) Union Remove Filter(`4esn` In $`3esn` Is Not Null Where 12.e12[7..$`6esn`]).usn2?,#usn7:``:#usn8,Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01).usn2 Unwind $`5esn` Starts With $0 Starts With {0} As usn1"),
    octest_legacy:ct_string("Start ``=Relationship:_usn3(`8esn`={123456789}) ,`3esn`=Rel:usn1(_usn4={12}) Remove exists(Distinct 9e1 In $`3esn` In $@usn6).`8esn`!,None(_usn3 In {`3esn`}[`2esn`] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0])._usn4,[usn1 Starts With usn1 Starts With $``,False =~1e1 =~0.e0,`3esn`[..010][..$7]].`1esn` Remove (`1esn` :_usn3:_usn3)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null}).`3esn`!,Case When {7} Is Null Then .e1[{`7esn`}..{_usn4}] When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` End.`6esn`? Union All Foreach(usn1 In Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End Ends With Case When 0x0 Ends With $12 Then 07 =~01 End| Detach Delete $@usn5,'s_str' =~{_usn4} =~$`7esn`,usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..])"),
    octest_legacy:ct_string("Unwind $@usn5 Is Not Null Is Not Null As `8esn` Match ``=(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))),`1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})) Using Join On `7esn` Unwind 0e0[`8esn`..][$123456789..] As usn2 Union All Create Unique (((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3))) Create Unique ((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})),((`5esn` :`2esn`:usn1))"),
    octest_legacy:ct_string("Match _usn3=((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})) Using Join On `3esn`,`5esn` Using Join On @usn5,_usn3,_usn3 Remove [12.e12[9e12..{`6esn`}]].usn1!,Case When {``}[010..][0xabc..] Then usn1 Starts With usn1 Starts With $`` Else $#usn8 Ends With $`2esn` Ends With $@usn6 End.`6esn`? Union All Unwind 0e0[07] As `7esn` Remove {`8esn`:Count ( * ) =~$usn2 =~$usn2}.@usn6 Unwind $`1esn` Ends With 9e1 Ends With $123456789 As `8esn`"),
    octest_legacy:ct_string("Merge ``=Allshortestpaths(((@usn6 :_usn3:_usn3)-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8))) On Match Set `8esn`+=[9e1[..$`2esn`]][{`8esn`:False =~$7 =~2.12,`3esn`:Count ( * ) =~$usn2 =~$usn2}][Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End],`6esn`+=9e1 Is Not Null On Create Set Single(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``).`2esn` =Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}),[@usn6 Ends With {_usn3},12.0 Contains #usn7,$_usn3[..1000]].`2esn`? =0e0 Contains Null,`5esn`+=7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Create Unique ``=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->(:usn1{`3esn`:{123456789} Is Null Is Null}))) Create usn1=Allshortestpaths((#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(usn2 {``:01[{@usn5}]})),(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[`3esn`{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null}]->(:`1esn`{_usn4:{999}})<-[?:`7esn`{`3esn`:{#usn8}[010]}]-(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})) Union Delete $`8esn` Contains 123456789 Contains $usn2,Shortestpath(((({`4esn`:`7esn` Is Null})<-[`4esn`? *..12{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7}]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3))))[(`4esn` {`6esn`:#usn8[..{#usn7}]})<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[`1esn`:usn2|``]->(`3esn` {@usn5:$usn2[9e0]})] Unwind $#usn8[$`2esn`..][{`2esn`}..] As `5esn` Delete 0x0 Is Null,00[`2esn`..12][123456789..0.e0],Count(*)[$#usn8]"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths(((#usn7 :_usn3:_usn3{`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5}))) On Match Set `8esn`+=$@usn5 Starts With 01 Starts With .e0,usn2+=Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}))))[Case When $999[0.0..] Then 12 Ends With 0x0 Ends With 0.e0 When `` Is Not Null Is Not Null Then {`3esn`}[..07][..{`5esn`}] End..[`3esn` In {7} Is Null Where usn1 Is Null Is Null]],@usn6+=`3esn`[{`2esn`}] Unwind Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] As `7esn` Delete 12.e12[9e12..{`6esn`}] Union Delete 010[Count(*)..12][$_usn3..{`8esn`}],{`5esn`} Contains $0 Contains {``},()-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[@usn6?$0]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})[{#usn8:_usn4 Starts With $_usn4 Starts With 12.e12}..Allshortestpaths(((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})))][(usn2 :usn2)<-[@usn5? *..01]-(`8esn` :@usn6:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})..Case When #usn8 Is Not Null Is Not Null Then `3esn`[{usn1}] Else 0.12 Starts With $`5esn` Starts With 12 End]"),
    octest_legacy:ct_string("Match `6esn`=((`3esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[`7esn`]-(`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})),`3esn`=Allshortestpaths(((#usn7 {``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[#usn8?:#usn7{`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000}]->(:@usn6:#usn8{`4esn`:$`8esn`[..00]}))) Where .e1 Is Null Is Null Remove Case When $#usn8 Ends With $`2esn` Ends With $@usn6 Then $1000[`2esn`..`5esn`][1e1..1.e1] Else {`4esn`} =~{7} =~{`7esn`} End._usn3?,{`8esn`:{usn2} =~12}.@usn5,`2esn`(Distinct 7[$`8esn`..123456789][$usn1..$usn1],1e1 In 123.654 In `3esn`)._usn4! Unwind Allshortestpaths((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}))))[{`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null}][Allshortestpaths(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))] As @usn5"),
    octest_legacy:ct_string("With Distinct usn1(Distinct 999 In {`3esn`} In usn2,$12[Null..Count(*)][{`5esn`}..{999}]) Starts With ``($12[$1000..123456789],\"d_str\" Starts With 01) Starts With All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`7esn` =~{`8esn`} =~$usn1),(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])] As _usn4 Skip $12 Ends With 07 Ends With $123456789 Where _usn3 Starts With 12.e12 Starts With 0.12 Merge `3esn`=(((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1))) On Create Set `7esn`(Distinct `3esn`[..010][..$7]).#usn8? =7 Ends With $`4esn` Start _usn3=Relationship:usn2(`8esn`={`8esn`}) ,`1esn`=Rel:#usn8(`8esn`={`6esn`})Where #usn8 Is Not Null Is Not Null Union Create @usn5=((`8esn` :#usn7)-[`3esn`{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null}]->(:`1esn`{_usn4:{999}})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})),@usn6=((`` :`7esn`:_usn3)) With Distinct [{`3esn`} Is Not Null Is Not Null] As `2esn`,Count ( * )[True..][{#usn7}..] As usn2,Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null As `2esn` Skip {`4esn`} Starts With 1e1 Union All Unwind True[00][0Xa] As #usn8 Remove [0e0 Ends With 1.e1 Ends With $`4esn`].`7esn`!"),
    octest_legacy:ct_string("With Distinct $123456789 Ends With $999 Ends With {999},7[$`8esn`..123456789][$usn1..$usn1] As `5esn`,{#usn7}[`2esn`..] Order By $`6esn`[010..] Ascending Skip 1e1 In \"d_str\" In `7esn` Limit Case Count ( * ) Contains 07 When {7}[..12e12][..Count ( * )] Then 9e12 Is Not Null Is Not Null When $`2esn` Then 1.0 Contains $_usn4 Else _usn4 Contains 2.12 End[Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`2esn`} Ends With {`7esn`})..] Detach Delete 123456789[$1000..$#usn7],#usn8 Is Not Null Union All Unwind 0X7[1000..{`1esn`}] As `4esn` Return Distinct `4esn` =~$`5esn`,$`1esn` Starts With {`8esn`} As _usn3,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`])[Any(`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`})..][Extract(`2esn` In `1esn` =~\"d_str\" Where $_usn4[1.e1]['s_str']|usn1[`5esn`..$7])..] As `7esn` Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}} Start `7esn`=Relationship:`3esn`(`6esn`='s_str') Where 0Xa =~123456789 =~_usn4 Union All Optional Match (({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Using Scan `1esn`:`3esn` Where 7[..999][..{#usn8}] Foreach(`8esn` In $`2esn` Ends With 1000 Ends With `6esn`| Load Csv With Headers From $#usn8 =~{@usn5} As usn2 Fieldterminator 's_str') Merge (usn2 :usn2)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->({``:12.e12[$_usn3..],_usn3:$`6esn`[010..]})<-[_usn3?:`5esn`]-({`7esn`:{999}}) On Match Set Allshortestpaths((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})).`8esn`? =123456789 Ends With 12.e12 Ends With $`7esn`,{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}.`8esn` =7 Ends With $`4esn`,All(#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]).@usn5! =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12])"),
    octest_legacy:ct_string("Start _usn3=Relationship:usn2(`8esn`={`8esn`}) ,`1esn`=Rel:#usn8(`8esn`={`6esn`})Where #usn8 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Start `4esn`=Node:_usn4(#usn7=\"d_str\")  Union All Unwind {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] As `4esn` Create Unique `6esn`=Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))),_usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))) Start `2esn`=Node:_usn4(#usn7=\"d_str\")  Union With Distinct $`3esn`[0.12..`8esn`][$#usn7..`5esn`],Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6 Order By {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Ascending,$`3esn` Is Not Null Desc Where 01 Contains {`8esn`} Contains 2.12"),
    octest_legacy:ct_string("Return `6esn`[..$@usn6] As `` Order By Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0])[Case $`3esn` In $`6esn` In $`` When {_usn3}[..\"d_str\"] Then `3esn`[{usn1}] Else {999} Starts With {0} End][usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])] Desc,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) Desc Limit Count(*) Contains $#usn7 Contains 1e1 Create @usn6=Shortestpath((usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})),(((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})))"),
    octest_legacy:ct_string("Create usn2=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})))"),
    octest_legacy:ct_string("Start `4esn`=Node:_usn4(#usn7=\"d_str\") ,``=Relationship:usn2(`3esn`='s_str')Where #usn7 Is Null Is Null Create ``=Shortestpath(((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->()))"),
    octest_legacy:ct_string("With Distinct {#usn7}[`2esn`..],Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End,0.0 =~999 As `4esn` Detach Delete [0x0[{`7esn`}..][$usn2..],{`4esn`} =~{7} =~{`7esn`},usn1 In 7 In {123456789}] Is Null Is Null,Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..],1000 =~@usn6 =~0x0 Union Create (({`5esn`:$`8esn`[1000..0Xa]})-[:`8esn` *..01]->(`` {`3esn`:{12} Contains {123456789} Contains `4esn`}))"),
    octest_legacy:ct_string("Unwind `7esn` In 00 As `` Load Csv With Headers From 7 Starts With {@usn6} Starts With $`` As #usn8  Unwind Reduce(`5esn`=$`5esn`[{`3esn`}],`3esn` In {7} Is Null|`6esn`[12..$usn2][{#usn8}..{usn2}]) In @usn5(Distinct _usn4 Starts With $_usn4 Starts With 12.e12) In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Count ( * ) Ends With 12.0) As _usn3 Union All Foreach(`2esn` In Allshortestpaths((`5esn` :`4esn`)) Is Not Null| Delete [#usn8 In {`5esn`}[.e1..``] Where {7}[..12e12][..Count ( * )]|{`2esn`} Ends With {`7esn`}] In All(#usn8 In {`5esn`}[.e1..``] Where {7}[..1.0][..9e0]),Null Ends With `2esn` Ends With $usn1,[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12)) Union All Load Csv With Headers From .e12[@usn5..#usn7][010..{usn1}] As `4esn`  Detach Delete 1e1 Contains 0e0,Case {#usn8} Is Not Null When {`4esn`} =~9e0 =~{12} Then _usn3[_usn3..][12.e12..] Else 123.654 Contains $`4esn` Contains 1.0 End[(`6esn` {`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})<-[? *..0x0]->(`3esn` :`7esn`:_usn3)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8})..][Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1)..],usn1 Is Null Is Null Merge Shortestpath(((`5esn` :_usn4{7})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})))"),
    octest_legacy:ct_string("Create ``=(`1esn` {``:`7esn` Starts With $#usn7 Starts With $`7esn`}),usn2=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))) Union All Merge (#usn7 :`8esn`:`7esn`)<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[_usn4?:`1esn` *7..12]->(:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`}) Return Distinct *,{`5esn`:01234567 Is Null Is Null}[..`1esn`(Distinct 00 Starts With 0xabc,$0)],Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Skip 1.0 =~7 =~{usn2} Union Return Distinct $`5esn`[$`4esn`..{@usn6}][07..$@usn6] As usn2 Order By [usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Ascending,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7) Descending Skip Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null Match Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:usn1(@usn5) Using Index `3esn`:`5esn`(#usn7) Where $`5esn`[2.12..] Unwind $_usn4 In usn1 In $7 As usn1"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 123456789 Ends With 01234567 Ends With 1.e1 As #usn8 Fieldterminator \"d_str\" Create `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8}))"),
    octest_legacy:ct_string("Merge ((`6esn` {`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})<-[usn2?:`5esn`{`8esn`:{_usn4}[1000..{@usn5}],_usn3:12e12 Ends With {usn1}}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})) On Create Set @usn5 =Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null On Create Set None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $12[True..][{0}..]).usn1! ={123456789} Is Not Null Create Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=(usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)"),
    octest_legacy:ct_string("Unwind Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)[(:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})..Shortestpath((({``})))] As @usn6 Foreach(`5esn` In 0.12 Contains 0X0123456789ABCDEF Contains .e0| Return None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Limit #usn7[010..False]) Create Unique (:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})-[`7esn` *..0x0]-(`2esn` :_usn4)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `1esn` =~\"d_str\" As usn1 Fieldterminator \"d_str\" Foreach(`5esn` In All(`5esn` In $999[0.0..] Where {@usn6} Ends With 's_str' Ends With 12.0) In (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})| Start _usn4=Rel:#usn8(\"d_str\") Where $#usn8[9e12..][.e1..])"),
    octest_legacy:ct_string("Start @usn6=Rel:``(_usn3='s_str') ,``=Node:_usn4(usn1={12}) Union All Match #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Using Join On _usn4 Create `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})) Load Csv With Headers From 7 =~{`8esn`} =~$`6esn` As `5esn`  Union All Remove Extract(#usn8 In {`5esn`}[.e1..``]|12e12 Ends With {usn1})._usn3!"),
    octest_legacy:ct_string("Return Distinct [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As `8esn`,[`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As @usn6 Skip #usn8 Starts With $_usn4 Starts With $7 Remove Reduce(`5esn`=$`5esn` In $`` In 123.654,_usn3 In {`3esn`}[`2esn`]|$@usn5 Starts With 01 Starts With .e0).``,(`` {`1esn`:{@usn6}[{999}..][00..]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->({12}).`5esn`! Detach Delete .e0[12.e12..],Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null,0.12[`2esn`..{`6esn`}]"),
    octest_legacy:ct_string("Unwind Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) =~(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}) =~{#usn8:{`3esn`}[@usn6..0Xa][{12}..0Xa],@usn5:False Is Null Is Null} As usn2 Union Optional Match ``=(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))) Using Join On #usn7 Using Index _usn4:usn2(#usn8) Union All Start _usn3=Node:@usn6({#usn7}) Where usn1 In 7 In {123456789} Remove [`5esn` In \"d_str\" Is Null Is Null Where 1.e1[$`1esn`..@usn6][$0..$_usn3]].usn2!,{`5esn`:{999},_usn3:$`5esn`[2.12..]}.`1esn`?"),
    octest_legacy:ct_string("Load Csv From $123456789 In $#usn7 In `4esn` As `5esn`  Union All Load Csv With Headers From Null[$`5esn`][False] As `` Fieldterminator \"d_str\" Merge (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2) Union All Merge ((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})) On Create Set usn1(Distinct $123456789 Ends With `3esn` Ends With 123456789,`5esn`[7][{usn2}]).@usn5 =All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null,`2esn`+=Case {#usn8} Is Not Null When {`4esn`} =~9e0 =~{12} Then _usn3[_usn3..][12.e12..] Else 123.654 Contains $`4esn` Contains 1.0 End[(`6esn` {`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})<-[? *..0x0]->(`3esn` :`7esn`:_usn3)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8})..][Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1)..],usn1+=$`6esn`[123456789..12][True..{`3esn`}] Detach Delete $@usn5 Starts With {0} Starts With 12 Detach Delete 0X7[{@usn6}],Null In $7 In .e1,9e12[0.0..][$12..]"),
    octest_legacy:ct_string("Load Csv From Allshortestpaths((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}))))[{`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null}][Allshortestpaths(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))] As `2esn`  Merge `2esn`=Allshortestpaths((((#usn8 :usn1)-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`7esn` :`5esn`)))) Union Unwind 0e0[`8esn`..][$123456789..] As usn2 Optional Match `6esn`=Shortestpath((((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})))),Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null}))) Using Scan `3esn`:_usn4 Using Scan ``:`2esn` Where $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Load Csv With Headers From `6esn`[..$@usn6] As @usn6 Fieldterminator 's_str' Union Unwind $_usn4 =~usn2 =~{_usn3} As _usn4"),
    octest_legacy:ct_string("Start `5esn`=Relationship(*)  Return Distinct 12.e12 Is Null Is Null As `6esn`,01 Is Null As `2esn`,$12 =~$_usn3 As #usn8 Skip Filter(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``]) Ends With Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End Limit $999 Is Not Null With Distinct Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) As `1esn`,Extract(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null)[..Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})] Order By $`1esn`[{`2esn`}..] Desc,$12 Starts With $`8esn` Starts With $`1esn` Descending Union Merge #usn7=((`4esn` :@usn6:#usn8)-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})) On Match Set usn1 =$`3esn`[{`5esn`}..#usn7][{`2esn`}...e1],(`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn`?:`5esn` *1000..00]->({`1esn`:`3esn`[{`2esn`}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}).`5esn` ={#usn8}[{``}..]"),
    octest_legacy:ct_string("Merge (`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}}) On Create Set Extract(#usn7 In {``} Is Not Null Where 0.12 =~`5esn` =~`5esn`).`8esn` =1000[0X7..2.12],`1esn`+={`5esn`} Starts With @usn5 Starts With `7esn`,`5esn`+=123.654 Is Not Null On Create Set _usn4 =[`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null,@usn6+=Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 Contains 0X7 Contains $`8esn`) Is Not Null Is Not Null Create Unique Shortestpath((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`4esn`:`8esn` *00]->(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]->(`6esn` :`4esn`{#usn8:@usn6[$`3esn`..{`3esn`}],`3esn`:usn2[{7}]}))) Delete True[{_usn4}..][False..],$#usn7[@usn5..{1000}][1.e1..7],#usn7 Contains usn2 Contains @usn5"),
    octest_legacy:ct_string("Start #usn8=Relationship:`8esn`(#usn8={`2esn`}) ,`6esn`=Rel:`7esn`(`3esn`=\"d_str\") Remove Allshortestpaths(({`3esn`:usn1 Is Null Is Null})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(usn2 {`6esn`:{#usn8}[.._usn4][..$`3esn`],`7esn`:01 =~{_usn3} =~`3esn`})).@usn5!,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where ``[$`2esn`])._usn4!,Filter(#usn7 In {``} Is Not Null Where .e0 Starts With $`` Starts With $usn2).#usn8 Union All Remove (:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn` *0X7..{usn2:_usn3[$`8esn`]}]->(`8esn` :_usn4).@usn5,[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $0[``][{@usn6}]].#usn8! Unwind (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} As `1esn`"),
    octest_legacy:ct_string("Start @usn6=Relationship:`8esn`({`3esn`}) ,`3esn`=Node:usn1(_usn4={12}) Remove Shortestpath((usn1 {`7esn`:{999}})).`5esn`!,Any(`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]).`5esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $@usn6 Ends With $_usn4 Ends With 0.12 As `4esn`  Start ``=Rel:#usn8({12}) ,`7esn`=Relationship:@usn5({`8esn`})Where `7esn` In {123456789} In `1esn` Return *,Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null As `1esn`,[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null As _usn3 Order By 123456789[$@usn5..] Ascending,.e12 Contains 00 Contains {999} Asc,{`5esn`}[{usn2}..1000][$`8esn`..{`3esn`}] Ascending Skip $`8esn`[1000..0Xa]"),
    octest_legacy:ct_string("Delete `4esn`[`5esn`..12][@usn6..False],07 Contains 0X7 Contains $`8esn`,$`5esn`[2.12..] Start `2esn`=Node:`7esn`(`3esn`=\"d_str\") ,_usn3=Node:@usn6({#usn7}) Foreach(`2esn` In {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}])| Start `1esn`=Node:`2esn`(#usn8={123456789}) )"),
    octest_legacy:ct_string("Match `2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}),`6esn`=(((usn2 :``:#usn8)-[ *123456789..{`4esn`:0Xa[2.12],#usn7:0.e0 In $#usn7 In $_usn3}]-(@usn6 :`3esn`:@usn5)-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}))) Using Index `6esn`:`8esn`(``) Using Index `1esn`:_usn3(_usn4) Where $#usn8 Ends With $`2esn` Ends With $@usn6 Foreach(`4esn` In 12 Ends With 0x0 Ends With 0.e0| With  *,Shortestpath((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))) In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) As `1esn`,`6esn`[2.12..01][{``}..False] As `1esn` Where $123456789 In 0X0123456789ABCDEF In 0.e0 Unwind 123456789 Ends With 0.12 Ends With `` As _usn3) Foreach(usn2 In {@usn6} Is Null Is Null| Remove `3esn`(False Starts With {`5esn`},0[{usn2}..][$`6esn`..]).usn2? Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0) Union Detach Delete Case {#usn8} Is Not Null When {`4esn`} =~9e0 =~{12} Then _usn3[_usn3..][12.e12..] Else 123.654 Contains $`4esn` Contains 1.0 End[(`6esn` {`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})<-[? *..0x0]->(`3esn` :`7esn`:_usn3)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8})..][Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1)..],Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Is Null Is Null Unwind 0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3 Return [01[2.12..`8esn`],{7} In `2esn`,123456789 Ends With $`6esn` Ends With $#usn7] Starts With Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With `7esn`(Distinct {_usn4} Ends With `6esn`,{@usn6}[7]),{_usn4}[...e1][..$7] Skip 0x0 Ends With $12"),
    octest_legacy:ct_string("Create `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),#usn7=Shortestpath((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})) Remove [`5esn` In $999[0.0..] Where {7}[..12e12][..Count ( * )]]._usn4!,All(#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8).``!,{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}.`4esn`? Return Distinct *,Reduce(usn1=$123456789 Is Null Is Null,_usn3 In {`3esn`}[`2esn`]|Null[$`5esn`][False])[Case 0e0 Contains Null When 0X7[`7esn`][123.654] Then 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] End..][[9e1[$usn2],{`4esn`}[$123456789..][$#usn7..]]..],01234567 Is Null Is Null Order By @usn6 Contains Null Contains $`7esn` Ascending"),
    octest_legacy:ct_string("With  (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Limit Count ( * ) =~$usn2 =~$usn2 Create Unique Allshortestpaths((`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) Return Distinct Reduce(`7esn`=$`5esn` In $`` In 123.654,`` In 123456789 Ends With 12.e12 Ends With $`7esn`|{`7esn`} Is Null)[Reduce(_usn3=#usn8 Is Not Null,`` In 123456789 Ends With 12.e12 Ends With $`7esn`|1.0 Starts With 12e12 Starts With {`5esn`})] As `8esn`,$`8esn` Is Not Null Is Not Null As `1esn`,\"d_str\" Starts With $123456789 Order By `` Ends With $1000 Desc,Case {`8esn`} Ends With `6esn` When False Is Null Is Null Then 's_str' In 00 Else 123456789 Ends With $`6esn` Ends With $#usn7 End Starts With Case `1esn` =~0 =~$#usn7 When $#usn8[9e12..][.e1..] Then False =~$7 =~2.12 When {123456789}[9e12][{0}] Then 12.0 =~999 =~$_usn3 End Desc"),
    octest_legacy:ct_string("Start usn2=Node:`4esn`('s_str') ,@usn6=Rel:``(_usn3='s_str')Where `7esn` In {123456789} In `1esn`"),
    octest_legacy:ct_string("Foreach(usn2 In @usn6 Ends With {_usn3}| Load Csv From {123456789}['s_str'] As #usn7 Fieldterminator 's_str' Create @usn6=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))))"),
    octest_legacy:ct_string("Return [`5esn`[{`4esn`}..`2esn`],Null Ends With {`5esn`} Ends With 0.e0,010[#usn7..True]] Contains [`3esn` In {7} Is Null Where {usn2}[.e0..$999]|Count ( * ) Contains `8esn` Contains .e1] Contains Reduce(``=@usn5 In {`7esn`} In `2esn`,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{_usn4}[1000..{@usn5}]) As `3esn`,{7}[$7..$``][{``}..{7}] As usn2,{1000}[{_usn3}..] As #usn7 Skip Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] Limit $`6esn` Ends With Count(*) Return Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1),$_usn4[0e0..][False..] As ``,$`6esn` Ends With Count(*) Order By {usn1} Is Not Null Is Not Null Desc,{usn2}[$`3esn`..][{#usn7}..] Ascending Limit {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]) Union Create Unique (((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))),Allshortestpaths((_usn3 :@usn5)-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})) Union Match (({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})) Using Index @usn5:`2esn`(@usn5) Where $123456789 Is Null Is Null Foreach(`4esn` In None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}]| Remove [@usn5 In {`7esn`} In `2esn`,9e0,$`5esn`[..$`5esn`][..$12]].`4esn`!,Reduce(usn2=$usn2[{@usn5}],`4esn` In $`3esn` Is Not Null|$7[{usn2}..][{usn2}..]).usn2,[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 01[2.12..`8esn`]|{0} Ends With $_usn3 Ends With $`7esn`].`6esn`!)"),
    octest_legacy:ct_string("Detach Delete None(`5esn` In $999[0.0..] Where {``}[010..][0xabc..])[{`3esn`:False Is Null Is Null,`8esn`:2.12}] Load Csv With Headers From #usn8 Starts With `6esn` Starts With 12.e12 As ``  Union Foreach(#usn7 In .e1 =~{@usn6} =~Null| Create (:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}) Start `6esn`=Node:@usn5({0}) Where $#usn7[#usn7..]) Optional Match (((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[#usn7:@usn5 *0X7..]->(`2esn` ))),Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where `7esn` In {123456789} In `1esn` Union All Detach Delete $usn1 In {999} In $#usn7,Shortestpath((:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))[Filter(#usn8 In 7[..999][..{#usn8}] Where $#usn7 Contains 0x0 Contains 1000)..] Match Allshortestpaths((@usn5 {`7esn`:$`6esn`[010..],#usn8:0.e0 Starts With `2esn`})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})) Using Join On `2esn` Where $1000 In $1000 In $`3esn` Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..]"),
    octest_legacy:ct_string("Unwind All(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null) As `` Remove Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7))._usn4 Union Detach Delete @usn6 Contains Null Contains $`7esn`,$usn2[$`2esn`..`4esn`] Union Detach Delete usn2 Ends With 12.e12,Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] Create Unique `6esn`=Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null}))),(:`7esn`:_usn3{usn1:$usn1 In {999} In $#usn7}) With Distinct 0x0[{`7esn`}..][$usn2..],Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn`,12.e12 Is Not Null Is Not Null As #usn8 Skip 12.0[..9e0][..$``]"),
    octest_legacy:ct_string("Load Csv From [`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]|`8esn` Contains $usn1 Contains $12][Filter(_usn3 In {`3esn`}[`2esn`] Where #usn7 Contains _usn3 Contains {`3esn`})..(:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[usn2?:`7esn` *123456789..{_usn4:$@usn5 Starts With {0} Starts With 12,`2esn`:{7}[..12e12][..Count ( * )]}]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})] As `6esn` Fieldterminator \"d_str\" With Distinct $7[{123456789}] As `6esn` Order By _usn4 Starts With $_usn4 Starts With 12.e12 Descending Skip \"d_str\" Ends With {`2esn`} Ends With usn2 Limit Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}]"),
    octest_legacy:ct_string("Create Unique `1esn`=((:usn1{`6esn`:2.12 Contains `1esn`,`1esn`:9e12[`6esn`..12.0]})<-[`3esn`? *..01]->(@usn5 :`5esn`)<-[? *..07]-(:`4esn`)),(((`6esn` :`5esn`{usn1:{`6esn`}})<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})<-[:`1esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))) Create ((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})),Allshortestpaths(((`2esn` :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0}))) Union All Create Unique #usn8=Shortestpath((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Foreach(`6esn` In $`5esn` In $`` In 123.654| Return $`8esn`[1000..0Xa],({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) As ``,usn1 Starts With $usn1 As `1esn` Order By Null[``] Descending,1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Limit {`4esn`} Starts With 1e1 Unwind {`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}[@usn5(Distinct {`5esn`} Contains $0 Contains {``},12.e12 Starts With {999} Starts With {`1esn`})] As _usn4)"),
    octest_legacy:ct_string("Load Csv With Headers From 0e0 Starts With `2esn` Starts With $`` As `3esn` Fieldterminator \"d_str\" Match (_usn3 {@usn5:`5esn`[{`4esn`}..`2esn`],_usn3:07 =~01}) Using Index #usn7:#usn8(`4esn`) Where {``} Starts With $`2esn` Starts With `1esn` Foreach(`8esn` In [_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|`` Is Not Null Is Not Null] Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where {_usn3}[..\"d_str\"][..`5esn`]) Ends With Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8)| Remove (:#usn7)-[?:_usn3|_usn3]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[:#usn7 *..010]->(#usn8 :usn1)._usn4!,{_usn4:0.12 Contains 0X0123456789ABCDEF Contains .e0}.`1esn`! Remove None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01).`5esn`!) Union Remove `5esn`:_usn4,[1.0[0X7][{`5esn`}],@usn6[$`3esn`..{`3esn`}]].#usn8!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $`` Is Not Null As `7esn` "),
    octest_legacy:ct_string("Detach Delete 1.e1[$`1esn`..@usn6][$0..$_usn3],$@usn6[..{#usn7}][..{@usn6}] Load Csv From `5esn`[..Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`])] As _usn4 "),
    octest_legacy:ct_string("Foreach(#usn8 In 1000 =~@usn6 =~0x0| Create Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=(usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4) Unwind {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] As ``) Create Allshortestpaths((:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1)) Foreach(_usn4 In {`4esn`} Starts With $usn2 Starts With $1000| Unwind {`4esn`}[$0..] As @usn5 Unwind 0e0[..010] As ``)"),
    octest_legacy:ct_string("Foreach(`1esn` In Count ( * ) Ends With $@usn5| With Distinct {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),Count ( * ) Is Null As @usn6,123.654[...e0] Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc Limit $@usn5 Starts With #usn7 Where {123456789}[0xabc..]) Start usn2=Node:usn1(`4esn`='s_str') Where 12.e12[..Null][..$#usn8] Detach Delete {_usn3} Ends With `5esn`,$#usn8[$`8esn`..{`8esn`}],{`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}[@usn5(Distinct {`5esn`} Contains $0 Contains {``},12.e12 Starts With {999} Starts With {`1esn`})]"),
    octest_legacy:ct_string("Start `4esn`=Relationship:`3esn`({`1esn`}) ,`7esn`=Rel:`4esn`(`2esn`=\"d_str\")Where usn2 Is Not Null Is Not Null Match #usn7=(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}) Using Index #usn8:`2esn`(`5esn`) Using Index `3esn`:`5esn`(#usn7) Detach Delete `1esn` In .e0 In {`3esn`}"),
    octest_legacy:ct_string("Create #usn8=((:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[`1esn`? *123456789..{_usn4:$@usn6 Ends With $_usn4 Ends With 0.12}]->(_usn4 :#usn7{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})),((usn1 {`7esn`:{999}})) Load Csv From {_usn4} Is Not Null Is Not Null As usn2  Return Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) As `1esn`,Extract(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null)[..Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})] Order By $`1esn`[{`2esn`}..] Desc,$12 Starts With $`8esn` Starts With $`1esn` Descending Union All Delete .e12[$usn2..][12.e12..],Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) Is Not Null Is Not Null,1.e1[$`1esn`..@usn6][$0..$_usn3]"),
    octest_legacy:ct_string("Detach Delete $`5esn`[$`4esn`..{@usn6}][07..$@usn6],0X7[`7esn`][123.654]"),
    octest_legacy:ct_string("Create `1esn`=Allshortestpaths((((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[? *0Xa]-({`7esn`:{999}})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})))) Union All Create Unique (#usn8 {#usn7:`4esn` Ends With 07 Ends With {`3esn`},`3esn`:{0} In $_usn3})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}),(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]}) Union Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),Shortestpath(({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null})) Merge (`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) Start _usn4=Node:`4esn`(_usn4={123456789}) Where {_usn4} In {12} In $0"),
    octest_legacy:ct_string("Remove ({#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[`2esn` *0xabc..{`3esn`:$#usn8[$`8esn`..{`8esn`}]}]-({_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1}).``?,#usn7(Distinct).`3esn`!"),
    octest_legacy:ct_string("Delete Reduce(_usn4=01[{`2esn`}..{@usn6}][$`2esn`..0.0],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0.12 =~$0 =~$0)[Shortestpath((((`1esn` {@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00})-[`6esn`?:`3esn`|:#usn8]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))))..[{12}[{7}][$123456789]]] Create Unique Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))),#usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}) Union Unwind 0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3 Union Remove Reduce(#usn7=`7esn` Starts With $#usn7 Starts With $`7esn`,#usn8 In 7[..999][..{#usn8}]|`1esn` Ends With {_usn3} Ends With `2esn`).`8esn`,Any(`8esn` In 01[2.12..`8esn`] Where {usn2}).`1esn`!,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|$#usn8 Ends With $`2esn` Ends With $@usn6].usn1?"),
    octest_legacy:ct_string("Load Csv From All(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])[..Allshortestpaths((`5esn` :`4esn`))] As @usn5  Load Csv From None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) Ends With Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Ends With Reduce(_usn3={7}[..1.0][..9e0],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`1esn` Contains {usn2} Contains $#usn8) As `` Fieldterminator 's_str' Union Merge `7esn`=Shortestpath(((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`))) On Create Set `1esn` =12.e12[``][{`2esn`}],`8esn`+=00[{`8esn`}..][{`8esn`}..],#usn7+={_usn4} Ends With `6esn` Match Shortestpath((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})),(((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}))) Using Index _usn4:@usn5(`8esn`) Using Index `8esn`:`1esn`(@usn5) Create `7esn`=Allshortestpaths((@usn6 {`3esn`:{``} Is Not Null})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})) Union Unwind $`4esn` Starts With $`5esn` Starts With False As #usn8 Detach Delete Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Is Not Null Is Not Null,{`2esn`:1000[..$0][..True],@usn5:{12} Ends With 0Xa Ends With $`6esn`}[Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn1} Ends With $0)..][Extract(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc|{`5esn`} Starts With $`5esn` Starts With .e1)..],usn1 Is Not Null"),
    octest_legacy:ct_string("Match #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}),Allshortestpaths((_usn4 :usn1)<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) Match `6esn`=((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})) Using Index usn2:@usn6(`5esn`) Using Scan `2esn`:_usn4 Where $@usn5 Contains 0xabc Contains {#usn7} Detach Delete {`3esn`}[`2esn`],{12} Ends With 0Xa Ends With $`6esn`,False[$usn1.._usn4][_usn4..{`3esn`}] Union With  *,07 Is Not Null Is Not Null Delete {@usn6}[7] Foreach(`4esn` In {`6esn`}| Create Unique `8esn`=(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]})) Union Create Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null})))"),
    octest_legacy:ct_string("Merge #usn8=Shortestpath((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) On Match Set usn2+=Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}..Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)] With  #usn8 In $@usn6,1.e1[`8esn`][00] Skip 01 Ends With 999 Ends With {`7esn`} Where 123456789 Ends With $`6esn` Ends With $#usn7"),
    octest_legacy:ct_string("Delete \"d_str\" =~1000 =~{`1esn`} Match usn2=Shortestpath(((_usn4 :``:#usn8)-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8))) Using Index `8esn`:@usn6(`5esn`)"),
    octest_legacy:ct_string("Start usn2=Node:_usn4(``={#usn7}) ,``=Node:usn2(#usn8=\"d_str\")Where usn1 Starts With usn1 Starts With $`` Return *,$`7esn`['s_str'] As #usn8,Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As `` Limit {@usn5} =~Count ( * ) =~12.0 Create (`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {999}[_usn4..] As @usn6 Fieldterminator \"d_str\" Create usn1=Shortestpath((()<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))) Return Distinct *,07[$#usn7..{1000}],0X0123456789ABCDEF =~1e1 =~{`4esn`} Order By $`5esn`[2.12..] Asc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From `5esn` Is Null As usn2  Create Unique ({_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})"),
    octest_legacy:ct_string("Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))))) Start #usn7=Node:`6esn`(`3esn`=\"d_str\") ,`7esn`=Node:``(@usn6={usn1})Where 9e12 Is Not Null Is Not Null Return Distinct 9e1[True] As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit $@usn6 Is Not Null Union All Create Unique Shortestpath((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`4esn`:`8esn` *00]->(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]->(`6esn` :`4esn`{#usn8:@usn6[$`3esn`..{`3esn`}],`3esn`:usn2[{7}]}))) Union All Foreach(`2esn` In [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][Case 1.0 In Count(*) When $_usn4[Count ( * )..] Then Null[``] When $1000[`2esn`..`5esn`][1e1..1.e1] Then .e12[@usn5..#usn7][010..{usn1}] Else 1.0[$`1esn`..][$123456789..] End][All(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)]| Detach Delete $usn1[_usn4],.e1[..usn2][..`8esn`],$123456789 Ends With `3esn` Ends With 123456789 Load Csv From {``} Starts With $`2esn` Starts With `1esn` As `` ) Delete {`3esn`} In 01,.e1 In 0,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]]"),
    octest_legacy:ct_string("Remove (`8esn` {`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]})-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01}).`7esn`!,{`7esn`:Count(*)[..usn2][..usn2]}.``!,Case 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Then {7}[$``][{@usn6}] Else usn1 Is Null End.`6esn`! Load Csv With Headers From 9e12[`6esn`..12.0] As @usn5  Start `1esn`=Node:usn2({`5esn`})  Union All Match ((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})),((_usn3 :`7esn`:_usn3)-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(_usn3 {#usn8:_usn4 Is Null Is Null})) Using Index ``:_usn3(usn1) Foreach(@usn6 In 123.654 Contains $`4esn` Contains 1.0| Load Csv From `5esn`[{`4esn`}..`2esn`] As `8esn` Fieldterminator \"d_str\" Optional Match `2esn`=(((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(@usn5 {usn2:0.e0[123.654][01]}))) Using Scan `6esn`:`` Where {`4esn`}[$123456789..][$#usn7..])"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=(usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4) Where {123456789} Is Null Is Null Union Unwind Count(*) In $`3esn` In 0Xa As `1esn`"),
    octest_legacy:ct_string("Optional Match `2esn`=Allshortestpaths((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})),Shortestpath((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null})))) Using Scan `4esn`:#usn7 Where 0.12 Contains 0X0123456789ABCDEF Contains .e0 Create Unique `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))) Union Merge Allshortestpaths(((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`))) On Match Set (:usn1{usn2:0x0 Is Null,`5esn`:{usn2} =~12})<-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]-(`5esn` {`4esn`:01 Is Null})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}).usn1 =2.12 Is Not Null Is Not Null,(:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[{`7esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4]}]-({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6})<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0X0123456789ABCDEF[123456789]}).usn2! =Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null,[{_usn3}[12.e12],123456789 Ends With 01234567 Ends With 1.e1,True =~010].`8esn`? =9e1 Contains #usn7 Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))))"),
    octest_legacy:ct_string("Merge (_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5}) On Match Set ``(Distinct 0.12 =~`5esn` =~`5esn`,Null[``]).`1esn`! =12e12 Ends With {usn1},@usn5 =7 Ends With $`4esn`,_usn4 =Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] On Match Set `6esn`:`8esn`:`7esn` Union All With  *,None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where $_usn3[.e0..$usn2]|{#usn7}[9e1..][{123456789}..]) Ends With Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}]) As ``,0.e0[123.654][01] As _usn3 Where 1000 In {`8esn`} In 01 Delete 0.0 Is Not Null Is Not Null,None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],Reduce(#usn7=$1000 Is Null,#usn7 In {``} Is Not Null|$`1esn` Ends With 9e1 Ends With $123456789) In Case When `5esn` Is Null Then True[..$`6esn`] Else `3esn`[`3esn`..][#usn8..] End Union All Foreach(_usn3 In $#usn7 Is Not Null| Load Csv With Headers From 0e0[07] As _usn4 Fieldterminator 's_str') With Distinct $1000 =~$`2esn` As `6esn`,`` Is Not Null Is Not Null Order By $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] Ascending Skip False[..``] Limit Count ( * )[$_usn4..$`4esn`] Foreach(#usn8 In $`1esn` Ends With 9e1 Ends With $123456789| Start _usn3=Node:`8esn`(`1esn`={#usn7}) Where usn2[9e12] Remove Case When 01 Contains {`8esn`} Contains 2.12 Then $_usn3[Count(*)] Else {`3esn`}[@usn6..0Xa][{12}..0Xa] End.`5esn`!,[#usn8 In 7[..999][..{#usn8}] Where {`5esn`} Contains $0 Contains {``}|#usn7 Starts With {#usn7} Starts With `7esn`].`1esn`?)"),
    octest_legacy:ct_string("Remove #usn8(Distinct $`4esn`[Null..],2.12 =~False).@usn5,[$`3esn` In $_usn4 In {_usn3},{1000} =~0 =~123.654].`3esn` Create `7esn`=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),((:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12})) Union All With  7[$`8esn`..123456789][$usn1..$usn1] As `5esn`,2.12[{7}..] As `5esn`,[usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null) As `` Skip 12.0 In {`2esn`} Where 123.654 Is Not Null Is Not Null Create Unique @usn6=(((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))),(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}) Optional Match ((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Using Scan _usn3:_usn3 Where Count ( * ) Ends With $@usn5"),
    octest_legacy:ct_string("With Distinct Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) Contains Filter(`` In `` Is Not Null Is Not Null Where 0e0 Starts With 1000 Starts With #usn7) Contains Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]}))) As #usn7 Order By 2.12 =~Count(*) Descending,`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) Asc Where 1.0 Contains $_usn4"),
    octest_legacy:ct_string("Unwind $7 Is Not Null Is Not Null As usn2"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}) As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct *,{#usn8} Is Not Null,$`5esn`[2.12..{_usn3}][_usn3..{1000}] As usn2 Order By 9e0[1.e1..][0Xa..] Descending,{_usn3:`4esn`[..Count ( * )][..{#usn7}]}[Any(_usn3 In {`3esn`}[`2esn`] Where 1e1 In \"d_str\" In `7esn`)..(:usn1{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`2esn`:_usn4|:usn2]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[`6esn`{`6esn`:Count(*) Ends With 12.0 Ends With 12}]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})][Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7|123.654[{7}..])..Filter(`3esn` In {7} Is Null Where usn1 Is Null Is Null)] Asc Create #usn8=Shortestpath((#usn8 :@usn5)) Union Remove [`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|0Xa[2.12]].`2esn`!,#usn7:usn1 Create Unique @usn6=((`7esn` {`7esn`:{123456789} Contains $#usn8})),Allshortestpaths((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})) Unwind $`2esn`[2.12..'s_str'][{@usn6}.._usn4] As `7esn`"),
    octest_legacy:ct_string("Optional Match `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8))"),
    octest_legacy:ct_string("With Distinct *,{`2esn`} Ends With {`7esn`},Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null As `5esn` Skip 12 In `3esn` In 1e1 Where $`7esn` =~{`8esn`} =~$usn1 Foreach(_usn3 In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Is Null Is Null| Unwind Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] As `8esn`) Start `6esn`=Node:usn2({`4esn`}) ,``=Relationship:_usn3(`8esn`={123456789})Where $`6esn` Is Null"),
    octest_legacy:ct_string("Start `3esn`=Relationship:#usn7('s_str') ,#usn7=Rel:_usn3({@usn5}) With  #usn8 In $@usn6,1.e1[`8esn`][00] Skip 01 Ends With 999 Ends With {`7esn`} Where 123456789 Ends With $`6esn` Ends With $#usn7 Union All Create Unique `3esn`=Shortestpath((`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})) Unwind `4esn`[`5esn`..12][@usn6..False] As `5esn` Create Allshortestpaths((`3esn` :#usn8:#usn8)),((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`))"),
    octest_legacy:ct_string("Create Shortestpath((`3esn` :`8esn`:`7esn`)-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[`3esn`? *123456789..]-(`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})),Shortestpath((`5esn` :`4esn`)) Return Distinct {``} Is Not Null As #usn7,{#usn7}[`2esn`..],Count ( * ) Contains {`1esn`} Contains 07 Order By `8esn` Is Not Null Is Not Null Desc Limit $123456789[_usn3][{#usn7}] With Distinct *,2.12 Ends With $_usn3 Ends With `3esn` As `7esn`,0 In `2esn` In 010 Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc Skip [{`3esn`} Is Not Null Is Not Null] Limit Single(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`) Contains Case When {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Then 's_str'[00][{`5esn`}] Else $#usn7 Is Null End Contains None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) Where $`8esn` Contains 123456789 Contains $usn2"),
    octest_legacy:ct_string("Create Unique (((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`}))),Allshortestpaths((usn2 :`4esn`))"),
    octest_legacy:ct_string("Remove usn1:_usn4,[`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|0Xa[2.12]].`2esn`! Remove (_usn3 :usn2{#usn7:{999} Starts With {0}})<-[`4esn`:@usn6|`6esn`{`4esn`:`2esn` Is Null,@usn5:00 Starts With 0xabc}]-({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6}).`2esn`? Create Unique ((:@usn6:#usn8)<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]})),@usn6=Shortestpath((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null}))"),
    octest_legacy:ct_string("Remove {#usn8:#usn7 Contains _usn3 Contains {`3esn`}}._usn3?,{`3esn`}.`4esn` Union All Load Csv From None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null As `2esn`  Union All Unwind 2.12 Contains usn2 Contains True As `4esn` With Distinct Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn`,{``}[$#usn8..$usn1] As @usn6,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null Order By $0[..9e1] Descending,{usn1}[Count(*)..] Desc Skip (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Where $`5esn` In $`6esn` Load Csv With Headers From {0}[\"d_str\"..07][0..'s_str'] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(`7esn` In Case When _usn4 Is Null Is Null Then Null[$#usn7] When $`2esn` Is Null Is Null Then $`3esn` =~{#usn8} End[(@usn5 :usn1)-[`2esn`:_usn4|:usn2]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})..Reduce(@usn5=`3esn`[{usn1}],`8esn` In 01[2.12..`8esn`]|`5esn` Starts With `3esn`)][Shortestpath((:``:#usn8{``:1.0[0e0..0.e0]}))..None(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])]| Optional Match ((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Using Scan _usn3:_usn3 Where Count ( * ) Ends With $@usn5 Optional Match `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),`2esn`=((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})) Where $usn1[{`5esn`}][$`6esn`]) Detach Delete 1e1 Contains 0e0"),
    octest_legacy:ct_string("Create `7esn`=Allshortestpaths(((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[`1esn`?:usn2|``{_usn4:$`4esn`[..$`3esn`][..0.0],@usn6:0e0 Starts With 2.12 Starts With $12}]->(:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`8esn` *0X0123456789ABCDEF]->(usn2 :_usn4))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3))"),
    octest_legacy:ct_string("Unwind 7 Starts With `6esn` Starts With 01234567 As #usn8 Union All Return Distinct Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))) Is Null Is Null As @usn5,1000 In `7esn` In 9e12 As `6esn`,`1esn`[..{`2esn`}][..$_usn4] As #usn7 Union All Return Distinct (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Skip Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})))] Load Csv With Headers From Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(@usn5 In 2.12 Is Null| Load Csv With Headers From `5esn`[.e0..][07..] As `6esn` Fieldterminator \"d_str\" Match _usn4=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})) Union Detach Delete $`5esn`[$`4esn`..{@usn6}][07..$@usn6],0X7[`7esn`][123.654]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {``}[...e12] As `1esn` Fieldterminator \"d_str\" Delete [`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\"] Is Null"),
    octest_legacy:ct_string("Foreach(`4esn` In $12 Starts With {`1esn`} Starts With Null| Start `7esn`=Rel( {``}) Where `1esn` =~0 =~$#usn7 Delete Extract(#usn7 In {``} Is Not Null Where 123456789[0xabc..'s_str'][``..`1esn`])[Reduce(usn1=False,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$_usn4 Starts With 1e1)]) Union Load Csv From {usn1} In 2.12 In 1000 As _usn4  Merge Shortestpath((((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1)))) On Create Set `1esn`+=0.0 =~999,Case When `8esn` Ends With 999 Ends With .e12 Then 12.e12[7..$`6esn`] When 1000 In {`8esn`} In 01 Then `2esn` Starts With $_usn4 Else 0Xa Starts With {`6esn`} Starts With $usn1 End.`3esn`! =Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where `3esn`[{0}][usn1]) Starts With Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))),@usn5 =`3esn` Is Null On Create Set `` =$#usn7 Contains 0x0 Contains 1000,#usn7+={``} Is Not Null,Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``).`6esn`! ={0} Contains 0.0 Contains $@usn5"),
    octest_legacy:ct_string("Foreach(usn1 In {12} Ends With 0Xa Ends With $`6esn`| Create Unique Allshortestpaths(((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]->(:@usn6:#usn8))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3)) Optional Match `1esn`=(#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]}),@usn5=Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`})) Where 1000[0X7..2.12]) Return Distinct *,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]|123456789 Ends With 12.e12 Ends With $`7esn`) Is Not Null As `6esn` Order By {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])][..(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})] Asc,usn2 Is Null Desc,$_usn3 Starts With $@usn6 Starts With {`8esn`} Desc Limit Reduce(`3esn`=12.0[123.654][Count(*)],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|`1esn` =~\"d_str\")[..Case When $`` Is Not Null Then 12[1.e1..{_usn3}][1.e1..1.0] When 7[True..][2.12..] Then $_usn4 Is Not Null Is Not Null End][..Case When $#usn8[$`2esn`..][{`2esn`}..] Then 0X7[1000..{`1esn`}] When {#usn8}[{7}] Then 07 In `2esn` In 12e12 Else $`1esn` Ends With 9e1 Ends With $123456789 End]"),
    octest_legacy:ct_string("Start _usn4=Rel:#usn8({_usn3}) ,#usn8=Node:@usn5(usn2='s_str')Where 1.0 Contains $_usn4 Foreach(#usn8 In $`3esn` In Null| Optional Match #usn8=(`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12}),(:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Using Index `6esn`:`8esn`(``)) Union Remove [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where $7[0.12][usn1]].`3esn`!,[#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']|`2esn` Is Null].usn1 Start _usn4=Node:`2esn`(#usn7='s_str') ,`3esn`=Node:#usn8(`1esn`={`3esn`})Where @usn6 Is Null Is Null"),
    octest_legacy:ct_string("Create Unique `3esn`=(((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1))),(`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Foreach(usn1 In \"d_str\" Starts With 01| Unwind [`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"]|$#usn7 Is Null][..{`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]}] As @usn6)"),
    octest_legacy:ct_string("Return Distinct $12 =~$_usn3 As #usn8,`7esn` Ends With 0x0 As @usn6,$1000 =~$`2esn` As `7esn` Skip All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End]"),
    octest_legacy:ct_string("Start _usn4=Node:`3esn`(`2esn`={usn1}) ,`6esn`=Node:``('s_str') Load Csv With Headers From $@usn6 Ends With $_usn4 Ends With 0.12 As `4esn`  Start `8esn`=Relationship:`4esn`(`1esn`={`2esn`})  Union All Return {#usn7}[..9e12][..`8esn`] As #usn7,{0}[{`8esn`}..`4esn`] As #usn8 Order By 0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` Asc Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] Limit `3esn`[$`1esn`..999][``..$123456789] Create `6esn`=({usn1:$`3esn` In $_usn4 In {_usn3}})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})-[``?]-(#usn8 :@usn6:#usn8{`2esn`:$7 Is Not Null Is Not Null,`1esn`:`1esn` =~\"d_str\"}),_usn4=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null}) Load Csv With Headers From 123456789 Ends With $`6esn` Ends With $#usn7 As `6esn` Fieldterminator 's_str' Union All Load Csv With Headers From 0X7[1000..{`1esn`}] As usn1  Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF] Start `7esn`=Node:`7esn`(_usn4={@usn6}) "),
    octest_legacy:ct_string("Return Distinct {``}[$#usn8..$usn1] As `3esn`,{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2]) As _usn3,$`6esn`[{999}..9e0] Order By Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End] Descending,``[12.0..0e0][{`5esn`}..`7esn`] Asc,Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Descending Skip {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Create (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null}) Create Unique Allshortestpaths(((usn2 :`6esn`{#usn7:Count ( * ) Contains 07})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),`3esn`=({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]->(_usn3 :`5esn`) Union Merge (#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(#usn7 ) On Create Set `6esn` =#usn7(usn2 Is Not Null Is Not Null,$`6esn` Ends With Count(*)) Is Null Is Null,Case $usn1 =~`` When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When $_usn3[Count(*)] Then $`5esn` In $`` In 123.654 End.`5esn`? =Reduce(`2esn`=$`5esn` In $`` In 123.654,#usn8 In {`5esn`}[.e1..``]|$12[True..][{0}..]) =~Shortestpath((((:#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})))),`5esn`+=2.12 =~Count(*) Create Unique `8esn`=Allshortestpaths((((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))),_usn4=(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})<-[``?]->(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Create Unique Allshortestpaths(((`8esn` )<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))),`6esn`=(_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})"),
    octest_legacy:ct_string("Start ``=Node:@usn5({0}) ,`7esn`=Rel:`4esn`(`2esn`=\"d_str\")Where `3esn`[`3esn`..][#usn8..] Merge _usn3=((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}))"),
    octest_legacy:ct_string("With  *,`7esn` Is Null As `7esn`,None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc,(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null Descending,.e0[..0X0123456789ABCDEF][...e12] Descending Limit {``}[...e12] Load Csv With Headers From ({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})<-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})[(@usn5 :`6esn`)-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]->(:@usn6:#usn8)..{`2esn`:{_usn4} Starts With 0.e0 Starts With 0x0}] As `1esn`  Load Csv From Any(#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]) In Case When 123.654[0e0..$``][$`1esn`..$`8esn`] Then $_usn3['s_str'][07] When {`3esn`}[..07][..{`5esn`}] Then 's_str' Is Not Null Is Not Null End In {`7esn`:{1000}[{_usn3}..],usn2:2.12 =~False} As `7esn` Fieldterminator \"d_str\" Union All Unwind {``} Ends With `7esn` Ends With 0.0 As `6esn` Union All Start #usn7=Node:``(\"d_str\") ,`3esn`=Rel:`7esn`(`3esn`='s_str')Where 9e0 Start `7esn`=Node:_usn4(#usn7=\"d_str\") ,`5esn`=Rel:`4esn`(`2esn`=\"d_str\") Unwind $#usn8[$`8esn`..{`8esn`}] As `6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {_usn4} Is Not Null Is Not Null As `5esn`  Return `6esn`[..$@usn6] As `` Order By Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0])[Case $`3esn` In $`6esn` In $`` When {_usn3}[..\"d_str\"] Then `3esn`[{usn1}] Else {999} Starts With {0} End][usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])] Desc,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) Desc Limit Count(*) Contains $#usn7 Contains 1e1 Optional Match ``=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})) Using Index `2esn`:`3esn`(@usn6) Using Join On `5esn`,#usn7 Where 123456789 Ends With $`6esn` Ends With $#usn7"),
    octest_legacy:ct_string("With Distinct *,`7esn` Is Null As `7esn`,None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End Limit [@usn6 Contains Null Contains $`7esn`,{`4esn`} Starts With $usn2 Starts With $1000] Ends With Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn4[0e0..][False..]) Ends With (`1esn` :`2esn`:usn1)-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null})"),
    octest_legacy:ct_string("Return {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Union Unwind 7[{0}..{_usn4}] As `3esn` Create `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8)) Union All Optional Match usn2=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Using Index `2esn`:usn1(`2esn`)"),
    octest_legacy:ct_string("Create (:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})-[?:`5esn`]->(:usn2),`2esn`=Shortestpath((({usn2:7[..999][..{#usn8}]}))) Union All Foreach(#usn8 In $`7esn` Is Not Null| Create #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Create `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))) Delete Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})],Case $1000[999] When `4esn`[`5esn`..12][@usn6..False] Then {0} Ends With $_usn3 Ends With $`7esn` When $usn1 In {999} In $#usn7 Then Count ( * )[True..][{#usn7}..] End Ends With {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null},`7esn` In 00 Start _usn4=Relationship:`1esn`({12}) ,@usn6=Relationship:`8esn`({`3esn`}) Union All Start `6esn`=Rel( {0})  With Distinct [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]) Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc Where $usn2[{@usn5}]"),
    octest_legacy:ct_string("Create (((:`6esn`{_usn4:'s_str' Ends With 7 Ends With {_usn4},@usn6:$`2esn`})-[:@usn6|`6esn` *1000..00]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2))),@usn5=((:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12})) Unwind 0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3 Load Csv With Headers From None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As usn1 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 9e12[`6esn`..12.0] As @usn6  Merge (`7esn` {@usn5:{7}[..1.0][..9e0]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]}) On Match Set `2esn`+=#usn7 Contains _usn3 Contains {`3esn`},Reduce(`8esn`={usn1} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0xabc[.e0]).`3esn`! =$@usn5 Starts With 01 Starts With .e0 Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12]"),
    octest_legacy:ct_string("Return Distinct {``} Is Not Null As #usn7,{#usn7}[`2esn`..],Count ( * ) Contains {`1esn`} Contains 07 Order By `8esn` Is Not Null Is Not Null Desc Limit $123456789[_usn3][{#usn7}]"),
    octest_legacy:ct_string("Return Distinct Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] As _usn4,Allshortestpaths((:@usn5{_usn3:07 =~01})) Starts With [`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`}] Starts With ({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:_usn4|:usn2]-(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}) Skip 7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Union All Foreach(_usn3 In {#usn7} Contains _usn3 Contains 12.e12| Create Unique #usn8=({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789) Match (usn2 {``:01[{@usn5}]}) Where {123456789} =~`8esn` =~@usn5) Union Foreach(`7esn` In {`5esn`} =~`4esn` =~{_usn4}| Optional Match `7esn`=Shortestpath(((:`5esn`{``:1.0[0e0..0.e0]})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`))) Using Index `7esn`:usn2(`6esn`)) Load Csv From {``} Starts With $`2esn` Starts With `1esn` As ``  Delete Extract(#usn7 In {``} Is Not Null Where 123456789[0xabc..'s_str'][``..`1esn`])[Reduce(usn1=False,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$_usn4 Starts With 1e1)]"),
    octest_legacy:ct_string("With  2.12[$`5esn`][$#usn8],$7 Ends With `4esn` As `5esn` Order By ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}) Asc,{#usn8} Starts With 00 Starts With {`6esn`} Desc Skip `1esn`[{usn1}..``][7..$#usn8] Unwind $123456789[_usn3][{#usn7}] As `3esn` Create `1esn`=Shortestpath((usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[ *..010{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}}]->(:_usn4$@usn5)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})),((:_usn4{@usn6})) Union All Remove Case When $#usn8[$`8esn`..{`8esn`}] Then $#usn8[$`8esn`..{`8esn`}] Else #usn8 Is Not Null Is Not Null End.@usn6! Start usn1=Node:_usn3({`6esn`}) ,`5esn`=Relationship(*)"),
    octest_legacy:ct_string("Create usn2=Allshortestpaths(((@usn5 :`4esn`))),(@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3) Union All Unwind {`2esn`} In 12 As `7esn` Foreach(`5esn` In {123456789} Starts With 0.0 Starts With `5esn`| Remove 2.12.`7esn`!,[@usn6 Contains $1000 Contains {`7esn`}].`3esn`?) Union All Optional Match @usn6=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),Shortestpath(((@usn6 :`8esn`:`7esn`)<-[`6esn`?:`4esn` *..01]->(`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?]-(`7esn` :`5esn`))) Unwind .e12[$usn2..][12.e12..] As `6esn`"),
    octest_legacy:ct_string("Return *,$`7esn`['s_str'] As #usn8,Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As `` Limit {@usn5} =~Count ( * ) =~12.0 Union Load Csv From 9e1[2.12..{#usn8}] As `2esn`  Unwind $@usn5 Is Not Null Is Not Null As `8esn` Start `1esn`=Rel:`4esn`(`4esn`='s_str') Where 123456789 Is Null"),
    octest_legacy:ct_string("Match _usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))),(:``:#usn8{_usn3:$`7esn` Is Null Is Null}) Using Scan `4esn`:#usn7 Using Scan `5esn`:usn2 Union All Merge `4esn`=Allshortestpaths((({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}}))) Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF] Union All Merge `5esn`=(((:@usn6:#usn8{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(`4esn` {_usn4:0Xa =~Null =~$``})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))) On Match Set _usn4+=.e1 Ends With 1e1 Ends With @usn5,#usn8+=1.e1[`8esn`][00],`1esn` =[1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..])"),
    octest_legacy:ct_string("Unwind $`1esn`[{`2esn`}..] As `7esn` Unwind [#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn2 Is Null|@usn6[$`3esn`..{`3esn`}]] In Filter(_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`) As _usn3 With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..] Union All Detach Delete {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12),$_usn4 Is Null Is Null Match #usn7=Shortestpath((`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)) Using Join On `8esn`,@usn6 Where 999 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove Any(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]).usn2 Remove `8esn`(Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},9e1[$usn2]).`8esn` Union Return *,0X7[1000..{`1esn`}],12.e12 Is Null Is Null Order By $`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Descending,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Skip `4esn` Is Not Null Is Not Null Load Csv With Headers From 0Xa Starts With {`6esn`} Starts With $usn1 As ``  Union All Merge @usn5=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})) On Create Set [{#usn8}[010]].`8esn`! =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),`2esn`+=9e1[1000][{123456789}] On Create Set `` =2.12 =~False,#usn7+=$usn1[..{`6esn`}],#usn7+=(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} Unwind Count(*) In $`3esn` In 0Xa As `1esn` Return Distinct {123456789} =~`8esn` =~@usn5 As `5esn` Order By {`4esn`} In 1.0 Descending,`8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Descending Skip {`4esn`}[#usn7..$123456789][{7}..usn2]"),
    octest_legacy:ct_string("Load Csv With Headers From {`3esn`}[..07][..{`5esn`}] As `1esn` Fieldterminator 's_str' Delete 12.0 Contains #usn7,$12[Null..Count(*)][{`5esn`}..{999}],Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..]) Start `3esn`=Rel:#usn8(`8esn`={`6esn`}) ,usn1=Node:`3esn`(`2esn`={usn1})"),
    octest_legacy:ct_string("Foreach(#usn8 In Shortestpath(((:`8esn`:`7esn`$#usn7)-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) In [_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..]|1.0 Is Null Is Null] In Case When Count ( * ) Contains 07 Then 123.654[$`1esn`] End| Detach Delete .e0[12.e12..],Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null,0.12[`2esn`..{`6esn`}] Optional Match (({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Using Scan `1esn`:`3esn` Where 7[..999][..{#usn8}]) Union All Remove (:_usn4{@usn6})-[`5esn`?:_usn4|:usn2{_usn4:{999}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]})._usn3!,Case `1esn`[{usn1}..``][7..$#usn8] When 9e1[2.12] Then $_usn4 Is Not Null Is Not Null When $`7esn` =~{`8esn`} =~$usn1 Then $`4esn`[9e12..123.654] Else {123456789}[0xabc..] End.`7esn`?,None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}).usn1? Detach Delete Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))),7[$_usn4..9e0],Count(*) Ends With 12.0 Ends With 12 Return Distinct usn2 Is Null,Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] As `6esn` Order By Case When Count(*) In $12 Then .e0 Starts With 0 Starts With 0.e0 When {usn1}[0X0123456789ABCDEF] Then $`6esn`[123456789..12][True..{`3esn`}] Else 7 Starts With {@usn6} Starts With $`` End[Case @usn6 Contains $1000 Contains {`7esn`} When 0.12 =~$0 =~$0 Then $usn1[.._usn4][..False] When {0} Ends With $_usn3 Ends With $`7esn` Then 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] End..] Desc,$#usn7[@usn5..{1000}][1.e1..7] Asc,123456789[$@usn5..] Asc"),
    octest_legacy:ct_string("Load Csv From {usn2} =~12 As #usn8  Unwind [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] As `8esn` Union Remove [`5esn` In $999[0.0..] Where #usn7 =~Count ( * ) =~``|\"d_str\" Is Null Is Null].`5esn`!,(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12})-[usn1:`8esn`]-({_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null}).`2esn`,Case When 9e1[$usn2] Then {7}[..12e12][..Count ( * )] When 12.e12[$_usn3..] Then {`8esn`} Ends With `6esn` End.#usn7? Match `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Where {7}[..12e12][..Count ( * )] Foreach(#usn7 In {`3esn`} In $@usn5 In _usn4| Detach Delete {999} Contains .e0 Contains 12.0,$usn1[{`5esn`}][$`6esn`])"),
    octest_legacy:ct_string("Load Csv With Headers From Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))[[{_usn4} In {12} In $0,$`5esn`[2.12..],12[1.e1..{_usn3}][1.e1..1.0]]][[12e12 Is Not Null Is Not Null]] As _usn3 Fieldterminator 's_str' Create ((usn2 :`4esn`)),(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}) Optional Match ``=Shortestpath((`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})) Using Scan `6esn`:`` Using Scan `6esn`:`1esn` Where \"d_str\" Is Null Is Null Union Unwind $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] As `5esn` With Distinct *,9e1[2.12],$_usn4 Contains Null Contains #usn8 As #usn7 Order By (usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})<-[ *123456789..]-(:@usn5) Is Null Is Null Desc,False[..{`1esn`}] Desc Skip 1e1[$`5esn`][{`3esn`}] Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]] Where 123.654 Contains $`4esn` Contains 1.0 Create Shortestpath((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(_usn4 {`5esn`:\"d_str\" Starts With 01})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2)),#usn8=Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Union All Foreach(_usn4 In [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null]| Start ``=Rel:#usn8({12})  Match ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Using Scan _usn4:@usn6 Where `` Ends With 0Xa Ends With `2esn`)"),
    octest_legacy:ct_string("Start `1esn`=Node:usn2({12}) ,usn1=Node:`7esn`(`3esn`={``})Where {usn2} Foreach(_usn3 In (_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})<-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :`3esn`:@usn5)<-[? *..999]-(#usn8 :`5esn`{#usn8:0xabc[.e0]})[Shortestpath(({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[`6esn`? *0..]-(:usn1{`3esn`:{123456789} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))..Allshortestpaths((_usn4 :#usn7)<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))]| Delete `4esn`[$999..{`1esn`}][{@usn6}.._usn3] Create #usn8=Shortestpath(((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})))) Union All Start usn2=Rel:usn2({`4esn`}) Where $usn1 In {999} In $#usn7"),
    octest_legacy:ct_string("Match `7esn`=Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})))),`5esn`=((:@usn5)-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)) Using Scan #usn7:`2esn` Where $999 Merge Shortestpath(({`1esn`:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}]->(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`6esn`?:`3esn`|:#usn8{usn1:$usn1 In {999} In $#usn7}]-({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})) On Create Set `8esn`+=[9e1[..$`2esn`]][{`8esn`:False =~$7 =~2.12,`3esn`:Count ( * ) =~$usn2 =~$usn2}][Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End] On Create Set None(`1esn` In {`6esn`}[..$@usn6][..`7esn`]).@usn5? =12.0 =~{`2esn`} =~{`1esn`},@usn6 =Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Remove Filter(`5esn` In \"d_str\" Is Null Is Null Where `6esn`[..$@usn6]).usn2,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {123456789} Is Null Is Null).`` Union All Remove Case When _usn3[$`8esn`] Then $0[..9e1] End.usn1?,[_usn3[_usn3..][12.e12..]].`8esn`!,None(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False).`4esn`? Start `7esn`=Rel:_usn4(``={#usn7})  Start `6esn`=Relationship:`2esn`({0}) Where 0e0[..010] Union Start #usn7=Node:_usn4(#usn7=\"d_str\") "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From False[..``] As usn1 Fieldterminator 's_str' Unwind {``}[010..][0xabc..] As `` Match (((usn2 {``:01[{@usn5}]})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[`6esn`? *0..]-(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12}))) Using Index _usn4:`8esn`(#usn7)"),
    octest_legacy:ct_string("Unwind Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As #usn8 Return Distinct {123456789} =~`8esn` =~@usn5 As `5esn` Order By {`4esn`} In 1.0 Descending,`8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Descending Skip {`4esn`}[#usn7..$123456789][{7}..usn2] Delete 123.654 Is Not Null Union All Match (({`1esn`})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[`3esn`:#usn7]-(:#usn8:#usn8{_usn4})) Using Index `3esn`:_usn3(`6esn`) Where `7esn`[..{usn1}] Start ``=Rel:#usn8(`5esn`=\"d_str\") ,`3esn`=Relationship:#usn7('s_str')"),
    octest_legacy:ct_string("Detach Delete Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}),Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..],$999 Delete $`8esn` In {`1esn`} In 12,Reduce(`4esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|False[..``]) Is Null Is Null,Reduce(`6esn`=@usn5 Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{12} Ends With 1.0 Ends With .e0)[Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|`7esn`[..2.12][..00])] Union All Start `8esn`=Relationship:`4esn`(`1esn`={`2esn`})  With Distinct *,`1esn`(Distinct $1000[999]) =~Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) =~{`6esn`:'s_str'[00][{`5esn`}]},{_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] As `` Order By {0}[{`8esn`}..`4esn`] Desc,Case When Count ( * ) Contains 07 Then $`2esn` When 1.0 Is Null Is Null Then `7esn`[..2.12][..{usn1}] End Is Not Null Desc Limit $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Create Unique Allshortestpaths((:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1))"),
    octest_legacy:ct_string("Remove {`4esn`:{`4esn`}[$123456789..][$#usn7..]}.`1esn` Foreach(_usn4 In (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End| Optional Match (((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[#usn7:@usn5 *0X7..]->(`2esn` ))),Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where `7esn` In {123456789} In `1esn`) Create Unique `3esn`=((`7esn` {`4esn`:{usn1} Ends With $0})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})-[`7esn` *..0x0]-(`2esn` :_usn4) Union With  *,{12} Is Not Null As `7esn` Skip usn2 Is Not Null Where @usn6[$`3esn`..{`3esn`}] Create `3esn`=({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null})-[usn1? *0X0123456789ABCDEF]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}),`4esn`=Allshortestpaths((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))) Union Load Csv From {``} Starts With $`2esn` Starts With `1esn` As ``  Create (({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})),`7esn`=Allshortestpaths((:`4esn`{`5esn`})<-[@usn6?:`5esn`]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})) Merge #usn8=((:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[`1esn`? *123456789..{_usn4:$@usn6 Ends With $_usn4 Ends With 0.12}]->(_usn4 :#usn7{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) On Create Set Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]).`4esn`? =(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End,`8esn` =All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]],_usn4 =$#usn8 In 0Xa In `6esn`"),
    octest_legacy:ct_string("Unwind {``} Is Not Null As `1esn` Start @usn5=Relationship:``(\"d_str\") "),
    octest_legacy:ct_string("Create Unique `3esn`=Shortestpath((`3esn` :@usn5)<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->({@usn5:{usn2}[.e0..$999]})) Union Optional Match Shortestpath(({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[:`3esn`|:#usn8 *1000..00{usn1:0[`7esn`..]}]-(usn1 :`3esn`:@usn5)),`4esn`=Allshortestpaths((:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})) Using Index ``:usn1(@usn5) Where 12.0 =~999 =~$_usn3 Delete {`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2]) Foreach(`8esn` In .e1 In 0Xa In #usn7| With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Where 0.e0 Starts With `2esn` Return Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `4esn`,usn2 Is Null As `7esn`,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]]) Union All With Distinct {0} As `7esn`,1000[..$0][..True] Limit Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End]"),
    octest_legacy:ct_string("Unwind False Ends With `3esn` As `8esn` Union All Foreach(`4esn` In $#usn7 Is Not Null Is Not Null| With  *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip Case When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` When {`7esn`}[..{`4esn`}] Then {usn1} Ends With $0 End[All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"])..[Count ( * )[0.12...e1],1.0[00..],$``]][`4esn`(`4esn` Ends With 07 Ends With {`3esn`})..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `1esn` =~\"d_str\"|9e12 Is Not Null Is Not Null)] Limit Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Where 00 Starts With 0xabc Optional Match _usn3=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})),usn2=({@usn5:usn1 Is Not Null})<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})) Remove $999.``,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789].`5esn`?,(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})-[usn2?]-(:@usn5)<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->(`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}}).`5esn`? Union All Load Csv With Headers From 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] As #usn8 Fieldterminator 's_str' Detach Delete $#usn7 Contains 0x0 Contains 1000,{7}[..12e12][..Count ( * )],None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Allshortestpaths((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}))..{@usn6:.e0[..$`8esn`],`6esn`:12 Ends With 0x0 Ends With 0.e0}]"),
    octest_legacy:ct_string("Create Unique _usn4=((@usn6 )<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[?:`8esn` *..0x0{`2esn`:$`4esn`[Null..]}]->({#usn8:0xabc[.e0]})),Shortestpath(((`6esn` :`4esn`))) Remove {usn1:#usn7 Is Null Is Null,`5esn`:{`3esn`} In 0X7}.`8esn`! Create Shortestpath((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654}))"),
    octest_legacy:ct_string("Remove Extract(#usn8 In {`5esn`}[.e1..``]|12e12 Ends With {usn1})._usn3! Union All Delete Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))],7[$`8esn`..123456789][$usn1..$usn1],.e0 Ends With 0.12 Union Return 123.654 Is Not Null Is Not Null As `8esn` Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From .e12 In None(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null) In Reduce(`3esn`=01[{`2esn`}..{@usn6}][$`2esn`..0.0],`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$_usn4[1.e1]['s_str']) As `1esn` Fieldterminator 's_str' Merge `1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})) Detach Delete {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12),$_usn4 Is Null Is Null"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0X0123456789ABCDEF[{_usn4}..00] As @usn5  Create Unique (:`1esn`{})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789) Remove Case When {usn2} =~12 Then `7esn`[..2.12][..00] When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null End.usn2?,[1000 =~@usn6 =~0x0,12.e12[7..$`6esn`],_usn4 Is Null Is Null].#usn7,[{_usn4} Is Not Null Is Not Null,{#usn7} Is Not Null Is Not Null,$usn1[.._usn4][..False]].`4esn`!"),
    octest_legacy:ct_string("With Distinct {123456789} Contains $#usn8 As `3esn`,{7}[..12e12][..Count ( * )],$0[$`1esn`..07] Order By 0Xa[$123456789..123.654][.e12..0.e0] Asc,1000 In `7esn` In 9e12 Asc,Null[$#usn7] Asc Where 0X7 =~9e1 Union Optional Match `3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}),Shortestpath((:`8esn`:`7esn`)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})) Using Index ``:_usn4(_usn4) Where {_usn3}[..\"d_str\"] Merge `6esn`=(@usn5 {`7esn`:$`6esn`[010..]})-[?:`8esn`{`3esn`:1.0 In Count(*)}]-(`4esn` :#usn7{``:$#usn7[@usn5..{1000}][1.e1..7]})-[`5esn`?:@usn5{`4esn`:0Xa =~Null =~$``}]->(:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000}) On Create Set `4esn`+=(`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)],Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! ={@usn6}[{999}..][00..] On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Union Return Distinct 010[Count(*)..12][$_usn3..{`8esn`}],Filter(_usn3 In {`3esn`}[`2esn`] Where False =~$7 =~2.12)[Case When .e12 Is Not Null Is Not Null Then `1esn` In .e0 In {`3esn`} When 7 Starts With {@usn6} Starts With $`` Then 0X0123456789ABCDEF =~1e1 =~{`4esn`} Else {`4esn`}[$123456789..][$#usn7..] End] As `5esn`,9e1[2.12] As _usn3 Load Csv From $123456789 Starts With {_usn4} Starts With $1000 As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null As `3esn`  Delete {#usn7} Is Not Null Is Not Null,None(`3esn` In {7} Is Null Where 0Xa[2.12]) Is Null Is Null,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] Union All Start `5esn`=Node:`6esn`(`8esn`='s_str') ,`7esn`=Rel:#usn8({_usn3})Where 0.e0 Starts With `2esn` Remove #usn8(Distinct $`4esn`[Null..],2.12 =~False).@usn5,[$`3esn` In $_usn4 In {_usn3},{1000} =~0 =~123.654].`3esn` Union All Unwind $`7esn` Is Null Is Null As _usn3 With  *,{_usn4} =~$_usn4 As _usn4 Order By {12} =~#usn8 Asc,[00[$`7esn`],{usn1} In 2.12 In 1000,01 Ends With 999 Ends With {`7esn`}] Starts With Reduce(`6esn`=00[{`8esn`}..][{`8esn`}..],`5esn` In $999[0.0..]|`5esn`[{`4esn`}..`2esn`]) Asc,$1000 Is Null Is Null Descending Skip False[$usn1.._usn4][_usn4..{`3esn`}]"),
    octest_legacy:ct_string("Return 2.12 Is Null,$_usn3 Ends With 0x0 Ends With 12.0 Order By {`3esn`} In $@usn5 In _usn4 Asc Limit [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] Ends With None(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Start #usn8=Rel:usn1(\"d_str\") ,@usn6=Node:_usn3({@usn5}) Foreach(`7esn` In $`1esn` Starts With {`8esn`}| Start #usn8=Rel:`7esn`(`6esn`={_usn4})  Match @usn5=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})),(`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}))"),
    octest_legacy:ct_string("Create Unique @usn5=Allshortestpaths((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Create @usn5=Allshortestpaths((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)),(((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`}))) Unwind {`5esn`}[0..`8esn`][0..Null] As usn1 Union Unwind $999 Is Not Null As `` Union All Optional Match ({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}) Using Join On `8esn`,@usn5 Using Scan `6esn`:`1esn` Where $#usn8[Count ( * )] With  {123456789} Contains $#usn8 As `3esn`,{7}[..12e12][..Count ( * )],$0[$`1esn`..07] Order By {`8esn`}[..{`8esn`}][..$`3esn`] Descending,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Desc Limit None(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]) In (`4esn` {`6esn`:#usn8[..{#usn7}]})<-[_usn4 *..999]->({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[#usn8? *0..]->(#usn7 ) In Extract(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )) Where $`3esn` In $`6esn` In $``"),
    octest_legacy:ct_string("Return *,12[..$`4esn`],Case When 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Then {1000} =~0 =~123.654 When `8esn`[`4esn`..{#usn8}][$12..2.12] Then 00[$`7esn`] End Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`7esn` =~{`8esn`} =~$usn1) Contains [0.12 =~`5esn` =~`5esn`] Order By {12} Contains {123456789} Contains `4esn` Desc,{_usn3:`4esn`[..Count ( * )][..{#usn7}]}[..{_usn4:`5esn`[.e0..][07..],`3esn`:{0} In $_usn3}][..Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))] Desc,`1esn` In .e0 In {`3esn`} Descending Limit 7 Contains @usn6 Union Start `2esn`=Relationship:`4esn`(`1esn`={`2esn`}) ,`3esn`=Rel:``({`1esn`})Where `4esn` Is Not Null Is Not Null Start usn2=Relationship:`3esn`({`1esn`}) Where `1esn`[..{@usn6}][..$123456789] Foreach(`3esn` In .e1 In 0| Load Csv From {_usn4} Starts With 0.e0 Starts With 0x0 As `8esn` Fieldterminator 's_str' Start `1esn`=Node( {_usn4}) ,`6esn`=Relationship:`4esn`(`1esn`={`2esn`})Where {_usn3}[..\"d_str\"])"),
    octest_legacy:ct_string("Return 1000 In `7esn` In 9e12 As `6esn`,$12 Starts With {`1esn`} Starts With Null Skip .e12[@usn5..$12] Limit (`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]->({@usn6:$usn1 Ends With $`` Ends With $12}) Starts With `3esn`($123456789 Is Null Is Null,0Xa[usn2..]) Starts With (@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12}) Return Distinct *,`6esn`[2.12..01][{``}..False] As @usn5,Reduce(`5esn`=$`5esn`[{`3esn`}],`3esn` In {7} Is Null|`6esn`[12..$usn2][{#usn8}..{usn2}]) In @usn5(Distinct _usn4 Starts With $_usn4 Starts With 12.e12) In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Count ( * ) Ends With 12.0) Order By `4esn`[..Count ( * )][..{#usn7}] Ascending Create Unique `1esn`=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-({#usn8:0xabc[.e0]}))))"),
    octest_legacy:ct_string("Foreach(_usn4 In $999 In $_usn3 In {`5esn`}| Load Csv From {999}[1000..{usn2}] As @usn6 ) Start _usn4=Node:usn2(`8esn`='s_str') Where `7esn`[9e0..] Foreach(`1esn` In 07 Is Not Null Is Not Null| Remove (_usn4 {usn1:True Contains {0} Contains 7})-[`3esn`:#usn7]-(`2esn` :_usn3:_usn3).@usn6)"),
    octest_legacy:ct_string("Return *,`4esn`[`5esn`..12][@usn6..False],None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn` Order By {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] Ascending,.e1 =~{@usn6} =~Null Asc,(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case `8esn` Contains $usn1 Contains $12 When 12.e12[7..$`6esn`] Then {12} Contains {123456789} Contains `4esn` When $`1esn`[1.0..][_usn3..] Then `7esn`[$0][9e12] End Desc Skip 123.654[`3esn`..] Limit `7esn`[$12..][$`8esn`..] Load Csv From 123.654[...e0] As usn2  Union All Create Unique `1esn`=(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})<-[`2esn`?:`7esn` *0X7..]-(:_usn4)<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]}),usn1=((({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[{``:12.e12[$_usn3..],_usn3:$`6esn`[010..]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}))) With Distinct 12 Ends With $usn2 As #usn8,$`3esn` In Null As @usn6 Order By 9e1 In 2.12 Asc,True[{`7esn`}..] Asc,{`2esn`}[``..07][0x0..1000] Desc Skip [@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null] Is Null Is Null Where Null Ends With {`5esn`} Ends With 0.e0 Union All Start #usn7=Node:``(\"d_str\") ,`3esn`=Rel:`7esn`(`3esn`='s_str')Where 9e0 Start `7esn`=Node:_usn4(#usn7=\"d_str\") ,`5esn`=Rel:`4esn`(`2esn`=\"d_str\") Unwind $#usn8[$`8esn`..{`8esn`}] As `6esn`"),
    octest_legacy:ct_string("Unwind 12.e12[..Null][..$#usn8] As usn1 Remove Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]).@usn6!,{`6esn`:Count(*) Ends With 12.0 Ends With 12}.`2esn`?,Reduce(`8esn`='s_str' Ends With 7 Ends With {_usn4},#usn7 In `2esn`[..$#usn8][..Count(*)]|$123456789 Ends With `3esn` Ends With 123456789).#usn7 Union All Foreach(#usn8 In [_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``}| Match `7esn`=Allshortestpaths((((`6esn` {`7esn`:$`6esn`[010..]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-({`1esn`:`3esn`[{`2esn`}]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})))),@usn6=Allshortestpaths((`1esn` :`5esn`{`5esn`:{``} Is Null})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[`2esn`?:`2esn`]->(`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})) Using Join On `6esn` Using Index `4esn`:`3esn`(#usn8) Where 123456789 Ends With $`6esn` Ends With $#usn7 Match usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]})) Foreach(usn1 In Case 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] When 12e12[$`3esn`] Then {`5esn`} Contains $0 Contains {``} Else usn1 Starts With usn1 Starts With $`` End[usn2(Distinct 0.12 In _usn3 In {0},@usn6 Is Null Is Null).._usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)][[{7}[$``][{@usn6}],0.0 Ends With 010 Ends With 1.e1]..$`4esn`]| Start `7esn`=Node:`7esn`(_usn4={@usn6}) ) Foreach(#usn8 In $`7esn` Is Not Null| Create #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Create `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))))"),
    octest_legacy:ct_string("Create Unique `6esn`=(({``})<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(usn2 {#usn7:2.12 =~Count(*),_usn4:$usn2[9e0]})),`1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})) Return Distinct (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Order By 01234567[usn2..$12][{`7esn`}..$usn2] Asc Skip .e12[..`7esn`][..0Xa]"),
    octest_legacy:ct_string("Return Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains Extract(`5esn` In \"d_str\" Is Null Is Null Where Null Ends With `2esn` Ends With $usn1|$#usn7[@usn5..{1000}][1.e1..7]),$1000 Is Not Null,$@usn5 Is Not Null Order By {`4esn`} =~{7} =~{`7esn`} Ascending Foreach(@usn5 In $_usn4[1.e1]['s_str']| Delete $12[$1000..123456789] With Distinct *,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As _usn3 Order By 1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null Asc Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] =~Reduce(_usn3=$``,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{#usn8} Is Null) =~Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit {usn1} Ends With $0) Create Unique Allshortestpaths((:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1)) Union All Start #usn8=Relationship:`4esn`(_usn4={`2esn`})  Create Unique ((:`3esn`:@usn5$7)),((_usn4 {usn1:True Contains {0} Contains 7})) Union All Start #usn7=Rel:@usn6(`7esn`={`8esn`}) ,`3esn`=Node:@usn6('s_str')Where 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Unwind 0Xa[9e1..][$`6esn`..] As `8esn`"),
    octest_legacy:ct_string("With Distinct *,2.12[$`5esn`][$#usn8] As #usn8 Order By Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] Descending,(:usn2{usn2:7[..999][..{#usn8}]})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Desc,{usn2} Starts With $`8esn` Starts With Count ( * ) Ascending Skip 2.12[$`5esn`][$#usn8] Where 1e1 In \"d_str\" In `7esn` Optional Match ({`3esn`:usn1 Is Null Is Null})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`4esn` {@usn6:{12}[..0X7]}) Using Join On _usn3,@usn5 Union Merge usn1=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Merge Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))) On Match Set `5esn` =All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] On Match Set `7esn` =`4esn`[..010][..{12}],@usn5+=0X7[$999][_usn4],@usn5 =0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` Union Unwind ({`7esn`:7[{0}..{_usn4}]})-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})-[:`2esn`*..{`1esn`}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null}) =~Reduce(#usn8=$_usn4[0e0..][False..],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8[#usn8..]) =~Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) As _usn3 Remove [2.12 Is Null,{`5esn`} =~`4esn` =~{_usn4}].`7esn`! Create Unique ((:`1esn`)),`2esn`=((@usn6 :_usn4))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8)[{`7esn`:$`6esn`[010..]}..] As @usn5 "),
    octest_legacy:ct_string("Detach Delete $`4esn` In Null In 0xabc,{0} In _usn4 Union All Remove ``:`1esn`,[#usn7 In {``} Is Not Null Where {0}[01][`7esn`]|0e0 Starts With 1000 Starts With #usn7].#usn7,{usn1:`1esn` Contains {usn2} Contains $#usn8}._usn3? Union Unwind $#usn8[$`2esn`..][{`2esn`}..] As `5esn` Foreach(`4esn` In 1000[0X7..2.12]| Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4?) Start _usn4=Node:usn2(`8esn`='s_str') ,#usn7=Node:usn2({12})Where $`3esn` Is Not Null"),
    octest_legacy:ct_string("With  (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Skip Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})))] Where 0.12 =~$0 =~$0 Union All Merge `7esn`=((`7esn` :``:#usn8)) On Create Set _usn3:`7esn`:_usn3,`8esn` ={1000}[$999...e12][`7esn`..'s_str'] On Create Set Case When $`1esn`[{`2esn`}..] Then .e1 =~$`8esn` End.`7esn`? =All(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0[{usn2}..][$`6esn`..])[[{0}[12.0..0Xa][$`5esn`..{_usn3}],$`6esn`[12],.e12[@usn5..#usn7][010..{usn1}]]..],`3esn` =$`2esn` Is Null Is Null With  [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As `8esn`,[`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As @usn6 Skip {7}[$`5esn`][{_usn3}] Where {7}[..1.0][..9e0] Union Remove @usn6:usn2 Start `6esn`=Relationship:usn2(#usn8=\"d_str\") ,`7esn`=Rel:#usn8({_usn3})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`3esn`} In $@usn5 In _usn4 As _usn3  Match (({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})),(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}) Foreach(`1esn` In True =~{`5esn`}| Return *,$_usn3 =~0.12 =~{#usn8},9e0 Is Not Null Is Not Null Skip {usn2} Starts With $`8esn` Starts With Count ( * ) Limit $@usn5 Starts With $1000 Detach Delete {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]],$`7esn`['s_str'],Reduce(`1esn`={`8esn`} Ends With `6esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|1e1 In 123.654 In `3esn`)[[#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]]])"),
    octest_legacy:ct_string("Remove (usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}).usn2! Union All Start `3esn`=Relationship:#usn7('s_str') ,#usn7=Rel:_usn3({@usn5}) With  #usn8 In $@usn6,1.e1[`8esn`][00] Skip 01 Ends With 999 Ends With {`7esn`} Where 123456789 Ends With $`6esn` Ends With $#usn7 Union Foreach(_usn3 In 00[{`8esn`}..][{`8esn`}..]| Load Csv From {1000}[$`4esn`][\"d_str\"] As `8esn` Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Delete 2.12 Ends With $_usn3 Ends With `3esn`,usn1 Ends With $@usn6 Ends With `3esn`"),
    octest_legacy:ct_string("Return All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By (`` :#usn7)<-[`1esn`?:usn1|@usn6 *0..]-(:#usn8:#usn8{@usn6:$_usn3[..1000]})[[`4esn`[..010][..{12}],0.e0 Starts With `2esn`,1000[..$0][..True]]..] Desc,0Xa =~Null =~$`` Ascending,Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Ends With Single(_usn3 In {`3esn`}[`2esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Desc Limit Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] Union All Remove Case When {usn2} =~12 Then `7esn`[..2.12][..00] When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null End.usn2?,[1000 =~@usn6 =~0x0,12.e12[7..$`6esn`],_usn4 Is Null Is Null].#usn7,[{_usn4} Is Not Null Is Not Null,{#usn7} Is Not Null Is Not Null,$usn1[.._usn4][..False]].`4esn`! Foreach(usn1 In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) Ends With Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Ends With Reduce(_usn3={7}[..1.0][..9e0],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`1esn` Contains {usn2} Contains $#usn8)| With Distinct *,{``}[`8esn`..],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As #usn7 Order By False Contains {`6esn`} Ascending,{`1esn`}[usn1][.e1] Asc Where `7esn`[..2.12][..{usn1}] Remove exists($123456789[_usn3][{#usn7}]).`6esn`?,count(Distinct $999 Is Not Null).`8esn`!,Case When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) When 0X7[`7esn`][123.654] Then 0X0123456789ABCDEF[{_usn4}..00] Else $@usn5 Is Not Null End.usn2) Union All Create #usn7=(`4esn` :#usn7),(({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[usn2?:#usn7]-(@usn6 :@usn5{usn2:$`5esn`[..$`5esn`][..$12]})) Match `8esn`=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On `8esn`,@usn5 Where 123456789[0xabc..'s_str'][``..`1esn`]"),
    octest_legacy:ct_string("Load Csv From Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789)) Is Null As `7esn` "),
    octest_legacy:ct_string("Create `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),`2esn`=((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})) Union All Create Shortestpath(((:@usn6:#usn8{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}))) Foreach(`4esn` In $1000[`2esn`..`5esn`][1e1..1.e1]| Start `6esn`=Rel:#usn8(@usn6={_usn4}) ,`5esn`=Relationship:@usn5(\"d_str\")) Union All Unwind Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End] As `2esn` Create Unique @usn6=Allshortestpaths((`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),``=((`5esn` :_usn4{7})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})) Create Unique ((`4esn` {``:{#usn8}[010],usn1:{``} Starts With $`2esn` Starts With `1esn`}))"),
    octest_legacy:ct_string("Start `3esn`=Rel:`7esn`(`3esn`='s_str') ,``=Node:#usn8(`8esn`={`6esn`})Where usn1 Is Null Create Unique ((:_usn4)) Union Start _usn4=Node:`3esn`(`2esn`={usn1}) ,`6esn`=Node:``('s_str') Load Csv With Headers From $@usn6 Ends With $_usn4 Ends With 0.12 As `4esn`  Start `8esn`=Relationship:`4esn`(`1esn`={`2esn`}) "),
    octest_legacy:ct_string("Load Csv With Headers From 01234567 Is Null Is Null As #usn7 Fieldterminator 's_str' Merge _usn3=Allshortestpaths((({_usn3:.e12[@usn5..$12]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]}))) On Create Set `3esn` =0.0[Null][$`2esn`] Create Unique usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8}))"),
    octest_legacy:ct_string("Detach Delete $`3esn` In $`6esn` In $``,\"d_str\" =~{usn1} =~{`7esn`} Remove Single(#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']).``,Case When $#usn8 Ends With $`2esn` Ends With $@usn6 Then $1000[`2esn`..`5esn`][1e1..1.e1] Else {`4esn`} =~{7} =~{`7esn`} End._usn3? With  *,$#usn7 Starts With {7} Starts With 1.0,Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) As usn2 Order By {#usn8} Starts With 00 Starts With {`6esn`} Descending,$123456789 Ends With $999 Ends With {999} Desc Skip $#usn8[..{`2esn`}][..1.0] Union All Detach Delete {`4esn`}[..'s_str'][..$12],(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])],`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]} Start usn2=Node:`6esn`(usn2={`8esn`}) ,@usn5=Node:`6esn`(\"d_str\")Where {0}[@usn6..$1000]"),
    octest_legacy:ct_string("Foreach(_usn4 In {@usn6} Ends With 's_str' Ends With 12.0| Return `6esn`[2.12..01][{``}..False] As @usn5 Skip 1.0[$`1esn`..][$123456789..] Limit Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[{_usn3:01[{@usn5}]}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where True In 0e0)][Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0.12 In _usn3 In {0})..None(`3esn` In {7} Is Null Where 0Xa[2.12])] Delete Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`})) Return Distinct (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Skip Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})))] Union Detach Delete [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}],Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null,$_usn3 In {1000} In 0.12 Detach Delete {1000}[$999...e12][`7esn`..'s_str'],12.e12 Is Not Null Is Not Null,$#usn8 Ends With $`2esn` Ends With $@usn6 Create `3esn`=Allshortestpaths(((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null}))) Union All Detach Delete 0.0 =~0 =~`6esn`,@usn5 In $7,{`7esn`}[..$@usn5][..$#usn8] Return `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`8esn`[$#usn7..123456789],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null Descending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,1e1 In \"d_str\" In `7esn` Descending Skip [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8?"),
    octest_legacy:ct_string("Start `5esn`=Rel:`2esn`({`1esn`}) ,`4esn`=Relationship:`6esn`(`3esn`=\"d_str\")Where {1000} =~0 =~123.654 Create Unique `6esn`=((`8esn` :#usn8:#usn8{`3esn`:$`4esn`[9e12..123.654]})),((:`4esn`{``:2.12 Is Not Null Is Not Null})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})) Foreach(`8esn` In True Contains {0} Contains 7| Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Delete Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null) Union Merge `3esn`=Shortestpath(((:usn1{usn1:{`6esn`}})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))) On Match Set [1.0 Is Null Is Null,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`].usn2? =12.0 On Create Set Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where @usn6 Contains Null Contains $`7esn`).`4esn` =00 Starts With 0xabc Remove ({usn1:`5esn`[_usn4..]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})._usn4,Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {_usn4}[...e1][..$7]).`6esn`! Foreach(`7esn` In 999[..$`5esn`][..12.0]| Return Distinct Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Skip 0Xa[..{`4esn`}][..12.0] Limit (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[{`8esn`:07 In `2esn` In 12e12}]-(`3esn` :@usn5)-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) Is Not Null Is Not Null Return Distinct $12 =~$_usn3 As #usn8,`7esn` Ends With 0x0 As @usn6,$1000 =~$`2esn` As `7esn` Skip All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End]) Union All Unwind .e0[..$`8esn`] As usn2 Load Csv With Headers From 0e0 Starts With `2esn` Starts With $`` As `3esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct .e1 =~$usn2 =~999 As `2esn`,Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) Is Not Null Is Not Null As `8esn` Skip Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..]) Limit 9e0 Starts With 01 Where 's_str'[00][{`5esn`}] Union Delete 7[..999][..{#usn8}],`1esn`[{usn1}..``][7..$#usn8] Unwind Case When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else $1000 Is Null Is Null End Starts With `7esn`(Distinct $#usn7[..{`5esn`}][..9e12]) Starts With {`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`} As usn1 Union All Return *,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By $12[Null..Count(*)][{`5esn`}..{999}] Desc,12.e12[7..$`6esn`] Desc Skip {`4esn`} Ends With {123456789} Ends With $`4esn` Create usn2=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("With Distinct [01[2.12..`8esn`],{7} In `2esn`,123456789 Ends With $`6esn` Ends With $#usn7] Starts With Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With `7esn`(Distinct {_usn4} Ends With `6esn`,{@usn6}[7]),$1000 =~$`2esn` As `6esn` Union Start `3esn`=Node:@usn6('s_str') ,`7esn`=Node:`4esn`(usn1=\"d_str\") Union All Merge usn2=((@usn6 :_usn4)) On Create Set `` =Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 01[2.12..`8esn`]).`5esn` =Shortestpath(((:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]})<-[``? *..0x0{#usn7:False =~$7 =~2.12}]->(`3esn` :usn2)))[['s_str' In 00,{@usn6}[$`6esn`..`4esn`]]..][Case @usn6 Starts With `6esn` Starts With $`1esn` When {`3esn`}[`2esn`] Then Null In $7 In .e1 When {0}[@usn6..$1000] Then 12.0 Contains #usn7 End..] On Create Set _usn3+=$`3esn` Is Not Null Is Not Null,`3esn` ={`4esn`} Ends With {usn2} Ends With {999},{@usn6:{999} Starts With $999,`4esn`:$usn1[{`5esn`}][$`6esn`]}.@usn5? =$usn1[..{`6esn`}]"),
    octest_legacy:ct_string("Return Distinct @usn6 Contains $1000 Contains {`7esn`} Unwind `5esn` Ends With {``} Ends With 12.e12 As `1esn`"),
    octest_legacy:ct_string("Load Csv From `5esn`[..Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`])] As _usn4 "),
    octest_legacy:ct_string("With  $123456789 In $#usn7 In `4esn` As `4esn` Order By $`3esn` Is Null Is Null Desc Skip {`1esn`}[{123456789}][{0}] Limit {`2esn`}[$`8esn`][$12] Where {12} Is Null Is Null"),
    octest_legacy:ct_string("Create `1esn`=Allshortestpaths(((({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`4esn`]->(:`6esn`$123456789)))) Union Remove [0.12 =~$0 =~$0,2.12 Contains usn2 Contains True,2.12].`4esn` Union All Load Csv With Headers From 0Xa Starts With {`6esn`} Starts With $usn1 As ``  Load Csv From {_usn4} Is Not Null Is Not Null As usn2 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] Ends With None(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) As `4esn` Fieldterminator \"d_str\" Optional Match _usn3=(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})-[`8esn`?:#usn8|`1esn` *1000..00]->(:_usn4$@usn5)-[`7esn`:``{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}]->({_usn4:00 Starts With 0xabc}))) Using Join On `8esn`,``"),
    octest_legacy:ct_string("Start @usn5=Relationship(*)  Create Unique `8esn`=({@usn5:07[..True][..9e12]})<-[? *1000..00]->(#usn8 {#usn7:`4esn` Ends With 07 Ends With {`3esn`},`3esn`:{0} In $_usn3})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Load Csv With Headers From $_usn4 In usn1 In $7 As `2esn` Fieldterminator 's_str' Union Unwind {1000} =~0 =~123.654 As `3esn` Create Unique ``=(:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}) Return Distinct `5esn`[.e0..][07..] As `7esn` Skip All(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null) Limit {1000} =~0 =~123.654 Union All Create Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) With  @usn6[$`3esn`..{`3esn`}] As `3esn`,`6esn`() In {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}} In usn1() Skip $`4esn` Is Null Is Null Unwind All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null As `2esn`"),
    octest_legacy:ct_string("Merge usn2=((:`1esn`{})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})) On Match Set Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]).``! ={123456789} =~`8esn` =~@usn5 On Create Set @usn6+={0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]],{`8esn`:{_usn4} Starts With 0.e0 Starts With 0x0}.@usn5! =`4esn`[`5esn`..123456789][0..$12] Union Start `6esn`=Node:`8esn`(\"d_str\") ,`6esn`=Relationship:`4esn`(`1esn`={`2esn`})Where {usn2}[.e0..$999] Create `5esn`=((`` :`2esn`:usn1)<-[usn2?:``]-(usn2 :``:#usn8)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Load Csv From usn2(Distinct Null In $7 In .e1,`1esn` Contains {usn2} Contains $#usn8) In All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8) As `5esn` Fieldterminator 's_str' Union Foreach(`6esn` In {`4esn`} Starts With 1e1| Create Unique (:`6esn`{_usn4:$`5esn` Starts With $0 Starts With {0}})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]}),(`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})<-[``?]->(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})) With Distinct {12} Ends With Count ( * ) Ends With .e12 As `8esn` Skip 12 Ends With 0x0 Ends With 0.e0 Limit Case When `4esn`[`5esn`..12][@usn6..False] Then $123456789 Ends With $999 Ends With {999} When $123456789 Ends With $999 Ends With {999} Then False Is Null Is Null Else 7[True..][2.12..] End Starts With [`8esn` Ends With 999 Ends With .e12] Starts With (`5esn` :`4esn`)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(`7esn` :`5esn`{`3esn`:`7esn` Is Null}) Foreach(`5esn` In usn2[{7}]| Return Distinct *,(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}],(:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null})-[:`8esn` *0..{_usn3:`4esn` Ends With 07 Ends With {`3esn`}}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})[..[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]|{7}[..12e12][..Count ( * )]]] Order By (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} Asc,({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) In Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12) Descending,All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null Ascending Skip 1e1 Contains 0e0)"),
    octest_legacy:ct_string("Load Csv From 12[1.e1..{_usn3}][1.e1..1.0] As `8esn` Fieldterminator 's_str' Union Unwind 12.0 Ends With True Ends With 123456789 As _usn3"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Return *,$@usn5 =~1000 =~1000 Skip $`4esn`[010..`4esn`] Limit 00[$`2esn`..][`6esn`..] Union Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null Merge Allshortestpaths(((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}))) Create Unique Allshortestpaths((`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})),usn2=({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[:`3esn`|:#usn8 *1000..00{usn1:0[`7esn`..]}]-(usn1 :`3esn`:@usn5)"),
    octest_legacy:ct_string("Match (((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})<-[`2esn`?:`7esn` *0X7..]-(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}))),#usn7=Shortestpath((:`8esn`:`7esn`)) Using Scan `6esn`:`3esn`"),
    octest_legacy:ct_string("Create Unique Shortestpath(((({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)))),@usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)) Union All Create Unique usn1=Allshortestpaths((#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(usn2 {``:01[{@usn5}]})),Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))) Return Distinct Case #usn7 Starts With {#usn7} Starts With `7esn` When $#usn7 Is Null Then Count(*) Is Null Is Null End =~Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) =~Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {_usn4}[...e1][..$7]),Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..],{123456789} Contains $#usn8 As `3esn` Order By {`4esn`}[$123456789..][$#usn7..] Ascending Skip Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:usn1|@usn6 *00]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})))[..{_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]}]"),
    octest_legacy:ct_string("Remove Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}))))._usn3!,Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {123456789} Is Null Is Null).`6esn`!,{_usn4:12.0 Ends With True}.`2esn`! Remove 123.654.`3esn`!"),
    octest_legacy:ct_string("Merge Shortestpath(((#usn7 :``:#usn8{`2esn`})<-[usn1?:#usn8|`1esn`]->({@usn5:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],@usn6:$0})<-[@usn6?:`5esn`]-(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}))) On Create Set _usn3+=1000[..$0][..True] Foreach(`3esn` In 's_str' In $usn1 In False| With Distinct Case #usn7 Starts With {#usn7} Starts With `7esn` When $#usn7 Is Null Then Count(*) Is Null Is Null End =~Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) =~Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where {_usn4}[...e1][..$7]),Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..],{123456789} Contains $#usn8 As `3esn` Order By {`4esn`}[$123456789..][$#usn7..] Ascending Skip Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn2?:`5esn` *0..]-({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:usn1|@usn6 *00]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})))[..{_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]}] Start `8esn`=Node:_usn4(`6esn`='s_str') ,_usn3=Rel:`6esn`(\"d_str\")Where Count(*) Is Null Is Null) Merge @usn6=((usn2 :@usn5)-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) On Match Set `6esn`+=$_usn4 Ends With usn1 Ends With $0,All(`5esn` In \"d_str\" Is Null Is Null Where 1000 In {`8esn`} In 01)._usn4 =Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} On Match Set ``+={12} =~#usn8 Union All Return Distinct 9e0 Starts With 01 As `2esn`,`` Ends With 123456789 Ends With 123.654 As usn2,Count ( * ) Contains 07 Skip {`4esn`} =~{7} =~{`7esn`} Start `3esn`=Node:usn1(\"d_str\") Where Count ( * ) =~$usn2 =~$usn2 Union Match Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))) Using Index `1esn`:@usn5(#usn8) Merge ``=(`1esn` {``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Start `8esn`=Rel:@usn6(`7esn`={`8esn`}) ,_usn4=Node( {`1esn`})Where 0[1.e1..12e12]"),
    octest_legacy:ct_string("Unwind {usn1} In 2.12 In 1000 As `8esn` Union All Foreach(`8esn` In \"d_str\" Starts With 01| Start `8esn`=Relationship:`6esn`('s_str') Where 010 =~{usn2}) Unwind $`1esn` In $`7esn` In $`6esn` As `2esn` Delete 123456789[#usn8..False],9e1 In 2.12"),
    octest_legacy:ct_string("Create Unique #usn7=Shortestpath(((#usn8 :_usn3:_usn3{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]})-[_usn3?:#usn8|`1esn`]-({``:$`8esn` =~{1000}}))),(((_usn4 :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})<-[``?:_usn4|:usn2{`1esn`:False Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})))"),
    octest_legacy:ct_string("Merge ((`7esn` )-[@usn5?:`4esn`]-(:usn1{usn1:{`6esn`}})) Union All Return 1.0 Contains $_usn4,Case 1.0 In Count(*) When $_usn4[Count ( * )..] Then Null[``] When $1000[`2esn`..`5esn`][1e1..1.e1] Then .e12[@usn5..#usn7][010..{usn1}] Else 1.0[$`1esn`..][$123456789..] End,0 In $_usn4 In $@usn5 As `1esn` Skip $@usn5[..12e12][..$123456789] Load Csv From Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains Extract(`5esn` In \"d_str\" Is Null Is Null Where Null Ends With `2esn` Ends With $usn1|$#usn7[@usn5..{1000}][1.e1..7]) As `4esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(usn2 In {`2esn`} Is Not Null| Delete 00[{`8esn`}..][{`8esn`}..]) Union Remove Reduce(``=$usn1[.._usn4][..False],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|#usn8[#usn8..]).`8esn`,Reduce(@usn5=9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Ends With {_usn3}).`8esn` Return Distinct *,`6esn` Is Not Null Is Not Null As `3esn` Order By $`5esn` Starts With $0 Starts With {0} Asc Union All Create Unique ``=Allshortestpaths((((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))),Shortestpath(((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null}))) Remove Shortestpath((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})).`5esn`?,Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01).`7esn`"),
    octest_legacy:ct_string("Delete $`1esn` In $`7esn` In $`6esn`,1000[0X7..2.12] Merge `2esn`=(`2esn` :`3esn`:@usn5)<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}) On Create Set @usn5+=[$`5esn`[..$`5esn`][..$12],01[2.12..`8esn`],_usn3 Contains $123456789 Contains ``],None(`8esn` In 01[2.12..`8esn`] Where Count ( * ) Ends With $@usn5).`4esn` =Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] On Match Set `1esn`+=usn1 Is Null Is Null,Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]).`5esn` =0X0123456789ABCDEF Is Null Is Null"),
    octest_legacy:ct_string("Load Csv From True[{`7esn`}..] As `4esn`  Union With  's_str'[00][{`5esn`}],#usn8 In $@usn6,{1000}[_usn3][$123456789] As `1esn` Order By {999} Starts With $999 Descending Skip {`7esn`} Ends With `4esn` Ends With {@usn5} Limit $@usn5 Starts With {@usn5} Starts With 9e0 Where #usn7"),
    octest_legacy:ct_string("Load Csv With Headers From .e0[..$`8esn`] As `7esn` Fieldterminator \"d_str\" Union All Remove (:usn1{_usn3:{#usn7}[`2esn`..]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(#usn7 ).`2esn`,Case `5esn` Starts With $`2esn` Starts With $1000 When 123.654 =~$usn2 =~{999} Then Count ( * ) Contains `8esn` Contains .e1 End._usn3!,exists($12[$1000..123456789],123456789[0xabc..'s_str'][``..`1esn`]).@usn5 Return {#usn8} Starts With 00 Starts With {`6esn`} As ``,7[{0}..{_usn4}] As #usn8,`4esn`[$999..{`1esn`}][{@usn6}.._usn3] Order By `8esn` Is Not Null Is Not Null Desc Limit {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Create usn2=Shortestpath((usn2 :#usn7)) Union All Return Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) Contains Filter(`` In `` Is Not Null Is Not Null Where 0e0 Starts With 1000 Starts With #usn7) Contains Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]}))) As #usn7 Order By 2.12 =~Count(*) Descending,`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) Asc"),
    octest_legacy:ct_string("Merge _usn4=Shortestpath((usn1 {`2esn`})-[@usn5? *0Xa]->(:`3esn`:@usn5{``:12.e12[$_usn3..],_usn3:$`6esn`[010..]})) On Create Set Reduce(usn1=7[{0}..{_usn4}],`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$999 Is Not Null)._usn3 =@usn6 Contains `3esn` Contains {`2esn`} Remove Reduce(#usn8={0}[01][`7esn`],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|2.12 =~False).`6esn`!,Case True In 0e0 When 0.0 =~999 Then {@usn5} Is Null Is Null End.`6esn`? Union All Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Foreach(`` In $`8esn`| Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7) Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5) Match `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))),Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Index @usn5:`2esn`(@usn5) Using Scan `7esn`:usn1 Where Null[$#usn7]"),
    octest_legacy:ct_string("Return Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7,{1000} =~$@usn6 =~12 Order By {_usn3:`4esn`[..Count ( * )][..{#usn7}]}[Any(_usn3 In {`3esn`}[`2esn`] Where 1e1 In \"d_str\" In `7esn`)..(:usn1{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`2esn`:_usn4|:usn2]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[`6esn`{`6esn`:Count(*) Ends With 12.0 Ends With 12}]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})][Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7|123.654[{7}..])..Filter(`3esn` In {7} Is Null Where usn1 Is Null Is Null)] Asc Skip 0X7 In $#usn7 In 1.e1 Limit usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..] Load Csv With Headers From usn2[{7}] As @usn6 Fieldterminator \"d_str\" Union Return *,1e1 Contains 0e0 Skip @usn6 Contains Null Contains $`7esn` Limit $0 Return Distinct $123456789 Ends With $999 Ends With {999},7[$`8esn`..123456789][$usn1..$usn1] As `5esn`,{#usn7}[`2esn`..] Order By #usn7 =~Count ( * ) =~`` Ascending,{123456789} Starts With 0.0 Starts With `5esn` Desc,12.e12 Starts With {999} Starts With {`1esn`} Desc Skip 1.0[0e0..0.e0] Limit `6esn`[12..$usn2][{#usn8}..{usn2}] Union All Optional Match _usn4=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`) Using Join On @usn6,@usn6 Using Scan _usn4:usn1"),
    octest_legacy:ct_string("Detach Delete Count(*) Contains $#usn7 Contains 1e1 Start `8esn`=Relationship:usn2('s_str')  Union All Unwind `4esn`[`5esn`..12][@usn6..False] As #usn8 Start `2esn`=Node:`2esn`({1000})  Unwind `8esn` Is Not Null Is Not Null As `6esn`"),
    octest_legacy:ct_string("Merge ((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[ *0xabc..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})) On Create Set usn1 =0.e0[123.654][01],@usn5+=$`8esn`[$`7esn`..][0.e0..] Match `8esn`=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On `8esn`,@usn5 Where 123456789[0xabc..'s_str'][``..`1esn`]"),
    octest_legacy:ct_string("With  $1000 =~$`2esn` As `6esn`,`` Is Not Null Is Not Null Order By $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] Ascending Skip False[..``] Limit Count ( * )[$_usn4..$`4esn`] Where $#usn8[$`2esn`..][{`2esn`}..] Load Csv With Headers From _usn3 Ends With 7 Ends With `1esn` As `4esn`  Union Load Csv From Shortestpath(((:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]})<-[``? *..0x0{#usn7:False =~$7 =~2.12}]->(`3esn` :usn2)))[['s_str' In 00,{@usn6}[$`6esn`..`4esn`]]..][Case @usn6 Starts With `6esn` Starts With $`1esn` When {`3esn`}[`2esn`] Then Null In $7 In .e1 When {0}[@usn6..$1000] Then 12.0 Contains #usn7 End..] As @usn5  Union All Merge Allshortestpaths((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})) On Match Set `6esn`+=01[{`2esn`}..{@usn6}][$`2esn`..0.0],Case #usn8[..{#usn7}] When _usn4 Is Null Is Null Then {@usn6} Ends With 's_str' Ends With 12.0 When 010 =~{usn2} Then _usn4 Starts With $_usn4 Starts With 12.e12 Else {`5esn`} Starts With $`5esn` Starts With .e1 End.`8esn`? =_usn4 Contains {`1esn`} Contains \"d_str\",`3esn`(Distinct 0[..usn2][..{@usn5}]).`8esn`? =({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})[Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])..Filter(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")] On Match Set All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where $_usn4 Ends With usn1 Ends With $0).@usn5? =Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End,Reduce(`8esn`={usn1} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0xabc[.e0]).`3esn`! =Reduce(`3esn`=12.0[123.654][Count(*)],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|`1esn` =~\"d_str\")[..Case When $`` Is Not Null Then 12[1.e1..{_usn3}][1.e1..1.0] When 7[True..][2.12..] Then $_usn4 Is Not Null Is Not Null End][..Case When $#usn8[$`2esn`..][{`2esn`}..] Then 0X7[1000..{`1esn`}] When {#usn8}[{7}] Then 07 In `2esn` In 12e12 Else $`1esn` Ends With 9e1 Ends With $123456789 End],`3esn` =12.e12[0xabc]"),
    octest_legacy:ct_string("Remove All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 Contains 0X7 Contains $`8esn`).`4esn`,Reduce(``=`5esn`[.e0..][07..],`5esn` In \"d_str\" Is Null Is Null|0.0 In $usn1).#usn8? Union All Merge Allshortestpaths(((:`2esn`:usn1{@usn5:`5esn`[.e0..][07..],`4esn`:`8esn` =~0xabc =~010})<-[``? *0X7..]->(`8esn` :#usn7))) On Create Set `5esn`+=999 In {`3esn`} In usn2"),
    octest_legacy:ct_string("Create #usn7=(`4esn` :#usn7),(({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[usn2?:#usn7]-(@usn6 :@usn5{usn2:$`5esn`[..$`5esn`][..$12]})) Match `8esn`=(((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On `8esn`,@usn5 Where 123456789[0xabc..'s_str'][``..`1esn`] Union All Return Distinct *,{``}[`8esn`..],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As #usn7 Order By False Contains {`6esn`} Ascending,{`1esn`}[usn1][.e1] Asc Return *,0Xa[9e1..][$`6esn`..] As @usn6,1e1 In 123.654 In `3esn` As @usn6 Order By 0.0 =~False =~$999 Desc,123456789 Ends With 01234567 Ends With 1.e1 Ascending Limit $999 Delete 12e12 Contains 0Xa"),
    octest_legacy:ct_string("Create Unique #usn7=(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}) Foreach(`2esn` In `6esn`[..$@usn6]| Optional Match (`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1),Allshortestpaths(((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[? *..0x0]->(`3esn` :`7esn`:_usn3))) Using Index _usn4:`5esn`(`6esn`) Using Index `5esn`:usn2(``) Where 1.0[0X0123456789ABCDEF] Remove _usn3:`2esn`:usn1,[$0[..9e1],0.0[Null][$`2esn`]]._usn4?) Union All Merge Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3))"),
    octest_legacy:ct_string("Match #usn7=Shortestpath((`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)) Using Join On `8esn`,@usn6 Where 999 Is Not Null Is Not Null Union Delete $`7esn` Is Not Null,`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) Load Csv With Headers From 9e0 As `1esn`  Load Csv From [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge Shortestpath((:usn1{usn2:7[..999][..{#usn8}]})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})) On Create Set `8esn`(00 Starts With 0xabc,{12} Is Not Null).`6esn`! =$12 Ends With 07 Ends With $123456789,`3esn` ='s_str' Ends With 7 Ends With {_usn4},``(0X7 =~9e1,0.0 =~999).`3esn`! =$1000[Null][`4esn`] With Distinct $123456789 Ends With {`1esn`} Ends With $`4esn`,$`8esn`[..{`2esn`}],Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] Order By `5esn`[_usn4..] Ascending Limit [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] Where $_usn4[0e0..][False..] Remove `6esn`({1000}[{_usn3}..],0.12 =~$0 =~$0).`` Union All Return Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Create Unique ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))))"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))) On Match Set `3esn`+=.e1[..$@usn6][..`2esn`] Create Unique `2esn`=((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]})-[{`7esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4]}]-(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)),`6esn`=Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})))"),
    octest_legacy:ct_string("Merge Shortestpath(({`1esn`:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}]->(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`6esn`?:`3esn`|:#usn8{usn1:$usn1 In {999} In $#usn7}]-({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})) On Create Set None(`3esn` In {7} Is Null Where {_usn3}[12.e12]).#usn8? =Case {999} Is Null Is Null When 1000[Null..{123456789}] Then 9e12[`6esn`..12.0] Else `` Ends With $1000 End[Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}])..(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})],#usn8 ={usn2} In _usn3 In $#usn7,[{@usn6}[$`6esn`..`4esn`],0Xa[$123456789..123.654][.e12..0.e0]]._usn3? =Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null On Match Set `5esn` =$@usn5[010..$#usn8][12..$`4esn`],@usn5+={`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}|$#usn8 Contains $`1esn` Contains {`6esn`}]..Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..])][[_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `3esn`[{`2esn`}]|$0[12.e12..]]..Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)],`5esn`+=0.e0 Starts With `2esn` Union All Remove usn1(Distinct $@usn5 Is Not Null).``! Union Merge Shortestpath(((`2esn` :_usn4))) On Match Set #usn8+=`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}).@usn6? =01[{@usn5}] Merge Allshortestpaths(((_usn3 :`3esn`:@usn5))) On Create Set `7esn` =`6esn`({usn1} Ends With $0) Is Not Null,`2esn`+=All(`` In `` Is Not Null Is Not Null Where $_usn4 Starts With 1e1)[Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}})))][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)],Reduce(#usn7=`` Is Not Null Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{`7esn`}[..$@usn5][..$#usn8]).`2esn` =None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}] On Create Set [`5esn` In \"d_str\" Is Null Is Null|$`8esn`[..00]].usn2! =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)),#usn7:#usn8:#usn8"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] As #usn8 "),
    octest_legacy:ct_string("Detach Delete {`7esn`} Ends With `4esn` Ends With {@usn5},None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}],Case When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else $1000 Is Null Is Null End Starts With `7esn`(Distinct $#usn7[..{`5esn`}][..9e12]) Starts With {`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`}"),
    octest_legacy:ct_string("Unwind $`3esn`[0.12..`8esn`][$#usn7..`5esn`] As `6esn` Union All Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Join On `8esn`,@usn5 Using Index `3esn`:_usn3(`6esn`) Create Unique `2esn`=Allshortestpaths(((#usn7 {``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[#usn8?:#usn7{`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000}]->(:@usn6:#usn8{`4esn`:$`8esn`[..00]}))) Union Start #usn7=Node:``(\"d_str\") ,_usn3=Relationship:`3esn`('s_str')Where $@usn5 =~1000 =~1000"),
    octest_legacy:ct_string("Return Distinct usn1[..@usn6][...e0],usn1 Is Not Null As `6esn`,False[_usn3..`8esn`][$`8esn`..{`3esn`}] As _usn3 Order By Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] Ascending,All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]] Ascending Start `3esn`=Rel:#usn8(`8esn`={`6esn`}) ,usn1=Node:`3esn`(`2esn`={usn1}) Union All Load Csv With Headers From Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As `1esn` "),
    octest_legacy:ct_string("Foreach(@usn5 In _usn3 Contains Count(*) Contains 12e12| Match Shortestpath(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))),usn2=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where 01234567 Ends With .e12 Ends With $#usn7 Load Csv From [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null As #usn8 Fieldterminator \"d_str\") Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0"),
    octest_legacy:ct_string("Detach Delete .e0[..$`8esn`],$@usn5 Starts With #usn7,12.0[{@usn5}..$#usn7] Union All Foreach(@usn5 In `5esn` Starts With 010 Starts With 0.0| Create Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))),Shortestpath((({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]}))) Create ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))))) Delete 0.0 Is Not Null Is Not Null,None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],Reduce(#usn7=$1000 Is Null,#usn7 In {``} Is Not Null|$`1esn` Ends With 9e1 Ends With $123456789) In Case When `5esn` Is Null Then True[..$`6esn`] Else `3esn`[`3esn`..][#usn8..] End Create Unique `8esn`=((:@usn6:#usn8)<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]}))"),
    octest_legacy:ct_string("Delete {`4esn`} =~9e0 =~{12},Count ( * ) Ends With $@usn5,Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null Return Distinct *,.e1[..$@usn6][..`2esn`] As #usn8,0Xa[usn2..] Order By $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] Ascending Limit {1000}[{_usn3}..] Union Start `1esn`=Relationship:`2esn`({1000})  With  @usn6 Starts With `6esn` Starts With $`1esn` As `7esn`,usn1 In 7 In {123456789} As `5esn`,`8esn` Ends With 999 Ends With .e12 Order By {@usn6} Is Null Is Null Desc,`7esn` In 00 Asc,Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) Asc"),
    octest_legacy:ct_string("Foreach(_usn3 In 0e0 In @usn5| Return .e1 =~{@usn6} =~Null Order By $#usn7[..{`5esn`}][..9e12] Desc,Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] Desc,0x0 Ends With $12 Asc Limit _usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]]) Load Csv With Headers From 9e12[`6esn`..12.0] As @usn6  Union All Merge `3esn`=Shortestpath((_usn3 {@usn5:`5esn`[{`4esn`}..`2esn`],_usn3:07 =~01})) Union All Foreach(`8esn` In True Contains {0} Contains 7| Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Delete Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})))] As `3esn`  Unwind 12.0 Ends With {``} As _usn4 With Distinct *,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,Null[{#usn7}..][0X0123456789ABCDEF..] Where $999"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})),({`4esn`:`7esn` Is Null}) Return Distinct {#usn8}[$@usn5..usn1][$1000..0xabc],{_usn4}[{`5esn`}..{1000}][9e1..{1000}] Delete Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},Shortestpath(((:`8esn`:`7esn`$#usn7)-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) In [_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..]|1.0 Is Null Is Null] In Case When Count ( * ) Contains 07 Then 123.654[$`1esn`] End,$123456789 Is Null Is Null Union All Merge Shortestpath(((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null}))) On Match Set None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $12[True..][{0}..]).usn1! ={123456789} Is Not Null,`5esn`+=Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])],{`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}.usn1 ={`3esn`}[..07][..{`5esn`}] On Match Set _usn3+=2.12 =~False =~`5esn` Delete {`2esn`:1000[..$0][..True],@usn5:{12} Ends With 0Xa Ends With $`6esn`}[Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn1} Ends With $0)..][Extract(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc|{`5esn`} Starts With $`5esn` Starts With .e1)..],usn2 Is Null Unwind 07[..True][..9e12] As _usn3 Union All Create Unique (:`7esn`:_usn3{usn1:$usn1 In {999} In $#usn7})"),
    octest_legacy:ct_string("Create Unique `1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})) Merge `2esn`=Allshortestpaths(((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`8esn`?:@usn6|`6esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))) On Create Set _usn3+=Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Ends With Reduce(usn2=$`5esn`[`3esn`..],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{_usn4} In {12} In $0) Ends With [$0],#usn8+=12.e12 Is Null Is Null Create Unique ((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})),Allshortestpaths(((`2esn` :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})))"),
    octest_legacy:ct_string("Remove (_usn3 :usn2{#usn7:{999} Starts With {0}})<-[`4esn`:@usn6|`6esn`{`4esn`:`2esn` Is Null,@usn5:00 Starts With 0xabc}]-({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6}).`2esn`?,Reduce(#usn8=123.654[$`1esn`],#usn8 In {`5esn`}[.e1..``]|{`5esn`} Starts With $`5esn` Starts With .e1).#usn7? Union All Detach Delete $#usn7 Is Null Foreach(usn1 In $@usn5 Is Not Null Is Not Null| Unwind {usn1} Starts With #usn8 As _usn3)"),
    octest_legacy:ct_string("Match #usn8=Shortestpath((#usn8 :@usn5))"),
    octest_legacy:ct_string("Unwind {`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000} Is Not Null Is Not Null As ``"),
    octest_legacy:ct_string("Create `7esn`=({`5esn`:\"d_str\" Starts With 01})-[_usn3:@usn5 *7..12{`2esn`:12.0 =~999 =~$_usn3}]->(`3esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]}),Allshortestpaths((((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)))) With Distinct $12[Count ( * )][0X7],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As `3esn`,{`5esn`:01 =~{_usn3} =~`3esn`,@usn5:{`3esn`} Is Not Null Is Not Null}[[`3esn` In {7} Is Null Where usn1 Is Null Is Null]..Reduce(@usn5=$0 Ends With 12.0,`5esn` In $999[0.0..]|$`8esn`[..00])][Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where usn2[$7..$123456789][$@usn6..$7]|0xabc[01..{999}][{7}..{`7esn`}])..None(`` In `` Is Not Null Is Not Null Where 0x0[`4esn`..'s_str'])] As @usn5 Skip $usn2[9e0] Limit {12} Is Not Null Unwind `4esn`[..010][..{12}] As `` Union All Start `6esn`=Relationship:usn2(#usn8=\"d_str\") ,`5esn`=Relationship(*)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..] As `7esn`  Start `5esn`=Relationship:usn1({999}) ,usn1=Relationship:_usn3(`8esn`={123456789})"),
    octest_legacy:ct_string("Return *,Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}))))[Case When $999[0.0..] Then 12 Ends With 0x0 Ends With 0.e0 When `` Is Not Null Is Not Null Then {`3esn`}[..07][..{`5esn`}] End..[`3esn` In {7} Is Null Where usn1 Is Null Is Null]],$`3esn`[0.12..`8esn`][$#usn7..`5esn`] As `` Order By 123456789[_usn4..][{999}..] Ascending,All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Ascending Delete [@usn6 Contains Null Contains $`7esn`,{`4esn`} Starts With $usn2 Starts With $1000] Ends With Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn4[0e0..][False..]) Ends With (`1esn` :`2esn`:usn1)-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}) Load Csv From ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}) As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Optional Match (:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})-[?:`5esn`]->(:usn2),`2esn`=Shortestpath((({usn2:7[..999][..{#usn8}]}))) Using Join On @usn6,@usn6 Union All Load Csv With Headers From [_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} As @usn5  Load Csv From .e1 In 0Xa In #usn7 As `2esn` Fieldterminator \"d_str\" Remove Any(`5esn` In \"d_str\" Is Null Is Null Where `6esn`[..$@usn6]).`7esn`,Case When _usn3[$`8esn`] Then $0[..9e1] End.usn1?,Allshortestpaths((_usn3 :@usn5)-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})).@usn6?"),
    octest_legacy:ct_string("With Distinct 7 =~{`8esn`} =~$`6esn` Order By 0.0 =~0 =~`6esn` Ascending,{``}[$`8esn`..] Ascending,9e1 Is Not Null Descending Skip Reduce(_usn4=01[{`2esn`}..{@usn6}][$`2esn`..0.0],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0.12 =~$0 =~$0)[Shortestpath((((`1esn` {@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00})-[`6esn`?:`3esn`|:#usn8]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))))..[{12}[{7}][$123456789]]] Limit ({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) Where $0[12.e12..] Remove Case 2.12['s_str'..$12][{`1esn`}..`2esn`] When 7[$`2esn`..{`5esn`}] Then {7}[..1.0][..9e0] Else 0x0[`4esn`..'s_str'] End.@usn6! Union Merge `4esn`=(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(#usn8 :_usn3:_usn3{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5) Union All Foreach(usn1 In 9e1[2.12..{#usn8}]| Match `7esn`=Allshortestpaths((((`6esn` {`7esn`:$`6esn`[010..]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-({`1esn`:`3esn`[{`2esn`}]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})))),@usn6=Allshortestpaths((`1esn` :`5esn`{`5esn`:{``} Is Null})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[`2esn`?:`2esn`]->(`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})) Using Join On `6esn` Using Index `4esn`:`3esn`(#usn8) Where 123456789 Ends With $`6esn` Ends With $#usn7 Create `3esn`=Allshortestpaths((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))),`2esn`=Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`))) Merge ((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})) With Distinct *,2.12[$`5esn`][$#usn8] As #usn8 Order By Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] Descending,(:usn2{usn2:7[..999][..{#usn8}]})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Desc,{usn2} Starts With $`8esn` Starts With Count ( * ) Ascending Skip 2.12[$`5esn`][$#usn8] Where 1e1 In \"d_str\" In `7esn`"),
    octest_legacy:ct_string("Match @usn6=(((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))),(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}) Using Scan `2esn`:usn1 Using Index _usn3:`6esn`(#usn7) Detach Delete $#usn7 Contains 0x0 Contains 1000,{_usn3}[..\"d_str\"][..`5esn`] Union All Load Csv From Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))[[{_usn4} In {12} In $0,$`5esn`[2.12..],12[1.e1..{_usn3}][1.e1..1.0]]][[12e12 Is Not Null Is Not Null]] As usn2  Union All Optional Match `3esn`=Allshortestpaths(((#usn7 {``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[#usn8?:#usn7{`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000}]->(:@usn6:#usn8{`4esn`:$`8esn`[..00]}))) Where 00 Starts With 0xabc Create `7esn`=((:`3esn`:@usn5$7)) Detach Delete @usn6 Contains Null Contains $`7esn`,$usn2[$`2esn`..`4esn`]"),
    octest_legacy:ct_string("Unwind 0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` As `4esn` Delete 1e1 In \"d_str\" In `7esn` Foreach(`5esn` In $@usn5 Starts With {@usn5} Starts With 9e0| Remove _usn3(0.12 =~$0 =~$0).`3esn`) Union With  .e0 Ends With 0.12 As `6esn` Skip Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End Limit 1.0 Starts With 12e12 Starts With {`5esn`} Where 123.654[True..$#usn8][0.12..Count(*)] Unwind $usn1[{`5esn`}][$`6esn`] As @usn6"),
    octest_legacy:ct_string("With Distinct [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn`,All(`3esn` In {7} Is Null)[{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]}..],{`2esn`} Ends With {`7esn`} Skip `6esn`(Distinct 0X7[`7esn`][123.654]) Is Not Null Is Not Null Unwind 1000 In {`8esn`} In 01 As `` Union All Start #usn7=Rel:@usn6(`7esn`={`8esn`})  Return *,'s_str' Starts With 123.654 As usn1 Order By $#usn7[..{`5esn`}][..9e12] Desc,Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] Desc,0x0 Ends With $12 Asc Limit $123456789 In $#usn7 In `4esn` Detach Delete 's_str' Ends With 7 Ends With {_usn4},{@usn6}[..$7][..$`7esn`]"),
    octest_legacy:ct_string("Load Csv From _usn3[_usn3..][12.e12..] As `5esn` Fieldterminator 's_str' Return {usn2} =~12 Order By @usn6 Is Null Is Null Descending,{_usn3} Is Null Is Null Desc,Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1) Descending Unwind 7[..999][..{#usn8}] As `8esn` Union All Foreach(`5esn` In {123456789} Starts With 0.0 Starts With `5esn`| Remove 2.12.`7esn`!,[@usn6 Contains $1000 Contains {`7esn`}].`3esn`?) Optional Match `7esn`=Shortestpath(((:`5esn`{``:1.0[0e0..0.e0]})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`))) Using Index `6esn`:@usn5(`2esn`) Using Scan ``:`2esn` Union Merge `7esn`=((`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(`` )<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})) Unwind None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End As usn2 Detach Delete $`3esn` In $`6esn` In $``,\"d_str\" =~{usn1} =~{`7esn`}"),
    octest_legacy:ct_string("Return $`5esn`[..$`5esn`][..$12] As `5esn`,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn`,$`2esn` Is Null Is Null Order By Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains Extract(`5esn` In \"d_str\" Is Null Is Null Where Null Ends With `2esn` Ends With $usn1|$#usn7[@usn5..{1000}][1.e1..7]) Descending,Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Asc,None(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]) In (`4esn` {`6esn`:#usn8[..{#usn7}]})<-[_usn4 *..999]->({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[#usn8? *0..]->(#usn7 ) In Extract(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )) Desc Limit $`7esn`[1.e1.._usn4][0Xa..`2esn`] Start @usn5=Node:#usn7({_usn3}) ,@usn6=Relationship:@usn6(`4esn`='s_str')Where {``} Is Not Null Union All Merge ``=((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) On Match Set All(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`).`6esn`! =_usn4 Contains 2.12 On Match Set `1esn`+=Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Return *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip Case When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` When {`7esn`}[..{`4esn`}] Then {usn1} Ends With $0 End[All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"])..[Count ( * )[0.12...e1],1.0[00..],$``]][`4esn`(`4esn` Ends With 07 Ends With {`3esn`})..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `1esn` =~\"d_str\"|9e12 Is Not Null Is Not Null)] Limit Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Union All Create `6esn`=(`7esn` :`5esn`)<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]}),`2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})"),
    octest_legacy:ct_string("Create Unique `6esn`=((`2esn` :_usn4)),(((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}))) Union All Detach Delete 1.0 In Count(*),{_usn4}[`3esn`][12.0],1e1 Contains Count ( * ) Create Unique _usn4=(`1esn` {@usn5:1.0[0e0..0.e0]})-[usn2?:#usn7]-(:`4esn`{``:2.12 Is Not Null Is Not Null}),Shortestpath(((`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})<-[`6esn`?:`4esn` *..01]-({`7esn`:{999}}))) Load Csv From Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] As `2esn` Fieldterminator \"d_str\" Union Return 2.12[$`5esn`][$#usn8] As #usn8 Skip False =~$7 =~2.12 Delete $@usn5 Starts With #usn7"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From (:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]}) Is Null As @usn6 Fieldterminator \"d_str\" Foreach(`7esn` In (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End| Optional Match Allshortestpaths((((:`2esn`:usn1{@usn5:`5esn`[.e0..][07..],`4esn`:`8esn` =~0xabc =~010})-[`7esn`?*..]->(#usn7 {`5esn`:00 Starts With 0xabc,`6esn`:0Xa =~Null =~$``})-[usn2?]-(:@usn5)))),_usn4=(((#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}))) Using Join On `6esn`,`8esn`,`4esn` Using Index #usn7:#usn7(``) Where 1.0 Is Null Is Null Create _usn4=((@usn6 )<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[?:`8esn` *..0x0{`2esn`:$`4esn`[Null..]}]->({#usn8:0xabc[.e0]})),Shortestpath(((`6esn` :`4esn`))))"),
    octest_legacy:ct_string("Unwind $#usn8[$`2esn`..][{`2esn`}..] As @usn5 Unwind 0Xa[7..2.12][`3esn`.._usn3] As _usn3"),
    octest_legacy:ct_string("Start `7esn`=Rel:_usn4(``={#usn7}) ,@usn6=Node:`7esn`(_usn4={12})Where Count ( * )[0.12...e1] Create `7esn`=Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}}))) Union All Match Shortestpath((`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})) Using Index ``:usn1(@usn5) Union All Unwind 12 Ends With $usn2 As `6esn` Unwind `7esn`[$12..][$`8esn`..] As `2esn` Unwind .e0 =~`6esn` =~{12} As `3esn`"),
    octest_legacy:ct_string("Remove _usn4(Distinct `` Ends With $1000,$`5esn`[{`3esn`}]).`7esn`,`6esn`:usn2 Optional Match Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On ``,`6esn`,usn2 Using Scan ``:`7esn` Where $999[0.0..] Union All With  (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Skip Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})))] Where 0.12 =~$0 =~$0 Union With  *,(`1esn` {#usn7:{_usn4} In {12} In $0})<-[#usn7?:_usn3|_usn3 *..0x0]-(`1esn` :`8esn`:`7esn`)[Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End..(`7esn` {@usn5:{7}[..1.0][..9e0]})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{usn2:$`2esn`}..[`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null|$#usn7[#usn7..]]] As `2esn` Limit {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Where {#usn7}[`2esn`..] Create Unique (`7esn` {@usn5:{7}[..1.0][..9e0]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]}),((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0}))"),
    octest_legacy:ct_string("Load Csv With Headers From 01[2.12..`8esn`] As @usn5 "),
    octest_legacy:ct_string("With Distinct 07[$123456789..] Order By {7}[$7..$``][{``}..{7}] Descending,$_usn3[Count(*)] Desc Union All Foreach(`8esn` In $`3esn` Is Not Null Is Not Null| With Distinct *,{``}[$#usn8..$usn1] As `3esn` Order By $usn2[$`2esn`..`4esn`] Ascending,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Asc,True[{_usn4}..][False..] Ascending Where \"d_str\" Contains {123456789} Contains 01 Start `3esn`=Relationship:#usn7('s_str') )"),
    octest_legacy:ct_string("Start `2esn`=Node:@usn6({_usn4})  Create `1esn`=Shortestpath((((`2esn` :`8esn`:`7esn`)<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})))) Optional Match (`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`5esn`=Allshortestpaths(((:`1esn`{``:.e1 Is Null Is Null})<-[usn1?:`7esn` *0xabc..{`3esn`:$#usn8[$`8esn`..{`8esn`}]}]->(:`4esn`{`8esn`:0.e0 In $#usn7 In $_usn3}))) Where {`5esn`} Contains $0 Contains {``} Union All Detach Delete {`6esn`},Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Case When 07 Contains 0X7 Contains $`8esn` Then {`4esn`} =~9e0 =~{12} When .e1 Ends With 1e1 Ends With @usn5 Then $#usn8[Count ( * )] Else Count ( * )[True..][{#usn7}..] End Ends With Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End,`1esn`[..{@usn6}][..$123456789] Union All Remove Reduce(#usn8=#usn7 Is Null Is Null,`8esn` In 01[2.12..`8esn`]|0Xa[2.12]).`7esn`?,(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`4esn`:`8esn` *00]->(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})<-[{`6esn`:2.12 Contains `1esn`,`1esn`:9e12[`6esn`..12.0]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`})._usn3!"),
    octest_legacy:ct_string("Match (((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}))),Shortestpath((`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})) Using Scan `3esn`:_usn4 Using Index `3esn`:@usn5(`8esn`) Where Count(*) Ends With 12.0 Ends With 12 Unwind Case When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else $1000 Is Null Is Null End Starts With `7esn`(Distinct $#usn7[..{`5esn`}][..9e12]) Starts With {`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`} As usn1"),
    octest_legacy:ct_string("Remove Reduce(`4esn`=0X7[$999][_usn4],`2esn` In `1esn` =~\"d_str\"|0Xa[$123456789..123.654][.e12..0.e0]).usn2,{@usn6}.@usn6 With  7[$`8esn`..123456789][$usn1..$usn1] As `5esn`,2.12[{7}..] As `5esn`,[usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null) As `` Skip 12.0 In {`2esn`} Where 123.654 Is Not Null Is Not Null Union All Remove Case When `2esn` Is Null Then 1000 =~@usn6 =~0x0 Else \"d_str\"[#usn8] End.`1esn` Union All Foreach(_usn3 In 123456789 Ends With $`6esn` Ends With $#usn7| Unwind $`1esn`[{`2esn`}..] As `7esn` Create `8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}}))) Start usn1=Rel:@usn6(#usn7='s_str') ,``=Node:@usn6({_usn4})"),
    octest_legacy:ct_string("Foreach(usn2 In {1000}[$999...e12][`7esn`..'s_str']| Create _usn3=Allshortestpaths((((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))),(((#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]})))) Union With  All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Limit $12[`5esn`..] Where 0.12[`2esn`..{`6esn`}] Delete $#usn8[Count ( * )]"),
    octest_legacy:ct_string("Match @usn5=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})),(`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}) Merge Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))) On Match Set `5esn` =All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] On Match Set `7esn` =`4esn`[..010][..{12}],@usn5+=0X7[$999][_usn4],@usn5 =0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` Load Csv From 2.12[{7}..] As #usn8  Union Create (((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}))),((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}})) Merge ((#usn7 :#usn7)<-[#usn8:@usn6|`6esn`{`8esn`:True[00][0Xa]}]->(`7esn` :`7esn`:_usn3{usn2:_usn3[$`8esn`]})) On Match Set Case When 1.0[0X0123456789ABCDEF] Then 9e1 In $`3esn` In $@usn6 End.#usn8? =12e12 Is Null Is Null,Filter(#usn8 In 7[..999][..{#usn8}] Where 0e0 Contains Null).`6esn`! =0xabc[.e0],@usn6+={999} Is Null Is Null On Create Set `4esn` =Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}))))[Case When $999[0.0..] Then 12 Ends With 0x0 Ends With 0.e0 When `` Is Not Null Is Not Null Then {`3esn`}[..07][..{`5esn`}] End..[`3esn` In {7} Is Null Where usn1 Is Null Is Null]],Case When Count ( * ) Ends With $@usn5 Then _usn4 Contains 2.12 Else False =~$7 =~2.12 End.`5esn`! =7 Ends With $`4esn` Return 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] As #usn8,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} As _usn4,12.0 Ends With True Ends With 123456789 As #usn7 Skip $1000 Is Not Null Union All With Distinct Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn`,{``}[$#usn8..$usn1] As @usn6,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null Order By $0[..9e1] Descending,{usn1}[Count(*)..] Desc Skip (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Where $`5esn` In $`6esn` Load Csv With Headers From `6esn`[12..$usn2][{#usn8}..{usn2}] As `2esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] As `3esn` Start @usn6=Rel:``(_usn3='s_str') ,``=Node:_usn4(usn1={12}) Create (:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[`1esn`:_usn4|:usn2]-(`8esn` :`8esn`:`7esn`) Union Optional Match (((usn2 {``:01[{@usn5}]})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[`6esn`? *0..]-(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12}))) Using Scan usn2:`6esn` Using Join On #usn8 Where $_usn3[..1000] Create usn1=(((@usn5 :`8esn`:`7esn`{`6esn`:`7esn`[$0][9e12],`4esn`:.e1 Is Null Is Null})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`))),(((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}))) Remove [{#usn7}[9e1..][{123456789}..]].usn1!,None(`2esn` In `1esn` =~\"d_str\" Where `` Ends With 123456789 Ends With 123.654).@usn6,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8).`4esn` Union All Return Distinct {`4esn`:`7esn` Is Null}[{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]}..] As #usn8 Order By 9e12[`1esn`..][$`1esn`..] Ascending,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] Ascending,9e1 Is Not Null Asc Match ``=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),usn2=Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Using Join On #usn7,_usn4 Where $#usn8 Contains $`1esn` Contains {`6esn`}"),
    octest_legacy:ct_string("Return Distinct 12.e12 Is Null Is Null As `6esn`,01 Is Null As `2esn`,$12 =~$_usn3 As #usn8 Skip Filter(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``]) Ends With Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End Limit $999 Is Not Null Create (`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})<-[`4esn`?{`3esn`:\"d_str\" Is Null Is Null,usn1:0X0123456789ABCDEF[123456789]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]}),`2esn`=(@usn5 :usn1) Create Allshortestpaths((:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1)) Union Create `4esn`=((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})),`1esn`=((({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5)<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})))"),
    octest_legacy:ct_string("Detach Delete $@usn5 Starts With {0} Starts With 12 Foreach(`7esn` In {@usn6} Is Null Is Null| Return {`4esn`:`7esn` Is Null}[{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]}..] As #usn8 Order By 9e12[`1esn`..][$`1esn`..] Ascending,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]] Ascending,9e1 Is Not Null Asc Unwind None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`])[Any(`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`})..][Extract(`2esn` In `1esn` =~\"d_str\" Where $_usn4[1.e1]['s_str']|usn1[`5esn`..$7])..] As usn2)"),
    octest_legacy:ct_string("With Distinct *,9e1[2.12],$_usn4 Contains Null Contains #usn8 As #usn7 Order By (usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})<-[ *123456789..]-(:@usn5) Is Null Is Null Desc,False[..{`1esn`}] Desc Skip 1e1[$`5esn`][{`3esn`}] Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]] Where 123.654 Contains $`4esn` Contains 1.0"),
    octest_legacy:ct_string("Remove ({`5esn`:\"d_str\" Starts With 01})<-[:_usn4|:usn2{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]}]-(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})._usn4,[`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 0.e0[123.654][01]|{usn1}[0X0123456789ABCDEF]].`7esn`?,Extract(`4esn` In $`3esn` Is Not Null Where `7esn`[..2.12][..{usn1}]|9e1[..$`2esn`]).`8esn`! Create Unique `7esn`=Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})))),`5esn`=((:@usn5)-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)) Union Remove [`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 01234567 Is Null Is Null].`6esn`?,`8esn`:`8esn`:`7esn`,Allshortestpaths(((`4esn` {`6esn`:#usn8[..{#usn7}]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]}))).#usn7! Unwind [{@usn6} Ends With 's_str' Ends With 12.0,{12} Contains {123456789} Contains `4esn`] Starts With Filter(_usn3 In {`3esn`}[`2esn`] Where {1000} =~0 =~123.654) Starts With Case When Count ( * )[0.12...e1] Then $@usn5 =~1000 =~1000 When Null Ends With `2esn` Ends With $usn1 Then $usn2[{@usn5}] End As `4esn` Merge `4esn`=(({_usn3:.e12[@usn5..$12]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})) On Match Set ``:_usn3:_usn3"),
    octest_legacy:ct_string("Create `4esn`=((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})),`1esn`=((({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5)<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}))) Union All With  0.e0 In $#usn7 In $_usn3,(usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8)[Reduce(usn2=`2esn` Starts With $_usn4,#usn7 In {``} Is Not Null|{7} Is Null)..][Single(#usn7 In {``} Is Not Null Where $1000[0Xa][{#usn7}])..] As `2esn` Order By $usn1 Ends With $`` Ends With $12 Desc,1e1[1000..] Ascending,{123456789}[0.e0..$123456789][0Xa..`6esn`] Descending Limit {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Where `4esn` Ends With 07 Ends With {`3esn`}"),
    octest_legacy:ct_string("Start _usn4=Node:`4esn`(_usn4={123456789}) Where {_usn4} In {12} In $0 Union All Create #usn7=Shortestpath(((@usn6 )<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[?:`8esn` *..0x0{`2esn`:$`4esn`[Null..]}]->({#usn8:0xabc[.e0]}))),`3esn`=Shortestpath((@usn5 :`8esn`:`7esn`{`6esn`:`7esn`[$0][9e12],`4esn`:.e1 Is Null Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})) Delete `2esn`[{`4esn`}][$_usn3] Union Foreach(`1esn` In {#usn7} In 0x0 In $0| Unwind $`1esn` Ends With 9e1 Ends With $123456789 As ``) Create `8esn`=Allshortestpaths((`` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})),(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`8esn` :`8esn`:`7esn`) Start ``=Rel:#usn8(_usn3='s_str') ,`7esn`=Rel:`6esn`(\"d_str\")Where 0[..usn2][..{@usn5}]"),
    octest_legacy:ct_string("Foreach(`2esn` In 1e1 In \"d_str\" In `7esn`| Return Distinct *,Reduce(`5esn`=$`5esn`[{`3esn`}],`3esn` In {7} Is Null|`6esn`[12..$usn2][{#usn8}..{usn2}]) In @usn5(Distinct _usn4 Starts With $_usn4 Starts With 12.e12) In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Count ( * ) Ends With 12.0) As #usn8 Order By {7}[..1.0][..9e0] Asc Skip {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Limit 0 In $_usn4 In $@usn5) Unwind $@usn5 Is Not Null Is Not Null As `8esn` Return Distinct *,`4esn`[`5esn`..12][@usn6..False],Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End As `4esn` Order By 123456789[{123456789}..'s_str'] Descending Limit 9e0 Union Return 12.e12 Is Null Is Null As `6esn`,01 Is Null As `2esn`,$12 =~$_usn3 As #usn8 Order By (`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])] Descending Skip [0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]] Start @usn6=Node:#usn7(@usn6={#usn8}) ,`4esn`=Relationship:@usn6({12})Where \"d_str\" Starts With 01 Remove ``:`1esn`,[#usn7 In {``} Is Not Null Where {0}[01][`7esn`]|0e0 Starts With 1000 Starts With #usn7].#usn7,{usn1:`1esn` Contains {usn2} Contains $#usn8}._usn3?"),
    octest_legacy:ct_string("Return *,Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))[[{_usn4} In {12} In $0,$`5esn`[2.12..],12[1.e1..{_usn3}][1.e1..1.0]]][[12e12 Is Not Null Is Not Null]] Skip 1.e1[Count ( * )..] Limit 0e0 Starts With 1000 Starts With #usn7 Create `8esn`=((`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(`` )<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})) Create ``=Allshortestpaths(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})) Union All Unwind $#usn7[..{`5esn`}][..9e12] As `3esn` Foreach(`` In Reduce(_usn4=01[{`2esn`}..{@usn6}][$`2esn`..0.0],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0.12 =~$0 =~$0)[Shortestpath((((`1esn` {@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00})-[`6esn`?:`3esn`|:#usn8]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}))))..[{12}[{7}][$123456789]]]| Remove 2.12.`7esn`!,{`1esn`:$0[..9e1]}.usn2!,Reduce(usn2=#usn7 Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{_usn3}[12.e12]).@usn6?) Foreach(_usn3 In {@usn6} Starts With `5esn`| Remove {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}}.`6esn`!,All(`5esn` In $999[0.0..] Where $`5esn`[..$`5esn`][..$12])._usn4?,(:@usn6:#usn8$`5esn`)<-[`1esn`?:usn1|@usn6 *0..]-(:#usn8:#usn8{@usn6:$_usn3[..1000]})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]}).`3esn` Start `1esn`=Rel:`4esn`(`4esn`='s_str') Where 12.e12[`3esn`]) Union All Return Distinct Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Optional Match `8esn`=Allshortestpaths(((`` {usn2:0X0123456789ABCDEF[123456789]})-[?{`8esn`:{7} Is Null}]->(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))),@usn5=((`5esn` {`8esn`:1000[Null..{123456789}]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})) Using Scan `4esn`:`5esn` Using Join On #usn8 Where {#usn8} Is Null Return {_usn4:$_usn4[1.e1]['s_str']} Is Null As _usn3,[$0] In [`2esn` In `1esn` =~\"d_str\" Where {0} Ends With $_usn3 Ends With $`7esn`|{999} Contains .e0 Contains 12.0] In None(`2esn` In `1esn` =~\"d_str\" Where {`7esn`}[..$@usn5][..$#usn8]) As usn1,Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn` Order By $`3esn`[..12.0] Asc Skip 0.0[$0][{@usn5}] Limit {``} Starts With $`2esn` Starts With `1esn`"),
    octest_legacy:ct_string("Load Csv With Headers From [`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]|`8esn` Contains $usn1 Contains $12][Filter(_usn3 In {`3esn`}[`2esn`] Where #usn7 Contains _usn3 Contains {`3esn`})..(:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[usn2?:`7esn` *123456789..{_usn4:$@usn5 Starts With {0} Starts With 12,`2esn`:{7}[..12e12][..Count ( * )]}]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})] As `5esn` Fieldterminator \"d_str\" Create Unique Shortestpath((_usn4 )<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})),@usn5=(((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}))) Foreach(`4esn` In 1000[0X7..2.12]| Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4?) Union Load Csv With Headers From 9e12[`6esn`..12.0] As @usn6  Union All Merge ``=Allshortestpaths(((:`3esn`:@usn5$7))) Detach Delete 123.654[$`1esn`]"),
    octest_legacy:ct_string("Create Unique @usn5=Allshortestpaths(({`1esn`:$`8esn`[1000..0Xa]})),(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}) Delete Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null,$@usn5[..12e12][..$123456789] Create _usn4=(`` :#usn8:#usn8) Union All Create @usn5=Shortestpath(((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8}))),_usn3=Allshortestpaths((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Match (`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Using Scan `6esn`:`3esn` Using Scan _usn4:`7esn` Where 0[{usn2}..][$`6esn`..] Return Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) Contains Filter(`` In `` Is Not Null Is Not Null Where 0e0 Starts With 1000 Starts With #usn7) Contains Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]}))) As #usn7 Order By 2.12 =~Count(*) Descending,`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) Asc Union All Start `6esn`=Node:``({`1esn`}) ,usn2=Node:_usn4(``={#usn7})Where $`5esn`[{`3esn`}] Detach Delete Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)],{123456789}[0xabc..],Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null} Create `4esn`=Allshortestpaths(((usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[`2esn`?:`7esn`]->(`7esn` {`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})))"),
    octest_legacy:ct_string("Match Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))) Using Index `1esn`:@usn5(#usn8) Merge ``=(`1esn` {``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Start `8esn`=Rel:@usn6(`7esn`={`8esn`}) ,_usn4=Node( {`1esn`})Where 0[1.e1..12e12] Union All With  *,.e0 Ends With 0.12,12.e12[`3esn`] As #usn7 Skip False Contains {`6esn`} Create Unique Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})),({`4esn`:`7esn` Is Null}) Return {12} Contains {123456789} Contains `4esn` Union Foreach(usn1 In 0Xa[..{`4esn`}][..12.0]| Return *,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] Limit [`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999}] Ends With usn1(Distinct 1000 In {`8esn`} In 01,{_usn3}[..\"d_str\"][..`5esn`]) Ends With Reduce(_usn4=1000[Null..{123456789}],`5esn` In $999[0.0..]|9e1 In $`3esn` In $@usn6) Remove Reduce(`8esn`={`7esn`}[..$@usn5][..$#usn8],`3esn` In {7} Is Null|0.12[$`3esn`..$_usn3][12.0..usn1]).`1esn`,Reduce(`4esn`=$999 Is Not Null,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$`7esn`['s_str']).``?,(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}).#usn7) With Distinct (`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])] As _usn4,$_usn4[1.e1]['s_str'] As #usn8,usn2[$7..$123456789][$@usn6..$7] Order By 9e1[0.0..] Desc,0.12 =~$0 =~$0 Desc Limit {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Where 0X7 =~9e1 Unwind .e0 Starts With $`` Starts With $usn2 As _usn3"),
    octest_legacy:ct_string("Start `7esn`=Rel:_usn4(``={#usn7}) ,`8esn`=Relationship:`4esn`(`1esn`={`2esn`}) Match @usn5=Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))),`2esn`=Allshortestpaths(((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`8esn`?:@usn6|`6esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))) Using Scan `4esn`:`8esn` Using Join On `8esn`,`2esn` Where {_usn3}[..$12][..0.12] Match Shortestpath((`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})),``=Allshortestpaths((`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})) Using Scan _usn3:`1esn` Where 12.0[123.654][Count(*)]"),
    octest_legacy:ct_string("Return {123456789} Contains $#usn8 As `3esn`,{7}[..12e12][..Count ( * )],$0[$`1esn`..07] Order By 0e0[$1000][{usn1}] Descending,1.0 Starts With 12e12 Starts With {`5esn`} Desc Skip $`5esn` In 0.e0 Union Load Csv With Headers From `6esn`[..$@usn6] As @usn6 Fieldterminator 's_str' Unwind {`2esn`}[$`4esn`][$`5esn`] As ``"),
    octest_legacy:ct_string("Create `1esn`=Shortestpath((((`2esn` :`8esn`:`7esn`)<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})))),(((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}))) Union All Optional Match (:`5esn`{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}),((`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn`]->({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})) Using Index `6esn`:@usn5(`2esn`) With Distinct *,0Xa Is Null Is Null As `1esn` Order By {7}[$`5esn`][{_usn3}] Asc,.e1 Is Null Is Null Descending,usn1[`5esn`..$7] Desc Union Merge `6esn`=(@usn5 {`7esn`:$`6esn`[010..]})-[?:`8esn`{`3esn`:1.0 In Count(*)}]-(`4esn` :#usn7{``:$#usn7[@usn5..{1000}][1.e1..7]})-[`5esn`?:@usn5{`4esn`:0Xa =~Null =~$``}]->(:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000}) On Create Set `4esn`+=(`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)],Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! ={@usn6}[{999}..][00..] On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`4esn` =~.e12 As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(_usn4 In {`2esn`} Is Not Null| Match usn2=(`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Using Join On #usn7,_usn4 Using Join On `8esn`,@usn5 Where `3esn`[{`2esn`}]) Union All Return *,12.0 Ends With True Skip {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] With  *,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn`,`5esn` Is Null Order By Reduce(@usn6=$1000[999],`8esn` In 01[2.12..`8esn`]|#usn7 Is Null Is Null)[_usn3(0.12 =~$0 =~$0)..][count($12 Ends With 07 Ends With $123456789,`8esn`[{123456789}..])..] Desc Skip `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) Limit {@usn5} =~Count ( * ) =~12.0 Start `2esn`=Node:``({`1esn`}) "),
    octest_legacy:ct_string("Match @usn5=Allshortestpaths((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})),`2esn`=Shortestpath(((#usn8 {_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}))) Using Join On `5esn`,#usn7 Create ((@usn5 :usn1)<-[`5esn`? *7..12{`5esn`:{999},_usn3:$`5esn`[2.12..]}]->(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})-[_usn4?:_usn4|:usn2 *..999]-({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Union All Unwind 123456789 Ends With 0.12 Ends With `` As _usn3 Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8? Remove Case When $#usn8 Ends With $`2esn` Ends With $@usn6 Then $1000[`2esn`..`5esn`][1e1..1.e1] Else {`4esn`} =~{7} =~{`7esn`} End._usn3?,{`8esn`:{usn2} =~12}.@usn5,`2esn`(Distinct 7[$`8esn`..123456789][$usn1..$usn1],1e1 In 123.654 In `3esn`)._usn4!"),
    octest_legacy:ct_string("With Distinct *,{``}[$`8esn`..] As `6esn` Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) Ends With Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Ends With Reduce(_usn3={7}[..1.0][..9e0],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`1esn` Contains {usn2} Contains $#usn8) Asc,12.e12[7..$`6esn`] Desc,$usn1[.._usn4][..False] Asc Limit $#usn8[Count ( * )] Create Shortestpath(((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}}))),`7esn`=((:`3esn`:@usn5$7)-[ *0xabc..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})<-[?{#usn8:9e12[`1esn`..][$`1esn`..]}]-(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})) Start ``=Rel:`7esn`(usn2={`6esn`}) ,`2esn`=Node:@usn5({`1esn`}) Union Start `3esn`=Node:``(_usn3='s_str') ,`7esn`=Node:_usn4(#usn7=\"d_str\") Foreach(`7esn` In {@usn6} Ends With 's_str' Ends With 12.0| With Distinct `7esn` Is Null As `7esn`,count($123456789 Is Null Is Null,{`7esn`} Starts With $123456789 Starts With $@usn6)[`8esn`(Distinct `8esn` =~0xabc =~010)][Case When `2esn`[..$#usn8][..Count(*)] Then False =~1e1 =~0.e0 When {`4esn`} Starts With $usn2 Starts With $1000 Then {``} Is Not Null End] As @usn5,1000 In `7esn` In 9e12 As `6esn` Limit $`` Is Not Null Match `2esn`=Allshortestpaths((({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}}))),#usn7=Shortestpath((((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})))) Using Scan ``:_usn4 Using Scan ``:`2esn`) Create ``=Shortestpath(({`7esn`:{999}})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})),``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))"),
    octest_legacy:ct_string("Load Csv With Headers From $`8esn` Is Not Null Is Not Null As #usn8  Union Create `8esn`=Allshortestpaths((`` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})),(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`8esn` :`8esn`:`7esn`) Union All Create Unique _usn3=(({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 :`7esn`:_usn3)),(((#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})<-[`2esn`?:`7esn` *0X7..]-(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}))) Create ``=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),@usn6=Allshortestpaths(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})))"),
    octest_legacy:ct_string("With Distinct All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)],None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As @usn5 Order By True =~{`5esn`} Asc,\"d_str\" Contains {123456789} Contains 01 Asc Where {999} Starts With {0} Union All Create Unique ((usn2 :@usn5)<-[? *00]->(@usn5 :usn1)),Allshortestpaths((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))) Create `6esn`=Shortestpath((({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[``?:#usn8|`1esn`{#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1}]->({@usn5:12e12 Contains 0Xa,_usn4:01[2.12..`8esn`]}))),usn2=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-({#usn8:0xabc[.e0]})))) Start `6esn`=Node:``('s_str') Where 12.e12[7..$`6esn`] Union Start `5esn`=Relationship(*) ,`7esn`=Rel:#usn8({_usn3}) Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Foreach(_usn3 In 1.0 =~'s_str' =~{`2esn`}| Detach Delete 07 Is Not Null Is Not Null) With Distinct *,$`7esn`['s_str'] Limit Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Where .e12 In 0.e0 In {12} Foreach(@usn5 In {7}[..12e12][..Count ( * )]| Load Csv With Headers From 0e0 Starts With `2esn` Starts With $`` As `3esn` Fieldterminator \"d_str\" Detach Delete {123456789} Contains $#usn8) Union Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`7esn`=((@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[?:`7esn`{`3esn`:{#usn8}[010]}]-(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})) Union All Remove Reduce(`8esn`={`7esn`}[..$@usn5][..$#usn8],`3esn` In {7} Is Null|0.12[$`3esn`..$_usn3][12.0..usn1]).`1esn`,Reduce(`4esn`=$999 Is Not Null,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$`7esn`['s_str']).``?,(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}).#usn7"),
    octest_legacy:ct_string("Delete 0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,$12 Starts With $`8esn` Starts With $`1esn`,123456789[_usn4..][{999}..] Union All Merge Allshortestpaths((_usn4 )<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Start `8esn`=Rel:`7esn`(_usn4={12}) Where 0.12 Starts With $`5esn` Starts With 12 Merge `1esn`=((`8esn` )) On Create Set usn1:`4esn`,usn2+=0Xa[2.12],`7esn`:usn1 On Create Set `4esn` =[1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..])"),
    octest_legacy:ct_string("Create ((@usn6 ))"),
    octest_legacy:ct_string("Foreach(`5esn` In $`5esn`[..$`5esn`][..$12]| Load Csv With Headers From 0e0[07] As _usn4 Fieldterminator 's_str' Create _usn4=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`),@usn5=(((:_usn4)<-[:`6esn`|`5esn` *..010]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})<-[`4esn`?:`7esn` *0..{`2esn`:00[`2esn`..12][123456789..0.e0]}]->(`1esn` :_usn3:_usn3)))) Union All Foreach(`` In 010 =~{usn2}| Load Csv With Headers From 0X7[..2.12] As #usn8 Fieldterminator \"d_str\") Start #usn8=Rel:usn1(\"d_str\") ,`2esn`=Node:_usn4(#usn7=\"d_str\")"),
    octest_legacy:ct_string("Foreach(`4esn` In {`6esn`}| Create Unique `8esn`=(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]})) Create Unique (@usn6 :`1esn`)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}),_usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))) Union With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..]"),
    octest_legacy:ct_string("Start #usn7=Rel:_usn4(\"d_str\") Where `3esn`[`3esn`..][#usn8..] Unwind 1e1 Contains 0e0 As _usn3 Optional Match @usn6=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),Shortestpath(((@usn6 :`8esn`:`7esn`)<-[`6esn`?:`4esn` *..01]->(`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?]-(`7esn` :`5esn`))) Where _usn3[_usn3..][12.e12..]"),
    octest_legacy:ct_string("Create Unique @usn6=((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) With Distinct 0e0[..010] As _usn3,Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) As `` Skip {12}[{7}][$123456789] Union Merge `5esn`=(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[`1esn`?:`8esn` *123456789..]->(#usn7 :`6esn`$1000) On Create Set Extract(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7]|$7 Is Not Null Is Not Null).`4esn`! =Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End[None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)..[`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1]],[12[1.e1..{_usn3}][1.e1..1.0]].`8esn`? ={`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null,usn1 =$_usn4 Contains Null Contains #usn8 Load Csv With Headers From 0 In `2esn` In 010 As `1esn` Fieldterminator 's_str' Match ``=(`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}),(#usn8 :@usn6:#usn8) Using Index `7esn`:usn2(`6esn`) Union Create (((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6}))),#usn8=(`5esn` :`4esn`)<-[_usn4 *..999]->({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5}) Optional Match Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Unwind Reduce(`6esn`=@usn5 Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{12} Ends With 1.0 Ends With .e0)[Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|`7esn`[..2.12][..00])] As ``"),
    octest_legacy:ct_string("Load Csv With Headers From {0}[\"d_str\"..07][0..'s_str'] As @usn5 Fieldterminator \"d_str\" Match _usn3=Allshortestpaths((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Where {#usn7}[..9e12][..`8esn`] Remove Reduce(_usn4=12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],#usn7 In {``} Is Not Null|$`8esn`).@usn5,Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]|{7}[$``][{@usn6}]).#usn7 Union All Start @usn5=Relationship:@usn5({1000}) Where $_usn4 Starts With 1e1 Unwind $1000 In $1000 In $`3esn` As usn2 Union All Foreach(@usn5 In {7}[..12e12][..Count ( * )]| Load Csv With Headers From 0e0 Starts With `2esn` Starts With $`` As `3esn` Fieldterminator \"d_str\" Detach Delete {123456789} Contains $#usn8) Remove `4esn`(#usn7 =~Count ( * ) =~``).#usn8!,{`4esn`:$`4esn`[Null..],`3esn`:.e12 Ends With _usn4}.`4esn`,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where $0|1.0[0X7][{`5esn`}]]._usn3 Start `8esn`=Rel:`7esn`(_usn4={12}) ,`1esn`=Node:`2esn`(#usn8={123456789})"),
    octest_legacy:ct_string("Remove (_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[? *00]->(@usn5 :usn1)<-[?{`3esn`:7[{0}..{_usn4}]}]-(#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})._usn4!,Case $#usn8[Count ( * )] When .e1[{`7esn`}..{_usn4}] Then {7} Is Null End.`` Detach Delete $1000 =~$`2esn`,00[Count(*)..] Unwind 1e1 Contains 0e0 As _usn3 Union Unwind $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] As usn1"),
    octest_legacy:ct_string("Return Shortestpath(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))[#usn7(Distinct $`5esn`[`3esn`..])..{``:0Xa Starts With {`6esn`} Starts With $usn1}] Limit Single(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Contains None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Delete 0x0 =~$usn2 Union Start ``=Rel:#usn8(_usn3='s_str') ,`5esn`=Rel:`8esn`({usn1})Where `8esn`[{123456789}..] Return Distinct Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} As `7esn`,.e0[12.e12..] As `3esn`,0e0 =~`6esn` =~123456789 As @usn5 Skip {12} Is Not Null Limit $@usn5 Starts With $1000 Foreach(`2esn` In $@usn5 Starts With {@usn5} Starts With 9e0| Return Distinct 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Skip $`5esn`[2.12..] Limit {_usn4}[`3esn`][12.0] Create Unique ((({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))),Allshortestpaths((@usn6 :_usn3:_usn3)-[?{`3esn`:7[{0}..{_usn4}]}]->(`7esn` :_usn3:_usn3)-[?:usn2|`` *..010{`4esn`:{`4esn`} Starts With $usn2 Starts With $1000,`7esn`:$@usn6 Contains 07}]->(:@usn6:#usn8{`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}))) Union All Load Csv From 9e12[0.0..][$12..] As _usn4 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Load Csv From {#usn8}[$@usn5..usn1][$1000..0xabc] As usn2 "),
    octest_legacy:ct_string("Merge ((#usn7 {`5esn`:00 Starts With 0xabc,`6esn`:0Xa =~Null =~$``})) On Match Set Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0).``? ={@usn6}[{999}..][00..] Match #usn7=(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}) Using Index #usn8:`2esn`(`5esn`) Using Index `3esn`:`5esn`(#usn7) Union Unwind Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}) As ``"),
    octest_legacy:ct_string("Unwind $999 Is Not Null As #usn7 Union All Foreach(`7esn` In 1.0[0X0123456789ABCDEF]| Load Csv From $`3esn` In 123.654 In #usn8 As `` Fieldterminator \"d_str\" Create (({@usn5:{usn2}[.e0..$999]})),Allshortestpaths(((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})))) Union All Create Unique `2esn`=((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]})-[{`7esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4]}]-(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)),`6esn`=Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null}))) With  *,Count ( * )[$_usn4..$`4esn`] As _usn4,@usn6[#usn7][#usn8] As `4esn`"),
    octest_legacy:ct_string("Return Distinct *,`4esn`[`5esn`..12][@usn6..False],Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End As `4esn` Order By 123456789[{123456789}..'s_str'] Descending Limit 9e0 Union All Optional Match `6esn`=Allshortestpaths(((_usn3 :`3esn`:@usn5))) Using Scan `3esn`:`5esn` Using Scan `6esn`:`3esn`"),
    octest_legacy:ct_string("Unwind 07 Contains 0X7 Contains $`8esn` As `6esn` Unwind (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}] As _usn4 Create Unique (`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`) Union All Create Unique @usn6=Shortestpath(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=Shortestpath((#usn8 :@usn5)) Union Unwind 0.12[`2esn`..{`6esn`}] As `6esn` With Distinct *,1000[0X7..2.12] As `4esn` Limit {7}[$7..$``][{``}..{7}] Where _usn3 Starts With 12.e12 Starts With 0.12 Unwind `7esn`(usn2 Is Null)[Case {usn1}[0X0123456789ABCDEF] When $`` Then `8esn` Contains $usn1 Contains $12 Else 's_str'[00][{`5esn`}] End] As @usn6"),
    octest_legacy:ct_string("Load Csv From False =~$7 =~2.12 As `6esn`  Union All Unwind Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789])[`7esn`(Distinct Count ( * ) =~$usn2 =~$usn2)] As @usn6 Create ``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Union Create @usn6=((`` :`7esn`:_usn3)),((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->()) Merge `8esn`=Allshortestpaths((`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))"),
    octest_legacy:ct_string("Remove Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X0123456789ABCDEF =~1e1 =~{`4esn`}|1.0 Contains $_usn4).`5esn`?,Reduce(`5esn`=12[1.e1..{_usn3}][1.e1..1.0],#usn7 In `2esn`[..$#usn8][..Count(*)]|12.e12[7..$`6esn`]).`5esn`!,`4esn`:`6esn` Detach Delete [#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] Contains Case {0}[12.0..0Xa][$`5esn`..{_usn3}] When .e1 Ends With 1e1 Ends With @usn5 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] Else 123.654[...e0] End,9e0[{0}..{`3esn`}][\"d_str\"..0Xa],``[12.0..0e0][{`5esn`}..`7esn`] Union Detach Delete 1.0[00..] Foreach(@usn5 In 0.12 In _usn3 In {0}| Match `2esn`=Allshortestpaths((({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}}))),#usn7=Shortestpath((((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})))) Where $@usn6 Contains 07) Union Match Allshortestpaths((`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})),usn2=({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[:`3esn`|:#usn8 *1000..00{usn1:0[`7esn`..]}]-(usn1 :`3esn`:@usn5) Where `4esn`[..Count ( * )][..{#usn7}] Start `7esn`=Rel:_usn4(``={#usn7}) Where 00 Starts With 0xabc Start #usn7=Node:@usn6({_usn4}) "),
    octest_legacy:ct_string("Merge ((`3esn` :usn2)) On Match Set _usn3+=$`3esn` Is Not Null Is Not Null,`3esn` ={`4esn`} Ends With {usn2} Ends With {999},{@usn6:{999} Starts With $999,`4esn`:$usn1[{`5esn`}][$`6esn`]}.@usn5? =$usn1[..{`6esn`}] Union All Match `2esn`=({#usn7:2.12 Contains usn2 Contains True})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5}),`7esn`=Allshortestpaths((:@usn5$`5esn`)<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[ *1000..00{#usn7:Count ( * ) Contains 07}]->(usn1 :`3esn`:@usn5)) Using Scan `3esn`:`2esn` Using Index `6esn`:#usn8(`2esn`) Where 01[{@usn5}]"),
    octest_legacy:ct_string("Merge Shortestpath(((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null}))) On Create Set `2esn`+={0} In $_usn3,`8esn` ={#usn8} Is Not Null,`1esn`($1000 Is Null).#usn8? =`5esn` Ends With {``} Ends With 12.e12 Union Create `8esn`=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),@usn6=Allshortestpaths(((@usn5 :`4esn`))) Foreach(usn2 In Reduce(usn1=$123456789 Is Null Is Null,_usn3 In {`3esn`}[`2esn`]|Null[$`5esn`][False])[Case 0e0 Contains Null When 0X7[`7esn`][123.654] Then 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] End..][[9e1[$usn2],{`4esn`}[$123456789..][$#usn7..]]..]| Delete Case When {1000}[$`4esn`][\"d_str\"] Then `4esn`[``] When {usn2}[.e0..$999] Then {_usn3}[12.e12] Else `4esn`[``] End[Shortestpath((@usn5 {`7esn`:$`6esn`[010..]})-[?:`8esn`{`3esn`:1.0 In Count(*)}]-(`4esn` :#usn7{``:$#usn7[@usn5..{1000}][1.e1..7]})-[`5esn`?:@usn5{`4esn`:0Xa =~Null =~$``}]->(:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000}))..],$`4esn`[Null..],Case 0x0[`4esn`..'s_str'] When 0.e0 Ends With $#usn7 Ends With $7 Then 0X7[..2.12] When {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Then 0.e0[123.654][01] Else {_usn3}[..$12][..0.12] End[[`1esn`[..{@usn6}][..$123456789]]..] Load Csv From 1e1 Contains Count ( * ) As usn2 Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Unwind 2.12 Contains usn2 Contains True As `4esn` With Distinct Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn`,{``}[$#usn8..$usn1] As @usn6,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null Order By $0[..9e1] Descending,{usn1}[Count(*)..] Desc Skip (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Where $`5esn` In $`6esn` Load Csv With Headers From {0}[\"d_str\"..07][0..'s_str'] As @usn5 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct *,07[$#usn7..{1000}],0X0123456789ABCDEF =~1e1 =~{`4esn`} Order By $`5esn`[2.12..] Asc Where @usn5 Is Null Create ((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),#usn7=((:`5esn`{``:1.0[0e0..0.e0]})) Union All Start @usn5=Rel:#usn8({_usn3}) Where $`6esn` Is Null Detach Delete ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}),`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),usn2[{7}] Create @usn5=Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})))"),
    octest_legacy:ct_string("With  123.654 Is Not Null,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}} Where $@usn5 Starts With $1000 Create Unique `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Unwind {0} In $_usn3 As `3esn`"),
    octest_legacy:ct_string("Load Csv From Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] As usn1 Fieldterminator 's_str' Remove Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]).`2esn`,({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4? Match `8esn`=(((usn2 :#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12}))),((_usn3 :`7esn`:_usn3)-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})) Union All Create Unique @usn5=(((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))"),
    octest_legacy:ct_string("Merge @usn6=Allshortestpaths(((:`1esn`))) On Match Set All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where $_usn4 Ends With usn1 Ends With $0).@usn5? =Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End,Reduce(`8esn`={usn1} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|0xabc[.e0]).`3esn`! =Reduce(`3esn`=12.0[123.654][Count(*)],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|`1esn` =~\"d_str\")[..Case When $`` Is Not Null Then 12[1.e1..{_usn3}][1.e1..1.0] When 7[True..][2.12..] Then $_usn4 Is Not Null Is Not Null End][..Case When $#usn8[$`2esn`..][{`2esn`}..] Then 0X7[1000..{`1esn`}] When {#usn8}[{7}] Then 07 In `2esn` In 12e12 Else $`1esn` Ends With 9e1 Ends With $123456789 End],`3esn` =12.e12[0xabc]"),
    octest_legacy:ct_string("Create Unique @usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]}))"),
    octest_legacy:ct_string("Start _usn4=Rel:#usn8(\"d_str\") ,#usn7=Relationship:`7esn`('s_str') Union Start ``=Rel:#usn8(_usn3='s_str') ,`7esn`=Rel:`6esn`(\"d_str\")Where 0[..usn2][..{@usn5}] Delete $#usn7[..{`5esn`}][..9e12],{``}[$`8esn`..],Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As `2esn` "),
    octest_legacy:ct_string("Start @usn5=Relationship:``(\"d_str\")  Union With Distinct *,$`3esn`[0.12..`8esn`][$#usn7..`5esn`],`3esn`[..010][..$7] As usn1 Order By (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End Desc,({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) In Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12) Descending,$12 Is Not Null Is Not Null Ascending Limit 123.654[0e0..$``][$`1esn`..$`8esn`] Remove Reduce(``=00[`2esn`..12][123456789..0.e0],_usn3 In {`3esn`}[`2esn`]|{#usn8} Is Null).`7esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 12.0 In {`2esn`} As #usn8  Create usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null})) Unwind Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} As `4esn`"),
    octest_legacy:ct_string("Remove Extract(#usn7 In {``} Is Not Null Where True[..$`6esn`]|{``} Is Null).`8esn`!,Case $123456789 Ends With {`1esn`} Ends With $`4esn` When {1000}[$`4esn`][\"d_str\"] Then usn1 Ends With $@usn6 Ends With `3esn` When $#usn7[..{`5esn`}][..9e12] Then {usn2}[$`3esn`..][{#usn7}..] Else Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn6!,Reduce(@usn5=$12[$1000..123456789],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|`4esn` Is Not Null Is Not Null).`5esn` Remove #usn8(Distinct $`4esn`[Null..],2.12 =~False).@usn5,[$`3esn` In $_usn4 In {_usn3},{1000} =~0 =~123.654].`3esn` With Distinct *,`1esn`(Distinct $1000[999]) =~Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) =~{`6esn`:'s_str'[00][{`5esn`}]},{_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] As `` Order By {0}[{`8esn`}..`4esn`] Desc,Case When Count ( * ) Contains 07 Then $`2esn` When 1.0 Is Null Is Null Then `7esn`[..2.12][..{usn1}] End Is Not Null Desc Limit $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Union All Create Unique Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})))"),
    octest_legacy:ct_string("Optional Match Shortestpath((({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6})<-[`4esn`?:usn2|`` *0X7..]->({_usn3:$`5esn`[`3esn`..]})-[@usn5?:`4esn`]-(:usn1{usn1:{`6esn`}}))) Create Unique @usn5=((`5esn` {`8esn`:1000[Null..{123456789}]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})),`4esn`=Allshortestpaths(((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})))"),
    octest_legacy:ct_string("Create Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) With  @usn6[$`3esn`..{`3esn`}] As `3esn`,`6esn`() In {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}} In usn1() Skip $`4esn` Is Null Is Null Unwind All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null As `2esn` Union All Foreach(@usn5 In `5esn` Starts With 010 Starts With 0.0| Create Shortestpath((:`4esn`{``:2.12 Is Not Null Is Not Null})),Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))) Optional Match ``=Shortestpath((`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})),Allshortestpaths(((:_usn4)))) Start usn1=Node:`2esn`({`1esn`}) "),
    octest_legacy:ct_string("Optional Match #usn7=((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})-[_usn4 *0X7..]->(`8esn` :#usn8:#usn8{`3esn`:$`4esn`[9e12..123.654]})) Using Index #usn8:`2esn`(`5esn`) Where $`8esn`[..{`2esn`}] Foreach(`3esn` In Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})))| Load Csv With Headers From 01 Contains {`8esn`} Contains 2.12 As usn1 Fieldterminator \"d_str\" Unwind .e0[..$`8esn`] As usn2) Union All Remove _usn4(Distinct `` Ends With $1000,$`5esn`[{`3esn`}]).`7esn`,`6esn`:usn2 Optional Match Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On ``,`6esn`,usn2 Using Scan ``:`7esn` Where $999[0.0..] Union Load Csv From {`4esn`}[$0..] As `6esn` Fieldterminator \"d_str\" Create Unique Allshortestpaths((`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) Remove [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`|`4esn`[`5esn`..12][@usn6..False]].#usn7?,`6esn`(Distinct False Starts With {`5esn`}).`2esn`?,Extract(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7]|1.0 =~7 =~{usn2}).usn2!"),
    octest_legacy:ct_string("Load Csv With Headers From 0Xa[..{`4esn`}][..12.0] As `7esn` Fieldterminator \"d_str\" Delete {@usn6:$_usn3[..1000]} Is Null Is Null"),
    octest_legacy:ct_string("Merge `4esn`=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})) On Match Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn` Return `` Is Not Null Is Not Null,$_usn3 Ends With 0x0 Ends With 12.0,$_usn3[.e0..$usn2] Order By Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Ascending Limit {`4esn`} Ends With {123456789} Ends With $`4esn` Union Load Csv From `3esn`[{0}][usn1] As #usn7 Fieldterminator \"d_str\" Create ({`8esn`:`3esn`[{0}][usn1]})-[_usn4?:_usn4|:usn2 *00]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``})<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8}),(#usn8 :@usn6:#usn8) Remove [0.12 =~$0 =~$0,2.12 Contains usn2 Contains True,2.12].`4esn`"),
    octest_legacy:ct_string("Delete _usn3[..`8esn`][..2.12],None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 7[..999][..{#usn8}]) Is Not Null,0.e0 Starts With 12.e12 Starts With {_usn4} Return *,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Is Null Is Null,$`5esn`[$`4esn`..{@usn6}][07..$@usn6] Order By {`1esn`:{@usn6}[{999}..][00..]}[..`5esn`][..{#usn8:{`7esn`}[`6esn`][#usn7],`5esn`:$`4esn`[9e12..123.654]}] Ascending Skip [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null Match Allshortestpaths((@usn5 {`7esn`:$`6esn`[010..],#usn8:0.e0 Starts With `2esn`})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})) Using Join On `2esn` Where $1000 In $1000 In $`3esn`"),
    octest_legacy:ct_string("Unwind 0X7[1000..{`1esn`}] As `4esn` Return Distinct `4esn` =~$`5esn`,$`1esn` Starts With {`8esn`} As _usn3,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`])[Any(`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`})..][Extract(`2esn` In `1esn` =~\"d_str\" Where $_usn4[1.e1]['s_str']|usn1[`5esn`..$7])..] As `7esn` Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}} Start `7esn`=Relationship:`3esn`(`6esn`='s_str') Where 0Xa =~123456789 =~_usn4 Union Unwind $`5esn` In 0.e0 As @usn6 Return Distinct 1000[..$0][..True] As `3esn`,`7esn` In {123456789} In `1esn` Skip 7[$_usn4..9e0] Union Optional Match ((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})),(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07}) Using Join On @usn6 With Distinct *,$123456789[_usn3][{#usn7}] As `4esn`,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8) Is Not Null Is Not Null Limit True Contains {0} Contains 7 Where {12} =~#usn8 With Distinct $`` As #usn8,None(`3esn` In {7} Is Null Where 0Xa[2.12]) Is Null Is Null As #usn7 Order By Count ( * ) Contains {`1esn`} Contains 07 Ascending Limit @usn6(Distinct 0X7[1000..{`1esn`}],True[07..$usn2][$7..{usn1}])[Reduce(`4esn`=0.0[$0][{@usn5}],`4esn` In $`3esn` Is Not Null|$`5esn`[`3esn`..])][Case When 123.654[0e0..$``][$`1esn`..$`8esn`] Then $_usn3['s_str'][07] When {`3esn`}[..07][..{`5esn`}] Then 's_str' Is Not Null Is Not Null End] Where {`4esn`} =~{7} =~{`7esn`}"),
    octest_legacy:ct_string("Return usn1[..@usn6][...e0],usn1 Is Not Null As `6esn`,False[_usn3..`8esn`][$`8esn`..{`3esn`}] As _usn3 Order By Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] Ascending,All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]] Ascending Union Start usn1=Relationship:`3esn`(`6esn`='s_str') ,_usn3=Node:`6esn`('s_str')"),
    octest_legacy:ct_string("Create `6esn`=((`8esn` )<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})),(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}) Union All Remove {`5esn`:{12}[..0X7],#usn8:$1000 In $1000 In $`3esn`}.#usn7?,Case 0Xa[2.12] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] Else $1000[0Xa][{#usn7}] End.`1esn`,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0.0 In $usn1|{#usn8}[{7}]].#usn8? Load Csv From usn1 Is Null As @usn5 Fieldterminator 's_str' Merge @usn6=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5}) On Match Set `6esn`+=Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``|usn2[9e12]) Ends With [{`7esn`}[..{`4esn`}]] Ends With Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`4esn`} Starts With $usn2 Starts With $1000),`3esn`+=123456789[0xabc..'s_str'][``..`1esn`],_usn3 ={usn1}[0X0123456789ABCDEF] On Create Set [_usn3[_usn3..][12.e12..]].`8esn`! =Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where .e0 Starts With 0 Starts With 0.e0) Is Null Is Null,{`3esn`:$`4esn`[9e12..123.654]}.#usn8 =Filter(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8])[{`4esn`:Null In $7 In .e1,_usn3:usn2 Is Null}..Case _usn3[$`8esn`] When {0} In $_usn3 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] Else $7 Is Not Null Is Not Null End] Union All Load Csv From 0.0 In $usn1 As `2esn`  Remove Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`]).usn1!,`7esn`(Distinct $`6esn`[123456789..12][True..{`3esn`}],7 =~{`8esn`} =~$`6esn`).`1esn`?,Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789)._usn3"),
    octest_legacy:ct_string("Optional Match _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})) Using Scan usn1:_usn3 Using Scan `1esn`:`3esn` Where 7[$`2esn`..{`5esn`}] Union All Create (((:`4esn`{`5esn`})-[`7esn`?:`4esn`{_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[`6esn`?:`1esn` *0X7..]->(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null}))) Load Csv With Headers From #usn8 Is Not Null Is Not Null As _usn4  Load Csv From 0Xa Starts With `7esn` Starts With $`1esn` As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create `7esn`=(@usn6 :`6esn`)-[`6esn`?:#usn7]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Union Delete All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null) Is Null With  {`5esn`} =~`4esn` =~{_usn4} As `4esn`,Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6,07 =~01 Order By `5esn`[_usn4..] Desc Skip `8esn`[{123456789}..] Start `5esn`=Node:`7esn`('s_str') ,usn1=Node:#usn8({``})"),
    octest_legacy:ct_string("Return {7}[$``][{@usn6}] As `2esn` Order By {`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null Desc,{123456789}[9e12][{0}] Ascending,$_usn3['s_str'][07] Ascending Skip [usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null) Create (({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})),Shortestpath(((`` :@usn6:#usn8{`8esn`:'s_str' In 00})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-({#usn8:0xabc[.e0]}))) Return {usn2:0X0123456789ABCDEF[123456789]}[[0e0 Starts With 1000 Starts With #usn7,True =~010,$usn2[{@usn5}]]..],1000[..$0][..True],[$0] In [`2esn` In `1esn` =~\"d_str\" Where {0} Ends With $_usn3 Ends With $`7esn`|{999} Contains .e0 Contains 12.0] In None(`2esn` In `1esn` =~\"d_str\" Where {`7esn`}[..$@usn5][..$#usn8]) As usn1 Limit $#usn8[Count ( * )] Union All Merge usn2=((@usn6 :_usn4)) With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Where 0.e0 Starts With `2esn` Return *,({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}),`1esn`[..{`2esn`}][..$_usn4] As #usn7 Order By [Count(*) Ends With 12.0 Ends With 12,9e0[{0}..{`3esn`}][\"d_str\"..0Xa]][..Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``])][..{usn1:$_usn3[..1000],`7esn`:{1000} =~0 =~123.654}] Asc,count(`1esn` Contains {usn2} Contains $#usn8) Contains [`5esn`[7][{usn2}],@usn5 Is Null] Descending,(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}] Descending Skip [@usn6 Contains Null Contains $`7esn`,{`4esn`} Starts With $usn2 Starts With $1000] Ends With Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn4[0e0..][False..]) Ends With (`1esn` :`2esn`:usn1)-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}) Limit .e12[..`7esn`][..0Xa]"),
    octest_legacy:ct_string("With  *,usn2 Ends With 12.e12 As usn1,{`4esn`:`7esn` Is Null}[{`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]}..] As #usn8 Limit `1esn`(Distinct $@usn5[..12e12][..$123456789],{#usn7} Is Not Null Is Not Null)[{`7esn`:\"d_str\" Starts With $123456789}..] Where $`1esn`[1.0..][_usn3..] With  {``} Is Not Null As #usn7,{#usn7}[`2esn`..],Count ( * ) Contains {`1esn`} Contains 07 Order By `8esn` Is Not Null Is Not Null Desc Limit $123456789[_usn3][{#usn7}] Where Count ( * ) Ends With 12.0 Detach Delete Extract(`2esn` In `1esn` =~\"d_str\" Where usn2[9e12]|#usn7 Starts With {#usn7} Starts With `7esn`)[..(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})][..Extract(`3esn` In {7} Is Null Where usn1 Is Null Is Null|12.0)],1.0 Starts With 12e12 Starts With {`5esn`} Union Remove `2esn`($`6esn`[123456789..12][True..{`3esn`}],$`5esn`[`3esn`..]).``! Merge Shortestpath((:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}})<-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(_usn3 :#usn7)) Union All Load Csv With Headers From `1esn` =~\"d_str\" As @usn6 Fieldterminator \"d_str\" Create Unique Allshortestpaths(({_usn3:{_usn4} Is Not Null Is Not Null})),(({_usn3:{_usn4} Is Not Null Is Not Null})) Load Csv From 0Xa Is Null Is Null As _usn3 "),
    octest_legacy:ct_string("Create `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8)) With  0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3,0e0 =~`6esn` =~123456789,`1esn`($123456789 Starts With 9e0 Starts With 's_str',{usn2}[.e0..$999])[{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {usn1} In 2.12 In 1000)][Case 0[`7esn`..] When 123456789 Is Null Then .e12 Is Not Null Is Not Null Else $@usn5 =~1000 =~1000 End..[`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|{`3esn`}[`2esn`]]] Order By `5esn`[_usn4..] Ascending Where $`1esn` Ends With 9e1 Ends With $123456789 Union Delete Extract(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``)[Extract(`5esn` In \"d_str\" Is Null Is Null Where 00[$`7esn`]|$`6esn` Is Null)]"),
    octest_legacy:ct_string("Start _usn3=Relationship:`8esn`({`1esn`}) ,`6esn`=Relationship:`2esn`({0}) With Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7 Limit {_usn3}[12.e12] Where 0e0 Starts With 2.12 Starts With $12 Load Csv From {_usn3}[..\"d_str\"] As `3esn` "),
    octest_legacy:ct_string("Merge `1esn`=(`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}) On Match Set usn1(Distinct 01 Ends With 999 Ends With {`7esn`},$_usn4 Ends With usn1 Ends With $0).`2esn`! =Single(`5esn` In \"d_str\" Is Null Is Null Where {1000} =~0 =~123.654)[None(`5esn` In \"d_str\" Is Null Is Null Where 12.e12 Starts With {999} Starts With {`1esn`})..None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`)] On Match Set Allshortestpaths((#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})).`6esn` =_usn4 Contains 0e0,`3esn` =2.12 Is Not Null Is Not Null,Extract(`3esn` In {7} Is Null Where `1esn` =~0 =~$#usn7|{`3esn`} In 01).`5esn`! ={1000}[_usn3][$123456789] Union Foreach(`2esn` In $999 Is Not Null| Start `3esn`=Node:_usn4(`6esn`='s_str')  Create Unique `6esn`=Shortestpath((({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[``?:#usn8|`1esn`{#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1}]->({@usn5:12e12 Contains 0Xa,_usn4:01[2.12..`8esn`]}))),((@usn5 :`7esn`:_usn3)))"),
    octest_legacy:ct_string("Merge `4esn`=((usn2 )-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})) On Create Set [{#usn8}[010]].`8esn`! =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),`2esn`+=9e1[1000][{123456789}] On Create Set Shortestpath(((`4esn` {`6esn`:#usn8[..{#usn7}]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]}))).`4esn`? ={#usn8} Starts With 00 Starts With {`6esn`} Create (((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}))) Create @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) Union Start `2esn`=Node:usn1(`6esn`={7}) "),
    octest_legacy:ct_string("Load Csv With Headers From usn2[{7}] As @usn6 Fieldterminator \"d_str\" Union Return Distinct *,_usn4(Count(*) In $12) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $123456789 =~{`6esn`} =~\"d_str\"|01 Ends With 999 Ends With {`7esn`}),$`` Ends With 0.0 Ends With {1000} Union Merge `8esn`=(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}) On Match Set #usn8+=`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}).@usn6? =01[{@usn5}]"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[@usn6:_usn4|:usn2]->(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null})),Allshortestpaths((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})) Return 12.0 Ends With True Ends With 123456789 As #usn7 Order By {_usn3}[12.e12] Descending Skip 0X7[{@usn6}] Limit 1e1 Contains Count ( * ) Create ({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null})-[usn1? *0X0123456789ABCDEF]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}),`5esn`=(({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}}))"),
    octest_legacy:ct_string("Delete 1e1 In \"d_str\" In `7esn` Union Foreach(`2esn` In $`5esn`[2.12..{_usn3}][_usn3..{1000}]| Unwind 0.12[`2esn`..{`6esn`}] As usn2) Remove Filter(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc).`6esn`?,None(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]).`4esn`! Start _usn4=Node:`4esn`(_usn4={123456789}) Where {_usn4} In {12} In $0 Union All Merge (((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}))) On Create Set {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}.`8esn`? =$@usn5[010..$#usn8][12..$`4esn`],`7esn`+=`8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))),`7esn` =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) On Match Set usn2 ='s_str'[$_usn3..][Count ( * )..]"),
    octest_legacy:ct_string("Start ``=Node:`2esn`(usn2='s_str')  With Distinct 123.654 Is Not Null As `1esn`,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) As `4esn` Order By 0.0 =~999 Asc,1e1 In \"d_str\" In `7esn` Descending Where 12.e12[`3esn`] Union All Load Csv From Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] As `2esn` Fieldterminator \"d_str\" With  *,$``[1.0] As `6esn`,12.0[123.654][Count(*)] Where 0.12[$`3esn`..$_usn3][12.0..usn1] Union Create #usn7=Shortestpath((`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)),usn2=Shortestpath(({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))"),
    octest_legacy:ct_string("Start _usn4=Node( {123456789}) ,#usn7=Relationship:usn2(`8esn`={`8esn`})Where _usn4 Is Null Is Null Create `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))) Load Csv From 1.0 Is Null Is Null As `3esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Merge ((`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})) On Match Set @usn6 ='s_str' Starts With 123.654 Union Load Csv With Headers From [_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|`` Is Not Null Is Not Null] Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where {_usn3}[..\"d_str\"][..`5esn`]) Ends With Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8) As _usn3 Fieldterminator 's_str' With  07[$123456789..] Order By {`2esn`} Ends With 12.0 Desc,`6esn`[12..$usn2][{#usn8}..{usn2}] Asc,9e1[..$`2esn`] Ascending"),
    octest_legacy:ct_string("Unwind $usn1[{`5esn`}][$`6esn`] As @usn6 Merge ((:usn2{usn2:123.654[$`1esn`],@usn6:123456789[$@usn5..]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`` {usn2:9e0[..999],`2esn`:0e0 In @usn5})<-[]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})) On Create Set `8esn`+=[9e1[..$`2esn`]][{`8esn`:False =~$7 =~2.12,`3esn`:Count ( * ) =~$usn2 =~$usn2}][Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End] On Match Set @usn6+=$1000[0Xa][{#usn7}]"),
    octest_legacy:ct_string("Return *,Case When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` When {`7esn`}[..{`4esn`}] Then {usn1} Ends With $0 End[All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"])..[Count ( * )[0.12...e1],1.0[00..],$``]][`4esn`(`4esn` Ends With 07 Ends With {`3esn`})..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `1esn` =~\"d_str\"|9e12 Is Not Null Is Not Null)] As `` Order By `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) In `8esn`(Distinct $1000[`2esn`..`5esn`][1e1..1.e1],0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12) In All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`4esn`} Starts With $usn2 Starts With $1000) Ascending,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null Asc,{`2esn`} Ends With {`7esn`} Desc Return [`5esn`[{`4esn`}..`2esn`],Null Ends With {`5esn`} Ends With 0.e0,010[#usn7..True]] Contains [`3esn` In {7} Is Null Where {usn2}[.e0..$999]|Count ( * ) Contains `8esn` Contains .e1] Contains Reduce(``=@usn5 In {`7esn`} In `2esn`,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{_usn4}[1000..{@usn5}]) As `3esn`,{7}[$7..$``][{``}..{7}] As usn2,{1000}[{_usn3}..] As #usn7 Skip Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] Limit $`6esn` Ends With Count(*) Return *,'s_str' Starts With 123.654 As usn1 Skip {0} In $_usn3 Limit {`3esn`} In 01 Union Merge _usn4=(({``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}})) On Create Set #usn7+=Count(*) In $12,`2esn`+=$usn2[9e0],[9e1[1000][{123456789}],$usn2[{@usn5}],0Xa Starts With {`6esn`} Starts With $usn1].usn1? =Reduce(`4esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|False[..``]) Is Null Is Null On Match Set ``(Distinct 0.12 =~`5esn` =~`5esn`,Null[``]).`1esn`! =12e12 Ends With {usn1},@usn5 =7 Ends With $`4esn`,_usn4 =Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] Create Shortestpath((((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})))),`1esn`=((usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}))"),
    octest_legacy:ct_string("With  *,Shortestpath((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))) In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) As `1esn`,`6esn`[2.12..01][{``}..False] As `1esn` Where $123456789 In 0X0123456789ABCDEF In 0.e0 Merge Shortestpath((((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Unwind Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As `5esn` Union Load Csv With Headers From 0.0 In {#usn8} As `4esn`  Merge `3esn`=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Optional Match #usn8=Allshortestpaths(((@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(#usn7 :_usn3:_usn3{`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}}))),Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Where 0Xa[7..2.12][`3esn`.._usn3] Union With Distinct 0[07..{123456789}][999...e12] As `4esn` Order By Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Descending Skip $`6esn`[$`6esn`..`8esn`] Limit Allshortestpaths((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) Contains Filter(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]) Contains Shortestpath(({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})) Foreach(`4esn` In 1000[0X7..2.12]| Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4?) Unwind $usn1 In {999} In $#usn7 As _usn4"),
    octest_legacy:ct_string("Return Distinct *,None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where $_usn3[.e0..$usn2]|{#usn7}[9e1..][{123456789}..]) Ends With Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}]) Order By Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Asc,$`4esn`[010..`4esn`] Ascending,1e1 In \"d_str\" In `7esn` Descending Skip 9e1 Is Not Null Union All Create _usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))),(:``:#usn8{_usn3:$`7esn` Is Null Is Null}) Union Optional Match `2esn`=Shortestpath(((usn2 :`6esn`{#usn7:Count ( * ) Contains 07})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),Allshortestpaths(((`8esn` )-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})<-[ *..12]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) Merge ((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})) Match (({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})) Using Index @usn5:`2esn`(@usn5) Where $123456789 Is Null Is Null"),
    octest_legacy:ct_string("Unwind Null Ends With {`5esn`} Ends With 0.e0 As usn1 Load Csv From [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null As #usn8 Fieldterminator \"d_str\" Union Match ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Using Scan _usn4:@usn6 Where `` Ends With 0Xa Ends With `2esn` Merge #usn7=Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})) On Create Set @usn5 =(#usn8 :``:#usn8)-[]->(`5esn` {`4esn`:01 Is Null})-[_usn3:@usn5 *7..12{`2esn`:12.0 =~999 =~$_usn3}]->(`3esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]}) =~None(#usn7 In {``} Is Not Null Where .e0 Starts With $`` Starts With $usn2) =~Case When 0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12 Then `3esn` In $0 In `1esn` When \"d_str\"[#usn8] Then `7esn`[$0][9e12] Else {`7esn`} Is Null End On Match Set _usn4+={`7esn`}[`6esn`][#usn7],@usn6 =01 Is Null Union All Detach Delete ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}),`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),usn2[{7}] Foreach(`1esn` In 12[..$`4esn`]| Optional Match #usn7=Shortestpath((@usn6 {`3esn`:{``} Is Not Null})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})),``=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Scan `1esn`:usn2 Using Scan `3esn`:`5esn` Where 1.0 Starts With 12e12 Starts With {`5esn`} Delete Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},Shortestpath(((:`8esn`:`7esn`$#usn7)-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) In [_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..]|1.0 Is Null Is Null] In Case When Count ( * ) Contains 07 Then 123.654[$`1esn`] End,$123456789 Is Null Is Null)"),
    octest_legacy:ct_string("Unwind {`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}[@usn5(Distinct {`5esn`} Contains $0 Contains {``},12.e12 Starts With {999} Starts With {`1esn`})] As _usn4 Load Csv With Headers From $`4esn`[..$`3esn`][..0.0] As `4esn`  Detach Delete Case {usn2} When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else 1.0 =~'s_str' =~{`2esn`} End[(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})..All(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7])][{usn2:$`5esn`[..$`5esn`][..$12]}..Any(`8esn` In 01[2.12..`8esn`] Where `1esn`[{usn1}..``][7..$#usn8])],'s_str' Is Not Null Is Not Null Union Foreach(_usn4 In {usn1} Ends With 12.0 Ends With 00| With  *,`7esn` Is Null As `7esn`,None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc,(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null Descending,.e0[..0X0123456789ABCDEF][...e12] Descending Limit {``}[...e12]) Foreach(`4esn` In #usn8[`3esn`..][{#usn7}..]| Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),(((`6esn` :`5esn`{usn1:{`6esn`}})<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})<-[:`1esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]})))) Union Return Distinct 12.0 Ends With True Ends With 123456789 As #usn7 Order By {_usn3}[12.e12] Descending Skip 0X7[{@usn6}] Limit 1e1 Contains Count ( * ) Create @usn5=(((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1))) Delete Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12),$`7esn` Is Not Null,7[$`2esn`..{`5esn`}]"),
    octest_legacy:ct_string("Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') With Distinct $`3esn`[0.12..`8esn`][$#usn7..`5esn`],Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6 Order By {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Ascending,$`3esn` Is Not Null Desc Where 01 Contains {`8esn`} Contains 2.12 Remove usn1:`1esn`,Filter(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null).`8esn`!,[7[..123456789][..{@usn6}],#usn7].#usn8 Union All Unwind False[..``] As `7esn` Union Load Csv From $_usn4 =~usn2 =~{_usn3} As _usn3  Start _usn4=Node:`3esn`(`2esn`={usn1}) ,`6esn`=Node:``('s_str')"),
    octest_legacy:ct_string("Return Distinct Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} As `7esn`,.e0[12.e12..] As `3esn`,0e0 =~`6esn` =~123456789 As @usn5 Skip {12} Is Not Null Limit $@usn5 Starts With $1000 Union Unwind Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] As #usn7 Create (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})) Union All Load Csv From \"d_str\"[..{@usn5}][..``] As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(`8esn` In \"d_str\" Starts With 01| Start `8esn`=Relationship:`6esn`('s_str') Where 010 =~{usn2}) Unwind $`1esn` In $`7esn` In $`6esn` As `2esn` Delete 123456789[#usn8..False],9e1 In 2.12 Union Delete #usn7[$usn1]"),
    octest_legacy:ct_string("Unwind [$`5esn`[..$`5esn`][..$12],01[2.12..`8esn`],_usn3 Contains $123456789 Contains ``] As `1esn` Remove Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..]|0xabc[01..{999}][{7}..{`7esn`}]).`8esn`!,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]|123456789[#usn8..False]].`5esn`?,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0.0 In $usn1|{#usn8}[{7}]].#usn8?"),
    octest_legacy:ct_string("Foreach(#usn7 In Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) =~(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}) =~{#usn8:{`3esn`}[@usn6..0Xa][{12}..0Xa],@usn5:False Is Null Is Null}| Create ``=((({_usn4:00 Starts With 0xabc})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(`5esn` :`4esn`{@usn6:{`6esn`} =~$999}))),`2esn`=(:`4esn`{`3esn`:$`7esn` =~{`8esn`} =~$usn1})) Create `2esn`=(:`4esn`{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[#usn8:@usn5 *..01]-(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null}),_usn4=Shortestpath(((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789}))) Union Optional Match (:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`8esn` :`8esn`:`7esn`) Using Join On `1esn`,_usn3,_usn3 Return *,$@usn5 Contains 0xabc Contains {#usn7} Limit Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn3 In {1000} In 0.12)[{@usn6}..] Load Csv With Headers From #usn7[usn1][$`5esn`] As `4esn`  Union Merge (((:usn1{usn1:`5esn`[_usn4..]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[:usn1|@usn6 *7..12]-({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}))) Start `7esn`=Node:`4esn`({usn1}) ,`1esn`=Relationship:`2esn`({1000})Where $`6esn`[010..] Match (`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Using Scan ``:_usn4 Using Join On ``,_usn3,`1esn`"),
    octest_legacy:ct_string("Merge @usn6=Allshortestpaths(((@usn5 :`4esn`))) Delete Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})],Case $1000[999] When `4esn`[`5esn`..12][@usn6..False] Then {0} Ends With $_usn3 Ends With $`7esn` When $usn1 In {999} In $#usn7 Then Count ( * )[True..][{#usn7}..] End Ends With {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null},`7esn` In 00 Remove (:usn1{_usn3:{#usn7}[`2esn`..]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(#usn7 ).`2esn`,Case `5esn` Starts With $`2esn` Starts With $1000 When 123.654 =~$usn2 =~{999} Then Count ( * ) Contains `8esn` Contains .e1 End._usn3!,exists($12[$1000..123456789],123456789[0xabc..'s_str'][``..`1esn`]).@usn5 Union All Match (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}) Using Index `6esn`:`8esn`(``) Using Scan `2esn`:`7esn` Where 0.e0 Contains 9e1 Contains {`7esn`} Create (:``:#usn8$`3esn`)-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})"),
    octest_legacy:ct_string("Optional Match (((_usn4 :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})<-[``?:_usn4|:usn2{`1esn`:False Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07}))),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Where usn2 Is Null Merge usn1=Shortestpath((`7esn` :``:#usn8)<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`)) Foreach(usn1 In \"d_str\" Starts With 01| Unwind [`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"]|$#usn7 Is Null][..{`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]}] As @usn6)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $123456789 In $#usn7 In `4esn` As `5esn` "),
    octest_legacy:ct_string("Foreach(`7esn` In Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End| Create `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))),#usn8=(:`2esn`:usn1)-[`1esn`:@usn6|`6esn`*..{`7esn`:7[{0}..{_usn4}]}]->(`8esn` {_usn4:`4esn`[1.0],`5esn`:0e0 Ends With 1.e1 Ends With $`4esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})) Merge Allshortestpaths(((usn2 :``:#usn8{`3esn`:999 Is Not Null Is Not Null,@usn6:$`2esn` Is Null Is Null})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))) Union All Start usn1=Rel:@usn6(#usn7='s_str') ,``=Node:@usn6({_usn4}) Union All Load Csv From None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null As `2esn` "),
    octest_legacy:ct_string("Remove [123456789 Ends With $`6esn` Ends With $#usn7]._usn3!,{usn1:`1esn` Contains {usn2} Contains $#usn8}._usn3?,{_usn4:True[07..$usn2][$7..{usn1}]}.``?"),
    octest_legacy:ct_string("Create usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) With Distinct #usn8 Starts With $_usn4 Starts With $7 As `6esn` Order By $0[$`1esn`..07] Descending Skip 9e1 Is Not Null"),
    octest_legacy:ct_string("Load Csv With Headers From {_usn4} Is Not Null Is Not Null As `5esn`  Return Distinct $``[1.0],{`5esn`}[0..`8esn`][0..Null] As `7esn` Order By 0Xa =~123456789 =~_usn4 Desc Skip $7[{usn2}..][{usn2}..] Limit $1000 Is Null Remove Allshortestpaths((:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[usn1:`8esn`]-({_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null})).`6esn`!,(`4esn` :``:#usn8{`1esn`:$`5esn`[`3esn`..]})-[`7esn`*]->(:#usn7{@usn5:{12} =~#usn8})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 ).`4esn`? Union All Optional Match #usn7=((usn2 :`6esn`{#usn7:Count ( * ) Contains 07})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})) Using Join On `8esn`,`` Using Index `8esn`:`1esn`(@usn5) Where `1esn`[..{@usn6}][..$123456789] Unwind {7} Is Null As `6esn` Merge #usn8=Allshortestpaths(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null}))"),
    octest_legacy:ct_string("Merge `7esn`=((`1esn` :#usn7)) Create Unique _usn4=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})) Union Merge `4esn`=Shortestpath((((#usn8 :`8esn`:`7esn`{#usn7:#usn8[..{#usn7}]})-[usn1?]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)))) Merge Allshortestpaths(((`` :`1esn`)-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 $999)<-[`4esn`?:`7esn` *0..{`2esn`:00[`2esn`..12][123456789..0.e0]}]->(`1esn` :_usn3:_usn3))) On Match Set `1esn`+=usn1 Is Null Is Null,Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]).`5esn` =0X0123456789ABCDEF Is Null Is Null Start `7esn`=Node:`6esn`({_usn3}) Where 123456789 Ends With 12.e12 Ends With $`7esn` Union All With Distinct {0} As `7esn`,1000[..$0][..True] Limit Case When @usn5 Is Null Then 2.12 Ends With $_usn3 Ends With `3esn` Else $1000 Is Null End[Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}])..None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa)][Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01|usn2 Is Null)..Case When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` End]"),
    octest_legacy:ct_string("Start usn2=Node:_usn4(``={#usn7}) ,`3esn`=Rel:usn1(`6esn`={7}) Union All Create Unique ((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})),Allshortestpaths(((`2esn` :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0}))) Merge ((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})) On Match Set `3esn` =Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End On Match Set Case When $_usn3[Count(*)] Then 010[#usn7..True] End.`6esn` =(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])],All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where $_usn4 Ends With usn1 Ends With $0).@usn5? =Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Union Create usn2=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Unwind {12}[..0X7] As `3esn` Foreach(usn1 In Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End Ends With Case When 0x0 Ends With $12 Then 07 =~01 End| Detach Delete $@usn5,'s_str' =~{_usn4} =~$`7esn`,usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..]) Start `2esn`=Node:@usn5({`1esn`}) ,usn1=Node:#usn7(usn1=\"d_str\")Where #usn7 Starts With {#usn7} Starts With `7esn` Union All Load Csv From $usn2[{@usn5}] As #usn7 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove [9e1[1000][{123456789}],$usn2[{@usn5}],0Xa Starts With {`6esn`} Starts With $usn1].`3esn`?,[`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]].#usn7? Load Csv With Headers From Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8)[{`7esn`:$`6esn`[010..]}..] As @usn5 "),
    octest_legacy:ct_string("With Distinct *,$123456789 Starts With {_usn4} Starts With $1000,`6esn`(Distinct 0X7[`7esn`][123.654]) Is Not Null Is Not Null Skip $`7esn` Is Not Null Remove `2esn`($`6esn`[123456789..12][True..{`3esn`}],$`5esn`[`3esn`..]).``! Union All Merge usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null})) Union All With  Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]) =~({``:$`8esn` =~{1000}})<-[#usn8? *0..]->(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}) =~Shortestpath((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) As #usn8,Reduce(`8esn`={@usn5}[{#usn8}][9e0],`3esn` In {7} Is Null|0e0 Starts With 1000 Starts With #usn7)[Single(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null)] Order By 's_str' In 00 Desc,{1000}[{_usn3}..] Descending,$usn1[...e0][..$_usn3] Asc Where 123.654[$`1esn`]"),
    octest_legacy:ct_string("Optional Match (((`5esn` :`6esn`)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}))),#usn7=(:#usn7)<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]}) Using Join On ``,`4esn`,@usn6 Return *,Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `5esn`,False Ends With `3esn` Order By 00[{`8esn`}..][{`8esn`}..] Descending Skip 123456789[_usn4..][{999}..] Limit 0x0 Is Null Delete `8esn` Ends With $`2esn`,[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where $7[0.12][usn1]] Ends With {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12} Ends With Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End,$123456789 =~{`6esn`} =~\"d_str\" Union Merge `5esn`=(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[`1esn`?:`8esn` *123456789..]->(#usn7 :`6esn`$1000) On Create Set Extract(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7]|$7 Is Not Null Is Not Null).`4esn`! =Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End[None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)..[`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1]],[12[1.e1..{_usn3}][1.e1..1.0]].`8esn`? ={`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null,usn1 =$_usn4 Contains Null Contains #usn8 Load Csv With Headers From 0 In `2esn` In 010 As `1esn` Fieldterminator 's_str' Match ``=(`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}),(#usn8 :@usn6:#usn8) Using Index `7esn`:usn2(`6esn`)"),
    octest_legacy:ct_string("Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Foreach(usn1 In (:_usn4{@usn6})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})[[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn` Contains 123456789 Contains $usn2|123456789 Ends With 01234567 Ends With 1.e1]..{usn2:1.0 =~7 =~{usn2},`8esn`:$_usn3[.e0..$usn2]}][None(_usn3 In {`3esn`}[`2esn`] Where 7 Ends With $`4esn`)..Case {`2esn`} Starts With 123456789 When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) End]| Optional Match Shortestpath(((({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)))),@usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)) Using Index `7esn`:usn2(`6esn`)) Start `1esn`=Node:usn2({12}) ,usn1=Node:`7esn`(`3esn`={``})Where {usn2}"),
    octest_legacy:ct_string("Remove @usn5(2.12 Is Null,_usn3 Ends With 7 Ends With `1esn`).usn1,[`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]].#usn7? Foreach(`5esn` In {#usn8} Is Null| Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),`6esn`=Shortestpath((((_usn4 :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})<-[``?:_usn4|:usn2{`1esn`:False Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})))) Start #usn8=Relationship:usn2(`8esn`={`8esn`}) ,`3esn`=Node:usn1(\"d_str\")Where 0.0[Null][$`2esn`]) Union Unwind `8esn`[$#usn7..123456789] As `` Start `6esn`=Rel:#usn8(@usn6={_usn4}) ,`4esn`=Relationship:`6esn`(#usn8={_usn3})"),
    octest_legacy:ct_string("Load Csv From #usn7[usn1][$`5esn`] As `6esn`  Load Csv From 12 Ends With 0x0 Ends With 0.e0 As usn1  Union Remove All(#usn7 In `2esn`[..$#usn8][..Count(*)]).#usn7!,All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01).usn1?,[`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {_usn4} Starts With 0.e0 Starts With 0x0|123.654[`3esn`..]].`2esn`? Union All Optional Match usn2=((@usn6 :_usn4)),Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) Using Index _usn3:`6esn`(#usn7) Where $`4esn`[..$`3esn`][..0.0]"),
    octest_legacy:ct_string("Return Distinct $`5esn`[$`4esn`..{@usn6}][07..$@usn6] As usn2 Order By [usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Ascending,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7) Descending Skip Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null Match Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:usn1(@usn5) Using Index `3esn`:`5esn`(#usn7) Where $`5esn`[2.12..] Unwind $_usn4 In usn1 In $7 As usn1"),
    octest_legacy:ct_string("Remove `2esn`(Distinct 123.654[0e0..$``][$`1esn`..$`8esn`],`5esn`[{`4esn`}..`2esn`]).#usn8!,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]|0 In `2esn` In 010).`7esn`? Optional Match Shortestpath(((`` :usn2)<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})-[`2esn`?:usn2|``{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}]-({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}))) Using Join On ``,`4esn`,@usn6 Using Join On `5esn`,@usn6 With Distinct 07[$123456789..] Order By {7}[$7..$``][{``}..{7}] Descending,$_usn3[Count(*)] Desc Union Optional Match `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),`2esn`=((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})) Where $usn1[{`5esn`}][$`6esn`] Union Foreach(usn2 In {`3esn`}[`2esn`]| Load Csv From 2.12 Is Null As `7esn` ) With  [9e1[..$`2esn`]][{`8esn`:False =~$7 =~2.12,`3esn`:Count ( * ) =~$usn2 =~$usn2}][Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End] As `8esn`,`7esn` Is Null As `7esn` Skip $`4esn`[010..`4esn`] Where {1000} =~0 =~123.654 Merge `2esn`=Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) On Match Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn` On Match Set @usn5 =Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null"),
    octest_legacy:ct_string("Unwind 12 Ends With $usn2 As `6esn` Unwind `7esn`[$12..][$`8esn`..] As `2esn` Unwind .e0 =~`6esn` =~{12} As `3esn`"),
    octest_legacy:ct_string("Start #usn7=Node:@usn6({_usn4}) ,usn1=Rel:`7esn`(usn2={`7esn`})Where 123.654 =~$usn2 =~{999} Foreach(`5esn` In All(`5esn` In $999[0.0..] Where {@usn6} Ends With 's_str' Ends With 12.0) In (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})| Start _usn4=Rel:#usn8(\"d_str\") Where $#usn8[9e12..][.e1..]) Return Distinct 0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3,0e0 =~`6esn` =~123456789,`1esn`($123456789 Starts With 9e0 Starts With 's_str',{usn2}[.e0..$999])[{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {usn1} In 2.12 In 1000)][Case 0[`7esn`..] When 123456789 Is Null Then .e12 Is Not Null Is Not Null Else $@usn5 =~1000 =~1000 End..[`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|{`3esn`}[`2esn`]]] Skip 0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12 Limit Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]|@usn5 =~{`5esn`} =~`5esn`) Contains Case When 0[..usn2][..{@usn5}] Then 2.12['s_str'..$12][{`1esn`}..`2esn`] When 01 Contains {`8esn`} Contains 2.12 Then #usn8[#usn8..] End Contains (:`5esn`{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]})<-[usn2?:_usn4|:usn2{``:`1esn` Contains {usn2} Contains $#usn8}]-(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc}) Union Load Csv From [{`3esn`} Is Not Null Is Not Null] As @usn5  Merge `1esn`=Allshortestpaths((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))))"),
    octest_legacy:ct_string("Load Csv From {`2esn`}[$`4esn`][$`5esn`] As `7esn`  Start `2esn`=Node:@usn6({_usn4}) "),
    octest_legacy:ct_string("Optional Match `8esn`=Allshortestpaths(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Join On #usn7,_usn4 Using Index `3esn`:`5esn`(#usn7) Where usn1 Ends With $@usn6 Ends With `3esn` Load Csv From {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])][..(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})] As `8esn` Fieldterminator \"d_str\" Union All Create ((:`4esn`{`5esn`})) With  *,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` Skip 010[\"d_str\"..{@usn6}] Limit $`3esn`[0.12..`8esn`][$#usn7..`5esn`]"),
    octest_legacy:ct_string("With Distinct *,{``}[`8esn`..],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As #usn7 Order By False Contains {`6esn`} Ascending,{`1esn`}[usn1][.e1] Asc Where `7esn`[..2.12][..{usn1}] Load Csv From 1000 In `7esn` In 9e12 As `3esn` Fieldterminator 's_str' Create Allshortestpaths((:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})),(({@usn5:{usn2}[.e0..$999]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From \"d_str\"[..{@usn5}][..``] As `6esn` Fieldterminator 's_str' Unwind $usn2[9e0] As `5esn`"),
    octest_legacy:ct_string("Match #usn8=Shortestpath((#usn8 :@usn5)) Using Scan `1esn`:`3esn` Using Join On _usn4 Where {``} Starts With $`2esn` Starts With `1esn` Detach Delete [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]),{0} Contains 0.0 Contains $@usn5"),
    octest_legacy:ct_string("Match ((_usn4 :``:#usn8)-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8)) Using Join On `2esn` Using Join On `1esn`"),
    octest_legacy:ct_string("Load Csv From {_usn3}[..\"d_str\"] As `3esn`  Remove `6esn`(Distinct `5esn`[7][{usn2}],.e12[@usn5..$12]).usn1!,{`1esn`:True[..$`6esn`]}.`2esn`,Reduce(@usn6=0.e0[#usn8],usn1 In @usn5 =~{`5esn`} =~`5esn`|$`5esn` In $`6esn`).`5esn`? Union Unwind Allshortestpaths(((`8esn` ))) Ends With (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}) As _usn3 Foreach(`4esn` In {_usn3}[12.e12]| Optional Match (#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}),usn2=(@usn6 :``:#usn8)<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}) Using Index _usn4:`5esn`(`6esn`) Using Scan `6esn`:`2esn`) Union Optional Match Shortestpath((_usn3 :#usn7)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})) Using Index _usn3:`6esn`(#usn7) Using Index usn2:`7esn`(`2esn`) Where Count(*)[..usn2][..usn2] Remove Reduce(`4esn`=0X7[$999][_usn4],`2esn` In `1esn` =~\"d_str\"|0Xa[$123456789..123.654][.e12..0.e0]).usn2,{@usn6}.@usn6 With  *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Order By Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] Ascending,All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]] Ascending Skip {_usn4} In {12} In $0 Where {7}[..12e12][..Count ( * )]"),
    octest_legacy:ct_string("Unwind {`1esn`:9e1[1000][{123456789}],``:$`8esn`} Starts With (#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) As @usn5 Union Load Csv From $usn1[_usn4] As ``  Return Distinct (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null,$#usn8[Count ( * )] As `4esn` Order By Case When Count(*) In $12 Then .e0 Starts With 0 Starts With 0.e0 When {usn1}[0X0123456789ABCDEF] Then $`6esn`[123456789..12][True..{`3esn`}] Else 7 Starts With {@usn6} Starts With $`` End[Case @usn6 Contains $1000 Contains {`7esn`} When 0.12 =~$0 =~$0 Then $usn1[.._usn4][..False] When {0} Ends With $_usn3 Ends With $`7esn` Then 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] End..] Desc,False Ascending Skip `2esn`[{`4esn`}][$_usn3] Limit Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null Union Foreach(`8esn` In {usn1}[0X0123456789ABCDEF]| Create Unique usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null})),({_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})<-[:#usn7{@usn5:$usn2[9e0]}]-(`2esn` :``:#usn8) Load Csv With Headers From [_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} As @usn5 ) Return Distinct [12.e12[$_usn3..]][Shortestpath(((@usn6 :`4esn`)))..Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``)] As `1esn`,$`8esn` Contains 123456789 Contains $usn2 Order By Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null Desc,Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) Ascending,[`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] Desc Create #usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})))"),
    octest_legacy:ct_string("Unwind True[00][0Xa] As #usn8 Remove [0e0 Ends With 1.e1 Ends With $`4esn`].`7esn`!"),
    octest_legacy:ct_string("Remove `7esn`(Distinct {usn1} Ends With $0).#usn8! Match `8esn`=(((usn2 :#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12}))),((_usn3 :`7esn`:_usn3)-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})) Unwind usn2 Ends With 12.e12 As `6esn` Union All Return *,Reduce(`2esn`=12[1.e1..{_usn3}][1.e1..1.0],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{#usn8}[010]) Is Not Null Is Not Null,usn1 In 7 In {123456789} As `5esn` Return Distinct 07 Is Not Null Is Not Null As `6esn`,(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})[[{@usn6}[{999}..][00..],@usn5 =~{`5esn`} =~`5esn`,`7esn` Is Null]][Reduce(`7esn`=0X0123456789ABCDEF Is Null Is Null,`5esn` In $999[0.0..]|$1000[Null][`4esn`])] As @usn6 Limit Shortestpath((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]}))[None(#usn7 In `2esn`[..$#usn8][..Count(*)])][(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})] Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..] Union Start ``=Rel:#usn8(_usn3='s_str') ,`7esn`=Rel:`6esn`(\"d_str\")Where 0[..usn2][..{@usn5}] Delete $#usn7[..{`5esn`}][..9e12],{``}[$`8esn`..],Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}"),
    octest_legacy:ct_string("Optional Match ((`4esn` :@usn6:#usn8)-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`3esn`=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))) Using Scan _usn4:`7esn` Where 0x0[{`7esn`}..][$usn2..] Detach Delete `3esn`[$`1esn`..999][``..$123456789],$12[Null..Count(*)][{`5esn`}..{999}] Load Csv With Headers From Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End] As _usn4 Fieldterminator \"d_str\" Union All Create ({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}) Union All Delete {0}[12.0..0Xa][$`5esn`..{_usn3}] Create Unique _usn3=Allshortestpaths((`8esn` {`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[`3esn`? *..01]->(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)),`8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}}))"),
    octest_legacy:ct_string("Start ``=Node:`1esn`(@usn5='s_str') ,``=Node:@usn6({_usn4})Where $`8esn`[$`6esn`..$`4esn`][0.12.._usn3] Union All Detach Delete $#usn7 Is Not Null Merge ({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) Return Case When usn1 Is Not Null Then $0[12.e12..] Else 7[{0}..{_usn4}] End[..Reduce(_usn3={@usn5} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{usn1}[0X0123456789ABCDEF])] As #usn8,$`7esn` =~7 =~12e12,$`8esn`[..{`2esn`}] Skip Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}] Limit `8esn`[$`8esn`..{`4esn`}] Create `3esn`=Shortestpath(((:usn1{usn1:{`6esn`}})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))),@usn6=Allshortestpaths(((:`1esn`)))"),
    octest_legacy:ct_string("Foreach(#usn8 In $`1esn` Ends With 9e1 Ends With $123456789| Start _usn3=Node:`8esn`(`1esn`={#usn7}) Where usn2[9e12] Remove Case When 01 Contains {`8esn`} Contains 2.12 Then $_usn3[Count(*)] Else {`3esn`}[@usn6..0Xa][{12}..0Xa] End.`5esn`!,[#usn8 In 7[..999][..{#usn8}] Where {`5esn`} Contains $0 Contains {``}|#usn7 Starts With {#usn7} Starts With `7esn`].`1esn`?) Return 1.e1 Is Null Is Null As @usn5,$`7esn` =~7 =~12e12 Limit $12[Count ( * )][0X7] Union All Remove Case When $#usn8[$`8esn`..{`8esn`}] Then $#usn8[$`8esn`..{`8esn`}] Else #usn8 Is Not Null Is Not Null End.@usn6! Start usn1=Node:_usn3({`6esn`}) ,`5esn`=Relationship(*)"),
    octest_legacy:ct_string("Return Distinct `5esn`(Distinct `2esn` Is Null,123456789[{123456789}..'s_str'])[.._usn3(.e0[..$`8esn`])][..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}] Skip [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null]"),
    octest_legacy:ct_string("Detach Delete [12.e12[$_usn3..]][..All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where True In 0e0)][..[.e12[@usn5..#usn7][010..{usn1}],$@usn5 Is Not Null]],Count(*) In $12,{`8esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`6esn`:2.12 =~Count(*)} =~Shortestpath(((:`4esn`{`5esn`})))"),
    octest_legacy:ct_string("Start usn1=Rel:`7esn`(usn2={`7esn`}) ,``=Node:usn2(#usn8=\"d_str\") Return Distinct All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null) Is Null As `2esn`,{0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] As `1esn`,$`6esn` =~1.e1 =~12 Limit 0e0 Starts With `2esn` Starts With $``"),
    octest_legacy:ct_string("Detach Delete [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]),{0} Contains 0.0 Contains $@usn5 With Distinct usn2 Ends With 999 Ends With .e1 As `7esn`,$`5esn`[$123456789],[#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} As `8esn` Order By $0[$`1esn`..07] Desc,Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End Descending,{`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null Desc Limit Extract(`5esn` In $999[0.0..] Where {_usn3}[..\"d_str\"]) =~All(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) =~Any(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01) Optional Match ((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})),``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))) Using Scan _usn3:_usn3 Where Count ( * ) Ends With $@usn5 Union Merge ((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})) On Match Set `3esn` =Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End On Match Set Case When $_usn3[Count(*)] Then 010[#usn7..True] End.`6esn` =(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])],All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where $_usn4 Ends With usn1 Ends With $0).@usn5? =Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End"),
    octest_legacy:ct_string("Load Csv From 123456789[_usn3] As _usn3  Create _usn4=Shortestpath((((`7esn` )-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:`1esn`{``:.e1 Is Null Is Null})))),#usn8=Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Union Remove [usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X0123456789ABCDEF =~1e1 =~{`4esn`}|$_usn3['s_str'][07]].`6esn`?,Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1).@usn5! Union Optional Match `2esn`=((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)) Using Scan `1esn`:usn2 Where {@usn5} Is Null Is Null Return Distinct All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)],None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As @usn5 Order By 0.12 =~$0 =~$0 Descending Create Unique Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))),_usn3=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}))"),
    octest_legacy:ct_string("Start `5esn`=Relationship:usn1({999}) ,usn1=Relationship:_usn3(`8esn`={123456789}) Return Distinct 0e0 =~`6esn` =~123456789 As @usn5,Count ( * )[True..][{#usn7}..],2.12 =~{7} As `6esn` Order By {`2esn`}[1e1..1.0][{#usn8}..$`1esn`] Ascending,0X0123456789ABCDEF Is Null Is Null Asc Skip \"d_str\"[#usn8] Detach Delete `6esn`[2.12..01][{``}..False]"),
    octest_legacy:ct_string("Load Csv From `2esn`[..$#usn8][..Count(*)] As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("With  *,'s_str' Starts With 123.654 As usn1 Skip {0} In $_usn3 Limit {`3esn`} In 01 Load Csv With Headers From 2.12 =~{7} As `7esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("With  0.e0 In $#usn7 In $_usn3,(usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8)[Reduce(usn2=`2esn` Starts With $_usn4,#usn7 In {``} Is Not Null|{7} Is Null)..][Single(#usn7 In {``} Is Not Null Where $1000[0Xa][{#usn7}])..] As `2esn` Order By $usn1 Ends With $`` Ends With $12 Desc,1e1[1000..] Ascending,{123456789}[0.e0..$123456789][0Xa..`6esn`] Descending Limit {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Where `4esn` Ends With 07 Ends With {`3esn`}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From _usn4 Contains 2.12 As #usn8  Merge `8esn`=Allshortestpaths((`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})) With Distinct $@usn5 Contains 0xabc Contains {#usn7},Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As _usn3 Limit {`3esn`}[@usn6..0Xa][{12}..0Xa]"),
    octest_legacy:ct_string("Create `4esn`=Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`)),Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))) Foreach(`6esn` In `7esn`[..2.12][..{usn1}]| Start `2esn`=Node:@usn6({_usn4}) ,_usn3=Relationship:`8esn`({`1esn`}) Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null) Unwind {1000} =~0 =~123.654 As `3esn`"),
    octest_legacy:ct_string("Detach Delete All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null)[..Reduce(@usn6=$`4esn`[..$`3esn`][..0.0],`3esn` In {7} Is Null|$`7esn` =~{`8esn`} =~$usn1)][..Reduce(@usn6={`3esn`} Is Not Null Is Not Null,`` In `` Is Not Null Is Not Null|$`3esn` Is Null)],12.e12[$_usn3..] Union Foreach(usn1 In Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..]| Start @usn6=Relationship:@usn6(`4esn`='s_str')  Remove (:`1esn`{_usn4:{999}})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}).``!,Any(#usn8 In {`5esn`}[.e1..``] Where 0X7[..2.12])._usn4,{#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12}.`5esn`?) Delete {_usn4} =~$_usn4 Union All Optional Match Shortestpath(((:@usn6:#usn8{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}))),`1esn`=Allshortestpaths(((:@usn5)-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1))) Using Join On _usn4,`4esn`,`5esn` Create _usn4=Shortestpath(((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789}))),`3esn`=((:`5esn`{#usn7:{123456789} Contains $#usn8})) Remove Filter(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc).`6esn`?,None(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]).`4esn`!"),
    octest_legacy:ct_string("Create #usn8=Shortestpath(((`5esn` )-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[`1esn` *0Xa{_usn3:Null Ends With `2esn` Ends With $usn1,#usn8:.e12 Is Not Null Is Not Null}]->(usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]}))) Optional Match (((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})-[usn1:_usn3|_usn3 *..999{`2esn`:'s_str'[00][{`5esn`}],@usn6:999 Is Not Null Is Not Null}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]}))),(@usn6 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) Where 123.654[`3esn`..] Foreach(usn1 In usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..]| With Distinct $`8esn` Contains 123456789 Contains $usn2,{_usn4} In {12} In $0,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] Skip _usn3[..`8esn`][..2.12] Limit 0X7[0e0..`7esn`][1000..0e0])"),
    octest_legacy:ct_string("Foreach(`2esn` In \"d_str\"[#usn8]| Create Unique usn1=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}),(((`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2))) Load Csv With Headers From $`6esn`[010..] As `7esn` Fieldterminator \"d_str\") Unwind {#usn8}[{``}..] As `6esn` Remove Reduce(`3esn`={12} Is Null Is Null,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`5esn` Starts With $`2esn` Starts With $1000).`7esn`!"),
    octest_legacy:ct_string("With Distinct *,$_usn3 Ends With 0x0 Ends With 12.0 As usn2,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where $999 Is Not Null|{_usn4} Is Not Null Is Not Null][Shortestpath((:`5esn`{``:1.0[0e0..0.e0]})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}))..{`4esn`:{`4esn`} Ends With {usn2} Ends With {999}}][Single(`5esn` In $999[0.0..] Where .e0[..$`8esn`])..Shortestpath(((:`3esn`:@usn5$7)))] Order By usn1 Starts With $usn1 Desc,1.e1[`8esn`][00] Descending Where 0 In `2esn` In 010 Optional Match Allshortestpaths(((`7esn` :`5esn`{`3esn`:`7esn` Is Null})<-[`5esn`?:`4esn`]-(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]}))),`1esn`=((`8esn` )) Union All With Distinct None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,01 Is Null As `2esn`,{1000} =~$_usn4 Return Distinct 1.e1 Starts With 's_str' Starts With `5esn`,$123456789 Starts With {_usn4} Starts With $1000 As `6esn` Order By Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))) Ascending,Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null Ascending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc"),
    octest_legacy:ct_string("With Distinct 0X7[1000..{`1esn`}],Extract(#usn8 In {`5esn`}[.e1..``] Where {7}[..1.0][..9e0]) Ends With Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where `8esn` Ends With 999 Ends With .e12|9e1[..$`2esn`]) Ends With $_usn4 As `4esn`,12.e12[`3esn`] As #usn7 Where {`6esn`}[..$@usn6][..`7esn`] Create Unique (@usn6 :`1esn`)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``}),_usn3=(((`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})<-[ *0X7..]-(usn2 :@usn5))) Foreach(`3esn` In {123456789}[0xabc..]| Remove (_usn4 :#usn7{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-({`1esn`:`3esn`[{`2esn`}]}).`4esn`,Allshortestpaths(((:`1esn`{`5esn`:1.0 In Count(*)}))).@usn5! Delete 010 In Count(*),Count(*)[..usn2][..usn2]) Union With  usn2 Ends With 999 Ends With .e1 As `7esn`,$`5esn`[$123456789],[#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} As `8esn` Order By {`6esn`}[..$@usn6][..`7esn`] Asc Match @usn6=(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[@usn5 *0X0123456789ABCDEF]->(`6esn` :`3esn`:@usn5{`3esn`:0.e0 In $#usn7 In $_usn3,_usn4:{`8esn`} Ends With `6esn`}) Where False Remove `5esn`:_usn4,[1.0[0X7][{`5esn`}],@usn6[$`3esn`..{`3esn`}]].#usn8! Union All With  *,{_usn4} =~$_usn4 As _usn4 Order By {12} =~#usn8 Asc,[00[$`7esn`],{usn1} In 2.12 In 1000,01 Ends With 999 Ends With {`7esn`}] Starts With Reduce(`6esn`=00[{`8esn`}..][{`8esn`}..],`5esn` In $999[0.0..]|`5esn`[{`4esn`}..`2esn`]) Asc,$1000 Is Null Is Null Descending Skip False[$usn1.._usn4][_usn4..{`3esn`}]"),
    octest_legacy:ct_string("Merge #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}) On Create Set None(`2esn` In `1esn` =~\"d_str\" Where $`1esn`[1.0..][_usn3..]).`1esn`? =.e12 Contains 0X7 Contains {0} On Match Set [#usn8 In {`5esn`}[.e1..``] Where {7}[..12e12][..Count ( * )]|$123456789 Ends With {`1esn`} Ends With $`4esn`].`6esn`! =Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] Union All Unwind True[..$`6esn`] As `2esn` Foreach(usn1 In {`8esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`6esn`:2.12 =~Count(*)} =~Shortestpath(((:`4esn`{`5esn`})))| Remove [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|0e0[..010]].`6esn`!) Return Distinct All(`3esn` In {7} Is Null)[{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]}..],`5esn`[.e0..][07..] As `7esn` Order By None(`2esn` In `1esn` =~\"d_str\" Where .e12 Is Not Null Is Not Null)[Reduce(@usn5=#usn7 Contains _usn3 Contains {`3esn`},@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$@usn5 Starts With {0} Starts With 12)] Descending,$123456789[_usn3][{#usn7}] Descending,`8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Ascending Union Create Unique ((:`5esn`{``:1.0[0e0..0.e0]})) Optional Match `3esn`=((`6esn` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})),`2esn`=Shortestpath(((_usn4 {`5esn`:\"d_str\" Starts With 01})-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]})<-[{#usn7:123456789 Is Null}]-(:`6esn`{#usn7:$@usn5 Contains 0xabc Contains {#usn7},`1esn`:0xabc[.e0]}))) Using Scan `4esn`:usn1 With  *,$1000 =~$`2esn` As `7esn` Limit 0.0 =~0 =~`6esn` Where 12e12 Ends With {usn1}"),
    octest_legacy:ct_string("Optional Match usn2=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Using Join On ``,_usn3 Remove Single(`` In `` Is Not Null Is Not Null Where 1.0 In Count(*)).`6esn`!,All(#usn8 In 7[..999][..{#usn8}] Where `4esn`[1.0]).@usn6 Union Return *,$@usn5 Contains 0xabc Contains {#usn7} Limit Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn3 In {1000} In 0.12)[{@usn6}..]"),
    octest_legacy:ct_string("Foreach(`8esn` In (`1esn` :#usn8:#usn8)-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})[..(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})][..`5esn`({12} Ends With 1.0 Ends With .e0)]| Remove [usn1 Ends With $@usn6 Ends With `3esn`,0xabc[.e0],{``}[010..][0xabc..]].``?) With Distinct 9e0 Starts With 01 As `2esn`,`` Ends With 123456789 Ends With 123.654 As usn2,Count ( * ) Contains 07 Skip {`4esn`} =~{7} =~{`7esn`} Where 0X7[0e0..`7esn`][1000..0e0] Unwind $`3esn` Is Not Null Is Not Null As _usn3 Union All Remove Case When `2esn` Is Null Then 1000 =~@usn6 =~0x0 Else \"d_str\"[#usn8] End.`1esn`"),
    octest_legacy:ct_string("Start #usn8=Relationship:usn2(`8esn`={`8esn`}) "),
    octest_legacy:ct_string("Merge _usn4=(({``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}})) On Create Set #usn7+=Count(*) In $12,`2esn`+=$usn2[9e0],[9e1[1000][{123456789}],$usn2[{@usn5}],0Xa Starts With {`6esn`} Starts With $usn1].usn1? =Reduce(`4esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|False[..``]) Is Null Is Null On Match Set ``(Distinct 0.12 =~`5esn` =~`5esn`,Null[``]).`1esn`! =12e12 Ends With {usn1},@usn5 =7 Ends With $`4esn`,_usn4 =Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] Create Shortestpath((((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})))),`1esn`=((usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``})) Union All With Distinct False Is Null Is Null,Count(*) Is Null Is Null As usn2,0Xa[9e1..][$`6esn`..] As @usn6 Order By 123.654 Is Not Null Is Not Null Descending,{123456789} Starts With 0.0 Starts With `5esn` Desc,Case 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] When 12e12[$`3esn`] Then {`5esn`} Contains $0 Contains {``} Else usn1 Starts With usn1 Starts With $`` End[usn2(Distinct 0.12 In _usn3 In {0},@usn6 Is Null Is Null).._usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)][[{7}[$``][{@usn6}],0.0 Ends With 010 Ends With 1.e1]..$`4esn`] Asc Skip 0.0[Null][$`2esn`]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0.0 In {#usn8} As _usn4 Fieldterminator 's_str' Load Csv From $123456789 Starts With {_usn4} Starts With $1000 As #usn8 Fieldterminator \"d_str\" With  None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Order By {`3esn`}[..07][..{`5esn`}] Desc Limit 12.0"),
    octest_legacy:ct_string("Create (({`7esn`:\"d_str\" Starts With $123456789})-[`6esn`? *0..]-(`5esn` :`2esn`:usn1)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),Allshortestpaths(((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]}))) Remove Extract(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7]|1.0 =~7 =~{usn2}).`8esn`! Return *,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,123.654[`3esn`..] Order By Shortestpath(((@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})-[]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})<-[#usn7?:`1esn` *01234567..0Xa]-(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}))) =~_usn3(Distinct 7[$`8esn`..123456789][$usn1..$usn1],.e0[..$`8esn`]) Descending,7 =~{`8esn`} =~$`6esn` Asc Skip `8esn`[`4esn`..{#usn8}][$12..2.12] Union All Foreach(`4esn` In `7esn` Is Null Is Null| Create `2esn`=(`` :#usn7) With Distinct $12[True..][{0}..],0Xa[$123456789..123.654][.e12..0.e0],{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) As `4esn` Order By $`5esn` Starts With `` Asc,Any(#usn7 In {``} Is Not Null Where usn1[9e12..][$7..]) Ends With Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X7[`7esn`][123.654]|12.e12[7..$`6esn`]) Ends With All(`3esn` In {7} Is Null Where {123456789} Contains $#usn8) Ascending Skip `7esn`[9e0..] Limit Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null} Where {``} Ends With `7esn` Ends With 0.0) Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),Shortestpath(({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}))"),
    octest_legacy:ct_string("With  Count(*)[exists($12[$1000..123456789],123456789[0xabc..'s_str'][``..`1esn`])][Case When .e12 Is Not Null Is Not Null Then usn1[`5esn`..$7] Else `3esn`[..$12][..{`7esn`}] End] As `3esn`,2.12 Ends With $_usn3 Ends With `3esn` As `7esn`,{#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])][..(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})] Order By 0[1.e1..12e12] Desc,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {123456789} Is Null Is Null|12.0 =~999 =~$_usn3) Is Not Null Is Not Null Asc Skip $999 Where 's_str' Ends With 7 Ends With {_usn4} Optional Match usn2=Shortestpath((`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})) Using Index `3esn`:_usn3(`6esn`) Using Index #usn8:`2esn`(`5esn`) Where 07[..$@usn6][..1.0] Match `1esn`=(_usn3 :usn2{#usn7:{999} Starts With {0}}) Using Join On @usn5,`8esn` Where False Starts With {`5esn`} Union All Delete {`3esn`} In 01,.e1 In 0,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]]"),
    octest_legacy:ct_string("Match _usn3=((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`2esn`?:`7esn` *0X7..]-(@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})) Using Scan `6esn`:`3esn` Using Join On ``,`6esn`,usn2 Where Null Ends With {`5esn`} Ends With 0.e0 Union Create Unique `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Optional Match Shortestpath((({`5esn`:$#usn8 Ends With $`2esn` Ends With $@usn6})<-[`4esn`?:usn2|`` *0X7..]->({_usn3:$`5esn`[`3esn`..]})-[@usn5?:`4esn`]-(:usn1{usn1:{`6esn`}}))) Create @usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)),`8esn`=((`4esn` :@usn6:#usn8)-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})) Union Match `7esn`=Allshortestpaths((@usn6 {`3esn`:{``} Is Not Null})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`` :`1esn`)) Load Csv With Headers From (usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})<-[ *123456789..]-(:@usn5) Is Null Is Null As _usn3 Fieldterminator 's_str' Union All Create Unique (`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1),`1esn`=((_usn3 {`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})) Union Load Csv From Shortestpath((:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))[Filter(#usn8 In 7[..999][..{#usn8}] Where $#usn7 Contains 0x0 Contains 1000)..] As #usn8 Fieldterminator 's_str' Remove [`5esn` In $999[0.0..] Where {7}[..12e12][..Count ( * )]]._usn4!,All(#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8).``!,{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}.`4esn`? Create Allshortestpaths((#usn8 {@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})-[#usn8?:`7esn`$1000]->(_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})),`5esn`=Allshortestpaths((`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]}))"),
    octest_legacy:ct_string("Start `7esn`=Rel:`6esn`(\"d_str\")  With Distinct *,`1esn` Contains {usn2} Contains $#usn8,$`3esn` In $_usn4 In {_usn3} As `4esn` Where $`4esn`[Null..] With  *,12[..$`4esn`],Case When 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Then {1000} =~0 =~123.654 When `8esn`[`4esn`..{#usn8}][$12..2.12] Then 00[$`7esn`] End Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`7esn` =~{`8esn`} =~$usn1) Contains [0.12 =~`5esn` =~`5esn`]"),
    octest_legacy:ct_string("Detach Delete {7}[..12e12][..Count ( * )],`7esn` Is Null,[.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Load Csv From 999 In {`3esn`} In usn2 As _usn4 "),
    octest_legacy:ct_string("With  $12 =~$_usn3 As `6esn`,Count ( * ) Contains 07 Order By usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..] Asc,Count ( * ) Starts With 7 Starts With $123456789 Descending,Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] Ascending Skip $`8esn`[..{`2esn`}] Where {``} Is Not Null With Distinct [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]) Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc Where $usn2[{@usn5}] Create `4esn`=(({_usn3:.e12[@usn5..$12]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})),#usn8=((@usn5 :usn1)<-[`5esn`? *7..12{`5esn`:{999},_usn3:$`5esn`[2.12..]}]->(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})-[_usn4?:_usn4|:usn2 *..999]-({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}))"),
    octest_legacy:ct_string("Detach Delete {`1esn`:9e1[1000][{123456789}],``:$`8esn`} Starts With (#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}),`1esn`($123456789 Starts With 9e0 Starts With 's_str',{usn2}[.e0..$999])[{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {usn1} In 2.12 In 1000)][Case 0[`7esn`..] When 123456789 Is Null Then .e12 Is Not Null Is Not Null Else $@usn5 =~1000 =~1000 End..[`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|{`3esn`}[`2esn`]]],(`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Union All Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:_usn4(_usn4) Where {#usn7}[9e1..][{123456789}..]"),
    octest_legacy:ct_string("Optional Match ({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`),`4esn`=Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))) Using Scan `4esn`:`5esn` Using Index `3esn`:@usn5(`2esn`) Where $@usn5 Starts With 01 Starts With .e0 Unwind None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End As @usn5 Remove Reduce(`1esn`=#usn8,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|0.e0 In $#usn7 In $_usn3).#usn8!,[9e1 In $`3esn` In $@usn6,`7esn`[..2.12][..00]].`2esn`!,[{`2esn`} Ends With {`7esn`},usn1[`5esn`..$7]].usn1"),
    octest_legacy:ct_string("Create Unique usn2=((@usn6 :_usn4)),Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) Union All Optional Match #usn7=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Create Unique ({`3esn`:usn1 Is Null Is Null})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`4esn` {@usn6:{12}[..0X7]}) Union All Load Csv From {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] As `4esn` Fieldterminator \"d_str\" Delete $`7esn` Is Null Is Null Delete {#usn8:#usn7[usn1][$`5esn`],`4esn`:01[2.12..`8esn`]} =~{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null} =~[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]"),
    octest_legacy:ct_string("With Distinct [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As `8esn`,[`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As @usn6 Skip {7}[$`5esn`][{_usn3}] Detach Delete ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}),`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),usn2[{7}] Create (`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}}),Allshortestpaths((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))) Union Foreach(usn1 In Filter(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``]) Ends With Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End| Unwind {@usn6}[$`6esn`..`4esn`] As #usn8) Create @usn5=Allshortestpaths((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)),(((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`}))) Unwind {usn1} Starts With #usn8 As _usn3"),
    octest_legacy:ct_string("Start usn1=Rel:`7esn`(usn2={`7esn`}) Where $`6esn`[{999}..9e0] Union All Unwind Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12) As `1esn` Delete Shortestpath(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))[#usn7(Distinct $`5esn`[`3esn`..])..{``:0Xa Starts With {`6esn`} Starts With $usn1}],.e0[..$`8esn`] Foreach(`8esn` In .e1 In 0Xa In #usn7| With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Where 0.e0 Starts With `2esn` Return Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `4esn`,usn2 Is Null As `7esn`,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]])"),
    octest_legacy:ct_string("Start `3esn`=Rel:`7esn`(`3esn`='s_str')  Union All Delete $#usn7[@usn5..{1000}][1.e1..7],Extract(`` In `` Is Not Null Is Not Null Where {``}[...e12]|12 Ends With 0x0 Ends With 0.e0) Is Null Is Null,$#usn7 Is Null Union All With Distinct *,1000[0X7..2.12] As `4esn` Limit {7}[$7..$``][{``}..{7}] Where _usn3 Starts With 12.e12 Starts With 0.12 With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Skip 01 Ends With 999 Ends With {`7esn`}"),
    octest_legacy:ct_string("Unwind $12[Count ( * )][0X7] As `3esn` Optional Match @usn5=Allshortestpaths(({`1esn`:$`8esn`[1000..0Xa]})),(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}) Using Join On `3esn`,`5esn` Using Join On `5esn`,@usn6 Where $_usn3[Count(*)] Union Load Csv From 9e1[2.12..{#usn8}] As `2esn`  Unwind $@usn5 Is Not Null Is Not Null As `8esn` Start `1esn`=Rel:`4esn`(`4esn`='s_str') Where 123456789 Is Null Union All Create Unique #usn7=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null}) Start `2esn`=Node:``({`1esn`})  With  Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Skip 0Xa[..{`4esn`}][..12.0] Limit (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[{`8esn`:07 In `2esn` In 12e12}]-(`3esn` :@usn5)-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) Is Not Null Is Not Null"),
    octest_legacy:ct_string("Merge Shortestpath((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)) On Create Set @usn5+={123456789}[9e12][{0}],`` =@usn6 Contains Null Contains $`7esn`,`` =12.0 =~'s_str' =~$`5esn` On Create Set Extract(`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|False =~1e1 =~0.e0).`4esn`! =None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null),`2esn` ={`3esn`}[..07][..{`5esn`}],(@usn5 :`6esn`)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8}).usn1? =$#usn8 =~{@usn5} Union All Return Distinct {usn2} In _usn3 In $#usn7 As `6esn` Order By Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` Asc Limit {#usn8:#usn7[usn1][$`5esn`],`4esn`:01[2.12..`8esn`]} =~{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null} =~[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]] Return *,1e1 Contains 0e0 Skip @usn6 Contains Null Contains $`7esn` Limit $0 Union Merge `4esn`=Shortestpath((((#usn8 :`8esn`:`7esn`{#usn7:#usn8[..{#usn7}]})-[usn1?]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)))) Merge Allshortestpaths(((`` :`1esn`)-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 $999)<-[`4esn`?:`7esn` *0..{`2esn`:00[`2esn`..12][123456789..0.e0]}]->(`1esn` :_usn3:_usn3))) On Match Set `1esn`+=usn1 Is Null Is Null,Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]).`5esn` =0X0123456789ABCDEF Is Null Is Null Start `7esn`=Node:`6esn`({_usn3}) Where 123456789 Ends With 12.e12 Ends With $`7esn`"),
    octest_legacy:ct_string("Match #usn7=(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}) Using Index #usn8:`2esn`(`5esn`) Using Index `3esn`:`5esn`(#usn7) Union All Create Unique `6esn`=((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`7esn`? *7..12]->({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})),#usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})) Union With Distinct *,`1esn`(Distinct $1000[999]) =~Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) =~{`6esn`:'s_str'[00][{`5esn`}]},{_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] As `` Order By {0}[{`8esn`}..`4esn`] Desc,Case When Count ( * ) Contains 07 Then $`2esn` When 1.0 Is Null Is Null Then `7esn`[..2.12][..{usn1}] End Is Not Null Desc Limit $`2esn`[2.12..'s_str'][{@usn6}.._usn4]"),
    octest_legacy:ct_string("Unwind $#usn7 Contains 0x0 Contains 1000 As #usn7 Detach Delete Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}..Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)],0.12 In _usn3 In {0},Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]|123456789 Ends With 12.e12 Ends With $`7esn`) Is Not Null Union All With  $123456789 In 0X0123456789ABCDEF In 0.e0 As `6esn`,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) Order By 1e1 In \"d_str\" In `7esn` Descending,`1esn`({`2esn`} Ends With {`7esn`},{`2esn`} Starts With 0.0 Starts With {usn1})[Extract(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {_usn4} Starts With 0.e0 Starts With 0x0)] Desc Skip [Count(*) Ends With 12.0 Ends With 12,9e0[{0}..{`3esn`}][\"d_str\"..0Xa]][..Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``])][..{usn1:$_usn3[..1000],`7esn`:{1000} =~0 =~123.654}] Union All With  Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End,9e0[`3esn`..$_usn4],.e0 Ends With 0.12 As usn2 Limit {999}[_usn4..] Where $#usn8[$`8esn`..{`8esn`}]"),
    octest_legacy:ct_string("Match ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})))) Using Index @usn5:`4esn`(`3esn`) Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] Union Merge Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))) On Match Set `5esn` =All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] On Match Set `7esn` =`4esn`[..010][..{12}],@usn5+=0X7[$999][_usn4],@usn5 =0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`"),
    octest_legacy:ct_string("Remove Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 01 =~{_usn3} =~`3esn`).`7esn`!"),
    octest_legacy:ct_string("Unwind 0X7[..2.12] As `2esn` Return {7}[$``][{@usn6}] As `2esn` Order By {`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null Desc,{123456789}[9e12][{0}] Ascending,$_usn3['s_str'][07] Ascending Skip [usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Merge ({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Union All Merge #usn8=Shortestpath(((#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]}))) Unwind $999 In $_usn3 In {`5esn`} As @usn6"),
    octest_legacy:ct_string("Load Csv From _usn4 Is Null Is Null As `8esn` Fieldterminator 's_str' Merge _usn4=Shortestpath((((#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})))) Load Csv From .e0 =~`6esn` =~{12} As usn1 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start `2esn`=Node:`7esn`(`3esn`=\"d_str\")  With  {`5esn`} =~`4esn` =~{_usn4} As `4esn`,Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6,07 =~01 Order By `5esn`[_usn4..] Desc Skip `8esn`[{123456789}..] Union All Return Distinct Case When usn1 Is Not Null Then $0[12.e12..] Else 7[{0}..{_usn4}] End[..Reduce(_usn3={@usn5} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{usn1}[0X0123456789ABCDEF])] As #usn8,0X7[123.654..@usn6] As _usn3 Skip Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 00[`2esn`..12][123456789..0.e0]|0e0 In @usn5) Ends With 's_str' Ends With _usn3(Distinct $`7esn` =~{`8esn`} =~$usn1,$0[..9e1]) Optional Match (((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}))),(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) Where $usn1 =~`` Create ``=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[`2esn`?:usn2|``{`5esn`:0X0123456789ABCDEF Is Null Is Null,_usn4:.e12 Ends With _usn4}]-({@usn6:{1000} =~$@usn6 =~12})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))),(#usn8 {@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})-[#usn8?:`7esn`$1000]->(_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`}) Union All Merge `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8)) On Match Set #usn8+=#usn7[010..False] On Create Set $`1esn`.``? =[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Detach Delete 123.654[{7}..],False Starts With {`5esn`} Load Csv With Headers From _usn4 Contains 2.12 As #usn8 "),
    octest_legacy:ct_string("Start @usn6=Rel:``(_usn3='s_str') ,_usn4=Node:@usn6({12}) With  *,0X7[1000..{`1esn`}],12.e12 Is Null Is Null Order By $`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Descending,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Skip `4esn` Is Not Null Is Not Null Where `5esn`[.e0..][07..] Union All With  *,None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where $_usn3[.e0..$usn2]|{#usn7}[9e1..][{123456789}..]) Ends With Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}]) As ``,0.e0[123.654][01] As _usn3 Where 1000 In {`8esn`} In 01 Delete 0.0 Is Not Null Is Not Null,None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],Reduce(#usn7=$1000 Is Null,#usn7 In {``} Is Not Null|$`1esn` Ends With 9e1 Ends With $123456789) In Case When `5esn` Is Null Then True[..$`6esn`] Else `3esn`[`3esn`..][#usn8..] End"),
    octest_legacy:ct_string("Foreach(usn2 In [12.e12[$_usn3..]][Shortestpath(((@usn6 :`4esn`)))..Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``)]| Detach Delete $#usn7 Is Null Start usn1=Rel:`7esn`(usn2={`7esn`}) ) Create ((:`1esn`{`5esn`:1.0 In Count(*)})),#usn8=Shortestpath((#usn8 :usn1{#usn7:`5esn` Is Null})) With Distinct *,#usn7(usn2 Is Not Null Is Not Null,$`6esn` Ends With Count(*)) Is Null Is Null As `6esn`,#usn8 In $@usn6 Skip {`1esn`} Is Not Null Where {7}[$``][{@usn6}] Union Load Csv With Headers From $`` =~12.0 =~$`7esn` As #usn7  Start usn1=Rel:``(_usn3='s_str') ,``=Node:_usn3({@usn6})Where 0[..usn2][..{@usn5}] Remove `1esn`(Distinct `1esn` Contains {usn2} Contains $#usn8,$1000 Is Null).`2esn`?,(_usn3 :_usn4)-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}).#usn8? Union Remove Extract(`8esn` In 01[2.12..`8esn`] Where Count ( * ) Ends With $@usn5|Count ( * )[True..][{#usn7}..]).usn2?"),
    octest_legacy:ct_string("Create Unique (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null}),(({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})) Union All Remove Extract(#usn8 In {`5esn`}[.e1..``]|Count ( * ) Ends With 12.0).#usn8,(`7esn` :``:#usn8)-[usn2?:#usn7]-(:`4esn`{``:2.12 Is Not Null Is Not Null})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}).`8esn` Match ((:usn1{usn1:{`6esn`}})),`2esn`=(:`4esn`{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[#usn8:@usn5 *..01]-(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null}) Using Join On `8esn`,@usn6 Using Index `6esn`:_usn4(``) Where usn2 Is Not Null Is Not Null Unwind 0.0 =~False =~$999 As usn2"),
    octest_legacy:ct_string("Create (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2) Load Csv With Headers From True[00][0Xa] As #usn7 Fieldterminator 's_str' Start usn1=Node:``(@usn6={usn1}) ,#usn8=Rel:`5esn`(_usn3={`8esn`})Where {1000} =~0 =~123.654 Union Match #usn7=Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})),((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})) Using Index `3esn`:usn1(@usn6) Match Allshortestpaths(((usn2 :@usn5)<-[? *00]->(@usn5 :usn1))) Using Scan _usn3:`1esn`"),
    octest_legacy:ct_string("Delete 9e1[0.0..],{``} Ends With `7esn` Ends With 0.0 Union All Remove Allshortestpaths((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})).`4esn` Unwind Allshortestpaths(((({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`4esn`]->(:`6esn`$123456789))))[Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {_usn4} In {12} In $0)] As `6esn`"),
    octest_legacy:ct_string("Unwind [`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"]|$#usn7 Is Null][..{`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]}] As @usn6 Detach Delete .e0 Starts With 0 Starts With 0.e0 Union All Foreach(`4esn` In {1000} Is Null Is Null| Return *,{12} Is Not Null As `7esn` Skip 9e12 Is Not Null Is Not Null Delete $@usn5 Starts With 01 Starts With .e0,$usn1[{`5esn`}][$`6esn`]) Start usn1=Node:#usn8({``})  Union Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),(((`6esn` :`5esn`{usn1:{`6esn`}})<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})<-[:`1esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]})))"),
    octest_legacy:ct_string("Start usn1=Node:@usn5({`1esn`})  Union Foreach(usn1 In 0Xa[..{`4esn`}][..12.0]| Return *,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] Limit [`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999}] Ends With usn1(Distinct 1000 In {`8esn`} In 01,{_usn3}[..\"d_str\"][..`5esn`]) Ends With Reduce(_usn4=1000[Null..{123456789}],`5esn` In $999[0.0..]|9e1 In $`3esn` In $@usn6) Remove Reduce(`8esn`={`7esn`}[..$@usn5][..$#usn8],`3esn` In {7} Is Null|0.12[$`3esn`..$_usn3][12.0..usn1]).`1esn`,Reduce(`4esn`=$999 Is Not Null,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$`7esn`['s_str']).``?,(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}).#usn7) With Distinct (`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])] As _usn4,$_usn4[1.e1]['s_str'] As #usn8,usn2[$7..$123456789][$@usn6..$7] Order By 9e1[0.0..] Desc,0.12 =~$0 =~$0 Desc Limit {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Where 0X7 =~9e1 Unwind .e0 Starts With $`` Starts With $usn2 As _usn3"),
    octest_legacy:ct_string("Start `3esn`=Node:_usn4(`6esn`='s_str')  Union All Return $_usn4[0e0..][False..] As `` Order By 0X0123456789ABCDEF =~1e1 =~{`4esn`} Desc Skip Count(*) Contains $#usn7 Contains 1e1"),
    octest_legacy:ct_string("Foreach(`` In $`8esn`| Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7) Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5)"),
    octest_legacy:ct_string("Foreach(`5esn` In $@usn5 Starts With {@usn5} Starts With 9e0| Remove _usn3(0.12 =~$0 =~$0).`3esn`) Union Foreach(`3esn` In $`3esn`[..12.0]| Match (:`1esn`{})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789) Using Index _usn3:`6esn`(#usn7) Where `6esn` In 0Xa Return Distinct {``} =~12 =~`` As `2esn`,Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} Skip 1.0[00..] Limit 12.e12 Starts With {999} Starts With {`1esn`}) Optional Match ``=((`` :`7esn`:_usn3)),(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[`6esn`?:`1esn` *0X7..]->(:``:#usn8{``:1.0[0e0..0.e0]})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}}))) Using Index #usn7:#usn8(`4esn`) Using Join On ``,`6esn`,usn2 Union Merge _usn3=((#usn7 :``:#usn8{`2esn`})) Return `` Is Not Null Is Not Null,$_usn3 Ends With 0x0 Ends With 12.0,$_usn3[.e0..$usn2] Order By Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Ascending Limit {`4esn`} Ends With {123456789} Ends With $`4esn` Delete [`3esn` In {7} Is Null Where {123456789} Contains $#usn8|$@usn5[..12e12][..$123456789]] In Case 01 =~{_usn3} =~`3esn` When `2esn`[..$#usn8][..Count(*)] Then 00[{`8esn`}..][{`8esn`}..] Else `3esn`[..$12][..{`7esn`}] End In Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]|010 =~{usn2})"),
    octest_legacy:ct_string("With  (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As @usn5,`8esn`[$`8esn`..{`4esn`}],None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `5esn` Starts With 010 Starts With 0.0) Ends With Reduce(usn2=False =~1e1 =~0.e0,`` In `` Is Not Null Is Not Null|#usn8[`3esn`..][{#usn7}..]) Order By @usn6 Is Null Is Null Descending,{_usn3} Is Null Is Null Desc,Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1) Descending Union With Distinct *,{_usn4} In {12} In $0 Skip [$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]][..{#usn7:{123456789} Contains $#usn8}][..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `4esn`[1.0])] Limit None(#usn8 In {`5esn`}[.e1..``] Where `8esn` Contains $usn1 Contains $12) In Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where #usn8[..{#usn7}]) In (#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]}) Where #usn8 Is Not Null Foreach(#usn8 In .e12 Ends With $`2esn` Ends With {``}| Start `3esn`=Node:@usn5({0}) ,`2esn`=Relationship:`3esn`(\"d_str\")) With  All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Limit $12[`5esn`..] Where 0.12[`2esn`..{`6esn`}] Union All Unwind `2esn`[{`4esn`}][$_usn3] As usn1 Return Distinct $@usn5,{`5esn`} Starts With @usn5 Starts With `7esn`,$1000 =~$`2esn` As `6esn` Skip 9e12[{123456789}..#usn8][{_usn3}..{#usn7}] Limit 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3]"),
    octest_legacy:ct_string("Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`7esn`=((@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[?:`7esn`{`3esn`:{#usn8}[010]}]-(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})) Union All Remove Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7))._usn4"),
    octest_legacy:ct_string("Create usn2=Shortestpath((({_usn3:.e12[@usn5..$12]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null}))),`5esn`=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Union Create `6esn`=Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01})))),_usn3=((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})) Union All Start usn1=Rel:@usn6(#usn7='s_str') ,_usn3=Node:`6esn`('s_str')Where #usn7 Match ((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})),((_usn3 :`7esn`:_usn3)-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(_usn3 {#usn8:_usn4 Is Null Is Null})) Using Index ``:_usn3(usn1) Unwind Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End] As `2esn`"),
    octest_legacy:ct_string("Detach Delete 0.0 =~0 =~`6esn`,@usn5 In $7,{`7esn`}[..$@usn5][..$#usn8] Return `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`8esn`[$#usn7..123456789],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null Descending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,1e1 In \"d_str\" In `7esn` Descending Skip [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8?"),
    octest_legacy:ct_string("Start #usn7=Node:@usn5(usn2='s_str') Where 9e1[2.12..{#usn8}] Foreach(`` In $`8esn`| Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7) Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5) Return Distinct {usn2} In _usn3 In $#usn7 As `6esn` Order By Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` Asc Limit {#usn8:#usn7[usn1][$`5esn`],`4esn`:01[2.12..`8esn`]} =~{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null} =~[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]] Union Optional Match (((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[#usn7:@usn5 *0X7..]->(`2esn` ))),Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where `7esn` In {123456789} In `1esn` Delete Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End]"),
    octest_legacy:ct_string("Unwind Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where .e0 Starts With 0 Starts With 0.e0) Is Null Is Null As `6esn` Load Csv From 9e1[0.0..] As #usn7 Fieldterminator \"d_str\" Union Foreach(@usn5 In None(`5esn` In $999[0.0..] Where {``}[010..][0xabc..])[{`3esn`:False Is Null Is Null,`8esn`:2.12}]| Return *,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By $12[Null..Count(*)][{`5esn`}..{999}] Desc,12.e12[7..$`6esn`] Desc Skip {`4esn`} Ends With {123456789} Ends With $`4esn` Return Distinct {``}[`8esn`..],{`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Limit `8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),@usn6=(({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]})) Optional Match `3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}),Shortestpath((:`8esn`:`7esn`)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})) Using Index ``:_usn4(_usn4) Where {_usn3}[..\"d_str\"]"),
    octest_legacy:ct_string("Start `4esn`=Relationship:_usn3({`6esn`}) Where {``}[...e12] Foreach(`4esn` In {`6esn`}| Create Unique `8esn`=(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]})) Return Distinct *,Count ( * )[$_usn4..$`4esn`],Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] Limit $_usn3 =~0.12 =~{#usn8} Union All Foreach(`` In $``| Optional Match `2esn`=((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)) Using Scan `1esn`:usn2 Where {@usn5} Is Null Is Null) Detach Delete 0.0 =~0 =~`6esn`,@usn5 In $7,{`7esn`}[..$@usn5][..$#usn8] Return Distinct *,{`3esn`:{@usn6}[{999}..][00..]}[count(Null Ends With {`5esn`} Ends With 0.e0,{usn1} In 2.12 In 1000)][All(`` In `` Is Not Null Is Not Null Where Count(*)[..usn2][..usn2])],9e1[..$`2esn`] As `` Skip 0X7[{@usn6}] Limit {`2esn`} In 12 Union Delete {`7esn`}[0e0][1.e1] Create usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) Merge Allshortestpaths((`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `2esn`[..$#usn8][..Count(*)] As `6esn` Fieldterminator 's_str' Start `1esn`=Node:`2esn`(#usn8={123456789}) Where @usn6[{`5esn`}] Foreach(`5esn` In False| Detach Delete Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Case When 07 Contains 0X7 Contains $`8esn` Then {`4esn`} =~9e0 =~{12} When .e1 Ends With 1e1 Ends With @usn5 Then $#usn8[Count ( * )] Else Count ( * )[True..][{#usn7}..] End Ends With Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End)"),
    octest_legacy:ct_string("With  .e0 Ends With 0.12 As `6esn` Order By 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Asc,[#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Descending Skip 0.0[Null][$`2esn`] Where 1000 In {`8esn`} In 01 Union Remove (:usn1{usn1:{`6esn`}})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(@usn6 :`1esn`)<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]}).`7esn`!,Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,#usn8:`4esn` Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Union Unwind 's_str' Is Not Null Is Not Null As _usn3"),
    octest_legacy:ct_string("Load Csv With Headers From None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Is Null Is Null As usn1 Fieldterminator 's_str'"),
    octest_legacy:ct_string("With Distinct *,Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) Load Csv With Headers From .e1 In 0Xa In #usn7 As _usn3  Union All Return *,$_usn3 =~0.12 =~{#usn8},9e0 Is Not Null Is Not Null Skip {usn2} Starts With $`8esn` Starts With Count ( * ) Limit $@usn5 Starts With $1000 Union All Create Unique `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),`2esn`=Shortestpath(({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})) Load Csv From {1000} =~0 =~123.654 As @usn6 Fieldterminator 's_str' Start `5esn`=Node:_usn3(#usn8=\"d_str\") Where True[..$`6esn`]"),
    octest_legacy:ct_string("Delete 0Xa[2.12] Create `5esn`=(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[`5esn`?:`5esn` *1000..00]->({`1esn`:`3esn`[{`2esn`}]}),Shortestpath(((#usn7 :``:#usn8{`2esn`})<-[usn1?:#usn8|`1esn`]->({@usn5:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],@usn6:$0})<-[@usn6?:`5esn`]-(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}))) Union All Load Csv With Headers From Null[$`5esn`][False] As `` Fieldterminator \"d_str\" Merge (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2) Union All Create Unique `8esn`=((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 1.0[`3esn`..][9e0..] As `5esn`  Merge @usn6=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5}) On Create Set #usn8+=[1.0 =~'s_str' =~{`2esn`}][Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`6esn`})][Reduce(`2esn`={123456789} Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4])]"),
    octest_legacy:ct_string("Create Unique `3esn`=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))) Union All Return *,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By $12[Null..Count(*)][{`5esn`}..{999}] Desc,12.e12[7..$`6esn`] Desc Skip {`4esn`} Ends With {123456789} Ends With $`4esn` Create usn2=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Unwind {`3esn`}[..07][..{`5esn`}] As usn2 Union All Merge `7esn`=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}) Load Csv With Headers From {`4esn`} Ends With {usn2} Ends With {999} As _usn4  Union All Return {#usn7}[..9e12][..`8esn`] As #usn7,{0}[{`8esn`}..`4esn`] As #usn8 Order By 0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` Asc Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] Limit `3esn`[$`1esn`..999][``..$123456789] Create `6esn`=({usn1:$`3esn` In $_usn4 In {_usn3}})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})-[``?]-(#usn8 :@usn6:#usn8{`2esn`:$7 Is Not Null Is Not Null,`1esn`:`1esn` =~\"d_str\"}),_usn4=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null}) Load Csv With Headers From 123456789 Ends With $`6esn` Ends With $#usn7 As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Create Shortestpath(((:#usn8:#usn8{``:1.0[0e0..0.e0]})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[ *123456789..{`4esn`:0Xa[2.12],#usn7:0.e0 In $#usn7 In $_usn3}]->(`6esn` :`3esn`:@usn5{`3esn`:0.e0 In $#usn7 In $_usn3,_usn4:{`8esn`} Ends With `6esn`}))),@usn6=Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})))) Merge (:`1esn`{})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789) On Create Set usn2 =All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null) Is Null On Match Set @usn6 ='s_str' Starts With 123.654 With Distinct $12[Count ( * )][0X7],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As `3esn`,{`5esn`:01 =~{_usn3} =~`3esn`,@usn5:{`3esn`} Is Not Null Is Not Null}[[`3esn` In {7} Is Null Where usn1 Is Null Is Null]..Reduce(@usn5=$0 Ends With 12.0,`5esn` In $999[0.0..]|$`8esn`[..00])][Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where usn2[$7..$123456789][$@usn6..$7]|0xabc[01..{999}][{7}..{`7esn`}])..None(`` In `` Is Not Null Is Not Null Where 0x0[`4esn`..'s_str'])] As @usn5 Skip $usn2[9e0] Limit {12} Is Not Null"),
    octest_legacy:ct_string("Load Csv From 123.654[$`1esn`] As #usn7  Detach Delete [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}],Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null,$_usn3 In {1000} In 0.12 Foreach(_usn4 In [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null]| Start ``=Rel:#usn8({12})  Match ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Using Scan _usn4:@usn6 Where `` Ends With 0Xa Ends With `2esn`) Union All Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))))) Start #usn7=Node:`6esn`(`3esn`=\"d_str\") ,`7esn`=Node:``(@usn6={usn1})Where 9e12 Is Not Null Is Not Null Return Distinct 9e1[True] As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit $@usn6 Is Not Null"),
    octest_legacy:ct_string("Load Csv With Headers From #usn7(usn2 Is Not Null Is Not Null,$`6esn` Ends With Count(*)) Is Null Is Null As `6esn` Fieldterminator 's_str' Match (({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})) Using Index ``:`2esn`(usn1)"),
    octest_legacy:ct_string("Create Unique @usn5=(((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))) Union Return Distinct usn2 Ends With 999 Ends With .e1 As `7esn`,$`5esn`[$123456789],[#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} As `8esn` Order By $0[$`1esn`..07] Desc,Filter(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]) Ends With Case When {#usn8}[010] Then False =~$7 =~2.12 End Descending,{`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null Desc Limit Extract(`5esn` In $999[0.0..] Where {_usn3}[..\"d_str\"]) =~All(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) =~Any(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01) Union All Optional Match _usn4=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))),#usn8=((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)<-[#usn7?:_usn3|_usn3 *..0x0]-(`` :#usn7)) Using Index #usn8:`2esn`(`5esn`) Using Index `2esn`:`1esn`(`4esn`) Where {usn1} Is Not Null Is Not Null Merge @usn5=(`6esn` ) On Create Set Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where @usn6 Contains Null Contains $`7esn`).`4esn` =00 Starts With 0xabc On Create Set usn2 =`3esn` In $0 In `1esn`,@usn6:`1esn`,count(Distinct {`1esn`}[usn1][.e1]).`1esn`? =01 Contains {`8esn`} Contains 2.12"),
    octest_legacy:ct_string("With Distinct Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip $usn1 =~`` Limit `7esn`[..2.12][..{usn1}] Match `4esn`=Allshortestpaths((((:`5esn`)<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`3esn`:#usn7]-({@usn6:$usn1 Ends With $`` Ends With $12})))) Where False Contains {`6esn`} Match (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}) Using Index `6esn`:`8esn`(``) Using Scan `2esn`:`7esn` Where 0.e0 Contains 9e1 Contains {`7esn`} Union All With  Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip {`4esn`}[$123456789..][$#usn7..] Where `5esn` Starts With 010 Starts With 0.0 With  $`8esn`[1000..0Xa],({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) As ``,usn1 Starts With $usn1 As `1esn` Order By Null[``] Descending,1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Limit {`4esn`} Starts With 1e1 Where $123456789 Starts With 9e0 Starts With 's_str' Return *,Case When $_usn3[Count(*)] Then `7esn`[$0][9e12] When $1000[`2esn`..`5esn`][1e1..1.e1] Then 00[{`8esn`}..][{`8esn`}..] End[`7esn`(9e1[1000][{123456789}])],{12} Is Not Null"),
    octest_legacy:ct_string("Load Csv From {@usn6}[$`6esn`..`4esn`] As @usn6  Union All With Distinct *,`6esn` Is Not Null Is Not Null As `3esn` Order By $`5esn` Starts With $0 Starts With {0} Asc Foreach(#usn7 In [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..]| Load Csv From @usn6 Starts With `6esn` Starts With $`1esn` As _usn3  Return Allshortestpaths(((`8esn` ))) Ends With (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}),$_usn3['s_str'][07] As @usn5 Skip $_usn4[0e0..][False..])"),
    octest_legacy:ct_string("Create Unique (`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1),`1esn`=((_usn3 {`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})) Union Match `1esn`=(_usn3 :usn2{#usn7:{999} Starts With {0}}) Using Join On @usn5,`8esn` Where False Starts With {`5esn`}"),
    octest_legacy:ct_string("Unwind 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] As _usn4 Union All Detach Delete #usn7[$usn1],$usn2[9e0],07[$123456789..] Optional Match `6esn`=Allshortestpaths(((_usn3 :`3esn`:@usn5))) Using Scan `3esn`:`5esn` Using Scan `6esn`:`3esn` Merge _usn4=(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})<-[``?]->(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Union All Merge #usn7=Allshortestpaths(((`1esn` {``:`7esn` Starts With $#usn7 Starts With $`7esn`})-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) Return *,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Is Null Is Null,$`5esn`[$`4esn`..{@usn6}][07..$@usn6] Order By {`1esn`:{@usn6}[{999}..][00..]}[..`5esn`][..{#usn8:{`7esn`}[`6esn`][#usn7],`5esn`:$`4esn`[9e12..123.654]}] Ascending Skip [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null Start _usn4=Node( {`1esn`}) ,_usn3=Rel:#usn8(`1esn`={`3esn`})Where {#usn7}[`2esn`..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`6esn`} As _usn4  Start usn1=Relationship:`8esn`(#usn8={`2esn`}) ,`7esn`=Node:`6esn`({_usn3}) Create `6esn`=(usn2 {``:01[{@usn5}]})<-[{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`2esn`:usn1{`8esn`:9e12[`6esn`..12.0],``:01[{@usn5}]})<-[`8esn`:`2esn` *..07]->({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]}),Allshortestpaths((((`4esn` )<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`8esn`?]->(`1esn` :#usn8:#usn8))))"),
    octest_legacy:ct_string("Unwind .e0[..$`8esn`] As usn2 Load Csv With Headers From 0e0 Starts With `2esn` Starts With $`` As `3esn` Fieldterminator \"d_str\" Union All Create Unique ((_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})),`2esn`=Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Union With  *,`7esn` Is Null As `7esn`,None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc,(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null Descending,.e0[..0X0123456789ABCDEF][...e12] Descending Limit {``}[...e12] Load Csv With Headers From ({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})<-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})[(@usn5 :`6esn`)-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]->(:@usn6:#usn8)..{`2esn`:{_usn4} Starts With 0.e0 Starts With 0x0}] As `1esn`  Load Csv From Any(#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]) In Case When 123.654[0e0..$``][$`1esn`..$`8esn`] Then $_usn3['s_str'][07] When {`3esn`}[..07][..{`5esn`}] Then 's_str' Is Not Null Is Not Null End In {`7esn`:{1000}[{_usn3}..],usn2:2.12 =~False} As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge (#usn7 :`8esn`:`7esn`)<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[_usn4?:`1esn` *7..12]->(:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`}) Return Distinct *,{`5esn`:01234567 Is Null Is Null}[..`1esn`(Distinct 00 Starts With 0xabc,$0)],Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Skip 1.0 =~7 =~{usn2}"),
    octest_legacy:ct_string("Merge Shortestpath(((`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[usn2?]-(`7esn` :`5esn`)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8}))) Merge Shortestpath(((`3esn` :`8esn`:`7esn`)<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1}))) On Create Set #usn7+=01 =~{_usn3} =~`3esn` Create Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})),#usn8=Shortestpath(((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})))"),
    octest_legacy:ct_string("Foreach(@usn5 In `2esn` Starts With $_usn4| Remove _usn3(0.12 =~$0 =~$0).`3esn` With Distinct *,Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} Skip $7 Ends With `4esn` Limit Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Where {`2esn`} Ends With {`7esn`}) Optional Match @usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)),(({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})) Using Scan `1esn`:`1esn` Using Index `8esn`:`1esn`(@usn5) Unwind $#usn7 Contains 0x0 Contains 1000 As _usn3"),
    octest_legacy:ct_string("Create `2esn`=Allshortestpaths((({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}}))),#usn7=Shortestpath((((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})))) Union All Return *,$`7esn`['s_str'] As #usn8 Order By Count ( * ) =~$usn2 =~$usn2 Descending,Reduce(`2esn`=$`5esn` In $`` In 123.654,#usn8 In {`5esn`}[.e1..``]|$12[True..][{0}..]) =~Shortestpath((((:#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})))) Asc Limit {7}[$``][{@usn6}] Merge Shortestpath(((`2esn` :_usn4))) On Match Set #usn8+=`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}).@usn6? =01[{@usn5}] Foreach(`3esn` In 123.654[True..$#usn8][0.12..Count(*)]| Return (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null,$#usn8[Count ( * )] As `4esn` Skip _usn3 Ends With 7 Ends With `1esn` Remove [1.0[00..]].#usn8?) Union All Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Foreach(`` In $`8esn`| Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7) Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5) Match `3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))),Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Index @usn5:`2esn`(@usn5) Using Scan `7esn`:usn1 Where Null[$#usn7]"),
    octest_legacy:ct_string("Remove Extract(`4esn` In $`3esn` Is Not Null Where Null Ends With {`5esn`} Ends With 0.e0|0X0123456789ABCDEF[123456789]).`4esn`?"),
    octest_legacy:ct_string("Create Unique `6esn`=((`8esn` :#usn8:#usn8{`3esn`:$`4esn`[9e12..123.654]})),((:`4esn`{``:2.12 Is Not Null Is Not Null})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})) Union With  #usn7 Order By 7 Contains @usn6 Desc,`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) Ascending,\"d_str\" Starts With $#usn8 Starts With _usn4 Asc Where $999 Remove 0xabc.`1esn`?,Allshortestpaths(((($#usn8)-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})))).``?,(_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}).`2esn`!"),
    octest_legacy:ct_string("Create Unique (`7esn` {@usn5:{7}[..1.0][..9e0]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]}),((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})) Optional Match `8esn`=Allshortestpaths(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Using Join On #usn7,_usn4 Using Index `3esn`:`5esn`(#usn7) Where usn1 Ends With $@usn6 Ends With `3esn` Union All Load Csv With Headers From {123456789} Is Not Null As `7esn` Fieldterminator \"d_str\" Create (`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Create Unique (((usn2 :`4esn`)-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[``? *..01{`1esn`:$@usn6 Contains 07}]-(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}))),((({#usn8:0xabc[.e0]})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(:usn2{`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`? *..010]-({#usn7:2.12 Contains usn2 Contains True})))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As `1esn`  Unwind `8esn` Ends With 999 Ends With .e12 As `7esn` Match (((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}))) Where $_usn4 Is Not Null Is Not Null"),
    octest_legacy:ct_string("With Distinct {`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Order By _usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,Count(*) Contains $#usn7 Contains 1e1 Desc Limit {#usn8} Is Null With  Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn` Order By Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Ascending Skip Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[({#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)..][Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01}))))..] Where _usn4 Is Null Is Null"),
    octest_legacy:ct_string("Remove (:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[_usn3{@usn5:123.654[...e0],`8esn`:07 =~01}]-(_usn4 :usn1)._usn3,[#usn8 In 7[..999][..{#usn8}] Where 0Xa[$123456789..123.654][.e12..0.e0]|{999} Starts With $999].usn2 Union All Start _usn4=Relationship(,) "),
    octest_legacy:ct_string("Load Csv From 0Xa Starts With `7esn` Starts With $`1esn` As `7esn` Fieldterminator \"d_str\" Optional Match #usn7=(`4esn` :#usn7),(({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[usn2?:#usn7]-(@usn6 :@usn5{usn2:$`5esn`[..$`5esn`][..$12]})) Using Scan #usn7:@usn6 Using Join On `6esn` Where 0.12 =~$0 =~$0"),
    octest_legacy:ct_string("Return Distinct {``}[`8esn`..],{`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Limit `8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Merge usn2=Shortestpath(((_usn4 {`5esn`:\"d_str\" Starts With 01})-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]})<-[{#usn7:123456789 Is Null}]-(:`6esn`{#usn7:$@usn5 Contains 0xabc Contains {#usn7},`1esn`:0xabc[.e0]}))) Union Remove None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`).``?,Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}).`5esn`!"),
    octest_legacy:ct_string("Merge @usn6=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5}) On Create Set #usn8+=[1.0 =~'s_str' =~{`2esn`}][Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`6esn`})][Reduce(`2esn`={123456789} Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4])]"),
    octest_legacy:ct_string("Foreach(usn2 In {@usn6} Is Null Is Null| Remove `3esn`(False Starts With {`5esn`},0[{usn2}..][$`6esn`..]).usn2? Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0) Unwind {usn1} In 2.12 In 1000 As @usn6 Delete `1esn`[{usn1}..``][7..$#usn8],`3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) In `8esn`(Distinct $1000[`2esn`..`5esn`][1e1..1.e1],0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12) In All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`4esn`} Starts With $usn2 Starts With $1000)"),
    octest_legacy:ct_string("Start `5esn`=Relationship:usn2({`5esn`})  Create Unique (({`1esn`})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[`3esn`:#usn7]-(:#usn8:#usn8{_usn4})) Create Unique Shortestpath(((({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[`8esn`*..{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]}]-(#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1})))) Union All With Distinct *,Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] As usn1,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]|123456789 Ends With 12.e12 Ends With $`7esn`) Is Not Null As `6esn` Order By [@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null] Is Null Is Null Ascending,0xabc[{12}..] Desc,`7esn`[$12..][$`8esn`..] Descending Skip {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Limit Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End Ends With Case When 0x0 Ends With $12 Then 07 =~01 End Load Csv From `3esn`[{0}][usn1] As #usn7 Fieldterminator \"d_str\" Union Load Csv From Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..] As usn2  Merge ``=Allshortestpaths((`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) On Create Set #usn8+=#usn7[010..False] On Create Set [2.12 Ends With $_usn3 Ends With `3esn`,#usn7,01[{@usn5}]].`2esn`! =usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..]"),
    octest_legacy:ct_string("Remove Reduce(usn2=$`8esn`[..{`2esn`}],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|`5esn` Is Null).@usn5 Return Distinct 1e1 Contains Count ( * ),$`` Ends With 0.0 Ends With {1000},.e1 In 0 As `7esn` Skip 07[..True][..9e12] Limit Case When _usn4 Is Null Is Null Then Null[$#usn7] When $`2esn` Is Null Is Null Then $`3esn` =~{#usn8} End[(@usn5 :usn1)-[`2esn`:_usn4|:usn2]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})..Reduce(@usn5=`3esn`[{usn1}],`8esn` In 01[2.12..`8esn`]|`5esn` Starts With `3esn`)][Shortestpath((:``:#usn8{``:1.0[0e0..0.e0]}))..None(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])] Unwind [.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) As `2esn` Union All With Distinct *,07 Is Not Null Is Not Null Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc Limit Case `7esn`[9e0..] When 1.0 =~'s_str' =~{`2esn`} Then 0xabc[01..{999}][{7}..{`7esn`}] When 0X7[$999][_usn4] Then 010 In Count(*) Else usn2[{7}] End =~Reduce(@usn6=usn2[9e12],#usn8 In 7[..999][..{#usn8}]|{999} Is Null Is Null) =~(:`1esn`{_usn4:$@usn6 Ends With $_usn4 Ends With 0.12})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})-[`7esn` *..0x0]-(`2esn` :_usn4) Where Count ( * ) Contains {`1esn`} Contains 07 Optional Match usn2=Allshortestpaths((usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)),_usn3=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Scan `3esn`:`2esn` Union Match (`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}) Using Scan @usn5:@usn6 Where {`3esn`} Is Not Null Is Not Null"),
    octest_legacy:ct_string("Merge `7esn`=(`1esn` )-[`1esn`?:`8esn`]->(#usn7 :`6esn`$1000)<-[?:`2esn` *00{@usn6:usn1[`5esn`..$7],`3esn`:{`7esn`}[..$@usn5][..$#usn8]}]-(`` {`1esn`:{@usn6}[{999}..][00..]}) On Create Set #usn7 =Extract(`8esn` In 01[2.12..`8esn`] Where True[00][0Xa]) In Allshortestpaths((((`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[usn2?:#usn7]-(@usn6 :@usn5{usn2:$`5esn`[..$`5esn`][..$12]})<-[`1esn`?:`1esn` *..01{`2esn`:$_usn4 Is Not Null Is Not Null}]->(:`5esn`{`2esn`:`4esn`[1.0]})))) In Reduce(`7esn`=`3esn`[{`2esn`}],#usn7 In `2esn`[..$#usn8][..Count(*)]|Count ( * ) Contains {`1esn`} Contains 07),_usn3 =$#usn7 Is Null Union Optional Match Shortestpath((((:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[? *..07]-(`4esn` {``:{#usn8}[010],usn1:{``} Starts With $`2esn` Starts With `1esn`})))) Using Join On _usn4 Using Index _usn4:`5esn`(`6esn`) Where $`6esn` Ends With Count(*) With  *,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6],_usn3 Ends With 7 Ends With `1esn` As _usn4 Where 0.12 Contains 0X0123456789ABCDEF Contains .e0 With Distinct [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]) Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc Where $usn2[{@usn5}]"),
    octest_legacy:ct_string("Delete 999[..$`5esn`][..12.0],Case 0x0[`4esn`..'s_str'] When 0.e0 Ends With $#usn7 Ends With $7 Then 0X7[..2.12] When {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Then 0.e0[123.654][01] Else {_usn3}[..$12][..0.12] End[[`1esn`[..{@usn6}][..$123456789]]..] Load Csv With Headers From 0[{usn2}..][$`6esn`..] As #usn8 Fieldterminator \"d_str\" Union All Merge (((:`2esn`:usn1{@usn5:`5esn`[.e0..][07..],`4esn`:`8esn` =~0xabc =~010})-[`7esn`?*..]->(#usn7 {`5esn`:00 Starts With 0xabc,`6esn`:0Xa =~Null =~$``})-[usn2?]-(:@usn5))) Foreach(`2esn` In 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3]| Create (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})) Remove (_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[usn2?:#usn7]-({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}).#usn7,Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|7[True..][2.12..]).@usn5 Union Start ``=Node:#usn8(`8esn`={`6esn`}) ,_usn3=Node:@usn6({_usn4}) Create Unique `8esn`=Allshortestpaths((((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`})))),_usn4=(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})<-[``?]->(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})"),
    octest_legacy:ct_string("Foreach(`8esn` In True Contains {0} Contains 7| Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Delete Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null) Union Merge `8esn`=Allshortestpaths(((`` {usn2:0X0123456789ABCDEF[123456789]})-[?{`8esn`:{7} Is Null}]->(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))) On Match Set Case {999} Is Null Is Null When 12.0 =~1.0 =~9e12 Then $usn1 In {999} In $#usn7 Else `1esn` Ends With {_usn3} Ends With `2esn` End.usn2 ={@usn5:$`8esn` =~{1000}} Contains [1000 In {`8esn`} In 01,`` Ends With 0Xa Ends With `2esn`] Contains Reduce(#usn7={12} Is Not Null,#usn7 In {``} Is Not Null|usn2 Is Null),[00[{`8esn`}..][{`8esn`}..],.e12[@usn5..#usn7][010..{usn1}],usn1 Ends With $@usn6 Ends With `3esn`].usn2? =$`7esn` Is Not Null On Match Set `1esn` =(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case When `6esn`[12..$usn2][{#usn8}..{usn2}] Then {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] When .e12[@usn5..#usn7][010..{usn1}] Then 0.12 =~$0 =~$0 End"),
    octest_legacy:ct_string("Create Unique `6esn`=((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})),@usn6=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Start `6esn`=Relationship:usn2(#usn8=\"d_str\") ,`7esn`=Rel:#usn8({_usn3}) Unwind Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8)[{`7esn`:$`6esn`[010..]}..] As `2esn` Union All Load Csv With Headers From {`3esn`}[..07][..{`5esn`}] As `4esn` Fieldterminator 's_str' Merge _usn4=Allshortestpaths((#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})) With  `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`8esn`[$#usn7..123456789],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null Descending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,1e1 In \"d_str\" In `7esn` Descending Skip [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] Union All With  [9e1[..$`2esn`]][{`8esn`:False =~$7 =~2.12,`3esn`:Count ( * ) =~$usn2 =~$usn2}][Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End] As `8esn`,`7esn` Is Null As `7esn` Skip $`4esn`[010..`4esn`] Where {1000} =~0 =~123.654"),
    octest_legacy:ct_string("Remove None(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null).usn2!,Single(`2esn` In `1esn` =~\"d_str\" Where 0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12).usn1 Union Return Distinct [`5esn`[{`4esn`}..`2esn`],Null Ends With {`5esn`} Ends With 0.e0,010[#usn7..True]] Contains [`3esn` In {7} Is Null Where {usn2}[.e0..$999]|Count ( * ) Contains `8esn` Contains .e1] Contains Reduce(``=@usn5 In {`7esn`} In `2esn`,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{_usn4}[1000..{@usn5}]) As `3esn`,{7}[$7..$``][{``}..{7}] As usn2,{1000}[{_usn3}..] As #usn7 Skip Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] Limit $`6esn` Ends With Count(*) Merge _usn3=(#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})-[#usn7:@usn5 *0X7..]->(@usn5 :usn1{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}) Remove None(_usn3 In {`3esn`}[`2esn`] Where {`8esn`} Ends With `6esn`).`5esn`!,None(#usn7 In {``} Is Not Null Where `5esn`[.e0..][07..]).usn2 Union Create Unique (@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}}),(((:`6esn`{_usn4:'s_str' Ends With 7 Ends With {_usn4},@usn6:$`2esn`})-[:@usn6|`6esn` *1000..00]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2))) Create Unique (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}) Create @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7})"),
    octest_legacy:ct_string("Start `7esn`=Node:_usn4(@usn5={_usn3}) ,_usn4=Relationship(,) Unwind 9e0 Is Not Null Is Not Null As `2esn` Foreach(`3esn` In $`7esn` Is Null Is Null| Create Unique usn2=Allshortestpaths((:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]})),((({@usn5:{usn2}[.e0..$999]})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1}))) Detach Delete Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8)[{`7esn`:$`6esn`[010..]}..],01 Ends With 999 Ends With {`7esn`},All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)]) Union Load Csv From 0X7[..2.12] As ``  Union With  $@usn5[010..$#usn8][12..$`4esn`] As `8esn` Order By {`2esn`} Ends With {`7esn`} Asc,[`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999}] Ends With usn1(Distinct 1000 In {`8esn`} In 01,{_usn3}[..\"d_str\"][..`5esn`]) Ends With Reduce(_usn4=1000[Null..{123456789}],`5esn` In $999[0.0..]|9e1 In $`3esn` In $@usn6) Asc Skip 00[`2esn`..12][123456789..0.e0] Where @usn5 In $7 Merge Allshortestpaths((`2esn` :`8esn`:`7esn`{`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})) Unwind $#usn8 Contains $`1esn` Contains {`6esn`} As #usn7"),
    octest_legacy:ct_string("Create Unique (#usn8 {#usn7:`4esn` Ends With 07 Ends With {`3esn`},`3esn`:{0} In $_usn3})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}),`1esn`=Allshortestpaths((((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null})))) With Distinct 07[$#usn7..{1000}] Order By {#usn7}[..9e12][..`8esn`] Ascending,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) Desc,@usn6 Is Null Is Null Descending Limit `3esn` In $0 In `1esn` Where {`4esn`} =~9e0 =~{12} Unwind $`3esn` Is Not Null Is Not Null As `7esn` Union All Foreach(`4esn` In 1000[0X7..2.12]| Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4?) Foreach(`3esn` In 0.0[Null][$`2esn`]| Remove (:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:_usn3|_usn3{`3esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],#usn8:False Starts With {`5esn`}}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)._usn3,[@usn6[$`3esn`..{`3esn`}]].#usn7!,Reduce(@usn5='s_str' Ends With 7 Ends With {_usn4},`8esn` In 01[2.12..`8esn`]|{999}).#usn8!) Optional Match _usn3=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))),(({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})) Using Scan _usn4:usn1 Where 12e12 Ends With {usn1} Union All Match #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}),Allshortestpaths((_usn4 :usn1)<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) Match `6esn`=((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})) Using Index usn2:@usn6(`5esn`) Using Scan `2esn`:_usn4 Where $@usn5 Contains 0xabc Contains {#usn7} Detach Delete {`3esn`}[`2esn`],{12} Ends With 0Xa Ends With $`6esn`,False[$usn1.._usn4][_usn4..{`3esn`}]"),
    octest_legacy:ct_string("Foreach(`7esn` In Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..]| Remove _usn3(0.12 =~$0 =~$0).`3esn`) Union All With Distinct *,`6esn` Is Not Null Is Not Null As `3esn` Order By $`5esn` Starts With $0 Starts With {0} Asc Foreach(#usn7 In [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..]| Load Csv From @usn6 Starts With `6esn` Starts With $`1esn` As _usn3  Return Allshortestpaths(((`8esn` ))) Ends With (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}),$_usn3['s_str'][07] As @usn5 Skip $_usn4[0e0..][False..]) Union All Create Unique @usn6=((`` :`7esn`:_usn3)),((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->()) Delete Count(*) Starts With 123456789 Starts With $1000,`7esn` Contains $@usn5 Contains {`6esn`},False Is Null Is Null"),
    octest_legacy:ct_string("Remove {_usn3:`4esn` Ends With 07 Ends With {`3esn`}}.`1esn` Union All Foreach(`7esn` In $0[12.e12..]| Load Csv With Headers From 's_str' In 00 As @usn6 Fieldterminator 's_str' Optional Match (((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[#usn7:@usn5 *0X7..]->(`2esn` ))),Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where `7esn` In {123456789} In `1esn`)"),
    octest_legacy:ct_string("Optional Match `2esn`=((#usn7 :``:#usn8{`2esn`})) Using Join On @usn6 Using Scan `2esn`:`6esn` Unwind {`3esn`}[..$`3esn`][..12.e12] As _usn3"),
    octest_legacy:ct_string("Remove {`4esn`:`2esn` Is Null,@usn5:00 Starts With 0xabc}.`6esn`,usn1:`3esn`:@usn5 Union Remove None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`).``? Merge `5esn`=Shortestpath((((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})))) Create Shortestpath(((`7esn` {`4esn`:{usn1} Ends With $0})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})))"),
    octest_legacy:ct_string("Create Unique (((`6esn` )-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`5esn` :_usn4{7})<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1}))),(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})"),
    octest_legacy:ct_string("Unwind \"d_str\" =~1000 =~{`1esn`} As `` Load Csv From [#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] Contains Case {0}[12.0..0Xa][$`5esn`..{_usn3}] When .e1 Ends With 1e1 Ends With @usn5 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] Else 123.654[...e0] End As #usn8  Union Create Unique ((:_usn4{usn2:0X7 =~9e1})<-[? *..0x0]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),`1esn`=(`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}) Delete 0.0 =~999,0e0[07],$1000 Is Not Null With  *,0.0 =~999 As `4esn` Skip `3esn`[..$12][..{`7esn`}] Limit {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]) Where `6esn`[..$@usn6] Union All Create `1esn`=(((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}))),((@usn5 :usn1)<-[`5esn`? *7..12{`5esn`:{999},_usn3:$`5esn`[2.12..]}]->(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})-[_usn4?:_usn4|:usn2 *..999]-({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})) Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Join On `8esn`,@usn5 Using Index `3esn`:_usn3(`6esn`)"),
    octest_legacy:ct_string("With Distinct 123.654 Is Not Null As `1esn`,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) As `4esn` Order By 0.0 =~999 Asc,1e1 In \"d_str\" In `7esn` Descending Create `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))),#usn8=(:`2esn`:usn1)-[`1esn`:@usn6|`6esn`*..{`7esn`:7[{0}..{_usn4}]}]->(`8esn` {_usn4:`4esn`[1.0],`5esn`:0e0 Ends With 1.e1 Ends With $`4esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12}) With Distinct *,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Order By {`3esn`} In $@usn5 In _usn4 Asc Skip $0[..9e1] Limit $usn1 =~`` Where 9e0[..999] Union Foreach(@usn6 In usn2 Is Null| Remove Reduce(#usn8=$999 Is Not Null,`` In `` Is Not Null Is Not Null|@usn5 In $7)._usn4?,[0.0[Null][$`2esn`],.e12 Ends With _usn4,01 Is Null].`6esn`,Reduce(#usn7=1.0 Contains $_usn4,#usn7 In {``} Is Not Null|$`4esn`[9e12..123.654]).`3esn`?) Create Unique `3esn`=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`) Unwind {``} Ends With `7esn` Ends With 0.0 As `6esn` Union All Load Csv From $#usn7[#usn7..] As `1esn`  Remove Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,[#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']|`2esn` Is Null].usn1,None(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\")._usn3?"),
    octest_legacy:ct_string("Return Distinct $@usn5,{`5esn`} Starts With @usn5 Starts With `7esn`,$1000 =~$`2esn` As `6esn` Skip 9e12[{123456789}..#usn8][{_usn3}..{#usn7}] Limit 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] Remove (`1esn` :_usn3:_usn3)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null}).`3esn`!,Case When {7} Is Null Then .e1[{`7esn`}..{_usn4}] When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` End.`6esn`? Union Start _usn4=Node( {#usn7})  Unwind {`8esn`} Ends With `6esn` As @usn6 Create Unique _usn3=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})),usn2=({@usn5:usn1 Is Not Null})<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})"),
    octest_legacy:ct_string("With Distinct *,{#usn8}[1.e1...e12] As `5esn` Order By 0e0[..010] Descending,_usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)[Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End..] Descending Limit 1.0 =~'s_str' =~{`2esn`} Where 1.0 =~7 =~{usn2}"),
    octest_legacy:ct_string("Unwind `2esn` Starts With 07 As #usn7 Start @usn5=Rel:#usn8({_usn3}) Where $`6esn` Is Null Remove (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}).`7esn`?,(_usn3 {`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[@usn6?:`5esn`]-(`3esn` :usn2).@usn5?,Reduce(#usn7=`7esn`[..2.12][..00],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|1000 =~@usn6 =~0x0).`4esn`! Union Return $`1esn` Ends With 9e1 Ends With $123456789 As `4esn`,False Ends With `3esn`,9e1[2.12..{#usn8}] Order By 0Xa[7..2.12][`3esn`.._usn3] Desc,7 Contains @usn6 Desc,`2esn` Starts With $_usn4 Asc Skip {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Unwind $0[$`1esn`..07] As usn2"),
    octest_legacy:ct_string("Remove {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null}.`4esn`?,usn1:#usn7,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|$_usn3[..1000]).`` Union All Detach Delete Any(`5esn` In \"d_str\" Is Null Is Null Where usn1 Ends With $@usn6 Ends With `3esn`) In (:`3esn`:@usn5{`5esn`:`3esn`[..$12][..{`7esn`}]})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]}) Union Delete \"d_str\" =~1000 =~{`1esn`} Match usn2=Shortestpath(((_usn4 :``:#usn8)-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8))) Using Index `8esn`:@usn6(`5esn`)"),
    octest_legacy:ct_string("Delete Reduce(`6esn`=0X7[$999][_usn4],`8esn` In 01[2.12..`8esn`]|{1000} =~0 =~123.654) Is Null Is Null,Count ( * ) Is Null Load Csv From 0.0 Is Not Null Is Not Null As usn1  Create Unique Allshortestpaths((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[#usn8]-(:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})),Allshortestpaths((((@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:_usn3|_usn3 *01234567..0Xa{@usn5:123.654[True..$#usn8][0.12..Count(*)]}]-(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12}))))"),
    octest_legacy:ct_string("Return Distinct *,$`3esn` In Null As `3esn` Limit `1esn`(Distinct $@usn5[..12e12][..$123456789],{#usn7} Is Not Null Is Not Null)[{`7esn`:\"d_str\" Starts With $123456789}..] Remove Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X0123456789ABCDEF =~1e1 =~{`4esn`}|1.0 Contains $_usn4).`5esn`?,Reduce(`5esn`=12[1.e1..{_usn3}][1.e1..1.0],#usn7 In `2esn`[..$#usn8][..Count(*)]|12.e12[7..$`6esn`]).`5esn`!,`4esn`:`6esn`"),
    octest_legacy:ct_string("With  *,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,Shortestpath((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]}))[None(#usn7 In `2esn`[..$#usn8][..Count(*)])][(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})] Where {usn1} Ends With $0 Foreach(`7esn` In {`5esn`} =~`4esn` =~{_usn4}| Load Csv With Headers From {`6esn`}[..$@usn6][..`7esn`] As @usn6 Fieldterminator \"d_str\" Start usn2=Rel:usn2({`4esn`}) ,_usn4=Node:usn2(`8esn`='s_str')Where 123.654[...e0])"),
    octest_legacy:ct_string("Merge _usn3=((@usn5 {usn2:0.e0[123.654][01]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})) On Create Set `5esn`+=999 In {`3esn`} In usn2 Unwind Shortestpath((($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})))[Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where usn1 Ends With $@usn6 Ends With `3esn`)..] As `1esn`"),
    octest_legacy:ct_string("Merge Allshortestpaths((({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}))) On Create Set Single(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0Xa Starts With {`6esn`} Starts With $usn1).`2esn`! =123456789[$1000..$#usn7],{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]}.`1esn` =0.e0 Contains 9e1 Contains {`7esn`},(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`6esn` :_usn4)-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(usn2 {`6esn`:{#usn8}[.._usn4][..$`3esn`],`7esn`:01 =~{_usn3} =~`3esn`}).`1esn`! =None(`2esn` In `1esn` =~\"d_str\" Where .e12 Is Not Null Is Not Null)[Reduce(@usn5=#usn7 Contains _usn3 Contains {`3esn`},@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$@usn5 Starts With {0} Starts With 12)] Remove [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|0e0[..010]].`6esn`! Remove [`5esn` In $999[0.0..] Where $_usn3[.e0..$usn2]|Count(*)[..usn2][..usn2]].@usn6,Any(`5esn` In \"d_str\" Is Null Is Null Where ``[$`2esn`])._usn3?,None(_usn3 In {`3esn`}[`2esn`]).`6esn`?"),
    octest_legacy:ct_string("Return Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Create Unique ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})))) Union All Foreach(#usn8 In .e12 Ends With $`2esn` Ends With {``}| Start `3esn`=Node:@usn5({0}) ,`2esn`=Relationship:`3esn`(\"d_str\")) Start @usn6=Rel:``(_usn3='s_str') ,``=Node:_usn4(usn1={12}) Merge Allshortestpaths((_usn4 )<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})) Union All Start usn1=Relationship:`3esn`(`6esn`='s_str') ,`1esn`=Rel:``(`8esn`='s_str')Where {@usn6}[{999}..][00..]"),
    octest_legacy:ct_string("Start ``=Rel:#usn8(`5esn`=\"d_str\") ,@usn6=Rel:`4esn`(\"d_str\") Remove Single(`3esn` In {7} Is Null Where {_usn3}[12.e12]).`2esn`,None(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\")._usn3?,Reduce(`1esn`=`5esn`[.e0..][07..],#usn8 In {`5esn`}[.e1..``]|_usn4 Is Null Is Null).`2esn` Unwind Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}) As `` Union Foreach(`4esn` In $12 Starts With {`1esn`} Starts With Null| Start `7esn`=Rel( {``}) Where `1esn` =~0 =~$#usn7 Delete Extract(#usn7 In {``} Is Not Null Where 123456789[0xabc..'s_str'][``..`1esn`])[Reduce(usn1=False,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$_usn4 Starts With 1e1)]) Union All Match Allshortestpaths((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))),usn2=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Using Scan `3esn`:`2esn` Using Scan `6esn`:`2esn`"),
    octest_legacy:ct_string("Load Csv From Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains Extract(`5esn` In \"d_str\" Is Null Is Null Where Null Ends With `2esn` Ends With $usn1|$#usn7[@usn5..{1000}][1.e1..7]) As `4esn` Fieldterminator 's_str' Union Remove Case When `2esn`[..$#usn8][..Count(*)] Then False =~1e1 =~0.e0 When {`4esn`} Starts With $usn2 Starts With $1000 Then {``} Is Not Null End.#usn7?,Extract(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null|{``} Is Not Null).usn1!,All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {#usn8}[010]).usn1! Load Csv From Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[({#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)..][Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01}))))..] As @usn5 "),
    octest_legacy:ct_string("Unwind $#usn7 Contains 0x0 Contains 1000 As _usn3 Foreach(_usn3 In 1e1 In 123.654 In `3esn`| Remove Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null|{123456789}[9e12][{0}]).``!,Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}).@usn5) Union All Foreach(_usn4 In $`2esn` Ends With 1000 Ends With `6esn`| Detach Delete (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null,$@usn6 Contains 07,Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] Detach Delete @usn6 =~{7} =~{@usn5}) Remove ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4? Union Remove Allshortestpaths((:@usn5{_usn3:07 =~01}))._usn4 Foreach(`` In .e0[..0X0123456789ABCDEF][...e12]| Return *,12.0 Ends With True Skip {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] Return Distinct *,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` As `7esn` Limit 9e12[`6esn`..12.0])"),
    octest_legacy:ct_string("Create Unique `7esn`=Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})))),`6esn`=((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`7esn`? *7..12]->({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})) With Distinct *,{#usn8}[1.e1...e12] As `5esn` Order By 0e0[..010] Descending,_usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)[Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End..] Descending Limit 1.0 =~'s_str' =~{`2esn`} Where 1.0 =~7 =~{usn2} Union Optional Match `7esn`=Shortestpath(((:`5esn`{``:1.0[0e0..0.e0]})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`))) Using Index `7esn`:usn2(`6esn`) With  *,`6esn`[2.12..01][{``}..False] As @usn5,Reduce(`5esn`=$`5esn`[{`3esn`}],`3esn` In {7} Is Null|`6esn`[12..$usn2][{#usn8}..{usn2}]) In @usn5(Distinct _usn4 Starts With $_usn4 Starts With 12.e12) In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Count ( * ) Ends With 12.0) Limit {_usn3} Is Null Is Null Where {`6esn`}[..$@usn6][..`7esn`]"),
    octest_legacy:ct_string("Start `6esn`=Relationship:usn2(#usn8=\"d_str\") ,@usn6=Node:`7esn`(`3esn`={``}) Merge `8esn`=Allshortestpaths(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) Union All Foreach(_usn4 In {`2esn`} Is Not Null| Match usn2=(`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Using Join On #usn7,_usn4 Using Join On `8esn`,@usn5 Where `3esn`[{`2esn`}]) Union Create Allshortestpaths((`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})-[usn1:_usn3|_usn3 *..999{`2esn`:'s_str'[00][{`5esn`}],@usn6:999 Is Not Null Is Not Null}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]}))"),
    octest_legacy:ct_string("Create Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`})) Union Merge ((`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})) On Match Set `2esn`+=Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null}"),
    octest_legacy:ct_string("Create Unique `6esn`=Allshortestpaths(((`6esn` :`5esn`{usn1:{`6esn`}}))) Union Unwind $_usn3 Ends With 0x0 Ends With 12.0 As #usn7 Union Remove `4esn`(Distinct usn1 Is Not Null).@usn5,Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where False Starts With {`5esn`}).#usn7,Reduce(`8esn`=123456789 Ends With 01234567 Ends With 1.e1,_usn3 In {`3esn`}[`2esn`]|0X7 =~9e1)._usn3! Foreach(`2esn` In Null Is Not Null Is Not Null| With  {``} Is Not Null As #usn7,{#usn7}[`2esn`..],Count ( * ) Contains {`1esn`} Contains 07 Order By `8esn` Is Not Null Is Not Null Desc Limit $123456789[_usn3][{#usn7}] Where Count ( * ) Ends With 12.0)"),
    octest_legacy:ct_string("Load Csv From Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}) As `4esn` Fieldterminator \"d_str\" Optional Match @usn6=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Merge @usn5=Shortestpath(((`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8}))) Union All Merge Shortestpath((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2)) Union All Create Unique `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),`2esn`=((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})) Start _usn3=Node:@usn6({#usn7}) Where `5esn` Starts With 010 Starts With 0.0"),
    octest_legacy:ct_string("Create Unique @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) Merge `2esn`=Shortestpath((((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})))) On Match Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn` On Match Set @usn5 =Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null Union All Create Unique (`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})<-[`4esn`?{`3esn`:\"d_str\" Is Null Is Null,usn1:0X0123456789ABCDEF[123456789]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]}),#usn7=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6}))))"),
    octest_legacy:ct_string("Merge `2esn`=(`2esn` :`3esn`:@usn5)<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}) On Create Set @usn5+=[$`5esn`[..$`5esn`][..$12],01[2.12..`8esn`],_usn3 Contains $123456789 Contains ``],None(`8esn` In 01[2.12..`8esn`] Where Count ( * ) Ends With $@usn5).`4esn` =Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] On Match Set `1esn`+=usn1 Is Null Is Null,Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]).`5esn` =0X0123456789ABCDEF Is Null Is Null Union Load Csv With Headers From usn2[$7..$123456789][$@usn6..$7] As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(#usn8 In $`7esn` Is Not Null| Create #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Create `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))) Delete Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})],Case $1000[999] When `4esn`[`5esn`..12][@usn6..False] Then {0} Ends With $_usn3 Ends With $`7esn` When $usn1 In {999} In $#usn7 Then Count ( * )[True..][{#usn7}..] End Ends With {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null},`7esn` In 00 Start _usn4=Relationship:`1esn`({12}) ,@usn6=Relationship:`8esn`({`3esn`}) Union All Start #usn7=Node:_usn3({@usn5}) ,``=Node:`2esn`(usn2='s_str')"),
    octest_legacy:ct_string("Create Unique (@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(@usn6 {`3esn`:{``} Is Not Null})<-[@usn5 *0X0123456789ABCDEF]->(`6esn` :`3esn`:@usn5{`3esn`:0.e0 In $#usn7 In $_usn3,_usn4:{`8esn`} Ends With `6esn`}),Shortestpath(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07}))) Union Start #usn7=Node:usn2({12}) Where $`4esn` In Null In 0xabc"),
    octest_legacy:ct_string("Remove (@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[@usn5]->(:_usn4{usn2:0X0123456789ABCDEF[123456789]})<-[#usn8?:usn2|`` *0X7..{`1esn`}]->(`5esn` :_usn4{7}).usn2 Union Unwind ()-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[@usn6?$0]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})[{#usn8:_usn4 Starts With $_usn4 Starts With 12.e12}..Allshortestpaths(((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})))][(usn2 :usn2)<-[@usn5? *..01]-(`8esn` :@usn6:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})..Case When #usn8 Is Not Null Is Not Null Then `3esn`[{usn1}] Else 0.12 Starts With $`5esn` Starts With 12 End] As #usn7 Union All Create Unique `2esn`=({#usn7:2.12 Contains usn2 Contains True})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((`` :usn2)<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0})-[`2esn`?:usn2|``{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}]-({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}))) Create Unique ((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) Remove (:usn2{`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})-[@usn6?$0]-(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}).usn2!,[`3esn` In {7} Is Null Where 0.e0[123.654][01]].`5esn`! Union All Unwind $#usn8[9e12..][.e1..] As usn2 Create (#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}),Allshortestpaths((`` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})) Return exists($12[$1000..123456789],123456789[0xabc..'s_str'][``..`1esn`])[{`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}..[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where `8esn` Ends With 999 Ends With .e12|0X0123456789ABCDEF[123456789]]],Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 00[`2esn`..12][123456789..0.e0]|0e0 In @usn5) Ends With 's_str' Ends With _usn3(Distinct $`7esn` =~{`8esn`} =~$usn1,$0[..9e1]) As usn1 Order By $_usn4[Count ( * )..] Descending,$`1esn` Starts With {`8esn`} Descending Limit Case When _usn4 Is Null Is Null Then Null[$#usn7] When $`2esn` Is Null Is Null Then $`3esn` =~{#usn8} End[(@usn5 :usn1)-[`2esn`:_usn4|:usn2]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})..Reduce(@usn5=`3esn`[{usn1}],`8esn` In 01[2.12..`8esn`]|`5esn` Starts With `3esn`)][Shortestpath((:``:#usn8{``:1.0[0e0..0.e0]}))..None(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])]"),
    octest_legacy:ct_string("Unwind Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) As `6esn`"),
    octest_legacy:ct_string("Create `6esn`=(usn2 {``:01[{@usn5}]})<-[{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`2esn`:usn1{`8esn`:9e12[`6esn`..12.0],``:01[{@usn5}]})<-[`8esn`:`2esn` *..07]->({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]}),Allshortestpaths((((`4esn` )<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`8esn`?]->(`1esn` :#usn8:#usn8))))"),
    octest_legacy:ct_string("Start `3esn`=Relationship:``(usn2={999}) ,usn2=Node:`6esn`(usn2={`8esn`}) Union Remove (_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})<-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :`3esn`:@usn5)<-[? *..999]-(#usn8 :`5esn`{#usn8:0xabc[.e0]}).`4esn`! Create Unique `5esn`=(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[`5esn`?:`5esn` *1000..00]->({`1esn`:`3esn`[{`2esn`}]})"),
    octest_legacy:ct_string("Load Csv With Headers From None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As #usn8 "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0.e0 In $#usn7 In $_usn3 As #usn8 "),
    octest_legacy:ct_string("Load Csv From $`3esn` In $`6esn` In $`` As `4esn`  Optional Match `2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}),`6esn`=(((usn2 :``:#usn8)-[ *123456789..{`4esn`:0Xa[2.12],#usn7:0.e0 In $#usn7 In $_usn3}]-(@usn6 :`3esn`:@usn5)-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}))) Using Index `5esn`:`1esn`(usn1) Where 07[..True][..9e12] Foreach(@usn5 In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) In Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12)| Start _usn4=Relationship(,) Where @usn5 In {`7esn`} In `2esn` With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..]) Union Start `7esn`=Node:`7esn`(`3esn`={``})  Union All Create Unique (({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Create Unique @usn5=Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`}))"),
    octest_legacy:ct_string("Merge `3esn`=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) With  $`3esn`[0.12..`8esn`][$#usn7..`5esn`],Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]) =~Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]) =~`1esn`($1000 Is Null) As @usn6 Order By {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Ascending,$`3esn` Is Not Null Desc Detach Delete `6esn`({usn1} Ends With $0) Is Not Null Union Return *,[0x0[{`7esn`}..][$usn2..],{`4esn`} =~{7} =~{`7esn`},usn1 In 7 In {123456789}] Is Null Is Null,True In 0e0 As @usn6 Merge Allshortestpaths(((`` {usn2:0X0123456789ABCDEF[123456789]})-[?{`8esn`:{7} Is Null}]->(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))) On Match Set _usn4+=.e1 Ends With 1e1 Ends With @usn5,`1esn` =$@usn6[12.0..][#usn7..] On Match Set ``(Distinct 0.12 =~`5esn` =~`5esn`,Null[``]).`1esn`! =12e12 Ends With {usn1},@usn5 =7 Ends With $`4esn`,_usn4 =Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] Start @usn5=Node:#usn8(#usn7=\"d_str\") ,#usn8=Rel( {#usn7})"),
    octest_legacy:ct_string("Optional Match _usn4=(((#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}))),(:`3esn`:@usn5{#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[`5esn`?:`5esn` *1000..00]->({`1esn`:`3esn`[{`2esn`}]}) Using Join On `6esn` Using Index `4esn`:`3esn`(#usn8)"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 0[..usn2][..{@usn5}] As `3esn` Fieldterminator 's_str' Return 01234567 Ends With .e12 Ends With $#usn7,12[..$`4esn`] Order By $`7esn` Is Null Is Null Descending,Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})] Descending,{`6esn`} In $#usn8 In \"d_str\" Asc"),
    octest_legacy:ct_string("Start @usn5=Relationship(*) ,_usn3=Node:`5esn`(`7esn`='s_str') Remove Reduce(@usn5=$12[$1000..123456789],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|`4esn` Is Not Null Is Not Null).`5esn`,Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 123456789 Ends With 12.e12 Ends With $`7esn`).#usn7?,[`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where #usn8 Is Not Null|{123456789}[0xabc..]]._usn4? Match `1esn`=(_usn3 :usn2{#usn7:{999} Starts With {0}}) Using Join On @usn5,`8esn` Where False Starts With {`5esn`} Union All Return *,`4esn`[`5esn`..12][@usn6..False],None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn` Order By {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] Ascending,.e1 =~{@usn6} =~Null Asc,(:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Starts With Case `8esn` Contains $usn1 Contains $12 When 12.e12[7..$`6esn`] Then {12} Contains {123456789} Contains `4esn` When $`1esn`[1.0..][_usn3..] Then `7esn`[$0][9e12] End Desc Skip 123.654[`3esn`..] Limit `7esn`[$12..][$`8esn`..] Load Csv From 123.654[...e0] As usn2 "),
    octest_legacy:ct_string("Start #usn7=Relationship:usn2(`8esn`={`8esn`}) Where Count(*) In $12 Union Unwind {`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2]) As `6esn` With Distinct _usn3 Contains Count(*) Contains 12e12 As `4esn`,123456789[{123456789}..'s_str'] As `5esn`,1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Order By None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] Ascending,{usn2}[$`3esn`..][{#usn7}..] Ascending Limit {``} Is Null Where 01234567 Is Null Is Null Load Csv With Headers From Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) As _usn4 Fieldterminator \"d_str\" Union Foreach(usn1 In {`3esn`}[..07][..{`5esn`}]| Create Unique `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),#usn7=Shortestpath((`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})))"),
    octest_legacy:ct_string("Unwind {`4esn`} In 1.0 As @usn6 Union Load Csv With Headers From `5esn` Starts With 010 Starts With 0.0 As `2esn` "),
    octest_legacy:ct_string("Load Csv From None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As `2esn`  Union All Start usn2=Node:_usn4(``={#usn7})  Return Distinct $@usn5 Is Not Null Is Not Null As `5esn`,0e0[07] As `5esn` Order By $#usn7 Starts With {7} Starts With 1.0 Desc,{12} Is Not Null Ascending Limit {``} Ends With `7esn` Ends With 0.0 Union Detach Delete ``[$`2esn`],[usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null),0.12[{#usn7}..] Merge `2esn`=Allshortestpaths((:`4esn`{``:2.12 Is Not Null Is Not Null})) On Match Set #usn8 =$#usn8"),
    octest_legacy:ct_string("Create Unique `2esn`=Allshortestpaths(((#usn7 {``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[#usn8?:#usn7{`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000}]->(:@usn6:#usn8{`4esn`:$`8esn`[..00]}))) Unwind @usn6 Contains Null Contains $`7esn` As `4esn` Union All Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF]"),
    octest_legacy:ct_string("Create Unique @usn5=Allshortestpaths(({`1esn`:$`8esn`[1000..0Xa]})) Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Union All With Distinct *,1e1 Contains 0e0 Skip @usn6 Contains Null Contains $`7esn` Limit $0 Where 0Xa Starts With {`6esn`} Starts With $usn1 Merge Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) On Match Set @usn5+=12 Ends With $usn2,@usn6 =Count ( * ) =~$usn2 =~$usn2,`` =12.0 =~1.0 =~9e12 Match #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Using Join On _usn4"),
    octest_legacy:ct_string("Return All(`5esn` In $999[0.0..] Where {@usn6} Ends With 's_str' Ends With 12.0) In (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) As usn1 Limit True[{`7esn`}..]"),
    octest_legacy:ct_string("Merge `7esn`=({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) On Create Set (:usn2{`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})._usn4? =All(#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']) Starts With 123456789"),
    octest_legacy:ct_string("Unwind $`6esn`[$`6esn`..`8esn`] As @usn6 Union All Remove Extract(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01|1.0[0e0..0.e0])._usn4!,All(#usn7 In {``} Is Not Null Where usn1[9e12..][$7..]).``!,({_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[`1esn`:@usn6|`6esn`*..{`7esn`:7[{0}..{_usn4}]}]->(`8esn` {_usn4:`4esn`[1.0],`5esn`:0e0 Ends With 1.e1 Ends With $`4esn`}).@usn6! Union Remove @usn6:`5esn`,All(`3esn` In {7} Is Null Where Count ( * ) Ends With $@usn5).`6esn`? Load Csv From `5esn`(Distinct {_usn4} Ends With `6esn`,$`4esn` In Null In 0xabc) Ends With Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Ends With All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) As #usn7 Fieldterminator 's_str' Remove Extract(`5esn` In \"d_str\" Is Null Is Null Where 9e12[{123456789}..#usn8][{_usn3}..{#usn7}]|01 =~{_usn3} =~`3esn`).`1esn`!"),
    octest_legacy:ct_string("With  010[Count(*)..12][$_usn3..{`8esn`}],Filter(_usn3 In {`3esn`}[`2esn`] Where False =~$7 =~2.12)[Case When .e12 Is Not Null Is Not Null Then `1esn` In .e0 In {`3esn`} When 7 Starts With {@usn6} Starts With $`` Then 0X0123456789ABCDEF =~1e1 =~{`4esn`} Else {`4esn`}[$123456789..][$#usn7..] End] As `5esn`,9e1[2.12] As _usn3 Create Unique `5esn`=(#usn7 :`8esn`:`7esn`)<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[_usn4?:`1esn` *7..12]->(:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`}) Union All Create Unique ((:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`3esn`?:_usn3|_usn3 *1000..00]-(#usn7 :_usn3:_usn3)) Create Unique `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))) Create #usn8=(`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12}),(:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Union Match _usn3=(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})-[`8esn`?:#usn8|`1esn` *1000..00]->(:_usn4$@usn5)-[`7esn`:``{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}]->({_usn4:00 Starts With 0xabc}))),`6esn`=Shortestpath((`` :#usn7)) Using Scan `4esn`:`8esn`"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((`7esn` :`5esn`{`3esn`:`7esn` Is Null})<-[`5esn`?:`4esn`]-(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]}))),`1esn`=((`8esn` ))"),
    octest_legacy:ct_string("Return None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Limit #usn7[010..False] Create Unique Allshortestpaths((({_usn3:.e12[@usn5..$12]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null}))) With Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7 Limit {_usn3}[12.e12] Where {`4esn`} =~9e0 =~{12}"),
    octest_legacy:ct_string("Match Shortestpath(({@usn5:07[..True][..9e12]})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})),#usn8=Shortestpath(((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Using Join On #usn7,`4esn` Using Scan `1esn`:@usn6 With Distinct 123.654 Is Not Null As `1esn`,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) As `4esn` Order By 0.0 =~999 Asc,1e1 In \"d_str\" In `7esn` Descending Union All Match _usn3=((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})) Using Join On usn1,`4esn`,`6esn` Create Unique `8esn`=Allshortestpaths(((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}))),Allshortestpaths((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]})) Union All Unwind 0.e0 Contains 9e1 Contains {`7esn`} As usn2 Remove Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 01234567 Is Null Is Null).`2esn`? With Distinct *,{``}[$#usn8..$usn1] As `3esn` Order By $usn2[$`2esn`..`4esn`] Ascending,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Asc,True[{_usn4}..][False..] Ascending Where \"d_str\" Contains {123456789} Contains 01"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Shortestpath((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))) In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) As `8esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return *,{_usn4:`` Ends With 0Xa Ends With `2esn`}[[{`4esn`} Ends With {123456789} Ends With $`4esn`,$#usn7[#usn7..]]],9e0[1.e1..][0Xa..] As `7esn` Order By 9e1 In 2.12 Asc,True[{`7esn`}..] Asc,{`2esn`}[``..07][0x0..1000] Desc Skip @usn6 Starts With `6esn` Starts With $`1esn` Limit {`6esn`} Contains \"d_str\" Start #usn7=Relationship:`8esn`({`1esn`}) Where #usn7 Starts With {#usn7} Starts With `7esn` Start `5esn`=Node:@usn5({usn1}) ,``=Node:usn2(#usn8=\"d_str\")"),
    octest_legacy:ct_string("Foreach(#usn8 In Count ( * )[True..][{#usn7}..]| Load Csv With Headers From 9e1 Ends With {usn2} Ends With True As `5esn`  With Distinct $_usn3 In {1000} In 0.12,$_usn3[..1000] Order By `7esn`[$12..][$`8esn`..] Descending,9e1[2.12] Ascending,$`1esn` Starts With {`8esn`} Descending Limit @usn6 Contains Null Contains $`7esn`) Match @usn6=Allshortestpaths((`1esn` :`5esn`{`5esn`:{``} Is Null})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[`2esn`?:`2esn`]->(`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})),`3esn`=Shortestpath((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) Where {0}[{`8esn`}..`4esn`] Union All Remove Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 0.e0[123.654][01]).`2esn`,Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 00[{`8esn`}..][{`8esn`}..]).`5esn`,[0.0 Ends With 010 Ends With 1.e1,$`4esn`[Null..],`8esn` Ends With 999 Ends With .e12]._usn4! Remove Filter(_usn3 In {`3esn`}[`2esn`] Where 010 =~{usn2}).`4esn`?,Case {#usn7} Is Not Null Is Not Null When 12e12 Ends With {usn1} Then `1esn` Ends With {_usn3} Ends With `2esn` End.`3esn` Union With  *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip Case When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` When {`7esn`}[..{`4esn`}] Then {usn1} Ends With $0 End[All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"])..[Count ( * )[0.12...e1],1.0[00..],$``]][`4esn`(`4esn` Ends With 07 Ends With {`3esn`})..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `1esn` =~\"d_str\"|9e12 Is Not Null Is Not Null)] Limit Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Where 00 Starts With 0xabc"),
    octest_legacy:ct_string("With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..] Union Merge `4esn`=Allshortestpaths((`8esn` {`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[`3esn`? *..01]->(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)) Start `3esn`=Rel:usn1(`6esn`={7}) Where $_usn4 Ends With usn1 Ends With $0 Load Csv With Headers From 2.12 =~False As #usn7  Union All Merge (((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]}))) On Create Set usn2+=0.e0[123.654][01],Reduce(@usn6=123456789 Ends With $`6esn` Ends With $#usn7,#usn7 In {``} Is Not Null|$#usn8[$`2esn`..][{`2esn`}..]).``! =False Contains {`6esn`},`6esn` =.e0 Ends With $`6esn` Ends With .e1 On Create Set @usn6+={0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]],{`8esn`:{_usn4} Starts With 0.e0 Starts With 0x0}.@usn5! =`4esn`[`5esn`..123456789][0..$12] Foreach(`3esn` In {`7esn`}[`6esn`][#usn7]| With  Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `3esn`,{`3esn`} In 0X7 Skip `1esn` In .e0 In {`3esn`} Limit Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Create Unique #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})),Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))))"),
    octest_legacy:ct_string("Merge `7esn`=((`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(`` )<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})) On Match Set Case usn1 In 7 In {123456789} When _usn3[_usn3..][12.e12..] Then 0x0 Ends With $12 Else `7esn`[..2.12][..00] End.`7esn`? =Reduce(`8esn`=0[..usn2][..{@usn5}],#usn8 In {`5esn`}[.e1..``]|Count ( * )[True..][{#usn7}..])[2.12..][{999}..],`` ={`3esn`} Is Null Is Null,(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})._usn4? =Reduce(`1esn`={0} Ends With $_usn3 Ends With $`7esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|010 In Count(*))[9e12..(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})][0X7..Case $_usn4 Starts With 1e1 When {12} Ends With 1.0 Ends With .e0 Then {`2esn`} Is Not Null Else \"d_str\"[..{@usn5}][..``] End] Union All Match Allshortestpaths((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))) Where 9e1[$usn2] Union All Delete $`8esn`[$999..{``}] Remove Case `1esn`[{usn1}..``][7..$#usn8] When `6esn`[2.12..01][{``}..False] Then Null[{#usn7}..][0X0123456789ABCDEF..] End.@usn5"),
    octest_legacy:ct_string("Optional Match ``=(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))) Using Join On #usn7 Using Index _usn4:usn2(#usn8) Union All Optional Match _usn4=Allshortestpaths((usn2 :`4esn`)),(`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Create Allshortestpaths((`2esn` :`8esn`:`7esn`{`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})),Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789))"),
    octest_legacy:ct_string("Foreach(usn2 In {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]]| Unwind 's_str' =~$`7esn` As `4esn` Optional Match Allshortestpaths(((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})))) Union Merge Shortestpath((:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})) On Create Set None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]).#usn8? =123.654[`3esn`..] Return Distinct *,.e12[@usn5..$12] As `6esn` Order By 2.12 =~{7} Asc,@usn5 In {`7esn`} In `2esn` Ascending Limit Shortestpath(((@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})-[]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})<-[#usn7?:`1esn` *01234567..0Xa]-(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}))) =~_usn3(Distinct 7[$`8esn`..123456789][$usn1..$usn1],.e0[..$`8esn`]) Union Remove Reduce(#usn7=0Xa[2.12],`4esn` In $`3esn` Is Not Null|usn1 Is Not Null).`5esn`,None(`4esn` In $`3esn` Is Not Null Where {`4esn`}[$123456789..][$#usn7..]).`3esn`! Load Csv With Headers From $usn2[$`2esn`..`4esn`] As `2esn` "),
    octest_legacy:ct_string("Load Csv With Headers From Single(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])[Reduce(`8esn`=$#usn8 Ends With $`2esn` Ends With $@usn6,`2esn` In `1esn` =~\"d_str\"|$`8esn`[1000..0Xa])][[$123456789 =~{`6esn`} =~\"d_str\",01234567 Ends With .e12 Ends With $#usn7]] As usn1 Fieldterminator \"d_str\" Remove {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null}.`4esn`?,usn1:#usn7,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|$_usn3[..1000]).``"),
    octest_legacy:ct_string("Return * Skip 0Xa[7..2.12][`3esn`.._usn3] With  *,Case When $_usn3[Count(*)] Then `7esn`[$0][9e12] When $1000[`2esn`..`5esn`][1e1..1.e1] Then 00[{`8esn`}..][{`8esn`}..] End[`7esn`(9e1[1000][{123456789}])] Skip $`7esn`[1.e1.._usn4][0Xa..`2esn`] Limit Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..]) Where $`6esn`[12] Unwind .e1[..usn2][..`8esn`] As `4esn` Union Load Csv From 1.0 Is Null Is Null As `3esn` Fieldterminator 's_str' Union All Foreach(@usn6 In {_usn4} Is Null| Unwind [.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) As `2esn`) Merge usn1=((({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[{``:12.e12[$_usn3..],_usn3:$`6esn`[010..]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}))) On Create Set Single(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``).`2esn` =Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}),[@usn6 Ends With {_usn3},12.0 Contains #usn7,$_usn3[..1000]].`2esn`? =0e0 Contains Null,`5esn`+=7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Merge (($#usn8)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})) On Create Set [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$`4esn`[Null..]].usn1! =123.654[True..$#usn8][0.12..Count(*)]"),
    octest_legacy:ct_string("Delete 00[{`8esn`}..][{`8esn`}..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $_usn4 Ends With usn1 Ends With $0 As `7esn` Fieldterminator \"d_str\" With  (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As @usn5,`8esn`[$`8esn`..{`4esn`}],None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `5esn` Starts With 010 Starts With 0.0) Ends With Reduce(usn2=False =~1e1 =~0.e0,`` In `` Is Not Null Is Not Null|#usn8[`3esn`..][{#usn7}..]) Order By @usn6 Is Null Is Null Descending,{_usn3} Is Null Is Null Desc,Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Ends With Reduce(_usn3='s_str'[00][{`5esn`}],`4esn` In $`3esn` Is Not Null|Count ( * ) Contains `8esn` Contains .e1) Descending Match Allshortestpaths((`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})),(:@usn6:#usn8{`7esn`:0x0[`4esn`..'s_str']}) Using Scan `2esn`:usn1 Using Index _usn4:`5esn`(`6esn`) Where $`6esn` Is Null"),
    octest_legacy:ct_string("Create Unique Shortestpath(((({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)))),``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))"),
    octest_legacy:ct_string("Remove Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null)._usn4?,[Null[$`5esn`][False]]._usn3,(`3esn` {@usn5:$usn2[9e0]})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}).`5esn`? Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Detach Delete $`3esn` In $_usn4 In {_usn3},$_usn3 =~0.12 =~{#usn8} Union All Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),_usn3=(#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})-[#usn7:@usn5 *0X7..]->(@usn5 :usn1{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}) Using Index `6esn`:@usn5(`2esn`) Using Scan _usn4:@usn6 Where {123456789} Contains $#usn8 With  7 =~{`8esn`} =~$`6esn`,`1esn`[..{`2esn`}][..$_usn4],$#usn7 Starts With {7} Starts With 1.0 Order By 12.e12 Is Null Is Null Desc"),
    octest_legacy:ct_string("Start `3esn`=Rel:usn1(_usn4={12}) ,usn1=Node:`2esn`({`1esn`})Where \"d_str\" Starts With 01 Remove [$`8esn` =~{1000},$usn1 =~``].``?,({@usn5:usn1 Is Not Null})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}).#usn7!,Reduce(@usn5={123456789} =~`8esn` =~@usn5,#usn8 In 7[..999][..{#usn8}]|$@usn5 Is Not Null Is Not Null).`1esn`! Union Foreach(`` In [#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn2 Is Null|@usn6[$`3esn`..{`3esn`}]] In Filter(_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`)| Remove ({@usn5:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],@usn6:$0})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True}).@usn5!,[.e12 Ends With _usn4,0Xa =~Null =~$``]._usn3?,Filter(`2esn` In `1esn` =~\"d_str\" Where Count ( * ) =~$usn2 =~$usn2).`4esn` Return Distinct All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)],None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As @usn5 Order By 0.12 =~$0 =~$0 Descending) Remove Allshortestpaths(((#usn7 :``:#usn8{`2esn`})<-[usn1?:#usn8|`1esn`]->({@usn5:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],@usn6:$0})<-[@usn6?:`5esn`]-(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})))._usn3? Start `6esn`=Rel:`2esn`({`1esn`})  Union All Optional Match Allshortestpaths((((:_usn4{usn2:0X0123456789ABCDEF[123456789]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)))),((usn1 :`6esn`)) Using Join On `7esn`"),
    octest_legacy:ct_string("With  (`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[@usn6 *..01{#usn7:@usn6 Contains $1000 Contains {`7esn`},@usn5:`2esn` Starts With $_usn4}]->(`6esn` :@usn6:#usn8) Is Not Null Is Not Null As usn2 Order By $`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Ascending Skip $12 Is Not Null Is Not Null Limit $123456789 Ends With {`1esn`} Ends With $`4esn` Load Csv From Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) As `1esn`  Union Create Unique `1esn`=((({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5)<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}))),_usn4=Allshortestpaths((#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})) Foreach(`8esn` In $123456789 In 0X0123456789ABCDEF In 0.e0| Start _usn4=Relationship( {usn1}) ) Create Unique @usn5=(((:_usn4)<-[:`6esn`|`5esn` *..010]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})<-[`4esn`?:`7esn` *0..{`2esn`:00[`2esn`..12][123456789..0.e0]}]->(`1esn` :_usn3:_usn3))),#usn8=Allshortestpaths(((`5esn` :`2esn`:usn1)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3)))"),
    octest_legacy:ct_string("Remove [`5esn` In \"d_str\" Is Null Is Null Where ``[$`2esn`]|9e1[2.12..{#usn8}]].@usn6! With Distinct $@usn5 Contains 0xabc Contains {#usn7},Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As _usn3 Limit {`3esn`}[@usn6..0Xa][{12}..0Xa] Create Unique usn2=(_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]}),`6esn`=((@usn6 :`1esn`)<-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})) Union All Merge Allshortestpaths(((:`2esn`:usn1{@usn5:`5esn`[.e0..][07..],`4esn`:`8esn` =~0xabc =~010})<-[``? *0X7..]->(`8esn` :#usn7))) On Create Set `5esn`+=999 In {`3esn`} In usn2"),
    octest_legacy:ct_string("Load Csv From 0.0[Null][$`2esn`] As `3esn` Fieldterminator 's_str' Return Distinct *,(`1esn` {#usn7:{_usn4} In {12} In $0})<-[#usn7?:_usn3|_usn3 *..0x0]-(`1esn` :`8esn`:`7esn`)[Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End..(`7esn` {@usn5:{7}[..1.0][..9e0]})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{usn2:$`2esn`}..[`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null|$#usn7[#usn7..]]] As `2esn` Limit 12.0 Contains #usn7 Remove [$1000 Is Null,$`1esn`[{`2esn`}..],.e1[{`7esn`}..{_usn4}]].@usn5"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From Reduce(`3esn`=$0[..9e1],_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|999 In {`3esn`} In usn2) Starts With Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Starts With Allshortestpaths((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})) As @usn5 Fieldterminator 's_str' Match usn1=Allshortestpaths(((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})) Using Join On @usn5,_usn3,_usn3 Using Scan #usn7:@usn6"),
    octest_legacy:ct_string("Remove Reduce(`4esn`=12.e12[$_usn3..],`2esn` In `1esn` =~\"d_str\"|0x0[`4esn`..'s_str']).#usn8!,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn2[{7}]|.e1 Ends With 1e1 Ends With @usn5).`8esn`? Unwind Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As `5esn`"),
    octest_legacy:ct_string("Optional Match `2esn`=((`5esn` {`8esn`:1000[Null..{123456789}]})) Using Index @usn5:`4esn`(`3esn`) Using Join On `5esn`,#usn7 Where #usn8 Is Not Null Load Csv With Headers From {``} Is Not Null As usn1 Fieldterminator 's_str' Remove {`6esn`:{usn1} Is Null Is Null,@usn5:0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`}.`3esn`,usn2:`1esn` Union All Delete {#usn8} Is Null,$@usn5[`2esn`],`3esn`[$`1esn`..999][``..$123456789] Return {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}])"),
    octest_legacy:ct_string("Foreach(`6esn` In All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)]| Create Unique ((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}))) Return *,$#usn7 Contains 0x0 Contains 1000 As @usn5 Order By $_usn4 Contains Null Contains #usn8 Descending,07[$#usn7..{1000}] Ascending Skip #usn7[$usn1]"),
    octest_legacy:ct_string("Remove Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{999}).`3esn`,Case 's_str' In 00 When 010 =~{usn2} Then $`5esn`[2.12..] When {12} Ends With 1.0 Ends With .e0 Then {`2esn`} Is Not Null End.usn2?,[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8|@usn6[$`3esn`..{`3esn`}]].``!"),
    octest_legacy:ct_string("Merge Shortestpath((((`1esn` :`5esn`{`5esn`:{``} Is Null})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(_usn4 :usn1)))) On Create Set `1esn`+=0.0 =~999,Case When `8esn` Ends With 999 Ends With .e12 Then 12.e12[7..$`6esn`] When 1000 In {`8esn`} In 01 Then `2esn` Starts With $_usn4 Else 0Xa Starts With {`6esn`} Starts With $usn1 End.`3esn`! =Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where `3esn`[{0}][usn1]) Starts With Allshortestpaths((({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]}))),@usn5 =`3esn` Is Null On Create Set `` =$#usn7 Contains 0x0 Contains 1000,#usn7+={``} Is Not Null,Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``).`6esn`! ={0} Contains 0.0 Contains $@usn5 Unwind 7[..999][..{#usn8}] As `8esn` Delete $`1esn`[{`2esn`}..],{`3esn`},0.e0 =~$12 =~``"),
    octest_legacy:ct_string("Create #usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999}))) Return Distinct *,{`5esn`:01234567 Is Null Is Null}[..`1esn`(Distinct 00 Starts With 0xabc,$0)],Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Skip 1.0 =~7 =~{usn2} Union All Return Distinct *,{#usn8} Is Not Null,$`5esn`[2.12..{_usn3}][_usn3..{1000}] As usn2 Order By 9e0[1.e1..][0Xa..] Descending,{_usn3:`4esn`[..Count ( * )][..{#usn7}]}[Any(_usn3 In {`3esn`}[`2esn`] Where 1e1 In \"d_str\" In `7esn`)..(:usn1{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`2esn`:_usn4|:usn2]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[`6esn`{`6esn`:Count(*) Ends With 12.0 Ends With 12}]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})][Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7|123.654[{7}..])..Filter(`3esn` In {7} Is Null Where usn1 Is Null Is Null)] Asc Remove (_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})-[usn2?]-(:@usn5)<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->(`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}}).`5esn`?,All(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12)._usn4 Create #usn8=Shortestpath((#usn8 :@usn5))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `6esn`[2.12..01][{``}..False] As _usn4 Fieldterminator 's_str' Optional Match `7esn`=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),((:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12})) Using Scan _usn4:`7esn` Remove {`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}.usn2?,`8esn`:#usn8:#usn8,Allshortestpaths(((_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})-[`6esn`?:`3esn`|:#usn8{usn1:$usn1 In {999} In $#usn7}]-({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``}))).`2esn`"),
    octest_legacy:ct_string("Unwind True[07..$usn2][$7..{usn1}] As @usn5"),
    octest_legacy:ct_string("Delete $#usn7 Starts With {7} Starts With 1.0,Case Count ( * ) Contains 07 When {7}[..12e12][..Count ( * )] Then 9e12 Is Not Null Is Not Null When $`2esn` Then 1.0 Contains $_usn4 Else _usn4 Contains 2.12 End[Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`2esn`} Ends With {`7esn`})..] Unwind $_usn3 Starts With $@usn6 Starts With {`8esn`} As @usn6 Load Csv From $`6esn`[{_usn3}..$`4esn`][$_usn4...e12] As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match #usn7=Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})),((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})) Using Index `3esn`:usn1(@usn6) Match Allshortestpaths(((usn2 :@usn5)<-[? *00]->(@usn5 :usn1))) Using Scan _usn3:`1esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From 0xabc[.e0] As usn2 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Load Csv From `5esn` Starts With 010 Starts With 0.0 As @usn5  Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),(((`6esn` :`5esn`{usn1:{`6esn`}})<-[? *0X7..{#usn8:{1000} Is Null Is Null,`3esn`:0.e0 Starts With 12.e12 Starts With {_usn4}}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})<-[:`1esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}))) Union All Create @usn6=Shortestpath((usn2 {usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})),(((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]}))) Load Csv With Headers From (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) Contains All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) As #usn8 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:_usn4(_usn4) Where {#usn7}[9e1..][{123456789}..] Union Create Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))),Shortestpath((({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]}))) With  *,$12[True..][{0}..] Order By Case `1esn`[{usn1}..``][7..$#usn8] When {0} Ends With $_usn3 Ends With $`7esn` Then $7[{usn2}..][{usn2}..] When 12.0[123.654][Count(*)] Then Count ( * ) Ends With 12.0 Else 01234567[usn2..$12][{`7esn`}..$usn2] End Is Not Null Descending Where {_usn4} Ends With `6esn` Optional Match `2esn`=((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)) Using Scan `1esn`:usn2 Where {@usn5} Is Null Is Null"),
    octest_legacy:ct_string("Optional Match `2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}),`6esn`=(((usn2 :``:#usn8)-[ *123456789..{`4esn`:0Xa[2.12],#usn7:0.e0 In $#usn7 In $_usn3}]-(@usn6 :`3esn`:@usn5)-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}))) Using Index `5esn`:`1esn`(usn1) Where 07[..True][..9e12] Merge (((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[usn2?:``]-(usn2 :``:#usn8)-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}))) Union Create Unique ((:_usn4{usn2:0X7 =~9e1})<-[? *..0x0]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),`1esn`=(`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}) Delete 0.0 =~999,0e0[07],$1000 Is Not Null With  *,0.0 =~999 As `4esn` Skip `3esn`[..$12][..{`7esn`}] Limit {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]) Where `6esn`[..$@usn6]"),
    octest_legacy:ct_string("Optional Match `4esn`=((`1esn` :`7esn`:_usn3{`2esn`:$#usn7[#usn7..],_usn4:'s_str' Is Not Null Is Not Null})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})),(`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0}) Using Join On `6esn` Using Index `6esn`:_usn4(``) Where 0[..usn2][..{@usn5}]"),
    octest_legacy:ct_string("Remove Reduce(``=00[`2esn`..12][123456789..0.e0],_usn3 In {`3esn`}[`2esn`]|{#usn8} Is Null).`7esn`? Remove (:_usn4{@usn6})-[`5esn`?:_usn4|:usn2{_usn4:{999}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]})._usn3!,Case `1esn`[{usn1}..``][7..$#usn8] When 9e1[2.12] Then $_usn4 Is Not Null Is Not Null When $`7esn` =~{`8esn`} =~$usn1 Then $`4esn`[9e12..123.654] Else {123456789}[0xabc..] End.`7esn`?,None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6}).usn1?"),
    octest_legacy:ct_string("Remove Single(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7).usn1?,`1esn`().`6esn`!"),
    octest_legacy:ct_string("Start `7esn`=Rel:#usn8({_usn3}) ,`7esn`=Rel:#usn8({_usn3})Where {0}[01][`7esn`]"),
    octest_legacy:ct_string("Return Distinct .e1 =~$usn2 =~999 As `2esn`,Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))) Is Not Null Is Not Null As `8esn` Skip Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..]) Limit 9e0 Starts With 01 Union All Return Distinct Reduce(`1esn`={0} In $_usn3,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{``} Ends With `7esn` Ends With 0.0) Is Null Is Null As `3esn` With  *,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn`,`5esn` Is Null Order By $`5esn` Ends With Reduce(#usn8=$#usn7 Is Null,`4esn` In $`3esn` Is Not Null|12.e12[`3esn`]) Ends With Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) Desc,count(`1esn` Contains {usn2} Contains $#usn8) Contains [`5esn`[7][{usn2}],@usn5 Is Null] Desc,Case When $#usn7 Contains 0x0 Contains 1000 Then {123456789} Is Not Null When $#usn7 Contains 0x0 Contains 1000 Then usn2[$_usn4..][True..] End Is Null Is Null Asc Limit `5esn`[{`4esn`}..`2esn`] Unwind 0x0[`4esn`..'s_str'] As `6esn` Union All Detach Delete {`7esn`} Starts With 0,$`6esn`[{999}..9e0],@usn6 Contains `3esn` Contains {`2esn`}"),
    octest_legacy:ct_string("Return *,$_usn3 =~0.12 =~{#usn8},9e0 Is Not Null Is Not Null Skip {usn2} Starts With $`8esn` Starts With Count ( * ) Limit $@usn5 Starts With $1000"),
    octest_legacy:ct_string("Match #usn8=((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})),usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null})) Using Scan `4esn`:`2esn` Using Join On `1esn` Where {1000} =~0 =~123.654 Union All Foreach(usn1 In usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..]| With Distinct $`8esn` Contains 123456789 Contains $usn2,{_usn4} In {12} In $0,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] Skip _usn3[..`8esn`][..2.12] Limit 0X7[0e0..`7esn`][1000..0e0]) Load Csv From [#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] Contains Case {0}[12.0..0Xa][$`5esn`..{_usn3}] When .e1 Ends With 1e1 Ends With @usn5 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] Else 123.654[...e0] End As #usn8  Unwind {12} Ends With 1.0 Ends With .e0 As #usn7"),
    octest_legacy:ct_string("Create (:`5esn`{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}),((`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn`]->({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})) Create Unique _usn4=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("Detach Delete ``[12.0..0e0][{`5esn`}..`7esn`] With  None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Order By {`3esn`}[..07][..{`5esn`}] Desc Limit 12.0 Where {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]"),
    octest_legacy:ct_string("Load Csv From [`3esn` In {7} Is Null Where {123456789} Contains $#usn8|$@usn5[..12e12][..$123456789]] In Case 01 =~{_usn3} =~`3esn` When `2esn`[..$#usn8][..Count(*)] Then 00[{`8esn`}..][{`8esn`}..] Else `3esn`[..$12][..{`7esn`}] End In Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]|010 =~{usn2}) As @usn6 Fieldterminator 's_str' Load Csv From {#usn8}[010] As _usn3  Return Distinct 00 Starts With 0xabc,\"d_str\" Starts With 01 As _usn3,({`7esn`:7[{0}..{_usn4}]})-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})-[:`2esn`*..{`1esn`}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null}) =~Reduce(#usn8=$_usn4[0e0..][False..],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8[#usn8..]) =~Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Order By Reduce(`2esn`=$`5esn` In $`` In 123.654,#usn8 In {`5esn`}[.e1..``]|$12[True..][{0}..]) =~Shortestpath((((:#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})))) Asc,_usn4 Contains 0e0 Descending,(@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(:``:#usn8{usn1:{`6esn`}}) Starts With {@usn5:0.12 Starts With $`5esn` Starts With 12} Starts With [`5esn` In \"d_str\" Is Null Is Null Where 0X7[1000..{`1esn`}]] Asc Skip 0e0 In @usn5 Limit 1e1 Contains Count ( * ) Union All With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Where 0.e0 Starts With `2esn` Start `3esn`=Node:`2esn`({0}) ,@usn5=Node:#usn8(#usn7=\"d_str\")Where `5esn`[{`4esn`}..`2esn`] Merge ((usn1 {`7esn`:{999}})) On Create Set Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))).`4esn`? ={`4esn`} Starts With $usn2 Starts With $1000,_usn4 =07[$123456789..] On Match Set (`` :usn2)<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->({`1esn`:{1000}[{_usn3}..],`1esn`:{123456789}[9e12][{0}]}).usn1 =False[..``],None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $#usn7[@usn5..{1000}][1.e1..7]).@usn5 =$usn2[9e0],#usn8 =0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null)"),
    octest_legacy:ct_string("Detach Delete False Starts With {`5esn`} Union Merge Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))) On Match Set `5esn` =All(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null)[Filter(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000)..Reduce(`8esn`={`2esn`} Is Not Null Is Not Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{usn1} Ends With $0)][Allshortestpaths(((`1esn` )))..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] On Match Set `7esn` =`4esn`[..010][..{12}],@usn5+=0X7[$999][_usn4],@usn5 =0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`"),
    octest_legacy:ct_string("Match usn1=Allshortestpaths(((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})) Using Join On @usn5,_usn3,_usn3 Using Scan #usn7:@usn6 Match ({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]})<-[`3esn`?:_usn3|_usn3 *1000..00]-(#usn7 :_usn3:_usn3)<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]}),(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) Using Join On `8esn`,@usn5 Using Join On ``,_usn3,`1esn` Union All With Distinct *,07[$#usn7..{1000}],0X0123456789ABCDEF =~1e1 =~{`4esn`} Order By $`5esn`[2.12..] Asc Where @usn5 Is Null Create ((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),#usn7=((:`5esn`{``:1.0[0e0..0.e0]}))"),
    octest_legacy:ct_string("Start ``=Node:@usn6(usn1={999})  Union All Create Unique `6esn`=Shortestpath((((:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{``:#usn7[usn1][$`5esn`],``:{_usn4} Is Not Null Is Not Null}]->(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})))),Shortestpath(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null}))) Detach Delete {#usn8} Contains 0.0 Contains Count(*),{0} Contains 0.0 Contains $@usn5"),
    octest_legacy:ct_string("Remove Extract(`` In `` Is Not Null Is Not Null Where 0e0 Starts With 1000 Starts With #usn7|usn1[`5esn`..$7]).`7esn`?,Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `` Ends With 0Xa Ends With `2esn`).`7esn` Foreach(@usn5 In 12.0[{123456789}..]| Detach Delete {`2esn`} Ends With 12.0) Delete $12 Starts With {`1esn`} Starts With Null,$`8esn` =~{1000},#usn7 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Return `` Is Not Null Is Not Null,$_usn3 Ends With 0x0 Ends With 12.0,$_usn3[.e0..$usn2] Order By Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Ascending Limit {`4esn`} Ends With {123456789} Ends With $`4esn`"),
    octest_legacy:ct_string("Detach Delete Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {_usn4} In {12} In $0) Is Not Null Is Not Null,[.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null),$@usn5[010..$#usn8][12..$`4esn`] Foreach(`8esn` In \"d_str\" Starts With 01| Start `8esn`=Relationship:`6esn`('s_str') Where 010 =~{usn2}) Union All Optional Match `5esn`=(((_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 {@usn5:$`8esn` =~{1000}})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]}))),usn1=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Using Index `1esn`:_usn3(_usn4) Using Index `2esn`:`3esn`(@usn6) Where #usn8"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $usn1[_usn4] As ``  Match usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]})"),
    octest_legacy:ct_string("Delete Case When Count ( * ) Contains 07 Then $`2esn` When 1.0 Is Null Is Null Then `7esn`[..2.12][..{usn1}] End Is Not Null Union Merge #usn8=(_usn4 :`2esn`:usn1{_usn3:0.e0 Starts With `2esn`}) On Create Set `` =123456789[0xabc..'s_str'][``..`1esn`] Return *,{12} Is Not Null Order By $`1esn`[1.0..][_usn3..] Ascending Skip `` =~'s_str' =~$#usn7 Limit $`1esn` =~0X7 Union All Return Distinct *,Reduce(usn2={`6esn`} Contains \"d_str\",`8esn` In 01[2.12..`8esn`]|7[..999][..{#usn8}]) Starts With All(#usn8 In 7[..999][..{#usn8}] Where $#usn7 Contains 0x0 Contains 1000) Skip (_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})-[`2esn`?{_usn3:$_usn4[Count ( * )..],#usn7:{`3esn`}[..07][..{`5esn`}]}]-(`4esn` :@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})[(`2esn` :#usn7{@usn5:$123456789 Starts With 9e0 Starts With 's_str',`5esn`:9e1[1000][{123456789}]})<-[`2esn` *0Xa{#usn8:1.0[0e0..0.e0]}]-(_usn4 {``:1.0[0e0..0.e0]})-[usn1?:`4esn` *..01]-({``:.e1 Is Null Is Null}).._usn3(Distinct $1000 Is Null,0.0[$0][{@usn5}])][Any(`5esn` In $999[0.0..] Where {@usn6} Ends With 's_str' Ends With 12.0)..Any(`4esn` In $`3esn` Is Not Null Where $`` Starts With $1000 Starts With False)] Limit {_usn4} Is Not Null Is Not Null Detach Delete 12e12 Contains 0Xa Create @usn6=Allshortestpaths(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))),(`7esn` {@usn5:{7}[..1.0][..9e0]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]})"),
    octest_legacy:ct_string("Optional Match (((`5esn` :`6esn`)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}))),(_usn3 {@usn5:`5esn`[{`4esn`}..`2esn`],_usn3:07 =~01}) Using Join On `7esn` Using Scan `5esn`:usn2 With  $`8esn` Contains 123456789 Contains $usn2,{_usn4} In {12} In $0,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6] Skip _usn3[..`8esn`][..2.12] Limit 0X7[0e0..`7esn`][1000..0e0] Union Create _usn3=((:``:#usn8{`7esn`:{12}[{7}][$123456789]})) Create Unique _usn3=((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`2esn`?:`7esn` *0X7..]-(@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})) Load Csv With Headers From $12[Count ( * )][0X7] As `1esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete {`1esn`}[{123456789}][{0}],None(#usn8 In {`5esn`}[.e1..``] Where `8esn` Contains $usn1 Contains $12) In Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where #usn8[..{#usn7}]) In (#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]}),010[Count(*)..12][$_usn3..{`8esn`}]"),
    octest_legacy:ct_string("Create Unique `4esn`=(:``:#usn8$`3esn`)<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]}),`1esn`=((({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5)<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}))) Union All Create #usn7=(({_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`}))"),
    octest_legacy:ct_string("With Distinct *,$@usn5 Is Not Null,Count ( * ) Is Null Skip Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where _usn4 Contains 2.12|{_usn3}[..\"d_str\"]) Contains Shortestpath((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Contains [$123456789 Ends With $999 Ends With {999},12.0 Contains #usn7] Limit {1000} Is Null Is Null Where usn2 Is Null Unwind [`` Is Not Null Is Not Null,`1esn` Contains {usn2} Contains $#usn8] Is Not Null As _usn4 Union Merge (((:usn1{usn1:`5esn`[_usn4..]})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 )-[:usn1|@usn6 *7..12]-({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}))) Start `7esn`=Node:`4esn`({usn1}) ,`1esn`=Relationship:`2esn`({1000})Where $`6esn`[010..] Match (`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Using Scan ``:_usn4 Using Join On ``,_usn3,`1esn` Union Unwind Case When {12} Ends With 1.0 Ends With .e0 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When {``}[...e12] Then {`2esn`} Starts With 0.0 Starts With {usn1} Else 123456789[$@usn5..] End[Case When $_usn4[0e0..][False..] Then $`2esn` Is Null Is Null Else `` Ends With 0Xa Ends With `2esn` End..Any(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12)][count($`3esn` Is Null)..(:`1esn`{`5esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]})-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(@usn5 {usn2:0.e0[123.654][01]})] As _usn4"),
    octest_legacy:ct_string("Match _usn3=Shortestpath((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})),`5esn`=(:@usn5$`5esn`) Where 1e1 In 123.654 In `3esn`"),
    octest_legacy:ct_string("Create Unique (@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}}),(((:`6esn`{_usn4:'s_str' Ends With 7 Ends With {_usn4},@usn6:$`2esn`})-[:@usn6|`6esn` *1000..00]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2))) Create Unique (({`4esn`:`7esn` Is Null})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}) Create @usn5=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7})"),
    octest_legacy:ct_string("Load Csv With Headers From {0} Contains 0.0 Contains $@usn5 As `7esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Start usn1=Node:`2esn`({`1esn`}) Where 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Load Csv From All(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])[..Allshortestpaths((`5esn` :`4esn`))] As @usn5  Foreach(`3esn` In 123.654[True..$#usn8][0.12..Count(*)]| Return (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null,$#usn8[Count ( * )] As `4esn` Skip _usn3 Ends With 7 Ends With `1esn` Remove [1.0[00..]].#usn8?) Union All Create `4esn`=((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})),`4esn`=((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})) Remove [@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 01[2.12..`8esn`]].@usn6?,Any(#usn7 In {``} Is Not Null Where {`1esn`}[usn1][.e1]).#usn8? Union All Unwind _usn3[..`8esn`][..2.12] As usn1 With  Allshortestpaths(((`8esn` ))) Ends With (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]}),$_usn3['s_str'][07] As @usn5 Skip $_usn4[0e0..][False..] Where $`7esn` =~{`8esn`} =~$usn1"),
    octest_legacy:ct_string("Create _usn4=Shortestpath((((`7esn` )-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:`1esn`{``:.e1 Is Null Is Null})))),#usn8=Shortestpath(((:`4esn`{`5esn`})-[`5esn`?:_usn4|:usn2 *01234567..0Xa]->(@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}))) Unwind {`8esn`} Ends With `6esn` As @usn6 Union All Create Unique (:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3) Merge `4esn`=(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}) On Create Set `5esn` =$`` Is Not Null,{usn2:usn2 Is Not Null Is Not Null}.usn1? =Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null,[{_usn4}[...e1][..$7],_usn4 Starts With $_usn4 Starts With 12.e12].#usn8? =0X7[0e0..`7esn`][1000..0e0] Load Csv With Headers From $_usn4[1.0..{#usn7}][9e1..$`1esn`] As usn2 "),
    octest_legacy:ct_string("Remove Reduce(``=$usn1[.._usn4][..False],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|#usn8[#usn8..]).`8esn`,Reduce(@usn5=9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Ends With {_usn3}).`8esn` Return Distinct *,`6esn` Is Not Null Is Not Null As `3esn` Order By $`5esn` Starts With $0 Starts With {0} Asc Union With Distinct {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}]),Count ( * ) Is Null As @usn6,123.654[...e0] Order By {usn2} Starts With $`8esn` Starts With Count ( * ) Asc Limit $@usn5 Starts With #usn7 Where {123456789}[0xabc..] Union All Create Unique (:``:#usn8{_usn3:$`7esn` Is Null Is Null}),`5esn`=Shortestpath((((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})))) With Distinct *,{#usn8}[1.e1...e12] As `5esn` Order By 0e0[..010] Descending,_usn4(0.e0 Starts With 12.e12 Starts With {_usn4},0X0123456789ABCDEF Is Null Is Null)[Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End..] Descending Limit 1.0 =~'s_str' =~{`2esn`} Where 1.0 =~7 =~{usn2}"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`3esn` In $`6esn` In $`` As `4esn`  Load Csv From 12.0 Contains #usn7 As `5esn`  Create _usn4=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`),@usn5=(((:_usn4)<-[:`6esn`|`5esn` *..010]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})<-[`4esn`?:`7esn` *0..{`2esn`:00[`2esn`..12][123456789..0.e0]}]->(`1esn` :_usn3:_usn3)))"),
    octest_legacy:ct_string("Merge ``=((#usn7 )-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})) On Create Set All(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`).`6esn`! =_usn4 Contains 2.12 Create usn2=Allshortestpaths((usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)),_usn3=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Start `5esn`=Rel:@usn6(`7esn`={`8esn`}) ,`3esn`=Relationship:#usn7('s_str') Union Foreach(`4esn` In (`` :#usn7)<-[`1esn`?:usn1|@usn6 *0..]-(:#usn8:#usn8{@usn6:$_usn3[..1000]})[[`4esn`[..010][..{12}],0.e0 Starts With `2esn`,1000[..$0][..True]]..]| Start `3esn`=Node:`8esn`(`1esn`={#usn7})  Unwind {`4esn`} In 1.0 As @usn6)"),
    octest_legacy:ct_string("Create @usn6=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}}))"),
    octest_legacy:ct_string("Load Csv From 0X0123456789ABCDEF[{_usn4}..00] As @usn5  Create usn2=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) Union All Detach Delete {`1esn`}[{123456789}][{0}],None(#usn8 In {`5esn`}[.e1..``] Where `8esn` Contains $usn1 Contains $12) In Any(#usn7 In `2esn`[..$#usn8][..Count(*)] Where #usn8[..{#usn7}]) In (#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]}),010[Count(*)..12][$_usn3..{`8esn`}] Union All With Distinct usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..] As usn1 Order By [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` Descending Limit Reduce(usn1=$123456789 Is Null Is Null,_usn3 In {`3esn`}[`2esn`]|Null[$`5esn`][False])[Case 0e0 Contains Null When 0X7[`7esn`][123.654] Then 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] End..][[9e1[$usn2],{`4esn`}[$123456789..][$#usn7..]]..] Where Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Create Unique Shortestpath(((({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)))),@usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)) Remove Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\").`1esn`!,None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa).`5esn`!"),
    octest_legacy:ct_string("Load Csv With Headers From $_usn4 Contains Null Contains #usn8 As #usn7 Fieldterminator \"d_str\" Foreach(`5esn` In (`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])]| With Distinct True[..$`6esn`],(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})[[{@usn6}[{999}..][00..],@usn5 =~{`5esn`} =~`5esn`,`7esn` Is Null]][Reduce(`7esn`=0X0123456789ABCDEF Is Null Is Null,`5esn` In $999[0.0..]|$1000[Null][`4esn`])] As @usn5 Skip $0 Ends With 12.0 Limit 01[2.12..`8esn`]) Union Detach Delete All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8) Is Not Null Is Not Null,{_usn4}[{`5esn`}..{1000}][9e1..{1000}],{``} Starts With $`2esn` Starts With `1esn` Remove [`2esn` In `1esn` =~\"d_str\" Where usn2 Ends With 999 Ends With .e1|9e0[..999]].`4esn`,Case When usn1 In 7 In {123456789} Then `5esn`[_usn4..] When `7esn`[9e0..] Then {`3esn`} In 01 End.`4esn` Foreach(`5esn` In \"d_str\" Contains {123456789} Contains 01| Match #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}),Allshortestpaths((_usn4 :usn1)<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) With Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Where _usn3 Contains $123456789 Contains ``)"),
    octest_legacy:ct_string("Merge usn2=Shortestpath(((`1esn` :_usn3:_usn3))) On Match Set Reduce(@usn6=01234567 Is Null Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|1.0 Starts With 12e12 Starts With {`5esn`})._usn3? =`4esn`[..Count ( * )][..{#usn7}]"),
    octest_legacy:ct_string("Create Unique (({@usn5:{usn2}[.e0..$999]})),Allshortestpaths(((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}))) Detach Delete \"d_str\" =~1000 =~{`1esn`} Unwind Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End] As `2esn`"),
    octest_legacy:ct_string("Remove {usn1:#usn7 Is Null Is Null,`5esn`:{`3esn`} In 0X7}.`8esn`! Union All Load Csv With Headers From 1.e1[`8esn`][00] As #usn7  Union Start _usn3=Node:`8esn`(`1esn`={#usn7}) Where usn2[9e12] Return Distinct *,`4esn`[`5esn`..12][@usn6..False],Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End As `4esn` Order By 123456789[{123456789}..'s_str'] Descending Limit 9e0 Remove `4esn`:usn2,[Null Ends With `2esn` Ends With $usn1,0X0123456789ABCDEF[123456789],0Xa[$123456789..123.654][.e12..0.e0]].`3esn`!,Single(`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1).@usn5!"),
    octest_legacy:ct_string("Create Unique ((:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`3esn`?:_usn3|_usn3 *1000..00]-(#usn7 :_usn3:_usn3)) Create Unique `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))) Create #usn8=(`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12}),(:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Union All Foreach(`2esn` In Allshortestpaths((`5esn` :`4esn`)) Is Not Null| Delete [#usn8 In {`5esn`}[.e1..``] Where {7}[..12e12][..Count ( * )]|{`2esn`} Ends With {`7esn`}] In All(#usn8 In {`5esn`}[.e1..``] Where {7}[..1.0][..9e0]),Null Ends With `2esn` Ends With $usn1,[False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12)) Union All Create usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) With Distinct #usn8 Starts With $_usn4 Starts With $7 As `6esn` Order By $0[$`1esn`..07] Descending Skip 9e1 Is Not Null"),
    octest_legacy:ct_string("Detach Delete Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}..Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)],0.12 In _usn3 In {0},Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`]|123456789 Ends With 12.e12 Ends With $`7esn`) Is Not Null Optional Match _usn4=Allshortestpaths((usn2 :`4esn`)),(`4esn` :`8esn`:`7esn`{`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Unwind $usn1[.._usn4][..False] As @usn6 Union Remove [#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]].`2esn`!,Single(`4esn` In $`3esn` Is Not Null Where @usn5 =~{`5esn`} =~`5esn`).`6esn`?,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where .e0 Starts With 0 Starts With 0.e0|@usn6[{`5esn`}]).usn1? Load Csv With Headers From {`7esn`} Is Null As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Remove Reduce(@usn5=Count ( * ) Contains {`1esn`} Contains 07,`2esn` In `1esn` =~\"d_str\"|`3esn` In $0 In `1esn`).usn2,{#usn8:1.0[0e0..0.e0]}.usn1,(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn` *0X7..{usn2:_usn3[$`8esn`]}]->(`8esn` :_usn4).@usn5 Union Remove Extract(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc|$`5esn` Starts With $0 Starts With {0}).`4esn`,Filter(`5esn` In $999[0.0..] Where {`5esn`} Contains $0 Contains {``}).`1esn`!,Allshortestpaths(((`3esn` :`8esn`:`7esn`)<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1}))).#usn8? Optional Match @usn6=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))) Where 0X7[..2.12] Create `3esn`=Shortestpath(((:usn1{usn1:{`6esn`}})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))),@usn6=Allshortestpaths(((:`1esn`))) Union All Foreach(`` In .e0[..0X0123456789ABCDEF][...e12]| Return *,12.0 Ends With True Skip {`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] Return Distinct *,0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn` As `7esn` Limit 9e12[`6esn`..12.0]) Create `3esn`=Shortestpath((@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[:#usn8|`1esn`*{`8esn`:0Xa[usn2..]}]-(`3esn` :_usn3:_usn3{@usn5:False})),`4esn`=Allshortestpaths(((@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(#usn7 :_usn3:_usn3{`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}}))) Load Csv With Headers From 9e0 As `1esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)[(:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})..Shortestpath((({``})))] As `4esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind $`8esn`[$`7esn`..][0.e0..] As `4esn` Load Csv With Headers From `6esn`[..$@usn6] As @usn6 Fieldterminator 's_str' Create Unique Allshortestpaths((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))),usn2=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Union Detach Delete [usn1 In @usn5 =~{`5esn`} =~`5esn` Where $999 Is Not Null|{_usn4} Is Not Null Is Not Null][Shortestpath((:`5esn`{``:1.0[0e0..0.e0]})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}))..{`4esn`:{`4esn`} Ends With {usn2} Ends With {999}}][Single(`5esn` In $999[0.0..] Where .e0[..$`8esn`])..Shortestpath(((:`3esn`:@usn5$7)))],$usn2[$`2esn`..`4esn`]"),
    octest_legacy:ct_string("Foreach(@usn6 In `5esn` Starts With 010 Starts With 0.0| Load Csv From .e0 =~`6esn` =~{12} As usn1 Fieldterminator \"d_str\" Return Distinct 0e0 =~`6esn` =~123456789 As @usn5,Count ( * )[True..][{#usn7}..],2.12 =~{7} As `6esn` Order By {`2esn`}[1e1..1.0][{#usn8}..$`1esn`] Ascending,0X0123456789ABCDEF Is Null Is Null Asc Skip \"d_str\"[#usn8]) Union Remove (:usn1{usn1:{`6esn`}})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(@usn6 :`1esn`)<-[`6esn`]-(`1esn` {@usn5:1.0[0e0..0.e0]}).`7esn`!,Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,#usn8:`4esn` Start ``=Relationship:usn2('s_str') ,`1esn`=Rel:`4esn`(`4esn`='s_str') Union All Unwind None(`` In `` Is Not Null Is Not Null Where $`6esn` Is Null) Contains Shortestpath((({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null}))) Contains Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End As usn2"),
    octest_legacy:ct_string("Foreach(`` In {`8esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4]} Starts With [False] Starts With Filter(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])| Load Csv With Headers From 123.654[0e0..$``][$`1esn`..$`8esn`] As _usn4 ) Start _usn4=Node( {999}) ,#usn7=Node:`6esn`(`3esn`=\"d_str\")Where `3esn`[{`2esn`}] Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12]"),
    octest_legacy:ct_string("Foreach(`4esn` In $1000[`2esn`..`5esn`][1e1..1.e1]| Start `6esn`=Rel:#usn8(@usn6={_usn4}) ,`5esn`=Relationship:@usn5(\"d_str\"))"),
    octest_legacy:ct_string("Return *,$@usn5 =~1000 =~1000 Skip $`4esn`[010..`4esn`] Limit 00[$`2esn`..][`6esn`..]"),
    octest_legacy:ct_string("Optional Match Shortestpath((((:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[`2esn`?{`3esn`:{123456789} Is Null Is Null}]->(usn2 :#usn7)<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})))),`2esn`=((`6esn` :#usn7)<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?:`4esn` *1000..00{_usn4:7 Starts With {@usn6} Starts With $``,`2esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]-(:`5esn`{#usn7:{123456789} Contains $#usn8})) Using Join On ``,`6esn`,usn2 Using Scan ``:`7esn` Where $999[0.0..] Create `4esn`=Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`)),Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))) Union With Distinct {12} Ends With Count ( * ) Ends With .e12 As `8esn` Skip 12 Ends With 0x0 Ends With 0.e0 Limit Case When `4esn`[`5esn`..12][@usn6..False] Then $123456789 Ends With $999 Ends With {999} When $123456789 Ends With $999 Ends With {999} Then False Is Null Is Null Else 7[True..][2.12..] End Starts With [`8esn` Ends With 999 Ends With .e12] Starts With (`5esn` :`4esn`)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(`7esn` :`5esn`{`3esn`:`7esn` Is Null}) Start usn2=Rel:usn2({`4esn`}) Where $usn1 In {999} In $#usn7 Match (((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]})-[usn1:_usn3|_usn3 *..999{`2esn`:'s_str'[00][{`5esn`}],@usn6:999 Is Not Null Is Not Null}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]}))) Using Join On `1esn`,_usn3,_usn3 Union All Load Csv With Headers From 00[{`8esn`}..][{`8esn`}..] As usn2 Fieldterminator 's_str' Remove [$`8esn` =~{1000},$usn1 =~``].``?,({@usn5:usn1 Is Not Null})-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]}).#usn7!,Reduce(@usn5={123456789} =~`8esn` =~@usn5,#usn8 In 7[..999][..{#usn8}]|$@usn5 Is Not Null Is Not Null).`1esn`! With Distinct 123456789[0xabc..'s_str'][``..`1esn`] As `4esn` Order By Extract(#usn8 In 7[..999][..{#usn8}] Where 0Xa[$123456789..123.654][.e12..0.e0]) Ends With Single(_usn3 In {`3esn`}[`2esn`] Where True Contains {0} Contains 7) Ends With All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $_usn3 In {1000} In 0.12) Desc,00[{`8esn`}..][{`8esn`}..] Descending Limit Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`})"),
    octest_legacy:ct_string("Create Allshortestpaths(((`8esn` )<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))),`7esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) Create #usn7=(({_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})),((`8esn` )) Create Allshortestpaths((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[@usn6:_usn4|:usn2]->(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null})) Union All Create #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}) With Distinct *,{`5esn`} =~{`3esn`} =~1.0 As `1esn` Skip {999}[_usn4..] Limit Shortestpath((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))) In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) Load Csv With Headers From {`5esn`} Starts With $`5esn` Starts With .e1 As `2esn`  Union With  {_usn4}[{`5esn`}..{1000}][9e1..{1000}],$#usn8[$`2esn`..][{`2esn`}..],\"d_str\" Starts With $123456789 Order By $`1esn` Starts With {`8esn`} Desc,`5esn` Starts With `3esn` Asc Skip 1000 =~@usn6 =~0x0 Remove `4esn`({12} Ends With 1.0 Ends With .e0).`3esn`!,_usn4:`2esn`:usn1,[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null|Null[$`5esn`][False]].`3esn`? Create Shortestpath((@usn6 {usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})),(`7esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]})-[{`7esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4]}]->(:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[usn1?]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})"),
    octest_legacy:ct_string("Remove Reduce(#usn7=`7esn`[..2.12][..00],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|1000 =~@usn6 =~0x0).`4esn`! With Distinct *,`4esn` =~$`5esn` As usn1,{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Order By $`5esn` Starts With `` Descending,2.12 Is Null Asc Skip None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Is Null Is Null Where 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Union Optional Match usn1=(((@usn5 :`8esn`:`7esn`{`6esn`:`7esn`[$0][9e12],`4esn`:.e1 Is Null Is Null})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`))) Unwind Null Ends With {`5esn`} Ends With 0.e0 As usn1 Delete 123456789 Ends With 0.12 Ends With ``"),
    octest_legacy:ct_string("Return *,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By $12[Null..Count(*)][{`5esn`}..{999}] Desc,12.e12[7..$`6esn`] Desc Skip {`4esn`} Ends With {123456789} Ends With $`4esn` Create usn2=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))),#usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Foreach(_usn3 In 00[{`8esn`}..][{`8esn`}..]| Load Csv From {1000}[$`4esn`][\"d_str\"] As `8esn` Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Optional Match usn1=(((usn2 {``:01[{@usn5}]})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[`6esn`? *0..]-(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12}))),Allshortestpaths(((`8esn` )<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))) Using Index `6esn`:usn2(@usn6) Using Join On ``,_usn3,`1esn` Merge #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) On Create Set @usn6+=Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] On Create Set [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$`4esn`[Null..]].usn1! =123.654[True..$#usn8][0.12..Count(*)] Union All Create `8esn`=(((usn2 :#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12}))),((_usn3 :`7esn`:_usn3)-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})) Union Unwind {12} Is Not Null As @usn6"),
    octest_legacy:ct_string("Create _usn4=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`)"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath((`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[:`3esn`|:#usn8 *7..12{@usn5:_usn4 Starts With $_usn4 Starts With 12.e12}]->(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})),`5esn`=(:@usn5$`5esn`) Using Scan #usn8:usn1 Using Join On ``,`6esn`,usn2 Where 9e1[..$`2esn`] Union All Foreach(`2esn` In [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][Case 1.0 In Count(*) When $_usn4[Count ( * )..] Then Null[``] When $1000[`2esn`..`5esn`][1e1..1.e1] Then .e12[@usn5..#usn7][010..{usn1}] Else 1.0[$`1esn`..][$123456789..] End][All(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)]| Detach Delete $usn1[_usn4],.e1[..usn2][..`8esn`],$123456789 Ends With `3esn` Ends With 123456789 Load Csv From {``} Starts With $`2esn` Starts With `1esn` As `` ) Delete {`3esn`} In 01,.e1 In 0,Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..])[..Reduce(@usn5=$@usn5 Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|7[..123456789][..{@usn6}])][..[`1esn`[..{@usn6}][..$123456789]]]"),
    octest_legacy:ct_string("With  *,0X7[1000..{`1esn`}],12.e12 Is Null Is Null Order By $`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Descending,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Skip `4esn` Is Not Null Is Not Null Where `5esn`[.e0..][07..] Create `7esn`=Shortestpath((`2esn` :`3esn`:@usn5)<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),#usn8=((@usn5 :usn1)<-[`5esn`? *7..12{`5esn`:{999},_usn3:$`5esn`[2.12..]}]->(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})-[_usn4?:_usn4|:usn2 *..999]-({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}))"),
    octest_legacy:ct_string("Detach Delete [False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Return Distinct `5esn`(Distinct `2esn` Is Null,123456789[{123456789}..'s_str'])[.._usn3(.e0[..$`8esn`])][..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}] Skip [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null] Foreach(usn2 In $12[True..][{0}..]| Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null Load Csv With Headers From {1000}[$`4esn`][\"d_str\"] As _usn3 )"),
    octest_legacy:ct_string("Create Shortestpath((`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})),Shortestpath(({_usn3:.e12[@usn5..$12]})<-[`6esn`? *..010]-({#usn7:2.12 Contains usn2 Contains True})<-[{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`2esn`:usn1{`8esn`:9e12[`6esn`..12.0],``:01[{@usn5}]})) Match Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Index ``:usn1(@usn5) Using Index `3esn`:`5esn`(#usn7) Where $`5esn`[2.12..] Union Merge #usn8=((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})) On Create Set ``(0X7 =~9e1,0.0 =~999).`3esn`! =(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[{`8esn`:07 In `2esn` In 12e12}]-(`3esn` :@usn5)-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) Is Not Null Is Not Null On Create Set ($#usn8)-[:`8esn` *..01]->(`` {`3esn`:{12} Contains {123456789} Contains `4esn`}).`6esn`! =999 Ends With Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 1.0 In Count(*)),@usn6+=None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}],Shortestpath(((usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(:@usn6:#usn8$`5esn`))).``? =(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} Unwind $`1esn`[{`2esn`}..] As #usn8 Union All Create Unique `1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})),`5esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))"),
    octest_legacy:ct_string("Create Unique (((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))),((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})) Union With Distinct *,2.12 Ends With $_usn3 Ends With `3esn` As `7esn`,0 In `2esn` In 010 Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc Skip [{`3esn`} Is Not Null Is Not Null] Limit Single(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`) Contains Case When {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Then 's_str'[00][{`5esn`}] Else $#usn7 Is Null End Contains None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) Where $`8esn` Contains 123456789 Contains $usn2 Merge `2esn`=(:`4esn`{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[#usn8:@usn5 *..01]-(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null}) On Match Set (`` :usn2)<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->({`1esn`:{1000}[{_usn3}..],`1esn`:{123456789}[9e12][{0}]}).usn1 =False[..``],None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $#usn7[@usn5..{1000}][1.e1..7]).@usn5 =$usn2[9e0],#usn8 =0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) Unwind $`8esn` =~{1000} As `3esn` Union All Create Unique ((`3esn` :usn2)) Foreach(#usn7 In {0}[``..$usn1][9e1..0Xa]| With Distinct *,$@usn5 =~1000 =~1000 Skip $`4esn`[010..`4esn`] Limit 00[$`2esn`..][`6esn`..] Load Csv From Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where _usn4 Contains 2.12|{_usn3}[..\"d_str\"]) Contains Shortestpath((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Contains [$123456789 Ends With $999 Ends With {999},12.0 Contains #usn7] As _usn4 ) Create Unique `7esn`=Allshortestpaths(((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[`1esn`?:usn2|``{_usn4:$`4esn`[..$`3esn`][..0.0],@usn6:0e0 Starts With 2.12 Starts With $12}]->(:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`8esn` *0X0123456789ABCDEF]->(usn2 :_usn4))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3))"),
    octest_legacy:ct_string("Return {@usn5}[{#usn8}][9e0],$`3esn` In Null As `3esn` Order By True Contains {0} Contains 7 Ascending,[`8esn` In 01[2.12..`8esn`] Where True[00][0Xa]] Contains Shortestpath((((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Contains Extract(_usn3 In {`3esn`}[`2esn`] Where 0e0[07]) Desc Limit Null In $7 In .e1 Create Unique ((`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) Return Distinct *,(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}],(:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null})-[:`8esn` *0..{_usn3:`4esn` Ends With 07 Ends With {`3esn`}}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})[..[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]|{7}[..12e12][..Count ( * )]]] Order By (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} Asc,({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) In Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12) Descending,All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Is Null Is Null Ascending Skip 1e1 Contains 0e0 Union Merge #usn8=(((`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})-[@usn5]->(:`5esn`{`1esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],@usn6:$usn1 In {999} In $#usn7})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))"),
    octest_legacy:ct_string("Create (`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})<-[`4esn`?{`3esn`:\"d_str\" Is Null Is Null,usn1:0X0123456789ABCDEF[123456789]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]}),#usn7=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Start `7esn`=Rel:_usn4(``={#usn7}) Where 00 Starts With 0xabc Merge ((#usn7 :#usn7)<-[#usn8:@usn6|`6esn`{`8esn`:True[00][0Xa]}]->(`7esn` :`7esn`:_usn3{usn2:_usn3[$`8esn`]})) On Match Set Case When 1.0[0X0123456789ABCDEF] Then 9e1 In $`3esn` In $@usn6 End.#usn8? =12e12 Is Null Is Null,Filter(#usn8 In 7[..999][..{#usn8}] Where 0e0 Contains Null).`6esn`! =0xabc[.e0],@usn6+={999} Is Null Is Null On Create Set `4esn` =Shortestpath(((({#usn7:2.12 Contains usn2 Contains True})-[_usn3?:`6esn`|`5esn` *0X0123456789ABCDEF]-(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}))))[Case When $999[0.0..] Then 12 Ends With 0x0 Ends With 0.e0 When `` Is Not Null Is Not Null Then {`3esn`}[..07][..{`5esn`}] End..[`3esn` In {7} Is Null Where usn1 Is Null Is Null]],Case When Count ( * ) Ends With $@usn5 Then _usn4 Contains 2.12 Else False =~$7 =~2.12 End.`5esn`! =7 Ends With $`4esn` Union Merge @usn5=Shortestpath((((`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})-[#usn8?{`5esn`:#usn7 Contains _usn3 Contains {`3esn`}}]-(:``:#usn8)))) On Match Set `5esn` ={123456789} Is Null Is Null,#usn8 =123.654[12..][_usn3..] Create ((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})),(((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12}))) Remove Reduce(`6esn`={#usn8}[010],usn1 In @usn5 =~{`5esn`} =~`5esn`|`4esn`[``]).@usn5!,[`7esn`[$0][9e12],$`7esn`['s_str']].#usn8!,Case 7[$`2esn`..{`5esn`}] When 0e0[..010] Then {123456789} Is Null Is Null Else `6esn`[..$@usn6] End.``!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From {_usn4} Starts With 0.e0 Starts With 0x0 As `8esn` Fieldterminator 's_str' With  *,Null[{#usn7}..][0X0123456789ABCDEF..] As `2esn` Where usn2 Is Null Create Unique `5esn`=((@usn5 {usn2:0.e0[123.654][01]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]}))"),
    octest_legacy:ct_string("Merge _usn4=Shortestpath((((#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})))) Union All Optional Match `4esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) Using Index _usn4:`5esn`(`6esn`) Using Join On `4esn`,usn1,`2esn` Where `6esn`[12..$usn2][{#usn8}..{usn2}] Union All Return Count ( * )[$_usn4..$`4esn`] As _usn4,Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Ends With Reduce(usn2=$`5esn`[`3esn`..],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{_usn4} In {12} In $0) Ends With [$0] Order By `7esn` In 00 Asc,All(`2esn` In `1esn` =~\"d_str\" Where `` Ends With 123456789 Ends With 123.654)[..$_usn3][..[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 7[$`8esn`..123456789][$usn1..$usn1]]] Descending,00[`2esn`..12][123456789..0.e0] Ascending"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From [.e12[@usn5..#usn7][010..{usn1}]] In All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {`6esn`} Contains \"d_str\") In None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) As usn1 "),
    octest_legacy:ct_string("Foreach(`3esn` In $`6esn` Ends With Count(*)| Create #usn8=((_usn4 {usn1:True Contains {0} Contains 7})) Load Csv From .e1 In 0Xa In #usn7 As `2esn` Fieldterminator \"d_str\") Union All Foreach(`2esn` In @usn6 In 1000 In $``| Create Unique ((`1esn` {`5esn`})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})),Shortestpath((((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))))) Union Remove `6esn`(Distinct `5esn`[7][{usn2}],.e12[@usn5..$12]).usn1!,{`1esn`:True[..$`6esn`]}.`2esn`,Reduce(@usn6=0.e0[#usn8],usn1 In @usn5 =~{`5esn`} =~`5esn`|$`5esn` In $`6esn`).`5esn`? Load Csv From Shortestpath(((:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]})<-[``? *..0x0{#usn7:False =~$7 =~2.12}]->(`3esn` :usn2)))[['s_str' In 00,{@usn6}[$`6esn`..`4esn`]]..][Case @usn6 Starts With `6esn` Starts With $`1esn` When {`3esn`}[`2esn`] Then Null In $7 In .e1 When {0}[@usn6..$1000] Then 12.0 Contains #usn7 End..] As @usn5  With Distinct 0x0[{`7esn`}..][$usn2..],Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn`,12.e12 Is Not Null Is Not Null As #usn8 Skip 12.0[..9e0][..$``]"),
    octest_legacy:ct_string("With Distinct $#usn7 Contains 0x0 Contains 1000,Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789)) Is Null As `4esn`,{@usn6} Is Not Null Is Not Null Order By 7[$`2esn`..{`5esn`}] Desc,0Xa[2.12] Desc,0.0 Asc Remove Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|`5esn` Ends With {``} Ends With 12.e12).usn2?,[#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`2esn`} Ends With {`7esn`}|12e12[0e0][9e1]].`1esn`?,{`6esn`:1.e1[$`1esn`..@usn6][$0..$_usn3],`8esn`:{``} Is Not Null}._usn4! Unwind {1000} In {@usn6} In @usn5 As `2esn` Union With Distinct Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)[None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Starts With $1000)..{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}][Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8)..None(#usn8 In {`5esn`}[.e1..``] Where $`3esn` Is Not Null)] As ``,$`3esn` In $`6esn` In $`` Order By `7esn`[..{usn1}] Ascending,Count(*) Ends With 12.0 Ends With 12 Asc,{_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]] Asc Limit 2.12 Where $`3esn` In $_usn4 In {_usn3} Create Unique `4esn`=Allshortestpaths((:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})),#usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999}))) Foreach(_usn4 In {@usn6} Ends With 's_str' Ends With 12.0| Return `6esn`[2.12..01][{``}..False] As @usn5 Skip 1.0[$`1esn`..][$123456789..] Limit Allshortestpaths((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3))[{_usn3:01[{@usn5}]}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where True In 0e0)][Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0.12 In _usn3 In {0})..None(`3esn` In {7} Is Null Where 0Xa[2.12])] Delete Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}))"),
    octest_legacy:ct_string("Remove Reduce(usn2=$`5esn`[`3esn`..],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{_usn4} In {12} In $0).usn1!"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From `7esn`[..2.12][..{usn1}] As `7esn`  Create Unique ({`8esn`:`3esn`[{0}][usn1]})-[_usn4?:_usn4|:usn2 *00]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``})<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8}),(#usn8 :@usn6:#usn8)"),
    octest_legacy:ct_string("Start #usn7=Node:@usn5('s_str') ,`5esn`=Relationship:``(@usn6={usn1}) Start `2esn`=Node:@usn6({_usn4}) Where $@usn5 Starts With $1000 Union All Foreach(_usn3 In 123456789 Ends With $`6esn` Ends With $#usn7| Unwind $`1esn`[{`2esn`}..] As `7esn` Create `8esn`=((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})<-[usn1?:@usn5*]->(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}}))) Start usn1=Rel:@usn6(#usn7='s_str') ,``=Node:@usn6({_usn4})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 123456789[{123456789}..'s_str'] As `5esn`  Merge Allshortestpaths(((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]->(:@usn6:#usn8))) Start #usn7=Node:``(\"d_str\") ,`3esn`=Rel:`7esn`(`3esn`='s_str')Where 9e0"),
    octest_legacy:ct_string("With Distinct 0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) As ``,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12),`4esn` =~$`5esn` As `3esn`"),
    octest_legacy:ct_string("Foreach(usn2 In usn2[{7}]| Unwind 7 Is Not Null Is Not Null As @usn5 Return Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]) =~({``:$`8esn` =~{1000}})<-[#usn8? *0..]->(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}) =~Shortestpath((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) As #usn8,Reduce(`8esn`={@usn5}[{#usn8}][9e0],`3esn` In {7} Is Null|0e0 Starts With 1000 Starts With #usn7)[Single(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null)] Order By 's_str' In 00 Desc,{1000}[{_usn3}..] Descending,$usn1[...e0][..$_usn3] Asc) Create Unique (`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]}),_usn4=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))) Union All Remove Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,[#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']|`2esn` Is Null].usn1,None(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\")._usn3? Unwind [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] As `3esn` Start `4esn`=Node:_usn4(#usn7=\"d_str\") "),
    octest_legacy:ct_string("Create `4esn`=Allshortestpaths((((#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)-[@usn5?:`4esn`]-(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})))),`5esn`=Allshortestpaths(((#usn8 {_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}))) Union Load Csv From {usn2} =~12 As #usn8  Unwind [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] As `8esn`"),
    octest_legacy:ct_string("Start #usn7=Node:`6esn`(`3esn`=\"d_str\") ,``=Rel:#usn8(_usn3='s_str') With  *,Reduce(`1esn`={0} In $_usn3,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{``} Ends With `7esn` Ends With 0.0) Is Null Is Null As `3esn`,usn1 Ends With $@usn6 Ends With `3esn` Limit {`4esn`}[{`5esn`}..$`6esn`] Where $0[12.e12..] Delete usn2(Distinct Null In $7 In .e1,`1esn` Contains {usn2} Contains $#usn8) In All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8),Reduce(`8esn`=0[..usn2][..{@usn5}],#usn8 In {`5esn`}[.e1..``]|Count ( * )[True..][{#usn7}..])[2.12..][{999}..] Union All Remove Case When {usn2} =~12 Then `7esn`[..2.12][..00] When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null End.usn2?,[1000 =~@usn6 =~0x0,12.e12[7..$`6esn`],_usn4 Is Null Is Null].#usn7,[{_usn4} Is Not Null Is Not Null,{#usn7} Is Not Null Is Not Null,$usn1[.._usn4][..False]].`4esn`! Foreach(usn1 In None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {@usn6}[{999}..][00..]) Ends With Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`)) Ends With Reduce(_usn3={7}[..1.0][..9e0],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|`1esn` Contains {usn2} Contains $#usn8)| With Distinct *,{``}[`8esn`..],Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As #usn7 Order By False Contains {`6esn`} Ascending,{`1esn`}[usn1][.e1] Asc Where `7esn`[..2.12][..{usn1}] Remove exists($123456789[_usn3][{#usn7}]).`6esn`?,count(Distinct $999 Is Not Null).`8esn`!,Case When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) When 0X7[`7esn`][123.654] Then 0X0123456789ABCDEF[{_usn4}..00] Else $@usn5 Is Not Null End.usn2) Union All With  1000 In `7esn` In 9e12 As `6esn`,$12 Starts With {`1esn`} Starts With Null Skip .e12[@usn5..$12] Limit (`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(`6esn` :_usn3:_usn3{``:$usn1 Ends With $`` Ends With $12})-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]->({@usn6:$usn1 Ends With $`` Ends With $12}) Starts With `3esn`($123456789 Is Null Is Null,0Xa[usn2..]) Starts With (@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[@usn5?:@usn5 *..010{`5esn`:False Contains {`6esn`}}]->(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12}) Where 0X7 =~9e1 Unwind $7[0.12][usn1] As `6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From $`5esn`[{`3esn`}] As `8esn` Fieldterminator \"d_str\" Unwind {`3esn`}[..07][..{`5esn`}] As usn2 Create @usn6=Shortestpath((@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})-[`4esn`?:#usn7]->(`` :#usn8:#usn8)<-[?:`5esn`]->(:`3esn`:@usn5$7)),(({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))"),
    octest_legacy:ct_string("Load Csv From Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] As `7esn`  Merge _usn3=(#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})-[#usn7:@usn5 *0X7..]->(@usn5 :usn1{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}) On Create Set _usn3+=_usn3 Contains Count(*) Contains 12e12,Reduce(`3esn`=0Xa[2.12],#usn7 In {``} Is Not Null|$`3esn` In $`6esn` In $``).usn2? =123.654[`3esn`..],{@usn5:$`` =~12.0 =~$`7esn`,`7esn`:.e12 Ends With _usn4}.#usn8? ={12} Is Not Null Create Allshortestpaths((`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]})-[usn1:_usn3|_usn3 *..999{`2esn`:'s_str'[00][{`5esn`}],@usn6:999 Is Not Null Is Not Null}]-(:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})) Union All Merge `4esn`=((:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[`6esn`?:_usn4|:usn2 *1000..00{`6esn`:@usn5 In {`7esn`} In `2esn`,@usn5:0.0 =~999}]->(:usn1{usn2:7[..999][..{#usn8}]})) On Create Set _usn4 =Reduce(usn1={`6esn`} =~$999,`8esn` In 01[2.12..`8esn`]|9e1[1000][{123456789}]),Extract(`4esn` In $`3esn` Is Not Null Where `5esn` Starts With 010 Starts With 0.0|`7esn`[..{usn1}])._usn4! =None(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 123.654 Contains $`4esn` Contains 1.0) Starts With Reduce(_usn3={@usn5} Is Null Is Null,#usn8 In {`5esn`}[.e1..``]|{_usn3}[..\"d_str\"][..`5esn`]) Union With  All(`` In `` Is Not Null Is Not Null Where $_usn4 Starts With 1e1)[Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}})))][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)] As ``,Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`))[(:`5esn`{``:1.0[0e0..0.e0]})-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})] Order By `1esn`($123456789 Starts With 9e0 Starts With 's_str',{usn2}[.e0..$999])[{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}..Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {usn1} In 2.12 In 1000)][Case 0[`7esn`..] When 123456789 Is Null Then .e12 Is Not Null Is Not Null Else $@usn5 =~1000 =~1000 End..[`4esn` In $`3esn` Is Not Null Where `8esn`[{123456789}..]|{`3esn`}[`2esn`]]] Desc,(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]}) Is Not Null Is Not Null Descending Limit [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null Start `8esn`=Node:@usn6({_usn4}) Where `3esn`[`3esn`..][#usn8..]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From usn2(Distinct Null In $7 In .e1,`1esn` Contains {usn2} Contains $#usn8) In All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 2.12 Ends With $_usn3 Ends With `3esn`|{123456789} Contains $#usn8) As `5esn` Fieldterminator 's_str' Merge `8esn`=(_usn4 :usn2{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}) On Match Set #usn8+=`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(#usn7 :#usn8:#usn8{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}).@usn6? =01[{@usn5}] Remove None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `6esn` In 0Xa).usn2,Allshortestpaths((`` :#usn7))._usn4"),
    octest_legacy:ct_string("Detach Delete [`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\"] Is Null,$12[Null..Count(*)][{`5esn`}..{999}],{`3esn`} Unwind $12[`5esn`..] As `7esn` Union All Foreach(`3esn` In 010[Count(*)..12][$_usn3..{`8esn`}]| Create ``=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),@usn6=Allshortestpaths(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})))) Merge Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01})))) On Match Set None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $12[True..][{0}..]).usn1! ={123456789} Is Not Null,`5esn`+=Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])],{`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}.usn1 ={`3esn`}[..07][..{`5esn`}] On Create Set None(`2esn` In `1esn` =~\"d_str\" Where $`1esn`[1.0..][_usn3..]).`1esn`? =.e12 Contains 0X7 Contains {0} Delete 123456789[$1000..$#usn7],0.e0[#usn8]"),
    octest_legacy:ct_string("Match (((usn2 {``:01[{@usn5}]})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[`6esn`? *0..]-(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12}))) Using Join On `5esn`,`6esn`,`2esn` Using Index `5esn`:`2esn`(`5esn`) Union All Foreach(`` In $``| Optional Match `2esn`=((`5esn` :_usn4{7})<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)) Using Scan `1esn`:usn2 Where {@usn5} Is Null Is Null) Detach Delete 0.0 =~0 =~`6esn`,@usn5 In $7,{`7esn`}[..$@usn5][..$#usn8] Return Distinct *,{`3esn`:{@usn6}[{999}..][00..]}[count(Null Ends With {`5esn`} Ends With 0.e0,{usn1} In 2.12 In 1000)][All(`` In `` Is Not Null Is Not Null Where Count(*)[..usn2][..usn2])],9e1[..$`2esn`] As `` Skip 0X7[{@usn6}] Limit {`2esn`} In 12 Union Merge #usn8=(_usn4 :`2esn`:usn1{_usn3:0.e0 Starts With `2esn`}) Unwind $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] As `5esn` Match `3esn`=(({`1esn`:$`8esn`[1000..0Xa]})),`4esn`=Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]})))"),
    octest_legacy:ct_string("Create #usn7=Shortestpath((`2esn` :usn1)<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(`3esn` :`8esn`:`7esn`)<-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(`` :`2esn`:usn1)),usn2=Shortestpath(({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`4esn`} Ends With {usn2} Ends With {999} As _usn4  Remove Extract(`4esn` In $`3esn` Is Not Null Where Null Ends With {`5esn`} Ends With 0.e0|0X0123456789ABCDEF[123456789]).`4esn`? Remove [`2esn` In `1esn` =~\"d_str\" Where usn2 Ends With 999 Ends With .e1|9e0[..999]].`4esn`,Case When usn1 In 7 In {123456789} Then `5esn`[_usn4..] When `7esn`[9e0..] Then {`3esn`} In 01 End.`4esn`"),
    octest_legacy:ct_string("Delete Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},Shortestpath(((:`8esn`:`7esn`$#usn7)-[`5esn`:`8esn`]->(#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]}))) In [_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..]|1.0 Is Null Is Null] In Case When Count ( * ) Contains 07 Then 123.654[$`1esn`] End,$123456789 Is Null Is Null Unwind `7esn`(usn2 Is Null)[Case {usn1}[0X0123456789ABCDEF] When $`` Then `8esn` Contains $usn1 Contains $12 Else 's_str'[00][{`5esn`}] End] As @usn6 With  *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Order By Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] Ascending,All(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Contains (`5esn` :_usn4{`5esn`:07[..True][..9e12]})-[`8esn`?:`2esn`{@usn6:{12}[..0X7]}]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00}) Contains [0.12[$`3esn`..$_usn3][12.0..usn1]] Ascending Skip {_usn4} In {12} In $0 Where {7}[..12e12][..Count ( * )]"),
    octest_legacy:ct_string("With Distinct [`5esn`[{`4esn`}..`2esn`],Null Ends With {`5esn`} Ends With 0.e0,010[#usn7..True]] Contains [`3esn` In {7} Is Null Where {usn2}[.e0..$999]|Count ( * ) Contains `8esn` Contains .e1] Contains Reduce(``=@usn5 In {`7esn`} In `2esn`,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{_usn4}[1000..{@usn5}]) As `3esn`,{7}[$7..$``][{``}..{7}] As usn2,{1000}[{_usn3}..] As #usn7 Skip Shortestpath((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})) Contains [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``|.e12 Is Not Null Is Not Null] Limit $`6esn` Ends With Count(*) Where `4esn`[`5esn`..12][@usn6..False] With Distinct *,0.0 =~999 As `4esn` Limit 9e1[..$`2esn`] Where $#usn8[9e12..][.e1..] Union Merge `2esn`=Allshortestpaths(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Match `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) Where False =~1e1 =~0.e0 Create Unique `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),`2esn`=Shortestpath(({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})) Union Remove $`1esn`._usn3,{`2esn`:$#usn7[#usn7..],_usn4:'s_str' Is Not Null Is Not Null}.@usn6 Start `5esn`=Relationship(*)  Unwind (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} As `1esn`"),
    octest_legacy:ct_string("Remove Reduce(#usn7=0Xa[2.12],`4esn` In $`3esn` Is Not Null|usn1 Is Not Null).`5esn`,None(`4esn` In $`3esn` Is Not Null Where {`4esn`}[$123456789..][$#usn7..]).`3esn`! Load Csv With Headers From $usn2[$`2esn`..`4esn`] As `2esn` "),
    octest_legacy:ct_string("With Distinct *,`1esn` Contains {usn2} Contains $#usn8,$`3esn` In $_usn4 In {_usn3} As `4esn` Where $`4esn`[Null..]"),
    octest_legacy:ct_string("Remove [_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`|.e1[..usn2][..`8esn`]].@usn6?,[{usn1} Is Null Is Null].`5esn`"),
    octest_legacy:ct_string("Create Unique usn1=Allshortestpaths(((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))) Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0 Create Unique usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) Union All Create `4esn`=Allshortestpaths(((usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]})<-[`2esn`?:`7esn`]->(`7esn` {`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}))) Create Shortestpath((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`6esn`?:_usn4|:usn2 *1000..00{`6esn`:@usn5 In {`7esn`} In `2esn`,@usn5:0.0 =~999}]-(usn2 :_usn4)-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))),(:`8esn`:`7esn`) Union All Remove All(`2esn` In `1esn` =~\"d_str\" Where 0e0 Ends With 1.e1 Ends With $`4esn`).`8esn`?,(_usn4 :usn1)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(_usn3 {#usn8:_usn4 Is Null Is Null}).usn2?"),
    octest_legacy:ct_string("Return {`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null} Starts With Extract(`5esn` In $999[0.0..] Where Count ( * ) Contains {`1esn`} Contains 07|`3esn`[..$12][..{`7esn`}]) Starts With None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where `7esn`[..2.12][..{usn1}])"),
    octest_legacy:ct_string("Detach Delete {#usn8} Contains 0.0 Contains Count(*),{0} Contains 0.0 Contains $@usn5 Start `3esn`=Node:usn2(#usn8=\"d_str\") Where `7esn`[$0][9e12] With  12.e12[`3esn`] As #usn7,{12} Ends With 1.0 Ends With .e0 As `5esn` Skip {@usn5:usn1[`5esn`..$7],@usn6:{123456789} Is Not Null} In None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) In `7esn`(Distinct {_usn4} Ends With `6esn`,{@usn6}[7]) Limit False =~1e1 =~0.e0 Union Create Unique `2esn`=(((`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(@usn5 {usn2:0.e0[123.654][01]}))),((`3esn` :_usn3:_usn3{@usn5:False})-[?*]-(`2esn` :`8esn`:`7esn`{`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})<-[?:`2esn` *00{@usn6:usn1[`5esn`..$7],`3esn`:{`7esn`}[..$@usn5][..$#usn8]}]-(:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})) Load Csv From Allshortestpaths((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}))))[{`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null}][Allshortestpaths(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))] As `2esn` "),
    octest_legacy:ct_string("Remove Reduce(@usn5=#usn7,`4esn` In $`3esn` Is Not Null|0[`7esn`..]).usn1? Start #usn8=Node:usn1(@usn6={`5esn`})  Merge `5esn`=Shortestpath(((@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[? *..12{#usn8:`5esn` Is Null,#usn8:`1esn`[{usn1}..``][7..$#usn8]}]-(`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}))) On Create Set Reduce(`3esn`=0e0 Starts With 2.12 Starts With $12,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{_usn4} In {12} In $0).usn2? =.e12[$usn2..][12.e12..],_usn4+=Reduce(`1esn`={0} In $_usn3,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{``} Ends With `7esn` Ends With 0.0) Is Null Is Null Union Merge @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`) Load Csv From `5esn`[{`4esn`}..`2esn`] As `8esn` Fieldterminator \"d_str\" Detach Delete False Starts With {`5esn`} Union All Create Unique (:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3) Merge `4esn`=(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}) On Create Set `5esn` =$`` Is Not Null,{usn2:usn2 Is Not Null Is Not Null}.usn1? =Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null,[{_usn4}[...e1][..$7],_usn4 Starts With $_usn4 Starts With 12.e12].#usn8? =0X7[0e0..`7esn`][1000..0e0] Load Csv With Headers From $_usn4[1.0..{#usn7}][9e1..$`1esn`] As usn2 "),
    octest_legacy:ct_string("Create `4esn`=((@usn5 :`6esn`)) Unwind usn2 As `5esn` Union Delete 010 In Count(*),Count(*)[..usn2][..usn2] Unwind `3esn`[$`1esn`..999][``..$123456789] As usn1 Union All With  *,12[..$`4esn`],Case When 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Then {1000} =~0 =~123.654 When `8esn`[`4esn`..{#usn8}][$12..2.12] Then 00[$`7esn`] End Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`7esn` =~{`8esn`} =~$usn1) Contains [0.12 =~`5esn` =~`5esn`] Return *,{12} Is Not Null As `7esn` Skip 9e12 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Unwind Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})] As `3esn` Union All Create Unique ((({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]})-[_usn4]-(:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[`1esn`? *1000..00{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}]->(_usn4 {usn1:True Contains {0} Contains 7}))),Shortestpath((:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:#usn7 *..010]->(#usn8 :usn1)) Create Unique `8esn`=Allshortestpaths(((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}))),Allshortestpaths((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}))"),
    octest_legacy:ct_string("With Distinct True =~010 Order By _usn4 Contains 0e0 Descending Where $_usn4[1.e1]['s_str'] Union All Optional Match Shortestpath(((({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`4esn`]->(:`6esn`$123456789)))) Using Join On `1esn` Using Join On `4esn`,`8esn`,`6esn` Where False =~1e1 =~0.e0 Union All Load Csv With Headers From .e12 Ends With $`2esn` Ends With {``} As _usn3 "),
    octest_legacy:ct_string("Foreach(`5esn` In \"d_str\" Contains {123456789} Contains 01| Match #usn7=({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]}),Allshortestpaths((_usn4 :usn1)<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) With Distinct .e12[..`7esn`][..0Xa],123.654 Is Not Null Is Not Null As `8esn`,All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By {usn2} Descending,1.0 =~7 =~{usn2} Desc Skip 0.0[$0][{@usn5}] Where _usn3 Contains $123456789 Contains ``) Delete $`7esn` Is Not Null,`2esn`(Distinct $``,7 Starts With {@usn6} Starts With $``) Contains {@usn6:_usn3[$`8esn`],usn1:$@usn5 Is Not Null} Contains {@usn5:`8esn`[{123456789}..]},Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]) In Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null) In Filter(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {#usn8}[.._usn4][..$`3esn`]) Union Match `6esn`=((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`7esn`? *7..12]->({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})),#usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})) Using Index @usn5:`2esn`(@usn5) Where $123456789 Ends With $999 Ends With {999} Delete {_usn4} =~$_usn4 Union Detach Delete $`1esn` =~0X7,.e0 Ends With 0.12,0e0[`8esn`..][$123456789..] Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8?"),
    octest_legacy:ct_string("Remove Extract(`5esn` In \"d_str\" Is Null Is Null Where 9e12[{123456789}..#usn8][{_usn3}..{#usn7}]|01 =~{_usn3} =~`3esn`).`1esn`! Match usn2=(_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]}),`6esn`=((@usn6 :`1esn`)<-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})) Load Csv From usn2[9e12] As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Foreach(@usn5 In $@usn5 Starts With #usn7| Create Unique @usn6=Allshortestpaths(((@usn5 :`4esn`))),`2esn`=((($#usn8)-[:#usn7{`2esn`:.e12 Ends With _usn4}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})<-[?:#usn8|`1esn` *..010{``:usn1 Starts With usn1 Starts With $``}]->(:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})))) Union All Return Distinct 9e1 Starts With {`5esn`} Starts With Count ( * ) As _usn3,Count ( * )[$_usn4..$`4esn`] As _usn4 Order By Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null Asc Skip $`1esn`[1.0..][_usn3..] Limit $`3esn` In $`6esn` In $`` Create usn1=Shortestpath(((:``:#usn8$`3esn`))) Union Start `5esn`=Relationship:`3esn`('s_str') ,@usn5=Node:_usn4(`5esn`='s_str') Foreach(usn2 In 123.654[{_usn3}..1.0]| Return [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..]) As `1esn`,0.0[Null][$`2esn`],`6esn` Is Not Null Is Not Null As `3esn` Skip (usn2 :_usn4)-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})[$`2esn`]) Create Unique Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`}))"),
    octest_legacy:ct_string("Optional Match _usn3=Shortestpath((:`3esn`:@usn5{`2esn`:{`3esn`}[..07][..{`5esn`}]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})),Allshortestpaths((`5esn` :`4esn`)) Return Distinct #usn8 Starts With $_usn4 Starts With $7 As `6esn` Order By $0[$`1esn`..07] Descending Skip 9e1 Is Not Null Union Delete {`7esn`}[0e0][1.e1] Create usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) Merge Allshortestpaths((`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})) Union All With Distinct *,Reduce(usn1=$123456789 Is Null Is Null,_usn3 In {`3esn`}[`2esn`]|Null[$`5esn`][False])[Case 0e0 Contains Null When 0X7[`7esn`][123.654] Then 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] End..][[9e1[$usn2],{`4esn`}[$123456789..][$#usn7..]]..],01234567 Is Null Is Null Order By @usn6 Contains Null Contains $`7esn` Ascending Where 123.654 Contains $`4esn` Contains 1.0 Detach Delete $`2esn`,0e0 In @usn5"),
    octest_legacy:ct_string("Foreach(usn2 In $12[True..][{0}..]| Return Distinct 0X7[1000..{`1esn`}] As `3esn`,$`2esn`[12.e12..][{`4esn`}..] Order By 0.0 =~999 Asc,$`5esn` In 0.e0 Asc,{`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Ascending Limit Count ( * ) Is Null Load Csv With Headers From {1000}[$`4esn`][\"d_str\"] As _usn3 ) Create Unique (:``:#usn8{_usn3:$`7esn` Is Null Is Null}),`5esn`=Shortestpath((((@usn5 :_usn4{#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})))) Remove [`2esn` In `1esn` =~\"d_str\" Where usn2[9e12]|usn2 Ends With 999 Ends With .e1].`5esn`,(`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]})-[ *7..12{`2esn`:.e12 Ends With _usn4}]->(:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})._usn4?,Extract(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`|1e1 In 123.654 In `3esn`).`6esn`!"),
    octest_legacy:ct_string("Start _usn4=Relationship( {usn1})  Merge Shortestpath(((`5esn` :_usn4{7})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}))) Unwind `7esn` In 00 As `` Union All Foreach(`2esn` In $1000 In $1000 In $`3esn`| Optional Match _usn3=Allshortestpaths((`7esn` :`5esn`)<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})),Allshortestpaths((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`)) Using Index `8esn`:`1esn`(@usn5)) Load Csv With Headers From Single(#usn8 In 7[..999][..{#usn8}] Where $_usn3[.e0..$usn2])[Reduce(`8esn`=$#usn8 Ends With $`2esn` Ends With $@usn6,`2esn` In `1esn` =~\"d_str\"|$`8esn`[1000..0Xa])][[$123456789 =~{`6esn`} =~\"d_str\",01234567 Ends With .e12 Ends With $#usn7]] As `` Fieldterminator 's_str' With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Skip 01 Ends With 999 Ends With {`7esn`}"),
    octest_legacy:ct_string("With  *,$12[True..][{0}..] Order By Case `1esn`[{usn1}..``][7..$#usn8] When {0} Ends With $_usn3 Ends With $`7esn` Then $7[{usn2}..][{usn2}..] When 12.0[123.654][Count(*)] Then Count ( * ) Ends With 12.0 Else 01234567[usn2..$12][{`7esn`}..$usn2] End Is Not Null Descending Where {_usn4} Ends With `6esn` Start `1esn`=Node:usn2({12}) ,`5esn`=Node:#usn7(@usn6={#usn8})Where `7esn` In {123456789} In `1esn` Union All With Distinct *,{``}[$#usn8..$usn1] As `3esn` Order By $usn2[$`2esn`..`4esn`] Ascending,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12] Asc,True[{_usn4}..][False..] Ascending Where \"d_str\" Contains {123456789} Contains 01 Unwind 2.12 Is Not Null Is Not Null As usn1 Load Csv From {``}[...e12] As `1esn` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete `1esn`({`2esn`} Ends With {`7esn`},{`2esn`} Starts With 0.0 Starts With {usn1})[Extract(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {_usn4} Starts With 0.e0 Starts With 0x0)] Create Unique #usn8=({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789) Union Load Csv From [`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`]|`8esn` Contains $usn1 Contains $12][Filter(_usn3 In {`3esn`}[`2esn`] Where #usn7 Contains _usn3 Contains {`3esn`})..(:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[usn2?:`7esn` *123456789..{_usn4:$@usn5 Starts With {0} Starts With 12,`2esn`:{7}[..12e12][..Count ( * )]}]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})] As `6esn` Fieldterminator \"d_str\" With Distinct $7[{123456789}] As `6esn` Order By _usn4 Starts With $_usn4 Starts With 12.e12 Descending Skip \"d_str\" Ends With {`2esn`} Ends With usn2 Limit Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}] Union Remove [`5esn` In $999[0.0..] Where {7}[..12e12][..Count ( * )]]._usn4!,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|usn1 Is Not Null].`2esn`!,Reduce(@usn6=usn2[{7}],#usn8 In {`5esn`}[.e1..``]|{7}[..1.0][..9e0]).#usn7! Return Distinct 12.0 Ends With True Ends With 123456789 As #usn7 Order By {`7esn`} Ends With `4esn` Ends With {@usn5} Ascending,9e1[0.0..] Ascending,[0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]] Desc Skip 1.0 =~'s_str' =~{`2esn`} Limit `8esn`[$#usn7..123456789] Create Unique #usn8=((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})),``=(({``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}}))"),
    octest_legacy:ct_string("Start @usn5=Relationship:@usn5({1000}) Where $_usn4 Starts With 1e1 Unwind $1000 In $1000 In $`3esn` As usn2"),
    octest_legacy:ct_string("Return Distinct `4esn` =~$`5esn` As usn1 Order By True Contains {0} Contains 7 Ascending Start `1esn`=Rel:_usn4(``={#usn7})  Remove Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`2esn`} Is Not Null).`3esn`,{`6esn`}.#usn7? Union All Remove Case When 01 Contains {`8esn`} Contains 2.12 Then $_usn3[Count(*)] Else {`3esn`}[@usn6..0Xa][{12}..0Xa] End.`5esn`!,[#usn8 In 7[..999][..{#usn8}] Where {`5esn`} Contains $0 Contains {``}|#usn7 Starts With {#usn7} Starts With `7esn`].`1esn`? Foreach(usn2 In {@usn6} Is Null Is Null| Remove `3esn`(False Starts With {`5esn`},0[{usn2}..][$`6esn`..]).usn2? Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0)"),
    octest_legacy:ct_string("Match `5esn`=Shortestpath((_usn3 :#usn7)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})),((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}})) Using Index `8esn`:@usn6(`5esn`) Where `5esn` Starts With `3esn` Load Csv With Headers From {12} Is Not Null As _usn4 Fieldterminator 's_str' Match `7esn`=(@usn6 :`6esn`)-[`6esn`?:#usn7]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}),(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))) Union Foreach(usn2 In {usn2:0X0123456789ABCDEF[123456789]}[[0e0 Starts With 1000 Starts With #usn7,True =~010,$usn2[{@usn5}]]..]| Start #usn7=Rel:@usn6(`7esn`={`8esn`}) ,`3esn`=Node:@usn6('s_str')Where 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Remove Reduce(_usn3=12e12 Is Not Null Is Not Null,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|`7esn` Starts With $#usn7 Starts With $`7esn`).`3esn`?"),
    octest_legacy:ct_string("Delete 7[True..][2.12..] Union Delete 7 =~{`8esn`} =~$`6esn` Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),_usn3=(#usn8 {`2esn`:$`5esn`[..$`5esn`][..$12]})-[#usn7:@usn5 *0X7..]->(@usn5 :usn1{`2esn`:.e1[{`7esn`}..{_usn4}],`1esn`:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[?:`2esn` *00]->(`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}) Using Index `6esn`:@usn5(`2esn`) Using Scan _usn4:@usn6 Where {123456789} Contains $#usn8 Union Load Csv With Headers From $@usn6 Ends With $_usn4 Ends With 0.12 As `` Fieldterminator \"d_str\" Foreach(`8esn` In [$`1esn` =~0X7] =~[{7}[..1.0][..9e0],7 Is Not Null Is Not Null] =~{_usn3:`1esn` Contains {usn2} Contains $#usn8}| Return Distinct .e0 Ends With 0.12,{`1esn`:$7[0.12][usn1],@usn6:$12[$1000..123456789]}[Case 9e0[{0}..{`3esn`}][\"d_str\"..0Xa] When `1esn`[..{@usn6}][..$123456789] Then `3esn`[{`2esn`}] End..[`3esn` In {7} Is Null Where {123456789} Contains $#usn8|#usn7 =~Count ( * ) =~``]][`7esn`(9e1[1000][{123456789}]).._usn3(0.12 =~$0 =~$0)] As `8esn`,{`6esn`} =~$999 As usn1 Skip {`4esn`}[#usn7..$123456789][{7}..usn2] Limit Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Starts With {#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0} Remove 2.12.`7esn`!,{`1esn`:$0[..9e1]}.usn2!,Reduce(usn2=#usn7 Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|{_usn3}[12.e12]).@usn6?) Create Unique ``=Shortestpath((`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null}))"),
    octest_legacy:ct_string("Detach Delete `1esn` In .e0 In {`3esn`} Load Csv From `5esn`[..Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`])] As _usn4  Union Start usn2=Rel:usn2({`4esn`}) Where _usn3[_usn3..][12.e12..] Unwind All(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null) As ``"),
    octest_legacy:ct_string("Return Distinct 12.e12[`3esn`] As #usn7,{12} Ends With 1.0 Ends With .e0 As `5esn` Skip {@usn5:usn1[`5esn`..$7],@usn6:{123456789} Is Not Null} In None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) In `7esn`(Distinct {_usn4} Ends With `6esn`,{@usn6}[7]) Limit False =~1e1 =~0.e0 Optional Match Allshortestpaths(((`7esn` :`5esn`{`3esn`:`7esn` Is Null})<-[`5esn`?:`4esn`]-(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]}))),`1esn`=((`8esn` )) Detach Delete [False] In Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Union All Remove Case When 01 Contains {`8esn`} Contains 2.12 Then $_usn3[Count(*)] Else {`3esn`}[@usn6..0Xa][{12}..0Xa] End.`5esn`!,[#usn8 In 7[..999][..{#usn8}] Where {`5esn`} Contains $0 Contains {``}|#usn7 Starts With {#usn7} Starts With `7esn`].`1esn`? Foreach(usn2 In {@usn6} Is Null Is Null| Remove `3esn`(False Starts With {`5esn`},0[{usn2}..][$`6esn`..]).usn2? Detach Delete Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})],Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))),12 Ends With 0x0 Ends With 0.e0) Union All Return Distinct Reduce(`1esn`={0} In $_usn3,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{``} Ends With `7esn` Ends With 0.0) Is Null Is Null As `3esn` With  *,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn`,`5esn` Is Null Order By $`5esn` Ends With Reduce(#usn8=$#usn7 Is Null,`4esn` In $`3esn` Is Not Null|12.e12[`3esn`]) Ends With Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) Desc,count(`1esn` Contains {usn2} Contains $#usn8) Contains [`5esn`[7][{usn2}],@usn5 Is Null] Desc,Case When $#usn7 Contains 0x0 Contains 1000 Then {123456789} Is Not Null When $#usn7 Contains 0x0 Contains 1000 Then usn2[$_usn4..][True..] End Is Null Is Null Asc Limit `5esn`[{`4esn`}..`2esn`] Unwind 0x0[`4esn`..'s_str'] As `6esn`"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn7 Is Not Null Is Not Null As #usn8  Delete `2esn`[{`4esn`}][$_usn3]"),
    octest_legacy:ct_string("Start `2esn`=Node:@usn5({`1esn`}) ,`1esn`=Rel:``({`1esn`}) Create `2esn`=((@usn5 :`7esn`:_usn3)),#usn8=Allshortestpaths(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null}))"),
    octest_legacy:ct_string("Create Unique `4esn`=((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})),_usn3=((#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})) Union Remove (`1esn` :_usn3:_usn3)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null}).`3esn`!,Case When {7} Is Null Then .e1[{`7esn`}..{_usn4}] When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` End.`6esn`? Create Unique ``=(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))),`1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})) Create Unique `8esn`=((:@usn6:#usn8)<-[`1esn`?:usn2|``]-({@usn5:{usn2}[.e0..$999]})) Union Merge Shortestpath((:usn1{usn2:7[..999][..{#usn8}]})-[?:#usn7 *01234567..0Xa]->({``:$`8esn` =~{1000}})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})) On Create Set `8esn`(00 Starts With 0xabc,{12} Is Not Null).`6esn`! =$12 Ends With 07 Ends With $123456789,`3esn` ='s_str' Ends With 7 Ends With {_usn4},``(0X7 =~9e1,0.0 =~999).`3esn`! =$1000[Null][`4esn`] With Distinct $123456789 Ends With {`1esn`} Ends With $`4esn`,$`8esn`[..{`2esn`}],Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] Order By `5esn`[_usn4..] Ascending Limit [`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] Where $_usn4[0e0..][False..] Remove `6esn`({1000}[{_usn3}..],0.12 =~$0 =~$0).``"),
    octest_legacy:ct_string("With  *,Case When usn1 Is Not Null Then $0[12.e12..] Else 7[{0}..{_usn4}] End[..Reduce(_usn3={@usn5} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{usn1}[0X0123456789ABCDEF])] Order By 0.e0 Ends With $#usn7 Ends With $7 Descending Skip 0Xa Starts With `7esn` Starts With $`1esn` Where 0.e0[#usn8] Union Remove Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 0.0[$0][{@usn5}]).@usn6!,{`6esn`:Count(*) Ends With 12.0 Ends With 12}.`2esn`?,Reduce(`8esn`='s_str' Ends With 7 Ends With {_usn4},#usn7 In `2esn`[..$#usn8][..Count(*)]|$123456789 Ends With `3esn` Ends With 123456789).#usn7 Union Delete 00[{`8esn`}..][{`8esn`}..]"),
    octest_legacy:ct_string("Start ``=Rel:`7esn`(usn2={`6esn`}) Where $_usn3[..1000]"),
    octest_legacy:ct_string("Load Csv With Headers From 9e1 Ends With {usn2} Ends With True As @usn6 Fieldterminator 's_str' Foreach(`2esn` In $0 Ends With 12.0| Detach Delete 123456789[$1000..$#usn7],#usn8 Is Not Null) Remove Reduce(_usn3=$@usn5 Is Not Null,`3esn` In {7} Is Null|123.654[True..$#usn8][0.12..Count(*)]).`2esn`,True._usn4?,@usn6:`5esn` Union With  {``}[`8esn`..],{`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Limit `8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Where 123.654[0e0..$``][$`1esn`..$`8esn`] With Distinct 1e1 Contains Count ( * ) As `8esn`,[0x0[{`7esn`}..][$usn2..],{`4esn`} =~{7} =~{`7esn`},usn1 In 7 In {123456789}] Is Null Is Null Skip 010 In Count(*) Limit {1000}[_usn3][$123456789] Where $`` Delete $123456789 Starts With {_usn4} Starts With $1000,`` Ends With 0Xa Ends With `2esn`,Case {999} Is Null Is Null When 1000[Null..{123456789}] Then 9e12[`6esn`..12.0] Else `` Ends With $1000 End[Reduce(`2esn`={`3esn`} In 0X7,_usn3 In {`3esn`}[`2esn`]|$`5esn`[{`3esn`}])..(@usn5 {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})] Union All Delete Case When `4esn`[`5esn`..12][@usn6..False] Then $123456789 Ends With $999 Ends With {999} When $123456789 Ends With $999 Ends With {999} Then False Is Null Is Null Else 7[True..][2.12..] End Starts With [`8esn` Ends With 999 Ends With .e12] Starts With (`5esn` :`4esn`)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(`7esn` :`5esn`{`3esn`:`7esn` Is Null}),Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)],Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null Return $12[True..][{0}..] As _usn3"),
    octest_legacy:ct_string("Load Csv With Headers From (`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[@usn6 *..01{#usn7:@usn6 Contains $1000 Contains {`7esn`},@usn5:`2esn` Starts With $_usn4}]->(`6esn` :@usn6:#usn8) Is Not Null Is Not Null As usn2 Fieldterminator \"d_str\" Union Remove Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {_usn4} Is Not Null Is Not Null)._usn4?,[Null[$`5esn`][False]]._usn3,(`3esn` {@usn5:$usn2[9e0]})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}).`5esn`? Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Detach Delete $`3esn` In $_usn4 In {_usn3},$_usn3 =~0.12 =~{#usn8}"),
    octest_legacy:ct_string("With  *,00[`2esn`..12][123456789..0.e0] As `8esn` Order By {1000} In {@usn6} In @usn5 Descending Unwind 01234567 Ends With .e12 Ends With $#usn7 As `` Unwind 0.e0 Starts With 12.e12 Starts With {_usn4} As _usn3"),
    octest_legacy:ct_string("Remove usn1:`5esn` Load Csv With Headers From $_usn4 Contains Null Contains #usn8 As #usn7 Fieldterminator \"d_str\" Union Start _usn4=Node:``(\"d_str\") Where `6esn`[12..$usn2][{#usn8}..{usn2}] Remove (:usn2{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})-[`2esn`:`7esn`]-(`2esn` :usn1).`8esn`!,Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0xabc[01..{999}][{7}..{`7esn`}]|0 In `2esn` In 010).`1esn`!,{#usn8:$123456789 Is Null Is Null,`8esn`:Count ( * )[0.12...e1]}._usn4 Remove Filter(_usn3 In {`3esn`}[`2esn`] Where 010 =~{usn2}).`4esn`?,Case {#usn7} Is Not Null Is Not Null When 12e12 Ends With {usn1} Then `1esn` Ends With {_usn3} Ends With `2esn` End.`3esn` Union Remove [`5esn` In $999[0.0..] Where {7}[..12e12][..Count ( * )]]._usn4!,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|usn1 Is Not Null].`2esn`!,Reduce(@usn6=usn2[{7}],#usn8 In {`5esn`}[.e1..``]|{7}[..1.0][..9e0]).#usn7! Return Distinct 12.0 Ends With True Ends With 123456789 As #usn7 Order By {`7esn`} Ends With `4esn` Ends With {@usn5} Ascending,9e1[0.0..] Ascending,[0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]] Desc Skip 1.0 =~'s_str' =~{`2esn`} Limit `8esn`[$#usn7..123456789] Create Unique #usn8=((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})),``=(({``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}}))"),
    octest_legacy:ct_string("Delete Any(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\")[{_usn4:$_usn4[1.e1]['s_str']}..None(`5esn` In $999[0.0..] Where {``}[010..][0xabc..])],7[{0}..{_usn4}] Merge `7esn`=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))) Union Load Csv With Headers From Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[[_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]]..Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("With Distinct 1e1 In 123.654 In `3esn` As `8esn` Order By 123.654[{_usn3}..1.0] Descending,Extract(`2esn` In `1esn` =~\"d_str\" Where usn2[9e12]|#usn7 Starts With {#usn7} Starts With `7esn`)[..(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})][..Extract(`3esn` In {7} Is Null Where usn1 Is Null Is Null|12.0)] Ascending,All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Descending Limit Case When _usn4 Is Null Is Null Then Null[$#usn7] When $`2esn` Is Null Is Null Then $`3esn` =~{#usn8} End[(@usn5 :usn1)-[`2esn`:_usn4|:usn2]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})..Reduce(@usn5=`3esn`[{usn1}],`8esn` In 01[2.12..`8esn`]|`5esn` Starts With `3esn`)][Shortestpath((:``:#usn8{``:1.0[0e0..0.e0]}))..None(#usn8 In {`5esn`}[.e1..``] Where {_usn3}[..\"d_str\"][..`5esn`])]"),
    octest_legacy:ct_string("Create Unique #usn8=(`5esn` :`4esn`)<-[_usn4 *..999]->({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5}) Create ((usn1 :`6esn`)),`2esn`=((@usn5 :`7esn`:_usn3)) Remove Reduce(@usn5=Count ( * ) Contains {`1esn`} Contains 07,`2esn` In `1esn` =~\"d_str\"|`3esn` In $0 In `1esn`).usn2,{#usn8:1.0[0e0..0.e0]}.usn1,(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn` *0X7..{usn2:_usn3[$`8esn`]}]->(`8esn` :_usn4).@usn5 Union All Delete {12} Is Null Is Null,@usn5 In {`7esn`} In `2esn` Optional Match Shortestpath(((:#usn8:#usn8)-[usn2?:_usn4|:usn2 *..0x0$_usn4]->(:`2esn`:usn1{#usn8:`8esn` Contains $usn1 Contains $12}))) Using Join On #usn7,`4esn` Using Join On `1esn` Where _usn3 Contains $123456789 Contains `` Union Create ((@usn6 ))"),
    octest_legacy:ct_string("Merge @usn5=Allshortestpaths((:@usn6:#usn8{`7esn`:0x0[`4esn`..'s_str']})) On Create Set `7esn` ={1000}[$999...e12][`7esn`..'s_str'],_usn4 =[`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null On Create Set None(`1esn` In {`6esn`}[..$@usn6][..`7esn`]).@usn5? =12.0 =~{`2esn`} =~{`1esn`},@usn6 =Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null Remove Reduce(``=2.12 Contains usn2 Contains True,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|`4esn`[..Count ( * )][..{#usn7}]).@usn6?,[Null Ends With `2esn` Ends With $usn1,0X0123456789ABCDEF[123456789],0Xa[$123456789..123.654][.e12..0.e0]].`3esn`! Foreach(_usn3 In {0} Starts With @usn5 Starts With {`2esn`}| Match `4esn`=({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]->(_usn3 :`5esn`) Using Scan ``:_usn4 Where 0.e0 In $#usn7 In $_usn3) Union All Load Csv From usn2[9e12] As `8esn` Fieldterminator 's_str' Start @usn5=Node:#usn8(#usn7=\"d_str\") ,`8esn`=Rel:`1esn`(@usn5='s_str')Where {@usn6}[{999}..][00..] Delete 9e1[0.0..],{``} Ends With `7esn` Ends With 0.0 Union All With  Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip {`4esn`}[$123456789..][$#usn7..] Where `5esn` Starts With 010 Starts With 0.0 With  $`8esn`[1000..0Xa],({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(:@usn5)<-[`7esn`?:`8esn`]-({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}) Ends With $7 Ends With All(`` In `` Is Not Null Is Not Null Where 1000 In {`8esn`} In 01) As ``,usn1 Starts With $usn1 As `1esn` Order By Null[``] Descending,1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,$`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Desc Limit {`4esn`} Starts With 1e1 Where $123456789 Starts With 9e0 Starts With 's_str' Return *,Case When $_usn3[Count(*)] Then `7esn`[$0][9e12] When $1000[`2esn`..`5esn`][1e1..1.e1] Then 00[{`8esn`}..][{`8esn`}..] End[`7esn`(9e1[1000][{123456789}])],{12} Is Not Null"),
    octest_legacy:ct_string("Merge ({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}) Load Csv With Headers From 00[{`8esn`}..][{`8esn`}..] As usn2 Fieldterminator 's_str' Union Unwind $7[0.12][usn1] As `6esn`"),
    octest_legacy:ct_string("Merge #usn8=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`) On Create Set Case When `4esn`[`5esn`..12][@usn6..False] Then $123456789 Ends With $999 Ends With {999} When $_usn4 Is Not Null Is Not Null Then $`8esn` Else Null In $7 In .e1 End.@usn6! =$`` =~12.0 =~$`7esn`,{`6esn`:$usn1 Ends With $`` Ends With $12}._usn4? =$0 On Create Set Reduce(usn1=7[{0}..{_usn4}],`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$999 Is Not Null)._usn3 =@usn6 Contains `3esn` Contains {`2esn`} Delete 9e1 Ends With {usn2} Ends With True Load Csv With Headers From `5esn`(Distinct {_usn4} Ends With `6esn`,$`4esn` In Null In 0xabc) Ends With Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Ends With All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Unwind 123456789 Ends With 0.12 Ends With `` As _usn3 Remove [{12} Contains {123456789} Contains `4esn`,1.e1[`8esn`][00],1.0[$`1esn`..][$123456789..]]._usn4?,Reduce(_usn3=123456789[#usn8..False],_usn3 In {`3esn`}[`2esn`]|123.654 Contains $`4esn` Contains 1.0).#usn8? Remove Case When $#usn8 Ends With $`2esn` Ends With $@usn6 Then $1000[`2esn`..`5esn`][1e1..1.e1] Else {`4esn`} =~{7} =~{`7esn`} End._usn3?,{`8esn`:{usn2} =~12}.@usn5,`2esn`(Distinct 7[$`8esn`..123456789][$usn1..$usn1],1e1 In 123.654 In `3esn`)._usn4! Union All Return Distinct *,Allshortestpaths((((@usn6 :`3esn`:@usn5)<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null}))))[[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]..][[$`1esn` =~0X7]..] Order By $7[{123456789}] Ascending,@usn6 Contains Null Contains $`7esn` Ascending,``[12.0..0e0][{`5esn`}..`7esn`] Asc Limit True =~{`5esn`} Unwind $`8esn` =~{1000} As `3esn` With Distinct *,{usn2} In _usn3 In $#usn7 As `6esn`,usn2 Is Not Null Is Not Null Union All Unwind {``} Ends With 2.12 Ends With {`5esn`} As `1esn` Load Csv With Headers From {`2esn`}[``..07][0x0..1000] As `2esn` "),
    octest_legacy:ct_string("Start `8esn`=Rel:@usn6(`7esn`={`8esn`}) Where {@usn5} Is Null Is Null Return Distinct *,$1000[0Xa][{#usn7}],{usn1} Is Not Null Is Not Null Order By 0.e0[123.654][01] Desc,{`2esn`}[``..07][0x0..1000] Desc Skip Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})) Limit 0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) Union Create Unique `7esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)),`1esn`=Allshortestpaths((`` {usn2:9e0[..999],`2esn`:0e0 In @usn5})-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})) Load Csv With Headers From {`2esn`} In 12 As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Return Distinct *,Allshortestpaths((({@usn6:$usn1 Ends With $`` Ends With $12})<-[@usn6:#usn7*{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]}))) Contains Filter(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]) Contains Shortestpath(({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})) Skip $123456789[_usn3][{#usn7}] Limit {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}])"),
    octest_legacy:ct_string("Start @usn5=Node:#usn8(#usn7=\"d_str\")  Start `3esn`=Node:@usn6('s_str') ,`7esn`=Node:`4esn`(usn1=\"d_str\") Delete Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[[_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]]..Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End],Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null"),
    octest_legacy:ct_string("Merge #usn8=(_usn4 :`2esn`:usn1{_usn3:0.e0 Starts With `2esn`}) Unwind $12[..{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null}] As `5esn` Match `3esn`=(({`1esn`:$`8esn`[1000..0Xa]})),`4esn`=Allshortestpaths(((@usn5 :`1esn`{`3esn`:$1000 =~$`2esn`,#usn8:{999}[1000..{usn2}]})-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(@usn5 :`4esn`)<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]}))) Union With  Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0]|010 =~{usn2}) As `6esn`,'s_str'[$_usn3..][Count ( * )..] Delete {#usn8} Is Null With  {#usn8} Is Null As #usn8,12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],$`5esn`[$`4esn`..{@usn6}][07..$@usn6] As usn2"),
    octest_legacy:ct_string("Load Csv From Case usn2 Is Null When {#usn8}[.._usn4][..$`3esn`] Then 1.0 =~7 =~{usn2} When Null[$`5esn`][False] Then 0.12 =~`5esn` =~`5esn` Else .e0 Starts With 0 Starts With 0.e0 End[..usn2(Distinct 7[True..][2.12..])] As @usn6  Start usn2=Rel:#usn8(@usn6={_usn3}) ,`3esn`=Node:``(_usn3='s_str') Union Create Unique `3esn`=((`7esn` {`4esn`:{usn1} Ends With $0})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]-(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})-[`7esn` *..0x0]-(`2esn` :_usn4) With  *,{`4esn`}[{`5esn`}..$`6esn`] As `8esn` Skip 0X7 In $#usn7 In 1.e1 Detach Delete Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12) Union Create Unique Shortestpath(((:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})))"),
    octest_legacy:ct_string("Load Csv With Headers From 0X7 =~9e1 As usn1 Fieldterminator \"d_str\" Unwind Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null As @usn5 With Distinct $7[{123456789}] As `6esn` Order By _usn4 Starts With $_usn4 Starts With 12.e12 Descending Skip \"d_str\" Ends With {`2esn`} Ends With usn2 Limit Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}] Union All Start `7esn`=Node:_usn4(#usn7=\"d_str\")  Return Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7,{1000} =~$@usn6 =~12 Order By {_usn3:`4esn`[..Count ( * )][..{#usn7}]}[Any(_usn3 In {`3esn`}[`2esn`] Where 1e1 In \"d_str\" In `7esn`)..(:usn1{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[`2esn`:_usn4|:usn2]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[`6esn`{`6esn`:Count(*) Ends With 12.0 Ends With 12}]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})][Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7|123.654[{7}..])..Filter(`3esn` In {7} Is Null Where usn1 Is Null Is Null)] Asc Skip 0X7 In $#usn7 In 1.e1 Limit usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..] Create Unique `3esn`=Allshortestpaths(((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null}))) Union All Remove (_usn4 :#usn7{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-({`1esn`:`3esn`[{`2esn`}]}).`4esn`,()<-[`1esn`?:`8esn` *123456789..]->(:`1esn`{@usn6:$usn1 Ends With $`` Ends With $12})<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`).#usn8? Unwind Reduce(`6esn`=@usn5 Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{12} Ends With 1.0 Ends With .e0)[Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`|`7esn`[..2.12][..00])] As `` Remove Case When False[..``] Then `5esn`[.e0..][07..] End.`7esn`?,@usn6:_usn4"),
    octest_legacy:ct_string("Unwind Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] As `6esn` Load Csv From $usn2[{@usn5}] As @usn6 Fieldterminator \"d_str\" Detach Delete {`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000} Is Not Null Is Not Null Union Create `5esn`=(((:@usn6:#usn8{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(`4esn` {_usn4:0Xa =~Null =~$``})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0}))),Shortestpath((({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]})))"),
    octest_legacy:ct_string("Delete `5esn`[{`4esn`}..`2esn`] Match Shortestpath(((:#usn8:#usn8{_usn4})<-[usn1?:`7esn`]-(:usn1{usn1:{`6esn`}}))),Allshortestpaths((`5esn` :`8esn`:`7esn`{usn1:`5esn`[_usn4..]})) Where $#usn8 Contains $`1esn` Contains {`6esn`} Union All Create Unique _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),Allshortestpaths((_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`)) Load Csv With Headers From {`2esn`} Ends With 12.0 As _usn4 "),
    octest_legacy:ct_string("Load Csv With Headers From Reduce(`1esn`={0} In $_usn3,@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|{``} Ends With `7esn` Ends With 0.0) Is Null Is Null As `7esn` Fieldterminator \"d_str\" Return `6esn`[..$@usn6] As `` Order By Extract(#usn7 In {``} Is Not Null Where {@usn5}[{#usn8}][9e0])[Case $`3esn` In $`6esn` In $`` When {_usn3}[..\"d_str\"] Then `3esn`[{usn1}] Else {999} Starts With {0} End][usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])] Desc,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) Desc Limit Count(*) Contains $#usn7 Contains 1e1 Start `6esn`=Node:``('s_str') ,usn2=Relationship( {`5esn`})"),
    octest_legacy:ct_string("Match _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),({`4esn`:`7esn` Is Null}) Remove Any(#usn7 In {``} Is Not Null Where $1000[0Xa][{#usn7}]).`2esn`?,All(#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8).``! Create ((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`)),usn1=((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`))"),
    octest_legacy:ct_string("Create Unique Shortestpath((({usn2:7[..999][..{#usn8}]})))"),
    octest_legacy:ct_string("Start #usn8=Rel:`7esn`(`6esn`={_usn4}) ,@usn6=Rel:@usn6(usn1={999})Where {usn2} =~12 Create Unique _usn3=Allshortestpaths((`1esn` :_usn3:_usn3)<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[#usn8? *..07$_usn4]->({#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]})) Remove All(`2esn` In `1esn` =~\"d_str\" Where 0e0 Ends With 1.e1 Ends With $`4esn`).`8esn`?,(_usn4 :usn1)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(_usn3 {#usn8:_usn4 Is Null Is Null}).usn2?"),
    octest_legacy:ct_string("Create `8esn`=Allshortestpaths((`` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->(_usn3 {#usn8:_usn4 Is Null Is Null})),(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`8esn` :`8esn`:`7esn`) Union All With  Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn` Order By Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Ascending Skip Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[({#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})<-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(`2esn` :_usn3:_usn3)..][Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01}))))..] Where {`3esn`}[`2esn`] Union Match `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))) Using Scan `4esn`:usn1 Using Scan #usn8:`3esn` Merge (((:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]})<-[?:`5esn` *0xabc..]->(:`7esn`:_usn3)<-[#usn8?:usn1|@usn6]->(`` :_usn4{`4esn`:#usn8 Is Not Null Is Not Null,usn1:$`4esn`[Null..]}))) On Create Set usn1+=[`2esn` In `1esn` =~\"d_str\" Where 0e0 Ends With 1.e1 Ends With $`4esn`] =~[`3esn` In {7} Is Null Where `` Ends With $1000|1000[0X7..2.12]] =~Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} In 01) Start `7esn`=Node:`6esn`({_usn3}) ,_usn4=Node:@usn6({12})"),
    octest_legacy:ct_string("Merge (_usn4 :`4esn`)-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[`4esn`:`8esn` *00]->(`4esn` {``:{#usn8}[010],usn1:{``} Starts With $`2esn` Starts With `1esn`}) On Match Set `4esn`+=$_usn4 Starts With 1e1,_usn3 =(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}) =~Shortestpath(((`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[usn2?]-(`7esn` :`5esn`)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8}))) Match @usn6=Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))),`1esn`=((:usn1{`6esn`:2.12 Contains `1esn`,`1esn`:9e12[`6esn`..12.0]})<-[`3esn`? *..01]->(@usn5 :`5esn`)<-[? *..07]-(:`4esn`)) Union All Remove Filter(`5esn` In $999[0.0..] Where $`3esn`[..$123456789][..$`1esn`]).@usn6 Foreach(`3esn` In _usn3[..`8esn`][..2.12]| Load Csv With Headers From None(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null) Is Null Is Null As usn1 Fieldterminator 's_str') Union Return 123.654 Is Not Null Is Not Null As `8esn` Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc"),
    octest_legacy:ct_string("Create `6esn`=Allshortestpaths(((`6esn` :`5esn`{usn1:{`6esn`}}))) Remove (:usn2{`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2})._usn4?,[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {123456789} Contains $#usn8|@usn6[$`3esn`..{`3esn`}]].``!,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`).``? Union All Return All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By (`` :#usn7)<-[`1esn`?:usn1|@usn6 *0..]-(:#usn8:#usn8{@usn6:$_usn3[..1000]})[[`4esn`[..010][..{12}],0.e0 Starts With `2esn`,1000[..$0][..True]]..] Desc,0Xa =~Null =~$`` Ascending,Filter(`2esn` In `1esn` =~\"d_str\" Where 0e0 Starts With 2.12 Starts With $12) Ends With Single(_usn3 In {`3esn`}[`2esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12]) Desc Limit Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] Union Foreach(`8esn` In {#usn8}[$@usn5..usn1][$1000..0xabc]| Detach Delete Count(*) Contains $#usn7 Contains 1e1 Return Distinct *,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn`,`5esn` Is Null Order By Reduce(@usn6=$1000[999],`8esn` In 01[2.12..`8esn`]|#usn7 Is Null Is Null)[_usn3(0.12 =~$0 =~$0)..][count($12 Ends With 07 Ends With $123456789,`8esn`[{123456789}..])..] Desc Skip `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) Limit {@usn5} =~Count ( * ) =~12.0) Merge ((`1esn` :_usn3:_usn3)-[:#usn7 *..010]->(#usn8 :usn1)-[usn1? *1000..00]->(:`1esn`{})) On Match Set `1esn`+=Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] On Match Set All(`4esn` In $`3esn` Is Not Null Where 12[1.e1..{_usn3}][1.e1..1.0]).`1esn` =[`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]) Return *,{#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])][..(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],Case {#usn8} Is Null When .e1 =~$`8esn` Then \"d_str\"[..{@usn5}][..``] When {_usn3}[12.e12] Then 7 Ends With $`4esn` Else $123456789 Starts With 9e0 Starts With 's_str' End In [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] Order By {`2esn`}[$`4esn`][$`5esn`] Descending,7 Ends With $`4esn` Asc,$`8esn` Is Null Asc"),
    octest_legacy:ct_string("Create Unique _usn4=(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[ *..010{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}}]->(:_usn4$@usn5)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc}),(((usn1 :`7esn`:_usn3{_usn4:{999}})-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]-(:`1esn`{`4esn`:12e12 Ends With {usn1}})-[`3esn`:`7esn`{``:{0} In _usn4}]->(:`7esn`:_usn3{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0}))) Detach Delete {0} Contains 0.0 Contains $@usn5,Allshortestpaths((:@usn5{_usn3:07 =~01})) Starts With [`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`}] Starts With ({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:_usn4|:usn2]-(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}),$`6esn` Ends With Count(*) Union Foreach(usn2 In Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}]| Delete Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)] Return Distinct *,$#usn7 Contains 0x0 Contains 1000 As @usn5 Skip $7[{usn2}..][{usn2}..] Limit ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})[[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 0 In `2esn` In 010]..][{_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null}..]) Merge (_usn3 :#usn7)<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})<-[`4esn`?:_usn4|:usn2 *..01]-(`4esn` :@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]}) Union All Remove Case When 12e12 Contains 0Xa Then $`` =~12.0 =~$`7esn` End.`2esn`,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7).`8esn`?"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 00[$`7esn`] As `1esn`  Foreach(`4esn` In {999}[1000..{usn2}]| Delete `7esn` In {123456789} In `1esn` Return usn2 Is Null As `2esn` Skip {`3esn`:{@usn6}[{999}..][00..]}[count(Null Ends With {`5esn`} Ends With 0.e0,{usn1} In 2.12 In 1000)][All(`` In `` Is Not Null Is Not Null Where Count(*)[..usn2][..usn2])])"),
    octest_legacy:ct_string("With  *,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Order By {`3esn`} In $@usn5 In _usn4 Asc Skip $0[..9e1] Limit $usn1 =~`` Where 0e0 Starts With `2esn` Starts With $`` Union Foreach(@usn5 In 12.0[{123456789}..]| Detach Delete {`2esn`} Ends With 12.0) Unwind 's_str' In $usn1 In False As `6esn` Return Distinct *,$usn2[{@usn5}],0X7[1000..{`1esn`}] As `` Union All Detach Delete {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]],$`7esn`['s_str'],Reduce(`1esn`={`8esn`} Ends With `6esn`,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|1e1 In 123.654 In `3esn`)[[#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]]]"),
    octest_legacy:ct_string("Detach Delete Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12) Union All With Distinct 0x0[{`7esn`}..][$usn2..],Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `6esn`,12.e12 Is Not Null Is Not Null As #usn8 Skip 12.0[..9e0][..$``] Where {_usn3}[12.e12] Load Csv With Headers From Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[[_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]]..Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Detach Delete Count ( * ) Ends With $@usn5,$`5esn`[..$`5esn`][..$12] Union All Load Csv From 12 Ends With 0x0 Ends With 0.e0 As usn1  Create Unique Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),@usn6=(({_usn3:{_usn4} Is Not Null Is Not Null})<-[_usn4 *0..{_usn4:00[`2esn`..12][123456789..0.e0],`8esn`:0x0[`4esn`..'s_str']}]->()<-[``? *..01{`1esn`:$@usn6 Contains 07}]->(:#usn8:#usn8{@usn6:$_usn3[..1000]})) Merge `7esn`=((:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]})<-[``? *..0x0{#usn7:False =~$7 =~2.12}]->(`3esn` :usn2)) On Match Set Allshortestpaths((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})).`8esn`? =123456789 Ends With 12.e12 Ends With $`7esn`,{usn2:{`3esn`} In 0X7,_usn3:7 Starts With {@usn6} Starts With $``}.`8esn` =7 Ends With $`4esn`,All(#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]).@usn5! =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12])"),
    octest_legacy:ct_string("Merge _usn3=Shortestpath(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))) On Create Set `5esn`+=999 In {`3esn`} In usn2 On Match Set _usn4 =[`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null,@usn6+=Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 Contains 0X7 Contains $`8esn`) Is Not Null Is Not Null Delete Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})],Case $1000[999] When `4esn`[`5esn`..12][@usn6..False] Then {0} Ends With $_usn3 Ends With $`7esn` When $usn1 In {999} In $#usn7 Then Count ( * )[True..][{#usn7}..] End Ends With {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null},`7esn` In 00 Union With  *,(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[@usn6 *..01{#usn7:@usn6 Contains $1000 Contains {`7esn`},@usn5:`2esn` Starts With $_usn4}]->(`6esn` :@usn6:#usn8) Is Not Null Is Not Null As usn2 Order By $`1esn` Ends With 9e1 Ends With $123456789 Descending,(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}] Ascending,01[2.12..`8esn`] Ascending Match `7esn`=Allshortestpaths((({_usn3:$`5esn`[`3esn`..]})-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}}))) Using Scan _usn4:@usn6 Create `6esn`=((`2esn` :_usn4)),(((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}))) Union Match _usn3=(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})-[`8esn`?:#usn8|`1esn` *1000..00]->(:_usn4$@usn5)-[`7esn`:``{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}]->({_usn4:00 Starts With 0xabc}))) Where 00[{`8esn`}..][{`8esn`}..] Create Unique `5esn`=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null}) Return {7}[$``][{@usn6}] As `2esn` Order By {`4esn`:{`4esn`} =~{7} =~{`7esn`},`8esn`:$#usn7[#usn7..]} Is Null Is Null Desc,{123456789}[9e12][{0}] Ascending,$_usn3['s_str'][07] Ascending Skip [usn2[$_usn4..][True..],1.0 In Count(*)] =~Any(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12.0[123.654][Count(*)]) =~Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null)"),
    octest_legacy:ct_string("Create (:``:#usn8{``:1.0[0e0..0.e0]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[:``{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}]-({`2esn`:Count(*)[..usn2][..usn2]}) Load Csv From $usn2[{@usn5}] As @usn6 Fieldterminator \"d_str\" Union Return *,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Is Null Is Null,$`5esn`[$`4esn`..{@usn6}][07..$@usn6] Order By {`1esn`:{@usn6}[{999}..][00..]}[..`5esn`][..{#usn8:{`7esn`}[`6esn`][#usn7],`5esn`:$`4esn`[9e12..123.654]}] Ascending Skip [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null Create Unique (((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6}))) Remove Case When {``}[010..][0xabc..] Then usn1 Starts With usn1 Starts With $`` Else $#usn8 Ends With $`2esn` Ends With $@usn6 End.`6esn`?"),
    octest_legacy:ct_string("Foreach(@usn5 In usn2(Distinct 1e1 In 123.654 In `3esn`,@usn5 Is Null)[..(:@usn5{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[?:_usn4|:usn2]->({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null})][..[`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\"]]| Start `3esn`=Rel:`7esn`(`3esn`='s_str') ,``=Relationship:usn2(`3esn`='s_str')) With  *,2.12[$`5esn`][$#usn8] As #usn8 Order By Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0)[..Case When 01234567[usn2..$12][{`7esn`}..$usn2] Then usn1[`5esn`..$7] Else $1000[0Xa][{#usn7}] End][..Reduce(@usn6=07 Contains 0X7 Contains $`8esn`,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{#usn7}[9e1..][{123456789}..])] Descending,(:usn2{usn2:7[..999][..{#usn8}]})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Desc,{usn2} Starts With $`8esn` Starts With Count ( * ) Ascending Skip 2.12[$`5esn`][$#usn8] Remove None(`4esn` In $`3esn` Is Not Null Where `2esn`[..$#usn8][..Count(*)]).`3esn`,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where usn2[$7..$123456789][$@usn6..$7]).@usn6"),
    octest_legacy:ct_string("Remove [0Xa[7..2.12][`3esn`.._usn3]].`3esn`,Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]).@usn6,Extract(`8esn` In 01[2.12..`8esn`] Where 1e1 In 123.654 In `3esn`).#usn8! Union Create `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),Shortestpath(({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null})) Merge (`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) Start _usn4=Node:`4esn`(_usn4={123456789}) Where {_usn4} In {12} In $0 Union All Delete #usn8[`3esn`..][{#usn7}..],Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)],{0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] Start _usn4=Rel:#usn8(\"d_str\") Where $#usn8[9e12..][.e1..]"),
    octest_legacy:ct_string("Foreach(_usn4 In {`5esn`} Contains $0 Contains {``}| Unwind `8esn` Is Not Null Is Not Null As `8esn`) Merge ((`8esn` :`8esn`:`7esn`)<-[?:`8esn`{`3esn`:1.0 In Count(*)}]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7})) On Create Set Any(`8esn` In 01[2.12..`8esn`] Where {`3esn`}[`2esn`])._usn4! =$#usn8[..{`2esn`}][..1.0],#usn7+={@usn5:`1esn` =~0 =~$#usn7,usn2:{7} In `2esn`} Ends With ({`4esn`:{`4esn`} Ends With {usn2} Ends With {999}})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}) Ends With Case False[..``] When 0.12 Starts With $`5esn` Starts With 12 Then `4esn` =~$`5esn` When 's_str' In 00 Then $0[..9e1] Else 1e1 In \"d_str\" In `7esn` End Foreach(usn2 In 9e12[0.0..][$12..]| Start #usn8=Rel:`7esn`(`6esn`={_usn4}) Where {`3esn`} Is Not Null Is Not Null) Union All With Distinct {usn2:0X0123456789ABCDEF[123456789]}[[0e0 Starts With 1000 Starts With #usn7,True =~010,$usn2[{@usn5}]]..] Order By {`5esn`} =~`4esn` =~{_usn4} Ascending,{#usn7} In 0x0 In $0 Ascending,`7esn`[$12..][$`8esn`..] Descending Limit {_usn3} Is Null Is Null Start usn2=Node:_usn4(``={#usn7}) ,`3esn`=Rel:usn1(`6esn`={7}) Start _usn3=Rel:#usn8({_usn3}) Where 1.0 =~7 =~{usn2}"),
    octest_legacy:ct_string("Unwind #usn7 =~Count ( * ) =~`` As @usn5 With Distinct *,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Order By {`3esn`} In $@usn5 In _usn4 Asc Skip $0[..9e1] Limit $usn1 =~`` Where 9e0[..999] Merge usn1=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})-[`7esn`*]->(`7esn` {`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})-[@usn6]-(`5esn` {`4esn`:01 Is Null}))"),
    octest_legacy:ct_string("Create Unique Allshortestpaths((`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) Foreach(@usn5 In _usn3 Contains Count(*) Contains 12e12| Match Shortestpath(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))),usn2=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where 01234567 Ends With .e12 Ends With $#usn7 Load Csv From [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null As #usn8 Fieldterminator \"d_str\") Optional Match usn2=Shortestpath((`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})) Using Index `3esn`:_usn3(`6esn`) Using Index #usn8:`2esn`(`5esn`) Where 07[..$@usn6][..1.0]"),
    octest_legacy:ct_string("Create Unique ({`1esn`:`3esn`[{`2esn`}]}) Start @usn6=Relationship:@usn6(`4esn`='s_str') Where 7[$`8esn`..123456789][$usn1..$usn1] Start `5esn`=Rel:@usn6(`7esn`={`8esn`}) ,`3esn`=Relationship:#usn7('s_str') Union All With Distinct *,$1000 =~$`2esn` As `7esn` Limit 0.0 =~0 =~`6esn` Where 0e0[07] Union All Create (((:`5esn`{@usn6:2.12['s_str'..$12][{`1esn`}..`2esn`],``:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})-[@usn5?:#usn7 *1000..00]-(`` :_usn4{`1esn`:0.12 =~`5esn` =~`5esn`}))),``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))"),
    octest_legacy:ct_string("Unwind {usn1} In 2.12 In 1000 As `` Create Unique `3esn`=Shortestpath((`4esn` {`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}})) Union All With Distinct $@usn5,{`5esn`} Starts With @usn5 Starts With `7esn`,$1000 =~$`2esn` As `6esn` Skip 9e12[{123456789}..#usn8][{_usn3}..{#usn7}] Limit 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] Where `1esn` Contains {usn2} Contains $#usn8"),
    octest_legacy:ct_string("With  *,Filter(`4esn` In $`3esn` Is Not Null Where {`6esn`}) =~{_usn3:{`3esn`} Is Not Null Is Not Null} Skip $7 Ends With `4esn` Limit Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] Where $`7esn` Is Null Is Null Detach Delete [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}],Reduce(`4esn`=01 Ends With 999 Ends With {`7esn`},`4esn` In $`3esn` Is Not Null|1.0[`3esn`..][9e0..]) Is Null Is Null,$_usn3 In {1000} In 0.12"),
    octest_legacy:ct_string("With Distinct *,1e1 Contains 0e0 Skip @usn6 Contains Null Contains $`7esn` Limit $0 Where 0Xa Starts With {`6esn`} Starts With $usn1 Merge Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) On Match Set @usn5+=12 Ends With $usn2,@usn6 =Count ( * ) =~$usn2 =~$usn2,`` =12.0 =~1.0 =~9e12 Match #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Using Join On _usn4 Union All Return Distinct *,@usn6(`5esn`[.e0..][07..]) Is Null Is Null,Count(*) In $12 As @usn6 Order By 1.0[$`1esn`..][$123456789..] Ascending,``[12.0..0e0][{`5esn`}..`7esn`] Asc,$`8esn` Contains 123456789 Contains $usn2 Descending Skip `5esn`[..Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[`3esn`])] Limit $``[1.0] Create Unique `5esn`=Shortestpath((_usn3 :#usn7)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})<-[`5esn`? *..12{`8esn`:{`7esn`}[`6esn`][#usn7],`1esn`:0x0 Ends With $12}]->({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})),``=((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Union All Load Csv With Headers From count(`1esn` Contains {usn2} Contains $#usn8)[..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])][..Extract(_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]|`2esn`[..$#usn8][..Count(*)])] As `5esn`  Merge `3esn`=Allshortestpaths(((:usn1{_usn4})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5}))) On Create Set (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(:usn2{usn2:7[..999][..{#usn8}]}).`3esn` ={_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null}"),
    octest_legacy:ct_string("Return Distinct (:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}) =~Shortestpath(((`7esn` {@usn6:1.e1[$`1esn`..@usn6][$0..$_usn3]})-[usn2?]-(`7esn` :`5esn`)-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]->(:``:#usn8{`7esn`:00 Starts With 0xabc,_usn3:{123456789} Contains $#usn8}))),9e1[True] Order By $`3esn` In 123.654 In #usn8 Asc,Shortestpath((`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`))[(:`5esn`{``:1.0[0e0..0.e0]})-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})] Asc,{`2esn`} =~$`8esn` Ascending Skip Reduce(#usn7=`3esn`[{`2esn`}],`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|#usn8 Is Not Null)[(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(#usn7 {_usn3:`4esn`[..Count ( * )][..{#usn7}]})..None(`8esn` In 01[2.12..`8esn`] Where {usn2})] Start usn2=Node:`4esn`('s_str') ,@usn6=Rel:``(_usn3='s_str')Where `7esn` In {123456789} In `1esn` Union Optional Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Join On @usn5,`8esn` Using Join On ``,#usn7,`` Where 00[{`8esn`}..][{`8esn`}..] Load Csv From [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null] As _usn3 "),
    octest_legacy:ct_string("Start @usn5=Node:#usn7({_usn3}) ,@usn6=Relationship:@usn6(`4esn`='s_str')Where {``} Is Not Null Load Csv With Headers From {_usn4} Is Not Null Is Not Null As `5esn`  Union Create ``=(((`8esn` :#usn8:#usn8{_usn4:`8esn`[`4esn`..{#usn8}][$12..2.12]})-[#usn8]-(`6esn` :#usn7)<-[:#usn7 *..010]-(@usn6 :@usn5{usn2:$`5esn`[..$`5esn`][..$12]}))),({`8esn`:`3esn`[{0}][usn1]})-[_usn4?:_usn4|:usn2 *00]->(usn1 :@usn5{`2esn`:usn1 Starts With usn1 Starts With $``})<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8}) Start usn2=Node:`6esn`(usn2={`8esn`}) ,#usn8=Relationship:`8esn`(#usn8={`2esn`}) Create Unique Allshortestpaths((:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[`1esn`:_usn4|:usn2]-(`8esn` :`8esn`:`7esn`)),`2esn`=Shortestpath((#usn8 :@usn6:#usn8)) Union Start `7esn`=Rel:_usn4(``={#usn7})  Create Unique usn2=({@usn5:usn1 Is Not Null})<-[`3esn`:`6esn`|`5esn` *..12{usn1:0X0123456789ABCDEF Is Null Is Null}]-(:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False}),`4esn`=(#usn7 :`8esn`:`7esn`) Detach Delete {`4esn`}[#usn7..$123456789][{7}..usn2]"),
    octest_legacy:ct_string("Unwind 9e0[123.654][01] As `` Union All Load Csv From {1000} =~0 =~123.654 As @usn6 Fieldterminator 's_str' Remove Case When Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6} Then {`2esn`} Is Not Null Is Not Null When `3esn`[{usn1}] Then `5esn` Starts With $`2esn` Starts With $1000 End._usn3!,Allshortestpaths((((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]})))).``! Foreach(_usn3 In Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Is Not Null Is Not Null| Create Unique @usn6=(((@usn6 :`3esn`:@usn5)<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null}))),((:`1esn`{`5esn`:1.0 In Count(*)})) Create Unique _usn3=(({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 :`7esn`:_usn3))) Union All Create `1esn`=(((:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})-[`2esn`?:`3esn`|:#usn8 *..01]-(:usn1{``})<-[:#usn7 *..010]-(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}))),((@usn5 :usn1)<-[`5esn`? *7..12{`5esn`:{999},_usn3:$`5esn`[2.12..]}]->(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})-[_usn4?:_usn4|:usn2 *..999]-({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})) Match (:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000})-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(`1esn` :_usn3:_usn3{#usn7:$@usn5 Is Not Null Is Not Null}),`3esn`=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Using Join On `8esn`,@usn5 Using Index `3esn`:_usn3(`6esn`)"),
    octest_legacy:ct_string("Unwind {_usn3}[{12}..$_usn4][`5esn`..$`5esn`] As _usn3 Union All Merge _usn3=Allshortestpaths((usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)) On Match Set #usn8 =#usn7 =~Count ( * ) =~``,{#usn8:$`7esn`['s_str'],_usn3:{999}[1000..{usn2}]}.#usn7? =[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] On Create Set {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}.`8esn`? =$@usn5[010..$#usn8][12..$`4esn`],`7esn`+=`8esn`(Distinct $#usn7 Is Null) Ends With Filter(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]) Ends With Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))),`7esn` =`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) Contains Reduce(`7esn`=$_usn4 Ends With usn1 Ends With $0,`4esn` In $`3esn` Is Not Null|`7esn` In {123456789} In `1esn`) Unwind `1esn`[..{@usn6}][..$123456789] As `1esn` Start `1esn`=Rel:`4esn`(`1esn`='s_str') ,`8esn`=Rel:`8esn`(\"d_str\")"),
    octest_legacy:ct_string("Create Unique (@usn5 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})-[:#usn8|`1esn`*{`8esn`:0Xa[usn2..]}]-(`3esn` :_usn3:_usn3{@usn5:False}) Foreach(`1esn` In 123456789[$@usn5..]| Create Unique ((@usn6 :`1esn`{#usn8:`4esn`[1.0],``:.e12[@usn5..#usn7][010..{usn1}]})) Start ``=Relationship:usn2(`3esn`='s_str') Where $#usn7 Is Null) Union Unwind Filter(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``]) Ends With Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End As usn1 Unwind ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})[Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])..Filter(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")] As usn1"),
    octest_legacy:ct_string("Create Unique usn2=Shortestpath(((_usn4 :``:#usn8)-[:`8esn` *..01]->({#usn7:0.e0 Starts With `2esn`})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8))),Allshortestpaths(({_usn3:$`5esn`[`3esn`..]})-[usn1? *0X0123456789ABCDEF]->(:`8esn`:`7esn`)) With Distinct $0 As #usn7,Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null,$`5esn`[..$`5esn`][..$12] As #usn7 Where 9e1[$usn2] Create @usn6=Allshortestpaths((:@usn5{`2esn`:_usn3 Ends With 7 Ends With `1esn`})<-[usn2:_usn3|_usn3{usn2:123456789[#usn8..False],usn1:{`5esn`} Contains $0 Contains {``}}]->(`3esn` :_usn3:_usn3{@usn5:False})-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`4esn`{@usn6:01234567 Is Null Is Null,usn1:$`5esn` Starts With $0 Starts With {0}})) Union All Unwind 2.12 Contains usn2 Contains True As `4esn` With Distinct Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn`,{``}[$#usn8..$usn1] As @usn6,None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`]) Is Not Null Order By $0[..9e1] Descending,{usn1}[Count(*)..] Desc Skip (`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]->(`5esn` {`4esn`:7[$`2esn`..{`5esn`}],@usn6:{7} Is Null}) Contains Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) Contains Case 9e12 Is Not Null Is Not Null When 0[..usn2][..{@usn5}] Then 0e0 Ends With 1.e1 Ends With $`4esn` Else usn1 Is Null End Where $`5esn` In $`6esn` Load Csv With Headers From {0}[\"d_str\"..07][0..'s_str'] As @usn5 Fieldterminator \"d_str\" Union All Start `6esn`=Rel( {0}) ,usn2=Node:`6esn`(usn2={`8esn`}) With Distinct usn1 Is Not Null As usn2 Skip Case When \"d_str\"[#usn8] Then Count ( * )[True..][{#usn7}..] When Count(*)[..usn2][..usn2] Then 1.e1[`8esn`][00] Else \"d_str\" Contains {123456789} Contains 01 End Limit `1esn`(Distinct $@usn5[..12e12][..$123456789],{#usn7} Is Not Null Is Not Null)[{`7esn`:\"d_str\" Starts With $123456789}..]"),
    octest_legacy:ct_string("Foreach(`4esn` In {999}[1000..{usn2}]| Delete `7esn` In {123456789} In `1esn` Return usn2 Is Null As `2esn` Skip {`3esn`:{@usn6}[{999}..][00..]}[count(Null Ends With {`5esn`} Ends With 0.e0,{usn1} In 2.12 In 1000)][All(`` In `` Is Not Null Is Not Null Where Count(*)[..usn2][..usn2])]) Remove `3esn`($123456789 Is Null Is Null,0Xa[usn2..]).usn1?,`7esn`:`3esn`:@usn5,{`6esn`:$`8esn` Contains 123456789 Contains $usn2,`6esn`:{`3esn`}[`2esn`]}.`6esn`! Load Csv With Headers From {`7esn`} Is Null As `` Fieldterminator 's_str' Union Remove _usn3:`2esn`:usn1,[$0[..9e1],0.0[Null][$`2esn`]]._usn4?"),
    octest_legacy:ct_string("Create Unique ((({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[@usn5 *0X0123456789ABCDEF]->(`6esn` :`3esn`:@usn5{`3esn`:0.e0 In $#usn7 In $_usn3,_usn4:{`8esn`} Ends With `6esn`})-[`1esn`?:`8esn`]->(#usn7 :`6esn`$1000))),usn2=Allshortestpaths(((@usn5 :`4esn`))) Start `4esn`=Rel:@usn6(usn1={999})  Union Load Csv With Headers From 123456789 Is Null As `8esn`  Create Unique _usn3=(({@usn6:01234567 Ends With .e12 Ends With $#usn7,`4esn`:12.e12[`3esn`]})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-(#usn7 :`7esn`:_usn3)) Union All With Distinct None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,01 Is Null As `2esn`,{1000} =~$_usn4 Return Distinct 1.e1 Starts With 's_str' Starts With `5esn`,$123456789 Starts With {_usn4} Starts With $1000 As `6esn` Order By Allshortestpaths(((_usn4 :`8esn`:`7esn`{`4esn`:{`2esn`} Is Not Null Is Not Null,`1esn`:.e1 =~$`8esn`})<-[`4esn`?:_usn4|:usn2{`2esn`:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],`6esn`:01[{`2esn`}..{@usn6}][$`2esn`..0.0]}]-(:`8esn`:`7esn`{`8esn`:.e1[..usn2][..`8esn`],`5esn`:.e0 Starts With $`` Starts With $usn2}))) Ascending,Case When 07 Contains 0X7 Contains $`8esn` Then 123456789[{123456789}..'s_str'] When _usn3[_usn3..][12.e12..] Then $12[True..][{0}..] End Is Null Is Null Ascending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc"),
    octest_legacy:ct_string("Match _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})),({`4esn`:`7esn` Is Null}) Using Join On @usn5,`8esn` Foreach(#usn8 In 12.e12 Is Null Is Null| Optional Match ((usn2 :#usn8:#usn8)-[`2esn`?{_usn3:$_usn4[Count ( * )..],#usn7:{`3esn`}[..07][..{`5esn`}]}]-({_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]})),Allshortestpaths(((:_usn4{_usn4:{7} In `2esn`})<-[#usn8?:usn1|@usn6]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]}))) Using Scan @usn5:#usn7 Using Index #usn8:`2esn`(`5esn`)) Union All Delete (:_usn4{@usn6})<-[`4esn`?:_usn4|:usn2{_usn4:$usn2[{@usn5}],`2esn`:usn1[`5esn`..$7]}]->({``:$`8esn` =~{1000}})<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})[[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn` Contains 123456789 Contains $usn2|123456789 Ends With 01234567 Ends With 1.e1]..{usn2:1.0 =~7 =~{usn2},`8esn`:$_usn3[.e0..$usn2]}][None(_usn3 In {`3esn`}[`2esn`] Where 7 Ends With $`4esn`)..Case {`2esn`} Starts With 123456789 When $`5esn` In $`6esn` Then $`6esn` Ends With Count(*) End],[`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] Match ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Using Scan _usn4:@usn6 Where `` Ends With 0Xa Ends With `2esn` Foreach(`` In 0.12[`2esn`..{`6esn`}]| Create Allshortestpaths((#usn8 {@usn5:_usn3 Contains $123456789 Contains ``,_usn4:{``} Ends With `7esn` Ends With 0.0})-[#usn8?:`7esn`$1000]->(_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})),`5esn`=Allshortestpaths((`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})) Create Unique `6esn`=(({``})<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(usn2 {#usn7:2.12 =~Count(*),_usn4:$usn2[9e0]}))) Union Create Unique ((:`5esn`{``:1.0[0e0..0.e0]})) Optional Match `3esn`=((`6esn` :#usn7)-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]})),`2esn`=Shortestpath(((_usn4 {`5esn`:\"d_str\" Starts With 01})-[`3esn`? *123456789..]->({_usn3:$`5esn`[`3esn`..]})<-[{#usn7:123456789 Is Null}]-(:`6esn`{#usn7:$@usn5 Contains 0xabc Contains {#usn7},`1esn`:0xabc[.e0]}))) Using Scan `4esn`:usn1 With  *,$1000 =~$`2esn` As `7esn` Limit 0.0 =~0 =~`6esn` Where 12e12 Ends With {usn1}"),
    octest_legacy:ct_string("Create Unique `6esn`=((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[`7esn`? *7..12]->({`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})) Match `8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`),Shortestpath(({usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null})) Using Join On `5esn`,#usn7 Using Scan `2esn`:`6esn` Where `7esn`[..2.12][..{usn1}] Delete Extract(#usn7 In {``} Is Not Null Where 123456789[0xabc..'s_str'][``..`1esn`])[Reduce(usn1=False,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|$_usn4 Starts With 1e1)] Union Optional Match `7esn`=Allshortestpaths(((#usn8 {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]})<-[`4esn`?:`7esn` *..0x0{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}]->(:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`6esn` :@usn6:#usn8{@usn5:$1000[`2esn`..`5esn`][1e1..1.e1],_usn4:{_usn4} Starts With 0.e0 Starts With 0x0}))) Using Scan #usn7:`2esn` Where 12.e12[7..$`6esn`] Optional Match Allshortestpaths(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']}))),Shortestpath(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Using Join On `8esn`,`2esn` Where 0e0 In @usn5"),
    octest_legacy:ct_string("With  None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Order By {`3esn`}[..07][..{`5esn`}] Desc Limit 12.0 Unwind [$`5esn`[..$`5esn`][..$12],01[2.12..`8esn`],_usn3 Contains $123456789 Contains ``] As `1esn` Optional Match `5esn`=((:`3esn`:@usn5{`3esn`:{12} Is Not Null,usn1:9e0})-[:`4esn` *0xabc..{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(`3esn` :`5esn`)<-[#usn7?:_usn3|_usn3 *..0x0]-(`` :#usn7)) Using Join On `8esn`,@usn6"),
    octest_legacy:ct_string("With  Case When usn1 Is Not Null Then $0[12.e12..] Else 7[{0}..{_usn4}] End[..Reduce(_usn3={@usn5} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{usn1}[0X0123456789ABCDEF])] As #usn8,$`7esn` =~7 =~12e12,$`8esn`[..{`2esn`}] Skip Reduce(`2esn`=$_usn3[.e0..$usn2],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$`7esn` Is Null Is Null)[Shortestpath((({``})))..{@usn6:{`6esn`} =~$999}] Limit `8esn`[$`8esn`..{`4esn`}] Create Unique @usn5=Allshortestpaths(({`1esn`:$`8esn`[1000..0Xa]})) Load Csv With Headers From {0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]] As `5esn`  Union All Return *,{12} Is Not Null Skip {_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] Create Unique (({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(usn2 {``:01[{@usn5}]})),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Return `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`8esn`[$#usn7..123456789],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null Descending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,1e1 In \"d_str\" In `7esn` Descending Skip [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}]"),
    octest_legacy:ct_string("Start #usn8=Rel:`7esn`(`6esn`={_usn4}) Where {`3esn`} Is Not Null Is Not Null Union All Return {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Union All Foreach(`1esn` In Reduce(`8esn`=$@usn5[..12e12][..$123456789],@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|@usn5 In {`7esn`} In `2esn`) Is Not Null Is Not Null| Start @usn6=Relationship:`8esn`({`3esn`}) ,`3esn`=Node:usn1(_usn4={12}) With  *,({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})[Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where 0X7[`7esn`][123.654])..Filter(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")],(`1esn` {#usn7:{_usn4} In {12} In $0})<-[#usn7?:_usn3|_usn3 *..0x0]-(`1esn` :`8esn`:`7esn`)[Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End..(`7esn` {@usn5:{7}[..1.0][..9e0]})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{usn2:$`2esn`}..[`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`` Is Not Null|$#usn7[#usn7..]]] As `2esn`)"),
    octest_legacy:ct_string("Remove (:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn` *0X7..{usn2:_usn3[$`8esn`]}]->(`8esn` :_usn4).@usn5,[@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $0[``][{@usn6}]].#usn8! Unwind (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} As `1esn` Union All Return *,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) As #usn8 Order By {`3esn`} In $@usn5 In _usn4 Asc Skip $0[..9e1] Limit $usn1 =~`` With  {_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} As `2esn` Order By 2.12 Contains usn2 Contains True Descending Where 0e0 In @usn5"),
    octest_legacy:ct_string("Create `7esn`=Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}}))) Union All Return *,9e1 In 2.12 Order By [`5esn` In $999[0.0..] Where `5esn` Starts With `3esn`|12e12 Is Not Null Is Not Null] Asc Skip Reduce(`2esn`=12[1.e1..{_usn3}][1.e1..1.0],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{#usn8}[010]) Is Not Null Is Not Null Merge ((usn1 {`7esn`:{999}})) On Create Set Shortestpath((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))).`4esn`? ={`4esn`} Starts With $usn2 Starts With $1000,_usn4 =07[$123456789..] On Match Set (`` :usn2)<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->({`1esn`:{1000}[{_usn3}..],`1esn`:{123456789}[9e12][{0}]}).usn1 =False[..``],None(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $#usn7[@usn5..{1000}][1.e1..7]).@usn5 =$usn2[9e0],#usn8 =0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null)"),
    octest_legacy:ct_string("Foreach(`3esn` In Reduce(usn2=01[{`2esn`}..{@usn6}][$`2esn`..0.0],usn1 In @usn5 =~{`5esn`} =~`5esn`|$#usn8 Ends With $`2esn` Ends With $@usn6) =~[#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] =~(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})| Detach Delete 's_str' =~{_usn4} =~$`7esn`,(:#usn8:#usn8{@usn6:`4esn`[..010][..{12}]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0}) In [`4esn`[..Count ( * )][..{#usn7}]],$`5esn` Starts With `` Unwind [#usn7 In `2esn`[..$#usn8][..Count(*)] Where usn2 Is Null|@usn6[$`3esn`..{`3esn`}]] In Filter(_usn3 In {`3esn`}[`2esn`] Where 1e1 In 123.654 In `3esn`) As _usn3) Delete 010 In Count(*),Count(*)[..usn2][..usn2] Union All Merge `8esn`=(((usn2 :#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12}))) Union Return Distinct *,2.12 Ends With $_usn3 Ends With `3esn` As `7esn`,0 In `2esn` In 010 Order By Count ( * ) Starts With 7 Starts With $123456789 Descending,01234567 Ends With .e12 Ends With $#usn7 Asc,$`6esn` =~1.e1 =~12 Asc Skip [{`3esn`} Is Not Null Is Not Null] Limit Single(#usn8 In {`5esn`}[.e1..``] Where $`` =~12.0 =~$`7esn`) Contains Case When {`1esn`}[12.0..`2esn`][@usn6..{usn1}] Then 's_str'[00][{`5esn`}] Else $#usn7 Is Null End Contains None(`5esn` In $999[0.0..] Where .e1 =~$`8esn`) Start _usn3=Node:`5esn`(`7esn`='s_str')  Match usn2=(`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Using Join On #usn7,_usn4 Using Join On `8esn`,@usn5 Where `3esn`[{`2esn`}]"),
    octest_legacy:ct_string("Remove All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where {#usn8}[010]).usn1!,Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `` Ends With 0Xa Ends With `2esn`).`7esn`,#usn8:`4esn` Start `6esn`=Relationship:usn2(#usn8=\"d_str\") Where {_usn3}[..$12][..0.12] Optional Match #usn8=Allshortestpaths(((:`1esn`{@usn6:$usn1 Ends With $`` Ends With $12})-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]-(:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]}))) Where .e1[..usn2][..`8esn`] Union Return Distinct #usn8 Is Not Null Is Not Null As `8esn` Create `1esn`=((@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})<-[`1esn`? *..999{#usn8:{_usn4}[...e1][..$7]}]-(`5esn` :`6esn`)),#usn8=Shortestpath((#usn8 :@usn5)) Union All Merge ((usn2 :@usn5)<-[? *00]->(@usn5 :usn1)) On Match Set Shortestpath(((`4esn` {`6esn`:#usn8[..{#usn7}]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})<-[`6esn`?:_usn4|:usn2]-(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]}))).`4esn`? ={#usn8} Starts With 00 Starts With {`6esn`}"),
    octest_legacy:ct_string("Unwind {@usn6}[$`6esn`..`4esn`] As #usn8"),
    octest_legacy:ct_string("Return Distinct `5esn`[.e0..][07..] As `7esn` Skip All(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null) Limit {1000} =~0 =~123.654 Union All Delete 1e1 In \"d_str\" In `7esn`"),
    octest_legacy:ct_string("Create `8esn`=((`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(`` )<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})) Union Start `3esn`=Relationship:#usn7('s_str')  Return *,{``}[`8esn`..],@usn6(`5esn`[.e0..][07..]) Is Null Is Null Skip $`4esn` Is Null Is Null Create `6esn`=(`7esn` :`5esn`)<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]}),`2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})"),
    octest_legacy:ct_string("Merge usn2=Allshortestpaths((((@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})<-[{`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}]->({`7esn`:7[{0}..{_usn4}]})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-({#usn8:0xabc[.e0]})))) On Match Set {usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}.`7esn`! =Case When Count(*) In $12 Then .e0 Starts With 0 Starts With 0.e0 When {usn1}[0X0123456789ABCDEF] Then $`6esn`[123456789..12][True..{`3esn`}] Else 7 Starts With {@usn6} Starts With $`` End[Case @usn6 Contains $1000 Contains {`7esn`} When 0.12 =~$0 =~$0 Then $usn1[.._usn4][..False] When {0} Ends With $_usn3 Ends With $`7esn` Then 12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3] End..] Create Unique ``=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})-[usn1?:#usn7{`2esn`:12.e12[0e0..$`1esn`][0X0123456789ABCDEF.._usn3],@usn5:{usn2}[.e0..$999]}]->(:usn1{`3esn`:{123456789} Is Null Is Null}))) Union All Optional Match _usn4=Allshortestpaths((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})-[ *00]->({`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})) Using Scan usn1:_usn3 Using Scan `1esn`:`3esn` Where 7[$`2esn`..{`5esn`}] Union All Start `3esn`=Node:`8esn`(`1esn`={#usn7})  Detach Delete (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null,$@usn6 Contains 07,Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)]"),
    octest_legacy:ct_string("Delete $#usn7[@usn5..{1000}][1.e1..7],Extract(`` In `` Is Not Null Is Not Null Where {``}[...e12]|12 Ends With 0x0 Ends With 0.e0) Is Null Is Null,$#usn7 Is Null Union All Delete [`` Is Not Null Is Not Null,`1esn` Contains {usn2} Contains $#usn8] Is Not Null,{`3esn`} Is Not Null Is Not Null,Count(*) Contains $#usn7 Contains 1e1 Return Distinct $``[1.0],{`5esn`}[0..`8esn`][0..Null] As `7esn` Order By 0Xa =~123456789 =~_usn4 Desc Skip $7[{usn2}..][{usn2}..] Limit $1000 Is Null"),
    octest_legacy:ct_string("Remove Filter(`5esn` In $999[0.0..] Where `3esn`[{`2esn`}]).`6esn` Return Distinct 0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) As ``,Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12),`4esn` =~$`5esn` As `3esn` Create Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}}))),usn1=((:`4esn`{``:2.12 Is Not Null Is Not Null})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))"),
    octest_legacy:ct_string("Optional Match `4esn`=Allshortestpaths((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))) Using Join On @usn5,_usn3,_usn3 Using Join On `2esn` Where $_usn3['s_str'][07] Merge `7esn`=(`1esn` )-[`1esn`?:`8esn`]->(#usn7 :`6esn`$1000)<-[?:`2esn` *00{@usn6:usn1[`5esn`..$7],`3esn`:{`7esn`}[..$@usn5][..$#usn8]}]-(`` {`1esn`:{@usn6}[{999}..][00..]}) On Match Set #usn8+={#usn8}[1.e1...e12] On Match Set None(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $12[True..][{0}..]).usn1! ={123456789} Is Not Null,`5esn`+=Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])],{`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000}.usn1 ={`3esn`}[..07][..{`5esn`}] Merge `7esn`=((`1esn` :#usn7))"),
    octest_legacy:ct_string("Start _usn4=Node:usn2(`8esn`='s_str') Where 0[.e0..{`1esn`}] With  [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As `8esn`,[`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As @usn6 Skip {7}[$`5esn`][{_usn3}] Where {7}[..1.0][..9e0] Union Load Csv With Headers From {`5esn`} Starts With $`5esn` Starts With .e1 As `2esn`  Start `6esn`=Rel:#usn8(@usn6={_usn4}) ,`4esn`=Relationship:`6esn`(#usn8={_usn3}) Match `1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]}))"),
    octest_legacy:ct_string("Foreach(`3esn` In {`4esn`} Ends With {usn2} Ends With {999}| Load Csv From Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As `7esn`  Remove [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where $7[0.12][usn1]].`3esn`!,[#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']|`2esn` Is Null].usn1) Remove Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]).`2esn`,({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4? Return Distinct *,(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(_usn4 :#usn7)[@usn6(`5esn`[.e0..][07..])..[`` In `` Is Not Null Is Not Null Where 1.0 In Count(*)]][Reduce(_usn3=$0[12.e12..],_usn3 In {`3esn`}[`2esn`]|9e1[$usn2])..Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8)],123.654 Is Not Null Union All With Distinct Count(*) In $12 As @usn6,True Contains {0} Contains 7 As _usn3 Order By Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where @usn6 Is Null Is Null)[(`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})..] Descending,$0[..9e1] Descending Skip {`5esn`:01234567 Is Null Is Null}[9e0..Reduce(``={`3esn`}[`2esn`],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{1000} =~0 =~123.654)][Reduce(usn1=$`6esn`[010..],@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$`3esn` =~{#usn8})..Filter(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 7[..999][..{#usn8}])] Limit $`3esn`[{`7esn`}..][{usn2}..] Create `6esn`=Allshortestpaths(((`6esn` :`5esn`{usn1:{`6esn`}})))"),
    octest_legacy:ct_string("Foreach(`2esn` In $0 Ends With 12.0| Detach Delete 123456789[$1000..$#usn7],#usn8 Is Not Null) Union All Create #usn8=(`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12}),(:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})-[{_usn4:`4esn`[`5esn`..12][@usn6..False],#usn7:0Xa[usn2..]}]->(#usn8 {`6esn`:Count(*) Ends With 12.0 Ends With 12})-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Union All Optional Match #usn8=((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})),``=(({``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]-({`7esn`:{999}})) Using Join On `8esn`,@usn5 Unwind Reduce(``={999},#usn8 In {`5esn`}[.e1..``]|$_usn3['s_str'][07])[..{`4esn`:0.0[$0][{@usn5}]}][..Any(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where Count ( * )[True..][{#usn7}..])] As `6esn`"),
    octest_legacy:ct_string("Create Shortestpath((({@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})))"),
    octest_legacy:ct_string("Merge ({_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1}) On Create Set _usn4 =$``[1.0],``+=$_usn4 Is Null Is Null,Single(#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`4esn`} Starts With $usn2 Starts With $1000).`8esn`! =2.12 =~False =~`5esn` Delete {1000} In {@usn6} In @usn5,{0} Starts With @usn5 Starts With {`2esn`},0e0 In @usn5 Union All Create Unique `7esn`=Allshortestpaths(((`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[`1esn`?:usn2|``{_usn4:$`4esn`[..$`3esn`][..0.0],@usn6:0e0 Starts With 2.12 Starts With $12}]->(:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`8esn` *0X0123456789ABCDEF]->(usn2 :_usn4))),#usn7=Allshortestpaths((@usn6 :`6esn`)<-[?:#usn8|`1esn`*..{`3esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]-(_usn3 :`7esn`:_usn3)<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(_usn3 :`7esn`:_usn3))"),
    octest_legacy:ct_string("Foreach(`` In Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..]| Match @usn6=(:``:#usn8{``:1.0[0e0..0.e0]})-[usn1?:@usn5*]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})-[:``{_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}]-({`2esn`:Count(*)[..usn2][..usn2]}) Using Index usn2:`7esn`(`2esn`) Using Scan `3esn`:`2esn` Where True[..$`6esn`])"),
    octest_legacy:ct_string("Optional Match Allshortestpaths(((`7esn` :`5esn`{`3esn`:`7esn` Is Null})<-[`5esn`?:`4esn`]-(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})<-[{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}]-({`2esn`:{7} In `2esn`,`1esn`:`4esn`[1.0]}))),`1esn`=((`8esn` )) Unwind 's_str' In $usn1 In False As `6esn`"),
    octest_legacy:ct_string("Remove Single(_usn3 In {`3esn`}[`2esn`] Where `3esn`[`3esn`..][#usn8..]).`1esn`?,[0.e0 Ends With $#usn7 Ends With $7].`6esn`!,(`2esn` :`8esn`:`7esn`)<-[ *..999{@usn5:`` Is Not Null Is Not Null,_usn3:{`3esn`} Is Not Null Is Not Null}]->(:``:#usn8{usn1:{`6esn`}})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]-(`3esn` {@usn6:`4esn`[..010][..{12}]}).`1esn` Foreach(`6esn` In [#usn8 In {`5esn`}[.e1..``] Where {`1esn`}[12.0..`2esn`][@usn6..{usn1}]] Is Not Null| With Distinct True[..$`6esn`],{@usn6} Ends With 's_str' Ends With 12.0 As `1esn` Order By Extract(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where $`3esn` =~{#usn8}|12.0 Ends With True)[..usn2(Distinct)] Ascending Skip Case When {``} Starts With $`2esn` Starts With `1esn` Then $`5esn` Starts With $0 Starts With {0} End[None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)..[`8esn` In 01[2.12..`8esn`] Where 0.0 In $usn1]] Load Csv With Headers From `5esn`({12} Ends With 1.0 Ends With .e0) Contains `3esn`(`5esn`[{`4esn`}..`2esn`],9e1[2.12..{#usn8}]) Contains (@usn5 :#usn7)<-[``?:`3esn`|:#usn8{`1esn`:.e0[..$`8esn`]}]-(`5esn` {`4esn`:01 Is Null})<-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(_usn4 ) As `6esn` Fieldterminator 's_str') Union All Foreach(#usn7 In (`` :`5esn`{`4esn`:0.0[$0][{@usn5}]})-[:`6esn`|`5esn`]-(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})[..Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)][..(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[_usn3? *0X7..]-(:`5esn`{`2esn`:`4esn`[1.0]})-[_usn3?:#usn8|`1esn`]-(`7esn` {`4esn`:{usn1} Ends With $0})]| Load Csv From Case 's_str' In 00 When {@usn6}[{#usn7}..$#usn8][$_usn4..12.e12] Then usn2 Is Not Null Is Not Null When $@usn5 Starts With {0} Starts With 12 Then {usn2} Else {#usn7}[`2esn`..] End As `` Fieldterminator 's_str' With Distinct Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `4esn`,usn2 Is Null As `7esn`,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]]) Union Remove Reduce(#usn8={0}[01][`7esn`],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|2.12 =~False).`6esn`!,Case True In 0e0 When 0.0 =~999 Then {@usn5} Is Null Is Null End.`6esn`? Load Csv From 999 In {`3esn`} In usn2 As _usn4  Merge `4esn`=(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(#usn8 :_usn3:_usn3{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]})<-[`4esn`?:usn2|`` *0X7..]->(_usn3 :@usn5)"),
    octest_legacy:ct_string("Return $1000 =~$`2esn` As `6esn`,`` Is Not Null Is Not Null Order By Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`])[Case 00[{`8esn`}..][{`8esn`}..] When 0e0 Starts With 2.12 Starts With $12 Then Null[``] When 12e12 Ends With {usn1} Then $`2esn` Else 2.12['s_str'..$12][{`1esn`}..`2esn`] End..] Desc,[{@usn6} Ends With 's_str' Ends With 12.0,{12} Contains {123456789} Contains `4esn`] Starts With Filter(_usn3 In {`3esn`}[`2esn`] Where {1000} =~0 =~123.654) Starts With Case When Count ( * )[0.12...e1] Then $@usn5 =~1000 =~1000 When Null Ends With `2esn` Ends With $usn1 Then $usn2[{@usn5}] End Ascending,{12}[{7}][$123456789] Asc Skip Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)]"),
    octest_legacy:ct_string("Detach Delete `3esn`[$`1esn`..999][``..$123456789],$12[Null..Count(*)][{`5esn`}..{999}] Remove usn1:#usn7"),
    octest_legacy:ct_string("Load Csv From {#usn8}[010] As _usn3  Optional Match Shortestpath((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`6esn`?:_usn4|:usn2 *1000..00{`6esn`:@usn5 In {`7esn`} In `2esn`,@usn5:0.0 =~999}]-(usn2 :_usn4)-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))),(:`8esn`:`7esn`) Return 2.12[$`5esn`][$#usn8] As #usn8 Skip $@usn6 Ends With $_usn4 Ends With 0.12 Union With Distinct [1.0 =~'s_str' =~{`2esn`}] Contains [9e1[2.12],{usn2}[$`3esn`..][{#usn7}..],Null Ends With {`5esn`} Ends With 0.e0] Contains `5esn` As `8esn`,[`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As @usn6 Skip {7}[$`5esn`][{_usn3}] Detach Delete ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}),`4esn`(01234567 Ends With .e12 Ends With $#usn7,.e12 Is Not Null Is Not Null) In [#usn8 In 7[..999][..{#usn8}] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0]|@usn6 Contains $1000 Contains {`7esn`}] In Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]),usn2[{7}] Create (`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}}),Allshortestpaths((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})))) Union Load Csv From .e0 =~`6esn` =~{12} As usn1 Fieldterminator \"d_str\" Merge ({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`) On Match Set _usn3+={_usn3}[12.e12],`3esn`+=@usn5 =~{`5esn`} =~`5esn`,#usn8 =[usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]] Starts With [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $`4esn`[`7esn`]|'s_str'[00][{`5esn`}]] Starts With @usn6(Distinct 0.0[$0][{@usn5}],1.0 In Count(*)) Foreach(`2esn` In $1000 In $1000 In $`3esn`| Optional Match _usn3=Allshortestpaths((`7esn` :`5esn`)<-[`5esn`:#usn7 *00{#usn7:{999} Starts With {0}}]-(`8esn` :`4esn`{@usn6:1.0[$`1esn`..][$123456789..]})),Allshortestpaths((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`)) Using Index `8esn`:`1esn`(@usn5))"),
    octest_legacy:ct_string("Merge ``=Allshortestpaths(((:`3esn`:@usn5$7))) Detach Delete 123.654[$`1esn`] Union Create Unique usn2=(`4esn` :usn1{#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})-[@usn5?:`3esn`|:#usn8{_usn4:{999}}]->(:#usn8:#usn8{``:1.0[0e0..0.e0]}),#usn8=((`3esn` {`8esn`:\"d_str\" Contains {123456789} Contains 01,@usn5:`1esn` In .e0 In {`3esn`}})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[ *..999{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(@usn5 {_usn3:`1esn` Contains {usn2} Contains $#usn8})) Load Csv With Headers From {`5esn`}[{usn2}..1000][$`8esn`..{`3esn`}] As #usn8 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Merge Shortestpath((((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Match Allshortestpaths((({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}))),usn2=Allshortestpaths(((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Using Scan `3esn`:`2esn` Using Scan `6esn`:`2esn` Union Remove [{`2esn`} Ends With {`7esn`},usn1[`5esn`..$7]].`7esn`?,[`2esn` Starts With $_usn4,$_usn3 Contains 999 Contains \"d_str\"].`8esn`,$1000.usn2 Delete _usn3[..`8esn`][..2.12],None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 7[..999][..{#usn8}]) Is Not Null,0.e0 Starts With 12.e12 Starts With {_usn4} Merge `2esn`=(((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[usn2?:``]-(usn2 :``:#usn8)-[:`1esn` *0xabc..{`3esn`:1.0 In Count(*)}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null}))) Union All Create Unique Allshortestpaths((`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null})),(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})-[usn2]-(#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[`6esn`?{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) Foreach(@usn5 In _usn3 Contains Count(*) Contains 12e12| Match Shortestpath(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))),usn2=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Where 01234567 Ends With .e12 Ends With $#usn7 Load Csv From [@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where `4esn` Ends With 07 Ends With {`3esn`}|@usn5 Is Null] Is Null Is Null As #usn8 Fieldterminator \"d_str\") Optional Match usn2=Shortestpath((`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})) Using Index `3esn`:_usn3(`6esn`) Using Index #usn8:`2esn`(`5esn`) Where 07[..$@usn6][..1.0]"),
    octest_legacy:ct_string("Merge Allshortestpaths(((:@usn5{#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`})-[?:usn2|`` *0..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}))) On Match Set Reduce(usn2=$`5esn`[`3esn`..],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|{_usn4} In {12} In $0).`1esn`? =`6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`7esn`+={123456789}[9e12][{0}] With Distinct *,'s_str' Starts With 123.654 As usn1 Limit {`2esn`} Is Not Null Is Not Null Create Unique `5esn`=(#usn7 :`8esn`:`7esn`)<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null})-[_usn4?:`1esn` *7..12]->(:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`}) Union All Create `1esn`=Shortestpath((((`2esn` :`8esn`:`7esn`)<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})))) Union Load Csv With Headers From Any(#usn7 In {``} Is Not Null Where usn1[9e12..][$7..]) Ends With Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X7[`7esn`][123.654]|12.e12[7..$`6esn`]) Ends With All(`3esn` In {7} Is Null Where {123456789} Contains $#usn8) As @usn6  Return *,$1000 =~$`2esn` As `6esn`,Single(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {`3esn`} Is Not Null Is Not Null)[{@usn6:1.0[$`1esn`..][$123456789..]}] As `` Order By Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` Asc,@usn6 Contains `3esn` Contains {`2esn`} Descending Skip {12}[{7}][$123456789] Optional Match ``=(:`3esn`:@usn5{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`4esn` {`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null})<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}),Allshortestpaths(({_usn4:00 Starts With 0xabc})<-[_usn4{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(_usn4 :#usn8:#usn8{`8esn`:'s_str' In 00})-[`1esn`?:`8esn`]->(#usn7 :`6esn`$1000)) Using Scan `5esn`:usn2 Where _usn4 Is Null Is Null"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths((:`4esn`{``:2.12 Is Not Null Is Not Null})) On Match Set #usn8 =$#usn8 Union All Load Csv With Headers From 0e0[$1000][{usn1}] As `5esn`  Remove Filter(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $`3esn` In $`6esn` In $``).`4esn`,Case {#usn7}[`2esn`..] When 0.0 In $usn1 Then 00[$`7esn`] Else $_usn3[..1000] End.`2esn` Union Delete 010 In Count(*),Count(*)[..usn2][..usn2] Unwind `3esn`[$`1esn`..999][``..$123456789] As usn1"),
    octest_legacy:ct_string("Unwind `1esn`[..{@usn6}][..$123456789] As `1esn` Detach Delete 0e0[$1000][{usn1}] Union All Start ``=Rel:#usn8(_usn3='s_str')  Return 12.e12 Is Null Is Null As `6esn`,01 Is Null As `2esn`,$12 =~$_usn3 As #usn8 Order By (`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[`2esn` *..999{`7esn`:7[{0}..{_usn4}]}]-(`5esn` :@usn5{`8esn`:{usn2} =~12})[All(`` In `` Is Not Null Is Not Null Where `3esn`[{0}][usn1])] Descending Skip [0x0 Is Null,{``} Ends With `7esn` Ends With 0.0,0X7[0e0..`7esn`][1000..0e0]] =~Any(`5esn` In \"d_str\" Is Null Is Null Where $`6esn` Is Null) =~[$12[True..][{0}..],usn1[`5esn`..$7]] Load Csv With Headers From $`4esn`[..$`3esn`][..0.0] As `4esn`  Union All Detach Delete Single(_usn3 In {`3esn`}[`2esn`] Where $_usn4[Count ( * )..])[..All(`` In `` Is Not Null Is Not Null Where {`7esn`} Is Null)],{123456789}[0xabc..],Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null}"),
    octest_legacy:ct_string("Start `8esn`=Node:`3esn`(\"d_str\")  Union All Unwind $#usn8[$`8esn`..{`8esn`}] As `6esn` Unwind $123456789 Starts With 9e0 Starts With 's_str' As #usn7 Union All Create Unique Allshortestpaths(((`8esn` )<-[?{usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`}]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]}))),`7esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[`1esn`?:`4esn`]->(`5esn` :`4esn`)) Unwind None(`2esn` In `1esn` =~\"d_str\" Where .e12 Is Not Null Is Not Null)[Reduce(@usn5=#usn7 Contains _usn3 Contains {`3esn`},@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$@usn5 Starts With {0} Starts With 12)] As `4esn` Match (({`1esn`})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[`3esn`:#usn7]-(:#usn8:#usn8{_usn4})) Using Index `3esn`:_usn3(`6esn`) Where `7esn`[..{usn1}]"),
    octest_legacy:ct_string("Return *,`1esn`(Distinct $1000[999]) =~Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) =~{`6esn`:'s_str'[00][{`5esn`}]},[$`1esn` =~0X7] =~[{7}[..1.0][..9e0],7 Is Not Null Is Not Null] =~{_usn3:`1esn` Contains {usn2} Contains $#usn8} As `` Order By $1000 In $1000 In $`3esn` Desc,Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) Asc Optional Match @usn6=Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``})))),Shortestpath(((@usn6 :`8esn`:`7esn`)<-[`6esn`?:`4esn` *..01]->(`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?]-(`7esn` :`5esn`))) Where _usn3[_usn3..][12.e12..] Remove Reduce(@usn5={@usn6}[{999}..][00..],`2esn` In `1esn` =~\"d_str\"|1.0 =~7 =~{usn2}).`8esn`?"),
    octest_legacy:ct_string("Remove None(#usn8 In {`5esn`}[.e1..``] Where $@usn6 Contains 07).@usn5,None(usn1 In @usn5 =~{`5esn`} =~`5esn` Where usn2 Is Not Null Is Not Null).`7esn`,()-[`5esn` *..0x0{`5esn`:`7esn`[..2.12][..{usn1}],`3esn`:12e12 Contains 0Xa}]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})<-[@usn6?$0]->({@usn5:0.12[$`3esn`..$_usn3][12.0..usn1]}).`6esn` Merge usn2=((:`1esn`{})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})) On Match Set Reduce(usn1=.e1 Ends With 1e1 Ends With @usn5,`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|$#usn7[#usn7..]).``! ={123456789} =~`8esn` =~@usn5 On Create Set @usn6+={0} Ends With [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]],{`8esn`:{_usn4} Starts With 0.e0 Starts With 0x0}.@usn5! =`4esn`[`5esn`..123456789][0..$12] Match Allshortestpaths(((:_usn4{_usn4:{7} In `2esn`})<-[#usn8?:usn1|@usn6]->(`5esn` :`2esn`:usn1{`8esn`:$`2esn`[2.12..'s_str'][{@usn6}.._usn4],usn2:`4esn`[..Count ( * )][..{#usn7}]}))) Using Index _usn4:`1esn`(usn2) Using Join On ``,`6esn`,usn2 Union All Foreach(_usn4 In 9e12[`1esn`..][$`1esn`..]| Match Allshortestpaths((@usn5 {`3esn`:.e1[..usn2][..`8esn`]})<-[usn2:`7esn`]->(:usn1{_usn3:{#usn7}[`2esn`..]})-[?:usn2|``$#usn7]-(#usn8 :``:#usn8{`7esn`:9e1[$usn2],_usn4:$_usn4 Contains Null Contains #usn8})),({`4esn`:`7esn` Is Null}) Using Scan `2esn`:_usn3 Using Scan `4esn`:`8esn`)"),
    octest_legacy:ct_string("Merge `1esn`=Allshortestpaths(()<-[_usn4 *..999]->(`7esn` {#usn7:\"d_str\" Contains {123456789} Contains 01,@usn5:$1000 In $1000 In $`3esn`})) Delete Single(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Contains None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Remove Allshortestpaths(((`` ))).#usn8,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {12} Is Not Null)._usn3?,`6esn`:`8esn`:`7esn` Union All Merge `6esn`=Shortestpath((((_usn3 )-[?{@usn6:0X7[`7esn`][123.654]}]->(@usn6 {`5esn`:`3esn`[`3esn`..][#usn8..],``:$0[..9e1]})-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})))) Delete 123456789[$1000..$#usn7],0.e0[#usn8]"),
    octest_legacy:ct_string("Unwind (:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[{`8esn`:07 In `2esn` In 12e12}]-(`3esn` :@usn5)-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) Is Not Null Is Not Null As @usn5 With Distinct {_usn4} =~$_usn4 As `4esn`,`5esn` Is Null Limit usn1 In 7 In {123456789} Where {123456789}[9e12][{0}]"),
    octest_legacy:ct_string("Optional Match Shortestpath((((:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[? *..07]-(`4esn` {``:{#usn8}[010],usn1:{``} Starts With $`2esn` Starts With `1esn`})))) Using Join On _usn4 Using Index _usn4:`5esn`(`6esn`) Where $`6esn` Ends With Count(*) With  *,Extract(#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12) Ends With [False =~$7 =~2.12,$`4esn` In Null In 0xabc,{`7esn`} Starts With $123456789 Starts With $@usn6],_usn3 Ends With 7 Ends With `1esn` As _usn4 Where 0.12 Contains 0X0123456789ABCDEF Contains .e0 With Distinct [`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7}|`3esn`[{0}][usn1]] In [{12}[{7}][$123456789],`2esn` Starts With $_usn4] In count($1000 Is Null,0Xa[$123456789..123.654][.e12..0.e0]) Order By None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]) Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null) Desc Where $usn2[{@usn5}]"),
    octest_legacy:ct_string("Unwind {``}[`1esn`][$usn2] As @usn6 Delete {#usn7:$`6esn` Ends With Count(*)} =~(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8) =~[`5esn` In $999[0.0..] Where `2esn` Starts With $_usn4],{7}[$``][{@usn6}] Union Return Distinct 2.12[$`5esn`][$#usn8],$7 Ends With `4esn` As `5esn` Order By ({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[`4esn`?:@usn5{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}}) Asc,{#usn8} Starts With 00 Starts With {`6esn`} Desc Skip `1esn`[{usn1}..``][7..$#usn8] Unwind @usn5 In $7 As `` Create Unique ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12}))"),
    octest_legacy:ct_string("Remove Extract(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc|$`5esn` Starts With $0 Starts With {0}).`4esn`,Filter(`5esn` In $999[0.0..] Where {`5esn`} Contains $0 Contains {``}).`1esn`!,Allshortestpaths(((`3esn` :`8esn`:`7esn`)<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(`6esn` :_usn3:_usn3{`4esn`:0Xa Starts With {`6esn`} Starts With $usn1}))).#usn8? Optional Match @usn6=Allshortestpaths(((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}))) Where 0X7[..2.12] Create `3esn`=Shortestpath(((:usn1{usn1:{`6esn`}})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))),@usn6=Allshortestpaths(((:`1esn`))) Union All Create ((@usn5 {usn2:0.e0[123.654][01]})-[`3esn`:#usn7]->(@usn6 {_usn3:{#usn7} Is Not Null Is Not Null})<-[usn2?]->(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})) Delete @usn6(`5esn`[.e0..][07..]) Is Null Is Null,`6esn` Is Not Null Is Not Null Union Merge @usn5=Shortestpath((((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[? *0Xa]-({`7esn`:{999}})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]})))) On Create Set Reduce(@usn6=01234567 Is Null Is Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|1.0 Starts With 12e12 Starts With {`5esn`})._usn3? =`4esn`[..Count ( * )][..{#usn7}] Merge usn1=(((usn2 {``:01[{@usn5}]})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})-[`6esn`? *0..]-(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})))"),
    octest_legacy:ct_string("Unwind Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] As @usn5 Start usn2=Rel:usn2({`4esn`}) ,_usn4=Node:usn2(`8esn`='s_str')Where 123.654[...e0]"),
    octest_legacy:ct_string("Load Csv From {123456789}[0.e0..$123456789][0Xa..`6esn`] As @usn5  Union Foreach(usn1 In 123456789[_usn3]| With Distinct *,`1esn`(Distinct $1000[999]) =~Reduce(`5esn`=$`4esn`[Null..],#usn7 In `2esn`[..$#usn8][..Count(*)]|@usn6 Starts With `6esn` Starts With $`1esn`) =~{`6esn`:'s_str'[00][{`5esn`}]},{_usn3:`1esn` Contains {usn2} Contains $#usn8} =~Case When 0X7[0e0..`7esn`][1000..0e0] Then 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Else usn1 In 7 In {123456789} End =~[{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] As `` Order By {0}[{`8esn`}..`4esn`] Desc,Case When Count ( * ) Contains 07 Then $`2esn` When 1.0 Is Null Is Null Then `7esn`[..2.12][..{usn1}] End Is Not Null Desc Limit $`2esn`[2.12..'s_str'][{@usn6}.._usn4]) Load Csv From {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]] As _usn3  Union With Distinct *,Reduce(`2esn`=12[1.e1..{_usn3}][1.e1..1.0],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{#usn8}[010]) Is Not Null Is Not Null,usn1 In 7 In {123456789} As `5esn`"),
    octest_legacy:ct_string("Start #usn8=Rel:usn1(\"d_str\") ,`2esn`=Node:_usn4(#usn7=\"d_str\") Union Detach Delete {999},01234567 Is Null Is Null Unwind $usn1 In {999} In $#usn7 As _usn4 Foreach(usn2 In Null Contains {`4esn`}| Delete $`5esn`[..{12}],None(`2esn` In `1esn` =~\"d_str\" Where .e12 Is Not Null Is Not Null)[Reduce(@usn5=#usn7 Contains _usn3 Contains {`3esn`},@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]|$@usn5 Starts With {0} Starts With 12)] Unwind None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Allshortestpaths((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})<-[_usn4? *..999{_usn4:usn1 Is Not Null}]-(@usn6 :#usn7{_usn3:{_usn4} Is Not Null Is Not Null}))..{@usn6:.e0[..$`8esn`],`6esn`:12 Ends With 0x0 Ends With 0.e0}] As _usn3) Union All Unwind 9e0[..999] As #usn8 Load Csv From Null Ends With `2esn` Ends With $usn1 As #usn8 "),
    octest_legacy:ct_string("With  *,$@usn5 Contains 0xabc Contains {#usn7} Skip 0Xa[..{`4esn`}][..12.0] Create `3esn`=Shortestpath(((:usn1{usn1:{`6esn`}})-[@usn6?:`3esn`|:#usn8 *123456789..]->(:_usn3:_usn3{`7esn`:$`1esn` =~0X7})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))),@usn6=Allshortestpaths(((:`1esn`))) With Distinct {`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Order By _usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,Count(*) Contains $#usn7 Contains 1e1 Desc Limit {#usn8} Is Null"),
    octest_legacy:ct_string("Start `2esn`=Relationship:`3esn`(\"d_str\") ,`7esn`=Node:``(@usn6={usn1})Where 0X0123456789ABCDEF =~1e1 =~{`4esn`} Remove Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where `7esn`[9e0..]).#usn8!"),
    octest_legacy:ct_string("Merge (`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0}) On Match Set @usn5(Distinct {123456789}[0xabc..],$_usn4[1.e1]['s_str']).usn1 =07 In `2esn` In 12e12,`1esn`+=0Xa Is Null Is Null,Any(`` In `` Is Not Null Is Not Null Where 0.0 Ends With 010 Ends With 1.e1).usn1 =(`` :_usn4)-[`4esn`?:_usn4|:usn2 *..01]->({`4esn`:`1esn` In .e0 In {`3esn`},`1esn`:@usn6[$`3esn`..{`3esn`}]})[\"d_str\"..Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`6esn` Is Null)][Shortestpath(((:`3esn`:@usn5$7)))..usn1(Distinct $`7esn` Is Null Is Null,{#usn8}[010])] On Create Set `7esn` =`6esn`({usn1} Ends With $0) Is Not Null,`2esn`+=All(`` In `` Is Not Null Is Not Null Where $_usn4 Starts With 1e1)[Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}})))][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)],Reduce(#usn7=`` Is Not Null Is Not Null,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|{`7esn`}[..$@usn5][..$#usn8]).`2esn` =None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}] Delete 12.0,`6esn`[12..$usn2][{#usn8}..{usn2}] Load Csv With Headers From {``} Is Not Null As usn1 Fieldterminator 's_str' Union Create Unique `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8)) With  *,$``[1.0] Order By All(`5esn` In $999[0.0..] Where {@usn6} Ends With 's_str' Ends With 12.0) In (:_usn4{``:2.12 Is Not Null Is Not Null})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7}) Desc,True[{`7esn`}..] Asc Limit $``[1.0] Where {`7esn`}[..$@usn5][..$#usn8] Start `6esn`=Rel:`7esn`(`3esn`=\"d_str\") ,#usn7=Node:@usn5('s_str')"),
    octest_legacy:ct_string("Merge ((:_usn4{usn1:`7esn` Starts With $#usn7 Starts With $`7esn`,`3esn`:$_usn4[Count ( * )..]})) Delete $#usn7[@usn5..{1000}][1.e1..7],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)],Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}) Union Merge Allshortestpaths((`2esn` :`8esn`:`7esn`{`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})) Foreach(`8esn` In \"d_str\" Contains {123456789} Contains 01| Remove Single(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 9e1[2.12..{#usn8}]).`5esn`,[@usn6 Contains $1000 Contains {`7esn`}].`3esn`?) Foreach(usn1 In {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[Reduce(`4esn`=`5esn`[_usn4..],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{123456789} Is Null Is Null)][[`3esn` In {7} Is Null Where usn1 Is Null Is Null]]| Load Csv From 0.e0 Contains 9e1 Contains {`7esn`} As #usn8 Fieldterminator 's_str' Load Csv From Null Ends With `2esn` Ends With $usn1 As #usn8 ) Union Return Distinct (:``:#usn8{`7esn`:{12}[{7}][$123456789]})<-[`6esn` *0Xa{_usn3}]-({@usn5:usn1 Is Not Null})-[:`8esn` *0..{_usn3:`4esn` Ends With 07 Ends With {`3esn`}}]->({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})[..[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 0Xa[2.12]|{7}[..12e12][..Count ( * )]]] As `5esn`,$usn1 =~`` Order By Extract(`2esn` In `1esn` =~\"d_str\" Where usn2[9e12]|#usn7 Starts With {#usn7} Starts With `7esn`)[..(:#usn8:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})<-[_usn4?:`` *0X0123456789ABCDEF{`5esn`:$123456789 Is Null Is Null,@usn6:{12} Ends With 1.0 Ends With .e0}]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})][..Extract(`3esn` In {7} Is Null Where usn1 Is Null Is Null|12.0)] Ascending,0X7 =~9e1 Ascending Skip Count ( * )[True..][{#usn7}..] Limit $7[{123456789}] Start #usn7=Relationship:`8esn`({`1esn`}) ,_usn4=Relationship(,) Match ``=Allshortestpaths((`6esn` :`8esn`:`7esn`)<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})<-[@usn5{`1esn`:{`8esn`} Ends With `6esn`}]->(usn1 {`4esn`:$@usn5 Is Not Null,`5esn`:0.e0 Contains 9e1 Contains {`7esn`}})),#usn7=((:usn2{`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[?:_usn3|_usn3{`3esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],#usn8:False Starts With {`5esn`}}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null})-[_usn4?:`5esn` *..07]->({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]}))"),
    octest_legacy:ct_string("Return *,$12 Starts With $`8esn` Starts With $`1esn` As `1esn`,$_usn4 Contains Null Contains #usn8 Skip [`8esn`[`4esn`..{#usn8}][$12..2.12]] Is Null Is Null Foreach(`5esn` In {`1esn`} Is Not Null| Create `5esn`=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0})) Create Unique (#usn8 {#usn7:`4esn` Ends With 07 Ends With {`3esn`},`3esn`:{0} In $_usn3})<-[:`4esn` *..010{`1esn`:1.0 In Count(*),`4esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}),(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})"),
    octest_legacy:ct_string("With  *,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}},Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `4esn` Order By $#usn7 Is Not Null Descending,{0} Ends With $`5esn` Asc,[{@usn6}[$`6esn`..`4esn`],0Xa[$123456789..123.654][.e12..0.e0]] Is Null Ascending Skip #usn7 Unwind [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] As `5esn` Merge #usn7=(:`4esn`{`5esn`})-[#usn8?:#usn8|`1esn`{``}]->(_usn4 :``:#usn8{#usn7}) On Create Set @usn6+=Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] On Create Set [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|$`4esn`[Null..]].usn1! =123.654[True..$#usn8][0.12..Count(*)] Union All Create `6esn`=({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})<-[usn2?:@usn5{`4esn`:{`7esn`} Is Null,_usn4:$123456789 Ends With {`1esn`} Ends With $`4esn`}]->(`6esn` {`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null})-[usn1? *0X0123456789ABCDEF]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}),Shortestpath(((@usn6 :`8esn`:`7esn`)<-[`6esn`?:`4esn` *..01]->(`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?]-(`7esn` :`5esn`))) Start `2esn`=Node:``({`1esn`}) "),
    octest_legacy:ct_string("Load Csv From Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) As `1esn`  Optional Match @usn5=(`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]-(`2esn` :`8esn`:`7esn`),usn1=Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` )))) Using Join On `7esn`,`8esn`,`3esn` Where 7[{0}..{_usn4}] Union Create Unique `5esn`=(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})-[_usn4? *..01]-(_usn4 :usn2{usn1:7[True..][2.12..],`8esn`:2.12 Ends With $_usn3 Ends With `3esn`})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({`2esn`:{`5esn`}[.e1..``],`1esn`:0.12 =~$0 =~$0}) Foreach(`3esn` In 010[Count(*)..12][$_usn3..{`8esn`}]| Create ``=Shortestpath(({`1esn`:`3esn`[{`2esn`}]})-[`3esn`?*{`8esn`:False Is Null Is Null}]->(:#usn7{_usn4:$`8esn` Contains 123456789 Contains $usn2})),@usn6=Allshortestpaths(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))))"),
    octest_legacy:ct_string("Delete (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8)[Reduce(usn2=`2esn` Starts With $_usn4,#usn7 In {``} Is Not Null|{7} Is Null)..][Single(#usn7 In {``} Is Not Null Where $1000[0Xa][{#usn7}])..],Case {#usn7}[9e1..][{123456789}..] When $0 Ends With 12.0 Then $`` Is Not Null When $usn1 In {999} In $#usn7 Then 1000[Null..{123456789}] Else 1.0 =~'s_str' =~{`2esn`} End[{@usn5:.e0[..$`8esn`],`4esn`:{usn2} =~12}..Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)] Unwind 's_str' =~{_usn4} =~$`7esn` As `` Union All Match `2esn`=Shortestpath((`6esn` {_usn4:0Xa =~Null =~$``})<-[``? *0X7..]->(`` :`1esn`))"),
    octest_legacy:ct_string("With Distinct *,'s_str'[$_usn3..][Count ( * )..] As #usn7 Limit {_usn3}[12.e12] Where {`4esn`} =~9e0 =~{12} Remove ({`1esn`:{`2esn`} Ends With {`7esn`}})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0X0123456789ABCDEF[123456789]})._usn3?,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 7 Starts With {@usn6} Starts With $``).`2esn`! Remove (#usn8 :`6esn`{usn2:{7}[$`5esn`][{_usn3}],@usn5:0.12 =~$0 =~$0})<-[?:`5esn`]->(:`2esn`:usn1{#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}).`1esn` Union All Foreach(@usn5 In {`4esn`}[{`5esn`}..$`6esn`]| Optional Match (`2esn` :`8esn`:`7esn`)-[`6esn`]->(:`8esn`:`7esn`{usn1:$`3esn` In $_usn4 In {_usn3}})-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]-(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]}) Using Join On `2esn`,`3esn` Using Join On usn1,`8esn` Where 00 Starts With 0xabc) Unwind False Ends With `3esn` As `8esn` Start _usn4=Node( {123456789}) ,`8esn`=Relationship:usn2('s_str')Where {_usn3}[12.e12] Union All Merge usn1=Shortestpath((`7esn` :``:#usn8)<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`)) Start #usn7=Relationship:usn2(`8esn`={`8esn`}) Where Count(*) In $12 Load Csv With Headers From 's_str' In 00 As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start `3esn`=Rel:`6esn`(\"d_str\") ,#usn8=Rel:`5esn`(_usn3={`8esn`}) With  *,07 Is Not Null Is Not Null Delete {_usn3:`4esn`[..Count ( * )][..{#usn7}]}[..{_usn4:`5esn`[.e0..][07..],`3esn`:{0} In $_usn3}][..Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))],{999} Union Foreach(`1esn` In exists()[..[`5esn` In $999[0.0..] Where $`3esn`[..$123456789][..$`1esn`]]][..Reduce(`2esn`={123456789} Is Null Is Null,usn1 In @usn5 =~{`5esn`} =~`5esn`|1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4])]| Detach Delete #usn7 Is Null Is Null With  Count ( * )[True..][{#usn7}..] As _usn3,Count ( * ) Contains 07 As `7esn`,{`4esn`} Ends With {usn2} Ends With {999} As _usn4 Skip `8esn`[{123456789}..]) Union All Create Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))),Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01}))))"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From #usn7[usn1][$`5esn`] As `6esn` "),
    octest_legacy:ct_string("Delete Case {`8esn`} Ends With `6esn` When False Is Null Is Null Then 's_str' In 00 Else 123456789 Ends With $`6esn` Ends With $#usn7 End Starts With Case `1esn` =~0 =~$#usn7 When $#usn8[9e12..][.e1..] Then False =~$7 =~2.12 When {123456789}[9e12][{0}] Then 12.0 =~999 =~$_usn3 End Start `6esn`=Node:`8esn`(\"d_str\") ,``=Relationship:_usn3(`8esn`={123456789})Where Count ( * ) Ends With $@usn5 Optional Match ((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),#usn7=((:`5esn`{``:1.0[0e0..0.e0]})) Union Start #usn7=Node:_usn4(#usn7=\"d_str\")  Union All With  Case When usn1 Is Not Null Then $0[12.e12..] Else 7[{0}..{_usn4}] End[..Reduce(_usn3={@usn5} Is Null Is Null,_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|{usn1}[0X0123456789ABCDEF])] As #usn8,0X7[123.654..@usn6] As _usn3 Skip Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 00[`2esn`..12][123456789..0.e0]|0e0 In @usn5) Ends With 's_str' Ends With _usn3(Distinct $`7esn` =~{`8esn`} =~$usn1,$0[..9e1])"),
    octest_legacy:ct_string("Optional Match `6esn`=Shortestpath((`` :#usn7)),Shortestpath(((:usn1{`3esn`:{123456789} Is Null Is Null})-[_usn4{`5esn`:{0} Ends With $_usn3 Ends With $`7esn`,`2esn`:Null[``]}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-({`7esn`:{999}}))) Using Join On ``,#usn7,`` Where 12e12 Ends With {usn1} Merge usn2=Shortestpath((((`` :#usn7)-[@usn6?:#usn8|`1esn`{usn1:`5esn`[.e0..][07..]}]-(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-({#usn7:{`7esn`} Starts With $123456789 Starts With $@usn6})))) Return Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] As usn1 Order By Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null} Ascending"),
    octest_legacy:ct_string("Start _usn4=Node:`6esn`(\"d_str\") Where `8esn` Ends With 999 Ends With .e12 Union All With  *,None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,Shortestpath((#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(`7esn` {usn2:`2esn`[..$#usn8][..Count(*)]}))[None(#usn7 In `2esn`[..$#usn8][..Count(*)])][(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]})-[? *..999]->(`3esn` {usn1:#usn8 Is Not Null Is Not Null,`5esn`:010[#usn7..True]})-[:`2esn`{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})] Where {usn1} Ends With $0 Foreach(`7esn` In {`5esn`} =~`4esn` =~{_usn4}| Load Csv With Headers From {`6esn`}[..$@usn6][..`7esn`] As @usn6 Fieldterminator \"d_str\" Start usn2=Rel:usn2({`4esn`}) ,_usn4=Node:usn2(`8esn`='s_str')Where 123.654[...e0])"),
    octest_legacy:ct_string("Unwind Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End Starts With Single(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) Starts With Extract(`5esn` In $999[0.0..] Where 0x0 Ends With $12) As `1esn` Delete Shortestpath(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))[#usn7(Distinct $`5esn`[`3esn`..])..{``:0Xa Starts With {`6esn`} Starts With $usn1}],.e0[..$`8esn`] Foreach(`8esn` In .e1 In 0Xa In #usn7| With Distinct #usn8 In $@usn6,1.e1[`8esn`][00] Where 0.e0 Starts With `2esn` Return Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] As `4esn`,usn2 Is Null As `7esn`,Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Order By Count ( * ) =~$usn2 =~$usn2 Descending Limit {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {7} In `2esn`) Contains [1.0[0X7][{`5esn`}]])"),
    octest_legacy:ct_string("Create Unique `1esn`=((:usn2{#usn8:$`5esn` In $`6esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})),`5esn`=((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})) Union Return *,123.654 Is Not Null,Shortestpath(((({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})-[@usn5?:#usn7 *1000..00]-(#usn8 :``:#usn8)-[`3esn`?:`8esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}]-(`6esn` ))))[[#usn8 In 7[..999][..{#usn8}] Where 0.12 Starts With $`5esn` Starts With 12|{123456789} Contains $#usn8]..][Reduce(#usn8=@usn5 =~{`5esn`} =~`5esn`,`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6]|01 Is Null)..] As `7esn` Skip Case When 1.0 =~'s_str' =~{`2esn`} Then $`5esn` In $`6esn` When {`7esn`}[..{`4esn`}] Then {usn1} Ends With $0 End[All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"])..[Count ( * )[0.12...e1],1.0[00..],$``]][`4esn`(`4esn` Ends With 07 Ends With {`3esn`})..Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `1esn` =~\"d_str\"|9e12 Is Not Null Is Not Null)] Limit Single(`4esn` In $`3esn` Is Not Null Where 7[$`2esn`..{`5esn`}])[Filter(`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)]"),
    octest_legacy:ct_string("Foreach(_usn3 In {``} Is Not Null| With  *,$1000 =~$`2esn` As `7esn`,Case When False Then 0.e0 Ends With $#usn7 Ends With $7 When {@usn6}[{999}..][00..] Then `5esn` Ends With {``} Ends With 12.e12 Else 123.654[$`1esn`] End[Reduce(#usn8=$`6esn` Ends With Count(*),`2esn` In `1esn` =~\"d_str\"|_usn4 Contains 2.12)..] As _usn3 Order By #usn8[..{#usn7}] Descending Skip 123.654[$`1esn`] Limit {`7esn`} Is Null With Distinct (:`5esn`{@usn5:01[{`2esn`}..{@usn6}][$`2esn`..0.0]})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})<-[`6esn`?:#usn7]->(@usn6 {`4esn`:True Contains {0} Contains 7,`6esn`:{999} Starts With $999}) Is Not Null Is Not Null As ``,12[..$`4esn`] As `7esn` Limit Count ( * ) =~$usn2 =~$usn2) Union All Merge ((:_usn4)-[`3esn`?:`` *..999{#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}]->(`5esn` :`8esn`:`7esn`{usn1:`5esn`[_usn4..]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})) On Create Set usn1:`4esn`,usn2+=0Xa[2.12],`7esn`:usn1 On Create Set Single(_usn3 In {`3esn`}[`2esn`] Where _usn3 Contains $123456789 Contains ``).`2esn` =Reduce(_usn4=0e0 Starts With `2esn` Starts With $``,#usn8 In {`5esn`}[.e1..``]|1.0[0X7][{`5esn`}]) Starts With Reduce(`1esn`=0.12 Starts With $`5esn` Starts With 12,_usn3 In {`3esn`}[`2esn`]|$12[True..][{0}..]) Starts With Reduce(usn2=Null Ends With {`5esn`} Ends With 0.e0,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{`6esn`}),[@usn6 Ends With {_usn3},12.0 Contains #usn7,$_usn3[..1000]].`2esn`? =0e0 Contains Null,`5esn`+=7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Optional Match (:`2esn`:usn1{`2esn`:$12 Ends With 07 Ends With $123456789,`6esn`:$#usn7[@usn5..{1000}][1.e1..7]}) Using Join On #usn8 Using Scan `6esn`:`2esn` Where 0e0 Starts With 1000 Starts With #usn7"),
    octest_legacy:ct_string("Remove Case When {`3esn`}[..07][..{`5esn`}] Then 's_str' Is Not Null Is Not Null End.`7esn`! Foreach(`8esn` In [_usn4 In _usn3 Starts With 12.e12 Starts With 0.12|`` Is Not Null Is Not Null] Ends With Extract(`5esn` In \"d_str\" Is Null Is Null Where {_usn3}[..\"d_str\"][..`5esn`]) Ends With Filter(`3esn` In {7} Is Null Where {123456789} Contains $#usn8)| Remove (:#usn7)-[?:_usn3|_usn3]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[:#usn7 *..010]->(#usn8 :usn1)._usn4!,{_usn4:0.12 Contains 0X0123456789ABCDEF Contains .e0}.`1esn`! Remove None(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01).`5esn`!) Union All Delete Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`3esn` In $_usn4 In {_usn3}) Is Not Null Is Not Null,$@usn5[..12e12][..$123456789] Start `7esn`=Rel:_usn4(``={#usn7}) ,@usn6=Node:`7esn`(_usn4={12})Where Count ( * )[0.12...e1] Create Unique (`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}),Allshortestpaths((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})) Union All Remove Reduce(#usn7=`7esn`[..2.12][..00],`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]|1000 =~@usn6 =~0x0).#usn8? Detach Delete $12 Ends With 07 Ends With $123456789,$`6esn`[{_usn3}..$`4esn`][$_usn4...e12]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 7 Starts With {@usn6} Starts With $`` As #usn8  Merge _usn3=Shortestpath(((:usn2{#usn8:$`5esn` In $`6esn`})-[:`8esn`*]->(`5esn` {@usn6:`6esn`[..$@usn6],_usn4:{7}[..12e12][..Count ( * )]})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})))"),
    octest_legacy:ct_string("Merge #usn8=((:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]})) On Create Set ``(0X7 =~9e1,0.0 =~999).`3esn`! =(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})<-[{`8esn`:07 In `2esn` In 12e12}]-(`3esn` :@usn5)-[?:`5esn`]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}) Is Not Null Is Not Null On Create Set ($#usn8)-[:`8esn` *..01]->(`` {`3esn`:{12} Contains {123456789} Contains `4esn`}).`6esn`! =999 Ends With Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 1.0 In Count(*)),@usn6+=None(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where `8esn`[`4esn`..{#usn8}][$12..2.12])[Reduce(`4esn`=`1esn` =~0 =~$#usn7,`2esn` In `1esn` =~\"d_str\"|{123456789} Is Null Is Null)][{``:`7esn` Starts With $#usn7 Starts With $`7esn`}],Shortestpath(((usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[`2esn`?:@usn6|`6esn` *0xabc..{`5esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],@usn5:$`2esn` Is Null Is Null}]->(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})-[`6esn`?:`8esn`{#usn8:'s_str'[00][{`5esn`}],`6esn`:9e1[$usn2]}]-(:@usn6:#usn8$`5esn`))).``? =(:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[?*..$#usn8]-({`8esn`:`3esn`[{0}][usn1]}) In {#usn7:_usn3 Starts With 12.e12 Starts With 0.12} Unwind $`1esn`[{`2esn`}..] As #usn8"),
    octest_legacy:ct_string("Remove [`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where $7[0.12][usn1]].`3esn`!,[2.12 Ends With $_usn3 Ends With `3esn`,#usn7,01[{@usn5}]].`2esn`! Union All Foreach(`7esn` In [@usn6 Contains $1000 Contains {`7esn`},$1000 Is Null Is Null,$`5esn` In 0.e0] Is Not Null Is Not Null| Start @usn6=Rel:``(_usn3='s_str') ,#usn7=Relationship:usn2(`8esn`={`8esn`}) Create Allshortestpaths(((`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}))),_usn4=(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[ *..010{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}}]->(:_usn4$@usn5)<-[``:_usn4|:usn2{_usn4:{`7esn`}[..{`4esn`}],`5esn`:{@usn6}[{999}..][00..]}]->(_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})) Create Unique Shortestpath((((:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})<-[`2esn`?:`7esn`]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[? *..07]-(`4esn` {``:{#usn8}[010],usn1:{``} Starts With $`2esn` Starts With `1esn`}))))"),
    octest_legacy:ct_string("Load Csv With Headers From {`3esn`}[..07][..{`5esn`}] As `4esn` Fieldterminator 's_str' Merge _usn4=Allshortestpaths((#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})) With  `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null,`8esn`[$#usn7..123456789],All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)] Order By Single(#usn8 In {`5esn`}[.e1..``] Where 123.654[$`1esn`]) Is Not Null Is Not Null Descending,_usn4(Distinct _usn3[_usn3..][12.e12..])[[0X0123456789ABCDEF Ends With $@usn6 Ends With $`5esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},0Xa Starts With {`6esn`} Starts With $usn1]] Desc,1e1 In \"d_str\" In `7esn` Descending Skip [`` Ends With 0Xa Ends With `2esn`,Count ( * ) Contains 0X0123456789ABCDEF Contains {@usn6},{`4esn`} =~{7} =~{`7esn`}] Union With Distinct 07[$#usn7..{1000}] Order By {#usn7}[..9e12][..`8esn`] Ascending,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) Desc,@usn6 Is Null Is Null Descending Limit `3esn` In $0 In `1esn` Where Count ( * ) Ends With $@usn5 Remove Filter(_usn3 In {`3esn`}[`2esn`] Where 010 =~{usn2}).`4esn`?,Case {#usn7} Is Not Null Is Not Null When 12e12 Ends With {usn1} Then `1esn` Ends With {_usn3} Ends With `2esn` End.`3esn` Union Remove exists(Distinct 9e1 In $`3esn` In $@usn6).`8esn`!,None(_usn3 In {`3esn`}[`2esn`] Where 01[{`2esn`}..{@usn6}][$`2esn`..0.0])._usn4,[usn1 Starts With usn1 Starts With $``,False =~1e1 =~0.e0,`3esn`[..010][..$7]].`1esn` Create Unique _usn4=Allshortestpaths((`` {@usn6:1.0[$`1esn`..][$123456789..]})<-[?{usn2:123.654[$`1esn`],@usn5:#usn8 Is Not Null}]-(`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})) Foreach(`2esn` In @usn6[{`5esn`}]| Unwind Single(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where _usn4 Contains 2.12)[(_usn3 {#usn7:.e1 Ends With 1e1 Ends With @usn5})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(@usn5 :usn1)<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})..][#usn7(7 =~{`8esn`} =~$`6esn`,$123456789 Ends With {`1esn`} Ends With $`4esn`)..] As @usn5 Optional Match ((`4esn` :@usn6:#usn8)-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})),`3esn`=Shortestpath(((:`1esn`{`5esn`:1.0 In Count(*)}))) Using Scan _usn4:`7esn` Where 0x0[{`7esn`}..][$usn2..])"),
    octest_legacy:ct_string("Foreach(`2esn` In {`5esn`}[.e1..``]| Match ((usn2 :`4esn`)-[_usn3:#usn8|`1esn`{_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}]->(@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:`5esn` *0..{_usn4:7[$`2esn`..{`5esn`}]}]->()) Using Scan @usn5:@usn6 Using Join On #usn7,`4esn`) Start @usn5=Relationship:`2esn`(usn2='s_str') ,`7esn`=Rel:`4esn`(`2esn`=\"d_str\")Where {999}[1000..{usn2}] Union Detach Delete .e0[12.e12..],Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null,0.12[`2esn`..{`6esn`}] Union All Foreach(`4esn` In {#usn8} Starts With 00 Starts With {`6esn`}| Match `4esn`=Allshortestpaths((((:`5esn`)<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`3esn`:#usn7]-({@usn6:$usn1 Ends With $`` Ends With $12})))) Where False Contains {`6esn`}) Return Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[..[9e1[1000][{123456789}],$_usn3[{#usn7}],`5esn` Starts With $`2esn` Starts With $1000]][..Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0 In `2esn` In 010)] As usn1 Order By Single(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) In {usn2:{`3esn`} Is Not Null Is Not Null} In {`4esn`:False,_usn4:$`7esn` Is Null Is Null} Ascending"),
    octest_legacy:ct_string("Start `2esn`=Node:`2esn`({1000})  Start @usn6=Rel:@usn6(usn1={999}) Where 0e0 Ends With 1.e1 Ends With $`4esn` Merge ``=(((:usn2{usn1:$`7esn` Is Null Is Null,`6esn`:$1000 Is Null})<-[?:#usn7 *01234567..0Xa]-(@usn6 {#usn8:$#usn7 Is Null,`6esn`:_usn4 Starts With $_usn4 Starts With 12.e12})-[usn1? *1000..00]->(#usn7 :@usn5{`8esn`:`1esn` Ends With {_usn3} Ends With `2esn`}))) On Match Set ``+={12} =~#usn8 On Create Set `3esn`+=$`7esn` =~{`8esn`} =~$usn1 Union Load Csv With Headers From Reduce(usn2={`6esn`} Contains \"d_str\",`8esn` In 01[2.12..`8esn`]|7[..999][..{#usn8}]) Starts With All(#usn8 In 7[..999][..{#usn8}] Where $#usn7 Contains 0x0 Contains 1000) As `4esn` Fieldterminator 's_str' Union Start _usn3=Node:`5esn`(`7esn`='s_str') ,`1esn`=Node:`6esn`(@usn5={_usn4})Where 0x0 Is Null"),
    octest_legacy:ct_string("Merge #usn8=Allshortestpaths(({`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})) Start `3esn`=Node:`7esn`(\"d_str\") Where 0.0 =~999 Union All Unwind $12 Starts With {`1esn`} Starts With Null As `6esn` With  {usn2}[$`3esn`..][{#usn7}..] As `1esn`,[$0] In [`2esn` In `1esn` =~\"d_str\" Where {0} Ends With $_usn3 Ends With $`7esn`|{999} Contains .e0 Contains 12.0] In None(`2esn` In `1esn` =~\"d_str\" Where {`7esn`}[..$@usn5][..$#usn8]) As usn1,0X7[123.654..@usn6] As _usn3 Limit usn2(7[..999][..{#usn8}])[[$_usn4 Contains Null Contains #usn8,{#usn8}[{7}],{@usn6}[{999}..][00..]]..] Where $#usn7 Is Null Load Csv With Headers From {`1esn`}[12.0..`2esn`][@usn6..{usn1}] As `8esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Start `8esn`=Rel:@usn6(`7esn`={`8esn`})  Create Unique Allshortestpaths((((`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`2esn` *..07]-(`1esn` {#usn7:{_usn4} In {12} In $0})<-[?{usn1:`7esn`[..{usn1}],usn2:Null[``]}]-({usn2})))),_usn4=(`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})<-[``?]->(`3esn` {`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Remove Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|`5esn` Ends With {``} Ends With 12.e12).usn2?,[#usn7 In `2esn`[..$#usn8][..Count(*)] Where {`2esn`} Ends With {`7esn`}|12e12[0e0][9e1]].`1esn`?,{`6esn`:1.e1[$`1esn`..@usn6][$0..$_usn3],`8esn`:{``} Is Not Null}._usn4! Union All Merge usn2=((@usn6 :_usn4)) On Create Set `` =Case Count(*) Is Null Is Null When {0}[12.0..0Xa][$`5esn`..{_usn3}] Then $@usn5 Is Not Null When 12.e12[0xabc] Then 2.12 =~False End Starts With Case When $`2esn`[2.12..'s_str'][{@usn6}.._usn4] Then 0X7[1000..{`1esn`}] When 7[$`2esn`..{`5esn`}] Then $123456789 Ends With {`1esn`} Ends With $`4esn` End,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 01[2.12..`8esn`]).`5esn` =Shortestpath(((:@usn5{_usn4:$`8esn` Contains 123456789 Contains $usn2})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(:`5esn`{``:1.0[0e0..0.e0]})<-[``? *..0x0{#usn7:False =~$7 =~2.12}]->(`3esn` :usn2)))[['s_str' In 00,{@usn6}[$`6esn`..`4esn`]]..][Case @usn6 Starts With `6esn` Starts With $`1esn` When {`3esn`}[`2esn`] Then Null In $7 In .e1 When {0}[@usn6..$1000] Then 12.0 Contains #usn7 End..] On Create Set _usn3+=$`3esn` Is Not Null Is Not Null,`3esn` ={`4esn`} Ends With {usn2} Ends With {999},{@usn6:{999} Starts With $999,`4esn`:$usn1[{`5esn`}][$`6esn`]}.@usn5? =$usn1[..{`6esn`}]"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From _usn3[$`8esn`] As `` "),
    octest_legacy:ct_string("Remove {`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}.`1esn` Union Create `1esn`=Allshortestpaths((((`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})-[? *0Xa]-({`7esn`:{999}})-[`7esn`]->(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))))"),
    octest_legacy:ct_string("Unwind Allshortestpaths((:#usn8:#usn8{_usn3:$_usn3['s_str'][07],`7esn`:$1000 In $1000 In $`3esn`})<-[? *..12{#usn8:`5esn` Is Null,#usn8:`1esn`[{usn1}..``][7..$#usn8]}]-(`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]})-[:`6esn`|`5esn`{`8esn`:$0 Ends With 12.0}]-({`8esn`:$123456789[_usn3][{#usn7}]})) Ends With All(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"]) Ends With All(#usn7 In {``} Is Not Null Where usn1[9e12..][$7..]) As _usn4 Create Allshortestpaths((((`1esn` :usn2{`2esn`:0.e0 Starts With 12.e12 Starts With {_usn4},`8esn`:$`7esn` Is Null Is Null})-[`6esn`?:_usn3|_usn3 *0X0123456789ABCDEF]-(:@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]})<-[``? *00{`6esn`:'s_str'[00][{`5esn`}],``:01234567 Ends With .e12 Ends With $#usn7}]->(`8esn` {#usn8:010 In Count(*),`4esn`:12.e12[9e12..{`6esn`}]})))) Union Create (:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})-[?:`5esn`]->(:usn2),`2esn`=Shortestpath((({usn2:7[..999][..{#usn8}]})))"),
    octest_legacy:ct_string("Delete Case When `4esn`[`5esn`..12][@usn6..False] Then $123456789 Ends With $999 Ends With {999} When $123456789 Ends With $999 Ends With {999} Then False Is Null Is Null Else 7[True..][2.12..] End Starts With [`8esn` Ends With 999 Ends With .e12] Starts With (`5esn` :`4esn`)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null})<-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]-(`7esn` :`5esn`{`3esn`:`7esn` Is Null}),Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)],Extract(#usn8 In {`5esn`}[.e1..``] Where {`3esn`}[..07][..{`5esn`}]) Is Null Is Null Return $12[True..][{0}..] As _usn3"),
    octest_legacy:ct_string("Return Distinct [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..]) As `1esn`,0.0[Null][$`2esn`],`6esn` Is Not Null Is Not Null As `3esn` Order By $7[{usn2}..][{usn2}..] Asc,.e12 Contains 00 Contains {999} Asc,1e1 In \"d_str\" In `7esn` Desc Limit $_usn4 Is Null Is Null"),
    octest_legacy:ct_string("Load Csv With Headers From [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] Ends With None(`2esn` In `1esn` =~\"d_str\" Where False Starts With {`5esn`}) As usn2  Create #usn7=(({_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null})-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})),((`8esn` )) Union Load Csv From 0x0 Ends With $12 As usn2 Fieldterminator 's_str' Start usn2=Rel:_usn4(\"d_str\") ,_usn4=Node:`4esn`(_usn4={123456789})"),
    octest_legacy:ct_string("Delete {@usn6}[7]"),
    octest_legacy:ct_string("Return *,Reduce(usn1=$_usn4[0e0..][False..],_usn3 In {`3esn`}[`2esn`]|0e0[07]) In Any(#usn8 In 7[..999][..{#usn8}] Where 0.12 =~$0 =~$0) In Shortestpath(((:`1esn`{})<-[usn2?:``]-(usn2 :``:#usn8)<-[{_usn3:$@usn6 Ends With $_usn4 Ends With 0.12,#usn8:usn2 Is Not Null Is Not Null}]->(:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1}))) As _usn3 Order By 1.e1[$`1esn`..@usn6][$0..$_usn3] Asc,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 12.e12[7..$`6esn`]) Is Not Null Is Not Null Asc Skip [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789] =~Reduce(_usn3=$``,@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{#usn8} Is Null) =~Case {``} Is Null When 2.12 Then $123456789 Ends With {`1esn`} Ends With $`4esn` End Limit {usn1} Ends With $0 Create Unique `5esn`=((({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`)-[usn1? *0X0123456789ABCDEF]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))),((:@usn5$`5esn`))"),
    octest_legacy:ct_string("Remove All(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e1 Is Not Null)._usn3!,[12.0 Contains #usn7,12.e12[$_usn3..],$0[$`1esn`..07]]._usn4,None(#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8).@usn5 Return Distinct *,`` Is Not Null,.e12[@usn5..$12] As `4esn` Union All Load Csv With Headers From {#usn7:0X0123456789ABCDEF =~1e1 =~{`4esn`},`2esn`:1.0 =~'s_str' =~{`2esn`}}[Reduce(`4esn`=`5esn`[_usn4..],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{123456789} Is Null Is Null)][[`3esn` In {7} Is Null Where usn1 Is Null Is Null]] As #usn7 "),
    octest_legacy:ct_string("Create Unique ((:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?:`5esn` *0..]->(usn2 :``:#usn8)<-[`8esn`{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:`8esn`:`7esn`{#usn7:False =~$7 =~2.12})) Unwind 07[..True][..9e12] As _usn3 Load Csv From Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] As #usn8  Union All Unwind {1000} Is Null Is Null As `3esn` Match ``=((`5esn` :_usn4{7})-[`2esn`? *00]-(`8esn` {#usn8:@usn5 In {`7esn`} In `2esn`,`8esn`:Count ( * ) Contains `8esn` Contains .e1})<-[ *..01]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0})) Using Index `5esn`:`1esn`(usn1) Where #usn8[..{#usn7}]"),
    octest_legacy:ct_string("Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),Allshortestpaths(((@usn6 :#usn8:#usn8{`5esn`:123.654[True..$#usn8][0.12..Count(*)],usn1:`1esn`[{usn1}..``][7..$#usn8]})<-[`7esn`*..]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]}))) Union Remove All(#usn7 In `2esn`[..$#usn8][..Count(*)]).#usn7!,All(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where \"d_str\" Starts With 01).usn1?,[`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {_usn4} Starts With 0.e0 Starts With 0x0|123.654[`3esn`..]].`2esn`? Union All With Distinct *,07[$#usn7..{1000}],0X0123456789ABCDEF =~1e1 =~{`4esn`} Order By $`5esn`[2.12..] Asc Where @usn5 Is Null Create ((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})<-[`8esn`:`6esn`|`5esn`{`3esn`:$`8esn`,@usn6:usn2 Is Not Null Is Not Null}]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})),#usn7=((:`5esn`{``:1.0[0e0..0.e0]}))"),
    octest_legacy:ct_string("Merge Allshortestpaths((((:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null})-[`2esn`? *00]-(`1esn` :`5esn`{`5esn`:{``} Is Null})-[usn2?:usn2|``{_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]}]-({_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})))) On Create Set #usn8 =Extract(`5esn` In \"d_str\" Is Null Is Null)[Any(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where usn1 Starts With usn1 Starts With $``)][Case $`7esn` Is Null Is Null When {#usn7}[9e1..][{123456789}..] Then False =~1e1 =~0.e0 Else 1000 In {`8esn`} In 01 End],#usn7+=`4esn`[..Count ( * )][..{#usn7}],@usn5 =@usn6 In 1000 In $`` Remove usn1(Distinct 0X7[`7esn`][123.654],$`5esn`[..$`5esn`][..$12]).@usn5! Start `3esn`=Relationship:_usn3(`8esn`={123456789}) ,`2esn`=Rel:#usn8({``})Where 1.0[0e0..0.e0] Union All Foreach(@usn6 In {`2esn`:1000[..$0][..True],@usn5:{12} Ends With 0Xa Ends With $`6esn`}[Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn1} Ends With $0)..][Extract(`2esn` In `1esn` =~\"d_str\" Where $`4esn` In Null In 0xabc|{`5esn`} Starts With $`5esn` Starts With .e1)..]| Unwind #usn8 In $@usn6 As `4esn`) Return [12.e12[$_usn3..]][Shortestpath(((@usn6 :`4esn`)))..Reduce(`5esn`=01234567 Ends With .e12 Ends With $#usn7,`8esn` In 01[2.12..`8esn`]|0Xa =~Null =~$``)] As `1esn`,$`8esn` Contains 123456789 Contains $usn2 Order By Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null Desc,Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) Ascending,[`5esn` In $999[0.0..] Where \"d_str\"[..{@usn5}][..``]][..None(#usn8 In 7[..999][..{#usn8}] Where $`7esn`['s_str'])][..`1esn`(Distinct 12e12[$`3esn`],0.0 =~999)] Desc With Distinct *,{`2esn`} Ends With {`7esn`},Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null As `5esn` Skip 12.0[123.654][Count(*)]"),
    octest_legacy:ct_string("With  123.654 Is Not Null,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where False|{`1esn`}[12.0..`2esn`][@usn6..{usn1}]] =~Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where 00[{`8esn`}..][{`8esn`}..]|{0}) =~{_usn4:@usn6 Ends With {_usn3},`5esn`:$#usn8 Contains $`1esn` Contains {`6esn`}} Order By {@usn5:$`8esn` =~{1000}} Contains [1000 In {`8esn`} In 01,`` Ends With 0Xa Ends With `2esn`] Contains Reduce(#usn7={12} Is Not Null,#usn7 In {``} Is Not Null|usn2 Is Null) Descending Where $usn2[{@usn5}] Create Allshortestpaths((`3esn` :#usn8:#usn8)),((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`)) Remove {_usn3:`4esn` Ends With 07 Ends With {`3esn`}}.`1esn` Union All Delete `5esn`(Distinct $0,$_usn4 Contains Null Contains #usn8) In Case 12.0[123.654][Count(*)] When $_usn3[Count(*)] Then 0e0 =~`6esn` =~123456789 End In {`8esn`:False Is Null Is Null},`6esn`[2.12..01][{``}..False],[_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null|999 Is Not Null Is Not Null] Ends With [`2esn` In `1esn` =~\"d_str\" Where {@usn5} Is Null Is Null|{`5esn`} Starts With $`5esn` Starts With .e1] Ends With {``:usn1 Starts With usn1 Starts With $``} Merge (`1esn` :`4esn`{`6esn`:$`6esn` Ends With Count(*),`7esn`:_usn3 Starts With 12.e12 Starts With 0.12})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})"),
    octest_legacy:ct_string("Foreach(`4esn` In 999 Ends With Any(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 1.0 In Count(*))| Detach Delete Single(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]) Ends With Case When 07 Contains 0X7 Contains $`8esn` Then {`4esn`} =~9e0 =~{12} When .e1 Ends With 1e1 Ends With @usn5 Then $#usn8[Count ( * )] Else Count ( * )[True..][{#usn7}..] End Ends With Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End Unwind $#usn8[9e12..][.e1..] As usn2) With  $123456789 In 0X0123456789ABCDEF In 0.e0 As `6esn`,{`7esn`:{999} Contains .e0 Contains 12.0,@usn5:`5esn` Is Null} Contains {@usn5:{`3esn`} In 01} Contains Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 1.0[0X7][{`5esn`}]|{``}[010..][0xabc..]) Order By 1e1 In \"d_str\" In `7esn` Descending,`1esn`({`2esn`} Ends With {`7esn`},{`2esn`} Starts With 0.0 Starts With {usn1})[Extract(`4esn` In $`3esn` Is Not Null Where usn2 Is Not Null Is Not Null)..None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {_usn4} Starts With 0.e0 Starts With 0x0)] Desc Skip [Count(*) Ends With 12.0 Ends With 12,9e0[{0}..{`3esn`}][\"d_str\"..0Xa]][..Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``])][..{usn1:$_usn3[..1000],`7esn`:{1000} =~0 =~123.654}] Return Distinct *,$1000[0Xa][{#usn7}],{usn1} Is Not Null Is Not Null Order By 0.e0[123.654][01] Desc,{`2esn`}[``..07][0x0..1000] Desc Skip Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})) Limit 0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) Union All With  (`3esn` :@usn5{_usn3:{`3esn`} Is Not Null Is Not Null})-[`7esn` *0X0123456789ABCDEF]->({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[@usn6 *..01{#usn7:@usn6 Contains $1000 Contains {`7esn`},@usn5:`2esn` Starts With $_usn4}]->(`6esn` :@usn6:#usn8) Is Not Null Is Not Null As usn2 Order By $`6esn`[.e0..$`6esn`][$_usn3..{#usn7}] Ascending Skip $12 Is Not Null Is Not Null Limit $123456789 Ends With {`1esn`} Ends With $`4esn` Load Csv From Case When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $`4esn`[..$`3esn`][..0.0] Then `1esn` =~0 =~$#usn7 Else {``} Is Null End Contains Extract(#usn8 In 7[..999][..{#usn8}] Where \"d_str\"[#usn8]|$_usn3 In {1000} In 0.12) Contains All(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {@usn6}[7]) As `1esn`  Union All Foreach(`3esn` In $`6esn` Ends With Count(*)| Create #usn8=((_usn4 {usn1:True Contains {0} Contains 7})) Load Csv From .e1 In 0Xa In #usn7 As `2esn` Fieldterminator \"d_str\")"),
    octest_legacy:ct_string("Return Distinct 0X7[1000..{`1esn`}],Extract(#usn8 In {`5esn`}[.e1..``] Where {7}[..1.0][..9e0]) Ends With Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where `8esn` Ends With 999 Ends With .e12|9e1[..$`2esn`]) Ends With $_usn4 As `4esn`,12.e12[`3esn`] As #usn7 Merge Allshortestpaths((`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})-[usn1?:_usn3|_usn3]-(usn2 :#usn7)) Union All Unwind 7[$`8esn`..123456789][$usn1..$usn1] As _usn4 Unwind Allshortestpaths((((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})<-[ *0X7..]-(`4esn` {_usn3:Count ( * )[True..][{#usn7}..],_usn4:$`7esn`['s_str']})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}))))[{`6esn`:9e12[`1esn`..][$`1esn`..],usn1:@usn5 Is Null}][Allshortestpaths(((`5esn` {#usn8:usn1 Starts With usn1 Starts With $``,`3esn`:$`6esn` Is Null})))] As @usn5 Unwind Reduce(@usn6=0.e0 Ends With $#usn7 Ends With $7,`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999})[[#usn8[`3esn`..][{#usn7}..]]..(`5esn` :`4esn`{@usn6:{`6esn`} =~$999})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`8esn` :@usn6:#usn8)<-[{`8esn`:07 In `2esn` In 12e12}]->(:_usn4{`6esn`:{`6esn`} =~$999,`6esn`:$#usn7[..{`5esn`}][..9e12]})][Filter(#usn8 In 7[..999][..{#usn8}] Where 9e0)..Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0e0 Starts With `2esn` Starts With $``)] As #usn7 Union All With  *,9e1 In 2.12 Skip {`3esn`} Is Not Null Is Not Null Limit {_usn3}[12e12..]"),
    octest_legacy:ct_string("Remove $999.``,[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`1esn` Ends With 9e1 Ends With $123456789].`5esn`?,(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})-[usn2?]-(:@usn5)<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->(`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}}).`5esn`? Unwind `4esn`[`5esn`..12][@usn6..False] As #usn8 Match (((@usn5 {usn2:0.e0[123.654][01]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8)<-[`8esn`:`2esn` *..07]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Using Join On usn1,`4esn`,`6esn` Using Join On #usn7,_usn4 Union Remove [#usn8 In 7[..999][..{#usn8}] Where .e0[..$`8esn`]].`2esn`!,Single(`4esn` In $`3esn` Is Not Null Where @usn5 =~{`5esn`} =~`5esn`).`6esn`?,Extract(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where .e0 Starts With 0 Starts With 0.e0|@usn6[{`5esn`}]).usn1? Load Csv With Headers From {`7esn`} Is Null As `` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Delete $@usn5 Starts With 01 Starts With .e0,$usn1[{`5esn`}][$`6esn`] Start `6esn`=Relationship:usn2(#usn8=\"d_str\") ,`5esn`=Relationship(*) Remove Reduce(`2esn`=`4esn`[`5esn`..12][@usn6..False],_usn3 In {`3esn`}[`2esn`]|@usn6 Contains $1000 Contains {`7esn`}).@usn5,#usn8:`6esn` Union All Start _usn4=Node( {999}) Where 12.0 Contains #usn7 Start usn1=Relationship:`8esn`(#usn8={`2esn`}) ,`7esn`=Node:`6esn`({_usn3}) Foreach(`2esn` In None(`4esn` In $`3esn` Is Not Null Where 01[2.12..`8esn`])[Any(`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`})..][Extract(`2esn` In `1esn` =~\"d_str\" Where $_usn4[1.e1]['s_str']|usn1[`5esn`..$7])..]| Create Unique Allshortestpaths((:`1esn`{})-[?:@usn6|`6esn`{usn1:$usn1[{`5esn`}][$`6esn`]}]-(:`6esn`$123456789)),(((`3esn` :`8esn`:`7esn`)-[`7esn`:#usn8|`1esn` *0xabc..]->(#usn7 :`3esn`:@usn5{`7esn`:0x0[`4esn`..'s_str']})-[`2esn`?:`7esn` *..07$0]-(`7esn` :`3esn`:@usn5{`1esn`:$`5esn`[`3esn`..]}))) Unwind 0e0[..010] As ``) Union Remove Reduce(`5esn`=07[..True][..9e12],#usn8 In {`5esn`}[.e1..``]|@usn5 =~{`5esn`} =~`5esn`).`8esn`,Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where usn1 Ends With $@usn6 Ends With `3esn`).`6esn`!"),
    octest_legacy:ct_string("Load Csv With Headers From _usn3[..`8esn`][..2.12] As `5esn` Fieldterminator \"d_str\" Unwind 12.e12 Starts With {999} Starts With {`1esn`} As `4esn` Create Unique #usn7=(:#usn7)<-[`5esn`{usn1:\"d_str\" Starts With $123456789,``:Count ( * ) Contains 07}]->(_usn3 {#usn8:_usn4 Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]}) Union Return $`6esn` =~1.e1 =~12,$`3esn`[..$123456789][..$`1esn`] Limit Shortestpath((((`7esn` {`5esn`:123.654 Contains $`4esn` Contains 1.0,`8esn`:123.654 =~$usn2 =~{999}})<-[?{@usn6:0X7[`7esn`][123.654]}]->(:_usn4{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})<-[`2esn`?:`1esn` *00]->({#usn8:1.0 Is Null Is Null,`4esn`:{usn2}[.e0..$999]})))) In (usn2 :@usn5)-[?{`8esn`:{7} Is Null}]->(`` )<-[`3esn`?:`3esn`|:#usn8]-(`` :#usn8:#usn8) In (@usn6 {_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[:usn2|``]->(:`5esn`{#usn7:{123456789} Contains $#usn8}) Load Csv With Headers From 0Xa[usn2..] As `` Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From {`6esn`} Contains \"d_str\" As _usn3 Fieldterminator 's_str' Load Csv With Headers From Filter(`5esn` In \"d_str\" Is Null Is Null Where {_usn4} Starts With 0.e0 Starts With 0x0) Is Not Null Is Not Null As ``  Remove Allshortestpaths(((`` ))).#usn8,All(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where {12} Is Not Null)._usn3?,`6esn`:`8esn`:`7esn`"),
    octest_legacy:ct_string("Load Csv From $`4esn`[`7esn`] As `4esn`  With  *,_usn4(Count(*) In $12) In Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where $123456789 =~{`6esn`} =~\"d_str\"|01 Ends With 999 Ends With {`7esn`}),$`` Ends With 0.0 Ends With {1000} With Distinct All(`3esn` In {7} Is Null Where {_usn4}[1000..{@usn5}])[..`8esn`(Distinct True Contains {0} Contains 7,{usn1}[0X0123456789ABCDEF])][..All(`` In `` Is Not Null Is Not Null Where $`3esn` In $`6esn` In $``)],None(#usn8 In 7[..999][..{#usn8}] Where 2.12['s_str'..$12][{`1esn`}..`2esn`])[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}]][[$12 Ends With 07 Ends With $123456789,$@usn5 =~1000 =~1000,.e12[@usn5..$12]]] As @usn5 Order By True =~{`5esn`} Asc,\"d_str\" Contains {123456789} Contains 01 Asc Where {999} Starts With {0}"),
    octest_legacy:ct_string("Match `4esn`=({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[#usn7?{`8esn`:$123456789[_usn3][{#usn7}]}]->(_usn3 :`5esn`) Using Scan ``:_usn4 Where 0.e0 In $#usn7 In $_usn3 Detach Delete 7[{0}..{_usn4}] Remove [01[{@usn5}],12.0 =~1.0 =~9e12].`3esn`?,(usn2 :``:#usn8{`5esn`:$#usn8[$`8esn`..{`8esn`}]})<-[usn1:_usn4|:usn2]-(:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[`4esn`?:`2esn`{`4esn`:#usn7 Contains _usn3 Contains {`3esn`}}]-({`3esn`:.e1[..usn2][..`8esn`]}).`3esn`?,All(`4esn` In $`3esn` Is Not Null Where $@usn5 Contains 0xabc Contains {#usn7})._usn3! Union All Unwind `4esn`[..010][..{12}] As `5esn` Union All Unwind usn1 Ends With $@usn6 Ends With `3esn` As #usn7 With Distinct *,{`2esn`} Ends With {`7esn`},Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 1.0 =~7 =~{usn2}) Is Not Null Is Not Null As `5esn` Skip 12 In `3esn` In 1e1 Where $`7esn` =~{`8esn`} =~$usn1 Optional Match #usn7=((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})) Using Index @usn5:#usn7(`4esn`) Using Scan @usn5:_usn4 Where 0x0 =~$usn2"),
    octest_legacy:ct_string("Match Allshortestpaths((`1esn` {_usn4:1.e1[$`1esn`..@usn6][$0..$_usn3],#usn8:$@usn5[..12e12][..$123456789]})<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})),(:@usn6:#usn8{`7esn`:0x0[`4esn`..'s_str']}) Using Scan `2esn`:usn1 Using Index _usn4:`5esn`(`6esn`) Where $`6esn` Is Null Foreach(usn2 In $`` Is Not Null| Delete True[..$`6esn`],\"d_str\" Starts With $123456789) Return *,Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where #usn7) In [{_usn3}[..$12][..0.12],usn1 Is Null] In [#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\"] Limit [`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$123456789 Ends With $999 Ends With {999}] Ends With usn1(Distinct 1000 In {`8esn`} In 01,{_usn3}[..\"d_str\"][..`5esn`]) Ends With Reduce(_usn4=1000[Null..{123456789}],`5esn` In $999[0.0..]|9e1 In $`3esn` In $@usn6) Union Detach Delete 0e0[$1000][{usn1}]"),
    octest_legacy:ct_string("Unwind ({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)[Shortestpath((((@usn6 :`1esn`{_usn4:#usn7 =~Count ( * ) =~``,`6esn`:#usn8[#usn8..]})-[:usn1|@usn6 *7..12]->(`7esn` {usn1:`7esn`[..{usn1}],usn2:Null[``]})-[`8esn` *0X0123456789ABCDEF]-(`6esn` {_usn4:0Xa =~Null =~$``}))))..][{usn2:{7}[..1.0][..9e0]}..] As `8esn`"),
    octest_legacy:ct_string("Merge `2esn`=Allshortestpaths(((_usn4 )<-[?:`3esn`|:#usn8 *0X0123456789ABCDEF]->(#usn7 :_usn4)-[``?:`3esn`|:#usn8]->(:``:#usn8{`2esn`:{1000}[$999...e12][`7esn`..'s_str'],usn2:01234567 Is Null Is Null}))) Match `8esn`=Allshortestpaths((((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7})))) Where False =~1e1 =~0.e0 Create Unique `1esn`=(`5esn` :_usn4{7})<-[`2esn`?*..{`2esn`:$`5esn`[..$`5esn`][..$12]}]-(`1esn` :`5esn`{`5esn`:{``} Is Null}),`2esn`=Shortestpath(({@usn5:07[..True][..9e12]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({`8esn`:`3esn` In $0 In `1esn`,#usn8:0.e0[#usn8]})) Union All Merge (`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]}) On Create Set usn1+=Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End],`7esn` =[12.0,2.12 Is Not Null Is Not Null][Case When usn1 In 7 In {123456789} Then `5esn`[_usn4..] When `7esn`[9e0..] Then {`3esn`} In 01 End..999] On Match Set Shortestpath(({`3esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`2esn`:False Contains {`6esn`}})-[`6esn`? *0..]-(:usn1{`3esn`:{123456789} Is Null Is Null})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``})).`6esn` =$`8esn`[1000..0Xa],`4esn`+=1e1[1000..],(:`5esn`{`2esn`:Count(*)[..usn2][..usn2]})-[? *0Xa]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[`5esn`?{`8esn`:{7} In `2esn`,`4esn`:12.e12[7..$`6esn`]}]-(`3esn` :`6esn`).#usn7! =1000 =~@usn6 =~0x0 Start usn2=Rel:_usn4(\"d_str\") Where {`6esn`} Union All Create `1esn`=((@usn6 {_usn4:$`5esn` Is Not Null Is Not Null,``:9e0[{0}..{`3esn`}][\"d_str\"..0Xa]})<-[`1esn`? *..999{#usn8:{_usn4}[...e1][..$7]}]-(`5esn` :`6esn`)),#usn8=Shortestpath((#usn8 :@usn5)) Remove [usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X0123456789ABCDEF =~1e1 =~{`4esn`}].`6esn`,[_usn3 Contains $123456789 Contains ``].@usn5!,Reduce(`1esn`=True[..$`6esn`],@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7|{@usn6}[7]).`1esn`! Merge ((:@usn5{`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[ *0xabc..{usn2:{12} Is Not Null,`6esn`:``[$`2esn`]}]-(`4esn` {`8esn`:`3esn`[`3esn`..][#usn8..],`5esn`:{12} Is Not Null})) On Create Set usn1 =0.e0[123.654][01],@usn5+=$`8esn`[$`7esn`..][0.e0..]"),
    octest_legacy:ct_string("Delete 12.0 Contains #usn7,$12[Null..Count(*)][{`5esn`}..{999}],Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..])"),
    octest_legacy:ct_string("Load Csv With Headers From $123456789 Starts With 9e0 Starts With 's_str' As `3esn` Fieldterminator \"d_str\" Match `6esn`=((`3esn` {usn1:$0[..9e1],@usn5:`7esn`[..{usn1}]})-[#usn7?:`3esn`|:#usn8]->(`2esn` :usn1)-[`7esn`]-(`3esn` :@usn5{`4esn`:0Xa[$123456789..123.654][.e12..0.e0],`7esn`:$`8esn`[..00]})),`3esn`=Allshortestpaths(((#usn7 {``:9e12[`1esn`..][$`1esn`..],#usn7:#usn8})-[?:`7esn` *0X0123456789ABCDEF]->(:`6esn`{`7esn`:{usn2}[$`3esn`..][{#usn7}..]})<-[#usn8?:#usn7{`1esn`:#usn7 =~Count ( * ) =~``,usn2:`` Ends With $1000}]->(:@usn6:#usn8{`4esn`:$`8esn`[..00]}))) Where .e1 Is Null Is Null Union Start `3esn`=Relationship:_usn3(`8esn`={123456789}) Where $7[{usn2}..][{usn2}..] With  All(`3esn` In {7} Is Null Where Count ( * ) Contains 07) Is Null Is Null Limit $12[`5esn`..] Where 0.12[`2esn`..{`6esn`}] Optional Match usn1=(((@usn5 :`8esn`:`7esn`{`6esn`:`7esn`[$0][9e12],`4esn`:.e1 Is Null Is Null})<-[`4esn`:`2esn` *1000..00{#usn8:1.0[0e0..0.e0]}]->(`8esn` :_usn3:_usn3{`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`)))"),
    octest_legacy:ct_string("Return *,Case {`3esn`}[@usn6..0Xa][{12}..0Xa] When {usn1}[0X0123456789ABCDEF] Then 0x0 Ends With $12 When 0e0 Starts With `2esn` Starts With $`` Then {123456789}[9e12][{0}] Else 0X7[1000..{`1esn`}] End[..({`6esn`:.e1 Ends With 1e1 Ends With @usn5,usn1:2.12 Is Not Null Is Not Null})<-[`2esn`?:`7esn` *0X7..]-(usn2 {`6esn`:9e12[{123456789}..#usn8][{_usn3}..{#usn7}],#usn7:#usn7 Contains _usn3 Contains {`3esn`}})] As #usn7 Order By 0.e0[#usn8] Desc Limit Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] Create Unique `6esn`=Allshortestpaths((#usn8 :@usn6:#usn8)) Load Csv From 0.0 As `1esn` Fieldterminator 's_str' Union Load Csv From {`2esn`}[$`8esn`][$12] As `4esn`  Union Merge `8esn`=(#usn7 :`6esn`$1000)<-[`6esn`? *..010]-(`` :`1esn`)"),
    octest_legacy:ct_string("Return Distinct *,$1000[0Xa][{#usn7}],{usn1} Is Not Null Is Not Null Order By 0.e0[123.654][01] Desc,{`2esn`}[``..07][0x0..1000] Desc Skip Allshortestpaths((:``:#usn8{_usn3:1000[Null..{123456789}],`5esn`:$1000[`2esn`..`5esn`][1e1..1.e1]})-[usn1?]->(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})) Limit 0x0 Ends With Single(`5esn` In $999[0.0..] Where usn2[$_usn4..][True..]) Ends With Filter(#usn7 In {``} Is Not Null Where 0x0 Is Null) Create ``=Shortestpath(({`7esn`:{999}})<-[:`3esn`|:#usn8{@usn5:{#usn8} Is Not Null}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})),``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))) Load Csv From $`5esn`[2.12..{_usn3}][_usn3..{1000}] As `5esn` "),
    octest_legacy:ct_string("Using Periodic Commit Load Csv With Headers From 7[$`2esn`..{`5esn`}] As `6esn` Fieldterminator 's_str' Remove [`5esn` In \"d_str\" Is Null Is Null Where ``[$`2esn`]|9e1[2.12..{#usn8}]].@usn6! Match ``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))),@usn6=((_usn3 {`3esn`:010[#usn7..True],``:usn1 Ends With $@usn6 Ends With `3esn`})<-[_usn4{`8esn`:usn1 Is Null Is Null,@usn5:@usn6 Is Null Is Null}]-(_usn4 :_usn4{#usn7:12[1.e1..{_usn3}][1.e1..1.0],_usn4:Null[$`5esn`][False]})) Using Join On @usn6,`` Using Join On `1esn` Where `4esn` Is Not Null Is Not Null"),
    octest_legacy:ct_string("Remove [usn1 Ends With $@usn6 Ends With `3esn`,0xabc[.e0],{``}[010..][0xabc..]].``? Unwind (:#usn7{usn2:{`1esn`}[usn1][.e1],#usn8:$`5esn`[..$`5esn`][..$12]})<-[{`2esn`:False Starts With {`5esn`},`5esn`:$#usn8[$`8esn`..{`8esn`}]}]-(:_usn3:_usn3{``:`7esn` Starts With $#usn7 Starts With $`7esn`}) Is Not Null As usn1 Merge (_usn3 :#usn7)<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(`6esn` {`2esn`:Count(*)[..usn2][..usn2]})<-[`4esn`?:_usn4|:usn2 *..01]-(`4esn` :@usn6:#usn8{`1esn`:`4esn`[..010][..{12}]}) Union Create (`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2})"),
    octest_legacy:ct_string("Foreach(`5esn` In {#usn8} Is Null| Create `5esn`=Allshortestpaths(((`5esn` {_usn4:$`1esn`[{`2esn`}..],_usn4:$_usn3['s_str'][07]}))),`6esn`=Shortestpath((((_usn4 :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0})<-[``?:_usn4|:usn2{`1esn`:False Is Null Is Null}]->(usn2 :`6esn`{#usn7:Count ( * ) Contains 07})))) Start #usn8=Relationship:usn2(`8esn`={`8esn`}) ,`3esn`=Node:usn1(\"d_str\")Where 0.0[Null][$`2esn`]) Union Remove Single(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12]).#usn8,Any(`5esn` In $999[0.0..] Where {1000}[$`4esn`][\"d_str\"]).@usn6 With  12 Ends With 0x0 Ends With 0.e0,Case When 1.0 In Count(*) Then False End Contains `1esn`(Distinct 0.e0 Starts With `2esn`) Contains Reduce(`1esn`=\"d_str\" Is Null Is Null,#usn7 In {``} Is Not Null|#usn7),0e0[..010] As `` Limit $@usn5[010..$#usn8][12..$`4esn`] Start _usn4=Node:usn2(`8esn`='s_str') ,`5esn`=Rel:`8esn`({usn1})Where `4esn` Ends With 07 Ends With {`3esn`} Union Create Allshortestpaths((({`7esn`:$_usn4 Is Not Null Is Not Null,`4esn`:$`1esn`[{`2esn`}..]})<-[?*..]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}))) Start `5esn`=Rel:`8esn`({usn1}) "),
    octest_legacy:ct_string("Match ((_usn4 )) Using Index `3esn`:@usn5(`2esn`) Using Scan _usn3:`1esn` Where {usn1}[0X0123456789ABCDEF] Union All Match _usn3=((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})) Using Join On usn1,`4esn`,`6esn` Create Unique `8esn`=Allshortestpaths(((`4esn` {_usn4:`4esn` Ends With 07 Ends With {`3esn`},usn2:$0[$`1esn`..07]}))),Allshortestpaths((`2esn` :#usn7{`2esn`:$`5esn`[..$`5esn`][..$12]}))"),
    octest_legacy:ct_string("Create Unique _usn3=((:`1esn`{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})),_usn4=((@usn6 )<-[usn1?:`8esn` *..010]->(_usn3 {`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})<-[?:`8esn` *..0x0{`2esn`:$`4esn`[Null..]}]->({#usn8:0xabc[.e0]})) Union All Optional Match @usn5=Allshortestpaths((((_usn4 :#usn7)-[? *..07{`4esn`:@usn5 =~{`5esn`} =~`5esn`}]->(_usn3 :usn2{#usn7:{999} Starts With {0}})-[usn1?:`4esn` *..01]-({``:.e1 Is Null Is Null}))))"),
    octest_legacy:ct_string("Foreach(#usn8 In .e12 Ends With $`2esn` Ends With {``}| Start `3esn`=Node:@usn5({0}) ,`2esn`=Relationship:`3esn`(\"d_str\")) Start @usn6=Rel:``(_usn3='s_str') ,``=Node:_usn4(usn1={12}) Merge Allshortestpaths((_usn4 )<-[`3esn`?:`1esn`{`8esn`:@usn6 Starts With `6esn` Starts With $`1esn`}]->(:usn2)<-[`7esn`? *7..12]->(usn2 :``:#usn8{#usn7:9e1[1000][{123456789}],#usn7:`1esn` =~\"d_str\"}))"),
    octest_legacy:ct_string("Delete Case When {1000}[$`4esn`][\"d_str\"] Then `4esn`[``] When {usn2}[.e0..$999] Then {_usn3}[12.e12] Else `4esn`[``] End[Shortestpath((@usn5 {`7esn`:$`6esn`[010..]})-[?:`8esn`{`3esn`:1.0 In Count(*)}]-(`4esn` :#usn7{``:$#usn7[@usn5..{1000}][1.e1..7]})-[`5esn`?:@usn5{`4esn`:0Xa =~Null =~$``}]->(:#usn7{usn2:{usn1} Ends With $0,#usn8:`5esn` Starts With $`2esn` Starts With $1000}))..],$`4esn`[Null..],Case 0x0[`4esn`..'s_str'] When 0.e0 Ends With $#usn7 Ends With $7 Then 0X7[..2.12] When {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Then 0.e0[123.654][01] Else {_usn3}[..$12][..0.12] End[[`1esn`[..{@usn6}][..$123456789]]..] Match `3esn`=((_usn4 )) Using Join On _usn4,`4esn`,`5esn` Using Join On `8esn`,@usn5 Where Null In $7 In .e1 Foreach(`1esn` In 9e0[`3esn`..$_usn4]| Detach Delete Single(`` In `` Is Not Null Is Not Null Where 12.e12[0xabc])[`7esn`(Distinct $#usn7[..{`5esn`}][..9e12])..None(`5esn` In $999[0.0..] Where {999})] With Distinct *,{`5esn`:01234567 Is Null Is Null}[..`1esn`(Distinct 00 Starts With 0xabc,$0)],Shortestpath((`1esn` :#usn8:#usn8)-[?{`7esn`:0.12[$`3esn`..$_usn3][12.0..usn1],`8esn`:0X0123456789ABCDEF =~1e1 =~{`4esn`}}]-(`6esn` {usn2:$1000 =~$`2esn`,`4esn`:{``}[010..][0xabc..]})) In [{`1esn`}[usn1][.e1],{12} =~#usn8,0X0123456789ABCDEF =~1e1 =~{`4esn`}] In $`8esn` As _usn3 Skip 1.0 =~7 =~{usn2})"),
    octest_legacy:ct_string("With Distinct *,`1esn` Contains {usn2} Contains $#usn8,$`3esn` In $_usn4 In {_usn3} As `4esn` Order By $_usn3[`6esn`..] Descending,{_usn3} Is Null Is Null Desc,.e1 In 0 Asc Where _usn3 Starts With 12.e12 Starts With 0.12 Union Load Csv From 01[9e0][`2esn`] As `4esn`  Unwind {1000} =~$_usn4 As `2esn` Return $`6esn` Ends With Count(*) As ``,$@usn5 Starts With 01 Starts With .e0 As usn2,{`7esn`} Starts With $123456789 Starts With $@usn6 As _usn3 Order By {usn1} Ends With 12.0 Ends With 00 Desc,123.654[...e0] Asc Limit All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Starts With ({`7esn`:7[{0}..{_usn4}]})-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})-[:`2esn`*..{`1esn`}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null}) Starts With Any(`` In `` Is Not Null Is Not Null Where {0}[12.0..0Xa][$`5esn`..{_usn3}]) Union All With Distinct *,`8esn` Ends With $`2esn`,{12} Contains {123456789} Contains `4esn` Foreach(usn2 In 123.654[{_usn3}..1.0]| Return [1000 =~@usn6 =~0x0] Starts With {#usn8:$`7esn` =~{`8esn`} =~$usn1,`7esn`:0xabc[01..{999}][{7}..{`7esn`}]} Starts With `7esn`(Distinct 123.654[`3esn`..]) As `1esn`,0.0[Null][$`2esn`],`6esn` Is Not Null Is Not Null As `3esn` Skip (usn2 :_usn4)-[ *7..12]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})[$`2esn`]) Create Unique `8esn`=(:usn1{``})<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(#usn8 :_usn3:_usn3{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]})"),
    octest_legacy:ct_string("Using Periodic Commit Load Csv From $`3esn` In 123.654 In #usn8 As `` Fieldterminator \"d_str\" Merge Allshortestpaths((`` :_usn4{_usn4:False[..``],usn2:9e1[1000][{123456789}]}))"),
    octest_legacy:ct_string("Optional Match _usn3=((:usn1{usn1:{`6esn`}})) Using Index `2esn`:`1esn`(`4esn`) Unwind usn1(Distinct $@usn5 Starts With $1000)[[`3esn` In {7} Is Null Where 1.0 Starts With 12e12 Starts With {`5esn`}|0Xa =~Null =~$``]..] As `7esn`"),
    octest_legacy:ct_string("Load Csv From 123.654[{_usn3}..1.0] As usn1  Load Csv With Headers From ['s_str' In 00,{@usn6}[$`6esn`..`4esn`]] Is Null Is Null As @usn6 Fieldterminator \"d_str\" Union Start _usn4=Relationship(,) Where @usn5 In {`7esn`} In `2esn` Load Csv With Headers From Case {usn2} When {_usn4} Starts With 0.e0 Starts With 0x0 Then 12 Ends With 0x0 Ends With 0.e0 Else 1.0 =~'s_str' =~{`2esn`} End[(:`3esn`:@usn5{`2esn`:$_usn4[1.e1]['s_str'],#usn7:$12[True..][{0}..]})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True})..All(`3esn` In {7} Is Null Where $#usn7[@usn5..{1000}][1.e1..7])][{usn2:$`5esn`[..$`5esn`][..$12]}..Any(`8esn` In 01[2.12..`8esn`] Where `1esn`[{usn1}..``][7..$#usn8])] As `4esn`  Foreach(`7esn` In {@usn6} Ends With 's_str' Ends With 12.0| With Distinct `7esn` Is Null As `7esn`,count($123456789 Is Null Is Null,{`7esn`} Starts With $123456789 Starts With $@usn6)[`8esn`(Distinct `8esn` =~0xabc =~010)][Case When `2esn`[..$#usn8][..Count(*)] Then False =~1e1 =~0.e0 When {`4esn`} Starts With $usn2 Starts With $1000 Then {``} Is Not Null End] As @usn5,1000 In `7esn` In 9e12 As `6esn` Limit $`` Is Not Null Match `2esn`=Allshortestpaths((({`3esn`:.e1[..usn2][..`8esn`]})-[`1esn`?:`6esn`|`5esn`]->(:usn1{``})-[usn1?:`8esn` *..12{``:{``} Starts With $`2esn` Starts With `1esn`}]->(:`1esn`{_usn4:{999}}))),#usn7=Shortestpath((((#usn7 :`8esn`:`7esn`{`5esn`:1.0 In Count(*)})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]->(:`2esn`:usn1{usn2:{`7esn`}[..{`4esn`}],_usn3:{_usn3}[..\"d_str\"]})-[`5esn`:`5esn`{`5esn`:01234567 Is Null Is Null}]-({`7esn`:00[{`8esn`}..][{`8esn`}..],#usn8:$@usn5 =~1000 =~1000})))) Using Scan ``:_usn4 Using Scan ``:`2esn`)"),
    octest_legacy:ct_string("Merge usn1=(#usn7 :`8esn`:`7esn`) With Distinct *,12[..$`4esn`],Case When 1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4] Then {1000} =~0 =~123.654 When `8esn`[`4esn`..{#usn8}][$12..2.12] Then 00[$`7esn`] End Contains Extract(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where $`7esn` =~{`8esn`} =~$usn1) Contains [0.12 =~`5esn` =~`5esn`] Order By {12} Contains {123456789} Contains `4esn` Desc,{_usn3:`4esn`[..Count ( * )][..{#usn7}]}[..{_usn4:`5esn`[.e0..][07..],`3esn`:{0} In $_usn3}][..Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))] Desc,`1esn` In .e0 In {`3esn`} Descending Limit 7 Contains @usn6 Where usn1 Starts With usn1 Starts With $`` Union Create _usn3=Allshortestpaths((((:usn1{`5esn`:`5esn`[_usn4..],`4esn`:`7esn`[..{usn1}]})<-[ *123456789..{@usn6:1e1[{`3esn`}..{`4esn`}][0Xa..$_usn4],`6esn`:12e12 Ends With {usn1}}]->(#usn8 :@usn6:#usn8)-[usn1? *1000..00]->({`4esn`:2.12['s_str'..$12][{`1esn`}..`2esn`],`1esn`:0e0 In @usn5})))),(((#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})<-[usn1 *..999{@usn5:1.0[0X7][{`5esn`}],_usn3:$`7esn` Is Null Is Null}]-(#usn7 :`6esn`{`4esn`:12e12 Is Not Null Is Not Null,_usn4:@usn6 Starts With `6esn` Starts With $`1esn`})-[`4esn`?:_usn4|:usn2 *..01]->(`7esn` :`8esn`:`7esn`{#usn8:01234567[usn2..$12][{`7esn`}..$usn2]}))) Foreach(`1esn` In Extract(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where `5esn` Starts With $`2esn` Starts With $1000) Ends With Reduce(``=0.12 =~$0 =~$0,`2esn` In `1esn` =~\"d_str\"|9e12[`1esn`..][$`1esn`..])| Unwind 7 Starts With `6esn` Starts With 01234567 As #usn8) Load Csv From Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..] As #usn8 "),
    octest_legacy:ct_string("Return *,{12} Is Not Null Order By $`1esn`[1.0..][_usn3..] Ascending Skip `` =~'s_str' =~$#usn7 Limit $`1esn` =~0X7 Load Csv From 123.654[...e0] As usn2  Merge (`` :@usn5{`1esn`:2.12 Contains usn2 Contains True}) Union All Remove 0xabc.`1esn`?,Allshortestpaths(((($#usn8)-[`5esn` *..12{`4esn`:{123456789}[9e12][{0}]}]->(`3esn` :`5esn`)<-[? *7..12]->({`7esn`:9e1[2.12],`4esn`:$`8esn` Contains 123456789 Contains $usn2})))).``?,(_usn3 {`5esn`:12.e12[0xabc],`2esn`:{`7esn`}[..$@usn5][..$#usn8]})<-[?:#usn7 *..07{`6esn`:0X7 =~9e1,`2esn`:Null Ends With {`5esn`} Ends With 0.e0}]->(:@usn5{_usn4:0x0[`4esn`..'s_str'],`5esn`:123456789 Ends With $`6esn` Ends With $#usn7})-[`2esn`?:`2esn`{`1esn`:0.12 In _usn3 In {0}}]->(:`4esn`{``:2.12 Is Not Null Is Not Null}).`2esn`!"),
    octest_legacy:ct_string("With Distinct Extract(`8esn` In 01[2.12..`8esn`] Where {usn2}|$0[12.e12..]) =~Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where $@usn5 Is Not Null|7 Ends With $`4esn`) =~(usn1 {`2esn`})<-[`4esn`?:`1esn` *..999{`4esn`:False,_usn4:$`7esn` Is Null Is Null}]->(:_usn3:_usn3{`4esn`:12e12 Ends With {usn1}})<-[`7esn`?:`8esn`]-(`3esn` {@usn6:`4esn`[..010][..{12}]}) As `1esn`,Extract(`4esn` In $`3esn` Is Not Null Where {@usn5} Is Null Is Null)[..Any(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})] Order By $`1esn`[{`2esn`}..] Desc,$12 Starts With $`8esn` Starts With $`1esn` Descending Union All Remove Any(`3esn` In {7} Is Null Where 1e1 Contains Count ( * )).`4esn`,[#usn8 In 7[..999][..{#usn8}] Where $_usn4[1.e1]['s_str']|`2esn` Is Null].usn1,None(#usn8 In 7[..999][..{#usn8}] Where $_usn3 Contains 999 Contains \"d_str\")._usn3? Unwind [`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] As `3esn` Start `4esn`=Node:_usn4(#usn7=\"d_str\")  Union Match (:``:#usn8$`3esn`)-[`1esn`?:`8esn`]->(`4esn` :`7esn`:_usn3{`6esn`:{123456789}[0xabc..],usn2:{_usn4}[...e1][..$7]}) Where `5esn` Is Null Create `6esn`=Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01})))),_usn3=((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})) Match (`7esn` :``:#usn8)<-[ *0X7..]-(`2esn` {_usn3:`1esn` Contains {usn2} Contains $#usn8})-[_usn4:#usn8|`1esn`{`6esn`:#usn8[..{#usn7}]}]->(#usn7 :`4esn`) Using Index @usn5:`2esn`(@usn5) Using Scan _usn4:usn1 Where .e12 In 0.e0 In {12}"),
    octest_legacy:ct_string("Merge #usn8=Allshortestpaths((({`8esn`:$usn2[9e0],_usn3:$usn1[{`5esn`}][$`6esn`]})-[? *..0x0{_usn3:01 Ends With 999 Ends With {`7esn`}}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[?{usn1:0[`7esn`..]}]->({usn1:{`7esn`}[`6esn`][#usn7],usn1:{999} Starts With $999}))) Start _usn3=Relationship:`3esn`('s_str') ,_usn3=Node:`5esn`(`7esn`='s_str')Where 0.e0 Starts With `2esn`"),
    octest_legacy:ct_string("Return *,All(#usn7 In {``} Is Not Null Where {_usn4}[...e1][..$7]) Starts With ({`7esn`:7[{0}..{_usn4}]})-[`` *..12]->(:`6esn`{@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5})-[:`2esn`*..{`1esn`}]-(usn2 :`5esn`{`7esn`:01234567 Is Null Is Null}) Starts With Any(`` In `` Is Not Null Is Not Null Where {0}[12.0..0Xa][$`5esn`..{_usn3}]) As `5esn`,{usn2}[$`3esn`..][{#usn7}..] As `5esn` Order By `7esn` In {123456789} In `1esn` Asc,{_usn4:Count ( * )[True..][{#usn7}..],``:{``} Ends With `7esn` Ends With 0.0} In (usn2 {``:01[{@usn5}]})<-[?:_usn4|:usn2{`8esn`:`6esn`[12..$usn2][{#usn8}..{usn2}],``:_usn3 Contains $123456789 Contains ``}]->(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})<-[:`7esn` *1000..00{@usn6:$#usn8[$`8esn`..{`8esn`}],``:0Xa[usn2..]}]-(:_usn4{_usn4:{7} In `2esn`}) In {`4esn`:`7esn` Is Null} Desc,Reduce(`8esn`={@usn5}[{#usn8}][9e0],`3esn` In {7} Is Null|0e0 Starts With 1000 Starts With #usn7)[Single(#usn8 In 7[..999][..{#usn8}] Where 123456789 Is Null)] Desc Skip Single(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 9e12[`6esn`..12.0]) =~({``:$`8esn` =~{1000}})<-[#usn8? *0..]->(`3esn` :`4esn`{`6esn`:0.e0 Ends With $#usn7 Ends With $7}) =~Shortestpath((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})) Return *,{``}[$#usn8..$usn1] As #usn8,{`8esn`:{@usn6}[{#usn7}..$#usn8][$_usn4..12.e12],`6esn`:2.12 =~Count(*)} =~Shortestpath(((:`4esn`{`5esn`}))) As @usn5 Order By 1.e1[`8esn`][00] Descending,$_usn3[`6esn`..] Descending,01234567 Ends With 0xabc Asc Unwind `6esn`(Distinct 2.12 Ends With $_usn3 Ends With `3esn`) Is Null As @usn5 Union Load Csv From Case 00[`2esn`..12][123456789..0.e0] When `8esn` Contains $usn1 Contains $12 Then 7[{0}..{_usn4}] End[[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]]..Allshortestpaths(((`3esn` :`6esn`)<-[`4esn`:`8esn` *00]->({`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]})))] As usn1 Fieldterminator 's_str' Remove Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..]).`2esn`,({@usn5:{usn2}[.e0..$999]})<-[`8esn`:_usn3|_usn3{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->(`6esn` :@usn5)._usn4? Match `8esn`=(((usn2 :#usn7)<-[_usn3?:#usn7 *..0x0]-(:@usn6:#usn8$`5esn`)-[`7esn`:`1esn` *0X0123456789ABCDEF{`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}]->(`4esn` {usn2:0x0 Is Null,`5esn`:{usn2} =~12}))),((_usn3 :`7esn`:_usn3)-[]-(`` :_usn4{@usn5:123.654[True..$#usn8][0.12..Count(*)]}))"),
    octest_legacy:ct_string("Unwind ({``:$`8esn` =~{1000}})-[:`8esn`*]->({_usn3:\"d_str\" Is Null Is Null,#usn7:00[$`7esn`]})-[`4esn`]->(:`6esn`$123456789) Contains Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {123456789}[0xabc..]) As #usn7"),
    octest_legacy:ct_string("Create Unique (:`4esn`{`7esn`:$0[..9e1],usn1:{_usn4} Ends With `6esn`})-[:@usn5{@usn5:{#usn7}[9e1..][{123456789}..],``:#usn7 Is Not Null Is Not Null}]->(`4esn` :`6esn`{_usn3:$123456789 Ends With `3esn` Ends With 123456789,`6esn`:0e0 Starts With 2.12 Starts With $12})-[`7esn` *..0x0]-(`2esn` :_usn4) Union Create Unique `6esn`=(#usn8 :#usn8:#usn8{@usn5:{#usn8} Is Not Null})<-[@usn6 *..01{#usn7:@usn6 Contains $1000 Contains {`7esn`},@usn5:`2esn` Starts With $_usn4}]->(`6esn` :@usn6:#usn8) Union All Merge `6esn`=(:``:#usn8$`3esn`) On Match Set `3esn`+=Count(*) In $12,#usn7+=Any(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {`8esn`} Ends With `6esn`)[None(#usn8 In 7[..999][..{#usn8}] Where 0Xa[2.12])..][[@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where 0X0123456789ABCDEF[123456789]]..],``+=7[$`8esn`..123456789][$usn1..$usn1] On Create Set `2esn` =$``[1.0],`8esn` =010[..12e12][..12e12],`5esn` =Extract(`8esn` In 01[2.12..`8esn`] Where 0X7[1000..{`1esn`}]|{@usn5} Is Null Is Null)[Case When $0[..9e1] Then Count(*)[..usn2][..usn2] When {`2esn`} Starts With 0.0 Starts With {usn1} Then 0e0 In @usn5 Else 01 =~{_usn3} =~`3esn` End.._usn3(1.0 In Count(*),0[{usn2}..][$`6esn`..])][count(Distinct $12[Null..Count(*)][{`5esn`}..{999}],$`4esn`[`7esn`])..Case When $123456789 Ends With $999 Ends With {999} Then `3esn`[{usn1}] When #usn7 =~Count ( * ) =~`` Then $_usn4 Starts With 1e1 End] Remove Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 0X7[`7esn`][123.654]|$@usn5 Starts With {0} Starts With 12).@usn6?"),
    octest_legacy:ct_string("Load Csv From 1e1 Contains Count ( * ) As usn2 Fieldterminator \"d_str\" Union Return Distinct Count(*) In $12 As @usn6,True Contains {0} Contains 7 As _usn3 Limit Shortestpath((((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))))[..Case 0Xa =~123456789 =~_usn4 When 0[{usn2}..][$`6esn`..] Then {123456789} Is Not Null When $1000 In $1000 In $`3esn` Then 0.e0[#usn8] End][..(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})] Delete 00[{`8esn`}..][{`8esn`}..] With  None(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {usn2})[Any(`` In `` Is Not Null Is Not Null Where {`6esn`} Contains \"d_str\")..Reduce(usn1=#usn7[usn1][$`5esn`],`3esn` In {7} Is Null|Count(*) Ends With 12.0 Ends With 12)][(:usn2{_usn3:`7esn`[9e0..],`6esn`:.e0 Starts With 0 Starts With 0.e0})-[`8esn`?]->(`1esn` :#usn8:#usn8)-[ *7..12{@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}}]-(`2esn` :`1esn`{`8esn`:$12 Is Null Is Null,`2esn`:0e0 Contains Null})..({usn1:`5esn`[_usn4..]})<-[usn2:`2esn` *..01{`6esn`:{#usn7}[..9e12][..`8esn`]}]->({`5esn`:{#usn7} Is Not Null Is Not Null,`3esn`:@usn6 Starts With `6esn` Starts With $`1esn`})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})],@usn5 =~{`5esn`} =~`5esn` As _usn4,$123456789 In $#usn7 In `4esn` As `` Order By {`3esn`}[..07][..{`5esn`}] Desc Limit 12.0 Where {123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4] Union Load Csv With Headers From {@usn6}[$`6esn`..`4esn`] As usn2 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Foreach(usn2 In Case {#usn8} Is Null When .e1 =~$`8esn` Then \"d_str\"[..{@usn5}][..``] When {_usn3}[12.e12] Then 7 Ends With $`4esn` Else $123456789 Starts With 9e0 Starts With 's_str' End In [`4esn` In $`3esn` Is Not Null Where 9e0[{0}..{`3esn`}][\"d_str\"..0Xa]]| Remove Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 0.e0[123.654][01]).`2esn`,({#usn7:{123456789} Contains $#usn8})-[`7esn` *..0x0]-(`2esn` :_usn4)-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null}).usn2?,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 0[.e0..{`1esn`}]|010[#usn7..True]).`8esn`?) Unwind {``}[`8esn`..] As _usn3 Union All Start ``=Rel:#usn8({12})  Delete {#usn8:#usn7[usn1][$`5esn`],`4esn`:01[2.12..`8esn`]} =~{usn1:True =~010,#usn7:0X0123456789ABCDEF Is Null Is Null} =~[$`1esn` Ends With 9e1 Ends With $123456789,Count ( * )[0.12...e1],`5esn`[7][{usn2}]] Union All Foreach(_usn4 In {`2esn`} Is Not Null| Match usn2=(`7esn` {`4esn`:0.e0 Ends With $#usn7 Ends With $7,`2esn`:0x0 =~$usn2}),`4esn`=Allshortestpaths((({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))) Using Join On #usn7,_usn4 Using Join On `8esn`,@usn5 Where `3esn`[{`2esn`}])"),
    octest_legacy:ct_string("Merge Allshortestpaths(((`2esn` :``:#usn8)<-[usn2?:#usn7]-(:`5esn`{`1esn`:{12} Ends With 1.0 Ends With .e0}))) Remove (_usn4 {#usn7:1.0 Contains $_usn4,`7esn`:00 Starts With 0xabc})<-[`8esn`?:`2esn`{`3esn`:$1000 Is Null Is Null,`8esn`:`` Ends With 0Xa Ends With `2esn`}]-(_usn3 :usn1{`6esn`:$usn1 Ends With $`` Ends With $12})<-[usn2?:#usn7]-({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]}).#usn7,Extract(#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|7[True..][2.12..]).@usn5 Union All Merge `4esn`=Shortestpath((((#usn8 :`8esn`:`7esn`{#usn7:#usn8[..{#usn7}]})-[usn1?]->({_usn3:False =~1e1 =~0.e0,_usn3:{999} Starts With $999})-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)))) On Create Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn`"),
    octest_legacy:ct_string("Load Csv With Headers From 's_str' In 00 As @usn6 Fieldterminator 's_str' Union Unwind {`4esn`}[$usn2..07] As `7esn` Return *,{12} Is Not Null As `7esn` Skip 9e12 Is Not Null Is Not Null Union Remove [.e1[..usn2][..`8esn`],`8esn`[{123456789}..],`3esn` In $0 In `1esn`].`5esn`! Load Csv With Headers From $`5esn`[{`3esn`}] As `8esn` Fieldterminator \"d_str\" With  2.12 Ends With $_usn3 Ends With `3esn` Order By [Count(*) Ends With 12.0 Ends With 12,9e0[{0}..{`3esn`}][\"d_str\"..0Xa]][..Any(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where Null[``])][..{usn1:$_usn3[..1000],`7esn`:{1000} =~0 =~123.654}] Asc,count(`1esn` Contains {usn2} Contains $#usn8) Contains [`5esn`[7][{usn2}],@usn5 Is Null] Descending,(:`6esn`{`2esn`:$#usn7[..{`5esn`}][..9e12],`8esn`:{1000}[{_usn3}..]})-[?:`5esn`]->(:usn2)<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(`6esn` :@usn6:#usn8)[Reduce(`7esn`=7[$`2esn`..{`5esn`}],`1esn` In {`6esn`}[..$@usn6][..`7esn`]|$_usn4[0e0..][False..])..({``:00 Starts With 0xabc,`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[? *0X0123456789ABCDEF{`6esn`:`1esn` =~\"d_str\",#usn8:{`4esn`} =~9e0 =~{12}}]-(:#usn8:#usn8{`2esn`:$_usn4 Contains Null Contains #usn8,`6esn`:$`5esn`[$`4esn`..{@usn6}][07..$@usn6]})][{}..{@usn6:`4esn`[..010][..{12}]}] Descending Skip count(`1esn` Contains {usn2} Contains $#usn8) Contains [`5esn`[7][{usn2}],@usn5 Is Null] Limit $1000 Is Null Is Null"),
    octest_legacy:ct_string("Optional Match #usn7=(:`7esn`:_usn3{_usn3:Null Ends With {`5esn`} Ends With 0.e0,@usn5:$`7esn` =~{`8esn`} =~$usn1})<-[usn2?:`6esn`|`5esn`{_usn3:{#usn7}[`2esn`..]}]->({`1esn`:{`2esn`} Ends With {`7esn`}})<-[`6esn`? *..12{usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1}]-(:`1esn`{``:.e1 Is Null Is Null}) Using Join On `7esn`,`8esn`,`3esn` Using Join On ``,#usn7,`` With Distinct 9e1 Contains #usn7 As `1esn` Order By $#usn7 Contains 0x0 Contains 1000 Asc,`3esn`[{`2esn`}] Ascending,12.e12[7..$`6esn`] Descending Skip Count ( * ) Contains 07 Limit $#usn7[#usn7..] Load Csv From 9e1[0.0..] As #usn7 Fieldterminator \"d_str\""),
    octest_legacy:ct_string("Create `1esn`=Allshortestpaths(((@usn6 :`8esn`:`7esn`)<-[`6esn`?:`4esn` *..01]->(`3esn` :#usn7{usn2:12.0 =~999 =~$_usn3,@usn6:{usn2}[$`3esn`..][{#usn7}..]})-[usn2?]-(`7esn` :`5esn`))),@usn6=Shortestpath(((_usn3 :`4esn`{`7esn`:`5esn` Is Null,`7esn`:{`1esn`}[12.0..`2esn`][@usn6..{usn1}]})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})<-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(usn1 :#usn8:#usn8{``:$@usn6 Ends With $_usn4 Ends With 0.12,`6esn`:$`8esn`[..{`2esn`}]}))) Merge Shortestpath(({_usn4:00 Starts With 0xabc})<-[`4esn`?:`2esn`{`4esn`:#usn7 Contains _usn3 Contains {`3esn`}}]-({`3esn`:.e1[..usn2][..`8esn`]})) On Match Set #usn8 =#usn7 =~Count ( * ) =~``,{#usn8:$`7esn`['s_str'],_usn3:{999}[1000..{usn2}]}.#usn7? =[`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where {0}|{usn1} Is Null Is Null][Allshortestpaths(((`5esn` :`4esn`)-[@usn6?*..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}]->(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`})<-[``:#usn7{`8esn`:$`8esn` =~{1000}}]-(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})))..] Union All Unwind Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[[_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]]..Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End] As #usn7 Delete $0[$`1esn`..07],0xabc[01..{999}][{7}..{`7esn`}],.e12 Is Not Null Is Not Null"),
    octest_legacy:ct_string("Start usn2=Node:_usn4(``={#usn7})  Return Distinct $@usn5 Is Not Null Is Not Null As `5esn`,0e0[07] As `5esn` Order By $#usn7 Starts With {7} Starts With 1.0 Desc,{12} Is Not Null Ascending Limit {``} Ends With `7esn` Ends With 0.0 Union All Load Csv From \"d_str\"[..{@usn5}][..``] As `6esn` Fieldterminator 's_str'"),
    octest_legacy:ct_string("Match ((:@usn6:#usn8{`4esn`:$`8esn`[..00]})<-[_usn4?:_usn4|:usn2 *00]->(:`7esn`:_usn3{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6})-[`2esn`?:`7esn` *..07$0]-(`6esn` :`6esn`{`8esn`:{0} In _usn4,_usn3:`7esn`[..2.12][..{usn1}]})),(((@usn5 {usn2:0.e0[123.654][01]})-[usn1:_usn4|:usn2 *..010{``:2.12 Is Not Null Is Not Null}]->($#usn8)<-[`8esn`:`2esn` *..07]->(:`5esn`{`1esn`:{999}[1000..{usn2}],`8esn`:{#usn7} Is Not Null Is Not Null}))) Using Scan `5esn`:usn1 Where $1000 Is Null Is Null Union Merge Allshortestpaths(((_usn3 :`3esn`:@usn5))) On Create Set @usn5+={`6esn`:1000[..$0][..True],_usn4:Count ( * ) Ends With $@usn5}[[`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}|$#usn8 Contains $`1esn` Contains {`6esn`}]..Reduce(usn2=$_usn4[0e0..][False..],`8esn` In 01[2.12..`8esn`]|usn1[9e12..][$7..])][[_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where `3esn`[{`2esn`}]|$0[12.e12..]]..Filter(_usn3 In {`3esn`}[`2esn`] Where 01234567 Is Null Is Null)] Remove None(`4esn` In $`3esn` Is Not Null Where {123456789} Is Not Null).usn2!,Single(`2esn` In `1esn` =~\"d_str\" Where 0X0123456789ABCDEF Ends With $`8esn` Ends With 0.12).usn1"),
    octest_legacy:ct_string("Create usn1=(((:`1esn`{_usn4:{999}})-[{`1esn`:$`5esn`[`3esn`..]}]->(`7esn` :``:#usn8)<-[`5esn`?:`8esn` *1000..00]->(:_usn4{`6esn`:$usn1 In {999} In $#usn7,_usn4:#usn7}))) Union All Unwind [#usn8 In 7[..999][..{#usn8}] Where {12} =~#usn8|\"d_str\" Contains {123456789} Contains 01] Contains {_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null} As @usn6 Union Create usn2=Allshortestpaths((usn2 :`4esn`)-[`4esn`? *0Xa{#usn8:{999} Starts With $999}]->(`` :_usn4)),_usn3=({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})-[@usn6?$0]-({@usn6:`7esn`[..{usn1}],#usn8:2.12 Contains usn2 Contains True}) Return 01[9e0][`2esn`] As `` Limit Case _usn3[$`8esn`] When 12e12 Contains 0Xa Then 7[{0}..{_usn4}] End Starts With {#usn7:Null Ends With `2esn` Ends With $usn1,`5esn`:12.0} Remove Allshortestpaths(((`7esn` {`2esn`:$`6esn`[123456789..12][True..{`3esn`}],#usn7:$_usn3[Count(*)]})-[#usn8? *..07$_usn4]->(`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]}))).#usn7?,`8esn`:`2esn`:usn1,`2esn`:`4esn`"),
    octest_legacy:ct_string("Remove [7[..123456789][..{@usn6}],#usn7].#usn8 Union All Create `1esn`=((`` :@usn6:#usn8{`8esn`:'s_str' In 00})-[#usn8:`6esn`|`5esn`]-(usn1 {`1esn`:$@usn6 Ends With $_usn4 Ends With 0.12,`3esn`:`4esn` =~$`5esn`})-[{`1esn`:{123456789}[0xabc..],@usn6:0X0123456789ABCDEF[{_usn4}..00]}]->(`7esn` {@usn5:{7}[..1.0][..9e0]})),`8esn`=(:`3esn`:@usn5{#usn8:_usn4 Is Null Is Null})<-[`6esn`? *..0x0{_usn4:$_usn3 In {1000} In 0.12,#usn7:{`7esn`}[..{`4esn`}]}]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})<-[`6esn`?:`4esn` *..01]->(@usn5 :`4esn`) Union Foreach(_usn4 In {@usn6}[7]| Return None(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF])[..usn1(Distinct)][..Case {usn2}[.e0..$999] When Null[$#usn7] Then 's_str'[00][{`5esn`}] When {@usn6} Ends With 's_str' Ends With 12.0 Then @usn6 Contains Null Contains $`7esn` Else 2.12 Contains `1esn` End] As `5esn`,01 Is Null As `2esn`,{1000} =~$_usn4 Order By Case When {12} Ends With 1.0 Ends With .e0 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] When {``}[...e12] Then {`2esn`} Starts With 0.0 Starts With {usn1} Else 123456789[$@usn5..] End[Case When $_usn4[0e0..][False..] Then $`2esn` Is Null Is Null Else `` Ends With 0Xa Ends With `2esn` End..Any(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12)][count($`3esn` Is Null)..(:`1esn`{`5esn`})<-[`7esn`?:#usn8|`1esn` *0xabc..{#usn8:$#usn8 =~{@usn5}}]->(`` {usn2:0X0123456789ABCDEF[123456789]})-[_usn3? *7..12{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(@usn5 {usn2:0.e0[123.654][01]})] Asc Skip {`4esn`:Count ( * ) Contains 07,#usn8:$7[0.12][usn1]} Ends With [`` In 123456789 Ends With 12.e12 Ends With $`7esn`|usn1 Is Null] Ends With Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where 0X7[{@usn6}]) Return Distinct `4esn` =~$`5esn` As usn1 Order By True Contains {0} Contains 7 Ascending) Optional Match `8esn`=Allshortestpaths(((:usn1{_usn3:{#usn7}[`2esn`..]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]->(:usn1{``}))),`2esn`=((`3esn` {usn1:01 Ends With 999 Ends With {`7esn`},@usn6:0.0 Ends With 010 Ends With 1.e1})<-[`8esn`?{`2esn`:Count ( * ) Contains {`1esn`} Contains 07,#usn7:`7esn`[..2.12][..00]}]->(_usn3 :#usn7)<-[@usn5?]->(`1esn` :`5esn`{`5esn`:{``} Is Null})) Where $usn1[{`5esn`}][$`6esn`]"),
    octest_legacy:ct_string("Delete $`8esn`[..00] Remove Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 0.e0[123.654][01]).`2esn`,({#usn7:{123456789} Contains $#usn8})-[`7esn` *..0x0]-(`2esn` :_usn4)-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null}).usn2?,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 0[.e0..{`1esn`}]|010[#usn7..True]).`8esn`?"),
    octest_legacy:ct_string("Create Allshortestpaths((`3esn` :#usn8:#usn8)),((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})<-[?:@usn5{``:{`2esn`} Ends With {`7esn`}}]-(`2esn` :`2esn`:usn1{usn1:123.654 Is Not Null Is Not Null,`8esn`:@usn6 Is Null Is Null})-[`8esn`?:@usn6|`6esn`]-(`2esn` :`6esn`)) Start `4esn`=Node:_usn4(#usn7=\"d_str\")  Load Csv From `6esn`[2.12..01][{``}..False] As _usn4 Fieldterminator 's_str' Union Unwind Filter(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where .e0[..$`8esn`]) Starts With Case 2.12 Ends With $_usn3 Ends With `3esn` When {7}[$`5esn`][{_usn3}] Then #usn7 Starts With {#usn7} Starts With `7esn` When 123.654 Contains $`4esn` Contains 1.0 Then 0.e0[123.654][01] Else Null[{#usn7}..][0X0123456789ABCDEF..] End As _usn3 Create Unique Allshortestpaths((`8esn` :@usn5{usn2:{999} Is Null Is Null,`2esn`:`3esn`[{usn1}]})<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(_usn4 {`5esn`:\"d_str\" Starts With 01})<-[?:_usn3|_usn3{`5esn`:{`2esn`} Starts With 123456789,#usn7:0Xa =~123456789 =~_usn4}]-(:`3esn`:@usn5$usn2)),`5esn`=Shortestpath((((`3esn` :_usn3:_usn3{usn1:`1esn` Contains {usn2} Contains $#usn8})<-[@usn6:@usn5 *0Xa]->({`3esn`:9e1[2.12..{#usn8}]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}})))) Union Merge ((:_usn3:_usn3{`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]})<-[`3esn`?:_usn3|_usn3 *1000..00]-(#usn7 :_usn3:_usn3)) Create Unique ``=(((:@usn5{usn2:{``} Starts With $`2esn` Starts With `1esn`,`3esn`:$`5esn` In $`` In 123.654})-[`2esn`:usn1|@usn6{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]->({usn1:Count ( * )[0.12...e1],`6esn`:07 Contains 0X7 Contains $`8esn`})<-[:`6esn`|`5esn`*]-(`7esn` {`2esn`:_usn4 Starts With $_usn4 Starts With 12.e12,`1esn`:$#usn8[$`2esn`..][{`2esn`}..]}))) Merge #usn8=(_usn3 {`3esn`:False Is Null Is Null,`8esn`:2.12})-[:`5esn`{usn2:123.654[{7}..]}]->(@usn6 :_usn3:_usn3{`7esn`:$`6esn`[123456789..12][True..{`3esn`}],`5esn`:0X0123456789ABCDEF[123456789]})-[?{usn1:0[`7esn`..]}]->(`2esn` :`6esn`) On Match Set #usn8:usn2,usn1 =Reduce(`2esn`=1e1 In 123.654 In `3esn`,`5esn` In \"d_str\" Is Null Is Null|$_usn3[{#usn7}]) Is Not Null,`6esn` =0.e0 Starts With `2esn` On Create Set Extract(#usn7 In {``} Is Not Null Where 0.12 =~`5esn` =~`5esn`).`8esn` =1000[0X7..2.12],`1esn`+={`5esn`} Starts With @usn5 Starts With `7esn`,`5esn`+=123.654 Is Not Null"),
    octest_legacy:ct_string("Start _usn3=Node:`6esn`('s_str')  With  Filter(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where {`3esn`} In 01)[Extract(usn1 In @usn5 =~{`5esn`} =~`5esn` Where 12e12 Contains 0Xa|Null[$#usn7])..Allshortestpaths(((`` {`3esn`:{12} Contains {123456789} Contains `4esn`})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7})))][Reduce(`6esn`=7[..123456789][..{@usn6}],`5esn` In \"d_str\" Is Null Is Null|$_usn4 Is Not Null Is Not Null)..Extract(`` In 123456789 Ends With 12.e12 Ends With $`7esn` Where $`8esn`[1000..0Xa]|$`1esn` =~0X7)] As _usn4,Allshortestpaths((:@usn5{_usn3:07 =~01})) Starts With [`3esn` In {7} Is Null Where {`4esn`} =~{7} =~{`7esn`}] Starts With ({`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:_usn4|:usn2]-(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01})-[`1esn`?{`3esn`:$`6esn`[12],`3esn`:usn2 Is Not Null Is Not Null}]-(#usn8 {@usn5:123.654 Contains $`4esn` Contains 1.0,`6esn`:$`` =~12.0 =~$`7esn`}) Skip 7 Ends With (@usn5 {`7esn`:$`6esn`[010..]})-[:`8esn` *..01]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]}) Ends With #usn8(False =~$7 =~2.12) Where $_usn4 Starts With 1e1"),
    octest_legacy:ct_string("Merge usn2=Allshortestpaths((`1esn` :`5esn`{`5esn`:{``} Is Null})-[:@usn6|`6esn`{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null}]->(:usn1{#usn7:@usn6 Ends With {_usn3},`3esn`:$`1esn` Ends With 9e1 Ends With $123456789})<-[`2esn`?:`2esn`]->(`7esn` {``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})) Create Unique Allshortestpaths((:_usn4{usn2:0.0 Ends With 010 Ends With 1.e1})<-[@usn6:_usn4|:usn2]->(:`7esn`:_usn3{@usn5:.e0 Starts With 0 Starts With 0.e0,usn2:Count ( * ) Contains 07})-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null})),Allshortestpaths((:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})<-[#usn7{`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]}]-({#usn8:True[..$`6esn`]})<-[?:usn2|`` *0Xa{`8esn`:0.12 Starts With $`5esn` Starts With 12,`6esn`:$@usn6 Ends With $_usn4 Ends With 0.12}]->(#usn8 :`5esn`{`6esn`:2.12 Contains usn2 Contains True,`4esn`:{@usn5} Is Null Is Null})) Load Csv With Headers From 9e1 Ends With {usn2} Ends With True As @usn6 Fieldterminator 's_str'"),
    octest_legacy:ct_string("Detach Delete Allshortestpaths(((({#usn7:0Xa =~Null =~$``,`6esn`:$7[{usn2}..][{usn2}..]})<-[:usn2|``{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]->(`` :_usn3:_usn3{_usn4:{`4esn`} =~9e0 =~{12},#usn8:0[{usn2}..][$`6esn`..]})-[`4esn`]->(:`6esn`$123456789))))[Extract(@usn5 In 0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF] Where {_usn4} In {12} In $0)],\"d_str\" =~1000 =~{`1esn`},Case 123456789[0xabc..'s_str'][``..`1esn`] When 12.0[123.654][Count(*)] Then True Contains {0} Contains 7 End[[_usn3 In {`3esn`}[`2esn`] Where 7[{0}..{_usn4}]]..Case #usn7 Is Null Is Null When $@usn5 =~1000 =~1000 Then 0x0 Is Null End]"),
    octest_legacy:ct_string("Remove Allshortestpaths((:#usn8:#usn8{`2esn`:{`1esn`}[usn1][.e1],_usn4:#usn8 Is Not Null})-[usn1:`8esn`]-({_usn3:0.e0 Starts With `2esn`,#usn7:1.0 Is Null Is Null})).`6esn`!,(`4esn` :``:#usn8{`1esn`:$`5esn`[`3esn`..]})-[`7esn`*]->(:#usn7{@usn5:{12} =~#usn8})-[`4esn`:@usn5 *00{#usn8:{`7esn`} Starts With $123456789 Starts With $@usn6}]->(_usn4 ).`4esn`? Create `6esn`=((`2esn` :_usn4)),(((:#usn7{`3esn`:$`7esn` =~{`8esn`} =~$usn1})-[:`6esn`|`5esn` *123456789..]-(#usn7 :`1esn`{`2esn`:`4esn`[..Count ( * )][..{#usn7}],#usn8:{@usn6}[7]})-[usn2 *..010{usn2:01[2.12..`8esn`],_usn4:1.0 Starts With 12e12 Starts With {`5esn`}}]-(#usn8 :`4esn`{`8esn`:Count ( * ) Ends With 12.0,`7esn`:$`3esn` In $_usn4 In {_usn3}}))) Union All Load Csv From $`3esn` In $`6esn` In $`` As `4esn`  Optional Match `2esn`=(:`1esn`{``:.e1 Is Null Is Null})<-[#usn8?:usn1|@usn6]->(`6esn` {#usn7:$_usn4[1.e1]['s_str'],usn1:1e1 In 123.654 In `3esn`}),`6esn`=(((usn2 :``:#usn8)-[ *123456789..{`4esn`:0Xa[2.12],#usn7:0.e0 In $#usn7 In $_usn3}]-(@usn6 :`3esn`:@usn5)-[`7esn` *0X0123456789ABCDEF]->({#usn8:$`8esn`[1000..0Xa],#usn7:12.0}))) Using Index `5esn`:`1esn`(usn1) Where 07[..True][..9e12] Foreach(@usn5 In ({``:$`5esn`[{`3esn`}],_usn4:{usn1} In 2.12 In 1000})<-[usn1?:@usn5*]->(@usn6 :`1esn`{usn1:12[1.e1..{_usn3}][1.e1..1.0],@usn5:$999[0.0..]})<-[ *0X7..]->(usn1 {`1esn`:00[`2esn`..12][123456789..0.e0],`5esn`:#usn7}) In Filter(_usn4 In _usn3 Starts With 12.e12 Starts With 0.12 Where 07 In `2esn` In 12e12)| Start _usn4=Relationship(,) Where @usn5 In {`7esn`} In `2esn` With Distinct `5esn`[_usn4..],$123456789 In 0X0123456789ABCDEF In 0.e0 Where 7[True..][2.12..])"),
    octest_legacy:ct_string("Create Unique Allshortestpaths(((#usn7 :_usn3:_usn3{`8esn`:12 Ends With 0x0 Ends With 0.e0,usn1:#usn7 Contains _usn3 Contains {`3esn`}})<-[`6esn`?:#usn7]->(`3esn` {`5esn`:7[$`2esn`..{`5esn`}],@usn6:.e12[@usn5..#usn7][010..{usn1}]})-[`6esn`:``*..{_usn3:{`4esn`} Ends With {123456789} Ends With $`4esn`,``:9e1 In $`3esn` In $@usn6}]-({@usn6:$0[``][{@usn6}],@usn6:0e0 In @usn5}))) Union Create Unique Shortestpath(((#usn7 )-[`7esn`?*..]->(usn2 {@usn5:`2esn` Starts With $_usn4,`5esn`:\"d_str\" Starts With 01}))) Remove Single(`8esn` In $`5esn`[$`4esn`..{@usn6}][07..$@usn6] Where usn1 Ends With $@usn6 Ends With `3esn`).usn2?,All(`8esn` In 01[2.12..`8esn`] Where 0.e0[#usn8]).`7esn`"),
    octest_legacy:ct_string("Create `6esn`=Shortestpath((((`3esn` :`7esn`:_usn3{``:$123456789 Starts With 9e0 Starts With 's_str',``:{``} Is Not Null})<-[`8esn`]-(usn1 {`4esn`:.e1[..usn2][..`8esn`],``:{`3esn`} Is Not Null Is Not Null})-[`3esn`?:`` *..0x0{`4esn`:0.e0 Contains 9e1 Contains {`7esn`},@usn6:$@usn5 =~1000 =~1000}]->(:@usn5{_usn3:07 =~01})))),_usn3=((:`2esn`:usn1)<-[?:`1esn`{``:{`2esn`} Ends With {`7esn`}}]-(@usn6 {#usn7:2.12 Contains usn2 Contains True})<-[usn1:@usn6|`6esn`{`6esn`:{1000}[$`4esn`][\"d_str\"]}]->({`7esn`:1.0 =~7 =~{usn2},`8esn`:`3esn` In $0 In `1esn`})) Union Optional Match @usn6=(((@usn6 :`3esn`:@usn5)<-[`4esn`:`8esn` *00]-(`2esn` :`8esn`:`7esn`)<-[? *..999]->(`8esn` :usn2{usn2:$0,`4esn`:#usn8 Is Not Null Is Not Null}))),((:`1esn`{`5esn`:1.0 In Count(*)})) Remove (:#usn7)-[?:_usn3|_usn3]-({`3esn`:0.12[usn2..$`5esn`][$`4esn`..0X0123456789ABCDEF]})-[:#usn7 *..010]->(#usn8 :usn1).`7esn`,Filter(`1esn` In `8esn`[`4esn`..{#usn8}][$12..2.12] Where 12e12 Ends With {usn1}).`5esn`! Remove Single(`1esn` In {`6esn`}[..$@usn6][..`7esn`] Where 0.e0[123.654][01]).`2esn`,({#usn7:{123456789} Contains $#usn8})-[`7esn` *..0x0]-(`2esn` :_usn4)-[`3esn`?:@usn5]->(usn1 {`8esn`:False Is Null Is Null}).usn2?,Extract(@usn5 In 123456789 Ends With $`6esn` Ends With $#usn7 Where 0[.e0..{`1esn`}]|010[#usn7..True]).`8esn`? Union Match `5esn`=((({#usn7:{123456789}[0X0123456789ABCDEF..07][{`1esn`}.._usn4],#usn8:$usn1[.._usn4][..False]})<-[`3esn`?:_usn3|_usn3 *1000..00]-(#usn7 :_usn3:_usn3)<-[:`5esn`{@usn6:$#usn8 Ends With $`2esn` Ends With $@usn6,`6esn`:{7}[..12e12][..Count ( * )]}]->(#usn8 :_usn3:_usn3{`4esn`:{_usn3}[..$12][..0.12],`7esn`:1.0[0X7][{`5esn`}]}))) Using Join On ``,`4esn`,@usn6 Where $`5esn`[..$`5esn`][..$12]"),
    octest_legacy:ct_string("Load Csv From usn1 Is Null As @usn5 Fieldterminator 's_str' Delete 12.e12[9e12..{`6esn`}]"),
    octest_legacy:ct_string("Start `5esn`=Relationship:usn1({999}) Where {@usn5}[{#usn8}][9e0] Union Load Csv With Headers From `4esn` =~$`5esn` As #usn7 "),
    octest_legacy:ct_string("Delete `5esn`(Distinct `2esn` Is Null,123456789[{123456789}..'s_str'])[.._usn3(.e0[..$`8esn`])][..{``:01[{@usn5}],usn2:$`3esn`[..$123456789][..$`1esn`]}],{@usn5}[{999}] Union Create Unique (((`` :@usn5{`1esn`:2.12 Contains usn2 Contains True})-[`8esn`?:`2esn`*..{#usn7:`8esn` =~0xabc =~010,`5esn`:False Starts With {`5esn`}}]->({@usn6:0e0 Ends With 1.e1 Ends With $`4esn`,`8esn`:12e12 Ends With {usn1}})-[:usn1|@usn6]->({usn2:7[..999][..{#usn8}]}))),((_usn3 :usn2{`5esn`:$_usn4[Count ( * )..],#usn7:7[$`8esn`..123456789][$usn1..$usn1]})-[?:`6esn`|`5esn`{`4esn`:`7esn` In {123456789} In `1esn`,_usn3:$_usn4[Count ( * )..]}]-(:`3esn`:@usn5{#usn8:$`7esn` Is Null Is Null})) Union All Optional Match (#usn7 :usn1{_usn4:\"d_str\" Is Null Is Null,usn1:$`3esn` Is Null}),(({usn1:`5esn`[_usn4..]})-[usn1?:_usn3|_usn3]->(`2esn` :`3esn`:@usn5{`8esn`:_usn3 Starts With 12.e12 Starts With 0.12,#usn7:{7}[$``][{@usn6}]}))"),
    octest_legacy:ct_string("Merge _usn4=Shortestpath(({`7esn`:0e0 Contains Null,#usn7:1.0 In Count(*)})<-[{`5esn`:$_usn3 Contains 999 Contains \"d_str\",``:$usn1 Ends With $`` Ends With $12}]-(`3esn` :`5esn`)) Merge `1esn`=Allshortestpaths((((`4esn` :`2esn`:usn1{usn2:{``} Ends With `7esn` Ends With 0.0,usn1:True[..$`6esn`]})<-[usn1?:`8esn` *..010]-(@usn6 :`2esn`:usn1{_usn4:`5esn` Is Null})<-[`7esn`:`4esn` *0Xa{`4esn`:{0}[@usn6..$1000],`1esn`:{`2esn`} Starts With 123456789}]-(:`1esn`{`2esn`:$12 Is Null Is Null,_usn4:$#usn8[9e12..][.e1..]})))) Union With  $#usn7 Contains 0x0 Contains 1000,Shortestpath(({`7esn`:\"d_str\" Starts With $123456789})<-[`4esn`:``{usn1:`` Is Not Null Is Not Null,usn1:{1000}[{_usn3}..]}]->(`7esn` {`6esn`:$usn1 Ends With $`` Ends With $12,usn1:@usn6[$`3esn`..{`3esn`}]})-[`4esn`]->(:`6esn`$123456789)) Is Null As `4esn`,{@usn6} Is Not Null Is Not Null Order By 7[$`2esn`..{`5esn`}] Desc,0Xa[2.12] Desc,0.0 Asc Where $1000[Null][`4esn`]"),
    octest_legacy:ct_string("Detach Delete [#usn7 In `2esn`[..$#usn8][..Count(*)] Where \"d_str\" Starts With 01|{0} Ends With $_usn3 Ends With $`7esn`] Contains Case {0}[12.0..0Xa][$`5esn`..{_usn3}] When .e1 Ends With 1e1 Ends With @usn5 Then 01[{`2esn`}..{@usn6}][$`2esn`..0.0] Else 123.654[...e0] End,9e0[{0}..{`3esn`}][\"d_str\"..0Xa],``[12.0..0e0][{`5esn`}..`7esn`]"),
    octest_legacy:ct_string("Start #usn7=Relationship:usn2(`8esn`={`8esn`}) ,`4esn`=Node:@usn6({#usn7})").
